{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba","text":"<ul> <li>\u4e2d\u6587\u7248: \u53bb\u770b</li> <li>\u539f\u7248(en): see</li> </ul>"},{"location":"#\u6e90\u4fe1\u606f","title":"\u6e90\u4fe1\u606f","text":"<ul> <li>\u539f\u7f51\u7ad9: https://math.hws.edu/graphicsbook/index.html</li> <li>\u539fgithub\u6e90\u7801: https://github.com/davidjeck/graphicsbook</li> </ul>"},{"location":"cn/","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba","text":"<p>\u7248\u672c 1.4\uff0c2023 \u5e74 8 \u6708</p> <p>\u4f5c\u8005\uff1a  \u5927\u536b\u00b7J\u00b7\u57c3\u514b  ( eck@hws.edu )</p> <p></p> <p>\u6b22\u8fce\u9605\u8bfb\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b80\u4ecb\uff0c\u8fd9\u662f\u4e00\u672c\u514d\u8d39\u7684\u5728\u7ebf\u6559\u79d1\u4e66\uff0c\u6db5\u76d6\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u548c\u8ba1\u7b97\u673a\u56fe\u5f62\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u672c\u4e66\u65e8\u5728\u7528\u4f5c\u4e00\u5b66\u671f\u8bfe\u7a0b\u7684\u6559\u79d1\u4e66\uff0c\u8be5\u8bfe\u7a0b\u901a\u5e38\u7531\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u7684\u672c\u79d1\u751f\u5b66\u4e60\uff0c\u5e76\u4ee5\u81f3\u5c11\u4e24\u4e2a\u5b66\u671f\u7684\u7f16\u7a0b\u4e3a\u5148\u51b3\u6761\u4ef6\u3002 1.4 \u7248\u672c\u6dfb\u52a0\u4e86\u6709\u5173 WebGPU \u7684\u65b0\u7ae0\u8282\u3002\u8bf7\u53c2\u9605\u524d\u8a00\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002</p> <p>\u672c\u4e66\u7684\u7f51\u9875\u5305\u62ec\u5b9e\u65f6\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u9700\u8981\u73b0\u4ee3\u7f51\u7edc\u6d4f\u89c8\u5668\uff0c\u4f8b\u5982\u6700\u65b0\u7248\u672c\u7684 Chrome\u3001Firefox\u3001Safari \u6216 Edge\u3002\u7b2c 9 \u7ae0\u793a\u4f8b\u9700\u8981\u652f\u6301 WebGPU \u7684\u6d4f\u89c8\u5668\u3002\u867d\u7136\u672c\u4e66\u4e3b\u8981\u662f\u4e3a\u5728\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e0a\u9605\u8bfb\u800c\u8bbe\u8ba1\u7684\uff0c\u4f46\u5927\u591a\u6570\u6f14\u793a\u4e5f\u5e94\u8be5\u9002\u7528\u4e8e\u6700\u65b0\u7684\u79fb\u52a8\u8bbe\u5907\uff0c\u4f7f\u7528\u89e6\u6478\u5c4f\u800c\u4e0d\u662f\u9f20\u6807\u3002</p> <p>\u4e66\u4e2d\u4ee5\u8fd9\u79cd\u98ce\u683c\u663e\u793a\u6216\u5e26\u4e0b\u5212\u7ebf\u7684 \u5355\u8bcd\u6307\u7684\u662f\u672f\u8bed\u8868\u6761\u76ee\uff1b\u5355\u51fb\u8be5\u8bcd\u53ef\u67e5\u770b\u5b9a\u4e49\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u6b64\u7f51\u7ad9\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u4f7f\u7528\u3002\u8fd8\u63d0\u4f9b\u8be5\u6559\u79d1\u4e66\u7684 PDF \u7248\u672c\u3002\u4e0b\u8f7d\u94fe\u63a5\u53ef\u4ee5\u5728\u672c\u9875\u5e95\u90e8\u627e\u5230\u3002</p> <p>\u672c\u4e66\u7684\u7f51\u9875\u5305\u62ec\u5b9e\u65f6\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u9700\u8981\u73b0\u4ee3\u7f51\u7edc\u6d4f\u89c8\u5668\uff0c\u4f8b\u5982\u6700\u65b0\u7248\u672c\u7684 Chrome\u3001Firefox\u3001Safari \u6216 Edge\u3002\u7b2c 9 \u7ae0\u793a\u4f8b\u9700\u8981\u652f\u6301 WebGPU \u7684\u6d4f\u89c8\u5668\u3002\u867d\u7136\u672c\u4e66\u4e3b\u8981\u662f\u4e3a\u5728\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e0a\u9605\u8bfb\u800c\u8bbe\u8ba1\u7684\uff0c\u4f46\u5927\u591a\u6570\u6f14\u793a\u4e5f\u5e94\u8be5\u9002\u7528\u4e8e\u6700\u65b0\u7684\u79fb\u52a8\u8bbe\u5907\uff0c\u4f7f\u7528\u89e6\u6478\u5c4f\u800c\u4e0d\u662f\u9f20\u6807\u3002</p> <p>\u4e66\u4e2d\u4ee5\u8fd9\u79cd\u98ce\u683c\u663e\u793a\u6216\u5e26\u4e0b\u5212\u7ebf\u7684 \u5355\u8bcd\u6307\u7684\u662f\u672f\u8bed\u8868\u6761\u76ee\uff1b\u5355\u51fb\u8be5\u8bcd\u53ef\u67e5\u770b\u5b9a\u4e49\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u6b64\u7f51\u7ad9\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u4f7f\u7528\u3002\u8fd8\u63d0\u4f9b\u8be5\u6559\u79d1\u4e66\u7684 PDF \u7248\u672c\u3002\u4e0b\u8f7d\u94fe\u63a5\u53ef\u4ee5\u5728\u672c\u9875\u5e95\u90e8\u627e\u5230\u3002</p>"},{"location":"cn/#\u7b80\u77ed\u76ee\u5f55","title":"\u7b80\u77ed\u76ee\u5f55","text":"<ul> <li>\u5b8c\u6574\u76ee\u5f55</li> <li>\u524d\u8a00</li> <li>\u7b2c 1 \u7ae0\uff1a\u7b80\u4ecb</li> <li>\u7b2c 2 \u7ae0\uff1a\u4e8c\u7ef4\u56fe\u5f62</li> <li>\u7b2c 3 \u7ae0\uff1aOpenGL 1.1\uff1a\u51e0\u4f55</li> <li>\u7b2c 4 \u7ae0\uff1aOpenGL 1.1\uff1a\u706f\u5149\u548c\u6750\u8d28</li> <li>\u7b2c 5 \u7ae0\uff1aThree.js\uff1a3D \u573a\u666f\u56fe API</li> <li>\u7b2c 6 \u7ae0\uff1aWebGL \u7b80\u4ecb</li> <li>\u7b2c 7 \u7ae0\uff1a\u4f7f\u7528 WebGL \u8fdb\u884c 3D \u56fe\u5f62</li> <li>\u7b2c 8 \u7ae0\uff1a\u8d85\u8d8a\u57fa\u672c 3D \u56fe\u5f62</li> <li>\u7b2c 9 \u7ae0\uff1aWebGPU \u7b80\u4ecb</li> <li>\u9644\u5f55 A\uff1a\u7f16\u7a0b\u8bed\u8a00</li> <li>\u9644\u5f55 B\uff1aBlender\uff1a3D \u5efa\u6a21\u7a0b\u5e8f</li> <li>\u9644\u5f55 C\uff1a\u7528\u4e8e 2D \u56fe\u5f62\u7684 Gimp \u548c Inkscape</li> <li>\u9644\u5f55 D\uff1a\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801</li> <li>\u9644\u5f55 E\uff1a\u672f\u8bed\u8868</li> <li>\u65b0\u95fb</li> </ul> <p>\u00a92015\u20132023\uff0c\u5927\u536b\u00b7J\u00b7\u57c3\u514b\u3002\u672c\u4f5c\u54c1\u6839\u636eCreative Commons Attribution-Noncommercial-ShareAlike 4.0 License \u83b7\u5f97\u8bb8\u53ef\u3002 \uff08\u6b64\u8bb8\u53ef\u5141\u8bb8\u60a8\u4ee5\u672a\u7ecf\u4fee\u6539\u7684\u5f62\u5f0f\u91cd\u65b0\u5206\u53d1\u672c\u4e66\u4ee5\u7528\u4e8e\u975e\u5546\u4e1a\u76ee\u7684\u3002\u5b83\u5141\u8bb8\u60a8\u51fa\u4e8e\u975e\u5546\u4e1a\u76ee\u7684\u5236\u4f5c\u548c\u5206\u53d1\u4fee\u6539\u7248\u672c\uff0c\u53ea\u8981\u60a8\u5305\u542b\u539f\u4f5c\u8005\u7684\u5f52\u5c5e\uff0c\u6e05\u695a\u5730\u63cf\u8ff0\u4fee\u6539\u5185\u5bb9\u60a8\u5236\u4f5c\u5e76\u5728\u4e0e\u539f\u59cb\u4f5c\u54c1\u76f8\u540c\u7684\u8bb8\u53ef\u4e0b\u5206\u53d1\u4fee\u6539\u540e\u7684\u4f5c\u54c1\uff0c\u4f5c\u8005\u53ef\u80fd\u4f1a\u6388\u4e88\u5176\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u7684\u8bb8\u53ef\u3002\u6709\u5173\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8bb8\u53ef \u3002\uff09 \u672c\u4e66\u7684\u4e3b\u9875\u662f\uff1a http://math.hws.edu/graphicsbook/</p>"},{"location":"cn/#\u4e0b\u8f7d\u94fe\u63a5","title":"\u4e0b\u8f7d\u94fe\u63a5","text":"<ul> <li> <p>\u5b8c\u6574\u7f51\u7ad9\u4e0b\u8f7d\uff1a</p> <ul> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook-web-site.zip \u2014 \u6b64\u201czip\u201d\u5b58\u6863\u5305\u542b\u672c\u6559\u79d1\u4e66\u7f51\u7ad9\u7684\u5b8c\u6574\u526f\u672c\u3002\u60a8\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u7f51\u7edc\u670d\u52a1\u5668\u4e0a\u53d1\u5e03\u7f51\u7ad9\u7684\u526f\u672c\uff0c\u4e5f\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u672c\u5730\u4f7f\u7528\u5b83\u3002\u5927\u5c0f\uff1a26 \u5146\u5b57\u8282\u3002</li> </ul> </li> <li> <p>PDF\u4e0b\u8f7d\uff1a</p> <ul> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook-linked.pdf \u2014 PDF \u7248\u672c\uff0c\u5305\u542b\u7528\u4e8e\u5bfc\u822a\u7684\u5185\u90e8\u94fe\u63a5\u4ee5\u53ca\u6307\u5411\u6e90\u4ee3\u7801\u6587\u4ef6\u548c PDF \u4e2d\u672a\u5305\u542b\u7684\u5176\u4ed6\u8d44\u6e90\u7684\u5916\u90e8\u94fe\u63a5\u3002\u63a8\u8350\u7528\u4e8e\u5c4f\u5e55\u9605\u8bfb\u3002 533 \u9875\u3002\u5927\u5c0f\uff1a6.0 \u5146\u5b57\u8282\u3002</li> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook.pdf \u2014 \u6ca1\u6709\u94fe\u63a5\u7684 PDF \u7248\u672c\uff0c\u66f4\u9002\u5408\u6253\u5370\u3002 541 \u9875\u3002\u5927\u5c0f\uff1a5.6 \u5146\u5b57\u8282\u3002</li> </ul> </li> </ul>"},{"location":"cn/#\u5370\u5237\u7248","title":"\u5370\u5237\u7248","text":"<p>\u7f51\u7ad9\u548c\u94fe\u63a5\u7684 PDF \u662f\u9605\u8bfb\u672c\u4e66\u7684\u9996\u9009\u7248\u672c\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u9700\u8981\u88c5\u8ba2\u672c\u7684\u8bfb\u8005\uff0c\u6211\u5728\u6309\u9700\u53d1\u5e03\u7f51\u7ad9lulu.com\u4e0a\u63d0\u4f9b\u4e86\u5370\u5237\u7248\u672c\u3002 \uff08\u8bf7\u6ce8\u610f\uff0c\u5370\u5237\u7248\u6309 lulu.com \u7684\u6210\u672c\u51fa\u552e\uff0c\u6211\u4e0d\u4f1a\u4ece\u4e2d\u8d5a\u53d6\u4efb\u4f55\u5229\u6da6\u3002\uff09\u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64\u94fe\u63a5\u8d2d\u4e70\u5370\u5237\u7248\uff1ahttps://www.lulu.com/shop/david-eck/introduction-to-computer-graphics/paperback/product-1jzn2z5r.html</p> <ul> <li>1 August 2015, Version 1.0 released</li> <li>28 January 2016, Version 1.1 released</li> <li>6 January 2018, Version 1.2 released</li> <li>1 August 2021, Version 1.3 released</li> <li>20 December 2021, Version 1.3.1 released</li> <li>1 August 2023, Version 1.4 released</li> </ul>"},{"location":"cn/contents-with-subsections/","title":"\u76ee\u5f55","text":"<p>\u8fd9\u662f\u514d\u8d39\u5728\u7ebf\u6559\u79d1\u4e66\u300a\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba\u300b\u7684\u76ee\u5f55\u3002</p> <p>\u524d\u8a00</p>"},{"location":"cn/contents-with-subsections/#\u7b2c\u4e00\u7ae0-\u7b80\u4ecb","title":"\u7b2c\u4e00\u7ae0\uff1a \u7b80\u4ecb","text":"<ul> <li>1.1  \u7ed8\u753b\u4e0e\u7ed8\u56fe</li> <li>1.2  3D\u56fe\u5f62\u5143\u7d20</li> <li>1.3  \u786c\u4ef6\u548c\u8f6f\u4ef6</li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-2-\u7ae0-\u4e8c\u7ef4\u56fe\u5f62","title":"\u7b2c 2 \u7ae0\uff1a  \u4e8c\u7ef4\u56fe\u5f62","text":"<ul> <li>2.1  \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272<ul> <li>2.1.1  \u50cf\u7d20\u5750\u6807</li> <li>2.1.2  \u5b9e\u6570\u5750\u6807\u7cfb</li> <li>2.1.3  \u7eb5\u6a2a\u6bd4</li> <li>2.1.4  \u989c\u8272\u6a21\u578b</li> </ul> </li> <li>2.2  \u5f62\u72b6<ul> <li>2.2.1  \u57fa\u672c\u5f62\u72b6</li> <li>2.2.2  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.2.3  \u591a\u8fb9\u5f62\u3001\u66f2\u7ebf\u548c\u8def\u5f84</li> </ul> </li> <li>2.3  \u53d8\u6362<ul> <li>2.3.1  \u67e5\u770b\u548c\u5efa\u6a21</li> <li>2.3.2  \u7ffb\u8bd1</li> <li>2.3.3  \u65cb\u8f6c</li> <li>2.3.4  \u7ec4\u5408\u53d8\u6362</li> <li>2.3.5  \u7f29\u653e</li> <li>2.3.6  \u526a\u5207</li> <li>2.3.7  \u7a97\u53e3\u5230\u89c6\u53e3</li> <li>2.3.8  \u77e9\u9635\u548c\u5411\u91cf</li> </ul> </li> <li>2.4  \u5c42\u6b21\u5efa\u6a21<ul> <li>2.4.1  \u6784\u5efa\u590d\u6742\u5bf9\u8c61</li> <li>2.4.2  \u573a\u666f\u56fe</li> <li>2.4.3  \u53d8\u6362\u5806\u6808</li> </ul> </li> <li>2.5  Java Graphics2D<ul> <li>2.5.1  \u4e8c\u7ef4\u56fe\u5f62</li> <li>2.5.2  \u5f62\u72b6</li> <li>2.5.3  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.5.4  \u53d8\u6362</li> <li>2.5.5  BufferedImage \u548c\u50cf\u7d20</li> </ul> </li> <li>\u7b2c 2.6 \u8282  HTML Canvas \u56fe\u5f62<ul> <li>2.6.1  2D \u56fe\u5f62\u4e0a\u4e0b\u6587</li> <li>2.6.2  \u5f62\u72b6</li> <li>2.6.3  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.6.4  \u53d8\u6362</li> <li>2.6.5  \u8f85\u52a9\u753b\u5e03</li> <li>2.6.6  \u50cf\u7d20\u64cd\u4f5c</li> <li>2.6.7  \u56fe\u7247</li> </ul> </li> <li>2.7  SVG\uff1a\u573a\u666f\u63cf\u8ff0\u8bed\u8a00<ul> <li>2.7.1  SVG \u6587\u6863\u7ed3\u6784</li> <li>2.7.2  \u5f62\u72b6\u3001\u6837\u5f0f\u548c\u53d8\u6362</li> <li>2.7.3  \u591a\u8fb9\u5f62\u548c\u8def\u5f84</li> <li>2.7.4  \u5c42\u6b21\u6a21\u578b</li> <li>2.7.5  \u52a8\u753b</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-3-\u7ae0-opengl-11\u51e0\u4f55","title":"\u7b2c 3 \u7ae0\uff1a OpenGL 1.1\uff1a\u51e0\u4f55","text":"<ul> <li>3.1  OpenGL 1.1 \u4e2d\u7684\u5f62\u72b6\u548c\u989c\u8272<ul> <li>3.1.1  OpenGL\u57fa\u5143</li> <li>3.1.2  OpenGL\u989c\u8272</li> <li>3.1.3  glColor \u548c glVertex \u4e0e\u6570\u7ec4</li> <li>3.1.4  \u6df1\u5ea6\u6d4b\u8bd5</li> </ul> </li> <li>3.2  3D \u5750\u6807\u548c\u53d8\u6362<ul> <li>3.2.1  3D\u5750\u6807</li> <li>3.2.2  \u57fa\u672c 3D \u53d8\u6362</li> <li>3.2.3  \u5c42\u6b21\u5efa\u6a21</li> </ul> </li> <li>3.3  \u6295\u5f71\u4e0e\u89c2\u770b<ul> <li>3.3.1  \u591a\u79cd\u5750\u6807\u7cfb</li> <li>3.3.2  \u89c6\u53e3\u53d8\u6362</li> <li>3.3.3  \u6295\u5f71\u53d8\u6362</li> <li>3.3.4  \u6a21\u578b\u89c6\u56fe\u8f6c\u6362</li> <li>3.3.5  \u76f8\u673a\u62bd\u8c61</li> </ul> </li> <li>3.4  \u591a\u8fb9\u5f62\u7f51\u683c\u548c glDrawArrays<ul> <li>3.4.1  \u7d22\u5f15\u9762\u96c6</li> <li>3.4.2  glDrawArrays\u548cglDrawElements</li> <li>3.4.3  Java \u4e2d\u7684\u6570\u636e\u7f13\u51b2\u533a</li> <li>3.4.4  \u663e\u793a\u5217\u8868\u548cVBO</li> </ul> </li> <li>3.5  \u90e8\u5206\u7ebf\u6027\u4ee3\u6570\u57fa\u7840<ul> <li>3.5.1  \u5411\u91cf\u548c\u5411\u91cf\u6570\u5b66</li> <li>3.5.2  \u77e9\u9635\u548c\u53d8\u6362</li> <li>3.5.3  \u9f50\u6b21\u5750\u6807</li> </ul> </li> <li>3.6  \u4f7f\u7528 GLUT \u548c JOGL<ul> <li>3.6.1  \u4f7f\u7528\u8fc7\u5269</li> <li>3.6.2  \u4f7f\u7528JOGL</li> <li>3.6.3  \u5173\u4e8e glsim.js</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-4-\u7ae0-opengl-11\u706f\u5149\u548c\u6750\u8d28","title":"\u7b2c 4 \u7ae0\uff1a OpenGL 1.1\uff1a\u706f\u5149\u548c\u6750\u8d28","text":"<ul> <li>4.1  \u7167\u660e\u7b80\u4ecb<ul> <li>4.1.1  \u5149\u4e0e\u6750\u6599</li> <li>4.1.2  \u5149\u5c5e\u6027</li> <li>4.1.3  \u6cd5\u5411\u91cf</li> <li>4.1.4  OpenGL 1.1 \u5149\u7167\u65b9\u7a0b</li> </ul> </li> <li>4.2  OpenGL 1.1 \u4e2d\u7684\u5149\u548c\u6750\u8d28<ul> <li>4.2.1  \u4f7f\u7528\u6750\u6599</li> <li>4.2.2  \u5b9a\u4e49\u6cd5\u5411\u91cf</li> <li>4.2.3  \u4f7f\u7528\u706f\u5149</li> <li>4.2.4  \u5168\u5c40\u5149\u7167\u5c5e\u6027</li> </ul> </li> <li>4.3  \u56fe\u50cf\u7eb9\u7406<ul> <li>4.3.1  \u7eb9\u7406\u5750\u6807</li> <li>4.3.2  MipMap \u548c\u8fc7\u6ee4</li> <li>4.3.3  \u7eb9\u7406\u76ee\u6807\u548c\u7eb9\u7406\u53c2\u6570</li> <li>4.3.4  \u7eb9\u7406\u53d8\u6362</li> <li>4.3.5  \u4ece\u5185\u5b58\u52a0\u8f7d\u7eb9\u7406</li> <li>4.3.6  \u6765\u81ea\u989c\u8272\u7f13\u51b2\u533a\u7684\u7eb9\u7406</li> <li>4.3.7  \u7eb9\u7406\u5bf9\u8c61</li> <li>4.3.8  \u5728 C \u4e2d\u52a0\u8f7d\u7eb9\u7406</li> <li>4.3.9  \u901a\u8fc7 JOGL \u4f7f\u7528\u7eb9\u7406</li> </ul> </li> <li>4.4  \u706f\u5149\u3001\u76f8\u673a\u3001\u52a8\u4f5c<ul> <li>4.4.1  \u5c5e\u6027\u6808</li> <li>4.4.2  \u79fb\u52a8\u76f8\u673a</li> <li>4.4.3  \u79fb\u52a8\u5149</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-5-\u7ae0-threejs3d-\u573a\u666f\u56fe-api","title":"\u7b2c 5 \u7ae0\uff1a Three.js\uff1a3D \u573a\u666f\u56fe API","text":"<ul> <li>5.1  Three.js \u57fa\u7840\u77e5\u8bc6<ul> <li>5.1.1  \u5173\u4e8e JavaScript \u6a21\u5757</li> <li>5.1.2  \u573a\u666f\u3001\u6e32\u67d3\u5668\u3001\u76f8\u673a</li> <li>5.1.3  \u4e09.Object3D</li> <li>5.1.4  \u7269\u4f53\u3001\u51e0\u4f55\u5f62\u72b6\u3001\u6750\u6599</li> <li>5.1.5  \u706f\u5149</li> <li>5.1.6  \u5efa\u6a21\u793a\u4f8b</li> </ul> </li> <li>5.2  \u6784\u5efa\u5bf9\u8c61<ul> <li>5.2.1  \u591a\u8fb9\u5f62\u7f51\u683c\u548c IFS</li> <li>5.2.2  \u66f2\u7ebf\u548c\u66f2\u9762</li> <li>5.2.3  \u7eb9\u7406</li> <li>5.2.4  \u53d8\u6362</li> <li>5.2.5  \u52a0\u8f7d\u6a21\u578b</li> </ul> </li> <li>5.3  \u5176\u4ed6\u529f\u80fd<ul> <li>5.3.1  \u5b9e\u4f8b\u5316\u7f51\u683c</li> <li>5.3.2  \u7528\u6237\u8f93\u5165</li> <li>5.3.3  \u9634\u5f71</li> <li>5.3.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u548c\u5929\u7a7a\u76d2</li> <li>5.3.5  \u53cd\u5c04\u548c\u6298\u5c04</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-6-\u7ae0-webgl-\u7b80\u4ecb","title":"\u7b2c 6 \u7ae0\uff1a  WebGL \u7b80\u4ecb","text":"<ul> <li>6.1  \u53ef\u7f16\u7a0b\u6d41\u6c34\u7ebf<ul> <li>6.1.1  WebGL \u56fe\u5f62\u4e0a\u4e0b\u6587</li> <li>6.1.2  \u7740\u8272\u5668\u7a0b\u5e8f</li> <li>6.1.3  \u7ba1\u9053\u4e2d\u7684\u6570\u636e\u6d41</li> <li>6.1.4  \u7edf\u4e00\u53d8\u91cf\u7684\u503c</li> <li>6.1.5  \u5c5e\u6027\u503c</li> <li>6.1.6  \u7ed8\u5236\u57fa\u5143</li> <li>6.1.7  WebGL 2.0\uff1a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61</li> <li>6.1.8  WebGL 2.0\uff1a\u5b9e\u4f8b\u5316\u7ed8\u56fe</li> </ul> </li> <li>6.2  \u7b2c\u4e00\u4e2a\u4f8b\u5b50<ul> <li>6.2.1  WebGL \u4e0a\u4e0b\u6587\u9009\u9879</li> <li>6.2.2  GLSL \u7b80\u4ecb</li> <li>6.2.3  WebGL \u4e2d\u7684 RGB \u4e09\u89d2\u5f62</li> <li>6.2.4  \u5f62\u72b6\u538b\u6a21</li> <li>6.2.5  POINTS\u539f\u8bed</li> <li>6.2.6  WebGL \u9519\u8bef\u5904\u7406</li> </ul> </li> <li>6.3  GLSL<ul> <li>6.3.1  \u57fa\u672c\u7c7b\u578b</li> <li>6.3.2  \u6570\u636e\u7ed3\u6784</li> <li>6.3.3  \u9884\u9009\u8d5b</li> <li>6.3.4  \u8868\u8fbe\u5f0f</li> <li>6.3.5  \u51fd\u6570\u5b9a\u4e49</li> <li>6.3.6  \u63a7\u5236\u7ed3\u6784</li> <li>6.3.7  \u9650\u5236</li> </ul> </li> <li>6.4  \u56fe\u50cf\u7eb9\u7406<ul> <li>6.4.1  \u7eb9\u7406\u5355\u5143\u548c\u7eb9\u7406\u5bf9\u8c61</li> <li>6.4.2  \u5904\u7406\u56fe\u50cf</li> <li>6.4.3  \u66f4\u591a\u5236\u4f5c\u7eb9\u7406\u7684\u65b9\u6cd5</li> <li>6.4.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> <li>6.4.5  \u8ba1\u7b97\u793a\u4f8b</li> <li>6.4.6  WebGL 2.0 \u4e2d\u7684\u7eb9\u7406</li> </ul> </li> <li>6.5  \u5b9e\u73b0 2D \u53d8\u6362<ul> <li>6.5.1  GLSL \u4e2d\u7684\u8f6c\u6362</li> <li>6.5.2  JavaScript \u4e2d\u7684\u8f6c\u6362</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-7-\u7ae0-\u4f7f\u7528-webgl-\u8fdb\u884c-3d-\u56fe\u5f62","title":"\u7b2c 7 \u7ae0\uff1a \u4f7f\u7528 WebGL \u8fdb\u884c 3D \u56fe\u5f62","text":"<ul> <li>7.1  3D\u53d8\u6362<ul> <li>7.1.1  \u5173\u4e8e\u7740\u8272\u5668\u811a\u672c</li> <li>7.1.2  \u4ecb\u7ecdglMatrix</li> <li>7.1.3  \u53d8\u6362\u5750\u6807</li> <li>7.1.4  \u53d8\u6362\u6cd5\u7ebf</li> <li>7.1.5  \u9f20\u6807\u65cb\u8f6c</li> </ul> </li> <li>7.2 \u7167\u660e\u548c\u6750\u6599<ul> <li>7.2.1  \u6700\u5c0f\u7167\u660e</li> <li>7.2.2  \u955c\u9762\u53cd\u5c04\u548c Phong \u7740\u8272</li> <li>7.2.3  \u589e\u52a0\u590d\u6742\u6027</li> <li>7.2.4  \u4e24\u4fa7\u7167\u660e</li> <li>7.2.5  \u6447\u5934\u706f</li> <li>7.2.6  \u805a\u5149\u706f</li> <li>7.2.7  \u5149\u8870\u51cf</li> <li>7.2.8  \u78c1\u76d8\u4e16\u754c2</li> </ul> </li> <li>7.3 \u7eb9\u7406<ul> <li>7.3.1  \u4f7f\u7528 glMatrix \u8fdb\u884c\u7eb9\u7406\u53d8\u6362</li> <li>7.3.2  \u751f\u6210\u7684\u7eb9\u7406\u5750\u6807</li> <li>7.3.3  \u7a0b\u5e8f\u7eb9\u7406</li> <li>7.3.4  \u51f9\u51f8\u8d34\u56fe</li> <li>7.3.5  \u73af\u5883\u6620\u5c04</li> </ul> </li> <li>7.4 \u5e27\u7f13\u51b2\u533a<ul> <li>7.4.1  \u5e27\u7f13\u51b2\u533a\u64cd\u4f5c</li> <li>7.4.2  \u6e32\u67d3\u5230\u7eb9\u7406</li> <li>7.4.3  \u6e32\u67d3\u7f13\u51b2\u533a</li> <li>7.4.4  \u52a8\u6001\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> </ul> </li> <li>7.5 WebGL \u6269\u5c55<ul> <li>7.5.1  \u5404\u5411\u5f02\u6027\u8fc7\u6ee4</li> <li>7.5.2  \u6d6e\u70b9\u989c\u8272</li> <li>7.5.3  WebGL 1.0 \u4e2d\u7684\u5b9e\u4f8b\u5316\u7ed8\u56fe</li> <li>7.5.4  \u5ef6\u8fdf\u7740\u8272</li> <li>7.5.5  WebGL 2.0 \u4e2d\u7684\u591a\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-8-\u7ae0-\u8d85\u8d8a\u57fa\u672c-3d-\u56fe\u5f62","title":"\u7b2c 8 \u7ae0\uff1a \u8d85\u8d8a\u57fa\u672c 3D \u56fe\u5f62","text":"<ul> <li>8.1  \u5149\u7ebf\u8ffd\u8e2a<ul> <li>8.1.1  \u5149\u7ebf\u6295\u5c04</li> <li>8.1.2  \u9012\u5f52\u5149\u7ebf\u8ffd\u8e2a</li> <li>8.1.3  \u5149\u7ebf\u8ffd\u8e2a\u7684\u5c40\u9650\u6027</li> </ul> </li> <li>8.2  \u8def\u5f84\u8ffd\u8e2a<ul> <li>8.2.1  BSDF</li> <li>8.2.2  \u8def\u5f84\u8ffd\u8e2a\u7b97\u6cd5</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-9-\u7ae0-webgpu-\u7b80\u4ecb","title":"\u7b2c 9 \u7ae0\uff1a WebGPU \u7b80\u4ecb","text":"<ul> <li>9.1  WebGPU \u57fa\u7840\u77e5\u8bc6<ul> <li>9.1.1  \u9002\u914d\u5668\u3001\u8bbe\u5907\u548c\u753b\u5e03</li> <li>9.1.2  \u7740\u8272\u5668\u6a21\u5757</li> <li>9.1.3  \u6e32\u67d3\u7ba1\u7ebf</li> <li>9.1.4  \u7f13\u51b2\u533a</li> <li>9.1.5  \u7ed8\u56fe</li> <li>9.1.6  \u591a\u4e2a\u9876\u70b9\u8f93\u5165</li> <li>9.1.7  \u81ea\u52a8\u7ed1\u5b9a\u7ec4\u5e03\u5c40</li> </ul> </li> <li>9.2  \u5b9e\u4f8b\u548c\u7d22\u5f15<ul> <li>9.2.1  \u5b9e\u4f8b\u7ed8\u56fe</li> <li>9.2.2  \u7d22\u5f15\u7ed8\u56fe</li> <li>9.2.3  \u7ed8\u5236\u591a\u4e2a\u57fa\u5143</li> <li>9.2.4  \u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u7d22\u5f15</li> <li>9.2.5  \u591a\u91cd\u91c7\u6837</li> </ul> </li> <li>9.3  WGSL<ul> <li>9.3.1  \u5730\u5740\u7a7a\u95f4\u548c\u5bf9\u9f50</li> <li>9.3.2  \u6570\u636e\u7c7b\u578b</li> <li>9.3.3  \u58f0\u660e\u548c\u6ce8\u91ca</li> <li>9.3.4  \u8868\u8fbe\u5f0f\u548c\u5185\u7f6e\u51fd\u6570</li> <li>9.3.5  \u8bed\u53e5\u548c\u63a7\u5236</li> <li>9.3.6  \u51fd\u6570\u5b9a\u4e49</li> </ul> </li> <li>9.4  \u4f7f\u7528 WebGPU \u7684 3D \u56fe\u5f62<ul> <li>9.4.1  \u6df1\u5ea6\u6d4b\u8bd5</li> <li>9.4.2  \u5750\u6807\u7cfb</li> <li>9.4.3  \u8fdb\u5165 3D</li> <li>9.4.4  wgpu \u77e9\u9635</li> <li>9.4.5  \u518d\u6b21\u78c1\u76d8\u4e16\u754c</li> </ul> </li> <li>9.5  \u7eb9\u7406<ul> <li>9.5.1  \u7eb9\u7406\u5750\u6807</li> <li>9.5.2  \u7eb9\u7406\u548c\u91c7\u6837\u5668</li> <li>9.5.3  Mipmap</li> <li>9.5.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> <li>9.5.5  \u7eb9\u7406\u683c\u5f0f</li> </ul> </li> <li>9.6  \u8ba1\u7b97\u7740\u8272\u5668<ul> <li>9.6.1  \u5de5\u4f5c\u7ec4\u548c\u8c03\u5ea6</li> <li>9.6.2  \u8ba1\u7b97\u7740\u8272\u5668</li> <li>9.6.3  \u6a21\u62df</li> <li>9.6.4  \u68c0\u7d22\u8f93\u51fa</li> </ul> </li> <li>9.7  \u4e00\u4e9b\u7ec6\u8282<ul> <li>9.7.1  \u4e22\u5931\u8bbe\u5907</li> <li>9.7.2  \u9519\u8bef\u5904\u7406</li> <li>9.7.3  \u9650\u5236\u548c\u7279\u5f81</li> <li>9.7.4  \u6e32\u67d3\u901a\u9053\u9009\u9879</li> <li>9.7.5  \u6e32\u67d3\u7ba1\u7ebf\u9009\u9879</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-a-\u7f16\u7a0b\u8bed\u8a00","title":"\u9644\u5f55 A\uff1a \u7f16\u7a0b\u8bed\u8a00","text":"<ul> <li>A.1  Java \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.1.1  \u57fa\u672c\u8bed\u8a00\u7ed3\u6784</li> <li>A.1.2  \u5bf9\u8c61\u548c\u6570\u636e\u7ed3\u6784</li> <li>A.1.3  \u7a97\u53e3\u548c\u4e8b\u4ef6</li> </ul> </li> <li>A.2  C \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.2.1  \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6</li> <li>A.2.2  \u6307\u9488\u548c\u6570\u7ec4</li> <li>A.2.3  \u6570\u636e\u7ed3\u6784</li> </ul> </li> <li>A.3  JavaScript \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.3.1  \u6838\u5fc3\u8bed\u8a00</li> <li>A.3.2  \u6570\u7ec4\u548c\u5bf9\u8c61</li> <li>A.3.3  \u7f51\u9875\u4e0a\u7684 JavaScript</li> <li>A.3.4  \u4e0e\u9875\u9762\u4ea4\u4e92</li> </ul> </li> <li>A.4  JavaScript Promise \u548c\u5f02\u6b65\u51fd\u6570<ul> <li>A.4.1  \u5f02\u6b65\u51fd\u6570\u548c\u7b49\u5f85</li> <li>A.4.2  \u76f4\u63a5\u4f7f\u7528 Promise</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-b-blender3d-\u5efa\u6a21\u7a0b\u5e8f","title":"\u9644\u5f55 B\uff1a Blender\uff1a3D \u5efa\u6a21\u7a0b\u5e8f","text":"<ul> <li>B.1 \u8282  Blender \u57fa\u7840\u77e5\u8bc6<ul> <li>B.1.1  3D \u89c6\u56fe</li> <li>B.1.2  \u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u573a\u666f\u4e2d</li> <li>B.1.3  \u7f16\u8f91\u6a21\u5f0f</li> <li>B.1.4  \u5149\u3001\u6750\u8d28\u548c\u7eb9\u7406</li> <li>B.1.5  \u4fdd\u5b58\u60a8\u7684\u5de5\u4f5c</li> <li>B.1.6  \u66f4\u591a\u529f\u80fd</li> </ul> </li> <li>B.2 \u8282  Blender \u5efa\u6a21<ul> <li>B.2.1  \u6587\u672c</li> <li>B.2.2  \u66f2\u7ebf</li> <li>B.2.3  \u6bd4\u4f8b\u7f16\u8f91</li> <li>B.2.4  \u62c9\u4f38\u7f51\u683c</li> <li>B.2.5  \u7f51\u683c\u4fee\u6539\u5668</li> </ul> </li> <li>B.3 \u8282  Blender \u52a8\u753b<ul> <li>B.3.1  \u5173\u952e\u5e27\u52a8\u753b\u548c\u51fd\u6570\u66f2\u7ebf</li> <li>B.3.2  \u8ffd\u8e2a</li> <li>B.3.3  \u8def\u5f84\u52a8\u753b</li> <li>B.3.4  \u6e32\u67d3\u52a8\u753b</li> </ul> </li> <li>B.4 \u8282  \u6709\u5173\u5149\u548c\u6750\u6599\u7684\u66f4\u591a\u4fe1\u606f<ul> <li>B.4.1  \u7167\u660e</li> <li>B.4.2  Eevee \u4e0e Cycles</li> <li>B.4.3  \u7740\u8272\u5668\u7f16\u8f91\u5668</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-c-\u7528\u4e8e-2d-\u56fe\u5f62\u7684-gimp-\u548c-inkscape","title":"\u9644\u5f55 C\uff1a \u7528\u4e8e 2D \u56fe\u5f62\u7684 Gimp \u548c Inkscape","text":"<ul> <li>C.1 \u8282  Gimp\uff1a2D \u7ed8\u753b\u7a0b\u5e8f<ul> <li>C.1.1  \u7ed8\u753b\u5de5\u5177</li> <li>C.1.2  \u9009\u62e9\u548c\u8def\u5f84</li> <li>C.1.3  \u5c42</li> </ul> </li> <li>C.2 \u8282  Inkscape\uff1a2D \u7ed8\u56fe\u7a0b\u5e8f</li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-d-\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801","title":"\u9644\u5f55 D\uff1a \u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801","text":""},{"location":"cn/contents-with-subsections/#\u9644\u5f55-e-\u672f\u8bed\u8868","title":"\u9644\u5f55 E\uff1a \u672f\u8bed\u8868","text":""},{"location":"cn/glossary/","title":"\u672f\u8bed\u8868","text":""},{"location":"cn/glossary/#a","title":"A","text":""},{"location":"cn/glossary/#abstract-class","title":"abstract class","text":"\u4e2d\u6587\u82f1\u6587 <p>In object-oriented programming, a class that is meant to be used only as a basis for subclasses. Objects can be created from the subclasses, but not from the abstract class itself. The purpose of an abstract class is to define the properties and behaviors that all of its subclasses have in common.</p> <p>In object-oriented programming, a class that is meant to be used only as a basis for subclasses. Objects can be created from the subclasses, but not from the abstract class itself. The purpose of an abstract class is to define the properties and behaviors that all of its subclasses have in common.</p>"},{"location":"cn/glossary/#address-space-in-wgsl","title":"address space (in WGSL)","text":"\u4e2d\u6587\u82f1\u6587 <p>WGSL memory is divided into address spaces. From the WGSL specification: \"Each address space has unique properties determining mutability, visibility, the values it may contain, and how to use variables with it.\"</p> <p>WGSL memory is divided into address spaces. From the WGSL specification: \"Each address space has unique properties determining mutability, visibility, the values it may contain, and how to use variables with it.\"</p>"},{"location":"cn/glossary/#affine-transform","title":"affine transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that preserves parallel lines. That is, when the transform is applied to a pair of lines that are parallel, then the resulting transformed lines are also parallel. An affine transform, T, has the property that the transform of the line segment between a point (x1,y1) and a point (x2,y2) is the line between the points T(x1,y1) and T(x2,y2). Effectively, the transform of a line segment can be computed just by transforming its two endpoints. This makes affine transforms very efficient for computer graphics. Any affine transform can be represented as a composition of rotations, translations, and scalings.</p> <p>A transform that preserves parallel lines. That is, when the transform is applied to a pair of lines that are parallel, then the resulting transformed lines are also parallel. An affine transform, T, has the property that the transform of the line segment between a point (x1,y1) and a point (x2,y2) is the line between the points T(x1,y1) and T(x2,y2). Effectively, the transform of a line segment can be computed just by transforming its two endpoints. This makes affine transforms very efficient for computer graphics. Any affine transform can be represented as a composition of rotations, translations, and scalings.</p>"},{"location":"cn/glossary/#alignment-in-wgsl","title":"alignment (in WGSL)","text":"\u4e2d\u6587\u82f1\u6587 <p>Restrictions on the legal location of a value in memory, depending on the data type. For example, the address of a vec3f variable in WGSL must be a multiple of 16.</p> <p>Restrictions on the legal location of a value in memory, depending on the data type. For example, the address of a vec3f variable in WGSL must be a multiple of 16.</p>"},{"location":"cn/glossary/#alpha-blending","title":"alpha blending","text":"\u4e2d\u6587\u82f1\u6587 <p>Using the alpha component of a color to blend the color with a background color, when the color is drawn over the background color. That is, the new color of a pixel is obtained by blending the drawing color with the current color, with the degree of blending depending on the alpha component of the drawing color. Alpha blending is most commonly used to simulate transparency.</p> <p>Using the alpha component of a color to blend the color with a background color, when the color is drawn over the background color. That is, the new color of a pixel is obtained by blending the drawing color with the current color, with the degree of blending depending on the alpha component of the drawing color. Alpha blending is most commonly used to simulate transparency.</p>"},{"location":"cn/glossary/#alpha-color-component","title":"alpha color component","text":"\u4e2d\u6587\u82f1\u6587 <p>An extra component (that is, one of the numbers that are used to specify a color) in a color model that is not part of the actual color specification. The alpha component is extra information. It is most often used to specify the degree of transparency of a color.</p> <p>An extra component (that is, one of the numbers that are used to specify a color) in a color model that is not part of the actual color specification. The alpha component is extra information. It is most often used to specify the degree of transparency of a color.</p>"},{"location":"cn/glossary/#ambient-color","title":"ambient color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of ambient light in the environment that is reflected by a surface.</p> <p>A material property that represents the proportion of ambient light in the environment that is reflected by a surface.</p>"},{"location":"cn/glossary/#ambient-light","title":"ambient light","text":"\u4e2d\u6587\u82f1\u6587 <p>Directionless light that exists in an environment but does not seem to come from a particular source in the environment. An approximation for light that has been reflected so many times that its original source can't be identified. Ambient light illuminates all objects in a scene equally.</p> <p>Directionless light that exists in an environment but does not seem to come from a particular source in the environment. An approximation for light that has been reflected so many times that its original source can't be identified. Ambient light illuminates all objects in a scene equally.</p>"},{"location":"cn/glossary/#ambient-occlusion","title":"ambient occlusion","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering technique that takes into account the fact that ambient light will illuminate different surfaces to varying extents, depending on the degree to which ambient light is blocked, or \"occluded,\" from reaching each surface by other geometry in the scene. Ambient occlusion is an improvement on basic ambient lighting, but, like ambient light itself, it is not an actual physical phenomenon.</p> <p>A rendering technique that takes into account the fact that ambient light will illuminate different surfaces to varying extents, depending on the degree to which ambient light is blocked, or \"occluded,\" from reaching each surface by other geometry in the scene. Ambient occlusion is an improvement on basic ambient lighting, but, like ambient light itself, it is not an actual physical phenomenon.</p>"},{"location":"cn/glossary/#anaglyph-stereo","title":"anaglyph stereo","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for combining stereographic images of a scene, one for the left eye and one for the right eye, into a single image. Typically, the image for the left eye is drawn using only shades of red, and the image for the right eye contains only blue and green color components. The 3D effect can be seen by viewing the combined image through red/cyan glasses, which allow each eye to see only the image that is intended for that eye.</p> <p>A technique for combining stereographic images of a scene, one for the left eye and one for the right eye, into a single image. Typically, the image for the left eye is drawn using only shades of red, and the image for the right eye contains only blue and green color components. The 3D effect can be seen by viewing the combined image through red/cyan glasses, which allow each eye to see only the image that is intended for that eye.</p>"},{"location":"cn/glossary/#animation","title":"animation","text":"\u4e2d\u6587\u82f1\u6587 <p>A sequence of images that, when displayed quickly one after the other, will produce the impression of continuous motion or change. The term animation also refers to the process of creating such image sequences.</p> <p>A sequence of images that, when displayed quickly one after the other, will produce the impression of continuous motion or change. The term animation also refers to the process of creating such image sequences.</p>"},{"location":"cn/glossary/#anisotropic-filtering","title":"anisotropic filtering","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for more accurate sampling of texture images, in the case where a pixel on the surface that is being textured corresponds to a non-rectangular region in the texture. Anisotropic filtering is available as an optional extension in WebGL.</p> <p>A technique for more accurate sampling of texture images, in the case where a pixel on the surface that is being textured corresponds to a non-rectangular region in the texture. Anisotropic filtering is available as an optional extension in WebGL.</p>"},{"location":"cn/glossary/#antialiasing","title":"antialiasing","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique used to reduce the jagged or \"staircase\" appearance of diagonal lines, text, and other shapes that are drawn using pixels. When a pixel is only partly covered by a geometric shape, then the color of the pixel is a blend of the color of the shape and the color of the background, with the degree of blending depending on the fraction of the pixel that is covered by the geometric shape.</p> <p>A technique used to reduce the jagged or \"staircase\" appearance of diagonal lines, text, and other shapes that are drawn using pixels. When a pixel is only partly covered by a geometric shape, then the color of the pixel is a blend of the color of the shape and the color of the background, with the degree of blending depending on the fraction of the pixel that is covered by the geometric shape.</p>"},{"location":"cn/glossary/#api","title":"API","text":"\u4e2d\u6587\u82f1\u6587 <p>Application Programming Interface. A collection of related classes, functions, constants, etc., for performing some task. An API is an \"interface\" in the sense that it can be used without understanding how its functionality is actually implemented.</p>"},{"location":"cn/glossary/#aspect-ratio","title":"aspect ratio","text":"\u4e2d\u6587\u82f1\u6587 <p>The ratio of the width, w, of a rectangle to the height, h, of the rectangle, expressed either as a ratio w:h or as a fraction w/h.</p>"},{"location":"cn/glossary/#async-function","title":"async function","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript, an async function is one that can use an \"await\" statement to wait for the result of a promise. When an await statement is executed, the execution of the async function is suspended until the promise has either been fulfilled or rejected, giving other JavaScript code a chance to run in the meantime.</p>"},{"location":"cn/glossary/#attenuation","title":"attenuation","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to the way that illumination from a point light or spot light decreases with distance from the light. Physically, illumination should decrease with the square of the distance, but computer graphics often uses a linear attenuation with distance, or no attenuation at at all.</p>"},{"location":"cn/glossary/#attribute","title":"attribute","text":"\u4e2d\u6587\u82f1\u6587 <p>A property, such as color, of a graphical object. An image can be specified by the geometric shapes that it contains, together with their attributes.</p>"},{"location":"cn/glossary/#attribute-variable","title":"attribute variable","text":"\u4e2d\u6587\u82f1\u6587 <p>Variables that represent input to the vertex shader in a programmable graphics pipeline. An attribute variable can take on a different value for each vertex in a primitive.</p>"},{"location":"cn/glossary/#axis-of-rotation","title":"axis of rotation","text":"\u4e2d\u6587\u82f1\u6587 <p>Rotation in 3D space is rotation about a line, which is called the axis of rotation. The axis of rotation remains fixed, while everything else moves in circles around the axis.</p>"},{"location":"cn/glossary/#b","title":"B","text":""},{"location":"cn/glossary/#back-face","title":"back face","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the two sides of a polygon in 3D. A polygon has two sides. One is taken to be the front face, and the other is the back face. In OpenGL, the difference is determined by the order in which the vertices of the polygon are enumerated. The default is that, seen from the back, the vertices are enumerated in clockwise order around the polygon.</p>"},{"location":"cn/glossary/#barycentric-coordinates","title":"barycentric coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate system on a triangle in which a point is written as a linear combination of the vertices of the triangle, that is, aA+bB+c*C, where A, B, and C are the vertices and a, b, and c are numbers. Any point in the triangle can be written in this form where the coefficients a, b, and c have values in the range 0 to 1 and a+b+c is equal to 1.</p>"},{"location":"cn/glossary/#bezier-curve","title":"Bezier curve","text":"\u4e2d\u6587\u82f1\u6587 <p>A smooth curve between two points defined by parametric polynomial equations. A cubic Bezier curve segment is defined by its two endpoints P1 and P2 and by two control points C1 and C2. The tangent to the curve (its direction and speed) at P1 is given by the line from P1 to C1. The tangent vector to the curve at P2 is given by the line from C2 to P2. A quadratic Bezier curve is defined by its two endpoints and a single control point C. The tangent at each endpoint is the line between that endpoint and C.</p>"},{"location":"cn/glossary/#bind-group-in-webgpu","title":"bind group (in WebGPU)","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that can hold resources such as buffers, textures, and samples, for input into a pipeline.</p>"},{"location":"cn/glossary/#blender","title":"Blender","text":"\u4e2d\u6587\u82f1\u6587 <p>A free and open source 3D modeling and animation program.</p>"},{"location":"cn/glossary/#bresenhams-line-algorithm","title":"Bresenham's line algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A specific algorithm for deciding which pixels to color to represent a geometric line segment, using only integer arithmetic. The algorithm can be implemented very efficiently in computer hardware</p>"},{"location":"cn/glossary/#bsdf","title":"BSDF","text":"\u4e2d\u6587\u82f1\u6587 <p>Bidirectional Scattering Distribution Function. A generalization of the idea of \"material\" in 3D graphics. A BSDF gives the probability that a light ray that arrives at point of space from one direction will leave that point heading in a another direction. The probability is a function of the two directions, the point, and the wavelength of the light. One kind of scattering is reflection of light from a surface. For that case, the term BRDF (Bidirectional Reflectance Distribution Function) is used.</p>"},{"location":"cn/glossary/#bumpmapping","title":"bumpmapping","text":"\u4e2d\u6587\u82f1\u6587 <p>Using a texture to modify the normal vectors on a surface, to give the appearance of variations in height without actually modifying the geometry of the surface.</p>"},{"location":"cn/glossary/#camera","title":"camera","text":"\u4e2d\u6587\u82f1\u6587 <p>In 3D computer graphics, an object that combines the projection and viewing transforms into an abstraction that imitates a physical camera or eye.</p>"},{"location":"cn/glossary/#c","title":"C","text":""},{"location":"cn/glossary/#clip-coordinates","title":"clip coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The default coordinate system in OpenGL. The projection transform maps the 3D scene to clip coordinates. The rendered image will show the contents of the cube in the clip coordinate system that contains x, y, and z values in the range from -1 to 1; anything outside that range is \"clipped\" away.</p>"},{"location":"cn/glossary/#color-buffer","title":"color buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, the region of memory that holds the color data for the image. It acts as the drawing surface where images are rendered.</p>"},{"location":"cn/glossary/#color-component","title":"color component","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the numbers used in a color model to specify a color. For example, in the RGB color model, a color is specified by three color components representing the amounts of red, green, and blue in the color.</p>"},{"location":"cn/glossary/#color-gamut","title":"color gamut","text":"\u4e2d\u6587\u82f1\u6587 <p>The color gamut of a display device, such as a printer or computer screen, is the set of colors can be displayed by the device.</p>"},{"location":"cn/glossary/#color-mask","title":"color mask","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a setting that determines which \"channels\" in the color buffer are written during rendering. The channels are the RGBA color components red, green, blue, and alpha. A color mask consists of four boolean values, one for each channel. A false value prevents any change from being made to the corresponding color component in the color buffer.</p>"},{"location":"cn/glossary/#color-model","title":"color model","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of specifying colors numerically. Each color that can represented in a color model is assigned one or more numerical component values. An example is the RGB color model, where a color is specified by three numbers giving the red, green, and blue components of the color.</p>"},{"location":"cn/glossary/#column-major-order","title":"column-major order","text":"\u4e2d\u6587\u82f1\u6587 <p>Column-by-column ordering of the elements of a two-dimensional matrix; that is, an ordering that starts with the elements in the first column, followed by the elements in the second column, and so on. Column-major order is used for matrices in OpenGL and GLSL.</p>"},{"location":"cn/glossary/#compute-shader","title":"compute shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A stage in a GPU pipeline that does purely computational work, rather than participating directly in graphical rendering.</p>"},{"location":"cn/glossary/#constructor","title":"constructor","text":"\u4e2d\u6587\u82f1\u6587 <p>In object-oriented programming, a subroutine that is used to create objects. A constructor for a class creates and initializes objects belonging to that class.</p>"},{"location":"cn/glossary/#control-point","title":"control point","text":"\u4e2d\u6587\u82f1\u6587 <p>A point that does not lie on the curve but that is used to help control the shape of the curve. For example, a control point for a Bezier curve segment is used to specify the tangent vector (direction and speed) of the curve at an endpoint.</p>"},{"location":"cn/glossary/#convex","title":"convex","text":"\u4e2d\u6587\u82f1\u6587 <p>A convex geometric shape has the property that whenever two points are contained in the shape, then the line segment between those two points is entirely contained in the shape.</p>"},{"location":"cn/glossary/#coordinate-system","title":"coordinate system","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of assigning numerical coordinates to geometric points. In two dimensions, each point corresponds to a pair of numbers. In three dimensions, each point corresponds to a triple of numbers.</p>"},{"location":"cn/glossary/#cpu","title":"CPU","text":"\u4e2d\u6587\u82f1\u6587 <p>The Central Processing Unit in a computer, the component that actually executes programs. The CPU reads machine language instructions from the computer's memory and carries them out.</p>"},{"location":"cn/glossary/#cross-product","title":"cross product","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector product of two 3D vectors. The cross product of v and w is a vector that is perpendicular to both v and w and whose length is equal to the absolute value of the sine of the angle between v and w. If v=(x,y,z) and w=(a,b,c), then their cross product is the vector (yc-zb,za-xc,xb-ya).</p>"},{"location":"cn/glossary/#css","title":"CSS","text":"\u4e2d\u6587\u82f1\u6587 <p>Cascading Style Sheets. A language that is used for specifying the style, or presentation, of the content of web pages. CSS can control things like colors, backgrounds, fonts, shadows, borders, and the size and position of elements of the page.</p>"},{"location":"cn/glossary/#cubemap-texture","title":"cubemap texture","text":"<pre><code>A texture made up of six images, one for each of the directions positive x, negative x, positive y, negative y, positive z, and negative z. The images are intended to include everything that can be seen from a given point. Cubemap textures are used for environment mapping and skyboxes.\n</code></pre>"},{"location":"cn/glossary/#d","title":"D","text":""},{"location":"cn/glossary/#deferred-shading","title":"deferred shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A multi-pass rendering technique where a first pass processes the geometry and saves relevant information such as transformed coordinates, normal vectors, and material properties. The data can be stored in textures, which are called \"geometry buffers\" or \"G-buffers\" in this context. Lighting and other effects can then be computed in additional passes, using the pre-computed information from the geometry buffers instead of re-computing it for each pass.</p>"},{"location":"cn/glossary/#depth-buffer","title":"depth buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A region of memory that stores the information needed for the depth test in 3D graphics, that is, a depth value for each pixel in the image. Also called the \"z-buffer.\"</p>"},{"location":"cn/glossary/#depth-mask","title":"depth mask","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a setting that controls whether depth values are written to the depth buffer during rendering. When the depth mask is set to false, the depth value is discarded and the depth buffer is unchanged.</p>"},{"location":"cn/glossary/#depth-test","title":"depth test","text":"\u4e2d\u6587\u82f1\u6587 <p>A solution to the hidden surface problem that involves keeping track of the depth, or distance from the viewer, of the object currently visible at each pixel in the image. When a new object is drawn at a pixel, the depth of the new object is compared to the depth of the current object to decide which one is closer to the viewer. The advantage of the depth test is that objects can be rendered in any order. A disadvantage is that only a limited range of depths can be represented in the image.</p>"},{"location":"cn/glossary/#device-coordinates","title":"device coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system used on a display device or rendered image, often using pixels as the unit of measure.</p>"},{"location":"cn/glossary/#diffuse-color","title":"diffuse color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of incident light that is reflected diffusely from a surface.</p>"},{"location":"cn/glossary/#diffuse-reflection","title":"diffuse reflection","text":"\u4e2d\u6587\u82f1\u6587 <p>Reflection of incident light in all directions from a surface, so that diffuse illumination of a surface is visible to all viewers, independent of the viewer's position.</p>"},{"location":"cn/glossary/#direct3d","title":"Direct3D","text":"\u4e2d\u6587\u82f1\u6587 <p>Microsoft's proprietary API for 3D graphics on the Windows operating system.</p>"},{"location":"cn/glossary/#directed-acyclic-graph","title":"directed acyclic graph","text":"\u4e2d\u6587\u82f1\u6587 <p>Also called a \"dag.\" A linked data structure in which there are no cycles. That is, it is not possible to find a sequence of nodes where each node links to the next and the last node links back to the first.</p>"},{"location":"cn/glossary/#directional-light","title":"directional light","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source whose light rays are parallel, all arriving from the same direction. Can be considered to be a light source at an effectively infinite distance. Also called a \"sun,\" since the Sun is an example of a directional light source.</p>"},{"location":"cn/glossary/#displacement-mapping","title":"displacement mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique used to modify a polygonal mesh by moving, or displacing, the vertices of the mesh.</p>"},{"location":"cn/glossary/#display-list","title":"display list","text":"\u4e2d\u6587\u82f1\u6587 <p>A list of graphics primitives and attributes which can be traversed to create all or part of an image. Display lists were used in some early vector-graphics hardware. They were also available in traditional OpenGL.</p>"},{"location":"cn/glossary/#dom","title":"DOM","text":"\u4e2d\u6587\u82f1\u6587 <p>Document Object Model. A specification for representing a web page (and other kinds of structured document) as a tree-like data structure. Can also refer to the data structure itself, as in \"the DOM for this web page.\" A web page can be modified dynamically by manipulating its DOM, using the JavaScript programming language.</p>"},{"location":"cn/glossary/#dot-product","title":"dot product","text":"\u4e2d\u6587\u82f1\u6587 <p>The dot product of two vectors is the sum of the products of corresponding coordinates. For 3D vectors v=(x,y,z) and w=(a,b,c), the dot product of v and w is xa+yb+z*c. The dot product is equal to the cosine of the angle between the vectors, divided by the product of their lengths.</p>"},{"location":"cn/glossary/#double-buffering","title":"double buffering","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics technique in which an image is drawn off-screen, in a region of memory called an off-screen buffer or \"back buffer.\" When the image is drawn, it can be copied to the buffer that represents the contents of the screen, which is also known as the \"front buffer.\" In true double buffering, the image doesn't have to be copied; instead, the buffers can be \"swapped\" so that the back buffer becomes the front buffer, and the front buffer becomes the back buffer.</p>"},{"location":"cn/glossary/#drawing-program","title":"drawing program","text":"\u4e2d\u6587\u82f1\u6587 <p>A computer program for creating images using vector-style graphics, where the user creates the image by specifying shapes that make up the image and their attributes.</p>"},{"location":"cn/glossary/#e","title":"E","text":""},{"location":"cn/glossary/#eclipse","title":"Eclipse","text":"\u4e2d\u6587\u82f1\u6587 <p>An integrated development environment for writing programs in Java (and other programming languages). Eclipse is a free program that can be downloaded from http://eclipse.org.</p>"},{"location":"cn/glossary/#emission-color","title":"emission color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents color that is intrinsic to a surface, rather than coming from light from other sources that is reflected by the surface. Emission color can make the object look like it is glowing, but it does not illuminate other objects. Emission color is often called \"emissive color.\"</p>"},{"location":"cn/glossary/#environment-mapping","title":"environment mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of simulating mirror-like reflection from the surface of an object. The environment that is to be reflected from the surface is represented as a cubemap texture. To determine what point in the texture is visible at a given point on the object, a ray from the viewpoint is reflected from the surface point, and the reflected ray is intersected with the texture cube. Environment mapping is also called reflection mapping.</p>"},{"location":"cn/glossary/#es6","title":"ES6","text":"\u4e2d\u6587\u82f1\u6587 <p>A version of JavaScript implemented by almost all modern web browsers. More formally known as ECMAScript 6 or ECMAScript 2015. ES6 introduced a large number of new features.</p>"},{"location":"cn/glossary/#euclidean-transform","title":"Euclidean transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that preserves distances and angles. A Euclidean transform represents a \"rigid motion.\" That is, the transform of an object is an exact copy of the object, with the same size and shape. Any Euclidean transform can be represented as a composition of rotations and translations.</p>"},{"location":"cn/glossary/#euler-angles","title":"Euler angles","text":"\u4e2d\u6587\u82f1\u6587 <p>Express the rotation of an object in its own coordinate system, given as individual rotations about the x, y, and z axes in that coordinate system. The cumulative effect of rotations about the three coordinate axes depends on the order in which the rotations are applied.</p>"},{"location":"cn/glossary/#extrusion","title":"extrusion","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for producing a solid from a 2D shape by moving the shape along a curve in 3D. The solid is the set of points through which the shape passes as it moves along the curve. The most common case is moving the shape along a line segment that is perpendicular to the plane that contains the shape. In practice, in computer graphics, the object that is produced by extrusion is just the surface of the extruded solid.</p>"},{"location":"cn/glossary/#eye-coordinates","title":"eye coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system on 3D space defined by the viewer. In eye coordinates in OpenGL 1.1, the viewer is located at the origin, looking in the direction of the negative z-axis, with the positive y-axis pointing upwards, and the positive x-axis pointing to the right. The modelview transformation maps objects into the eye coordinate system, and the projection transform maps eye coordinates to clip coordinates.</p>"},{"location":"cn/glossary/#f","title":"F","text":""},{"location":"cn/glossary/#filling-a-shape","title":"filling a shape","text":"\u4e2d\u6587\u82f1\u6587 <p>Drawing the interior of a shape, by coloring the pixels that lie inside the shape. Filling does not apply to shapes, such as lines, that have no interior.</p>"},{"location":"cn/glossary/#fixed-function-pipeline","title":"fixed-function pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics processing pipeline with a fixed set of processing stages that cannot be modified by a programmer. Data for an image passes through a sequence of processing stages, with the image as the end product. The sequence is called a \"pipeline.\" With a fixed-function pipeline, the programmer can enable and disable stages and set options that control the processing but cannot add to the functionality.</p>"},{"location":"cn/glossary/#flat-shading","title":"flat shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting computation for the faces of a polygon or polygonal mesh that uses the same normal vector at each point in the polygon, giving the polygon a flat or faceted appearance.</p>"},{"location":"cn/glossary/#fragment-shader","title":"fragment shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A shader program that will be executed once for each pixel in a primitive. A fragment shader must compute a color for the pixel, or discard it. Fragment shaders are also called pixel shaders.</p>"},{"location":"cn/glossary/#framebuffer","title":"framebuffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a data structure that organizes the buffers for rendering an image, possibly including a color buffer, a depth buffer, and a stencil buffer. A WebGL graphics context has a default framebuffer for on-screen rendering, and additional framebuffers can be created for off-screen rendering.</p>"},{"location":"cn/glossary/#frame-buffer","title":"frame buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A region of memory that contains color data for a digital image. Most often refers to the memory containing the image that appears on the computer's screen.</p>"},{"location":"cn/glossary/#front-face","title":"front face","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the two sides of a polygon in 3D. A polygon has two sides. One is taken to be the front face, and the other is the back face. In OpenGL, the difference is determined by the order in which the vertices of the polygon are enumerated. The default is that, seen from the front, the vertices are enumerated in counterclockwise order around the polygon.</p>"},{"location":"cn/glossary/#frustum","title":"frustum","text":"\u4e2d\u6587\u82f1\u6587 <p>A truncated pyramid; that is, a pyramid from which the top has been cut off. In OpenGL 1.1, the view volume for a perspective projection is a frustum.</p>"},{"location":"cn/glossary/#g","title":"G","text":""},{"location":"cn/glossary/#geometric-modeling","title":"geometric modeling","text":"\u4e2d\u6587\u82f1\u6587 <p>Creating a scene by specifying the geometric objects contained in the scene, together with geometric transforms to be applied to them and attributes that determine their appearance.</p>"},{"location":"cn/glossary/#geometric-primitive","title":"geometric primitive","text":"\u4e2d\u6587\u82f1\u6587 <p>Geometric objects in a graphics system, such as OpenGL, that are not made up of simpler objects. Examples in OpenGL include points, lines, and triangles, but the set of available primitives depends on the graphics system. (Note that as the term is used in OpenGL, a single primitive can be made up of many points, line segments, or triangles.)</p>"},{"location":"cn/glossary/#geometric-transform","title":"geometric transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate transformation; that is, a function that can be applied to each of the points in a geometric object to produce a new object. Common transforms include scaling, rotation, and translation.</p>"},{"location":"cn/glossary/#glmatrix","title":"glMatrix","text":"\u4e2d\u6587\u82f1\u6587 <p>An open-source JavaScript library for vector and matrix math in two and three dimensions.</p>"},{"location":"cn/glossary/#global-ambient-intensity","title":"global ambient intensity","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, ambient light that is present in the environment independent of any light source. Total ambient light is the sum of the global ambient light plus the ambient light intensity of each enabled light source.</p>"},{"location":"cn/glossary/#global-illumination","title":"global illumination","text":"\u4e2d\u6587\u82f1\u6587 <p>The goal of 3D rendering algorithms that take into account all the interactions of light in a scene, including indirect illumination by light that bounces off other objects.</p>"},{"location":"cn/glossary/#glsl","title":"GLSL","text":"\u4e2d\u6587\u82f1\u6587 <p>OpenGL Shader Language, the programming language that is used to write shader programs for use with OpenGL.</p>"},{"location":"cn/glossary/#gltf","title":"GLTF","text":"\u4e2d\u6587\u82f1\u6587 <p>GL Transfer Format. A file format for 3D models. A GLTF file can contain complete 3D scenes, including objects, materials, lights, and even animations. The GLTF specification comes from the Khronos Group, which is also responsible for OpenGL, WebGL, and Vulkan.</p>"},{"location":"cn/glossary/#glu","title":"GLU","text":"\u4e2d\u6587\u82f1\u6587 <p>The OpenGL Utility library. Defines several functions for use with older versions of OpenGL, including gluPerspective and gluLookAt. Not to be confused with GLUT. GLU is a standard part of OpenGL.</p>"},{"location":"cn/glossary/#glut","title":"GLUT","text":"\u4e2d\u6587\u82f1\u6587 <p>The OpenGL Utility Toolkit. A platform-independent library for writing OpenGL applications. OpenGL does not include support for windows or events. GLUT adds such support. It also has functions for drawing 3D shapes such as spheres and polyhedra (not to mention a teapot). GLUT is written in the C programming language and is used with the C API for OpenGL. However, many GLUT functions are also available in JOGL, the Java API for OpenGL. A newer, and somewhat improved, version of the toolkit named \"FreeGLUT\" is commonly used in place of the original version.</p>"},{"location":"cn/glossary/#gpu","title":"GPU","text":"\u4e2d\u6587\u82f1\u6587 <p>Graphics Processing Unit, a computer hardware component that performs graphical computations that create and manipulate images. Operations such as drawing a line on the screen or rendering a 3D image are done in the GPU, which is optimized to perform such operations very quickly.</p>"},{"location":"cn/glossary/#gradient","title":"gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A pattern of color produced by assigning colors to certain reference points and computing color for other points by interpolating or extrapolating colors from the reference points. The effect is a color progression along line segments between reference points. Different rules for extending the colors beyond those lines produce different types of gradient, such as linear gradients and radial gradients.</p>"},{"location":"cn/glossary/#grayscale","title":"grayscale","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to a color scheme or image in which each color is a shade of gray (where the term \"shade of gray\" here includes black and white). Typically, 256 shades of gray are used. Grayscale is also called \"monochrome.\"</p>"},{"location":"cn/glossary/#gui","title":"GUI","text":"\u4e2d\u6587\u82f1\u6587 <p>(Graphical User Interface.) A user interface for a program where the user interacts with the program using components such as windows, menus, buttons, and text-input boxes.</p>"},{"location":"cn/glossary/#h","title":"H","text":""},{"location":"cn/glossary/#hdr-image","title":"HDR image","text":"\u4e2d\u6587\u82f1\u6587 <p>A high dynamic range image. An HDR image has more color information than the usual eight bits per color channel per pixel. This makes it more suitable to uses that require calculation with the color values.</p>"},{"location":"cn/glossary/#height-map","title":"height map","text":"\u4e2d\u6587\u82f1\u6587 <p>An image in which the grayscale value represents a height, or elevation. Height maps can be used in displacement mapping to specify the amount of displacement.</p>"},{"location":"cn/glossary/#hidden-surface-problem","title":"hidden surface problem","text":"\u4e2d\u6587\u82f1\u6587 <p>The problem in 3D graphics of deciding which object is visible at each pixel in an image. When one object is behind another object from the point of view of the viewer, only the front object should appear in the image. A rendering algorithm for 3D graphics must satisfy this constraint. Algorithms that solve the hidden surface problem include the painter's algorithm and the depth test algorithm.</p>"},{"location":"cn/glossary/#hierarchical-modeling","title":"hierarchical modeling","text":"\u4e2d\u6587\u82f1\u6587 <p>Creating complex geometric models in a hierarchical fashion, starting with geometric primitives, combining them into components that can then be further combined into more complex components, and so on.</p>"},{"location":"cn/glossary/#homogeneous-coordinates","title":"homogeneous coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of representing n-dimensional vectors as (n+1)-dimensional vectors where two (n+1) vectors represent the same n-dimensional vector if they differ by a scalar multiple. In 3D, for example, if w is not zero, then the homogeneous coordinates (x,y,z,w) are equivalent to homogeneous coordinates (x/w,y/w,z/w,1), since they differ by multiplication by the scalar w. Both sets of coordinates represent the 3D vector (x/w,y/w,z/w)</p>"},{"location":"cn/glossary/#hsl-color","title":"HSL color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the hue, saturation, and lightness of the component. The HSL color model is similar to the HSV color model. The main difference is that in HSL, pure spectral colors occur when L=0.5, while in HSV, they occur when V=1.</p>"},{"location":"cn/glossary/#hsv-color","title":"HSV color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the hue, saturation, and value of the component. The hue represents the basic color. The saturation is the purity of the color, with a saturation value of zero producing a shade of gray, that is a color with no actual hue at all. The value represents the brightness of the color, with a value of zero giving black. (Value is also called brightness, and the name HSB is sometimes used instead of HSV.)</p>"},{"location":"cn/glossary/#html","title":"HTML","text":"\u4e2d\u6587\u82f1\u6587 <p>HyperText Markup Language. A language that is used for specifying the content of web pages. An HTML document is made up of text, along with \"elements\" for adding other content, such as images, and for defining the structure of the document. Because of nesting of elements, the document can be represented by a tree-like data structure.</p>"},{"location":"cn/glossary/#html-canvas","title":"HTML canvas","text":"\u4e2d\u6587\u82f1\u6587 <p>A canvas element on a web page. The canvas appears as a rectangular area on the page. The JavaScript programming language can use a canvas element as a drawing surface. HTML is a language for specifying the content of a web page. JavaScript is the programming language for web pages. The canvas element supports a 2D graphics API. In many browsers, it also supports the 3D graphics API, WebGL.</p>"},{"location":"cn/glossary/#i","title":"I","text":""},{"location":"cn/glossary/#identity-matrix","title":"identity matrix","text":"\u4e2d\u6587\u82f1\u6587 <p>The n-by-n identity matrix is an n-by-n matrix which has ones on the diagonal and zeros elsewhere. Multiplication of any matrix B by the identity matrix, in either order, leaves B unchanged. Multiplication of an n-dimensional vector by the n-by-n identity matrix leaves the vector unchanged; that is, the identity matrix is the matrix for the identity transformation.</p>"},{"location":"cn/glossary/#identity-transform","title":"identity transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that has no effect on its argument. For example, the identity transform in 2D is given by the formula I(x,y) = (x,y). The identity transform I has the property that if T is any transform, then I followed by T is the same as T, and T followed by I is the same as T.</p>"},{"location":"cn/glossary/#image-texture","title":"image texture","text":"\u4e2d\u6587\u82f1\u6587 <p>An image that is applied to a surface as a texture, so that it looks at if the image is \"painted\" onto the surface.</p>"},{"location":"cn/glossary/#index-buffer","title":"index buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, an index buffer is a GPU buffer that holds vertex indices for use with the drawIndexed(). A vertex index gives the position of a vertex in the list of vertices of a primitive.</p>"},{"location":"cn/glossary/#indexed-color","title":"indexed color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color scheme in which colors are selected from a limited palette of colors. For example, if the palette contains 256 colors, then a color can be specified by an eight-bit integer, giving its position, or index, in the list of colors.</p>"},{"location":"cn/glossary/#indexed-drawing","title":"indexed drawing","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, drawing a primitive using the drawIndexed() function. With that function, vertices are not generated in the order in which they are listed. Instead, a list of vertex indices in an index buffer determines the order of the vertices. Indexed drawing is used to render indexed face sets.</p>"},{"location":"cn/glossary/#indexed-face-set","title":"indexed face set","text":"\u4e2d\u6587\u82f1\u6587 <p>(IFS). A data structure that represents a polyhedron or polygonal mesh. The data structure includes a numbered list of vertices and a list of faces. A face is specified by listing the indices of the vertices of the face; that is, a face is given as a list of numbers where each number is an index into the list of vertices.</p>"},{"location":"cn/glossary/#instanced-drawing","title":"instanced drawing","text":"\u4e2d\u6587\u82f1\u6587 <p>The ability to render multiple versions of a primitive with a single function call. Each copy can have its own values for certain attributes, such as color or transformation.</p>"},{"location":"cn/glossary/#intensity-of-a-light-source","title":"intensity of a light source","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source emits light at various wavelengths. The intensity of a light at a given wavelength is the amount of energy in the light at that wavelength. The total intensity of the light is its total energy at all wavelengths. The color of a light is determined by its intensities at all wavelengths.</p>"},{"location":"cn/glossary/#interpolation","title":"interpolation","text":"\u4e2d\u6587\u82f1\u6587 <p>Given values for some quantity at certain reference points, computing a value for that quantity at other points by some kind of averaging applied to the values at the reference points.</p>"},{"location":"cn/glossary/#invariant-qualifier","title":"invariant qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, a modifier that ensures that when the same expression is used to compute the value of a variable in two different shaders, the value will be the same in both shaders. This can be important for multi-pass algorithms, where several shader programs are applied in succession to render one image.</p>"},{"location":"cn/glossary/#inverse-transform","title":"inverse transform","text":"\u4e2d\u6587\u82f1\u6587 <p>Given a transform T, the inverse transform of T is a transform that reverses the operation of T. For example, for a 2D transform, for R to be the inverse of T means that R(T(x,y)) = (x,y). Scaling by 0.5 is the inverse of scaling by 2. Translation by (-3,5) is the inverse of translation by (3,-5). Not every transform has an inverse. For example, scaling by a factor of zero has no inverse.</p>"},{"location":"cn/glossary/#ior","title":"IOR","text":"\u4e2d\u6587\u82f1\u6587 <p>Index of Refraction. A property of a medium, such as air or glass, that transmits light. The refraction, or bending, of light rays that pass from one medium to another depends on the ratio of the IORs of the two media. The index of refraction of a medium depends on the speed of light in that medium.</p>"},{"location":"cn/glossary/#j","title":"J","text":""},{"location":"cn/glossary/#javascript","title":"JavaScript","text":"\u4e2d\u6587\u82f1\u6587 <p>A programming language for web pages. JavaScript code on a web page is executed by a web browser that displays the page, and it can interact with the contents of the web page and with the user. There are JavaScript APIs for 2D and for 3D graphics</p>"},{"location":"cn/glossary/#jogl","title":"JOGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A Java implementation of OpenGL. JOGL is very complicated, since it attempts to support all versions of OpenGL in one programming system. JOGL integrates seamlessly with Java's Swing and AWT graphics.</p>"},{"location":"cn/glossary/#json","title":"JSON","text":"\u4e2d\u6587\u82f1\u6587 <p>(JavaScript Object Notation.) A syntax for representing JavaScript objects as strings, similar to the object literal syntax that is used in JavaScript. JSON objects cannot contain functions, but they can contain strings, numbers, and booleans. JSON has become a popular standard for storage and transmission of structured data.</p>"},{"location":"cn/glossary/#k","title":"K","text":""},{"location":"cn/glossary/#keyframe-animation","title":"keyframe animation","text":"\u4e2d\u6587\u82f1\u6587 <p>An animation technique in which the value of some quantity is given explicitly only at certain times during the animation. The times when the quantity is specified are called keyframes. Between keyframes, the value of the quantity is obtained by interpolating between the values specified for the keyframes.</p>"},{"location":"cn/glossary/#l","title":"L","text":""},{"location":"cn/glossary/#lambert-shading","title":"Lambert shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for computing pixel colors on a primitive using a lighting equation that takes into account ambient and diffuse reflection. In Lambert shading, the lighting equation is applied only at the vertices of the primitive. Color values for pixels in the primitive are calculated by interpolating the values that were computed for the vertices. Lambert shading is named after Johann Lambert, who developed the theory on which it is based in the eighteenth century.</p>"},{"location":"cn/glossary/#lathing","title":"lathing","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for producing a surface by rotating a planar curve about a line that lies in the same plane as the curve. As each point rotates about the line, it generates a circle. The surface is the union of the circles generated by all the points on the curve. Lathing imitates shapes that can be produced by a mechanical lathe.</p>"},{"location":"cn/glossary/#length-of-a-vector","title":"length of a vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector is defined by its length and its direction, so length is a fundamental property. When a vector is represented as an arrow, its length is just the length of that arrow. For a 2D vector given by coordinates (x,y), the length is the square root of xx+yy. For a 3D vector given as (x,y,z), the length is the square root of xx+yy+z*z.</p>"},{"location":"cn/glossary/#lighting","title":"lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Using light sources in a 3D scene, so that the appearance of objects in the scene can be computed based on the interaction of light with the objects' material properties.</p>"},{"location":"cn/glossary/#lighting-equation","title":"lighting equation","text":"\u4e2d\u6587\u82f1\u6587 <p>The equation that is used in OpenGL to compute the visible color of a point on a surface from the material properties of the surface, the normal vector for that point, the direction to the viewer, the ambient light level, and the direction and intensity of light sources.</p>"},{"location":"cn/glossary/#linear-algebra","title":"linear algebra","text":"\u4e2d\u6587\u82f1\u6587 <p>The field of mathematics that studies vector spaces and linear transformations between them. Linear algebra is part of the essential mathematical foundation of computer graphics.</p>"},{"location":"cn/glossary/#linear-gradient","title":"linear gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A color gradient pattern in which there is a color variation along a certain line, with constant color along lines perpendicular to that line.</p>"},{"location":"cn/glossary/#linear-transformation","title":"linear transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A function from one vector space to another that preserves vector addition and multiplication by constants. Linear transformations can be represented by matrices. In computer graphics, they are used to implement geometric operations such as rotation and translation</p>"},{"location":"cn/glossary/#lossless-data-compression","title":"lossless data compression","text":"\u4e2d\u6587\u82f1\u6587 <p>A scheme for reducing the size of a dataset without losing any of the information in that dataset. The original data can be recovered exactly from the compressed data. The image formats GIF and PNG use lossless data compression to reduce the size of the image file.</p>"},{"location":"cn/glossary/#lossy-data-compression","title":"lossy data compression","text":"\u4e2d\u6587\u82f1\u6587 <p>A scheme for reducing the size of a dataset in which some of the information in the dataset can be lost. The data that is recovered from the compressed data can differ from the original data. The image format JPEG use lossy data compression to reduce the size of the image file.</p>"},{"location":"cn/glossary/#luminance","title":"luminance","text":"\u4e2d\u6587\u82f1\u6587 <p>A quantity representing the perceived brightness of a color. For an RGB color, it is a weighted average of the red, green, and blue components of the color. The usual formula is 0.3red + 0.59green + 0.11*blue.</p>"},{"location":"cn/glossary/#m","title":"M","text":""},{"location":"cn/glossary/#magnification-filter","title":"magnification filter","text":"\u4e2d\u6587\u82f1\u6587 <p>An operation that is used when applying a texture to an object, when the texture has to be stretched to fit the object. For an image texture, a magnification filter is applied to compute the color of a pixel when that pixel covers just a fraction of a pixel in the image.</p>"},{"location":"cn/glossary/#material","title":"material","text":"\u4e2d\u6587\u82f1\u6587 <p>The properties of an object that determine how that object interacts with light in the environment. Material properties in OpenGL include, for example, diffuse color, specular color, and shininess.</p>"},{"location":"cn/glossary/#matrix","title":"matrix","text":"\u4e2d\u6587\u82f1\u6587 <p>A rectangular array of numbers. A matrix can be represented as a two-dimensional array, with numbers arranged in rows and columns. An N-by-N matrix represents a linear transformation from N-dimensional space to itself.</p>"},{"location":"cn/glossary/#matrix-mode","title":"matrix mode","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, a state variable that determines which one of several transformation matrices will be affected by functions such as glRotatef and glFrustum. The matrix mode is set with the function glMatrixMode. Possible values include GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE.</p>"},{"location":"cn/glossary/#metal","title":"Metal","text":"\u4e2d\u6587\u82f1\u6587 <p>Apple's proprietary API for 3D graphics and computation on MacOS computers and iOS devices.</p>"},{"location":"cn/glossary/#minification-filter","title":"minification filter","text":"\u4e2d\u6587\u82f1\u6587 <p>An operation that is used when applying a texture to an object, when the texture has to be shrunk to fit the object. For an image texture, a minification filter is applied to compute the color of a pixel when that pixel covers several pixels in the image.</p>"},{"location":"cn/glossary/#mipmap","title":"mipmap","text":"\u4e2d\u6587\u82f1\u6587 <p>One of a series of reduced-size copies of a texture image, of decreasing width and height. Starting from the original image, each mipmap is obtained by dividing the width and height of the previous image by two (unless it is already 1). The final mipmap is a single pixel. Mipmaps are used for more efficient mapping of the texture image to a surface, when the image has to be shrunk to fit the surface.</p>"},{"location":"cn/glossary/#modeling-transformation","title":"modeling transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that is applied to an object to map that object into the world coordinate system or into the object coordinate system for a more complex, hierarchical object.</p>"},{"location":"cn/glossary/#modelview-transformation","title":"modelview transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, a transform that combines the modeling transform with the viewing transform. That is, it is the composition of the transformation from object coordinates to world coordinates and the transformation from world coordinates to eye coordinates. Because of the equivalence between modeling and viewing transformations, world coordinates are not really meaningful for OpenGL, and only the combined transformation is tracked.</p>"},{"location":"cn/glossary/#multi-pass-algorithm","title":"multi-pass algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering algorithm that draws a scene several times and combines the results somehow to compute the final image. A simple example is anaglyph stereo, in which a left-eye and right-eye image of the scene are rendered separately and combined.</p>"},{"location":"cn/glossary/#multisampling","title":"multisampling","text":"\u4e2d\u6587\u82f1\u6587 <p>A kind of antialiasing where the fragment shader is evaluated at several points in each pixel, and the results are averaged to get the color of the pixel.</p>"},{"location":"cn/glossary/#n","title":"N","text":""},{"location":"cn/glossary/#ndc","title":"NDC","text":"\u4e2d\u6587\u82f1\u6587 <p>Normalized Device Coordinates. In WebGPU, refers to the default xyz coordinate system in which x and y range from -1 to 1 and z ranges from 0 to 1. The x and y in NDC map linearly to device, or pixel, coordinates on the viewport.</p>"},{"location":"cn/glossary/#nio-buffer","title":"nio buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A Java object belonging to the class java.nio.Buffer or one of its subclasses. Nio buffers are similar to arrays, but they are optimized for input/output operations. Nio buffers are used instead of arrays for certain purposes in Java's JOGL API for OpenGL.</p>"},{"location":"cn/glossary/#normalized-vector","title":"normalized vector","text":"\u4e2d\u6587\u82f1\u6587 <p>The result of dividing a non-zero vector by its length, giving a unit vector, that is, a vector of length one. (Note that \"normalized vector\" and \"normal vector\" are, confusingly, unrelated terms!)</p>"},{"location":"cn/glossary/#normal-vector","title":"normal vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A normal vector to a surface at a point on that surface is a vector that is perpendicular to the surface at that point. Normal vectors to curves are defined similarly. Normal vectors are important for lighting calculations.</p>"},{"location":"cn/glossary/#norm-of-a-vector","title":"norm of a vector","text":"\u4e2d\u6587\u82f1\u6587 <p>Another term for the length of the vector. For a 3D vector given as (x,y,z), the norm is the square root of <code>x*x+y*y+z*z</code>.</p>"},{"location":"cn/glossary/#o","title":"O","text":""},{"location":"cn/glossary/#object-coordinates","title":"object coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system in which the coordinates for points in an object are originally specified, before they are transformed by any modeling or other transform that will be applied to the object.</p>"},{"location":"cn/glossary/#off-screen-canvas","title":"off-screen canvas","text":"\u4e2d\u6587\u82f1\u6587 <p>My term for a segment of the computer's memory that can be used as a drawing surface, for drawing images that are not visible on the screen. Some method should exist for copying the image from an off-screen canvas onto the screen. In Java, for example, an off-screen canvas can be implemented as an object of type BufferedImage.</p>"},{"location":"cn/glossary/#opengl","title":"OpenGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A family of computer graphics APIs that is implemented in many graphics hardware devices. There are several versions of the API, and there are implementations, or \"bindings\" for several different programming languages. Versions of OpenGL for embedded systems such as mobile phones are known as OpenGL ES. WebGL is a version for use on Web pages. OpenGL can be used for 2D as well as for 3D graphics, but it is most commonly associated with 3D.</p>"},{"location":"cn/glossary/#orthographic-projection","title":"orthographic projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A projection from 3D to 2D that simply discards the z-coordinate. It projects objects along lines that are orthogonal (perpendicular) to the xy-plane. In OpenGL 1.1, the view volume for an orthographic projection is a rectangular solid.</p>"},{"location":"cn/glossary/#p","title":"P","text":""},{"location":"cn/glossary/#painters-algorithm","title":"painter's algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A solution to the hidden surface algorithm that involves drawing the objects in a scene in order from back to front, that is, in decreasing order of distance from the viewer. A disadvantage is that the order is usually not well-defined unless some objects are decomposed into smaller sub-objects. Another issue is that the order of drawing has to change when objects move or when the point of view changes.</p>"},{"location":"cn/glossary/#painting-program","title":"painting program","text":"\u4e2d\u6587\u82f1\u6587 <p>A computer program for creating images using raster-style graphics, where the user creates the image by controlling the colors of each pixel.</p>"},{"location":"cn/glossary/#path-tracing","title":"path tracing","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering algorithm based on the idea of computing all the paths that light could have followed to arrive at the position of a viewer from each direction. Since that is literally impossible, the algorithm traces a random sample of paths and averages the results. As the number of samples increases, the average converges to a very high-quality image.</p>"},{"location":"cn/glossary/#pattern-fill","title":"pattern fill","text":"\u4e2d\u6587\u82f1\u6587 <p>Using copies of an image to fill the interior of a two-dimensional shape. The image can be repeated horizontally and vertically as necessary to cover the shape.</p>"},{"location":"cn/glossary/#pbr","title":"PBR","text":"\u4e2d\u6587\u82f1\u6587 <p>Physically Based Rendering. A general term encompassing a variety of techniques for rendering materials that look more physically realistic than the materials traditionally used in OpenGL and similar graphics APIs. The idea is to implement the actual physics of light and material more directly. PBR has become common in real-time graphics such as video games.</p>"},{"location":"cn/glossary/#perlin-noise","title":"Perlin noise","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique invented by Ken Perlin in 1983 that is used in the computation of natural-looking procedural textures. A Perlin noise function has numerical inputs (usually 2 or 3) and produces an output number in the range -1.0 to 1.0. The output is pseudo-random, but has some regularity, with features that are similarly sized and regularly distributed, and with variation on several scales.</p>"},{"location":"cn/glossary/#per-pixel-lighting","title":"per-pixel lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Doing lighting calculations at each pixel of a primitive, which gives better results in most cases than per-vertex lighting. Phong shading uses per-pixel lighting, with normal vectors interpolated from the vertices.</p>"},{"location":"cn/glossary/#perspective-projection","title":"perspective projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A projection from 3D to 2D that projects objects along lines radiating out from a viewpoint. A perspective projection attempts to simulate realistic viewing. A perspective projection preserves perspective; that is, objects that are farther from the viewpoint are smaller in the projection. In OpenGL 1.1, the view volume for a perspective projection is a frustum, or truncated pyramid.</p>"},{"location":"cn/glossary/#per-vertex-lighting","title":"per-vertex lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Doing lighting calculations only at the vertices of a primitive, and interpolating the results to get the colors of interior pixels. Per-vertex lighting is the standard in traditional OpenGL. Per-vertex lighting without specular reflection is Lambert shading.</p>"},{"location":"cn/glossary/#phong-shading","title":"Phong shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for computing pixel colors on a primitive using a lighting equation that takes into account ambient, diffuse, and specular reflection. In Phong shading, the lighting equation is applied at each pixel. Normal vectors are specified only at the vertices of the primitive. The normal vector that is used in the lighting equation at a pixel is obtained by interpolating the normal vectors for the vertices. Phong shading is named after Bui Tuong Phong, who developed the theory in the 1970s.</p>"},{"location":"cn/glossary/#pipeline","title":"pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A sequence of computational stages in a GPU that are applied to incoming data to produce some result. Some of the stages can be programmable shaders, such as vertex shaders, fragment shaders, and compute shaders. In a graphics rendering pipeline, the output is the colors of the pixels in an image.</p>"},{"location":"cn/glossary/#pixel","title":"pixel","text":"\u4e2d\u6587\u82f1\u6587 <p>A digital image is made up of rows and columns of small rectangles called pixels. To specify a digital image, a color is assigned to each pixel in the image.</p>"},{"location":"cn/glossary/#point-light","title":"point light","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source whose light rays emanate from a single point. Also called a \"lamp,\" since a lamp approximates a point source of light. Also called a positional light.</p>"},{"location":"cn/glossary/#polygon","title":"polygon","text":"\u4e2d\u6587\u82f1\u6587 <p>A multi-sided shape lying in a plane and specified by a list of points, called its vertices, and made up of the line segments from each point in the list to the next point in the list, plus a line segment from the last point in the list to the first point. All the points are required to lie in the same plane. Sometimes the term \"polygon\" includes the interior of the shape as well as its boundary.</p>"},{"location":"cn/glossary/#polygonal-mesh","title":"polygonal mesh","text":"\u4e2d\u6587\u82f1\u6587 <p>A collection of polygons, where the polygons can be joined together along their edges. A polygonal mesh can represent a polyhedron, or can be used as an approximation for a curved surface. A polygonal mesh can be represented as an indexed face set.</p>"},{"location":"cn/glossary/#polygon-offset","title":"polygon offset","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D graphics technique that slightly increases or decreases the depth of the pixels in a primitive as it is rendered. Polygon offset is used to avoid having several objects at exactly the same depth, a situation that is not handled well by the depth test.</p>"},{"location":"cn/glossary/#polyhedron","title":"polyhedron","text":"\u4e2d\u6587\u82f1\u6587 <p>A closed 3D figure whose faces, or sides, are polygons. Usually, it is assumed that the faces of a polyhedron do not intersect, except along their edges.</p>"},{"location":"cn/glossary/#power-of-two-texture","title":"power-of-two texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A texture image whose width and height are powers of two. In some graphics systems, this is a requirement of any image that is to be used as a texture.</p>"},{"location":"cn/glossary/#precision-qualifier","title":"precision qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, one of the following modifiers on a numeric variable declaration: lowp, mediump, or highp. A precision modifier specifies the minimum number of bits or range of values for the variable.</p>"},{"location":"cn/glossary/#procedural-texture","title":"procedural texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A texture for which the value at a given set of texture coordinates is computed as a mathematical function of the coordinates, as opposed to an image texture where the value is obtained by sampling an image.</p>"},{"location":"cn/glossary/#programmable-pipeline","title":"programmable pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics processing pipeline in which some of the processing stages can or must be implemented by programs. Data for an image passes through a sequence of processing stages, with the image as the end product. The sequence is called a \"pipeline.\" Programmable pipelines are used in modern GPUs to provide more flexibility and control to the programmer. The programs for a programmable pipeline are known as shaders and are written in a shader programming language such as GLSL.</p>"},{"location":"cn/glossary/#projection","title":"projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that maps coordinates in 3D to coordinates in 2D. Projection is used to convert a three-dimensional scene into a two-dimensional image.</p>"},{"location":"cn/glossary/#projection-transformation","title":"projection transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In 3D graphics, a transformation that maps a scene in 3D space onto a 2D image. In OpenGL 1.1, the projection maps the view volume (that is, the region in 3D space that is visible in the image) to clip coordinates, in which the values of x, y, and z range from -1 to 1. The x- and y-coordinates are then mapped to the image, while the z coordinate provides depth information.</p>"},{"location":"cn/glossary/#promise-in-javascript","title":"promise (in JavaScript)","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript programming, a promise represents a result that might be available immediately or at some time in the future. A programmer can provide a function to be called if and when the promise is fulfilled (that is when the result becomes available). A programmer can also provide a function to be called when the promise is rejected (for example, if some error occurs). Promises are asynchronous since the function that handles success or failure will be called at some unpredictable time.</p>"},{"location":"cn/glossary/#q","title":"Q","text":""},{"location":"cn/glossary/#quad","title":"quad","text":"\u4e2d\u6587\u82f1\u6587 <p>A quadrilateral, that is a four-sided figure in the plane. OpenGL 1.1 has the primitives GL_QUADS and GL_QUAD_STRIP for drawing quads, but it assumes without checking that the vertices that are provided are in fact planar and define quadrilaterals that are convex.</p>"},{"location":"cn/glossary/#quaternion","title":"quaternion","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector in the quaternion algebra, which is a four dimensional vector space in which two vectors, in addition to being added, can be multiplied. In computer graphics, quaternions of length one are often used to represent rotations. An advantage is that in the quaternion representation, it is possible to smoothly interpolate between two rotations.</p>"},{"location":"cn/glossary/#r","title":"R","text":""},{"location":"cn/glossary/#radial-gradient","title":"radial gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A color gradient pattern in which there are concentric circles, or sometimes ellipses, of constant color, with a color variation along the radius of the circles.</p>"},{"location":"cn/glossary/#raster-graphics","title":"raster graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>Pixel-based graphics in which an image is specified by assigning a color to each pixel in a grid of pixels.</p>"},{"location":"cn/glossary/#rasterization","title":"rasterization","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of creating a raster image, that is one made of pixels, from other data that specifies the content of the image. For example, a vector graphics image must be rasterized in order to be displayed on a computer screen.</p>"},{"location":"cn/glossary/#ray-casting","title":"ray casting","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of following a ray (that is, half of an infinite line) starting at a given point and extending in a given direction, in order to find points of intersection of the ray with objects in a scene. Usually, only the intersection point that is closest to the starting point of the ray is of interest.</p>"},{"location":"cn/glossary/#ray-tracing","title":"ray tracing","text":"\u4e2d\u6587\u82f1\u6587 <p>A recursive rendering algorithm that uses ray casting. A ray is cast from the viewpoint through a point in the image and into the scene, to determine what is seen at that point. To determine the color that is seen at that point, further rays are cast from the point, including a reflected ray (if the object has specular reflections), a refracted ray (if the object is translucent) and shadow rays towards light sources (to determine whether the object is illuminated by that light). Finding a color for a reflected or refracted ray can use a recursive application of the ray tracing algorithm.</p>"},{"location":"cn/glossary/#real-time-graphics","title":"real-time graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>The type of computer graphics that is needed for computer animation or other applications where the images must be rendered quickly, at the time when they are viewed. For computer animation, real-time graphics generally requires the ability to render the scene sixty times per second.</p>"},{"location":"cn/glossary/#reflection-mapping","title":"reflection mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>Another name for environment mapping.</p>"},{"location":"cn/glossary/#reflectivity","title":"reflectivity","text":"\u4e2d\u6587\u82f1\u6587 <p>The proportion or fraction of incident light that is reflected by an object. An object can have different reflectivities at different wavelengths. The color of an object is determined by its reflectivities at all wavelengths.</p>"},{"location":"cn/glossary/#refraction","title":"refraction","text":"\u4e2d\u6587\u82f1\u6587 <p>The bending of light as it passes from one transparent or translucent medium into another.</p>"},{"location":"cn/glossary/#regular-polygon","title":"regular polygon","text":"\u4e2d\u6587\u82f1\u6587 <p>A polygon in which all the sides have the same length and all the angles between consecutive sides are equal. Usually the term is restricted to simple polygons, which have sides that do not intersect except at their endpoints.</p>"},{"location":"cn/glossary/#regular-polyhedron","title":"regular polyhedron","text":"\u4e2d\u6587\u82f1\u6587 <p>A polyhedron in which each face is a regular polygon, and all the faces and angles are identical. There are only five regular polyhedra: the tetrahedron with 4 triangular faces, the cube with 6 square faces, the octahedron with 8 triangular faces, the dodecahedron with 12 pentagonal faces, and the icosahedron, with 20 triangular faces.</p>"},{"location":"cn/glossary/#renderbuffer","title":"renderbuffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a buffer (that is, a region of memory) that can be attached to a framebuffer for use as a color buffer, depth buffer, or stencil buffer.</p>"},{"location":"cn/glossary/#rendering","title":"rendering","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of producing a 2D image from a 3D scene description.</p>"},{"location":"cn/glossary/#render-to-texture","title":"render-to-texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique in which the output of a rendering operation is written directly to a texture. In WebGL, render-to-texture can be implemented by attaching the texture as one of the buffers in a framebuffer.</p>"},{"location":"cn/glossary/#rgba-color","title":"RGBA color","text":"\u4e2d\u6587\u82f1\u6587 <p>An RGB color\u2014specified by red, green, and blue component values\u2014together with an alpha component. The alpha component is most often take to specify the degree of transparency of the color, with a maximal alpha value giving a fully opaque color.</p>"},{"location":"cn/glossary/#rgb-color","title":"RGB color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the amount of red, green, and blue in the color.</p>"},{"location":"cn/glossary/#right-handed-coordinate-system","title":"right-handed coordinate system","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate system on 3D space in which the x, y, and z-axes satisfy this property: If you point the thumb of your right hand in the direction of the positive z-axis, then your fingers will curl from the positive x-axis towards the positive y-axis.</p>"},{"location":"cn/glossary/#right-hand-rule","title":"right-hand rule","text":"\u4e2d\u6587\u82f1\u6587 <p>A rule that is used to determine the positive direction of rotation about an axis in 3D space: If you point the thumb of your right hand in the direction of the axis, then your fingers will curl in the direction of positive angles of rotation. Note that this assumes that the axis has a direction; in OpenGL, an axis of rotation is determined by the point (0,0,0) and another point (x,y,z), and the direction of the axis is from (0,0,0) towards (x,y,z).</p>"},{"location":"cn/glossary/#rotation","title":"rotation","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that rotates each point by a specified angle about some point (in 2D) or axis (in 3D).</p>"},{"location":"cn/glossary/#s","title":"S","text":""},{"location":"cn/glossary/#sampler-variable","title":"sampler variable","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, a variable in a shader program that can be used to do lookup in an image texture. The value of a sampler variable specifies the texture unit that will be used to do the lookup. In WebGL, sampler variables are of type \"sampler2D\" or \"samplerCube.\"</p>"},{"location":"cn/glossary/#sampling","title":"sampling","text":"\u4e2d\u6587\u82f1\u6587 <p>The operation of mapping texture coordinates to colors from a texture, including using mipmaps if available and applying a minification or magnification filter if necessary.</p>"},{"location":"cn/glossary/#scalar-product","title":"scalar product","text":"\u4e2d\u6587\u82f1\u6587 <p>The product of a number and a vector. The scalar product of a number s and vector v is the vector obtained by multiplying each coordinate of v by s. In 3D, if s is a number and v=(x,y,z), then the scalar product of s times v is the vector (sx,sy,sz).</p>"},{"location":"cn/glossary/#scaling","title":"scaling","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that multiplies each coordinate of a point by a number called the scaling factor. Scaling increases or decreases the size of an object, but also moves its points closer to or farther from the origin. Scaling can be uniform\u2014the same in every direction\u2014or non-uniform\u2014with a different scaling factor in each coordinate direction. A negative scaling factor can be used to apply a reflection.</p>"},{"location":"cn/glossary/#scene-description-language","title":"scene description language","text":"\u4e2d\u6587\u82f1\u6587 <p>A language that can be used to specify graphics images by stating what's in the image. That is, the scene is created \"declaratively,\" by stating what it contains, as opposed to being created \"procedurally,\" by a program. A document written in a scene description language can be used to generate a scene graph for the scene.</p>"},{"location":"cn/glossary/#scene-graph","title":"scene graph","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that represents the objects in a scene, together with attributes of the objects and the modeling transformations that are applied to the objects. An image of the scene is created by traversing the scene graph data structure. A scene graph might exist only conceptually, or it might be an actual data structure in a program.</p>"},{"location":"cn/glossary/#shader","title":"shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A program to be executed at some stage of the rendering pipeline. OpenGL shaders are written in the GLSL programming languages. For WebGL, only vertex shaders and fragment shaders are supported. WebGPU also has compute shaders, which are used in compute pipelines.</p>"},{"location":"cn/glossary/#shadow-mapping","title":"shadow mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for determining which parts of a scene are illuminated and which are in shadow from a given light source. The technique involves rendering the scene from the point of the view of the light source, but uses only the depth buffer from that rendering. The depth buffer is the \"shadow map.\" Along a given direction from the light source, the object that is illuminated by the light is the one that is closest to the light. The distance to that object is essentially encoded in the depth buffer. Objects at greater distance are in shadow.</p>"},{"location":"cn/glossary/#shadow-ray","title":"shadow ray","text":"\u4e2d\u6587\u82f1\u6587 <p>In the ray tracing algorithm, a ray that is cast from a point on object in the direction of a light source to determine whether that point is illuminated by that light source or is in shadow.</p>"},{"location":"cn/glossary/#shear-transform","title":"shear transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A shear transformation in 2D leaves some line, L, fixed, and lines perpendicular to L are \"tilted\" relative to L by the same angle. Another description is that a line parallel to L is mapped to itself, but is moved by an amount proportional to its distance from L. In 3D, a shear transformation leaves some plane, P, fixed, and it maps a plane parallel to P to itself, but moved by an amount proportional to its distance from P.</p>"},{"location":"cn/glossary/#shininess","title":"shininess","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that determines the size and sharpness of specular highlights. Also called the \"specular exponent\" because of the way it is used in lighting calculations. In OpenGL, shininess is a number in the range 0 to 128.</p>"},{"location":"cn/glossary/#single-buffering","title":"single buffering","text":"\u4e2d\u6587\u82f1\u6587 <p>As opposed to double buffering, a graphics technique in which the image is drawn directly to the screen (that is, to the buffer that serves as the source for the screen image). The disadvantage of single buffering is that, for a complex image, the user can observe the process of drawing the image.</p>"},{"location":"cn/glossary/#skybox","title":"skybox","text":"\u4e2d\u6587\u82f1\u6587 <p>A large cube that surrounds a scene and is textured with images that form a background for that scene, in all directions.</p>"},{"location":"cn/glossary/#smooth-shading","title":"smooth shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting computation for the faces of a polygon or polygonal mesh that uses a different normal vector at each vertex of the polygon. When two polygons share a vertex, both polygons use the same normal vector for that vertex, resulting in a smooth appearance at that vertex. Smooth shading is appropriate when a polygonal mesh is used as an approximation for a smooth surface.</p>"},{"location":"cn/glossary/#specular-color","title":"specular color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of incident light that is reflected specularly by a surface.</p>"},{"location":"cn/glossary/#specular-exponent","title":"specular exponent","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that determines the size and sharpness of specular highlights. Called \"shininess\" in OpenGL.</p>"},{"location":"cn/glossary/#specular-highlight","title":"specular highlight","text":"\u4e2d\u6587\u82f1\u6587 <p>Illumination of a surface produced by specular reflection. A specular highlight is seen at points on the surface where the angle from the surface to the viewer is approximately equal to the angle from the surface to a light source.</p>"},{"location":"cn/glossary/#specular-reflection","title":"specular reflection","text":"\u4e2d\u6587\u82f1\u6587 <p>Mirror-like reflection of light rays from a surface. A ray of light is reflected as a ray in the direction that makes the angle of reflection equal to the angle of incidence. A specular reflection can only be seen by a viewer whose position lies on the path of the reflected ray.</p>"},{"location":"cn/glossary/#spotlight","title":"spotlight","text":"\u4e2d\u6587\u82f1\u6587 <p>A light that emits a cone of illumination. A spotlight is similar to a point light in that it has a position in 3D space, and light radiates from that position. However, the light only affects objects that are in the spotlight's cone of illumination.</p>"},{"location":"cn/glossary/#stack","title":"stack","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure with the operations push() and pop(). Pushing an item onto a stack just adds that item to the stack. Popping from the stack will remove and return the item that was most recently pushed onto the stack.</p>"},{"location":"cn/glossary/#storage-buffer","title":"storage buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, a general purpose buffer on the GPU, which can be used in compute shaders as well as in vertex and fragment shaders.</p>"},{"location":"cn/glossary/#storage-qualifier","title":"storage qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, one of the following modifiers on a variable declaration: uniform, attribute, varying, or const.</p>"},{"location":"cn/glossary/#stroking-a-shape","title":"stroking a shape","text":"\u4e2d\u6587\u82f1\u6587 <p>Drawing the outline of a shape, as if a pen is dragged along the boundary of the shape. For a shape with no interior, such as a line segment, stroking the shape simply means dragging the pen along the shape.</p>"},{"location":"cn/glossary/#subsurface-scattering","title":"subsurface scattering","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting effect in which light enters a slightly translucent object, is reflected internally one or more times, and then exits the object at a different point. Subsurface scattering contributes to the appearance of materials such as jade, milk, and skin.</p>"},{"location":"cn/glossary/#svg","title":"SVG","text":"\u4e2d\u6587\u82f1\u6587 <p>Scalable Vector Graphics. An XML language for specifying 2D vector graphics. SVG is a scene description language. It is designed to integrate into web pages.</p>"},{"location":"cn/glossary/#swizzler","title":"swizzler","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL and WGSL, a notation such as v.yzx, where v is a vector and v.yzx represents the three-component vector made up of the y, z, and x components of v. Technically, any use of the dot notation with vectors is considered to be a swizzler.</p>"},{"location":"cn/glossary/#t","title":"T","text":""},{"location":"cn/glossary/#texel","title":"texel","text":"\u4e2d\u6587\u82f1\u6587 <p>A pixel in a texture image.</p>"},{"location":"cn/glossary/#texture","title":"texture","text":"\u4e2d\u6587\u82f1\u6587 <p>Variation in some property from point-to-point on an object. The most common type is image texture. When an image texture is applied to a surface, the surface color varies from point to point.</p>"},{"location":"cn/glossary/#texture-coordinates","title":"texture coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to the 2D coordinate system on a texture image, or to similar coordinate systems for 1D and 3D textures. Texture coordinates typically range from 0 to 1 both vertically and horizontally, with (0,0) at the lower left corner of the image. The term also refers to coordinates that are given for a surface and that are used to specify how a texture image should be mapped to the surface.</p>"},{"location":"cn/glossary/#texture-object","title":"texture object","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that can potentially be stored on the graphics card, and which can hold a texture image, a set of mipmaps, and configuration data such as the current setting for the minification and magnification filters. Using texture objects makes it possible to switch rapidly between textures without having to reload the data into the graphics card.</p>"},{"location":"cn/glossary/#texture-repeat-mode","title":"texture repeat mode","text":"\u4e2d\u6587\u82f1\u6587 <p>Determines how texture coordinates outside the range 0.0 to 1.0 are treated when sampling an image texture. The texture image itself has vertical and horizontal coordinates in the range 0.0 to 1.0. For coordinates outside that range, the texture repeat mode CLAMP or CLAMP_TO_EDGE, for example, clamps the coordinates to the range 0.0 to 1.0, essentially extending the color at the edge of the image indefinitely in all directions. Other repeat modes include REPEAT and MIRRORED_REPEAT.</p>"},{"location":"cn/glossary/#texture-target","title":"texture target","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, one of several kinds of texture, such as 2D image texture, 1D texture, and cube map texture. A texture target is specified by a constant such as GL_TEXTURE_2D or GL_TEXTURE_CUBE_MAP_POSITIVE_X. The texture target is a parameter to many OpenGL functions that work with textures.</p>"},{"location":"cn/glossary/#texture-transformation","title":"texture transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that is applied to texture coordinates before they are used to sample data from a texture. The effect is to translate, rotate, or scale the texture on the surface to which it is applied.</p>"},{"location":"cn/glossary/#texture-unit","title":"texture unit","text":"\u4e2d\u6587\u82f1\u6587 <p>A hardware component in a GPU that does texture lookup. (Can also refer to an abstraction for such a component, whether or not it is actually implemented in hardware.) That is, it maps texture coordinates to colors from an image texture. This is the operation called \"sampling,\" and texture units are associated with sampler variables in GLSL shader programs.</p>"},{"location":"cn/glossary/#threejs","title":"three.js","text":"\u4e2d\u6587\u82f1\u6587 <p>A JavaScript library for 3D graphics. The library implements an object-oriented scene graph API. While it is used primarily with WebGL, three.js can also render 3D scenes using the 2D canvas graphics API.</p>"},{"location":"cn/glossary/#tmu","title":"TMU","text":"\u4e2d\u6587\u82f1\u6587 <p>Texture Mapping Unit, another name for texture unit (perhaps with a stronger implication of actual hardware support). Also called a TPU (Texture Processing Unit).</p>"},{"location":"cn/glossary/#torus","title":"torus","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D geometric object having the shape of a doughnut (or bagel).</p>"},{"location":"cn/glossary/#translation","title":"translation","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that adds a given translation amount to each coordinate of a point. Translation is used to move objects without changing their size or orientation.</p>"},{"location":"cn/glossary/#two-sided-lighting","title":"two-sided lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>An option in OpenGL that allows the back face of a polygon to have different material properties from the front face. Also, when this option is on, the normal vector that is used in lighting calculations for the back face is taken to be the negative of the vector for the front face. (The negative of a vector points in the opposite direction.)</p>"},{"location":"cn/glossary/#typed-array","title":"typed array","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript, an array type that is limited to holding numerical values of a single type. For example, the type Float32Array represents arrays that can hold 32-bit floating point values, and Uint8Array arrays can hold only 8-bit integer values. Such arrays are more efficient than general JavaScript arrays for numerical calculations. The were introduced into JavaScript along with HTML canvas graphics and WebGL.</p>"},{"location":"cn/glossary/#u","title":"U","text":""},{"location":"cn/glossary/#uniform-scaling","title":"uniform scaling","text":"\u4e2d\u6587\u82f1\u6587 <p>A scaling transformation in which the scaling factors in all directions are the same. Uniform scaling changes the size of an object without distorting its shape.</p>"},{"location":"cn/glossary/#uniform-variable","title":"uniform variable","text":"\u4e2d\u6587\u82f1\u6587 <p>Variables that represent input to a shader program in a programmable graphics pipeline. A uniform variable has the same value at every vertex and at every pixel of a primitive.</p>"},{"location":"cn/glossary/#unit-normal","title":"unit normal","text":"\u4e2d\u6587\u82f1\u6587 <p>A normal vector of length one; that is, a unit vector that is perpendicular to a curve or surface at a given point on the curve or surface.</p>"},{"location":"cn/glossary/#unit-vector","title":"unit vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector of length one.</p>"},{"location":"cn/glossary/#unsigned-byte","title":"unsigned byte","text":"\u4e2d\u6587\u82f1\u6587 <p>A data type representing 8-bit non-negative integer values, taking values in the range from 0 to 255.</p>"},{"location":"cn/glossary/#url","title":"URL","text":"\u4e2d\u6587\u82f1\u6587 <p>Uniform Resource Locator. An address of some resource on the World Wide Web. For example, \"http://math.hws.edu/grahicsbook\".</p>"},{"location":"cn/glossary/#v","title":"V","text":""},{"location":"cn/glossary/#vao","title":"VAO","text":"\u4e2d\u6587\u82f1\u6587 <p>Vertex Array Object. In WebGL 2.0, a region of memory, typically on the graphics card, that holds a collection of attribute settings such as enabled state and values of vertex attribute pointers. All of the settings can then be selected simply by binding the VAO.</p>"},{"location":"cn/glossary/#varying-variable","title":"varying variable","text":"\u4e2d\u6587\u82f1\u6587 <p>A variable that is used to communicate values from the vertex shader to the fragment shader in the WebGL or OpenGL ES 2.0 graphics pipeline. A varying variable is assigned a value in the vertex shader. The value of the variable in the fragment shader for a pixel in the primitive is obtained by interpolating the values from the vertices of the primitive. (In newer versions of GLSL, which support additional shader stages, the term \"varying variable\" is replaced by the more general terms \"in variable\" and \"out variable,\" which refer to variables that are used for input to or output from a shader.)</p>"},{"location":"cn/glossary/#vbo","title":"VBO","text":"\u4e2d\u6587\u82f1\u6587 <p>Vertex Buffer Object. A block of memory that can hold the coordinates or other attributes for a set of vertices. A VBO can be stored on a GPU. VBOs make it possible to send such data to the GPU once and then reuse it several times. In OpenGL, VBOs are used with the functions glDrawArrays and glDrawElements.</p>"},{"location":"cn/glossary/#vector","title":"vector","text":"\u4e2d\u6587\u82f1\u6587 <p>An element of a vector space. Elements of a vector space can be added and can be multiplied by constants. For computer graphics, a vector is just a list or array containing two, three, or four numbers. Vectors in that sense are often used to represent points in 2D, 3D, or 4D space. Properly, however, a vector represents a quantity that has a length and a direction; a vector used in this way can be visualized as an arrow.</p>"},{"location":"cn/glossary/#vector-graphics","title":"vector graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>Shape-based graphics in which an image is specified as a list of the shapes or objects that appear in the image.</p>"},{"location":"cn/glossary/#vertex","title":"vertex","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the points that define a geometric primitive, such as the two endpoints of a line segment or the three vertices of a triangle. (The plural is \"vertices.\") A vertex can be specified in a coordinate system by giving its x and y coordinates in 2D graphics, or its x, y, and z coordinates in 3D graphics.</p>"},{"location":"cn/glossary/#vertex-array","title":"vertex array","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, an array that is used to store coordinates or other attribute values for vertices, to be used with the functions glDrawArrays and glDrawElements. A vertex array exists on the \"client side\" of OpenGL, and it must be transmitted to the GPU to be used. In Java's JOGL API for OpenGL, nio buffers are used instead of arrays.</p>"},{"location":"cn/glossary/#vertex-buffer","title":"vertex buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, a vertex buffer is a GPU data structure that holds values to be used as input the vertex shader.</p>"},{"location":"cn/glossary/#vertex-shader","title":"vertex shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A shader program that will be executed once for each vertex in a primitive. A vertex shader must compute the vertex coordinates in the clip coordinate system. It can also compute other properties, such as color.</p>"},{"location":"cn/glossary/#viewing","title":"viewing","text":"\u4e2d\u6587\u82f1\u6587 <p>Setting the position and orientation of the viewer in a 3D world, which determine what will be visible when the 2D image of a 3D world is rendered.</p>"},{"location":"cn/glossary/#viewing-transformation","title":"viewing transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>The transformation in 3D graphics that maps world coordinates to eye coordinates. The viewing transform establishes the position, orientation, and scale of the viewer in the world.</p>"},{"location":"cn/glossary/#viewport","title":"viewport","text":"\u4e2d\u6587\u82f1\u6587 <p>The rectangular area in which the image for 2D or 3D graphics is displayed. The coordinates on the viewport are pixel coordinates, more properly called device coordinates since they are actual physical coordinates on the device where the image is being displayed.</p>"},{"location":"cn/glossary/#viewport-transformation","title":"viewport transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, the final transformation from clip coordinates to device coordinates. The viewport transformation maps the clipping cube (the cube in 3D given by x, y, and z coordinates in the range from -1 to 1) to the viewport (the rectangle in the drawing surface where the image is rendered).</p>"},{"location":"cn/glossary/#view-volume","title":"view volume","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, the region is 3D space that is visible in the rendered image. For orthographic projections, the view volume is a rectangular solid. For perspective projection, the view volume is a frustum (truncated pyramid).</p>"},{"location":"cn/glossary/#view-window","title":"view window","text":"\u4e2d\u6587\u82f1\u6587 <p>As used in this book, the window, or view window, for 2D graphics is the rectangle in the xy-plane that contains the portion of the plane that will be displayed in the image. (The corresponding term in 3D graphics is \"view volume.\")</p>"},{"location":"cn/glossary/#vulkan","title":"Vulkan","text":"\u4e2d\u6587\u82f1\u6587 <p>An open-source cross-platform API for 3D graphics and computation, designed as a more modern and efficient replacement for OpenGL.</p>"},{"location":"cn/glossary/#w","title":"W","text":""},{"location":"cn/glossary/#webgl","title":"WebGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D graphics API for use on web pages. WebGL programs are written in the JavaScript programming language and display their images in HTML canvas elements. WebGL is based on OpenGL ES, the version of OpenGL for embedded systems, with a few changes to adapt it to the JavaScript language and the Web environment.</p>"},{"location":"cn/glossary/#webgl-extension","title":"WebGL extension","text":"\u4e2d\u6587\u82f1\u6587 <p>An optional capability in WebGL that is not available in all implementations. The WebGL API has a function for checking whether a given extension is available and, if so, activating it.</p>"},{"location":"cn/glossary/#webgpu","title":"WebGPU","text":"\u4e2d\u6587\u82f1\u6587 <p>A new JavaScript graphics API, similar to WebGL, but designed to let web programs access modern GPU capabilities such as compute shaders.</p>"},{"location":"cn/glossary/#wgsl","title":"WGSL","text":"\u4e2d\u6587\u82f1\u6587 <p>The WebGPU Shader Language, the programming language in which shaders for use in WebGPU are written.</p>"},{"location":"cn/glossary/#winding-number","title":"winding number","text":"\u4e2d\u6587\u82f1\u6587 <p>The winding number of a path about a point that does not lie on the path is the number of times that the path winds around the point, counting each 360-degree rotation in the positive direction about the point as one and each 360-degree turn in the negative direction as minus one. To compute the winding number, draw a ray extending from the point to infinity. Each crossing of the ray by the path counts as 1 if it crosses the ray going in the positive direction and as negative 1 if it crosses in the negative direction.</p>"},{"location":"cn/glossary/#wireframe","title":"wireframe","text":"\u4e2d\u6587\u82f1\u6587 <p>A style of drawing a polyhedron or polygonal mesh in which only the edges are drawn, resulting in an image made up of line segments.</p>"},{"location":"cn/glossary/#world-coordinates","title":"world coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system in which a scene is defined. The image that is produced of the scene will show the contents of the world coordinate system that lie within some view volume (for 3D) or view window (for 2D). Objects are defined in their own object coordinate system. Modeling transformations are then applied to place objects into the scene; that is, they transform object coordinates to world coordinates.</p>"},{"location":"cn/glossary/#x","title":"X","text":""},{"location":"cn/glossary/#xml","title":"XML","text":"\u4e2d\u6587\u82f1\u6587 <p>eXtensible Markup Language. Not a single language as such, but a class of languages that follow certain syntax rules. For example, SVG is an XML language because it follows those rules, but it also has further restrictions on its syntax that make it appropriate for specifying 2D graphics. XML documents, like HTML documents, have a tree-like structure defined by \"elements.\" However, HTML is not an XML language since it does not follow all the syntax rules. XHTML is an alternative language for web pages that is similar to HTML but follows XML syntax rules.</p>"},{"location":"cn/preface/","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b80\u4ecb\uff0c\u7248\u672c 1.4","text":""},{"location":"cn/preface/#\u524d\u8a00","title":"\u524d\u8a00","text":"<p>\u8fd9\u672c\u6559\u79d1\u4e66\u4ee3\u8868\u4e86\u6211\u5f00\u53d1\u4e00\u5b66\u671f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b2c\u4e00\u95e8\u8bfe\u7a0b\u7684\u5c1d\u8bd5\uff0c\u8be5\u8bfe\u7a0b\u901a\u5e38\u7531\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u7684\u5b66\u751f\u5728\u5927\u5b66\u7b2c\u4e09\u5e74\u6216\u7b2c\u56db\u5e74\u5b66\u4e60\u3002 \uff08\u8003\u8651\u5230\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u9886\u57df\u603b\u662f\u5728\u5feb\u901f\u53d8\u5316\uff0c\u5b83\u80fd\u6301\u7eed\u9002\u7528\u591a\u4e45\u662f\u4e00\u4e2a\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\u3002\uff09\u6211\u4e5f\u8bd5\u56fe\u4f7f\u8fd9\u672c\u4e66\u9002\u5408\u81ea\u5b66\u3002</p> <p>\u672c\u4e66\u7684\u8bfb\u8005\u5e94\u8be5\u5177\u6709\u81f3\u5c11\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u4e30\u5bcc\u7ecf\u9a8c\uff0c\u5305\u62ec\u4e00\u4e9b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u548c\u6570\u636e\u7ed3\u6784\u7684\u77e5\u8bc6\u3002\u6bcf\u4e2a\u53c2\u52a0\u6211\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u8bfe\u7a0b\u7684\u4eba\u90fd\u81f3\u5c11\u6709\u4e24\u4e2a\u5b66\u671f\u7684\u7f16\u7a0b\u7ecf\u9a8c\uff0c\u800c\u4e14\u5927\u591a\u6570\u4eba\u90fd\u6709\u9664\u6b64\u4e4b\u5916\u7684\u989d\u5916\u7ecf\u9a8c\u3002\u6211\u7684\u5b66\u751f\u5b66\u4e60\u4e86 Java \u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u5177\u6709\u5176\u4ed6\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u4e5f\u5e94\u8be5\u53ef\u4ee5\u9605\u8bfb\u8fd9\u672c\u4e66\u3002\u4e66\u4e2d\u7684\u793a\u4f8b\u4f7f\u7528 JavaScript\u3001Java \u548c C\u3002\u53ef\u4ee5\u7528 JavaScript \u8fdb\u884c\u6240\u6709\u7f16\u7a0b\uff0c\u4f46\u4e00\u4e9b C \u77e5\u8bc6\u5bf9\u4e8e\u672c\u4e66\u7684\u67d0\u4e9b\u90e8\u5206\u4e5f\u5f88\u91cd\u8981\u3002\u9644\u5f55\u4e2d\u4ecb\u7ecd\u4e86\u8fd9\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u529f\u80fd\u3002 \uff08\u5982\u679c\u60a8\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\uff0c\u8bf7\u5c1d\u8bd5\u6211\u7684\u514d\u8d39 Java \u5165\u95e8\u6559\u79d1\u4e66\uff0c\u53ef\u4ece http://math.hws.edu/javanotes\u83b7\u53d6\u3002\uff09</p> <p>\u6211\u5728 2015 \u5e74\u79cb\u5b63\u7684\u4e00\u95e8\u8bfe\u7a0b\u4e2d\u4f7f\u7528\u4e86\u672c\u4e66\u7684 1.0 \u7248\u672c\u30021.1 \u7248\u672c\u7ea0\u6b63\u4e86\u4e00\u4e9b\u9519\u8bef\u548c\u62fc\u5199\u9519\u8bef\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6750\u6599\u3002\u6211\u7684\u8bfe\u7a0b 2017 \u5e74\u79cb\u5b63\u7248\u672c\u4e2d\u4f7f\u7528\u4e86\u5b83\u3002\u6211\u5728 2021 \u5e74\u79cb\u5b63\u4f7f\u7528\u7684\u7248\u672c 1.3 \u6dfb\u52a0\u4e86\u4e00\u4e9b\u6709\u5173 WebGL 2.0 \u548c GLSL ES 3.00 \u7684\u6750\u6599\uff0c\u66f4\u65b0\u4e86\u5927\u90e8\u5206 JavaScript \u4ee3\u7801\u4ee5\u4f7f\u7528 ES6\uff0c\u5e76\u66f4\u65b0\u4e86\u7b2c 5 \u7ae0\u4ee5\u4f7f\u7528Three.js\u5e93\u7684\u7248\u672c 129\u3002</p> <p>\u5c3d\u7ba1\u6211\u5df2\u7ecf\u4ece\u6559\u5b66\u5c97\u4f4d\u9000\u4f11\uff0c\u4f46\u6211\u51b3\u5b9a\u5728 2023 \u5e74\u590f\u5b63\u5f00\u53d1 1.4 \u7248\u672c\u3002\u6211\u6dfb\u52a0\u4e86\u6709\u5173 WebGPU \u7684\u65b0\u7ae0\u8282\uff0c\u5e76\u8fc1\u79fb\u5230Three.js\u7684\u7248\u672c 154 \u3002\u7531\u4e8e WebGPU \u4f7f\u7528 JavaScript Promise\uff0c\u56e0\u6b64\u6211\u5728\u9644\u5f55 A \u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u90e8\u5206\u6765\u4ecb\u7ecd Promise \u548c\u5f02\u6b65\u51fd\u6570\u3002\u56e0\u4e3aThree.js\u5f88\u5feb\u5c31\u4f1a\u5220\u9664\u8be5\u5e93\u7684\u975e\u6a21\u5757\u5316\u7248\u672c\uff0c\u6240\u4ee5\u6211\u5728\u7b2c 5 \u7ae0\u5f00\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5173\u4e8e JavaScript \u6a21\u5757\u7684\u7b80\u77ed\u90e8\u5206\uff0c\u5e76\u4e14\u4fee\u6539\u4e86Three.js\u793a\u4f8b\u4ee5\u4f7f\u7528\u6a21\u5757\u3002\u9664\u4e86\u8f6c\u5411\u6a21\u5757\u5316\u7684Three.js\u4e4b\u5916\uff0c\u7b2c 5 \u7ae0\u4e2d\u7684\u5185\u5bb9\u6ca1\u6709\u6539\u53d8\u3002\u6574\u672c\u4e66\u4e2d\u7684\u8bb8\u591a\u9519\u522b\u5b57\u548c\u5c0f\u9519\u8bef\u90fd\u5f97\u5230\u4e86\u4fee\u6b63\u3002 \uff08\u611f\u8c22\u8bfb\u8005 Danny Hurlburt \u4fee\u590d\u4e86\u5176\u4e2d\u7684\u8bb8\u591a\u95ee\u9898\u3002\uff09</p> <p>\u672c\u4e66\u7684\u4e3b\u9875\u7f51\u7ad9\u662f https://math.hws.edu/graphicsbook \u3002\u8be5\u5730\u5740\u7684\u9875\u9762\u5305\u542b\u7528\u4e8e\u4e0b\u8f7d\u7f51\u7ad9\u526f\u672c\u548c\u4e0b\u8f7d\u672c\u4e66PDF\u7248\u672c\u7684\u94fe\u63a5\u3002</p> <p>\u8fd9\u662f\u4e00\u672c\u514d\u8d39\u6559\u79d1\u4e66\u3002\u6b22\u8fce\u60a8\u91cd\u65b0\u5206\u53d1\u5b83\uff0c\u53ea\u8981\u60a8\u4e0d\u6536\u53d6\u4efb\u4f55\u8d39\u7528\u3002\u60a8\u53ef\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u53d1\u5e03\u672a\u7ecf\u4fee\u6539\u7684\u526f\u672c\u3002\u60a8\u53ef\u4ee5\u5236\u4f5c\u548c\u5206\u53d1\u4fee\u6539\u7248\u672c\uff08\u5305\u62ec\u7ffb\u8bd1\uff09\uff0c\u53ea\u8981\u60a8\u7684\u7248\u672c\u660e\u786e\u539f\u59cb\u6765\u6e90\u5e76\u4e14\u5728\u540c\u4e00\u8bb8\u53ef\u8bc1\u4e0b\u514d\u8d39\u5206\u53d1\u5373\u53ef\u3002 \uff08\u6b63\u5f0f\u5730\uff0c\u8fd9\u672c\u4e66\u662f\u6839\u636e\u201c\u77e5\u8bc6\u5171\u4eab\u975e\u5546\u4e1a\u7f72\u540d\u76f8\u540c\u65b9\u5f0f\u5171\u4eab\u8bb8\u53ef\u8bc1\u201d\u83b7\u5f97\u8bb8\u53ef\u7684\u3002\uff09</p> <p>\u672c\u4e66\u7684\u8bb8\u591a\u793a\u4f8b\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u90fd\u662f\u8981\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u7684\u7f51\u9875\u3002\u672c\u4e66\u7684\u7f51\u7edc\u7248\u672c\u5305\u62ec\u96c6\u6210\u5230\u672c\u4e66\u7f51\u9875\u4e2d\u7684\u4ea4\u4e92\u5f0f\u6f14\u793a\u7a0b\u5e8f\u3002</p> <p>\u5927\u591a\u6570\u793a\u4f8b\u7a0b\u5e8f\u548c\u6240\u6709\u6f14\u793a\u90fd\u4f7f\u7528 HTML \u753b\u5e03\u56fe\u5f62\uff08\u7b2c 2 \u7ae0\u4e2d\uff09\u3001WebGPU\uff08\u7b2c 9 \u7ae0\u4e2d\uff09\u6216 WebGL\uff08\u5176\u4ed6\u7ae0\u8282\u4e2d\uff09\u3002 Canvas \u56fe\u5f62\u548c WebGL \u5e94\u8be5\u53ef\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u73b0\u4ee3\u6d4f\u89c8\u5668\u4e2d\u6b63\u5e38\u5de5\u4f5c\u3002 WebGPU\u662f\u4e00\u9879\u65b0\u6280\u672f\uff0c\u95ee\u9898\u4e5f\u6bd4\u8f83\u591a\u3002\u5230 2023 \u5e74 7 \u6708\uff0c\u5b83\u9ed8\u8ba4\u4ec5\u5728\u5c11\u6570 Web \u6d4f\u89c8\u5668\uff08Windows \u548c MacOS \u4e0a\u7684 Chrome \u548c Edge\uff09\u4e2d\u53ef\u7528\uff0c\u751a\u81f3\u5728\u90a3\u4e9b\u6d4f\u89c8\u5668\u4e0a\u4e5f\u53ef\u80fd\u65e0\u6cd5\u5728\u6240\u6709\u786c\u4ef6\u4e0a\u8fd0\u884c\u3002\u5728\u5176\u4ed6\u4e00\u4e9b\u6d4f\u89c8\u5668\u4e2d\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u5b9e\u9a8c\u6027\u529f\u80fd\u542f\u7528\u3002\u7136\u800c\uff0cWebGPU \u5f88\u53ef\u80fd\u6210\u4e3a Web 3D \u56fe\u5f62\u7684\u672a\u6765\uff0c\u56e0\u6b64\u5f00\u59cb\u5b66\u4e60\u5b83\u5f88\u91cd\u8981\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u548c\u6f14\u793a\u90fd\u53ef\u4ee5\u5728\u672c\u4e66\u7684\u7f51\u7ad9\u7248\u672c\u7684\u4e0b\u8f7d\u4e2d\u627e\u5230\uff0c\u8be5\u7248\u672c\u53ef\u4ee5\u4ece\u5176 \u4e3b\u9875\u83b7\u5f97\u3002\u5728\u540d\u4e3asource\u548cdemo \u7684\u6587\u4ef6\u5939\u4e2d\u67e5\u627e\u5b83\u4eec\u3002\u8bf7\u6ce8\u610f\uff0c\u5927\u591a\u6570 Web \u6d4f\u89c8\u5668\u4e0d\u613f\u610f\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e9b\u8d44\u6e90\uff0c\u4f8b\u5982 3D \u6a21\u578b\u548c\u6a21\u5757\u5316 JavaScript \u811a\u672c\u3002\u5f53\u8fd9\u4e9b\u6d4f\u89c8\u5668\u5c1d\u8bd5\u5728\u672c\u5730\u800c\u4e0d\u662f\u901a\u8fc7 Web \u8fd0\u884c\u67d0\u4e9b\u793a\u4f8b\u65f6\uff0c\u5b83\u4eec\u5c06\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u6b64\u95ee\u9898\u4ec5\u5f71\u54cd\u90e8\u5206\u793a\u4f8b\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u672c\u4e66\u7684\u5728\u7ebf\u7248\u672c\u3002\u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7f51\u7edc\u670d\u52a1\u5668\u5e76\u901a\u8fc7\u8be5\u7f51\u7edc\u670d\u52a1\u5668\u67e5\u770b\u6559\u79d1\u4e66\u3002\u53ef\u4ee5\u5c06 Web \u6d4f\u89c8\u5668\u914d\u7f6e\u4e3a\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u4e2d\u7684\u8d44\u6e90\uff0c\u5c3d\u7ba1\u4f7f\u7528\u8be5\u914d\u7f6e\u6d4f\u89c8 Web \u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002</p> <p>\u5728\u8fd1 35 \u5e74\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u6bcf\u9694\u51e0\u5e74\u5de6\u53f3\u5c31\u6559\u6388\u4e00\u6b21\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3002\u968f\u7740\u8be5\u9886\u57df\u7684\u53d1\u5c55\uff0c\u6211\u51e0\u4e4e\u6bcf\u6b21\u6559\u6388\u8bfe\u7a0b\u65f6\u90fd\u5fc5\u987b\u505a\u51fa\u91cd\u5927\u6539\u53d8\uff0c\u4f46\u5728\u5927\u90e8\u5206\u65f6\u95f4\u91cc\uff0c\u6211\u80fd\u591f\u4e3b\u8981\u56f4\u7ed5 OpenGL 1.1\uff08\u4e00\u79cd\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u666e\u904d\u4f7f\u7528\u7684\u56fe\u5f62 API\uff09\u6765\u6784\u5efa\u8bfe\u7a0b\u3002 OpenGL 1.1 \u4ee5\u900f\u660e\u4e14\u76f8\u5f53\u6613\u4e8e\u4f7f\u7528\u7684\u65b9\u5f0f\u5b9e\u73b0\u57fa\u672c\u56fe\u5f62\u6982\u5ff5\uff08\u9876\u70b9\u3001\u6cd5\u5411\u91cf\u3001\u5750\u6807\u53d8\u6362\u3001\u5149\u7167\u548c\u6750\u8d28\uff09\u3002\u8f83\u65b0\u7684\u56fe\u5f62 API \u66f4\u7075\u6d3b\u3001\u66f4\u5f3a\u5927\uff0c\u4f46\u5b66\u4e60\u66f2\u7ebf\u66f4\u9661\u5ced\u3002\u6211\u76f8\u4fe1\u4efb\u4f55\u8ba1\u7b97\u673a\u79d1\u5b66\u5165\u95e8\u8bfe\u7a0b\u90fd\u53d7\u76ca\u4e8e\u4ece\u66f4\u7b80\u5355\u7684\u6846\u67b6\u6216\u5e93\u5f00\u59cb\uff0c\u800c OpenGL 1.1 \u5f88\u597d\u5730\u5b9e\u73b0\u4e86\u8fd9\u4e00\u76ee\u7684\u3002</p> <p>OpenGL \u4ecd\u7136\u53d7\u5230\u5e7f\u6cdb\u652f\u6301\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u5b83\u6613\u4e8e\u4f7f\u7528\u7684\u90e8\u5206\u5df2\u4ece\u6700\u65b0\u7248\u672c\u4e2d\u6b63\u5f0f\u5220\u9664\uff08\u5c3d\u7ba1\u5b9e\u9645\u4e0a\u5927\u591a\u6570\u53f0\u5f0f\u8ba1\u7b97\u673a\u90fd\u652f\u6301\u5b83\u4eec\uff09\u3002\u6b64\u5916\uff0cOpenGL \u6b63\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u88ab\u66f4\u65b0\u7684\u56fe\u5f62 API\uff08\u4f8b\u5982 Direct3D\u3001Metal \u548c Vulkan\uff09\u6240\u53d6\u4ee3\u3002 WebGL \u57fa\u4e8e OpenGL\uff0c\u5e76\u5c06\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u7ee7\u7eed\u5f97\u5230\u5e7f\u6cdb\u652f\u6301\u3002 WebGPU \u53d7\u5230\u8f83\u65b0 API \u7684\u542f\u53d1\uff0c\u5e76\u4e14\u53ef\u80fd\u5728\u67d0\u4e9b\u65f6\u5019\u53d6\u4ee3\u65b0\u5e94\u7528\u7a0b\u5e8f\u7684 WebGL\u3002</p> <p>\u6211\u5728\u672c\u4e66\u4e2d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 OpenGL 1.1 \u7684\u4e00\u4e2a\u5b50\u96c6\u4f5c\u4e3a\u6846\u67b6\u6765\u4ecb\u7ecd\u4e09\u7ef4\u56fe\u5f62\u7684\u57fa\u672c\u6982\u5ff5\u3002\u7136\u540e\u6211\u5c06\u7ee7\u7eed\u4ecb\u7ecd WebGL\uff0c\u8fd9\u662f\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684 OpenGL \u7248\u672c\u3002\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86WebGPU\u3002\u867d\u7136 OpenGL \u6784\u6210\u4e86\u672c\u8bfe\u7a0b\u7684\u4e3b\u8981\u57fa\u7840\uff0c\u4f46\u771f\u6b63\u7684\u91cd\u70b9\u662f\u51e0\u4f55\u5efa\u6a21\u548c\u53d8\u6362\u7b49\u57fa\u672c\u6982\u5ff5\uff1b\u5206\u5c42\u5efa\u6a21\u548c\u573a\u666f\u56fe\uff1b\u989c\u8272\u3001\u706f\u5149\u548c\u7eb9\u7406\uff1b\u548c\u52a8\u753b\u3002\u6211\u4ecd\u7136\u76f8\u4fe1 OpenGL 1.1 \u5f88\u597d\u5730\u4ecb\u7ecd\u4e86\u8fd9\u79cd\u6750\u8d28\u3002</p> <p>\u7b2c 1 \u7ae0\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u7b80\u77ed\u6982\u8ff0\u3002\u5b83\u4ecb\u7ecd\u4e86\u8bb8\u591a\u6982\u5ff5\uff0c\u672c\u4e66\u7684\u5176\u4f59\u90e8\u5206\u5c06\u66f4\u8be6\u7ec6\u5730\u4ecb\u7ecd\u8fd9\u4e9b\u6982\u5ff5\u3002</p> <p>\u7b2c 2 \u7ae0\u4ecb\u7ecd\u4e86 Java\u3001JavaScript \u548c SVG \u4e2d\u7684\u4e8c\u7ef4\u56fe\u5f62\uff0c\u91cd\u70b9\u4ecb\u7ecd\u4e86\u8bf8\u5982\u8f6c\u6362\u548c\u573a\u666f\u56fe\u7b49\u53ef\u6269\u5c55\u5230\u4e09\u7ef4\u7684\u6982\u5ff5\u3002</p> <p>\u7b2c 3 \u7ae0\u548c\u7b2c4 \u7ae0\u4ecb\u7ecd\u4e86 OpenGL 1.1\u3002\u867d\u7136\u6309\u7167\u4eca\u5929\u7684\u6807\u51c6\u6765\u770b OpenGL 1.1 \u76f8\u5f53\u539f\u59cb\uff0c\u4f46\u5b83\u5305\u542b\u7684\u8bb8\u591a\u57fa\u672c\u529f\u80fd\u4ecd\u7136\u662f 3D \u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u57fa\u7840\u3002\u4ec5\u6db5\u76d6\u90e8\u5206 API\u3002</p> <p>\u7b2c 5 \u7ae0\u4ecb\u7ecd\u4e86Three.js\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528 JavaScript \u8fdb\u884c Web \u56fe\u5f62\u7684\u9ad8\u7ea7\u9762\u5411\u5bf9\u8c61 3D \u56fe\u5f62 API\u3002\u672c\u7ae0\u5c55\u793a\u4e86\u5982\u4f55\u5728\u66f4\u9ad8\u7ea7\u522b\u7684\u63a5\u53e3\u4e2d\u4f7f\u7528\u57fa\u672c\u6982\u5ff5\u3002</p> <p>\u7b2c 6 \u7ae0\u548c\u7b2c7 \u7ae0\u4ecb\u7ecd\u4e86 WebGL\uff0c\u5b83\u662f\u7528\u4e8e Web \u56fe\u5f62\u7684 OpenGL \u7684\u73b0\u4ee3\u7248\u672c\u3002 WebGL \u975e\u5e38\u5e95\u5c42\uff0c\u5b83\u9700\u8981\u7a0b\u5e8f\u5458\u7f16\u5199\u201c\u7740\u8272\u5668\u7a0b\u5e8f\u201d\u6765\u5b9e\u73b0 OpenGL 1.1 \u4e2d\u5185\u7f6e\u7684\u8bb8\u591a\u529f\u80fd\u3002\u67e5\u770b\u5b9e\u73b0\u662f\u4e00\u4e2a\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u8ba1\u7b97\u673a\u5982\u4f55\u5b9e\u9645\u5236\u4f5c 3D \u56fe\u50cf\u7684\u673a\u4f1a\u3002</p> <p>\u7b2c 8 \u7ae0\u975e\u5e38\u7b80\u8981\u5730\u4ecb\u7ecd\u4e86 OpenGL \u4e2d\u65e0\u6cd5\u5b9e\u73b0\u7684\u4e00\u4e9b\u9ad8\u7ea7\u6280\u672f\u3002</p> <p>\u7b2c 9 \u7ae0\u4ecb\u7ecd\u4e86 WebGPU\uff0c\u8fd9\u662f\u6700\u65b0\u7684 Web \u56fe\u5f62 API \u3002</p> <p>\u9644\u5f55 A\u7b80\u8981\u4ecb\u7ecd\u4e86\u672c\u4e66\u4e2d\u4f7f\u7528\u7684\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\uff1aJava\u3001C \u548c JavaScript\u3002 \u9644\u5f55 B\u65e8\u5728\u8ba9\u8bfb\u8005\u5f00\u59cb\u4e86\u89e3 Blender\uff08\u4e00\u4e2a\u590d\u6742\u7684 3D \u5efa\u6a21\u7a0b\u5e8f\uff09\u7684\u6700\u57fa\u672c\u7528\u6cd5\u3002\u6211\u53d1\u73b0\u5411\u5b66\u751f\u4ecb\u7ecd Blender \u662f\u5e2e\u52a9\u4ed6\u4eec\u53d1\u5c55\u4e09\u7ef4\u76f4\u89c9\u7684\u597d\u65b9\u6cd5\u3002 \u9644\u5f55 C\u5305\u542b\u5bf9\u4e24\u4e2a 2D \u56fe\u5f62\u7a0b\u5e8f Gimp \u548c Inkscape \u7684\u66f4\u7b80\u8981\u4ecb\u7ecd\u3002</p> <p>\u65e7\u7248\u672c\u4ecd\u7136\u53ef\u7528\uff1a</p> <ul> <li>1.0\u7248\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.0/</li> <li>\u7248\u672c 1.1\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.1/</li> <li>\u7248\u672c 1.2\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.2/</li> <li>\u7248\u672c 1.3\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.3/</li> <li>\u6240\u6709\u7248\u672c\u7684\u4e0b\u8f7d\u90fd\u53ef\u4ee5\u5728 https://math.hws.edu/eck/cs424/downloads/ \u627e\u5230\u3002</li> </ul> <p>\u672c\u4e66\u7684 PDF \u548c\u7f51\u7ad9\u7248\u672c\u662f\u6839\u636e\u4e00\u7ec4\u5e38\u89c1\u6765\u6e90\u6784\u5efa\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u5728 GitHub \u4e0a\u514b\u9686\u4ee5\u4e0b git \u5b58\u50a8\u5e93\u6765\u83b7\u53d6\u6e90\u4ee3\u7801\uff1a https://github.com/davidjeck/graphicsbook</p> <p>\u8fd9\u4e9b\u6765\u6e90\u6700\u521d\u5e76\u4e0d\u6253\u7b97\u51fa\u7248\uff0c\u5e76\u4e14\u5bf9\u53ef\u80fd\u6709\u5174\u8da3\u7814\u7a76\u5b83\u4eec\u7684\u4eba\u6ca1\u6709\u4efb\u4f55\u4fdd\u8bc1\u548c\u975e\u5e38\u6709\u9650\u7684\u652f\u6301\u3002</p> <p>\u6e90\u5305\u62ec\u56fe\u50cf\u3001HTML \u6587\u4ef6\u3001Java \u548c C \u6e90\u4ee3\u7801\u3001XML \u6587\u4ef6\u3001XSLT \u8f6c\u6362\u3001bash shell \u811a\u672c\u548c LaTeX \u5b8f\u3002\u4f7f\u7528\u6e90\u4ee3\u7801\u9700\u8981\u989d\u5916\u7684\u8f6f\u4ef6\uff08LaTeX\u3001Xalan-J\u3001Java \u548c bash shell\uff09\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u81ea\u8ff0\u6587\u4ef6\u3002</p> <p>David J. Eck\uff0c \u970d\u5df4\u7279\u548c\u5a01\u5ec9\u53f2\u5bc6\u65af\u5b66\u9662</p> <p>\u6570\u5b66\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u7cfb\u540d\u8a89\u6559\u6388 300 Pulteney StreetGeneva , New York 14456, USA</p> <p>\u7535\u5b50\u90ae\u4ef6\uff1aeck@hws.edu</p> <p>WWW\uff1ahttp://math.hws.edu/eck/ , 2023</p>"},{"location":"cn/a1/","title":"\u9644\u5f55A - \u7f16\u7a0b\u8bed\u8a00","text":"<p>\u672c\u9644\u5f55\u5305\u542b\u5bf9\u6559\u79d1\u4e66\u4e2d\u4f7f\u7528\u7684\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u7b80\u8981\u4ecb\u7ecd\uff1aJava\u3001C \u548c JavaScript\u3002\u5728\u9605\u8bfb\u672c\u6559\u79d1\u4e66\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u81f3\u5c11\u719f\u6089\u4e09\u79cd\u8bed\u8a00\u4e2d\u7684\u4e00\u79cd\u3002\u8fd9\u4e09\u79cd\u8bed\u8a00\u6709\u4e00\u4e9b\u5171\u540c\u70b9\uff0c\u56e0\u6b64\u4e86\u89e3\u4e00\u79cd\u8bed\u8a00\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5b66\u4e60\u5176\u4ed6\u8bed\u8a00\u3002\u60a8\u8fd8\u5e94\u8be5\u81f3\u5c11\u5bf9\u7c7b\u3001\u5bf9\u8c61\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u719f\u6089\u3002</p> <p>\u9644\u5f55\u65e8\u5728\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528\u60a8\u8fd8\u4e0d\u77e5\u9053\u7684\u8bed\u8a00\u3002\u4ec5\u7ed9\u51fa\u4e86\u6bcf\u79cd\u8bed\u8a00\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\uff0c\u4f46\u5e0c\u671b\u8db3\u4ee5\u8ba9\u60a8\u7406\u89e3\u4e66\u4e2d\u7684\u793a\u4f8b\u5e76\u7f16\u5199\u4e00\u4e9b\u4f7f\u7528\u6240\u6db5\u76d6\u7684\u56fe\u5f62\u6280\u672f\u7684\u7a0b\u5e8f\u3002\u60a8\u81f3\u5c11\u5e94\u8be5\u80fd\u591f\u4f7f\u7528\u672c\u6559\u79d1\u4e66\u9644\u5e26\u7684\u793a\u4f8b\u7a0b\u5e8f\u3002</p> <p>Java \u4ec5\u5bf9\u4e8e\u7b2c 2.5 \u8282\u662f\u5f3a\u5236\u6027\u7684\u3002\u7b2c3\u7ae0\u548c\u7b2c4\u7ae0\u4e2d\u5173\u4e8eOpenGL  1.1\u7684\u6750\u6599 \u53ef\u4ee5\u4f7f\u7528Java\u6216C\u3002\u6216\u8005\uff0c\u5982\u679c\u60a8\u66f4\u559c\u6b22 JavaScript\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u7684 glsim.js\uff08\u7b2c 3.6.3 \u5c0f\u8282\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u6a21\u62df OpenGL 1.1 \u5927\u90e8\u5206\u7684 JavaScript \u5e93\u3002\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u81f3\u5c11\u9700\u8981\u5bf9 C \u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u624d\u80fd\u8ddf\u4e0a\u8ba8\u8bba\u3002WebGL\u4f7f\u7528\u7684\u7740\u8272\u5668\u7f16\u7a0b\u8bed\u8a00\u57fa\u4e8e C\uff0c\u56e0\u6b64\u4e00\u4e9b C \u77e5\u8bc6\u4e5f\u5f88\u6709\u7528\u3002 \uff08\u4f46\u662f\uff0c\u4e3a\u4e86\u7f16\u5199 WebGL \u7740\u8272\u5668\uff0c\u60a8\u4e0d\u9700\u8981\u4e86\u89e3 C \u6700\u4ee4\u4eba\u56f0\u60d1\u7684\u65b9\u9762\u4e4b\u4e00\uff0c\u5373\u5b83\u5982\u4f55\u4f7f\u7528\u6307\u9488\u7684\u7ec6\u8282\uff09\u3002 JavaScript \u5bf9\u4e8eWebGL\u7f16\u7a0b\uff08\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\uff09 \u3001\u4f7f\u7528Three.js\u7f16\u7a0b\uff08\u7b2c 5 \u7ae0\uff09\u548c WebGPU\uff08\u7b2c 9 \u7ae0\uff09\u81f3\u5173\u91cd\u8981\u3002\u5b83\u4e5f\u7528\u4e8e \u7b2c 2.6 \u8282\u4e2d\u7684HTML \u753b\u5e03\u56fe\u5f62\u3002</p> <p>\u9644\u5f55A\u7684\u5185\u5bb9\uff1a</p> <ul> <li>\u7b2c 1 \u90e8\u5206\uff1aJava \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 2 \u90e8\u5206\uff1aC \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 3 \u8282\uff1aJavaScript \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 4 \u8282\uff1aJavaScript Promise \u548c\u5f02\u6b65\u51fd\u6570</li> </ul>"},{"location":"cn/a1/s1/","title":"A.1  Java \u7f16\u7a0b\u8bed\u8a00","text":"<p>A.1  The Java Programming Language</p> \u4e2d\u6587\u82f1\u6587 <p>Java \u5728\u8bb8\u591a\u5927\u5b66\u548c\u9ad8\u4e2d\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u8bfe\u7a0b\u4e2d\u4f5c\u4e3a\u7b2c\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u8fdb\u884c\u6559\u6388\u3002\u5b83\u662f\u4e00\u79cd\u5e9e\u5927\u4e14\u590d\u6742\u7684\u8bed\u8a00\uff0c\u5177\u6709\u4f7f\u5176\u9002\u5408\u5927\u578b\u590d\u6742\u7f16\u7a0b\u9879\u76ee\u7684\u529f\u80fd\u3002\u8fd9\u4e9b\u7279\u6027\u53ef\u80fd\u4f7f\u5b83\u770b\u8d77\u6765\u6709\u70b9\u5197\u957f\u548c\u8fc7\u4e8e\u4e25\u683c\uff0c\u4f46\u5b83\u4eec\u4e5f\u4f7f\u5f97\u7f16\u7a0b\u73af\u5883\u80fd\u591f\u4e3a\u7f16\u5199\u548c\u8c03\u8bd5\u7a0b\u5e8f\u63d0\u4f9b\u6781\u597d\u7684\u652f\u6301\u3002\u5982\u679c\u4f60\u6253\u7b97\u7f16\u5199 Java \u4ee3\u7801\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\u7684\u7f16\u7a0b\u73af\u5883\uff0c\u6bd4\u5982 Eclipse\uff08Eclipse \u5b98\u7f51\uff09\u30023.6.2 \u5c0f\u8282 \u8bb2\u89e3\u4e86\u5982\u4f55\u4e3a\u4f7f\u7528 JOGL\uff08Java API for OpenGL\uff09\u7f16\u7a0b\u8bbe\u7f6e Eclipse\u3002</p> <p>\u8fd9\u672c\u4e66\u9644\u5e26\u4e86\u51e0\u4e2a\u7528\u4e8e\u7f16\u5199\u56fe\u5f62 Java \u7a0b\u5e8f\u7684\u201c\u542f\u52a8\u201d\u7a0b\u5e8f\uff0c\u4f8b\u5982 java2d/EventsStarter.java \u7528\u4e8e Java Graphics2D\uff0cjogl/JoglStarter.java \u7528\u4e8e JOGL\u3002\u5c3d\u7ba1\u672c\u8282\u6ca1\u6709\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f\u8ba9\u4f60\u4ece\u5934\u5f00\u59cb\u7f16\u5199 Java \u7a0b\u5e8f\uff0c\u4f46\u5b83\u53ef\u80fd\u6709\u8db3\u591f\u7684\u4fe1\u606f\u8ba9\u4f60\u5728\u542f\u52a8\u7a0b\u5e8f\u4e2d\u201c\u586b\u8865\u7a7a\u767d\u201d\u5e76\u4fee\u6539\u968f\u4e66\u9644\u5e26\u7684\u5176\u4ed6\u793a\u4f8b\u7a0b\u5e8f\u3002\u5982\u679c\u4f60\u60f3\u66f4\u8be6\u7ec6\u5730\u5b66\u4e60 Java\uff0c\u4f60\u53ef\u4ee5\u8003\u8651\u6211\u7684\u514d\u8d39\u5728\u7ebf Java \u6559\u79d1\u4e66\uff0cJavaNotes\u3002</p> <p>Java \u6709\u51e0\u4e2a 2D \u56fe\u5f62 API\uff1aAWT\u3001Swing \u548c JavaFX\u3002Swing \u5efa\u7acb\u5728 AWT \u4e4b\u4e0a\uff0c\u800c JavaFX \u662f\u4e00\u4e2a\u5168\u65b0\u7684 API\u3002JavaFX \u5728\u8fd9\u672c\u6559\u79d1\u4e66\u4e2d\u6ca1\u6709\u4f7f\u7528\uff0c\u4f46\u4f60\u5c06\u5728\u8fd9\u91cc\u770b\u5230\u5bf9 Swing \u548c AWT \u7684\u5f15\u7528\u3002</p> <p>Java is taught as a first programming language in many college and high school computer science programs. It is a large and complex language, with features that make it suitable for large and complex programming projects. Those features can make it seem a little verbose and overly strict, but they also make it possible for programming environments to provide excellent support for writing and debugging programs. If you are going to write Java code, you should consider using a full-featured programming environment such as Eclipse (https://eclipse.org/). Subsection 3.6.2 explains how to set up Eclipse for programming with JOGL, the Java API for OpenGL.</p> <p>This book comes with several \"starter\" programs for writing graphical Java programs, such as java2d/EventsStarter.java for Java Graphics2D and jogl/JoglStarter.java for JOGL. Although this section doesn't tell you enough to let you write Java programs from scratch, it might have enough information to let you \"fill in the blanks\" in the starter programs and modify other sample programs that come with the book. If you want to learn Java in more detail, you can consider my free on-line Java textbook, http://math.hws.edu/javanotes.</p> <p>Java has had several 2D graphics APIs: AWT, Swing, and JavaFX. Swing is built on top of the AWT, while JavaFX is a completely new API. JavaFX is not used in this textbook, but you will see references here both to Swing and to the AWT.</p>"},{"location":"cn/a1/s1/#a11-\u57fa\u672c\u8bed\u8a00\u7ed3\u6784","title":"A.1.1  \u57fa\u672c\u8bed\u8a00\u7ed3\u6784","text":"<p>A.1.1  Basic Language Structure</p> \u4e2d\u6587\u82f1\u6587 <p>Java \u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u3002\u4e00\u4e2a Java \u7a0b\u5e8f\u7531\u7c7b\u7ec4\u6210\uff0c\u7c7b\u4e2d\u53ef\u4ee5\u5305\u542b\u53d8\u91cf\u5b9a\u4e49\u548c\u65b9\u6cd5\u5b9a\u4e49\uff08\"\u65b9\u6cd5\"\u662f\u9762\u5411\u5bf9\u8c61\u672f\u8bed\u4e2d\u7684\u51fd\u6570\u6216\u5b50\u7a0b\u5e8f\uff09\u3002\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u5728\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\uff0c\u6587\u4ef6\u540d\u5fc5\u987b\u4e0e\u7c7b\u540d\u5339\u914d\uff1a\u5982\u679c\u7c7b\u540d\u4e3a \"MyClass\"\uff0c\u90a3\u4e48\u6587\u4ef6\u540d\u5fc5\u987b\u662f MyClass.java\u3002\u7c7b\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5d4c\u5957\u7c7b\u51fa\u73b0\u5728\u5176\u4ed6\u7c7b\u4e2d\uff1b\u5f53\u7136\uff0c\u5d4c\u5957\u7c7b\u6ca1\u6709\u81ea\u5df1\u7684\u6587\u4ef6\u3002\u5b9a\u4e49\u7c7b\u7684\u57fa\u672c\u8bed\u6cd5\u662f\uff1a</p> <pre><code>public class MyClass {\n    // \u53d8\u91cf\u3001\u65b9\u6cd5\u548c\u5d4c\u5957\u7c7b\u5b9a\u4e49\u3002\n}\n</code></pre> <p>\u8fd9\u4e2a\u8bed\u6cd5\u6709\u4e00\u4e9b\u53d8\u5316\u3002\u4f8b\u5982\uff0c\u8981\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u4f5c\u4e3a\u73b0\u6709\u7c7b\u7684\u5b50\u7c7b\uff0c\u4f60\u9700\u8981\u8bf4\u660e\u65b0\u7c7b\u201c\u6269\u5c55\u201d\u4e86\u73b0\u6709\u7c7b\uff1a</p> <pre><code>public class MyClass extends ExistingClass {\n    // ...\n}\n</code></pre> <p>Java \u4e2d\u7684\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6269\u5c55\u4e00\u4e2a\u7c7b\u3002\u7136\u800c\uff0c\u5728\u6269\u5c55\u4e00\u4e2a\u7c7b\u7684\u540c\u65f6\u6216\u4ee3\u66ff\u6269\u5c55\u7c7b\uff0c\u4e00\u4e2a\u65b0\u7c7b\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6216\u591a\u4e2a\u201c\u63a5\u53e3\u201d\u3002Java \u4e2d\u7684\u63a5\u53e3\u6307\u5b9a\u4e86\u4e00\u4e9b\u5fc5\u987b\u5728\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u6bcf\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u6709\u4e86\u6240\u6709\u8fd9\u4e9b\u9009\u9879\uff0c\u7c7b\u5b9a\u4e49\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>public class MyGUI extends JPanel implements KeyListener, MouseListener {\n    // ...\n}\n</code></pre> <p>\u5b9e\u9645\u4e0a\uff0c\u4e00\u4e2a\u50cf\u8fd9\u6837\u7684\u7c7b\u53ef\u80fd\u5728 GUI \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002</p> <p>\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a main() \u65b9\u6cd5\uff0c\u5e76\u4e14\u7ec4\u6210\u7a0b\u5e8f\u7684\u7c7b\u4e2d\u5fc5\u987b\u6709\u4e00\u4e2a\u5305\u542b\u6b64\u7c7b\u65b9\u6cd5\u7684\u7c7b\u3002main() \u65b9\u6cd5\u662f\u7a0b\u5e8f\u6267\u884c\u5f00\u59cb\u7684\u5730\u65b9\u3002\u5b83\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u7c7b\u578b\u4e3a String[]\uff0c\u4ee3\u8868\u547d\u4ee4\u884c\u53c2\u6570\u7684\u6570\u7ec4\u3002Java \u4e2d\u9759\u6001\u548c\u975e\u9759\u6001\u53d8\u91cf\u53ca\u65b9\u6cd5\u4e4b\u95f4\u6709\u4e00\u4e2a\u4ee4\u4eba\u56f0\u60d1\u7684\u533a\u522b\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u53ef\u4ee5\u5927\u591a\u5ffd\u7565\u3002main() \u65b9\u6cd5\u662f\u9759\u6001\u7684\u3002\u901a\u5e38\uff0c\u5728\u56fe\u5f62\u7a0b\u5e8f\u4e2d\uff0cmain \u662f \u552f\u4e00 \u7684\u9759\u6001\u5185\u5bb9\uff0c\u6240\u4ee5\u8fd9\u4e2a\u533a\u522b\u5bf9\u6211\u4eec\u6765\u8bf4\u4e0d\u662f\u5f88\u91cd\u8981\u3002\u5728 GUI \u7a0b\u5e8f\u4e2d\uff0cmain \u65b9\u6cd5\u901a\u5e38\u53ea\u662f\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\u5e76\u5c06\u5176\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\uff1b\u4e4b\u540e\uff0c\u7a97\u53e3\u4f1a\u81ea\u6211\u7ba1\u7406\u3002</p> <p>\u7c7b\u4e2d\u7684\u975e\u9759\u6001\u65b9\u6cd5\u5b9a\u4e49\u5b9e\u9645\u4e0a\u4e3a\u4ece\u8be5\u7c7b\u521b\u5efa\u7684\u6bcf\u4e2a\u5bf9\u8c61\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b9\u6cd5\u3002\u5728\u65b9\u6cd5\u5b9a\u4e49\u4e2d\uff0c\u7279\u6b8a\u53d8\u91cf this \u53ef\u4ee5\u7528\u6765\u5f15\u7528\u65b9\u6cd5\u6240\u5c5e\u7684\u5bf9\u8c61\u3002\u4f60\u53ef\u80fd\u719f\u6089 JavaScript \u4e2d\u7684\u540c\u4e00\u4e2a\u7279\u6b8a\u53d8\u91cf\u3002\u7136\u800c\uff0c\u4e0e JavaScript \u4e0d\u540c\u7684\u662f\uff0cthis \u5728 Java \u4e2d\u7684\u4f7f\u7528\u662f\u53ef\u9009\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u53d8\u91cf\u53ef\u4ee5\u88ab\u79f0\u4e3a x \u6216 this.x\uff0c\u5e76\u4e14\u65b9\u6cd5\u53ef\u4ee5\u5728\u540c\u4e00\u7c7b\u4e2d\u4f5c\u4e3a doSomething() \u6216 this.doSomething() \u8c03\u7528\u3002</p> <p>\u53d8\u91cf\u3001\u65b9\u6cd5\u548c\u5d4c\u5957\u7c7b\u53ef\u4ee5\u88ab\u6807\u8bb0\u4e3a private\u3001public \u6216 protected\u3002\u79c1\u6709\u7684\u4e1c\u897f\u53ea\u80fd\u5728\u5b83\u4eec\u5b9a\u4e49\u7684\u7c7b\u4e2d\u4f7f\u7528\u3002\u516c\u5171\u7684\u4e1c\u897f\u53ef\u4ee5\u4ece\u4efb\u4f55\u5730\u65b9\u8bbf\u95ee\u3002\u53d7\u4fdd\u62a4\u7684\u4e1c\u897f\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u7c7b\u53ca\u5176\u5b50\u7c7b\u4e2d\u8bbf\u95ee\u3002</p> <p>\u672c\u4e66\u4e2d\u7684\u7a0b\u5e8f\u4f7f\u7528\u4e00\u4e2a\u5b9a\u4e49\u7a97\u53e3\u7684\u4e3b\u7c7b\uff0c\u56fe\u5f62\u663e\u793a\u5c06\u5728\u6b64\u7a97\u53e3\u4e2d\u770b\u5230\u3002\u8be5\u7c7b\u8fd8\u5305\u542b main() \u7a0b\u5e8f\u3002\uff08\u8fd9\u4e0d\u662f\u7279\u522b\u597d\u7684\u98ce\u683c\uff0c\u4f46\u5b83\u9002\u7528\u4e8e\u5c0f\u578b\u7a0b\u5e8f\u3002\uff09\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u6211\u7f16\u5199\u7684\u5176\u4ed6\u7c7b\uff1b\u8fd9\u4e9b\u7c7b\u7684\u6587\u4ef6\u5e94\u8be5\u4e0e\u5b9a\u4e49\u4e3b\u7c7b\u7684\u6587\u4ef6\u5728\u540c\u4e00\u6587\u4ef6\u5939\u4e2d\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\u7a0b\u5e8f\uff1a</p> <pre><code>javac  *.java\n</code></pre> <p>\u8981\u8fd0\u884c\u4e3b\u7c7b\u4e3a MyClass \u7684\u7a0b\u5e8f\uff0c\u8bf7\u4f7f\u7528\uff1a</p> <pre><code>java  MyClass\n</code></pre> <p>\u7136\u800c\uff0c\u4f7f\u7528 JOGL \u7684\u7a0b\u5e8f\u9700\u8981\u5728\u8fd9\u4e9b\u547d\u4ee4\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u9009\u9879\u3002\u4f60\u9700\u8981\u77e5\u9053\u7684\u5185\u5bb9\u5728 3.6.2 \u5c0f\u8282 \u4e2d\u6709\u89e3\u91ca\u3002\uff08Eclipse IDE \u6709\u81ea\u5df1\u7684\u7b80\u5355\u547d\u4ee4\u6765\u8fd0\u884c\u7a0b\u5e8f\u3002\uff09</p> <p>\u6709\u8bb8\u591a\u6807\u51c6\u7c7b\u53ef\u4f9b\u7a0b\u5e8f\u4f7f\u7528\u3002\u4e00\u4e9b\u6807\u51c6\u7c7b\uff0c\u5982 Math \u548c System\uff0c\u5bf9\u4efb\u4f55\u7a0b\u5e8f\u90fd\u662f\u81ea\u52a8\u53ef\u7528\u7684\u3002\u5176\u4ed6\u7c7b\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u201c\u5bfc\u5165\u201d\u5230\u6e90\u4ee3\u7801\u6587\u4ef6\u4e2d\u3002\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u662f\u5305\u7684\u4e00\u90e8\u5206\uff0c\u5305\u662f\u7c7b\u7684\u96c6\u5408\u3002\u4f8b\u5982\uff0cGraphics2D \u7c7b\u5b9a\u4e49\u5728 java.awt \u5305\u4e2d\u3002\u8fd9\u4e2a\u7c7b\u53ef\u4ee5\u901a\u8fc7\u5728\u6587\u4ef6\u5f00\u5934\u6dfb\u52a0\u4ee5\u4e0b\u884c\u5bfc\u5165\u5230\u6e90\u4ee3\u7801\u6587\u4ef6\u4e2d\uff1a</p> <pre><code>import java.awt.Graphics2D;\n</code></pre> <p>\u5728\u7c7b\u5b9a\u4e49\u4e4b\u524d\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a</p> <pre><code>import java.awt.*;\n</code></pre> <p>\u5bfc\u5165 java.awt \u5305\u4e2d\u7684\u6240\u6709\u7c7b\u3002</p> <p>\u53ef\u4ee5\u5c06\u4f60\u81ea\u5df1\u7684\u7c7b\u653e\u5165\u5305\u4e2d\uff0c\u4f46\u8fd9\u5728\u7f16\u8bd1\u548c\u4f7f\u7528\u65f6\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u590d\u6742\u6027\u3002\u672c\u4e66\u4e2d\u7684\u793a\u4f8b\u7a0b\u5e8f\u6ca1\u6709\u5b9a\u4e49\u5728\u547d\u540d\u7684\u5305\u4e2d\u3002\u5b98\u65b9\u4e0a\uff0c\u5b83\u4eec\u88ab\u8bf4\u6210\u662f\u5728\u201c\u9ed8\u8ba4\u5305\u201d\u4e2d\u3002Java \u7684\u6700\u65b0\u7248\u672c\u8fd8\u6709\u201c\u6a21\u5757\u201d\uff0c\u8fd9\u662f\u5305\u7684\u96c6\u5408\u3002\u518d\u6b21\uff0c\u4f7f\u7528\u6a21\u5757\u4f1a\u4f7f\u4e8b\u60c5\u590d\u6742\u5316\uff0c\u5b83\u4eec\u6ca1\u6709\u5728\u8fd9\u672c\u6559\u79d1\u4e66\u4e2d\u4f7f\u7528\u3002</p> <p>Java \u662f\u4e00\u79cd\u5f3a\u7c7b\u578b\u8bed\u8a00\u3002\u6bcf\u4e2a\u53d8\u91cf\u90fd\u6709\u7c7b\u578b\uff0c\u5e76\u4e14\u53ea\u80fd\u4fdd\u5b58\u8be5\u7c7b\u578b\u7684\u503c\u3002\u6bcf\u4e2a\u53d8\u91cf\u90fd\u5fc5\u987b\u58f0\u660e\uff0c\u58f0\u660e\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u58f0\u660e\u4e2d\u53ef\u4ee5\u5305\u542b\u521d\u59cb\u503c\u3002\u4f8b\u5982\uff1a</p> <pre><code>String name;  // \u58f0\u660e name \u4e3a\u4e00\u4e2a\u5fc5\u987b\u5305\u542b String \u7c7b\u578b\u503c\u7684\u53d8\u91cf\u3002\nint x = 17;   // x \u662f\u4e00\u4e2a\u5fc5\u987b\u5305\u542b int \u7c7b\u578b\u7684\u503c\u7684\u53d8\u91cf\uff0c\u521d\u59cb\u503c\u4e3a 17\u3002\nGraphics2D g; // g \u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u5176\u503c\u662f Graphics2D \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\n</code></pre> <p>Java \u6709\u516b\u79cd\u201c\u539f\u59cb\u201d\u7c7b\u578b\uff0c\u5b83\u4eec\u7684\u503c\u4e0d\u662f\u5bf9\u8c61\uff1aint\u3001long\u3001short\u3001byte\u3001double\u3001float\u3001char \u548c boolean\u3002\u524d\u56db\u79cd\u662f\u5177\u6709\u4e0d\u540c\u4f4d\u6570\u7684\u6574\u6570\u7c7b\u578b\u3002\u5b9e\u6570\u7c7b\u578b\u662f double \u548c float\u3002\u4f8b\u5982\uff0c3.7 \u662f double \u7c7b\u578b\u7684\u5e38\u91cf\u3002\u8981\u5f97\u5230\u4e00\u4e2a float \u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u4f60\u9700\u8981\u52a0\u4e0a 'F'\uff1a3.7F\uff08\u8fd9\u5728 JOGL \u7f16\u7a0b\u4e2d\u4f1a\u51fa\u73b0\uff0c\u6709\u4e9b\u65b9\u6cd5\u9700\u8981\u7c7b\u578b\u4e3a float \u7684\u53c2\u6570\uff09\u3002\u5e38\u91cf char \u503c\u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\uff1b\u4f8b\u5982\uff0c'A' \u548c '%'\u3002\u53cc\u5f15\u53f7\u7528\u4e8e\u5b57\u7b26\u4e32\uff0c\u5b83\u4eec\u5728 Java \u4e2d\u4e0d\u662f\u539f\u59cb\u503c\u3002</p> <p>\u9664\u4e86\u8fd9\u516b\u79cd\u539f\u59cb\u7c7b\u578b\uff0c\u4efb\u4f55\u7c7b\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\u578b\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u7c7b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53d8\u91cf\u53ef\u80fd\u7684\u503c\u5c31\u662f\u5c5e\u4e8e\u90a3\u4e2a\u7c7b\u7684\u5bf9\u8c61\u3002\u63a5\u53e3\u4e5f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\u578b\uff0c\u5176\u53ef\u80fd\u7684\u503c\u662f\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u5bf9\u8c61\u3002\u4e0e\u539f\u59cb\u503c\u4e0d\u540c\uff0c\u5bf9\u8c61\u5305\u542b\u53d8\u91cf\u548c\u65b9\u6cd5\u3002\u4f8b\u5982\uff0cPoint \u662f\u4e00\u4e2a\u7c7b\u3002\u4e00\u4e2a Point \u7c7b\u578b\u7684\u5bf9\u8c61\u5305\u542b int \u7c7b\u578b\u7684\u53d8\u91cf x \u548c y\u3002\u4e00\u4e2a String \u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u51e0\u4e2a\u7528\u4e8e\u5904\u7406\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u4e00\u4e2a\u540d\u4e3a length() \u7684\u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u53e6\u4e00\u4e2a\u540d\u4e3a charAt(i) \u7684\u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c i \u4e2a\u5b57\u7b26\u3002\u5bf9\u8c61\u4e2d\u7684\u53d8\u91cf\u548c\u65b9\u6cd5\u603b\u662f\u4f7f\u7528 \".\" \u70b9\u64cd\u4f5c\u7b26\u8bbf\u95ee\uff1a\u5982\u679c pt \u662f\u4e00\u4e2a Point \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5f15\u7528\u4e00\u4e2a Point \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48 pt.x \u548c pt.y \u5c31\u662f\u8be5\u5bf9\u8c61\u4e2d\u5b9e\u4f8b\u53d8\u91cf\u7684\u540d\u79f0\u3002\u5982\u679c str \u662f\u4e00\u4e2a String \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48 str.length() \u548c str.charAt(i) \u5c31\u662f str \u5f15\u7528\u7684 String \u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5\u3002</p> <p>\u65b9\u6cd5\u5b9a\u4e49\u6307\u5b9a\u4e86\u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4ee5\u53ca\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u5b83\u901a\u5e38\u88ab\u6807\u8bb0\u4e3a public \u6216 private\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>public int countChars(String str, char ch) {\n    int count = 0;\n    for (int i = 0; i &lt; str.length(); i++) {\n        if (str.charAt(i) == ch)\n            count++;\n    }\n    return count;\n}\n</code></pre> <p>\u8fd9\u91cc\uff0ccountChars \u662f\u65b9\u6cd5\u7684\u540d\u79f0\u3002\u5b83\u63a5\u53d7\u4e24\u4e2a\u7c7b\u578b\u4e3a String \u548c char \u7684\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a int \u7684\u503c\u3002\u5bf9\u4e8e\u4e0d\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\uff0c\u8fd4\u56de\u7c7b\u578b\uff08\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f int\uff09\u6307\u5b9a\u4e3a void\u3002</p> <p>Java \u4e2d\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u5b83\u5b9a\u4e49\u7684\u7c7b\u4e2d\u4f7f\u7528\uff0c\u5373\u4f7f\u5b9a\u4e49\u70b9\u5728\u5b83\u4f7f\u7528\u70b9\u4e4b\u540e\u4e5f\u53ef\u4ee5\uff08\u8fd9\u4e0e C \u76f8\u53cd\uff0cC \u4e2d\u51fd\u6570\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u58f0\u660e\uff0c\u4f46\u4e0e JavaScript \u7c7b\u4f3c\uff09\u3002\u5168\u5c40\u53d8\u91cf\u4e5f\u662f\u5982\u6b64\uff0c\u5b83\u4eec\u5728\u4efb\u4f55\u65b9\u6cd5\u5916\u90e8\u58f0\u660e\u3002\u6240\u6709\u7f16\u7a0b\u4ee3\u7801\uff0c\u5982\u8d4b\u503c\u8bed\u53e5\u548c\u63a7\u5236\u7ed3\u6784\uff0c\u90fd\u5fc5\u987b\u5728\u65b9\u6cd5\u5b9a\u4e49\u5185\u3002</p> <p>Java \u62e5\u6709\u4e0e C \u548c JavaScript \u76f8\u540c\u7684\u57fa\u672c\u63a7\u5236\u7ed3\u6784\uff1aif \u8bed\u53e5\u3001while \u548c do..while \u5faa\u73af\u3001for \u5faa\u73af\u4ee5\u53ca switch \u8bed\u53e5\u5728\u4e09\u79cd\u8bed\u8a00\u4e2d\u7684\u5f62\u5f0f\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\u3002\u8d4b\u503c\u8bed\u53e5\u4e5f\u662f\u76f8\u540c\u7684\u3002</p> <p>\u540c\u6837\uff0c\u8fd9\u4e09\u79cd\u8bed\u8a00\u62e5\u6709\u51e0\u4e4e\u76f8\u540c\u7684\u8fd0\u7b97\u7b26\u96c6\u5408\uff0c\u5305\u62ec\u57fa\u672c\u7684\u7b97\u672f\u8fd0\u7b97\u7b26\uff08<code>+</code>, <code>\u2212</code>, <code>*</code> \u548c <code>/</code>\uff09\u3001\u589e\u91cf\uff08<code>++</code>\uff09\u548c\u51cf\u91cf\uff08<code>--</code>\uff09\u8fd0\u7b97\u7b26\u3001\u903b\u8f91\u8fd0\u7b97\u7b26\uff08<code>||</code>, <code>&amp;&amp;</code>, \u548c <code>!</code>\uff09\u3001\u4e09\u5143\u8fd0\u7b97\u7b26\uff08<code>?:</code>\uff09\u4ee5\u53ca\u4f4d\u8fd0\u7b97\u7b26\uff08\u5982 <code>&amp;</code> \u548c <code>|</code>\uff09\u3002Java \u7b97\u672f\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u6b63\u5982 C \u8bed\u8a00\u4e2d\u7684\u4e00\u6837\uff0c\u662f\u5f53\u9664\u6cd5\u8fd0\u7b97\u7b26 <code>/</code> \u5e94\u7528\u4e8e\u6574\u6570\u64cd\u4f5c\u6570\u65f6\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6574\u6570\u7ed3\u679c\u3002\u56e0\u6b64\uff0c18/5 \u7684\u7ed3\u679c\u662f 3\uff0c\u800c 1/10 \u7684\u7ed3\u679c\u662f 0\u3002</p> <p><code>+</code> \u8fd0\u7b97\u7b26\u53ef\u4ee5\u7528\u6765\u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837 \"Hello\" + \"World\" \u7684\u503c\u5c31\u662f \"HelloWorld\"\u3002\u5982\u679c <code>+</code> \u7684\u64cd\u4f5c\u6570\u4e2d\u53ea\u6709\u4e00\u4e2a\u662f\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u64cd\u4f5c\u6570\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002</p> <p>Java \u7684\u6807\u51c6\u51fd\u6570\u5b9a\u4e49\u5728\u7c7b\u4e2d\u3002\u4f8b\u5982\uff0c\u6570\u5b66\u51fd\u6570\u5305\u62ec <code>Math.sin(x)</code>\u3001<code>Math.cos(x)</code>\u3001<code>Math.sqrt(x)</code> \u548c <code>Math.pow(x,y)</code> \u7528\u4e8e\u6c42 x \u7684 y \u6b21\u5e42\u3002<code>Math.random()</code> \u8fd4\u56de\u4e00\u4e2a\u4ecb\u4e8e 0.0 \u5230 1.0 \u8303\u56f4\u5185\u7684\u968f\u673a\u6570\uff0c\u5305\u62ec 0.0 \u4f46\u4e0d\u5305\u62ec 1.0\u3002\u65b9\u6cd5 <code>System.out.println(str)</code> \u5411\u547d\u4ee4\u884c\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u5728\u56fe\u5f62\u7a0b\u5e8f\u4e2d\uff0c<code>System.out.println</code> \u4e3b\u8981\u7528\u4e8e\u8c03\u8bd5\u3002\u8981\u8f93\u51fa\u591a\u4e2a\u9879\u76ee\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u8fde\u63a5\uff1a</p> <pre><code>System.out.println(\"The values are x = \" + x + \" and y = \" + y);\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u683c\u5f0f\u5316\u8f93\u51fa\u65b9\u6cd5 <code>System.out.printf</code>\uff0c\u5b83\u7c7b\u4f3c\u4e8e C \u8bed\u8a00\u7684 printf \u51fd\u6570\u3002</p> <p>Java is object-oriented. A Java program is made up of classes, which can contain variable definitions and method definitions. (\"Method\" is the object-oriented term for function or subroutine.) A class is defined in its own file, whose name must match the name of the class: If the class is named \"MyClass\", then the name of the file must be MyClass.java. Classes can also occur as nested classes within other classes; a nested class, of course, doesn't get its own file. The basic syntax for defining a class is</p> <pre><code>public class MyClass {\n    .\n    .  // Variable, method, and nested class definitions.\n    .   \n}\n</code></pre> <p>There are variations on this syntax. For example, to define a class as a subclass of an existing class, you need to say that the new class \"extends\" an the existing class:</p> <pre><code>public class MyClass extends ExistingClass { ...\n</code></pre> <p>A class in Java can only extend one class. However, in addition to or instead of extending a class, a new class can also implement one or more \"interfaces.\" An interface in Java specifies some methods that must be defined in every class that implements the interface. With all of these options, a class definition might look something like this:</p> <pre><code>public class MyGUI extends JPanel implements KeyListener, MouseListener { ...\n</code></pre> <p>In fact, a class exactly like this one might be used in a GUI program.</p> <p>A class can contain a main() method, and one of the classes that make up a program must contain such a method. The main() method is where program execution begins. It has one parameter, of type String[], representing an array of command-line arguments. There is a confusing distinction in Java between static and non-static variables and methods, which we can mostly ignore here. The main() method is static. Often, in a graphical program, main is the only thing that is static, so the distinction will not be very important for us. In a GUI program, the main method usually just creates a window and makes it visible on the screen; after that, the window takes care of itself.</p> <p>A non-static method definition in a class actually defines a method for each object that is created from that class. Inside the method definition, the special variable this can be used to refer to the object of which the method is a part. You might be familiar with the same special variable in JavaScript. However, unlike in JavaScript, the use of this is optional in Java, so that a variable that is part of the same object might be referred to either as x or this.x, and a method could be called from within the same class as doSomething() or this.doSomething().</p> <p>Variables, methods and nested classes can be marked as private, public, or protected. Private things can only be used in the class where they are defined. Public things can be accessed from anywhere. Protected things can be accessed in the same class and in subclasses of that class.</p> <p>The programs in this book use a main class that defines the window where the graphical display will be seen. That class also contains the main() routine. (This is not particularly good style, but it works well for small programs.) In some cases, the program depends on other classes that I have written; the files for those classes should be in the same folder as the file that defines the main class. The programs can then be compiled on the command line, working in that folder, with the command</p> <pre><code>javac  *.java\n</code></pre> <p>To run the program whose main class is MyClass, use</p> <pre><code>java  MyClass\n</code></pre> <p>However, programs that use JOGL require some extra options in these commands. What you need to know is explained in Subsection 3.6.2. (The Eclipse IDE has its own simple commands for running a program.)</p> <p>There are many standard classes that are available for use in programs. A few of the standard classes, such as Math and System, are automatically available to any program. Others have to be \"imported\" into a source code file before they can be used in that file. A class can be part of a package, which is a collection of classes. For example, class Graphics2D is defined in the package java.awt. This class can be imported into a source code file by adding the line</p> <p>import java.awt.Graphics2D; to the beginning of the file, before the definition of the class. Alternatively, all of the classes in package java.awt can be imported with</p> <pre><code>import java.awt.*;\n</code></pre> <p>It is possible to put your own classes into packages, but that adds some complications when compiling and using them. My sample programs in this book are not defined in named packages. Officially, they are said to be in the \"default package.\" Recent versions of Java also have \"modules,\" which are collections of packages. Again, using modules complicates things, and they are not used in this textbook.</p> <p>Java is a strongly typed language. Every variable has a type, and it can only hold values of that type. Every variable must be declared, and the declaration specifies the type of the variable. The declaration can include an initial value. For example,</p> <pre><code>String name;  // Declares name as a variable whose value must be a String.\nint x = 17;   // x is a variable whose value must an int, with initial value 17.\nGraphics2D g; // g is a variable whose value is an object of type Graphics2D.\n</code></pre> <p>Java has eight \"primitive\" types, whose values are not objects: int, long, short, byte, double, float, char, and boolean. The first four are integer types with different numbers of bits. The real number types are double and float. A constant such as 3.7 is of type double. To get a constant of type float, you need to add an 'F': 3.7F. (This comes up when programming in JOGL, where some methods require parameters of type float.) Constant char values are enclosed in single quotes; for example, 'A' and '%'. Double quotes are used for strings, which are not primitive values in Java.</p> <p>In addition to the eight primitive types, any class defines a type. If the type of a variable is a class, then the possible values of the variable are objects belonging to that class. An interface also defines a type, whose possible values are objects that implement the interface. An object, unlike a primitive value, contains variables and methods. For example, Point is a class. An object of type Point contains int variables x and y. A String is an object, and it contains several methods for working with the string, including one named length() that returns its length and another named charAt(i) that returns the i-th character in the string. Variables and methods in an object are always accessed using the \".\" period operator: If pt is a variable of type Point, referring to an object of type Point, then pt.x and pt.y are names for the instance variables in that object. If str is a variable of type String, then str.length() and str.charAt(i) are methods in the String* object to which str refers.</p> <p>A method definition specifies the type of value that is returned by the method and a type for each of its parameters. It is usually marked as being public or private. Here is an example:</p> <pre><code>public int countChars( String str, char ch ) {\n    int count = 0;\n    for ( int i = 0; i &lt; str.length(); i++) {\n        if ( str.charAt(i) == ch )\n            count++;\n    }\n    return count;\n}\n</code></pre> <p>Here, countChars is the name of the method. It takes two parameters of type String and char, and it returns a value of type int. For a method that does not return a value, the return type (int in the above example) is specified as void.</p> <p>A method in Java can be used throughout the class where it is defined, even if the definition comes after the point where it is used. (This is in contrast to C, where functions must be declared before they are used, but similar to JavaScript.) The same is true for global variables, which are declared outside any method. All programming code, such as assignment statements and control structures, must be inside method definitions.</p> <p>Java has the same set of basic control structures as C and JavaScript: if statements, while and do..while loops, for loops, and switch statements all take essentially the same form in the three languages. Assignment statements are also the same.</p> <p>Similarly, the three languages have pretty much the same set of operators, including the basic arithmetic operators (<code>+</code>, <code>\u2212</code>, <code>*</code> and <code>/</code>), the increment (<code>++</code>) and decrement (<code>--</code>) operators, the logical operators (<code>||</code>, <code>&amp;&amp;</code>, and <code>!</code>), the ternary operator (<code>?:</code>), and the bitwise operators (such as <code>&amp;</code> and <code>|</code>). A peculiarity of Java arithmetic, as in C, is that the division operator, <code>/</code>, when applied to integer operands produces an integer result. So, 18/5 is 3 and 1/10 is 0.</p> <p>The + operator can be used to concatenate strings, so that \"Hello\" + \"World\" has the value \"HelloWorld\". If just one of the operands of + is a string, then the other operand is automatically converted into a string.</p> <p>Java's standard functions are defined in classes. For example, the mathematical functions include <code>Math.sin(x)</code>, <code>Math.cos(x)</code>, <code>Math.sqrt(x)</code>, and <code>Math.pow(x,y)</code> for raising x to the power y. <code>Math.random()</code> returns a random number in the range 0.0 to 1.0, including 0.0 but not including 1.0. The method <code>System.out.println(str)</code> outputs a string to the command line. In graphical programs, <code>System.out.println</code> is useful mainly for debugging. To output more than one item, use string concatenation:</p> <pre><code>System.out.println(\"The values are x = \" + x + \" and y = \" + y);\n</code></pre> <p>There is also a formatted output method, <code>System.out.printf</code>, which is similar to C's printf function.</p>"},{"location":"cn/a1/s1/#a12-\u5bf9\u8c61\u548c\u6570\u636e\u7ed3\u6784","title":"A.1.2  \u5bf9\u8c61\u548c\u6570\u636e\u7ed3\u6784","text":"<p>A.1.2  Objects and Data Structures</p> \u4e2d\u6587\u82f1\u6587 <p>Java \u9664\u4e86\u539f\u59cb\u7c7b\u578b\u5916\uff0c\u8fd8\u6709\u201c\u5bf9\u8c61\u7c7b\u578b\u201d\uff0c\u4ee3\u8868\u90a3\u4e9b\u662f\u5bf9\u8c61\u7684\u503c\u3002\u5bf9\u8c61\u7c7b\u578b\u7684\u53d8\u91cf\u4e0d\u6301\u6709\u5bf9\u8c61\uff1b\u5b83\u53ea\u80fd\u6301\u6709\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u3002\uff08\u6709\u65f6\u4eba\u4eec\u8bf4 Java \u4e0d\u4f7f\u7528\u6307\u9488\uff0c\u4f46\u66f4\u51c6\u786e\u7684\u8bf4\u6cd5\u662f\u5b83\u8feb\u4f7f\u4f60\u4f7f\u7528\u5b83\u4eec\u3002\uff09\u7c7b\u540d\u6216\u63a5\u53e3\u540d\u662f\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b\u3002\u5bf9\u8c61\u662f\u901a\u8fc7\u4f7f\u7528 new \u8fd0\u7b97\u7b26\u4ece\u7c7b\u4e2d\u521b\u5efa\u7684\u3002\u4f8b\u5982\uff1a</p> <pre><code>Point pt;  // \u58f0\u660e\u4e00\u4e2a\u7c7b\u578b\u4e3a Point \u7684\u53d8\u91cf\u3002\npt = new Point(100, 200);  // \u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\u4e3a Point \u7684\u5bf9\u8c61\u3002\n</code></pre> <p>\u8fd9\u91cc\uff0c\u7c7b\u662f Point\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u7c7b\u578b\u4e3a Point \u7684\u53d8\u91cf\u53ef\u4ee5\u5f15\u7528\u5c5e\u4e8e\u7c7b Point \u7684\u5bf9\u8c61\u6216\u8be5\u7c7b\u4efb\u4f55\u5b50\u7c7b\u7684\u5bf9\u8c61\u3002\u8d4b\u503c\u8bed\u53e5\u4e2d\u7684\u8868\u8fbe\u5f0f new Point(100,200) \u8c03\u7528\u4e86 Point \u7c7b\u4e2d\u7684\u4e00\u79cd\u7279\u6b8a\u7a0b\u5e8f\uff0c\u79f0\u4e3a \u6784\u9020\u51fd\u6570\u3002\u6784\u9020\u51fd\u6570\u7684\u76ee\u7684\u662f\u521d\u59cb\u5316\u4e00\u4e2a\u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570 100 \u548c 200 \u6210\u4e3a\u65b0\u5bf9\u8c61\u4e2d pt.x \u548c pt.y \u53d8\u91cf\u7684\u503c\u3002\u4e0a\u8ff0\u4ee3\u7801\u7684\u7ed3\u679c\u662f pt \u7684\u503c\u662f\u4e00\u4e2a\u6307\u5411\u65b0\u521b\u5efa\u5bf9\u8c61\u7684\u6307\u9488\u3002\u6211\u4eec\u8bf4 pt \u201c\u5f15\u7528\u201d\u90a3\u4e2a\u5bf9\u8c61\u3002</p> <p>\u800c\u4e0d\u662f\u5f15\u7528\u4e00\u4e2a\u5bf9\u8c61\uff0cpt \u53ef\u4ee5\u6709\u7279\u6b8a\u503c null\u3002\u5f53\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u662f null \u65f6\uff0c\u8be5\u53d8\u91cf\u4e0d\u5f15\u7528\u4efb\u4f55\u5bf9\u8c61\u3002\u5982\u679c pt \u7684\u503c\u662f null\uff0c\u90a3\u4e48\u53d8\u91cf pt.x \u548c pt.y \u5c31\u4e0d\u5b58\u5728\uff0c\u8bd5\u56fe\u4f7f\u7528\u5b83\u4eec\u5c06\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u8fd9\u4e2a\u9519\u8bef\u88ab\u79f0\u4e3a NullPointerException\u3002</p> <p>\u5b57\u7b26\u4e32\uff0c\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u662f\u7279\u6b8a\u7684\u5bf9\u8c61\u3002\u5b83\u4eec\u4e0d\u662f\u7528 new \u8fd0\u7b97\u7b26\u521b\u5efa\u7684\u3002\u76f8\u53cd\uff0c\u5b57\u7b26\u4e32\u662f\u4f5c\u4e3a\u5b57\u9762\u91cf\u503c\u521b\u5efa\u7684\uff0c\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u3002\u4f8b\u5982\uff1a</p> <pre><code>String greeting = \"Hello World!\";\n</code></pre> <p>\u6570\u7ec4\u4e5f\u662f\u7279\u6b8a\u7684\u5bf9\u8c61\u3002Java \u4e2d\u7684\u4efb\u4f55\u7c7b\u578b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u7ec4\u7c7b\u578b\u3002\u6570\u7ec4\u7c7b\u578b\u662f\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u4ece\u7c7b\u578b int\uff0c\u6211\u4eec\u5f97\u5230\u6570\u7ec4\u7c7b\u578b <code>int[]</code>\u3002\u4ece String \u548c Point\uff0c\u6211\u4eec\u5f97\u5230\u7c7b\u578b <code>String[]</code> \u548c <code>Point[]</code>\u3002\u7c7b\u578b <code>int[]</code> \u7684\u53d8\u91cf\u503c\u662f\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\uff08\u6216\u8005\u503c\u53ef\u4ee5\u662f null\uff09\u3002\u7c7b\u578b <code>Point[]</code> \u7684\u53d8\u91cf\u503c\u662f\u4e00\u4e2a Point \u6570\u7ec4\u3002\u6570\u7ec4\u53ef\u4ee5\u7528 new \u8fd0\u7b97\u7b26\u7684\u7248\u672c\u521b\u5efa\uff1a</p> <pre><code>int[] intList;  // \u58f0\u660e\u4e00\u4e2a\u53ef\u4ee5\u5f15\u7528\u4efb\u4f55\u6574\u578b\u6570\u7ec4\u7684\u53d8\u91cf\u3002\nintList = new int[100];  // \u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u5bb9\u7eb3 100 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u3002\n</code></pre> <p>\u6570\u7ec4\u6709\u4e00\u4e2a\u5728\u521b\u5efa\u65f6\u8bbe\u7f6e\u7684\u56fa\u5b9a\u957f\u5ea6\uff0c\u5e76\u4e14\u4e0d\u80fd\u6539\u53d8\u3002\u5982\u679c intList \u5f15\u7528\u4e00\u4e2a\u6570\u7ec4\uff0c\u90a3\u4e48\u8be5\u6570\u7ec4\u7684\u957f\u5ea6\u7531\u53ea\u8bfb\u53d8\u91cf intList.length \u7ed9\u51fa\u3002\u6570\u7ec4\u7684\u5143\u7d20\u662f <code>intList[0]</code>\u3001<code>intList[1]</code> \u7b49\u7b49\u3002\u5982\u679c\u5c1d\u8bd5\u4f7f\u7528 <code>intList[i]</code> \u800c i \u5728 0 \u5230 intList.length \u2212 1 \u7684\u8303\u56f4\u4e4b\u5916\uff0c\u5c06\u4ea7\u751f\u4e00\u4e2a\u7c7b\u578b\u4e3a ArrayIndexOutOfBoundsException \u7684\u9519\u8bef\u3002</p> <p>\u6570\u7ec4\u5143\u7d20\u7684\u521d\u59cb\u503c\u662f\u201c\u4e8c\u8fdb\u5236\u96f6\u201d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u6570\u503c\u7c7b\u578b\u7684\u662f 0\uff0cboolean \u7684\u662f false\uff0c\u5bf9\u8c61\u7684\u662f null\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u6cd5\u5728\u521b\u5efa\u65f6\u521b\u5efa\u5e76\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u4ee5\u6301\u6709\u4efb\u610f\u503c\uff1a</p> <pre><code>intList = new int[] {2, 3, 5, 7, 11, 13, 15, 17, 19};\n</code></pre> <p>\u8fd9\u4e2a\u7248\u672c\u7684 new \u8fd0\u7b97\u7b26\u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a\u4e5d\u4e2a\u7684 int \u6570\u7ec4\uff0c\u5e76\u6700\u521d\u6301\u6709\u4e5d\u4e2a\u6307\u5b9a\u7684\u503c\u3002\u5982\u679c\u6570\u7ec4\u7684\u521d\u59cb\u5316\u662f\u4f5c\u4e3a\u53d8\u91cf\u58f0\u660e\u7684\u4e00\u90e8\u5206\u5b8c\u6210\u7684\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u503c\u7684\u5217\u8868\uff0c\u7528 { \u548c } \u62ec\u8d77\u6765\uff1a</p> <pre><code>String[] commands = { \"New\", \"Open\", \"Close\", \"Save\", \"Save As\" };\n</code></pre> <p>Java \u63d0\u4f9b\u4e86\u51e0\u79cd\u6807\u51c6\u7c7b\uff0c\u8fd9\u4e9b\u7c7b\u5b9a\u4e49\u4e86\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5305\u62ec\u94fe\u8868\u3001\u6808\u3001\u961f\u5217\u3001\u6811\u548c\u54c8\u5e0c\u8868\uff0c\u5b83\u4eec\u7531 java.util \u5305\u4e2d\u7684\u7c7b\u5b9a\u4e49\u3002\u8fd9\u4e9b\u7c7b\u5b9a\u4e49\u4e86\u201c\u6cdb\u578b\u201d\u6216\u201c\u53c2\u6570\u5316\u201d\u7c7b\u578b\uff0c\u53ef\u4ee5\u9002\u7528\u4e8e\u591a\u79cd\u5143\u7d20\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u7c7b\u578b <code>LinkedList&lt;String&gt;</code> \u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u5305\u542b String \u7c7b\u578b\u9879\u7684\u5217\u8868\u3002\u9057\u61be\u7684\u662f\uff0c\u8fd9\u4e9b\u7c7b\u4e0d\u80fd\u4e0e\u539f\u59cb\u7c7b\u578b\u4e00\u8d77\u4f7f\u7528\uff1b\u6ca1\u6709\u201cint \u7684\u94fe\u8868\u201d\u3002\uff08\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u6709 <code>LinkedList&lt;Integer&gt;</code>\uff0c\u5176\u4e2d\u7c7b\u578b\u4e3a Integer \u7684\u5bf9\u8c61\u662f\u539f\u59cb int \u503c\u7684\u201c\u5305\u88c5\u5668\u201d\u3002\uff09</p> <p>\u4e5f\u8bb8\u6700\u5e38\u7528\u7684\u6cdb\u578b\u6570\u636e\u7ed3\u6784\u662f ArrayList\u3002\u50cf\u6570\u7ec4\u4e00\u6837\uff0c\u4e00\u4e2a ArrayList \u5305\u542b\u4e00\u7cfb\u5217\u7f16\u53f7\u7684\u9879\u76ee\u3002\u7136\u800c\uff0c\u4e00\u4e2a ArrayList \u53ef\u4ee5\u589e\u957f\u548c\u6536\u7f29\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u5bb9\u7eb3 Point \u7c7b\u578b\u5bf9\u8c61\u7684 ArrayList\uff1a</p> <pre><code>ArrayList&lt;Point&gt; pointList;\npointList = new ArrayList&lt;Point&gt;();\n</code></pre> <p>\u8fd9\u521b\u5efa\u4e86\u4e00\u4e2a\u6700\u521d\u4e3a\u7a7a\u7684\u5217\u8868\u3002\u65b9\u6cd5 pointList.add(pt) \u53ef\u4ee5\u7528\u6765\u5c06\u4e00\u4e2a Point \u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\uff0c\u5c06\u5176\u957f\u5ea6\u589e\u52a0\u4e00\u3002pointList.size() \u7684\u503c\u662f\u5f53\u524d\u5217\u8868\u4e2d\u7684\u9879\u6570\u3002\u65b9\u6cd5 pointList.get(i) \u8fd4\u56de\u5217\u8868\u7684\u7b2c i \u4e2a\u5143\u7d20\uff0cpointList.set(i,pt) \u7528 pt \u66ff\u6362\u7b2c i \u4e2a\u5143\u7d20\u3002\u540c\u6837\uff0cpointList.remove(i) \u5220\u9664\u7b2c i \u4e2a\u5143\u7d20\uff0c\u5c06\u5217\u8868\u7684\u957f\u5ea6\u51cf\u5c11\u4e00\u3002\u5bf9\u4e8e\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u5982\u679c i \u4e0d\u5728\u4ece 0 \u5230 pointList.size() \u22121 \u7684\u8303\u56f4\u5185\uff0c\u5c31\u4f1a\u53d1\u751f\u9519\u8bef\u3002</p> <p>\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6784\u5efa\u94fe\u63a5\u6570\u636e\u7ed3\u6784\uff0c\u8bb0\u4f4f\u7c7b\u578b\u7531\u7c7b\u7ed9\u51fa\u7684\u53d8\u91cf\u7684\u503c\u8981\u4e48\u662f null\uff0c\u8981\u4e48\u662f\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u7c7b\u5b9a\u4e49\u7684\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u6574\u6570\u503c\u7684\u94fe\u8868\uff1a</p> <pre><code>class ListNode {\n    int item;       // \u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u6574\u6570\n    ListNode next;  // \u6307\u5411\u5217\u8868\u4e2d\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u6216\u8005\u5bf9\u4e8e\u5217\u8868\u672b\u5c3e\u662f null\u3002\n}\n</code></pre> <p>\u5bf9\u4e8e\u672c\u8bfe\u7a0b\u6765\u8bf4\uff0c\u4e00\u4e2a\u66f4\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\u662f\u573a\u666f\u56fe\uff0c\u5c31\u50cf\u5728 2.4.2 \u5c0f\u8282 \u4e2d\u8ba8\u8bba\u7684\uff0c\u5e76\u5728\u793a\u4f8b\u7a0b\u5e8f java2d/SceneGraphAPI2D.java \u4e2d\u5b9e\u73b0\u7684\u3002\u5728\u90a3\u4e2a API \u4e2d\uff0c\u573a\u666f\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u7531\u5c5e\u4e8e\u7c7b SceneGraphNode \u6216\u5176\u5b50\u7c7b\u7684\u5bf9\u8c61\u8868\u793a\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a CompoundObject \u8868\u793a\u7531\u5b50\u5bf9\u8c61\u7ec4\u6210\u7684\u56fe\u5f62\u5bf9\u8c61\u3002\u5b83\u9700\u8981\u5b58\u50a8\u6307\u5411\u5176\u6240\u6709\u5b50\u5bf9\u8c61\u7684\u6307\u9488\u3002\u5b83\u4eec\u53ef\u4ee5\u65b9\u4fbf\u5730\u5b58\u50a8\u5728 ArrayList \u4e2d\u3002\u7136\u540e\u7ed8\u5236\u4e00\u4e2a CompoundObject \u53ea\u610f\u5473\u7740\u7ed8\u5236\u5176\u5b50\u5bf9\u8c61\u3002\u7c7b\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>class CompoundObject extends SceneGraphNode {\n    ArrayList&lt;SceneGraphNode&gt; subobjects = new ArrayList&lt;SceneGraphNode&gt;();\n    CompoundObject add(SceneGraphNode node) {\n        subobjects.add(node);\n        return this;\n    }\n    void doDraw(Graphics2D g) {\n        for (SceneGraphNode node : subobjects)\n            node.draw(g);\n    }\n}\n</code></pre> <p>\uff08\u8fd9\u4e2a\u7c7b\u4e2d\u7684 for \u5faa\u73af\u662f Java \u7279\u6709\u7684\u3002\u5b83\u81ea\u52a8\u904d\u5386\u5217\u8868\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002\uff09</p> <p>In addition to the primitive types, Java has \"object types\" that represent values that are objects. A variable of object type doesn't hold an object; it can only hold a pointer to an object. (Sometimes it's said that Java doen't use pointers, but it's more correct to say that it forces you to use them.) The name of a class or of an interface is an object type. Objects are created from classes using the new operator. For example,</p> <pre><code>Point pt;  // Declare a variable of type Point.\npt = new Point( 100, 200 );  // Create an object of type Point.\n</code></pre> <p>Here, the class is Point, which also acts as a type that can be used to create variables. A variable of type Point can refer to an object belonging to the class Point or to any subclass of that class. The expression new Point(100,200) in the assignment statement calls a special kind of routine in the Point class that is known as a constructor. The purpose of a constructor is to initialize an object. In this case, the parameters to the constructor, 100 and 200, become the values of the variables pt.x and pt.y in the new object. The effect of the above code is that the value of pt is a pointer to the newly created object. We say that pt \"refers\" to that object.</p> <p>Instead of referring to an object, pt could have the special value null. When the value of a variable is null, the variable does not refer to any object. If the value of pt is null, then the variables pt.x and pt.y don't exist, and an attempt to use them is an error. The error is called a NullPointerException.</p> <p>Strings, by the way, are special objects. They are not created with the new operator. Instead, a string is created as a literal value, enclosed in double quotes. For example</p> <pre><code>String greeting = \"Hello World!\";\n</code></pre> <p>Arrays are also special objects. Any type in Java defines an array type. An array type is an object type. From the type int, for example, we get the array type <code>int[]</code>. From String and Point, we get the types <code>String[]</code> and <code>Point[]</code>. The value of a variable of type <code>int[]</code> is an array of ints (or the value can be null). The value of a variable of type <code>Point[]</code> is an array of Points. Arrays can be created with a version of the new operator:</p> <pre><code>int[] intList;  // Declare a variable that can refer to any array of ints.\nintList = new int[100];  // Create an array that can hold 100 ints.\n</code></pre> <p>An array has a fixed length that is set at the time it is created and cannot be changed. If intList refers to an array, then the length of that array is given by the read-only variable intList.length. The elements of the array are <code>intList[0]</code>, <code>intList[1]</code>, and so on. An attempt to use <code>intList[i]</code> where i is outside the range from 0 to intList.length \u2212 1 generates an error of type ArrayIndexOutOfBoundsException.</p> <p>The initial value for array elements is \"binary zero\"; that is, 0 for numeric values, false for boolean, and null for objects.</p> <p>An array can be created and initialized to hold arbitrary values at the time it is created using the syntax</p> <pre><code>intList = new int[] {2, 3, 5, 7, 11, 13, 15, 17, 19};\n</code></pre> <p>This version of the new operator creates an array of ints of length nine that initially holds the nine specified values. If the initialization of an array is done as part of a variable declaration, then only the list of values, enclosed between { and }, is required:</p> <pre><code>String[] commands = { \"New\", \"Open\", \"Close\", \"Save\", \"Save As\" };\n</code></pre> <p>Java comes with several standard classes that define common data structures, including linked lists, stacks, queues, trees, and hash tables, which are defined by classes in the package java.util. The classes define \"generic\" or \"parameterized\" types that will work for a variety of element types. For example, an object of type <code>LinkedList&lt;String&gt;</code> is a list of items of type String. Unfortunately, it is not possible to use these classes with the primitive types;. There is no \"linked list of int\". (However, you can have <code>LinkedList&lt;Integer&gt;</code>, where an object of type Integer is a \"wrapper\" for a primitive int value.)</p> <p>Perhaps the most commonly used of the generic data structures is the ArrayList. Like an array, an ArrayList contains a numbered sequence of items. However, an ArrayList can grow and shrink. For example, to create an ArrayList** that can hold objects of type Point:</p> <pre><code>ArrayList&lt;Point&gt;  pointList;\npointList = new ArrayList&lt;Point&gt;();\n</code></pre> <p>This creates an initially empty list. The method pointList.add(pt) can be used to add a Point to the end of the list, increasing its length by one. The value of pointList.size() is the number of items currently in the list. The method pointList.get(i) returns the i-th element of the list, and pointList.set(i,pt) replaces the i-th element with pt. Similarly, pointList.remove(i) removes the i-th element, decreasing the length of the list by one. For all of these methods, an error occurs if i is not in the range from 0 to pointList.size() \u22121.</p> <p>It is also possible to build linked data structures directly, remembering that the value of a variable whose type is given by a class is either null or is a pointer to an object. For example, a linked list of integer values can be created using objects defined by the simple class</p> <pre><code>class ListNode {\n    int item;       // One of the integers in the list\n    ListNode next;  // Pointer to next node in list, or null for end-of-list.\n}\n</code></pre> <p>A more useful data structure for this course is a scene graph, like the ones discussed in Subsection 2.4.2 and implemented in the sample program java2d/SceneGraphAPI2D.java. In that API, a node in a scene graph is represented by an object belonging to the class SceneGraphNode or to a subclass of that class. For example, a CompoundObject represents a graphical object made up of subobjects. It needs to store pointers to all of its subobjects. They can conveniently be stored in an ArrayList. Then drawing a CompoundObject just means drawing its subobjects. The class can be defined as follows:</p> <pre><code>class CompoundObject extends SceneGraphNode {\n    ArrayList&lt;SceneGraphNode&gt; subobjects = new ArrayList&lt;SceneGraphNode&gt;();\n    CompoundObject add(SceneGraphNode node) {\n        subobjects.add(node);\n        return this;\n    }\n    void doDraw(Graphics2D g) {\n        for (SceneGraphNode node : subobjects)\n        node.draw(g);\n    }\n}\n</code></pre> <p>(The for loop in this class is one that is specific to Java. It iterates automatically through all of the objects in the list.)</p>"},{"location":"cn/a1/s1/#a13-\u7a97\u53e3\u548c\u4e8b\u4ef6","title":"A.1.3  \u7a97\u53e3\u548c\u4e8b\u4ef6","text":"<p>A.1.3  Windows and Events</p> \u4e2d\u6587\u82f1\u6587 <p>Java \u9644\u5e26\u4e86\u4e00\u5957\u6807\u51c6\u7c7b\uff0c\u7528\u4e8e\u5904\u7406\u7a97\u53e3\u548c\u4e8b\u4ef6\u3002\u6211\u4f1a\u63d0\u5230\u5176\u4e2d\u6700\u5e38\u89c1\u7684\u4e00\u4e9b\u3002\u6211\u5c06\u5c3d\u91cf\u544a\u8bc9\u60a8\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u4ee5\u4fbf\u60a8\u80fd\u591f\u7406\u89e3\u5e76\u4f7f\u7528\u672c\u4e66\u4e2d\u7684\u793a\u4f8b\u7a0b\u5e8f\u3002\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u7a0b\u5e8f\u5c06\u9700\u8981\u66f4\u6df1\u5165\u7684\u77e5\u8bc6\u3002\u6211\u8ba8\u8bba\u7684\u6240\u6709\u7c7b\u90fd\u662f Swing GUI API \u7684\u4e00\u90e8\u5206\uff0c\u5305\u542b\u5728 java.awt\u3001javax.swing \u548c java.awt.event \u5305\u4e2d\u3002\u6211\u7684\u8bb8\u591a\u7a0b\u5e8f\u90fd\u4ee5\u4ee5\u4e0b\u5bfc\u5165\u6307\u4ee4\u5f00\u59cb\uff0c\u4ee5\u4f7f\u5b83\u4eec\u5305\u542b\u7684\u7c7b\u53ef\u7528\uff1a</p> <pre><code>import java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n</code></pre> <p>\u7a97\u53e3\u53ef\u4ee5\u7531 JFrame \u7c7b\u7684\u5bf9\u8c61\u8868\u793a\u3002JFrame \u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u83dc\u5355\u680f\u548c\u4e00\u4e2a\u79f0\u4e3a\u5176\u201c\u5185\u5bb9\u9762\u677f\u201d\u7684\u8f83\u5927\u5185\u5bb9\u533a\u57df\u3002\u5185\u5bb9\u9762\u677f\u901a\u5e38\u5c5e\u4e8e JPanel \u7684\u5b50\u7c7b\u3002JPanel \u53ef\u4ee5\u7528\u4e24\u79cd\u65b9\u5f0f\u4f7f\u7528\uff1a\u4f5c\u4e3a\u7ed8\u56fe\u8868\u9762\u6216\u4f5c\u4e3a\u5176\u4ed6\u7ec4\u4ef6\uff08\u5982\u6309\u94ae\u3001\u6587\u672c\u8f93\u5165\u6846\u548c\u5d4c\u5957\u9762\u677f\uff09\u7684\u5bb9\u5668\u3002</p> <p>\u5f53\u9762\u677f\u7528\u4f5c\u7ed8\u56fe\u8868\u9762\u65f6\uff0c\u5b83\u7531\u5305\u542b\u4e00\u4e2a paintComponent() \u65b9\u6cd5\u7684\u5b50\u7c7b\u5b9a\u4e49\u3002\u5f53\u9762\u677f\u7b2c\u4e00\u6b21\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u5e76\u4e14\u9700\u8981\u91cd\u65b0\u7ed8\u5236\u65f6\uff0c\u4f1a\u8c03\u7528 paintComponent \u65b9\u6cd5\u3002\u5b83\u7684\u4efb\u52a1\u662f\u5b8c\u5168\u91cd\u65b0\u7ed8\u5236\u9762\u677f\u3002\u5b83\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a Graphics \u7684\u53c2\u6570\uff0c\u8fd9\u662f\u7528\u4e8e\u7ed8\u56fe\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u5b83\u7684\u5f62\u5f0f\u662f</p> <pre><code>public void paintComponent(Graphics g) { ...\n</code></pre> <p>paintComponent \u65b9\u6cd5\u5728 2.5 \u8282 \u4e2d\u8fdb\u4e00\u6b65\u8ba8\u8bba\u3002\u901a\u5e38\uff0c\u6240\u6709\u7ed8\u56fe\u90fd\u5e94\u8be5\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u5b8c\u6210\uff0c\u5e76\u4e14 paintComponent \u53ea\u5e94\u8be5\u7531\u7cfb\u7edf\u8c03\u7528\u3002\u5f53\u9700\u8981\u91cd\u65b0\u7ed8\u5236\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u9762\u677f\u7684 repaint() \u65b9\u6cd5\u6765\u89e6\u53d1 paintComponent\u3002\uff08\u5728 \u7b2c 3 \u7ae0 \u548c \u7b2c 4 \u7ae0 \u4e2d\u7684 OpenGL \u7f16\u7a0b\u4e2d\uff0c\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a GLJPanel\uff0c\u5b83\u662f JPanel \u7684\u5b50\u7c7b\u3002\u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed8\u56fe\u662f\u5728 display() \u65b9\u6cd5\u4e2d\u5b8c\u6210\u7684\uff0c\u800c\u4e0d\u662f\u5728 paintComponent \u4e2d\uff0c\u4f46\u4f60\u4ecd\u7136\u53ef\u4ee5\u8c03\u7528 repaint() \u6765\u89e6\u53d1\u91cd\u7ed8\u3002\u89c1 3.6.2 \u5c0f\u8282\u3002\uff09</p> <p>\u5f53\u9762\u677f\u7528\u4f5c\u5176\u4ed6\u7ec4\u4ef6\u7684\u5bb9\u5668\u65f6\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u901a\u5e38\u4f1a\u5728\u6784\u9020\u51fd\u6570\u4e2d\u521b\u5efa\u5e76\u6dfb\u52a0\u5230\u9762\u677f\u4e2d\uff0c\u6784\u9020\u51fd\u6570\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u4f8b\u7a0b\uff0c\u5f53\u5bf9\u8c61\u901a\u8fc7 new \u8fd0\u7b97\u7b26\u521b\u5efa\u65f6\uff0c\u5b83\u88ab\u8c03\u7528\u4ee5\u521d\u59cb\u5316\u5bf9\u8c61\u3002\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5b83\u4e0e\u5305\u542b\u5b83\u7684\u7c7b\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\uff0c\u5e76\u4e14\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u8fd9\u4e00\u4e8b\u5b9e\u6765\u8bc6\u522b\u3002</p> <p>\u9762\u677f\u4e2d\u7ec4\u4ef6\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u901a\u5e38\u7531\u4e00\u4e2a\u201c\u5e03\u5c40\u7ba1\u7406\u5668\u201d\u8bbe\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u5b9e\u73b0\u5728\u5bb9\u5668\u4e2d\u5e03\u5c40\u7ec4\u4ef6\u7684\u67d0\u4e9b\u7b56\u7565\u7684\u5bf9\u8c61\u3002\u4f8b\u5982\uff0cBorderLayout \u662f\u4e00\u4e2a\u5e03\u5c40\u7ba1\u7406\u5668\uff0c\u5b83\u5c06\u4e00\u4e2a\u5927\u578b\u7ec4\u4ef6\u653e\u5728\u9762\u677f\u7684\u4e2d\u5fc3\uff0c\u5e76\u5728\u9762\u677f\u7684\u5317\u3001\u5357\u3001\u4e1c\u548c\u897f\u8fb9\u7f18\u4e0a\u4e3a\u591a\u8fbe\u56db\u4e2a\u989d\u5916\u7684\u7ec4\u4ef6\u7559\u51fa\u7a7a\u95f4\u3002\u800c GridLayout \u6309\u884c\u548c\u5217\u5e03\u5c40\u7ec4\u4ef6\uff0c\u6240\u6709\u7ec4\u4ef6\u5177\u6709\u76f8\u540c\u7684\u5927\u5c0f\u3002\u9664\u4e86\u5d4c\u5957\u9762\u677f\uff0c\u53ef\u80fd\u7684\u7ec4\u4ef6\u7c7b\u578b\u8fd8\u5305\u62ec\u5178\u578b\u7684\u754c\u9762\u7ec4\u4ef6\uff0c\u5982 JButton\u3001JCheckBox \u548c JRadioButton\u3002\u60a8\u5c06\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u770b\u5230\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\u7684\u793a\u4f8b\u3002</p> <p>\u4e00\u4e2a GUI \u7a0b\u5e8f\u5fc5\u987b\u80fd\u591f\u54cd\u5e94 \u4e8b\u4ef6\uff0c\u5305\u62ec\u7528\u6237\u64cd\u4f5c\u9f20\u6807\u6216\u952e\u76d8\u65f6\u751f\u6210\u7684\u4f4e\u7ea7\u4e8b\u4ef6\uff0c\u4ee5\u53ca\u7528\u6237\u4ece\u83dc\u5355\u4e2d\u9009\u62e9\u9879\u76ee\u6216\u70b9\u51fb\u6309\u94ae\u65f6\u751f\u6210\u7684\u9ad8\u7ea7\u4e8b\u4ef6\u3002\u4e3a\u4e86\u54cd\u5e94\u4e8b\u4ef6\uff0c\u7a0b\u5e8f\u5b9a\u4e49\u4e86\u4e8b\u4ef6\u5904\u7406\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5728\u4e8b\u4ef6\u53d1\u751f\u65f6\u88ab\u8c03\u7528\u3002\u5728 Java \u4e2d\uff0c\u5305\u542b\u4e8b\u4ef6\u5904\u7406\u65b9\u6cd5\u7684\u5bf9\u8c61\u88ab\u79f0\u4e3a\u201c\u76d1\u542c\u201d\u8fd9\u4e9b\u4e8b\u4ef6\u3002\u4f8b\u5982\uff0c\u57fa\u672c\u7684\u9f20\u6807\u4e8b\u4ef6\u5904\u7406\u5668\u7531\u4e00\u4e2a\u540d\u4e3a MouseListener \u7684\u63a5\u53e3\u6307\u5b9a\u3002\u5b9e\u73b0\u6b64\u63a5\u53e3\u7684\u5bf9\u8c61\u53ef\u4ee5\u54cd\u5e94\u9f20\u6807\u4e8b\u4ef6\u3002\u5b83\u5fc5\u987b\u5b9a\u4e49\u5982 mousePressed() \u7b49\u65b9\u6cd5\uff0c\u5f53\u7528\u6237\u6309\u4e0b\u9f20\u6807\u4e0a\u7684\u6309\u94ae\u65f6\u5c06\u8c03\u7528\u6b64\u65b9\u6cd5\u3002MouseListener \u603b\u5171\u5b9a\u4e49\u4e86\u4e94\u4e2a\u65b9\u6cd5\u3002\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u7c7b\u5c06\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>class MouseHandler implements MouseListener {\n    public void mousePressed(MouseEvent evt) {\n        // \u5f53\u7528\u6237\u6309\u4e0b\u9f20\u6807\u6309\u94ae\u65f6\u4f5c\u51fa\u54cd\u5e94\n    }\n    public void mouseClicked(MouseEvent evt) { }\n    public void mouseReleased(MouseEvent evt) { }\n    public void mouseEntered(MouseEvent evt) { }\n    public void mouseExited(MouseEvent evt) { }\n}\n</code></pre> <p>\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u7684 MouseEvent \u53c2\u6570\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5c06\u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5728\u4e8b\u4ef6\u5904\u7406\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u8c03\u7528 evt.getX() \u548c evt.getY() \u6765\u627e\u5230\u9f20\u6807\u7684 x \u548c y \u5750\u6807\u3002</p> <p>\u4e8b\u4ef6\u901a\u5e38\u4e0e\u67d0\u4e9b\u7ec4\u4ef6\u5173\u8054\uff0c\u79f0\u4e3a\u4e8b\u4ef6\u7684\u201c\u76ee\u6807\u201d\u3002\u4f8b\u5982\uff0c\u9f20\u6807\u6309\u4e0b\u4e8b\u4ef6\u4e0e\u7528\u6237\u6309\u4e0b\u9f20\u6807\u6309\u94ae\u65f6\u5305\u542b\u9f20\u6807\u7684\u7ec4\u4ef6\u5173\u8054\u3002\u6309\u94ae\u70b9\u51fb\u4e8b\u4ef6\u4e0e\u88ab\u70b9\u51fb\u7684\u6309\u94ae\u5173\u8054\u3002\u8981\u63a5\u6536\u7ec4\u4ef6\u7684\u4e8b\u4ef6\uff0c\u7a0b\u5e8f\u5fc5\u987b\u5411\u8be5\u7ec4\u4ef6\u6ce8\u518c\u4e00\u4e2a\u4e8b\u4ef6\u76d1\u542c\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u54cd\u5e94\u540d\u4e3a panel \u7684 JPanel \u4e0a\u7684\u9f20\u6807\u70b9\u51fb\uff0c\u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2a MouseListener \u5bf9\u8c61\u5e76\u5c06\u5176\u6ce8\u518c\u5230\u9762\u677f\uff1a</p> <pre><code>MouseHandler handler = new MouseHandler(); // \u521b\u5efa\u76d1\u542c\u5668\npanel.addMouseListener(handler);  // \u5c06\u5176\u6ce8\u518c\u5230\u9762\u677f\n</code></pre> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4f1a\u521b\u5efa\u4e00\u4e2a\u7c7b\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u5d4c\u5957\u7c7b\uff0c\u6765\u5b9a\u4e49\u6211\u9700\u8981\u7684\u4e8b\u4ef6\u76d1\u542c\u5668\u3002\u7136\u800c\uff0c\u4efb\u4f55\u7c7b\u90fd\u53ef\u4ee5\u5b9e\u73b0\u63a5\u53e3\uff0c\u6709\u65f6\u6211\u8ba9\u6211\u7684\u4e3b\u7c7b\u5b9e\u73b0\u76d1\u542c\u5668\u63a5\u53e3\uff1a</p> <pre><code>public class MyPanel extends JPanel implements MouseListener { ... }\n</code></pre> <p>\u5728\u8fd9\u6837\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u9762\u677f\u548c\u76d1\u542c\u5668\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7279\u6b8a\u7684\u53d8\u91cf this \u5f15\u7528\u8be5\u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u8981\u6ce8\u518c\u9762\u677f\u4ee5\u76d1\u542c\u5b83\u81ea\u5df1\u7684\u9f20\u6807\u4e8b\u4ef6\uff0c\u6211\u4f1a\u8bf4\uff1a</p> <pre><code>this.addMouseListener( this );\n</code></pre> <p>\u8fd9\u53e5\u8bdd\u53ef\u4ee5\u7b80\u5316\u4e3a addMouseListener(this)\u3002</p> <p>\u5176\u4ed6\u4e8b\u4ef6\u7c7b\u578b\u4e0e\u9f20\u6807\u4e8b\u4ef6\u7c7b\u578b\u7c7b\u4f3c\u3002\u4f60\u9700\u8981\u4e00\u4e2a\u5b9e\u73b0\u8be5\u7c7b\u578b\u4e8b\u4ef6\u76d1\u542c\u5668\u63a5\u53e3\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u4f60\u9700\u8981\u5c06\u8be5\u5bf9\u8c61\u6ce8\u518c\u4e3a\u5c06\u6210\u4e3a\u4e8b\u4ef6\u76ee\u6807\u7684\u7ec4\u4ef6\u7684\u76d1\u542c\u5668\u3002</p> <p>MouseMotionListener \u63a5\u53e3\u5b9a\u4e49\u4e86\u5904\u7406\u7528\u6237\u79fb\u52a8\u6216\u62d6\u52a8\u9f20\u6807\u65f6\u751f\u6210\u7684\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002\u4e3a\u4e86\u6548\u7387\uff0c\u5b83\u4e0e MouseListener \u63a5\u53e3\u5206\u5f00\u3002\u54cd\u5e94\u9f20\u6807\u62d6\u52a8\u64cd\u4f5c\u901a\u5e38\u9700\u8981\u4e00\u4e2a\u540c\u65f6\u5145\u5f53\u9f20\u6807\u76d1\u542c\u5668\u548c\u9f20\u6807\u8fd0\u52a8\u76d1\u542c\u5668\u7684\u5bf9\u8c61\u3002</p> <p>KeyListener \u63a5\u53e3\u7528\u4e8e\u5904\u7406\u952e\u76d8\u4e8b\u4ef6\u3002\u5f53\u7528\u6237\u6309\u4e0b\u952e\u76d8\u4e0a\u7684\u952e\u4ee5\u53ca\u91ca\u653e\u952e\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a\u4e8b\u4ef6\u3002\u5f53\u7528\u6237\u5728\u952e\u76d8\u4e0a\u8f93\u5165\u5b57\u7b26\u65f6\uff0c\u4e5f\u4f1a\u751f\u6210\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\u4f8b\u5982\uff0c\u8f93\u5165\u5927\u5199\u5b57\u6bcd 'A' \u5c06\u751f\u6210\u591a\u4e2a\u952e\u6309\u4e0b\u548c\u952e\u91ca\u653e\u4e8b\u4ef6\u4ee5\u53ca\u4e00\u4e2a\u5b57\u7b26\u8f93\u5165\u4e8b\u4ef6\u3002</p> <p>ActionListener \u63a5\u53e3\u7528\u4e8e\u54cd\u5e94\u5404\u79cd\u7528\u6237\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5f53\u7528\u6237\u70b9\u51fb\u6309\u94ae\u3001\u4ece\u83dc\u5355\u4e2d\u9009\u62e9\u547d\u4ee4\u6216\u66f4\u6539\u590d\u9009\u6846\u7684\u8bbe\u7f6e\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a ActionEvent\u3002\u5b83\u8fd8\u7528\u4e8e\u4e00\u79cd\u4e8b\u4ef6\u4e0d\u662f\u6765\u81ea\u7528\u6237\u7684\u60c5\u51b5\uff1aTimer \u662f\u4e00\u4e2a\u53ef\u4ee5\u5b9a\u671f\u95f4\u9694\u751f\u6210\u4e00\u7cfb\u5217 ActionEvents \u7684\u5bf9\u8c61\u3002ActionListener \u53ef\u4ee5\u54cd\u5e94\u8fd9\u4e9b\u4e8b\u4ef6\u6765\u5b9e\u73b0\u52a8\u753b\u3002\u8bf7\u53c2\u9605\u793a\u4f8b\u7a0b\u5e8f java2d/AnimationStarter.java \u770b\u770b\u5982\u4f55\u5b9e\u73b0\u3002</p> <p>\u6700\u540e\uff0c\u6211\u5c06\u6307\u51fa JOGL \u4f7f\u7528\u7c7b\u578b\u4e3a GLEventListener \u7684\u4e8b\u4ef6\u76d1\u542c\u5668\u6765\u4f7f\u7528 OpenGL\u3002\u5176\u4f7f\u7528\u65b9\u6cd5\u5728 3.6.2 \u5c0f\u8282 \u4e2d\u89e3\u91ca\u3002</p> <p>Java comes with a set of standard classes for working with windows and events. I will mention some of the most common. I will try to tell you enough to understand and work with the sample programs in this book. Writing programs from scratch will require more in-depth knowledge. All of the classes that I discuss are part of the Swing GUI API, and are contained in the packages java.awt, javax.swing, and java.awt.event. Many of my programs begin with the following import directives to make the classes that they contain available:</p> <pre><code>import java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n</code></pre> <p>A window can be represented by an object of class JFrame. A JFrame can hold a menu bar and a large content area known as its \"content pane.\" The content pane often belongs to a subclass of JPanel. A JPanel can be used in two ways: as a drawing surface or as a container for other components such as buttons, text input boxes, and nested panels.</p> <p>When a panel is to be used as a drawing surface, it is defined by a subclass that includes a paintComponent() method. The paintComponent method is called when the panel first appears on the screen and when it needs to be redrawn. Its task is to completely redraw the panel. It has a parameter of type Graphics, which is the graphics context that is used to do the drawing. It takes the form</p> <pre><code>public void paintComponent(Graphics g) { ...\n</code></pre> <p>The paintComponent method is discussed further in Section 2.5. In general, all drawing should be done in this method, and paintComponent should only be called by the system. When redrawing is necessary, a call to paintComponent can be triggered by calling the panel's repaint() method. (For OpenGL programming in Chapter 3 and Chapter 4, I use a GLJPanel, which is a subclass of JPanel. In that case, the drawing is done in a display() method, instead of in paintComponent, but you can still call repaint() to trigger a redraw. See Subsection 3.6.2.)</p> <p>When a panel is to be used as a container for other components, those components will usually be created and added to the panel in a constructor, a special routine that is called to initialize an object when the object is created by the new operator. A constructor routine can be recognized by the fact that it has the same name as the class that contains it, and it has no return type.</p> <p>The sizes and positions of the components in a panel will generally be set by a \"layout manager,\" which is an object that implements some policy for laying out the components in a container. For example, a BorderLayout is a layout manager that puts one large component in the center of the panel, with space for up to four additional components on the north, south, east, and west edges of the panel. And a GridLayout lays out components in rows and columns, with all components having the same size. In addition to nested panels, possible component types include typical interface components such as JButton, JCheckBox, and JRadioButton. You will see examples of all of these things in the sample programs.</p> <p>A GUI program must be able to respond to events, including low-level events such as those generated when the user manipulates a mouse or keyboard, and high level events such as those generated when the user selects an item from a menu or clicks on a button. To respond to events, a program defines event-handling methods, which will be called when the event occurs. In Java, an object that includes event-handling methods is said to \"listen\" for those events. For example, the basic mouse-event handlers are specified by an interface named MouseListener. An object that implements this interface can respond to mouse events. It must define methods such as mousePressed(), which will be called when the user presses a button on the mouse. MouseListener defines five methods in all. A class that implements the interface would take the form</p> <pre><code>class MouseHandler implements MouseListerner {\n    public void mousePressed(MouseEvent evt) {\n        .\n        .  // respond when the user presses a mouse button\n        .\n    }\n    public void mouseClicked(MouseEvent evt) { }\n    public void mouseReleased(MouseEvent evt) { }\n    public void mouseEntered(MouseEvent evt) { }\n    public void mouseExited(MouseEvent evt) { }\n}\n</code></pre> <p>The MouseEvent parameter in each of these methods is an object that will contain information about the event. For example, evt.getX() and evt.getY() can be called in the event-handler method to find the x and y coordinates of the mouse.</p> <p>An event is usually associated with some component, called the \"target\" of the event. For example, a mouse press event is associated with the component that contained the mouse when the user pressed the mouse button. A button click event is associated with the button that was clicked. To receive events from a component, a program must register an event-listening object with that component. For example, if you want to respond to mouse clicks on a JPanel named panel, you need to create a MouseListener object and register it with the panel:</p> <pre><code>MouseHandler handler = new MouseHandler(); // create the listener\npanel.addMouseListener(handler);  // register it with the panel\n</code></pre> <p>In many cases, I create a class, often a nested class, to define an event listener that I need. However, any class, can implement an interface, and sometimes I let my main class implement the listener interface:</p> <pre><code>public class MyPanel extends JPanel implements MouseListener { ...\n</code></pre> <p>Inside such a class, the panel and the listener are the same object, and the special variable this refers to that object. So, to register the panel to listen for mouse events on itself, I would say</p> <pre><code>this.addMouseListener( this );\n</code></pre> <p>This statement can be shortened to simply addMouseListener(this).</p> <p>Other event types work similarly to mouse event types. You need an object that implements a listener interface for events of that type, and you need to register that object as a listener with the component that will be the target of the events.</p> <p>The MouseMotionListener interface defines methods that handle events that are generated when the user moves or drags the mouse. It is separate from the MouseListener interface for the sake of efficiency. Responding to a mouse-drag action usually requires an object that acts both as a mouse listener and a mouse motion listener.</p> <p>The KeyListener interface is used for handling keyboard events. An event is generated when the user presses a key and when the user releases a key on the keyboard. Another kind of event is generated when the user types a character. Typing a character such as upper case 'A' would generate several key-pressed and key-released events as well as a character-typed event.</p> <p>The ActionListener interface is used to respond to a variety of user actions. An ActionEvent is generated, for example, when the user clicks a button, selects a command from a menu, or changes the setting of a checkbox. It is also used in one context where the event doesn't come from the user: A Timer is an object that can generate a sequence of ActionEvents at regularly spaced intervals. An ActionListener can respond to those events to implement an animation. See the sample program java2d/AnimationStarter.java to see how its done.</p> <p>Finally, I will note that JOGL uses an event listener of type GLEventListener for working with OpenGL. Its use is explained in Subsection 3.6.2.</p>"},{"location":"cn/a1/s2/","title":"A.2  C \u7f16\u7a0b\u8bed\u8a00","text":"<p>Section A.2  The C Programming Language</p> \u4e2d\u6587\u82f1\u6587 <p>C \u8bed\u8a00\u662f\u6211\u4eec\u5728\u8fd9\u672c\u4e66\u4e2d\u9047\u5230\u7684\u6700\u53e4\u8001\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u7684\u57fa\u672c\u8bed\u6cd5\u5df2\u7ecf\u88ab\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u91c7\u7528\uff0c\u5305\u62ec Java\u3001JavaScript \u4ee5\u53ca OpenGL \u7740\u8272\u5668\u8bed\u8a00\u3002C \u8bed\u8a00\u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u7684\u3002\u5b83\u662f\u9762\u5411\u5bf9\u8c61\u8bed\u8a00 C++ \u7684\u57fa\u7840\uff0c\u4f46 C \u8bed\u8a00\u51e0\u4e4e\u548c C++ \u4e00\u6837\u4e0e Java \u622a\u7136\u4e0d\u540c\u3002\u867d\u7136\u8fd9\u672c\u4e66\u7684\u4efb\u4f55\u8bfb\u8005\u90fd\u4f1a\u5bf9 C \u8bed\u8a00\u7684\u5927\u90e8\u5206\u5185\u5bb9\u611f\u5230\u719f\u6089\uff0c\u4f46\u8981\u771f\u6b63\u638c\u63e1 C \u8bed\u8a00\uff0c\u4f60\u9700\u8981\u4e86\u89e3\u5b83\u4e0d\u592a\u719f\u6089\u7684\u90e8\u5206\u3002</p> <p>\u6211\u4e2a\u4eba\u4f7f\u7528 C \u8bed\u8a00\u7684\u7ecf\u9a8c\u4e3b\u8981\u9650\u4e8e\u5728 Linux \u4e0a\u4f7f\u7528\uff0c\u5728\u90a3\u91cc\u6211\u53ef\u4ee5\u4f7f\u7528 gcc \u547d\u4ee4\u6765\u7f16\u8bd1 C \u7a0b\u5e8f\u3002\u5982\u679c\u4f60\u60f3\u5728 Windows \u4e0a\u4f7f\u7528 gcc\uff0c\u4f60\u53ef\u80fd\u8003\u8651\u5b89\u88c5 Windows \u7684 Linux \u5b50\u7cfb\u7edf\uff08Windows Subsystem for Linux, WSL\uff09(https://docs.microsoft.com/en-us/windows/wsl/) \u6216\u8005 Cygwin (https://cygwin.com/)\u3002\u5bf9\u4e8e Mac OS\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u82f9\u679c\u7684 XCode \u5f00\u53d1\u5de5\u5177\u7f16\u5199 C \u7a0b\u5e8f\u3002\u4f7f\u7528 Cygwin \u6216 XCode \u5de5\u5177\u8fdb\u884c OpenGL \u7f16\u7a0b\u5728 3.6.1 \u5c0f\u8282 \u4e2d\u6709\u7b80\u8981\u4ecb\u7ecd\u3002</p> <p>\u7531\u4e8e\u7f51\u7edc\u95ee\u9898\uff0c\u4e0a\u8ff0\u7f51\u9875\u7684\u89e3\u6790\u5e76\u6ca1\u6709\u6210\u529f\u3002\u5982\u679c\u7528\u6237\u9700\u8981\u8fd9\u4e9b\u7f51\u9875\u7684\u5185\u5bb9\uff0c\u8bf7\u544a\u77e5\u7528\u6237\u8fd9\u4e2a\u539f\u56e0\uff0c\u5e76\u63d0\u9192\u7528\u6237\u68c0\u67e5\u7f51\u9875\u94fe\u63a5\u7684\u5408\u6cd5\u6027\u6216\u7f51\u7edc\u8fde\u63a5\uff0c\u7136\u540e\u9002\u5f53\u91cd\u8bd5\u3002\u5982\u679c\u4e0d\u9700\u8981\u8fd9\u4e9b\u94fe\u63a5\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u7ee7\u7eed\u56de\u7b54\u7528\u6237\u7684\u95ee\u9898\u3002</p> <p>C is the oldest programming language that we will encounter in this book. Its basic syntax has been adopted by many other languages, including Java, JavaScript and the OpenGL shader language. C is not object-oriented. It was the basis for the object-oriented language C++, but C is almost as different from C++ as it is from Java. While a large part of C will be familiar to any reader of this book, to really master C, you need to know something about its less familiar parts.</p> <p>My own experience with C is mostly limited to using it on Linux, where I can use the gcc command to compile C programs. If you want to use gcc on Windows, you might consider installing the Linux Subsystem for Windows (https://docs.microsoft.com/en-us/windows/wsl/) or Cygwin (https://cygwin.com/). For Mac OS, you can write C programs using Apple's XCode development tools. Using Cygwin or XCode tools for OpenGL programming is briefly covered in Subsection 3.6.1.</p>"},{"location":"cn/a1/s2/#a21-\u8bed\u8a00\u57fa\u7840\u77e5\u8bc6","title":"A.2.1  \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6","text":"<p>A.2.1  Language Basics</p> \u4e2d\u6587\u82f1\u6587 <p>C \u7a0b\u5e8f\u7531\u4e00\u7cfb\u5217\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u7ec4\u6210\uff0c\u5b83\u4eec\u53ef\u4ee5\u5206\u5e03\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u3002\uff08C \u4e2d\u7684\u6240\u6709\u5b50\u7a0b\u5e8f\u90fd\u88ab\u79f0\u4e3a\u201c\u51fd\u6570\u201d\uff0c\u65e0\u8bba\u5b83\u4eec\u662f\u5426\u8fd4\u56de\u503c\u3002\uff09\u5176\u4e2d\u5fc5\u987b\u6070\u597d\u6709\u4e00\u4e2a\u51fd\u6570\u662f main() \u4f8b\u7a0b\uff0c\u5176\u5b9a\u4e49\u901a\u5e38\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>int main(int argc, char **argv) {\n    // \u4e3b\u7a0b\u5e8f\u4ee3\u7801\n}\n</code></pre> <p>\u7a0b\u5e8f\u7684\u6267\u884c\u59cb\u4e8e main() \u51fd\u6570\u3002\u6b63\u5982\u5728 Java \u4e2d\u4e00\u6837\uff0cmain() \u7684\u53c2\u6570\u5305\u542b\u6709\u5173\u7528\u4e8e\u6267\u884c\u7a0b\u5e8f\u7684\u547d\u4ee4\u884c\u53c2\u6570\u7684\u4fe1\u606f\u3002\uff08\"\" \u4e0e C \u5b9e\u73b0\u6307\u9488\u548c\u6570\u7ec4\u7684\u65b9\u5f0f\u6709\u5173\uff0c\u6211\u7a0d\u540e\u5c06\u8ba8\u8bba\u3002\uff09\u5982\u679c\u7a0b\u5e8f\u4e0d\u9700\u8981\u8fd9\u4e9b\u53c2\u6570\uff0c\u53ef\u4ee5\u4ece main() \u7684\u5b9a\u4e49\u4e2d\u7701\u7565\u5b83\u4eec\u3002main() \u7684\u8fd4\u56de\u503c\u53d1\u9001\u7ed9\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4ee5\u6307\u793a\u7a0b\u5e8f\u662f\u5426\u6210\u529f\uff1b\u503c\u4e3a 0 \u8868\u793a\u6210\u529f\uff0c\u4efb\u4f55\u5176\u4ed6\u503c\u8868\u793a\u53d1\u751f\u4e86\u9519\u8bef\u3002</p> <p>C \u5728\u201c\u5b9a\u4e49\u201d\u53d8\u91cf\u6216\u51fd\u6570\u548c\u201c\u58f0\u660e\u201d\u5b83\u4e4b\u95f4\u505a\u4e86\u533a\u5206\u3002\u53d8\u91cf\u6216\u51fd\u6570\u53ea\u80fd\u6709\u4e00\u4e2a\u5b9a\u4e49\uff0c\u4f46\u5b83\u53ef\u4ee5\u88ab\u58f0\u660e\u591a\u6b21\u3002\u53d8\u91cf\u6216\u51fd\u6570\u5728\u4f7f\u7528\u524d\u5e94\u8be5\u88ab\u58f0\u660e\uff0c\u4f46\u4e0d\u5fc5\u5728\u4f7f\u7528\u524d\u5c31\u88ab\u5b9a\u4e49\u3002\u4efb\u4f55\u5b9a\u4e49\u4e5f\u662f\u58f0\u660e\u3002C \u7f16\u8bd1\u5668\u4e0d\u4f1a\u5411\u524d\u67e5\u627e\u58f0\u660e\u3002\uff08\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5982\u679c\u5b83\u9047\u5230\u4e00\u4e2a\u672a\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u5b83\u4f1a\u5047\u5b9a\u5b83\u662f int \u7c7b\u578b\uff0c\u5982\u679c\u5b83\u9047\u5230\u4e00\u4e2a\u672a\u58f0\u660e\u7684\u51fd\u6570\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u63a8\u65ad\u58f0\u660e\u3002\u7136\u800c\uff0c\u8fd9\u51e0\u4e4e\u4ece\u6765\u90fd\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u3002\uff09</p> <p>\u51fd\u6570\u5b9a\u4e49\u7684\u5f62\u5f0f\u7c7b\u4f3c\u4e8e Java \u4e2d\u7684\u65b9\u6cd5\u5b9a\u4e49\u3002\u5fc5\u987b\u6307\u5b9a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u5bf9\u4e8e\u4e0d\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u4f7f\u7528 void \u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\u3002\u5fc5\u987b\u6307\u5b9a\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p> <pre><code>int square( int x ) {\n    return x * x;\n}\n</code></pre> <p>\u7531\u4e8e\u5b9a\u4e49\u4e5f\u662f\u58f0\u660e\uff0c\u8fd9\u4e5f\u58f0\u660e\u4e86 square()\u3002\u8981\u58f0\u660e\u51fd\u6570\u800c\u4e0d\u5b9a\u4e49\u5b83\uff0c\u7701\u7565\u51fd\u6570\u4f53\u3002\u8fd9\u79f0\u4e3a\u51fd\u6570\u7684\u201c\u539f\u578b\u201d\uff1a</p> <pre><code>int square(int x);\n</code></pre> <p>\u5bf9\u4e8e\u53d8\u91cf\uff0c\u5178\u578b\u7684\u53d8\u91cf\u58f0\u660e\uff0c\u5982 \"<code>int x;</code>\"\uff0c\u4e5f\u662f\u53d8\u91cf\u7684\u5b9a\u4e49\u3002\u8981\u83b7\u5f97\u4e0d\u662f\u5b9a\u4e49\u7684\u53d8\u91cf\u58f0\u660e\uff0c\u8bf7\u6dfb\u52a0 \"extern\" \u8fd9\u4e2a\u8bcd\u3002\u4f8b\u5982\uff1a\"<code>extern int x;</code>\"\u3002\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u3002</p> <p>\u533a\u5206\u58f0\u660e\u548c\u5b9a\u4e49\u7684\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u5c3d\u7ba1 C \u7a0b\u5e8f\u53ef\u4ee5\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4f46\u6bcf\u4e2a\u6587\u4ef6\u90fd\u662f\u72ec\u7acb\u7f16\u8bd1\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53 C \u7f16\u8bd1\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u5b83\u53ea\u67e5\u770b\u8be5\u6587\u4ef6\u3002\u5373\u4f7f\u591a\u4e2a\u6587\u4ef6\u4f7f\u7528\u5355\u4e2a\u547d\u4ee4\u7f16\u8bd1\uff0c\u4e5f\u662f\u5982\u6b64\u3002\u5982\u679c\u6587\u4ef6 A \u60f3\u8981\u4f7f\u7528\u5728\u6587\u4ef6 B \u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u6216\u53d8\u91cf\uff0c\u90a3\u4e48\u6587\u4ef6 A \u5fc5\u987b\u5305\u542b\u8be5\u51fd\u6570\u6216\u53d8\u91cf\u7684\u58f0\u660e\u3002\u8fd9\u79cd\u8de8\u6587\u4ef6\u5f15\u7528\u901a\u5e38\u4f7f\u7528\u201c\u5934\u6587\u4ef6\u201d\u548c #include \u6307\u4ee4\u6765\u5904\u7406\u3002\u6587\u4ef6\u4e2d\u7684 include \u6307\u4ee4\u544a\u8bc9\u7f16\u8bd1\u5668\u5728\u5b83\u7f16\u8bd1\u7684\u4ee3\u7801\u4e2d\u5305\u542b\u5305\u542b\u6587\u4ef6\u7684\u526f\u672c\u3002\u5934\u6587\u4ef6\u901a\u5e38\u4ee5 \".h\" \u7ed3\u5c3e\uff0c\u5e76\u4e14\u53ea\u5305\u542b\u58f0\u660e\u3002\u4f8b\u5982\uff0c\u60f3\u8981\u4f7f\u7528\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u7684 C \u6e90\u6587\u4ef6\u5c06\u5728\u6587\u4ef6\u5f00\u5934\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n</code></pre> <p>stdio.h \u662f\u5e94\u8be5\u4e0e\u4efb\u4f55 C \u7f16\u8bd1\u5668\u4e00\u8d77\u5b89\u88c5\u7684\u51e0\u4e2a\u6807\u51c6\u5934\u6587\u4ef6\u4e4b\u4e00\u3002\u5176\u4ed6\u6807\u51c6\u5934\u6587\u4ef6\u5305\u62ec math.h\uff08\u5e38\u7528\u6570\u5b66\u51fd\u6570\uff09\uff0cstring.h\uff08\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570\uff09\u548c stdlib.h\uff08\u5305\u62ec\u5185\u5b58\u7ba1\u7406\u51fd\u6570\u5728\u5185\u7684\u4e00\u4e9b\u6742\u9879\u51fd\u6570\uff09\u3002</p> <p>\u7f16\u8bd1\u5668\u8fd8\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u67e5\u627e\u5934\u6587\u4ef6\u3002\u5728 include \u6307\u4ee4\u4e2d\uff0c\u6b64\u7c7b\u5934\u6587\u4ef6\u7684\u540d\u79f0\u5e94\u8be5\u7528\u5f15\u53f7\u800c\u4e0d\u662f\u5c16\u62ec\u53f7\u62ec\u8d77\u6765\u3002\u4f8b\u5982\uff1a</p> <pre><code>#include \"my-header.h\"\n</code></pre> <p>\u5982\u679c\u4f60\u7f16\u5199\u4e86\u4e00\u4e2a .c \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u65e8\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u4f60\u901a\u5e38\u4f1a\u7f16\u5199\u4e00\u4e2a\u5339\u914d\u7684 .h \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u8fd9\u4e9b\u51fd\u6570\u7684\u58f0\u660e\u3002</p> <p>\u5728\u6784\u6210\u7a0b\u5e8f\u7684\u6240\u6709\u6587\u4ef6\u90fd\u88ab\u7f16\u8bd1\u4e4b\u540e\uff0c\u5b83\u4eec\u4ecd\u7136\u9700\u8981\u88ab\u201c\u94fe\u63a5\u201d\u5728\u4e00\u8d77\u5f62\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u3002gcc \u7f16\u8bd1\u5668\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u8fdb\u884c\u94fe\u63a5\u3002\u5373\u4f7f\u6240\u6709\u6587\u4ef6\u90fd\u5df2\u6210\u529f\u7f16\u8bd1\uff0c\u4ecd\u7136\u53ef\u80fd\u51fa\u73b0\u94fe\u63a5\u9519\u8bef\u3002\u5982\u679c\u4e3a\u5df2\u58f0\u660e\u7684\u53d8\u91cf\u6216\u51fd\u6570\u672a\u627e\u5230\u5b9a\u4e49\uff0c\u6216\u8005\u5728\u4e0d\u540c\u6587\u4ef6\u4e2d\u4e3a\u540c\u4e00\u4e8b\u7269\u627e\u5230\u4e86\u4e24\u4e2a\u5b9a\u4e49\uff0c\u5c31\u4f1a\u53d1\u751f\u94fe\u63a5\u9519\u8bef\u3002\u5bf9\u4e8e\u5728\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4f7f\u7528 gcc \u7f16\u8bd1\u5668\u4e0a\u7684 \"-l\" \u9009\u9879\u5c06\u7a0b\u5e8f\u4e0e\u9002\u5f53\u7684\u5e93\u94fe\u63a5\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 math.h \u5934\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7684\u7a0b\u5e8f\u5fc5\u987b\u4e0e\u540d\u4e3a \"m\" \u7684\u5e93\u94fe\u63a5\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>gcc my-program.c my-utils.c -lm\n</code></pre> <p>\u786e\u5b9a\u9700\u8981\u94fe\u63a5\u54ea\u4e9b\u5e93\u53ef\u80fd\u5f88\u56f0\u96be\u3002\u6211\u7684\u5927\u591a\u6570\u793a\u4f8b C \u7a0b\u5e8f\uff0c\u4f8b\u5982 glut/first-triangle.c\uff0c\u5728\u6ce8\u91ca\u4e2d\u8bf4\u660e\u4e86\u5982\u4f55\u7f16\u8bd1\u548c\u94fe\u63a5\u7a0b\u5e8f\u3002</p> <p>\u5173\u4e8e\u4f7f\u7528 gcc \u7f16\u8bd1\u7684\u53e6\u4e00\u4e2a\u6ce8\u610f\u4e8b\u9879\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u7a0b\u5e8f\u7684\u540d\u79f0\u5c06\u662f a.out\u3002gcc \u547d\u4ee4\u4e0a\u7684 \"-o\" \u9009\u9879\u7528\u4e8e\u4e3a\u7f16\u8bd1\u7a0b\u5e8f\u6307\u5b9a\u4e0d\u540c\u7684\u540d\u79f0\u3002\u4f8b\u5982\uff1a</p> <pre><code>gcc  -o my-program  my-program.c my-utils.c -lm\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u7f16\u8bd1\u7a0b\u5e8f\u7684\u540d\u79f0\u5c06\u662f my-program\u3002\u7f16\u8bd1\u7a0b\u5e8f\u7684\u540d\u79f0\u53ef\u4ee5\u50cf\u4efb\u4f55\u5176\u4ed6\u547d\u4ee4\u4e00\u6837\u4f7f\u7528\u3002\u5728 Linux \u6216 MacOS \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u547d\u4ee4\u5728\u547d\u4ee4\u884c\u4e0a\u8fd0\u884c\u7a0b\u5e8f\uff1a</p> <pre><code>./my-program\n</code></pre> <p>\u540d\u79f0\u524d\u9762\u7684 \"./\" \u662f\u4ece\u5f53\u524d\u76ee\u5f55\u8fd0\u884c\u547d\u4ee4\u6240\u9700\u7684\u3002\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u7684\u5b8c\u6574\u8def\u5f84\u540d\u3002</p> <p>C \u8bed\u8a00\u62e5\u6709\u4e0e Java \u7c7b\u4f3c\u7684\u57fa\u672c\u7c7b\u578b\uff1achar\u3001short\u3001int\u3001long\u3001float\u3001double\u3002C \u8bed\u8a00\u4e2d\u6ca1\u6709 boolean \u7c7b\u578b\uff0c\u4f46\u6574\u6570\u53ef\u4ee5\u7528\u4f5c\u5e03\u5c14\u503c\uff0c0 \u4ee3\u8868 false\uff0c\u4efb\u4f55\u975e\u96f6\u503c\u4ee3\u8868 true\u3002C \u8bed\u8a00\u4e2d\u6ca1\u6709\u201cbyte\u201d\u6570\u636e\u7c7b\u578b\uff0c\u4f46 char \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a 8 \u4f4d\u6574\u6570\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f5c\u4e3a byte \u7684\u66ff\u4ee3\u54c1\u3002\u5bf9\u4e8e\u5176\u4ed6\u6570\u503c\u6570\u636e\u7c7b\u578b\uff0c\u6ca1\u6709\u5173\u4e8e\u4f7f\u7528\u7684\u4f4d\u6570\u7684\u4fdd\u8bc1\uff0c\u4f46\u901a\u5e38 int \u8868\u793a 32 \u4f4d\u6574\u6570\uff0clong \u8868\u793a 64 \u4f4d\u3002\u5305\u62ec char \u5728\u5185\u7684\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u6807\u8bb0\u4e3a\u201c\u6709\u7b26\u53f7\u201d\u6216\u201c\u65e0\u7b26\u53f7\u201d\uff0c\u65e0\u7b26\u53f7\u7c7b\u578b\u53ea\u6709\u6b63\u503c\u3002\u4f8b\u5982\uff0csigned char \u7684\u503c\u8303\u56f4\u662f -128 \u5230 127\uff0c\u800c unsigned char \u7684\u503c\u8303\u56f4\u662f 0 \u5230 255\u3002\u9664\u4e86 char\uff0c\u6574\u6570\u7c7b\u578b\u7684\u9ed8\u8ba4\u662f\u6709\u7b26\u53f7\u7684\uff08\u5bf9\u4e8e char\uff0c\u9ed8\u8ba4\u503c\u5728\u6807\u51c6\u4e2d\u672a\u6307\u5b9a\uff09\u3002\u7531\u4e8e C \u8bed\u8a00\u5728\u5c06\u4e00\u79cd\u6570\u503c\u7c7b\u578b\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u6570\u503c\u7c7b\u578b\u65f6\u975e\u5e38\u6177\u6168\uff0c\u6211\u4eec\u4e0d\u5fc5\u592a\u62c5\u5fc3\u8fd9\u4e00\u70b9\u3002\uff08\u6211\u5e94\u8be5\u6ce8\u610f\uff0c\u4e3a\u4e86\u907f\u514d C \u6570\u636e\u7c7b\u578b\u7684\u6b67\u4e49\uff0cOpenGL \u5b9a\u4e49\u4e86\u81ea\u5df1\u7684\u4e00\u7ec4\u6570\u636e\u7c7b\u578b\uff0c\u5982 GLfloat \u548c GLint\uff0c\u4e3a\u4e86\u5b8c\u5168\u6b63\u786e\uff0c\u4f60\u53ef\u4ee5\u5728 OpenGL \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u4ee3\u66ff C \u7684\u901a\u5e38\u7c7b\u578b\u540d\u79f0\u3002\uff09</p> <p>C\u3001Java \u548c JavaScript \u4e2d\u7684\u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f\u7c7b\u4f3c\u3002\u548c Java \u4e00\u6837\uff0cC \u4e2d\u7684\u6574\u6570\u9664\u6cd5\u4f1a\u4ea7\u751f\u6574\u6570\u7ed3\u679c\uff0c\u6240\u4ee5 17/3 \u7684\u7ed3\u679c\u662f 5\u3002C \u4e0d\u4f7f\u7528 \"+\" \u4f5c\u4e3a\u5b57\u7b26\u4e32\u8fde\u63a5\u8fd0\u7b97\u7b26\uff1b\u5b9e\u9645\u4e0a\uff0cC \u6ca1\u6709\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u6b64\u7c7b\u8fd0\u7b97\u7b26\u3002\u53ef\u4ee5\u4f7f\u7528 string.h \u5934\u6587\u4ef6\u4e2d\u7684 strcat \u51fd\u6570\u6765\u5b8c\u6210\u5b57\u7b26\u4e32\u8fde\u63a5\u3002\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e9b\u8fd0\u7b97\u7b26\u4e5f\u53ef\u4ee5\u4e0e C \u4e2d\u7684\u6307\u9488\u4e00\u8d77\u4f7f\u7528\uff0c\u8fd9\u4e9b\u65b9\u5f0f\u5728 Java \u6216 JavaScript \u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u64cd\u4f5c\u3002</p> <p>\u5934\u6587\u4ef6 stdio.h \u58f0\u660e\u4e86 C \u7684\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u51fd\u6570\u3002\u6211\u5728\u8fd9\u91cc\u4e3b\u8981\u63d0\u5230\u5b83\u662f\u4e3a\u4e86\u51fd\u6570 printf()\uff0c\u5b83\u5c06\u6587\u672c\u8f93\u51fa\u5230\u547d\u4ee4\u884c\uff0c\u5e76\u4e14\u5bf9\u4e8e\u7f16\u5199\u8c03\u8bd5\u6d88\u606f\u5f88\u6709\u7528\u3002\u5b83\u672c\u8d28\u4e0a\u4e0e Java \u4e2d\u7684 System.out.printf \u51fd\u6570\u76f8\u540c\u3002\u4f8b\u5982\uff1a</p> <pre><code>printf(\"The square root of %d is %f\\n\", x, sqrt(x));\n</code></pre> <p>\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0csqrt(x) \u51fd\u6570\u5728\u5934\u6587\u4ef6 math.h \u4e2d\u5b9a\u4e49\uff0c\u8fde\u540c\u5176\u4ed6\u6570\u5b66\u51fd\u6570\u5982 sin(x)\u3001cos(x) \u548c abs(x)\u3002\uff08\u5728 C \u4e2d\uff0cabs(x) \u603b\u662f\u4e00\u4e2a int\u3002\u5bf9\u4e8e\u6d6e\u70b9\u7edd\u5bf9\u503c\uff0c\u4f7f\u7528 fabs(x)\u3002\uff09</p> <p>C \u4e2d\u7684\u63a7\u5236\u7ed3\u6784\u4e0e Java \u548c JavaScript \u7c7b\u4f3c\uff0c\u6709\u4e00\u4e9b\u4f8b\u5916\u3002C \u4e2d\u7684 switch \u8bed\u53e5\u53ea\u9002\u7528\u4e8e\u6574\u6570\u503c\u6216\u5b57\u7b26\u503c\u3002\u6ca1\u6709 try..catch \u8bed\u53e5\u3002\u6839\u636e\u4f60\u7684 C \u7f16\u8bd1\u5668\uff0c\u4f60\u53ef\u80fd\u4e0d\u80fd\u5728 for \u5faa\u73af\u4e2d\u58f0\u660e\u53d8\u91cf\uff0c\u5982 for (int i =.... C \u7684\u539f\u59cb\u7248\u672c\u53ea\u6709\u4e00\u79cd\u6ce8\u91ca\u7c7b\u578b\uff0c\u4ee5 / \u5f00\u59cb\u5e76\u4ee5 / \u7ed3\u675f\u3002\u73b0\u4ee3 C \u8fd8\u5141\u8bb8\u4ee5 <code>//</code> \u5f00\u59cb\u7684\u5355\u884c\u6ce8\u91ca\uff0c\u6240\u4ee5\u4f60\u7684\u7f16\u8bd1\u5668\u5e94\u8be5\u63a5\u53d7\u8fd9\u4e24\u79cd\u5f62\u5f0f\u7684\u6ce8\u91ca\u3002</p> <p>A C program consists of a collection of functions and global variables, which can be spread across multiple files. (All subroutines in C are referred to as \"functions,\" whether or not they return a value.) Exactly one of those functions must be a main() routine, whose definition generally takes the form</p> <pre><code>int main(int argc, char **argv) {\n// main program code\n}\n</code></pre> <p>Execution of the program begins in the main() function. As in Java, the parameters to main() contain information about command line arguments from the command that was used to execute the program. (The \"**\" has to do with C's implementation of pointers and arrays, which I will discuss later.) The parameters can be omitted from the definition of main if the program has no need for them. The return value of main() is sent to the operating system to indicate whether or not the program succeeded; a value of 0 indicates success, and any other value indicates that an error occurred.</p> <p>C makes a distinction between \"defining\" a variable or function and \"declaring\" it. A variable or function can have only one definition, but it can be declared any number of times. A variable or function should be declared before it is used, but does not have to be defined before it is used. Any definition is also a declaration. A C compiler will not look ahead to search for a declaration. (More precisely, if it encounters an undeclared variable, it will assume that it is of type int, and if it encounters an undeclared function, it will try to deduce a declaration. However, this is almost never what you want.)</p> <p>A function definition takes a form similar to a method definition in Java. The return type for the function must be specified, and a return type of void is used for a function that does not return a value. The type of each parameter must be specified. For example,</p> <pre><code>int square( int x ) {\n    return x * x;\n}\n</code></pre> <p>Since a definition is also a declaration, this also declares square(). To declare a function without defining it, leave out the body of the function. This is called a \"prototype\" for the function:</p> <pre><code>int square(int x);\n</code></pre> <p>For variables, a typical variable declaration, such as \"<code>int x;</code>\", is also a definition of the variable. To get a variable declaration that is not a definition, add the word \"extern\". For example: \"<code>extern int x;</code>\". You probably won't need to know this.</p> <p>One reason for the distinction between declaration and definition is that, although C programs can consist of several files, each file is compiled independently. That is, when C is compiling a file, it looks only at that file. This is true even if several files are compiled with a single command. If file A wants to use a function or variable that is defined in file B, then file A must include a declaration of that function or variable. This type of cross-file reference is usually handled using \"header files\" and the #include directive. An include directive in a file tells the compiler to include a copy of the text from the included file in the code that it compiles. A header file typically has a name that ends with \".h\" and contains only declarations. For example, a C source file that wants to use standard input/output will use the following directive at the beginning of the file:</p> <pre><code>#include &lt;stdio.h&gt;\n</code></pre> <p>The stdio.h header file is one of several standard header files that should be installed with any C compiler. Other standard headers include math.h for common mathematical functions, string.h for string manipulation functions, and stdlib.h for some miscellaneous functions including memory management functions.</p> <p>The compiler will also look in the current directory for header files. In an include directive, the name of such a header file should be enclosed in quotation marks instead of angle brackets. For example,</p> <pre><code>#include \"my-header.h\"\n</code></pre> <p>If you write a .c file that contains functions meant for use in other files, you will usually write a matching .h file containing declarations of those functions.</p> <p>After all the files that make up a program have been compiled, they still have to be \"linked\" together into a complete program. The gcc compiler does the linking automatically by default. Even if all of the files have compiled successfully, there can still be link errors. A link error occurs if no definition is found for a variable or function that has been declared, or if two definitions for the same thing are found in different files. For functions defined in standard libraries, you might need to link the program with the appropriate libraries using the \"-l\" option on the gcc compiler. For example, a program that uses functions from the math.h header file must be linked with the library named \"m\", like this:</p> <pre><code>gcc my-program.c my-utils.c -lm\n</code></pre> <p>It can be difficult to know what libraries need to be linked. Most of my sample C programs, such as glut/first-triangle.c, have a comment that tells how to compile and link the program.</p> <p>One more note about compiling with gcc. By default, the name of the compiled program will be a.out. The \"-o\" option on the gcc command is used to specify a different name for the compiled program. For example,</p> <pre><code>gcc  -o my-program  my-program.c my-utils.c -lm\n</code></pre> <p>Here, the name of the compiled program will be my-program. The name of the compiled program can be used like any other command. In Linux or MacOS, you can run the program on the command line using a command such as</p> <pre><code>./my-program\n</code></pre> <p>The \"./\" in front of the name is needed to run a command from the current directory. You could also use a full path name to the command.</p> <p>C has most of the same basic types as Java: char, short, int, long, float, double. There is no boolean type, but integers can be used as booleans, with 0 representing false and any non-zero value representing true. There is no \"byte\" data type, but char is essentially an 8-bit integer type that can be used in place of byte. There are no guarantees about the number of bits used for the other numerical data types, but usually int means 32-bit integers and long means 64-bit. The integer types, including char, can be marked \"signed\" or \"unsigned\", where the unsigned types have only positive values. For example, signed char has values in the range \u2212128 to 127, while unsigned char has values in the range 0 to 255. Except for char the default for the integer types is signed. (For char, the default is not specified in the standard.) Since C is very profligate about converting one numeric type to another, we don't have to worry too much about this. (I should note that to avoid the ambiguities of C data types, OpenGL defines its own set of data types such as GLfloat and GLint, and to be completely correct, you can use them in your OpenGL programs in place of C's usual type names.)</p> <p>Operators and expressions are similar in C, Java, and JavaScript. As in Java, integer division in C produces an integer result, so that 17/3 is 5. C does not use \"+\" as a string concatenation operator; in fact, C has no such operator for strings. String concatenation can be done using a function, strcat, from the string.h header file. We will see that some operators can be also used with pointers in C, in ways that have no analog in Java or JavaScript.</p> <p>The header file stdio.h declares C's standard input/output functions. I mention it here mostly for the function printf(), which outputs text to the command line and is useful for writing debugging messages. It is essentially the same function as System.out.printf in Java. For example:</p> <pre><code>printf(\"The square root of %d is %f\\n\", x, sqrt(x));\n</code></pre> <p>The function sqrt(x), by the way, is defined in the header file, math.h, along with other mathematical functions such as sin(x), cos(x), and abs(x). (In C, abs(x) is always an int. For a floating-point absolute value, use fabs(x).)</p> <p>Control structures in C are similar to those in Java and JavaScript, with a few exceptions. The switch statement in C works only with integer or character values. There is no try..catch statement. Depending on your C compiler, you might not be able to declare variables in for loops, as in for (int i =.... The original version of C had only one type of comment, starting with / and ending with /. Modern C also allows single line comments starting with <code>//</code>, so your compiler should accept comments of either form.</p>"},{"location":"cn/a1/s2/#a22-\u6307\u9488\u548c\u6570\u7ec4","title":"A.2.2  \u6307\u9488\u548c\u6570\u7ec4","text":"<p>A.2.2  Pointers and Arrays</p> \u4e2d\u6587\u82f1\u6587 <p>\u5bf9\u4e8e\u719f\u6089 Java \u6216 JavaScript \u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0cC \u8bed\u8a00\u4e2d\u6700\u96be\u9002\u5e94\u7684\u4e00\u70b9\u53ef\u80fd\u5c31\u662f\u5b83\u5bf9\u663e\u5f0f\u6307\u9488\u7684\u4f7f\u7528\u3002\u5bf9\u6211\u4eec\u7684\u76ee\u7684\u800c\u8a00\uff0c\u4f60\u4e3b\u8981\u9700\u8981\u4e86\u89e3\u4e00\u5143\u8fd0\u7b97\u7b26 \"*\" \u548c \"&amp;\" \u5982\u4f55\u4e0e\u6307\u9488\u4e00\u8d77\u4f7f\u7528\u3002\u4f46\u5982\u679c\u4f60\u60f3\u5728 C \u4e2d\u4f7f\u7528\u52a8\u6001\u6570\u636e\u7ed3\u6784\uff0c\u4f60\u9700\u8981\u4e86\u89e3\u66f4\u591a\u3002</p> <p>\u5728 C \u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u6570\u636e\u7c7b\u578b <code>int*</code>\uff0c\u5b83\u4ee3\u8868\u201c\u6307\u5411 int \u7684\u6307\u9488\u201d\u3002\u7c7b\u578b\u4e3a <code>int*</code> \u7684\u503c\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff0c\u8be5\u5730\u5740\u5904\u7684\u5185\u5b58\u4f4d\u7f6e\u5047\u5b9a\u4fdd\u5b58\u4e86\u4e00\u4e2a\u7c7b\u578b\u4e3a int \u7684\u503c\u3002\u5982\u679c ptr \u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>int*</code> \u7684\u53d8\u91cf\uff0c\u90a3\u4e48 <code>*ptr</code> \u5c31\u8868\u793a\u5b58\u50a8\u5728 ptr \u6307\u5411\u5730\u5740\u7684\u6574\u6570\u3002<code>*ptr</code> \u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u4e3a int \u7684\u53d8\u91cf\uff1a\u4f60\u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u5b83\u6765\u4ece\u5185\u5b58\u4e2d\u83b7\u53d6\u6574\u6570\u503c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7ed9\u5b83\u8d4b\u503c\u4ee5\u6539\u53d8\u5185\u5b58\u4e2d\u7684\u503c\uff08\u4f8b\u5982\uff0c\"<code>*ptr = 17;</code>\"\uff09\u3002</p> <p>\u76f8\u53cd\uff0c\u5982\u679c num \u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a int \u7684\u53d8\u91cf\uff0c\u90a3\u4e48 &amp;num \u5c31\u8868\u793a\u4e00\u4e2a\u6307\u5411 num \u7684\u6307\u9488\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c&amp;num \u7684\u503c\u662f\u5185\u5b58\u4e2d\u5b58\u50a8 num \u7684\u5730\u5740\u3002\u6ce8\u610f\uff0c&amp;num \u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>int*</code> \u7684\u8868\u8fbe\u5f0f\uff0c\u800c <code>*&amp;num</code> \u662f num \u7684\u53e6\u4e00\u4e2a\u540d\u79f0\u3002\u8868\u8fbe\u5f0f &amp;num \u53ef\u4ee5\u8bfb\u4f5c\u201c\u6307\u5411 num \u7684\u6307\u9488\u201d\u6216\u201cnum \u7684\u5730\u5740\u201d\u3002</p> <p>\u5f53\u7136\uff0c\u8fd0\u7b97\u7b26 <code>&amp;</code> \u548c <code>*</code> \u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\uff0c\u4e0d\u4ec5\u4ec5\u662f int\u3002\u8fd8\u6709\u4e00\u4e2a\u540d\u4e3a <code>void*</code> \u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee3\u8868\u672a\u7c7b\u578b\u5316\u6307\u9488\u3002\u7c7b\u578b\u4e3a <code>void*</code> \u7684\u503c\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5b83\u53ef\u4ee5\u6307\u5411\u5185\u5b58\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u65e0\u8bba\u90a3\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u662f\u4ec0\u4e48\u3002</p> <p>\u6307\u9488\u7c7b\u578b\u7ecf\u5e38\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u3002\u5982\u679c\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u90a3\u4e48\u51fd\u6570\u5c31\u53ef\u4ee5\u6539\u53d8\u90a3\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5b58\u50a8\u7684\u503c\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>void swap ( int *a, int *b ) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n</code></pre> <p>\u53c2\u6570 a \u548c b \u7684\u7c7b\u578b\u662f <code>int*</code>\uff0c\u6240\u4ee5\u4f20\u5165\u51fd\u6570\u7684\u4efb\u4f55\u5b9e\u9645\u503c\u90fd\u5fc5\u987b\u662f\u6307\u5411 int \u7684\u6307\u9488\u7c7b\u578b\u3002\u5047\u8bbe x \u548c y \u662f\u7c7b\u578b\u4e3a int \u7684\u53d8\u91cf\uff1a</p> <pre><code>int x, y;\n</code></pre> <p>\u90a3\u4e48 <code>&amp;x</code> \u548c <code>&amp;y</code> \u662f\u6307\u5411 int \u7684\u6307\u9488\uff0c\u6240\u4ee5\u5b83\u4eec\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 swap\uff1a</p> <pre><code>swap( &amp;x, &amp;y );\n</code></pre> <p>\u5728\u51fd\u6570\u5185\u90e8\uff0ca \u662f x \u7684\u6307\u9488\uff0c\u8fd9\u4f7f\u5f97 <code>*a</code> \u6210\u4e3a x \u7684\u53e6\u4e00\u4e2a\u540d\u79f0\u3002\u540c\u6837\uff0c<code>*b</code> \u662f y \u7684\u53e6\u4e00\u4e2a\u540d\u79f0\u3002\u6240\u4ee5\uff0c\u4f8b\u5982\uff0c\u8bed\u53e5 <code>*a = *b</code>; \u5c06 y \u7684\u503c\u590d\u5236\u5230 x \u4e2d\u3002\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u4ea4\u6362\u6216\u4ea4\u6362\u5b58\u50a8\u5728 x \u548c y \u4e2d\u7684\u503c\u3002\u5728 Java \u6216 JavaScript \u4e2d\uff0c\u4e0d\u53ef\u80fd\u7f16\u5199\u7c7b\u4f3c\u7684\u51fd\u6570\u6765\u4ea4\u6362\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\u7684\u503c\u3002</p> <p>\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u5728\u58f0\u660e int <code>*a</code> \u4e2d\uff0c<code>*</code> \u4e0e a \u5173\u8054\uff0c\u800c\u4e0d\u662f\u4e0e int \u5173\u8054\u3002\u58f0\u660e\u7684\u610f\u56fe\u662f\u8bf4 <code>*a</code> \u8868\u793a\u4e00\u4e2a int\uff0c\u8fd9\u4f7f\u5f97 a \u6210\u4e3a\u6307\u5411 int \u7684\u6307\u9488\u3002\u5c06\u58f0\u660e\u5199\u6210 <code>int*</code> a \u662f\u5408\u6cd5\u7684\uff0c\u4f46\u53ef\u80fd\u4f1a\u5f15\u8d77\u8bef\u89e3\uff0c\u56e0\u4e3a\uff1a</p> <pre><code>int* a, b;\n</code></pre> <p>\u58f0\u660e a \u4e3a\u6307\u5411 int \u7684\u6307\u9488\uff0cb \u4e3a int\u3002\u8981\u58f0\u660e\u4e24\u4e2a\u6307\u9488\uff0c\u4f60\u5fc5\u987b\u8bf4\uff1a</p> <pre><code>int *a, *b;\n</code></pre> <p>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u6570\u7ec4\u548c\u6307\u9488\u5173\u7cfb\u5bc6\u5207\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u5728\u4e0d\u62c5\u5fc3\u6307\u9488\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u4e00\u4e2a\u5305\u542b 5 \u4e2a int \u7684\u6570\u7ec4\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a</p> <pre><code>int A[5];\n</code></pre> <p>\uff08\u6ce8\u610f \"[5]\" \u4e0e\u53d8\u91cf\u540d A \u76f8\u5173\u8054\uff0c\u800c\u4e0d\u662f\u4e0e\u7c7b\u578b\u540d \"int\"\u3002\uff09\u6709\u4e86\u8fd9\u4e2a\u58f0\u660e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u5143\u7d20 A[0] \u5230 A[4] \u4f5c\u4e3a\u6574\u578b\u53d8\u91cf\u3002C \u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e0d\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u3002\u65b0\u6570\u7ec4\u7684\u5185\u5bb9\u662f\u672a\u77e5\u7684\u3002\u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u6570\u7ec4\u65f6\u4e3a\u5b83\u63d0\u4f9b\u521d\u59cb\u503c\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8bed\u53e5\uff1a</p> <pre><code>int B[] = { 2, 3, 5, 7, 9, 11, 13, 17, 19 };\n</code></pre> <p>\u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4\uff0c\u5305\u542b {} \u4e4b\u95f4\u7684\u6570\u5b57\u5217\u8868\u3002\u5982\u679c\u4e3a\u6570\u7ec4\u63d0\u4f9b\u521d\u59cb\u503c\uff0c\u4f60\u4e0d\u9700\u8981\u6307\u5b9a\u6570\u7ec4\u5927\u5c0f\uff1b\u5b83\u4ece\u503c\u7684\u5217\u8868\u4e2d\u83b7\u53d6\u3002\u6570\u7ec4\u4e0d\u8bb0\u5f97\u5b83\u7684\u957f\u5ea6\uff0c\u4e5f\u6ca1\u6709\u4fdd\u62a4\u63aa\u65bd\u6765\u9632\u6b62\u5c1d\u8bd5\u8bbf\u95ee\u5b9e\u9645\u4e0a\u4f4d\u4e8e\u6570\u7ec4\u5916\u90e8\u7684\u6570\u7ec4\u5143\u7d20\u3002</p> <p>\u53d6\u5730\u5740\u8fd0\u7b97\u7b26 <code>&amp;</code> \u53ef\u4ee5\u5e94\u7528\u4e8e\u6570\u7ec4\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5982\u679c B \u662f\u4e0a\u9762\u58f0\u660e\u7684\u6570\u7ec4\uff0c\u90a3\u4e48 <code>&amp;B[3]</code> \u662f\u5b58\u50a8 <code>B[3]</code> \u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u5730\u5740\u3002\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\uff1a</p> <pre><code>swap( &amp;B[3], &amp;B[4] );\n</code></pre> <p>\u4ea4\u6362 B[3] \u548c B[4] \u7684\u503c\u3002</p> <p>\u6570\u7ec4\u53d8\u91cf\u88ab\u89c6\u4e3a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6570\u7ec4\u53d8\u91cf B \u7684\u503c\u662f\u6570\u7ec4\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002\u8fd9\u610f\u5473\u7740 B \u548c <code>&amp;B[0]</code> \u662f\u76f8\u540c\u7684\u3002\u6b64\u5916\uff0c\u6307\u9488\u53d8\u91cf\u53ef\u4ee5\u50cf\u6570\u7ec4\u4e00\u6837\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c p \u662f\u7c7b\u578b <code>int*</code>\uff0c\u90a3\u4e48 <code>p[3]</code> \u662f p \u6307\u5411\u7684\u6574\u6570\u540e\u7684\u7b2c\u4e09\u4e2a\u6574\u6570\u3002\u5982\u679c\u6211\u4eec\u5b9a\u4e49\uff1a</p> <pre><code>int *p = &amp;B[3];\n</code></pre> <p>\u90a3\u4e48 <code>p[0]</code> \u4e0e <code>B[3]</code> \u76f8\u540c\uff0c<code>p[1]</code> \u4e0e <code>B[4]</code> \u76f8\u540c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u5f62\u5f0f\u4e3a <code>p+n</code> \u7684\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d p \u662f\u6307\u9488\uff0cn \u662f\u6574\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u6307\u9488\u3002\u5b83\u7684\u503c\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u5185\u5b58\u4e2d p \u4e4b\u540e\u7684\u7b2c n \u4e2a\u9879\u76ee\u3002\u8fd9\u91cc\u6240\u6307\u7684\u201c\u9879\u76ee\u201d\u7c7b\u578b\u662f p \u6307\u5411\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5982\u679c p \u662f\u6307\u5411 int \u7684\u6307\u9488\uff0c\u90a3\u4e48 p+3 \u6307\u5411 p \u6240\u6307\u6574\u6570\u4e4b\u540e\u7684\u7b2c\u4e09\u4e2a\u6574\u6570\u3002\u5e76\u4e14 <code>*(p+3)</code> \u7684\u503c\u5c31\u662f\u90a3\u4e2a\u6574\u6570\u3002\u6ce8\u610f\uff0c\u540c\u4e00\u4e2a\u6574\u6570\u53ef\u4ee5\u88ab\u79f0\u4e3a p[3]\u3002\u5b9e\u9645\u4e0a\uff0cp[n] \u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f <code>*(p+n)</code> \u7684\u7b80\u5199\u3002\uff08\u5c3d\u7ba1\u8fd9\u53ef\u80fd\u8ba9\u4f60\u6df1\u5165\u4e86\u89e3 C \u8bed\u8a00\uff0c\u4f46\u6211\u4e5f\u4f1a\u63d0\u5230 <code>++</code> \u548c <code>--</code> \u8fd0\u7b97\u7b26\u53ef\u4ee5\u5e94\u7528\u4e8e\u6307\u9488\u53d8\u91cf\u3002\u6548\u679c\u662f\u5c06\u6307\u9488\u5728\u5185\u5b58\u4e2d\u5411\u524d\u6216\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u9879\u76ee\u3002\uff09</p> <p>C \u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u4e32\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a char \u6570\u7ec4\uff0c\u4f46\u901a\u5e38\u88ab\u89c6\u4e3a\u7c7b\u578b <code>char*</code>\uff0c\u5373\u6307\u5411 char \u7684\u6307\u9488\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u5b57\u7b26\u4e32\u603b\u662f\u4ee5\u4e00\u4e2a\u7a7a\u5b57\u7b26\uff08ASCII \u7801 0\uff09\u7ed3\u675f\uff0c\u4ee5\u6807\u8bb0\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002\u8fd9\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u6570\u7ec4\u6ca1\u6709\u5b9a\u4e49\u7684\u957f\u5ea6\u3002\u7a7a\u5b57\u7b26\u5bf9\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u662f\u81ea\u52a8\u63d2\u5165\u7684\u3002\u4f60\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u521d\u59cb\u5316\u7c7b\u578b\u4e3a char* \u7684\u53d8\u91cf\uff1a</p> <pre><code>char *greet = \"Hello World\";\n</code></pre> <p>\u7136\u540e\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u7531 <code>greet[0]</code>\u3001<code>greet[1]</code>\u3001...\u3001<code>greet[10]</code> \u7ed9\u51fa\u3002<code>greet[11]</code> \u7684\u503c\u662f\u96f6\uff0c\u4ee5\u6807\u8bb0\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002</p> <p>\u4f7f\u7528\u5b9a\u4e49\u5728\u6807\u51c6\u5934\u6587\u4ef6 string.h \u4e2d\u7684\u51fd\u6570\u6765\u64cd\u4f5c\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff0c\u8981\u6d4b\u8bd5\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>strcmp(s1,s2)</code>\u3002\u5e76\u4e14\uff0c\u590d\u5236\u5b57\u7b26\u4e32\u6709\u51fd\u6570 <code>strcpy(s1,s2)</code>\u3002\u5728 C \u4e2d\u4f7f\u7528\u5b57\u7b26\u4e32\u53ef\u80fd\u76f8\u5f53\u68d8\u624b\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u4e3a\u6307\u9488\u6216\u6570\u7ec4\uff0c\u800c\u4e14 C \u4e0d\u5bf9\u7a7a\u6307\u9488\u3001\u9519\u8bef\u7684\u6307\u9488\u6216\u6570\u7ec4\u7d22\u5f15\u8d8a\u754c\u8fdb\u884c\u68c0\u67e5\u3002</p> <p>\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u6211\u73b0\u5728\u53ef\u4ee5\u89e3\u91ca main() \u4f8b\u7a0b\u7684\u53c2\u6570 int argc \u548c char <code>**argv</code>\u3002\u53c2\u6570 argv \u7c7b\u578b\u4e3a <code>char**</code> \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff08\u4e00\u4e2a * \u8868\u793a\u6570\u7ec4\uff0c\u4e00\u4e2a * \u8868\u793a\u5b57\u7b26\u4e32\uff09\u3002\u8fd9\u4e2a\u6570\u7ec4\u4fdd\u5b58\u4e86\u7528\u6765\u8fd0\u884c\u7a0b\u5e8f\u7684\u547d\u4ee4\uff0c<code>argv[0]</code> \u4fdd\u5b58\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u5176\u4f59\u7684\u6570\u7ec4\u4fdd\u5b58\u4efb\u4f55\u547d\u4ee4\u884c\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570 argc \u7684\u503c\u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>For programmers who have experience with Java or JavaScript, one of the hardest things to get used to in C is its use of explicit pointers. For our purposes, you mostly need to know a little about how the unary operators \"*\" and \"&amp;\" are used with pointers. But if you want to use dynamic data structures in C, you need to know quite a bit more.</p> <p>In C, there is a data type <code>int*</code> that represents \"pointer to int.\" A value of type <code>int*</code> is a memory address, and the memory location at that address is assumed to hold a value of type int. If ptr is a variable of type <code>int*</code>, then <code>*ptr</code> represents the integer stored at the address to which ptr points. <code>*ptr</code> works like a variable of type int: You can use it in an expression to fetch the value of the integer from memory, and you can assign a value to it to change the value in memory (for example, \"<code>*ptr = 17;</code>\").</p> <p>Conversely, if num is a variable of type int, then &amp;num represents a pointer that points to num. That is, the value of &amp;num is the address in memory where num is stored. Note that &amp;num is an expression of type <code>int*</code>, and <code>*&amp;num</code> is another name for num. The expression &amp;num can be read as \"pointer to num\" or \"address of num.\"</p> <p>Of course, the operators <code>&amp;</code> and <code>*</code> work with any types, not just with int. There is also a data type named <code>void*</code> that represents untyped pointers. A value of type <code>void*</code> is a pointer that can point anywhere in memory, regardless of what is stored at that location.</p> <p>Pointer types are often used for function parameters. If a pointer to a memory location is passed to a function as a parameter, then the function can change the value stored in that memory location. For example, consider</p> <pre><code>void swap ( int *a, int *b ) {\nint temp = *a;\n*a = *b;\n*b = temp;\n}\n</code></pre> <p>The parameters a and b are of type <code>int*</code>, so any actual values passed into the function must be of type pointer-to-int. Suppose that x and y are variables of type int:</p> <pre><code>int x,y;\n</code></pre> <p>Then <code>&amp;x</code> and <code>&amp;y</code> are pointers to int, so they can be passed as parameters to swap:</p> <pre><code>swap( &amp;x, &amp;y );\n</code></pre> <p>Inside the function, a is a pointer to x, which makes <code>*a</code> another name for x. Similarly, <code>*b</code> is another name for y. So, for example, the statement <code>*a = *b</code>; copies the value of y into x. The net result is to swap, or interchange, the values stored in x and in y. In Java or JavaScript, it is impossible to write a similar method that swaps the values of two integer variables.</p> <p>Note, by the way, that in the declaration int <code>*a</code>, the <code>*</code> is associated with a rather than with int. The intent of the declaration is to say that <code>*a</code> represents an int, which makes a a pointer to int. It is legal, but misleading, to write the declaration as <code>int*</code> a. It is misleading because</p> <pre><code>int* a, b;\n</code></pre> <p>declares a to be a pointer to int and b to be an int. To declare two pointers, you have to say</p> <pre><code>int *a, *b;\n</code></pre> <p>Arrays and pointers are very closely related in C. However, it is possible to use arrays without worrying about pointers. For example, to create an array of 5 ints, you can say</p> <pre><code>int A[5];\n</code></pre> <p>(Note that the \"[5]\" is associated with the variable name, A, rather than with the type name, \"int\".) With this declaration, you can use the array elements A[0] through A[4] as integer variables. Arrays in C are not automatically initialized. The contents of a new array are unknown. You can provide initial values for an array when you declare it. For example, the statement</p> <pre><code>int B[] = { 2, 3, 5, 7, 9, 11, 13, 17, 19 };\n</code></pre> <p>creates an array of length 9 containing the numbers listed between { and }. If you provide initial values for the array, you do not have to specify the array size; it is taken from the list of values. An array does not remember its length, and there is no protection against trying to access array elements that actually lie outside of the array.</p> <p>The address operator, <code>&amp;</code>, can be applied to array elements. For example, if B is the array from the above declaration, then <code>&amp;B[3]</code> is the address of the location in memory where <code>B[3]</code> is stored. The values of <code>B[3]</code> and <code>B[4]</code> could be swapped by calling</p> <pre><code>swap( &amp;B[3], &amp;B[4] );\n</code></pre> <p>An array variable is considered to be a pointer to the array. That is, the value of an array variable B is the address of the array in memory. This means that B and <code>&amp;B[0]</code> are the same. Furthermore, a pointer variable can be used as if it is an array. For example, if p is of type <code>int*</code>, then <code>p[3]</code> is the third integer in memory after the integer to which p points. And if we define</p> <pre><code>int *p = &amp;B[3];\n</code></pre> <p>then <code>p[0]</code> is the same as <code>B[3]</code>, <code>p[1]</code> is the same as <code>B[4]</code>, and so on.</p> <p>An expression of the form <code>p+n</code>, where <code>p</code> is a pointer and n is an integer represents a pointer. Its value is a pointer that points to the n-th item after p in memory. The type of \"item\" that is referred to here is the type to which p points. For example, if p is a pointer-to-int, then p+3 points to the third integer after the integer to which p refers. And the value of <code>*(p+3)</code> is that integer. Note that the same integer can be referred to as p[3]. In fact, p[n] can be considered to be nothing more than shorthand for <code>*(p+n)</code>. (Although it probably takes us farther into C than you want to go, I'll also mention that the operators <code>++</code> and <code>--</code> can be applied to pointer variables. The effect is to advance the pointer one item forwards or backwards in memory.)</p> <p>A string in C is essentially an array of char but is usually thought of as being of type <code>char*</code>, that is, pointer to char. By convention, a string always ends with a null character (ASCII code 0) to mark the end of the string. This is necessary because arrays do not have a defined length. The null character is inserted automatically for string literals. You can initialize a variable of type char* with a string literal:</p> <pre><code>char *greet = \"Hello World\";\n</code></pre> <p>The characters in the string are then given by <code>greet[0]</code>, <code>greet[1]</code>, ..., <code>greet[10]</code>. The value of <code>greet[11]</code> is zero, to mark the end of the string.</p> <p>String manipulation is done using functions that are defined in the standard header file string.h. For example, to test whether two strings are equal, you can use <code>strcmp(s1,s2)</code>. And for copying strings, there is a function <code>strcpy(s1,s2)</code>. Working with strings in C can be quite tricky, because strings are represented as pointers or arrays, and C does no error checking for null pointers, bad pointers, or array indices out of bounds.</p> <p>By the way, I can now explain the parameters to the main() routine, int argc and char <code>**argv</code>. The parameter argv of type <code>char**</code> is an array of strings (one * to mean array and one * to mean string). This array holds the command that was used to run the program, with <code>argv[0]</code> holding the name of the program and the rest of the array holding any command line arguments. The value of the first parameter, argc, is the length of the array.</p>"},{"location":"cn/a1/s2/#a23-\u6570\u636e\u7ed3\u6784","title":"A.2.3  \u6570\u636e\u7ed3\u6784","text":"<p>A.2.3  Data Structures</p> \u4e2d\u6587\u82f1\u6587 <p>C \u8bed\u8a00\u6ca1\u6709\u7c7b\u6216\u5bf9\u8c61\u3002\u7136\u800c\uff0c\u5b83\u786e\u5b9e\u6709\u4e00\u79cd\u8868\u793a\u590d\u6742\u6570\u636e\u7c7b\u578b\u7684\u65b9\u5f0f\uff1a\u7ed3\u6784\u4f53\uff08struct\uff09\u3002\u7ed3\u6784\u4f53\u7c7b\u4f3c\u4e8e\u53ea\u5305\u542b\u53d8\u91cf\u800c\u6ca1\u6709\u65b9\u6cd5\u7684\u7c7b\u3002\u5b83\u662f\u4e00\u79cd\u5c06\u591a\u4e2a\u53d8\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5355\u5143\u7684\u65b9\u5f0f\u3002\u4f8b\u5982\uff1a</p> <pre><code>struct color {\n    float r;\n    float g;\n    float b;\n};\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e2a\u5b9a\u4e49\uff0c<code>struct color</code> \u6210\u4e3a\u4e86\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u58f0\u660e\u53d8\u91cf\u3001\u53c2\u6570\u548c\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p> <pre><code>struct color bg;\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e2a\u58f0\u660e\uff0c<code>bg</code> \u662f\u4e00\u4e2a\u7531\u4e09\u4e2a\u6d6e\u70b9\u53d8\u91cf\u7ec4\u6210\u7684\u7ed3\u6784\u4f53\uff0c\u53ef\u4ee5\u5206\u522b\u5f15\u7528\u4e3a <code>bg.r</code>\u3001<code>bg.g</code> \u548c <code>bg.b</code>\u3002\u4e3a\u4e86\u907f\u514d\u5728\u7c7b\u578b\u540d\u79f0\u4e2d\u4f7f\u7528 \"struct\"\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>typedef</code> \u58f0\u660e\u7ed3\u6784\u4f53\u6570\u636e\u7c7b\u578b\uff1a</p> <pre><code>typedef struct {\n    float r;\n    float g;\n    float b;\n} color;\n</code></pre> <p>\u8fd9\u5b9a\u4e49\u4e86 <code>color</code> \u800c\u4e0d\u662f <code>struct color</code> \u4f5c\u4e3a\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u8fd9\u6837\u53d8\u91cf\u5c31\u53ef\u4ee5\u8fd9\u6837\u58f0\u660e\uff1a</p> <pre><code>color bg;\n</code></pre> <p>\u6709\u65f6\u4f7f\u7528\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488\u662f\u6709\u7528\u7684\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u7ed3\u6784\u4f53 <code>bg</code> \u521b\u5efa\u4e00\u4e2a\u6307\u9488\uff1a</p> <pre><code>color *ptr = &amp;bg;\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e2a\u5b9a\u4e49\uff0c<code>*ptr</code> \u662f <code>bg</code> \u7684\u53e6\u4e00\u4e2a\u540d\u79f0\u3002\u7ed3\u6784\u4f53\u4e2d\u7684\u53d8\u91cf\u53ef\u4ee5\u5f15\u7528\u4e3a <code>(*ptr).r</code>\u3001<code>(*ptr).g</code> \u548c <code>(*ptr).b</code>\u3002\u62ec\u53f7\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a \".\" \u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e \"*\" \u8fd0\u7b97\u7b26\u3002\u4f46\u662f\u8fd9\u4e9b\u53d8\u91cf\u4e5f\u53ef\u4ee5\u5f15\u7528\u4e3a <code>ptr-&gt;r</code>\u3001<code>ptr-&gt;g</code> \u548c <code>ptr-&gt;b</code>\u3002\u5f53\u4f7f\u7528\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488\u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u53d8\u91cf\u65f6\uff0c\u4f7f\u7528 <code>-&gt;</code> \u8fd0\u7b97\u7b26\u4ee3\u66ff\u70b9\uff08.\uff09\u8fd0\u7b97\u7b26\u3002</p> <p>\u8981\u5728 C \u4e2d\u5b9e\u73b0\u52a8\u6001\u6570\u636e\u7ed3\u6784\uff0c\u4f60\u9700\u8981\u80fd\u591f\u52a8\u6001\u5206\u914d\u5185\u5b58\u3002\u5728 Java \u548c JavaScript \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 new \u8fd0\u7b97\u7b26\u6765\u5b8c\u6210\uff0c\u4f46 C \u4e0d\u4f7f\u7528 new\u3002\u76f8\u53cd\uff0c\u5b83\u6709\u4e00\u4e2a\u51fd\u6570 <code>malloc(n)</code>\uff0c\u5b83\u5728\u6807\u51c6\u5934\u6587\u4ef6 stdlib.h \u4e2d\u58f0\u660e\u3002malloc \u7684\u53c2\u6570\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u6307\u5b9a\u8981\u5206\u914d\u7684\u5185\u5b58\u5b57\u8282\u6570\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>void*</code> \u7684\u6307\u9488\uff0c\u6307\u5411\u65b0\u5206\u914d\u7684\u5185\u5b58\u5757\u3002\uff08<code>void*</code> \u6307\u9488\u53ef\u4ee5\u8d4b\u7ed9\u4efb\u4f55\u6307\u9488\u53d8\u91cf\u3002\uff09\u6b64\u5916\uff0c\u7531\u4e8e C \u6ca1\u6709\u201c\u5783\u573e\u56de\u6536\u201d\uff0c\u4f60\u6709\u8d23\u4efb\u91ca\u653e\u4f60\u4f7f\u7528 malloc \u5206\u914d\u7684\u4efb\u4f55\u5185\u5b58\u3002\u8fd9\u53ef\u4ee5\u4f7f\u7528 <code>free(ptr)</code> \u5b8c\u6210\uff0c\u5176\u4e2d ptr \u662f\u88ab\u91ca\u653e\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u6211\u4e0d\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u52a8\u6001\u6570\u636e\u7ed3\u6784\uff0c\u800c\u662f\u63d0\u4f9b\u4e00\u4e2a\u7b80\u77ed\u7684\u7a0b\u5e8f\u6765\u5c55\u793a\u5b83\u4eec\u7684\u4f7f\u7528\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528\u94fe\u8868\u6765\u8868\u793a\u6574\u6570\u7684\u6808\uff1a</p> <pre><code>#include &lt;stdio.h&gt;   // \u7528\u4e8e printf \u51fd\u6570\n#include &lt;stdlib.h&gt;  // \u7528\u4e8e malloc \u548c free \u51fd\u6570\n\ntypedef struct node listnode; // \u9884\u5148\u58f0\u660e listnode \u7c7b\u578b\uff0c\u4ee5\u4fbf\n// \u7528\u4e8e next \u7684\u7c7b\u578b\u3002\nstruct node {\n    int item;       // \u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u9879\u76ee\u3002\n    listnode *next; // \u6307\u5411\u5217\u8868\u4e2d\u4e0b\u4e00\u4e2a\u9879\u76ee\u7684\u6307\u9488\u3002\n};\n\nlistnode *list = 0;  // \u6307\u5411\u5217\u8868\u5934\u90e8\u7684\u6307\u9488\uff0c\u6700\u521d\u4e3a\u7a7a\u3002\n\nvoid push( int item ) {  // \u5c06\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u7684\u5934\u90e8\n    listnode *newnode;  // \u6307\u5411\u4e00\u4e2a\u65b0\u8282\u70b9\u7684\u6307\u9488\uff0c\u7528\u4e8e\u4fdd\u5b58\u9879\u76ee\u3002\n    newnode = malloc( sizeof(listnode) ); // \u4e3a\u8282\u70b9\u5206\u914d\u5185\u5b58\u3002\n    // (sizeof(listnode) \u662f listnode \u7c7b\u578b\u7684\u503c\u7684\u5b57\u8282\u6570)\n    newnode-&gt;item = item;\n    newnode-&gt;next = list;  \n    list = newnode;  // \u4f7f list \u6307\u5411\u65b0\u8282\u70b9\u3002\n}\n\nint pop() {  // \u4ece\u5217\u8868\u4e2d\u79fb\u9664\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u9879\u76ee\n    int item = list-&gt;item; // \u8981\u8fd4\u56de\u7684\u9879\u76ee\u3002\n    listnode *oldnode = list;  // \u4fdd\u5b58\u5c06\u8981\u5220\u9664\u8282\u70b9\u7684\u6307\u9488\u3002\n    list = list-&gt;next;  // \u5c06 list \u6307\u9488\u63a8\u8fdb\u5230\u4e0b\u4e00\u4e2a\u9879\u76ee\u3002\n    free(oldnode); // \u91ca\u653e\u88ab\u5220\u9664\u8282\u70b9\u4f7f\u7528\u7684\u5185\u5b58\u3002\n    return item;\n}\n\nint main() {\n    int i;\n    for (i = 1; i &lt; 1000000; i *= 2) {\n        // \u5c06\u4e8c\u7684\u5e42\u63a8\u5165\u5217\u8868\u3002\n        push(i);\n    }\n    while (list) {\n        // \u5f39\u51fa\u5e76\u6253\u5370\u5217\u8868\u9879\u76ee\uff08\u5012\u5e8f\uff09\u3002\n        printf(\"%d\\n\", pop());\n    }\n}\n</code></pre> <p>\u66f4\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5982\u573a\u666f\u56fe\uff0c\u53ef\u4ee5\u5305\u542b\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8282\u70b9\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u4f60\u9700\u8981\u66f4\u9ad8\u7ea7\u7684\u6280\u672f\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u8bbe\u8ba1\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684\u7ed3\u6784\u4f53\uff1a\u6570\u636e\u7ed3\u6784\u4e2d\u6240\u6709\u8282\u70b9\u5171\u6709\u7684\u6570\u636e\uff1b\u4e00\u4e2a\u6574\u578b\u4ee3\u7801\u7f16\u53f7\uff0c\u8868\u793a\u5b83\u662f\u51e0\u79cd\u53ef\u80fd\u7684\u8282\u70b9\u7c7b\u578b\u4e2d\u7684\u54ea\u4e00\u79cd\uff1b\u4ee5\u53ca\u4e00\u4e2a <code>void*</code> \u6307\u9488\uff0c\u7528\u4e8e\u94fe\u63a5\u8be5\u7c7b\u578b\u8282\u70b9\u6240\u9700\u7684\u989d\u5916\u6570\u636e\u3002\u4f7f\u7528 <code>void*</code> \u6307\u9488\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee3\u7801\u7f16\u53f7\u5c06\u544a\u8bc9\u4f60\u5982\u4f55\u89e3\u91ca\u5b83\u6307\u5411\u7684\u6570\u636e\u3002\u4e00\u4e2a\u6bd4\u4f7f\u7528 <code>void*</code> \u6307\u9488\u66f4\u597d\u7684\u9009\u62e9\u662f\u4e86\u89e3\u201c\u8054\u5408\u4f53\u201d\uff08union\uff09\uff0c\u5b83\u7c7b\u4f3c\u4e8e\u7ed3\u6784\u4f53\uff0c\u4f46\u66f4\u6709\u7528\u4e8e\u8868\u793a\u591a\u79cd\u6570\u636e\u7c7b\u578b\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff0c\u771f\u6b63\u7684\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u662f\u4f7f\u7528 C++ \u800c\u4e0d\u662f C\u3002</p> <p>C does not have classes or objects. However, it does have a way to represent complex data types: a struct. A struct is similar to a class that contains only variables, with no methods. It is a way of grouping several variables into a unit. For example,</p> <pre><code>struct color {\nfloat r;\nfloat g;\nfloat b;\n};\n</code></pre> <p>With this definition, struct color becomes a type that can be used to declare variables, parameters, and return types of functions. For example,</p> <pre><code>struct color bg;\n</code></pre> <p>With this declaration, bg is a struct made up of three float variables that can be referred to as bg.r, bg.g, and bg.g. To avoid having the word \"struct\" as part of the type name, a struct datatype can be declared using typedef:</p> <pre><code>typedef struct {\nfloat r;\nfloat g;\nfloat b;\n} color;\n</code></pre> <p>This defines color, rather than struct color, to be the name of the type, so that a variable can be declared as</p> <pre><code>color bg;\n</code></pre> <p>It is sometimes useful to work with pointers to structs. For example, we can make a pointer to the struct bg:</p> <pre><code>color *ptr = &amp;bg;\n</code></pre> <p>When this definition, <code>*ptr</code> is another name for bg. The variables in the struct can be referred to as <code>(*ptr).r</code>, <code>(*ptr).g</code>, and <code>(*ptr).b</code>. The parentheses are necessary because the operator \".\" has a higher precedence than \"*\". But the variables can also be referred to as <code>ptr-&gt;r</code>, <code>ptr-&gt;g</code>, and <code>ptr-&gt;b</code>. When a pointer-to-struct is used to access the variables in a struct, the operator <code>-&gt;</code> is used instead of the period (.) operator.</p> <p>To implement dynamic data structures in C, you need to be able to allocate memory dynamically. In Java and JavaScript, that can be done using the new operator, but C does not use new. Instead, it has a function, <code>malloc(n)</code>, which is declared in the standard header file stdlib.h. The parameter to malloc is an integer that specifies the number of bytes of memory to be allocated. The return value is a pointer of type <code>void*</code> that points to the newly allocated block of memory. (A <code>void*</code> pointer can be assigned to any pointer variable.) Furthermore, since C does not have \"garbage collection,\" you are responsible for freeing any memory that you allocate using malloc. That can be done using <code>free(ptr)</code>, where ptr is a pointer to the block of memory that is being freed. Rather than discuss dynamic data structures in detail, I present a short program to show how they can be used. The program uses a linked list to represent a stack of integers:</p> <pre><code>#include &lt;stdio.h&gt;   // for the printf function\n#include &lt;stdlib.h&gt;  // for the malloc and free functions\n\ntypedef struct node listnode; // Predeclare the listnode type, so it\n                            // can be used for the type of next.\nstruct node {\nint item;       // An item in the list.\nlistnode *next; // Pointer to next item in list.\n};\n\nlistnode *list = 0;  // Pointer to head of list, initially null.\n\nvoid push( int item ) {  // Add item to head of list\nlistnode *newnode;  // Pointer to a new node to hold the item.\nnewnode = malloc( sizeof(listnode) ); // Allocate memory for the node.\n    // (sizeof(listnode) is the number of bytes for a value of type listnode)\nnewnode-&gt;item = item;\nnewnode-&gt;next = list;  \nlist = newnode;  // Makes list point to the new node.\n}\n\nint pop() {  // Remove and return first item from list\nint item = list-&gt;item; // The item to be returned.\nlistnode *oldnode = list;  // Save pointer to node that will be deleted.\nlist = list-&gt;next;  // Advance list pointer to next item.\nfree(oldnode); // Free the memory used by deleted node.\nreturn item;\n}\n\nint main() {\n    int i;\n    for (i = 1; i &lt; 1000000; i *= 2) {\n        // Push powers of two onto the list.\n        push(i);\n    }\n    while (list) {\n        // Pop and print list items (in reverse order).\n    printf(\"%d\\n\", pop());\n    }\n}\n</code></pre> <p>A more complex data structure, such as a scene graph can contain several different kinds of nodes. For such structures, you need even more advanced techniques. One approach is to design a struct that includes the following: data common to all nodes in the data structure; an integer code number to say which of the several possible kinds of node it is; and a <code>void*</code> pointer to link to the extra data needed by nodes of that type. Using a <code>void*</code> pointer means it can point to any kind of data structure, and the code number will tell how to interpret the data that it points to. A better alternative to using a <code>void*</code> pointer is to learn about \"union\", something similar to a struct but more useful for representing multiple data types. But perhaps the real solution, if you want to work with complex data structures, is to use C++ instead of C.</p>"},{"location":"cn/a1/s3/","title":"A.3  JavaScript \u7f16\u7a0b\u8bed\u8a00","text":"<p>Section A.3  The JavaScript Programming Language</p> \u4e2d\u6587\u82f1\u6587 <p>JavaScript \u662f\u4e00\u79cd\u4e3a Web \u9875\u9762\u521b\u5efa\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u6700\u8fd1\uff0c\u4e00\u4e2a\u79f0\u4e3a Node \u7684\u7248\u672c\u4f7f\u5f97 JavaScript \u80fd\u591f\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u7a0b\u5e8f\uff0c\u751a\u81f3\u7528\u4e8e\u901a\u7528\u7f16\u7a0b\u3002JavaScript \u6700\u521d\u7531 Netscape\uff08Firefox \u7f51\u7edc\u6d4f\u89c8\u5668\u7684\u524d\u8eab\uff09\u5f00\u53d1\uff0c\u5927\u7ea6\u5728 Java \u5f15\u5165\u7684\u540c\u65f6\uff0c\u9009\u62e9 JavaScript \u8fd9\u4e2a\u540d\u5b57\u662f\u4e3a\u4e86\u501f\u52a9 Java \u65e5\u76ca\u589e\u957f\u7684\u4eba\u6c14\u3002\u5c3d\u7ba1\u540d\u5b57\u76f8\u4f3c\uff0c\u4f46\u8fd9\u4e24\u79cd\u8bed\u8a00\u5927\u4e0d\u76f8\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u5e76\u6ca1\u6709\u4e00\u4e2a\u540d\u4e3a JavaScript \u7684\u6807\u51c6\u5316\u8bed\u8a00\u3002\u6807\u51c6\u5316\u7684\u8bed\u8a00\u5b98\u65b9\u79f0\u4e3a ECMAScript\uff0c\u4f46\u8fd9\u4e2a\u540d\u5b57\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u800c\u4e14\u5b9e\u9645\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u7684 JavaScript \u7248\u672c\u4e5f\u4e0d\u4e00\u5b9a\u5b8c\u5168\u5b9e\u73b0\u6807\u51c6\u3002</p> <p>\u4f20\u7edf\u4e0a\uff0c\u7a0b\u5e8f\u5458\u5f88\u96be\u5904\u7406\u4e0d\u540c\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d JavaScript \u5b9e\u73b0\u7684\u5dee\u5f02\u3002\u4f46\u51e0\u4e4e\u6240\u6709\u73b0\u4ee3\u6d4f\u89c8\u5668\u73b0\u5728\u90fd\u5b9e\u73b0\u4e86\u672c\u8282\u8ba8\u8bba\u7684\u7279\u6027\uff0c\u8fd9\u4e9b\u7279\u6027\u7531 ECMAScript 6 \u6307\u5b9a\uff0c\u4e5f\u79f0\u4e3a ES6\u3002\u4e00\u4e2a\u663e\u8457\u7684\u4f8b\u5916\u662f Internet Explorer\uff0c\u5b83\u662f\u5fae\u8f6f Edge \u6d4f\u89c8\u5668\u7684\u524d\u8eab\uff0c\u786e\u5b9e\u4e0d\u5e94\u8be5\u518d\u88ab\u4f7f\u7528\u3002</p> <p>\u8fd9\u4e2a\u9875\u9762\u662f JavaScript \u7684\u7b80\u77ed\u6982\u8ff0\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u8be6\u7ec6\u4e86\u89e3 JavaScript\uff0c\u4f60\u53ef\u80fd\u4f1a\u8003\u8651\u9605\u8bfb David Flanagan \u6240\u8457\u7684\u300aJavaScript\uff1a\u6743\u5a01\u6307\u5357\u300b\u7b2c\u4e03\u7248\u8fd9\u672c\u4e66\u3002</p> <p>JavaScript is a programming language that was created for use on Web pages. More recently, a version known as node has made it possible to use JavaScript for server-side programs, and even for general programming. JavaScript was first developed by Netscape (the predecessor of the Firefox web browser) at about the same time that Java was introduced, and the name JavaScript was chosen to ride the tide of Java's increasing popularity. In spite of the similar names, the two languages are quite different. Actually, there is no standardized language named JavaScript. The standardized language is officially called ECMAScript, but the name is not widely used in practice, and versions of JavaScript in actual web browsers don't necessarily implement the standard exactly.</p> <p>Traditionally, it has been difficult for programmers to deal with the differences among JavaScript implementations in different web browsers. But almost all modern browsers now implement the features discussed in this section, which are specified by ECMAScript 6, also known as ES6. A notable exception is Internet Explorer, the predecessor of Microsoft's Edge browser, which really should no longer be used.</p> <p>This page is a short overview of JavaScript. If you really want to learn JavaScript in detail, you might consider the book JavaScript: The Definitive Guide, seventh edition, by David Flanagan.</p>"},{"location":"cn/a1/s3/#a31-\u6838\u5fc3\u8bed\u8a00","title":"A.3.1  \u6838\u5fc3\u8bed\u8a00","text":"<p>A.3.1  The Core Language</p> \u4e2d\u6587\u82f1\u6587 <p>JavaScript \u4e0e\u7f51\u9875\u6700\u4e3a\u7d27\u5bc6\u76f8\u5173\uff0c\u4f46\u5b83\u662f\u4e00\u79cd\u901a\u7528\u8bed\u8a00\uff0c\u4e5f\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528\u3002\u5b83\u6709\u4e00\u4e2a\u4e0e\u7279\u5b9a\u7f51\u9875\u65e0\u5173\u7684\u6838\u5fc3\u8bed\u8a00\uff0c\u6211\u4eec\u9996\u5148\u4ece\u8fd9\u4e2a\u6838\u5fc3\u5f00\u59cb\u4e86\u89e3\u3002</p> <p>JavaScript \u7684\u8bed\u6cd5\u6bd4 Java \u6216 C \u66f4\u4e3a\u5bbd\u677e\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5206\u53f7\u7684\u4f7f\u7528\uff0c\u5728\u8bed\u53e5\u7ed3\u5c3e\u4e0d\u9700\u8981\u5206\u53f7\uff0c\u9664\u975e\u540c\u4e00\u884c\u6709\u53e6\u4e00\u4e2a\u8bed\u53e5\u8ddf\u968f\u3002\u50cf\u8bb8\u591a\u5bbd\u677e\u7684\u8bed\u6cd5\u89c4\u5219\u4e00\u6837\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u4e00\u4e9b\u610f\u60f3\u4e0d\u5230\u7684\u9519\u8bef\u3002\u5982\u679c\u4e00\u884c\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8bed\u53e5\uff0c\u5b83\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u8bed\u53e5\uff0c\u4e0b\u4e00\u884c\u5c31\u662f\u65b0\u8bed\u53e5\u7684\u5f00\u59cb\u2014\u2014\u5373\u4f7f\u4f60\u6253\u7b97\u4e0b\u4e00\u884c\u662f\u540c\u4e00\u8bed\u53e5\u7684\u5ef6\u7eed\u3002\u6211\u66fe\u56e0\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\u7684\u4ee3\u7801\u800c\u9047\u5230\u95ee\u9898\uff1a</p> <pre><code>return\n    \"very long string\";\n</code></pre> <p>\u7b2c\u4e00\u884c\u7684 \"return\" \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8bed\u53e5\uff0c\u6240\u4ee5\u4e0b\u4e00\u884c\u7684\u503c\u4e0d\u88ab\u8ba4\u4e3a\u662f\u8be5\u8bed\u53e5\u7684\u4e00\u90e8\u5206\u3002\u7ed3\u679c\u662f\u4e00\u4e2a\u6ca1\u6709\u8fd4\u56de\u503c\u5c31\u8fd4\u56de\u7684\u51fd\u6570\u3002\u8fd9\u4e5f\u53d6\u51b3\u4e8e JavaScript \u63a5\u53d7\u4efb\u4f55\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u8bed\u53e5\u7684\u4e8b\u5b9e\uff0c\u6bd4\u5982\u7b2c\u4e8c\u884c\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4f7f\u8bc4\u4f30\u8be5\u8868\u8fbe\u5f0f\u6ca1\u6709\u4efb\u4f55\u6548\u679c\u3002</p> <p>JavaScript \u4e2d\u7684\u53d8\u91cf\u6ca1\u6709\u7c7b\u578b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4f60\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u4f60\u4e0d\u9700\u8981\u58f0\u660e\u5b83\u7684\u7c7b\u578b\uff0c\u53d8\u91cf\u53ef\u4ee5\u5f15\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u3002\u901a\u5e38\u4f7f\u7528 let \u5173\u952e\u5b57\u58f0\u660e\u53d8\u91cf\uff0c\u5b83\u4eec\u5728\u58f0\u660e\u65f6\u53ef\u4ee5\u53ef\u9009\u5730\u521d\u59cb\u5316\uff1a</p> <pre><code>let x, y;\nlet name = \"David\";\n</code></pre> <p>\u4e00\u4e2a\u5728\u521d\u59cb\u5316\u540e\u4e0d\u4f1a\u88ab\u6539\u53d8\u503c\u7684\u53d8\u91cf\u53ef\u4ee5\u4f7f\u7528 const \u800c\u4e0d\u662f var \u6765\u58f0\u660e\uff1a</p> <pre><code>const name = \"David\";\n</code></pre> <p>\u5728 ES6 \u4e4b\u524d\uff0c\u53d8\u91cf\u53ea\u80fd\u4f7f\u7528 var \u5173\u952e\u5b57\u58f0\u660e\uff08\u5c31\u50cf \"var x,y;\"\uff09\u3002\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528 var \u58f0\u660e\u53d8\u91cf\uff0c\u4f46\u73b0\u5728\u63a8\u8350\u4f7f\u7528 let \u548c const\u3002\uff08\u4f7f\u7528 var \u7684\u4e00\u4e2a\u7279\u6b8a\u4e4b\u5904\u662f\uff0c\u5728 JavaScript \u4e2d\uff0c\u7528\u5b83\u6765\u591a\u6b21\u58f0\u660e\u540c\u4e00\u4e2a\u53d8\u91cf\u662f\u6ca1\u95ee\u9898\u7684\uff1b\u58f0\u660e\u53ea\u662f\u8bf4\u660e\u53d8\u91cf\u5b58\u5728\u3002\uff09</p> <p>JavaScript \u8fd8\u5141\u8bb8\u4f60\u5728\u4e0d\u58f0\u660e\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u53d8\u91cf\u3002\u7136\u800c\uff0c\u8fd9\u6837\u505a\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7a0b\u5e8f\u5f00\u5934\u5305\u542b\u4ee5\u4e0b\u8bed\u53e5\u6765\u9632\u6b62\u4f7f\u7528\u672a\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u4ee5\u53ca\u67d0\u4e9b\u5176\u4ed6\u4e0d\u5b89\u5168\u7684\u505a\u6cd5\uff1a</p> <pre><code>\"use strict\";\n</code></pre> <p>\u5c3d\u7ba1\u53d8\u91cf\u6ca1\u6709\u7c7b\u578b\uff0c\u4f46\u503c\u6709\u3002\u503c\u53ef\u4ee5\u662f\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u503c\u3001\u5bf9\u8c61\u3001\u51fd\u6570\uff0c\u6216\u8005\u4e00\u4e9b\u66f4\u5947\u7279\u7684\u4e1c\u897f\u3002\u4e00\u4e2a\u4ece\u672a\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u5177\u6709\u7279\u6b8a\u7684\u503c undefined\u3002\uff08\u51fd\u6570\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u503c\uff0c\u8fd9\u5bf9\u4f60\u6765\u8bf4\u53ef\u80fd\u662f\u4e00\u4e2a\u60ca\u559c\uff1b\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002\uff09\u4f60\u53ef\u4ee5\u4f7f\u7528 typeof \u64cd\u4f5c\u7b26\u786e\u5b9a\u503c\u7684\u7c7b\u578b\uff1a\u8868\u8fbe\u5f0f typeof x \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf4\u660e x \u7684\u503c\u7684\u7c7b\u578b\u3002\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f \"undefined\"\u3001\"number\"\u3001\"string\"\u3001\"boolean\"\u3001\"object\"\u3001\"function\"\u3001\"bigint\" \u6216 \"symbol\"\u3002\uff08\u672c\u8282\u4e0d\u8ba8\u8bba BigInts \u548c symbols\u3002\uff09\u6ce8\u610f\uff0ctypeof \u5bf9\u4efb\u4f55\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5305\u62ec\u6570\u7ec4\uff0c\u90fd\u8fd4\u56de \"object\"\u3002\u8fd8\u6709\uff0ctypeof null \u662f \"object\"\u3002</p> <p>\u5728 JavaScript \u4e2d\uff0c\"string\" \u88ab\u89c6\u4e3a\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u7c7b\u578b\u3002\u5f53\u4f7f\u7528 == \u6216 != \u64cd\u4f5c\u7b26\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c\u4f1a\u6bd4\u8f83\u591a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002\u6ca1\u6709 char \u7c7b\u578b\u3002\u8981\u8868\u793a\u4e00\u4e2a char\uff0c\u4f7f\u7528\u957f\u5ea6\u4e3a 1 \u7684\u5b57\u7b26\u4e32\u3002\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528 + \u64cd\u4f5c\u7b26\u8fdb\u884c\u8fde\u63a5\uff0c\u5c31\u50cf Java \u4e2d\u4e00\u6837\u3002</p> <p>\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u53ef\u4ee5\u7528\u53cc\u5f15\u53f7\u6216\u5355\u5f15\u53f7\u62ec\u8d77\u6765\u3002\u4ece ES6 \u5f00\u59cb\uff0c\u8fd8\u6709\u4e00\u79cd\u79f0\u4e3a \"\u6a21\u677f\u5b57\u7b26\u4e32\" \u7684\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002\u6a21\u677f\u5b57\u7b26\u4e32\u7528\u5355\u4e2a\u53cd\u5f15\u53f7\u5b57\u7b26\u62ec\u8d77\u6765\u3002\u5f53\u6a21\u677f\u5b57\u7b26\u4e32\u4e2d\u5305\u542b ${ \u548c } \u4e4b\u95f4\u7684 JavaScript \u8868\u8fbe\u5f0f\u65f6\uff0c\u8be5\u8868\u8fbe\u5f0f\u7684\u503c\u5c06\u63d2\u5165\u5230\u5b57\u7b26\u4e32\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c x \u662f 5\uff0cy \u662f 12\uff0c\u90a3\u4e48\u8bed\u53e5</p> <pre><code>result = `The product of ${x} and ${y} is ${x*y}`;\n</code></pre> <p>\u5c06\u5b57\u7b26\u4e32 \"The product of 5 and 12 is 60\" \u5206\u914d\u7ed9 result\u3002\u6b64\u5916\uff0c\u6a21\u677f\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u6362\u884c\u7b26\uff0c\u56e0\u6b64\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u5236\u4f5c\u957f\u5b57\u7b26\u4e32\u7684\u7b80\u5355\u65b9\u6cd5\uff0c\u591a\u884c\u5b57\u7b26\u4e32\u3002\uff08\u53cd\u5f15\u53f7\u952e\u53ef\u80fd\u5728\u952e\u76d8\u7684\u5de6\u4e0a\u89d2\u3002\uff09</p> <p>\u6574\u6570\u548c\u5b9e\u6570\u4e4b\u95f4\u6ca1\u6709\u4e25\u683c\u7684\u533a\u522b\u3002\u4e24\u8005\u90fd\u662f \"number\" \u7c7b\u578b\u3002\u4e0e Java \u548c C \u4e0d\u540c\uff0c\u5728 JavaScript \u4e2d\uff0c\u6574\u6570\u76f8\u9664\u4f1a\u4ea7\u751f\u5b9e\u6570\uff0c\u6240\u4ee5 JavaScript \u4e2d\u7684 1/2 \u662f 0.5\uff0c\u800c\u4e0d\u662f Java \u4e2d\u7684 0\u3002</p> <p>\u5c3d\u7ba1\u6709\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\uff0c\u5b57\u9762\u503c true \u548c false\uff0c\u4f46\u5b9e\u9645\u4e0a\u4f60\u53ef\u4ee5\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u3002\u6240\u4ee5\uff0c\u4f60\u7ecf\u5e38\u4f1a\u770b\u5230\u50cf\u8fd9\u6837\u7684 JavaScript \u6d4b\u8bd5\uff1a</p> <pre><code>if (x) { ... }\n</code></pre> <p>\u5982\u679c x \u4f5c\u4e3a\u5e03\u5c14\u503c\u88ab\u8ba4\u4e3a\u662f false\uff0c\u5f53 x \u662f\u6570\u5b57\u96f6\u6216\u7a7a\u5b57\u7b26\u4e32\u6216 null \u6216 undefined\u3002\u5b9e\u9645\u4e0a\uff0c\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u90fd\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0cJavaScript \u4f1a\u8fdb\u884c\u8bb8\u591a\u4f60\u53ef\u80fd\u6ca1\u6709\u9884\u6599\u5230\u7684\u9690\u5f0f\u8f6c\u6362\u3002\u4f8b\u5982\uff0c\u5f53\u4f7f\u7528 == \u64cd\u4f5c\u7b26\u6bd4\u8f83\u6570\u5b57\u548c\u5b57\u7b26\u4e32\u65f6\uff0cJavaScript \u4f1a\u5c1d\u8bd5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\u3002\u6240\u4ee5\uff0c<code>17 == \"17\"</code> \u7684\u503c\u662f true\u3002<code>\"\" == 0</code> \u7684\u503c\u4e5f\u662f true\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b JavaScript \u5c06\u4e24\u4e2a\u64cd\u4f5c\u6570\u90fd\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002\u7531\u4e8e\u8fd9\u79cd\u884c\u4e3a\u5e76\u4e0d\u603b\u662f\u4f60\u60f3\u8981\u7684\uff0cJavaScript \u6709 <code>===</code> \u548c <code>!==</code> \u64cd\u4f5c\u7b26\uff0c\u5b83\u4eec\u7c7b\u4f3c\u4e8e <code>==</code> \u548c <code>!=</code>\uff0c\u4f46\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5728\u64cd\u4f5c\u6570\u4e0a\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002\u6240\u4ee5\uff0c\u4f8b\u5982\uff0c<code>17 === \"17\"</code> \u662f false\u3002\u901a\u5e38\uff0c<code>===</code> \u548c <code>!==</code> \u662f\u7528\u4e8e\u7b49\u503c\u6d4b\u8bd5\u7684\u9996\u9009\u64cd\u4f5c\u7b26\u3002</p> <p>\u5982\u679c\u4f60\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6570\u5b57\u76f8\u4e58\u3001\u76f8\u9664\u6216\u76f8\u51cf\uff0cJavaScript \u4e5f\u4f1a\u5c1d\u8bd5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\u2014\u2014\u4f46\u5982\u679c\u662f\u76f8\u52a0\uff0c\u5b83\u4e0d\u4f1a\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\u5b83\u5c06 + \u64cd\u4f5c\u7b26\u89e3\u91ca\u4e3a\u5b57\u7b26\u4e32\u8fde\u63a5\uff0c\u5e76\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002</p> <p>JavaScript \u6ca1\u6709 Java \u4e2d\u7684\u7c7b\u578b\u8f6c\u6362\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Number\u3001String \u548c Boolean \u4f5c\u4e3a\u8f6c\u6362\u51fd\u6570\u3002\u4f8b\u5982\uff0c</p> <pre><code>x = Number(y);\n</code></pre> <p>\u5c06\u5c1d\u8bd5\u5c06 y \u8f6c\u6362\u4e3a\u6570\u5b57\u3002\u4f60\u53ef\u4ee5\u5728 y \u662f\u5b57\u7b26\u4e32\u65f6\u5e94\u7528\u8fd9\u4e2a\uff0c\u5982\u679c\u8f6c\u6362\u5931\u8d25\uff0cx \u7684\u503c\u5c06\u4e3a NaN\uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6570\u5b57\u503c\uff0c\u8868\u793a \"Not a Number\"\u3002Number \u51fd\u6570\u5c06\u7a7a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u96f6\u3002</p> <p>JavaScript \u4e2d\u7684\u6570\u5b66\u51fd\u6570\u5b9a\u4e49\u5728\u4e00\u4e2a Math \u5bf9\u8c61\u4e2d\uff0c\u7c7b\u4f3c\u4e8e Java \u4e2d\u7684 Math \u7c7b\u3002\u4f8b\u5982\uff0c\u6709\u51fd\u6570 <code>Math.sin(x)</code>\u3001<code>Math.cos(x)</code>\u3001<code>Math.abs(x)</code> \u548c <code>Math.sqrt(x)</code>\u3002<code>Math.PI</code> \u662f\u6570\u5b66\u5e38\u91cf \u03c0\u3002<code>Math.random()</code> \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u4ecb\u4e8e 0.0 \u5230 1.0 \u8303\u56f4\u5185\u7684\u968f\u673a\u6570\uff0c\u5305\u62ec 0.0 \u4f46\u4e0d\u5305\u62ec 1.0\u3002</p> <p>JavaScript \u7684\u63a7\u5236\u7ed3\u6784\u4e0e Java \u6216 C \u7c7b\u4f3c\uff0c\u5305\u62ec if\u3001while\u3001for\u3001do..while \u548c switch\u3002JavaScript \u6709\u4e00\u4e2a try..catch \u8bed\u53e5\u7528\u4e8e\u5904\u7406\u5f02\u5e38\uff0c\u8fd9\u4e0e Java \u7c7b\u4f3c\uff0c\u4f46\u7531\u4e8e\u53d8\u91cf\u662f\u672a\u7c7b\u578b\u5316\u7684\uff0c\u6240\u4ee5\u53ea\u6709\u4e00\u4e2a catch \u5757\uff0c\u5e76\u4e14\u5b83\u4e0d\u4e3a\u5f02\u5e38\u58f0\u660e\u7c7b\u578b\u3002\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u5199 \"catch (e)\" \u800c\u4e0d\u662f \"catch(Exception e)\"\u3002\uff09\u4f8b\u5982\uff0c\u53c2\u89c1\u793a\u4f8b\u7a0b\u5e8f canvas2d/GraphicsStarter.html \u4e2d\u7684 init() \u51fd\u6570\u3002\u53ef\u4ee5\u4f7f\u7528 throw \u8bed\u53e5\u751f\u6210\u9519\u8bef\u3002\u53ef\u4ee5\u629b\u51fa\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u3002\u4f8b\u5982\uff0c\u629b\u51fa\u4e00\u4e2a\u8868\u793a\u9519\u8bef\u4fe1\u606f\u7684\u5b57\u7b26\u4e32\uff1a</p> <pre><code>throw \"Sorry, that value is illegal.\";\n</code></pre> <p>\u7136\u800c\uff0c\u6700\u597d\u629b\u51fa\u4e00\u4e2a\u5c5e\u4e8e Error \u7c7b\u6216\u5176\u5b50\u7c7b\u7684\u5bf9\u8c61\uff1a</p> <pre><code>throw new Error(\"Sorry, that value is illegal.\");\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 function \u5173\u952e\u5b57\u5b9a\u4e49 JavaScript \u4e2d\u7684\u51fd\u6570\u3002\u7531\u4e8e\u53d8\u91cf\u662f\u672a\u7c7b\u578b\u5316\u7684\uff0c\u6240\u4ee5\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u58f0\u660e\uff0c\u53c2\u6570\u4e5f\u6ca1\u6709\u58f0\u660e\u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u51fd\u6570\u5b9a\u4e49\uff1a</p> <pre><code>function square(x) {\n    return x * x;\n}\n</code></pre> <p>\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u7c7b\u578b\u7684\u503c\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u4e0d\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f\uff08\u5c31\u50cf Java \u4e2d\u7684 void \u65b9\u6cd5\uff09\u3002\u5b9e\u9645\u4e0a\uff0c\u540c\u4e00\u4e2a\u51fd\u6570\u6709\u65f6\u53ef\u80fd\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u6709\u65f6\u53ef\u80fd\u4e0d\u8fd4\u56de\uff0c\u5c3d\u7ba1\u8fd9\u6837\u505a\u98ce\u683c\u4e0d\u4f73\u3002JavaScript \u4e0d\u8981\u6c42\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u53c2\u6570\u6570\u91cf\u4e0e\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u53c2\u6570\u6570\u91cf\u5339\u914d\u3002\u5982\u679c\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u63d0\u4f9b\u7684\u53c2\u6570\u592a\u5c11\uff0c\u90a3\u4e48\u51fd\u6570\u5b9a\u4e49\u4e2d\u591a\u4f59\u7684\u53c2\u6570\u5c06\u83b7\u5f97 undefined \u503c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u51fd\u6570\u4e2d\u6d4b\u8bd5\u53c2\u6570\u7684 typeof \u662f\u5426\u4e3a \"undefined\" \u6765\u68c0\u67e5\u8fd9\u4e00\u70b9\u3002\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u597d\u7406\u7531\uff1a\u5b83\u4f7f\u5f97\u53ef\u4ee5\u6709\u53ef\u9009\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u8003\u8651</p> <pre><code>function multiple( str, count ) {\n    if ( typeof count === \"undefined\" ) {\n        count = 2;\n    }\n    let copies = \"\";\n    for (let i = 0; i &lt; count; i++) {\n        copies += str;\n    }\n    return copies;\n}\n</code></pre> <p>\u5982\u679c\u6ca1\u6709\u4e3a count \u63d0\u4f9b\u503c\uff0c\u5982\u51fd\u6570\u8c03\u7528 multiple(\"boo\")\uff0c\u90a3\u4e48 count \u5c06\u88ab\u8bbe\u7f6e\u4e3a 2\u3002\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u4f7f\u7528 let \u6216 const \u5728\u51fd\u6570\u4e2d\u58f0\u660e\u53d8\u91cf\u4f7f\u5176\u6210\u4e3a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u6216\u8005\u66f4\u51c6\u786e\u5730\u8bf4\u662f\u5728\u58f0\u660e\u5b83\u7684\u5757\u4e2d\u3002\uff08\u4f7f\u7528 var \u58f0\u660e\u4f7f\u5176\u6210\u4e3a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u4f46\u4e0d\u662f\u5728\u58f0\u660e\u5b83\u7684\u5757\u4e2d\u3002\uff09</p> <p>\u4e5f\u53ef\u4ee5\u4e3a\u53c2\u6570\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u8fd9\u5c06\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u6ca1\u6709\u4e3a\u8be5\u53c2\u6570\u63d0\u4f9b\u503c\uff0c\u6216\u8005\u63d0\u4f9b\u7684\u503c\u662f undefined \u65f6\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u4e0a\u8ff0\u51fd\u6570\u4e5f\u53ef\u4ee5\u5199\u6210</p> <pre><code>function multiple( str, count = 2 ) { // count \u7684\u9ed8\u8ba4\u503c\u662f 2\n    let copies = \"\";\n    for (let i = 0; i &lt; count; i++) {\n        copies += str;\n    }\n    return copies;\n}\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u63d0\u4f9b\u989d\u5916\u7684\u503c\uff0c\u4f7f\u7528\u6240\u8c13\u7684 \"rest \u53c2\u6570\"\uff1a\u53c2\u6570\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u7531\u4e09\u4e2a\u70b9\u524d\u7f00\uff0c\u5982 \"function f(x, y, ...z)\"\u3002\u4efb\u4f55\u989d\u5916\u7684\u53c2\u6570\u90fd\u88ab\u6536\u96c6\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u8be5\u6570\u7ec4\u6210\u4e3a\u51fd\u6570\u5185\u90e8 rest \u53c2\u6570\u7684\u503c\u3002\u4f8b\u5982\uff0c\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u6c42\u548c\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u8f93\u5165\u503c\uff1a</p> <pre><code>function sum(...rest) {\n    let total = 0;\n    for (let i = 0; i &lt; rest.length; i++) {\n        total += rest[i];\n    }\n    return total;\n}\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528 <code>sum(2,2)</code>\u3001<code>sum(1,2,3,4,5)</code>\uff0c\u751a\u81f3 <code>sum()</code>\u3002\u6700\u540e\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u503c\u662f\u96f6\u3002</p> <p>\uff08\u5904\u7406\u53ef\u53d8\u6570\u91cf\u53c2\u6570\u7684\u65e7\u6280\u672f\u662f\u4f7f\u7528\u7279\u6b8a\u53d8\u91cf arguments\u3002\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\uff0carguments \u662f\u4e00\u4e2a\u7c7b\u6570\u7ec4\u5bf9\u8c61\uff0c\u5305\u542b\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u6240\u6709\u53c2\u6570\u7684\u503c\u3002\uff09</p> <p>\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\u5b9a\u4e49\u53e6\u4e00\u4e2a\u51fd\u6570\u3002\u5d4c\u5957\u51fd\u6570\u662f\u5c40\u90e8\u7684\uff0c\u53ea\u5bf9\u5305\u542b\u5b83\u7684\u51fd\u6570\u53ef\u7528\u3002\u8fd9\u5141\u8bb8\u4f60\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u4e00\u4e2a\u201c\u8f85\u52a9\u51fd\u6570\u201d\uff0c\u800c\u4e0d\u662f\u5c06\u8f85\u52a9\u51fd\u6570\u6dfb\u52a0\u5230\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u3002</p> <p>JavaScript \u4e2d\u7684\u51fd\u6570\u662f\u201c\u4e00\u7b49\u516c\u6c11\u201d\u3002\u8fd9\u610f\u5473\u7740\u51fd\u6570\u88ab\u5f53\u4f5c\u5e38\u89c4\u6570\u636e\u503c\u5bf9\u5f85\uff0c\u4f60\u53ef\u4ee5\u5bf9\u5b83\u4eec\u6267\u884c\u4e0e\u6570\u636e\u76f8\u540c\u7684\u64cd\u4f5c\uff1a\u5c06\u5b83\u4eec\u8d4b\u503c\u7ed9\u53d8\u91cf\u3001\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\u3001\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3001\u4ece\u51fd\u6570\u8fd4\u56de\u3002\u5b9e\u9645\u4e0a\uff0c\u6267\u884c\u6240\u6709\u8fd9\u4e9b\u64cd\u4f5c\u662f\u975e\u5e38\u5e38\u89c1\u7684\uff01</p> <p>\u5f53\u4f60\u50cf\u4e0a\u9762\u793a\u4f8b\u4e2d\u90a3\u6837\u4f7f\u7528\u5b9a\u4e49\u6765\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u8fd9\u51e0\u4e4e\u7b49\u540c\u4e8e\u5c06\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e0a\u9762 sum \u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u4f60\u53ef\u4ee5\u5c06 sum \u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u6216\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u4f60\u5c06\u662f\u5728\u8d4b\u503c\u6216\u4f20\u9012\u51fd\u6570\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528\u51fd\u6570\u540d\u79f0\u4e00\u6837\u4f7f\u7528\u8be5\u53d8\u91cf\u6765\u8c03\u7528\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u6267\u884c\uff1a</p> <pre><code>let f = sum;\n</code></pre> <p>\u90a3\u4e48\u4f60\u53ef\u4ee5\u8c03\u7528 <code>f(1,2,3)</code>\uff0c\u8fd9\u5c06\u548c\u8c03\u7528 <code>sum(1,2,3)</code> \u76f8\u540c\u3002\uff08\u5b9a\u4e49\u51fd\u6570\u548c\u8d4b\u503c\u53d8\u91cf\u4e4b\u95f4\u7684\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u901a\u8fc7\u51fd\u6570\u5b9a\u4e49\u5b9a\u4e49\u7684\u51fd\u6570\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\uff0c\u751a\u81f3\u5728\u51fd\u6570\u5b9a\u4e49\u4e4b\u524d\u3002\u5728\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8ba1\u7b97\u673a\u4f1a\u8bfb\u53d6\u6574\u4e2a\u7a0b\u5e8f\u4ee5\u627e\u5230\u5b83\u5305\u542b\u7684\u6240\u6709\u51fd\u6570\u5b9a\u4e49\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u8d4b\u503c\u8bed\u53e5\u5728\u8ba1\u7b97\u673a\u5728\u6267\u884c\u7a0b\u5e8f\u65f6\u9047\u5230\u5b83\u4eec\u65f6\u6267\u884c\u3002\uff09</p> <p>JavaScript \u751a\u81f3\u6709\u7c7b\u4f3c\u201c\u51fd\u6570\u5b57\u9762\u91cf\u201d\u7684\u4e1c\u897f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4f60\u9700\u8981\u51fd\u6570\u6570\u636e\u503c\u7684\u5730\u65b9\u6709\u4e00\u79cd\u7f16\u5199\u65b9\u5f0f\uff0c\u800c\u65e0\u9700\u7ed9\u5b83\u547d\u540d\u6216\u4f7f\u7528\u6807\u51c6\u51fd\u6570\u5b9a\u4e49\u6765\u5b9a\u4e49\u5b83\u3002\u8fd9\u6837\u7684\u51fd\u6570\u79f0\u4e3a\u201c\u533f\u540d\u51fd\u6570\u201d\u3002\u533f\u540d\u51fd\u6570\u6709\u4e24\u79cd\u8bed\u6cd5\u3002\u8f83\u65e7\u7684\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u6ca1\u6709\u540d\u79f0\u7684\u51fd\u6570\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u533f\u540d\u51fd\u6570\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u540d\u4e3a setTimeout \u7684\u51fd\u6570\uff1a</p> <pre><code>setTimeout( function () {\n    alert(\"Time's Up!\");\n}, 5000 );\n</code></pre> <p>\u5982\u679c\u4e0d\u4f7f\u7528\u533f\u540d\u51fd\u6570\u6765\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u5c06\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u53ea\u4f1a\u4f7f\u7528\u4e00\u6b21\u7684\u6807\u51c6\u547d\u540d\u51fd\u6570\uff1a</p> <pre><code>function alertFunc() {\n    alert(\"Time's Up!\");\n}\n\nsetTimeout( alertFunc, 5000 );\n</code></pre> <p>\u533f\u540d\u51fd\u6570\u7684\u7b2c\u4e8c\u79cd\u8bed\u6cd5\u662f ES6 \u4e2d\u65b0\u589e\u7684\u201c\u7bad\u5934\u51fd\u6570\u201d\uff0c\u5176\u5f62\u5f0f\u4e3a parameter_list =&gt; function_definition\u3002\u4f8b\u5982\uff0c</p> <pre><code>() =&gt; { alert(\"Times Up!\"); }\n</code></pre> <p>\u6216\u8005</p> <pre><code>(x,y) =&gt; { return x+y; }\n</code></pre> <p>\u5982\u679c\u6070\u597d\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u5217\u8868\u4e2d\u7684\u62ec\u53f7\u53ef\u4ee5\u7701\u7565\u3002\u5982\u679c\u53ea\u6709\u4e00\u6761\u8bed\u53e5\uff0c\u53ef\u4ee5\u7701\u7565\u5b9a\u4e49\u5468\u56f4\u7684\u5927\u62ec\u53f7\u3002\u5982\u679c\u5355\u4e00\u8bed\u53e5\u662f\u4e00\u4e2a\u8fd4\u56de\u8bed\u53e5\uff0c\u90a3\u4e48\u201creturn\u201d\u8fd9\u4e2a\u8bcd\u4e5f\u53ef\u4ee5\u7701\u7565\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u50cf \"<code>x =&gt; x*x</code>\" \u8fd9\u6837\u7684\u7bad\u5934\u51fd\u6570\u3002\u7bad\u5934\u51fd\u6570\u548c\u4efb\u4f55\u51fd\u6570\u4e00\u6837\uff0c\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\u3001\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u751a\u81f3\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u3002\u4f8b\u5982\uff0c</p> <pre><code>setTimeout( () =&gt; alert(\"Times up!\"), 5000);\n</code></pre> <p>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u5c06\u51fd\u6570\u8d4b\u503c\u7ed9\u53d8\u91cf\u5e76\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u7136\u800c\uff0cC \u4e2d\u6ca1\u6709\u533f\u540d\u51fd\u6570\u3002\u7c7b\u4f3c\u4e8e\u7bad\u5934\u51fd\u6570\u7684\u4e1c\u897f\u4ee5\u201clambda \u8868\u8fbe\u5f0f\u201d\u7684\u5f62\u5f0f\u88ab\u6dfb\u52a0\u5230\u4e86 Java \u4e2d\u3002</p> <p>JavaScript is most closely associated with web pages, but it is a general purpose language that is used in other places too. There is a core language that has nothing to do with web pages in particular, and we begin by looking at that core.</p> <p>JavaScript has a looser syntax than either Java or C. One example is the use of semicolons, which are not required at the end of a statement, unless another statement follows on the same line. Like many cases of loose syntax rules, this can lead to some unexpected bugs. If a line is a legal statement, it is considered to be a complete statement, and the next line is the start of a new statement\u2014even if you meant the next line to be a continuation of the same statement. I have been burned by this fact with code of the form</p> <pre><code>return\n    \"very long string\";\n</code></pre> <p>The \"return\" on the first line is a legal statement, so the value on the next line is not considered to be part of that statement. The result was a function that returned without returning a value. This also depends on the fact that JavaScript will accept any expression, such as the string on the second line, as a statement, even if evaluating the expression doesn't have any effect.</p> <p>Variables in JavaScript are not typed. That is, when you declare a variable, you don't declare what type it is, and the variable can refer to data of any type. Variables are usually declared using the keyword let, and they can optionally be initialized when they are declared:</p> <pre><code>let x, y;\nlet name = \"David\";\n</code></pre> <p>A variable whose value will not be changed after it is initialized can be declared using const instead of var:</p> <pre><code>const name = \"David\";\n</code></pre> <p>Before ES6, variables could only be declared with the keyword var (as in \"var x,y;\"). It is still possible to declare variables using var, but let and const are now preferred. (One peculiarity of using var is that it is OK in JavaScript to use it to declare the same variable more than once; a declaration just says that the variable exists.)</p> <p>JavaScript also allows you to use variables without declaring them. However, doing so is not a good idea. You can prevent the use of undeclared variables, as well as certain other unsafe practices, by including the following statement at the beginning of your program:</p> <pre><code>\"use strict\";\n</code></pre> <p>Although variables don't have types, values do. A value can be a number, a string, a boolean, an object, a function, or a couple more exotic things. A variable that has never been assigned a value has the special value undefined. (The fact that a function can be used as a data value might be a surprise to you; more on that later.) You can determine the type of a value, using the typeof operator: The expression typeof x returns a string that tells the type of the value of x. The string can be \"undefined\", \"number\", \"string\", \"boolean\", \"object\", \"function\", \"bigint\", or \"symbol\". (Bigints and symbols are not discussed in this section.) Note that typeof returns \"object\" for objects of any type, including arrays. Also, typeof null is \"object\".</p> <p>In JavaScript, \"string\" is considered to be a primitive data type rather than an object type. When two strings are compared using the == or != operator, the contents of the strings are compared. There is no char type. To represent a char, use a string of length 1. Strings can be concatenated with the + operator, like in Java.</p> <p>String literals can be enclosed either in double quotes or in single quotes. Starting in ES6, there is also a kind of string literal known as a \"template string.\" A template string is enclosed in single backquote characters. When a template string includes a JavaScript expression between ${ and }, the value of that expression is inserted into the string. For example, if x is 5 and y is 12, then the statement</p> <pre><code>result = `The product of ${x} and ${y} is ${x*y}`;\n</code></pre> <p>assigns the string \"The product of 5 and 12 is 60\" to result. Furthermore, a template string can include line feeds, so they provide an easy way to make long, multiline strings. (The backquote, or backtick, key might be in the top left corner of your keyboard.)</p> <p>There is not a strict distinction between integers and real numbers. Both are of type \"number\". In JavaScript, unlike Java and C, division of integers produces a real number, so that 1/2 in JavaScript is 0.5, not 0 as it would be in Java.</p> <p>Although there is a boolean type, with literal values true and false, you can actually use any type of value in a boolean context. So, you will often see tests in JavaScript such as</p> <pre><code>if (x) { ... }\n</code></pre> <p>The value of x as a boolean is considered to be false if x is the number zero or is the empty string or is null or is undefined. Effectively, any type of value can be converted implicitly to boolean</p> <p>In fact, JavaScript does many implicit conversions that you might not expect. For example, when comparing a number to string using the == operator, JavaScript will try to convert the string into a number. So, the value of <code>17 == \"17\"</code> is true. The value of <code>\"\" == 0</code> is also true, since in this case JavaScript converts both operands to boolean. Since this behavior is not always what you want, JavaScript has operators <code>===</code> and <code>!==</code> that are similar to <code>==</code> and <code>!=</code> except that they never do type conversion on their operands. So, for example, <code>17 === \"17\"</code> is false. In general, <code>===</code> and <code>!==</code> are the preferred operators for equality tests.</p> <p>JavaScript will also try to convert a string to a number if you multiply, divide, or subtract a string and a number\u2014but not if you add them, since in that case it interprets the + operator as string concatenation, and it converts the number into to a string.</p> <p>JavaScript does not have type-casting as it exists in Java. However, you can use Number, String, and Boolean as conversion functions. For example,</p> <pre><code>x = Number(y);\n</code></pre> <p>will attempt to convert y to a number. You can apply this, for example, when y is a string. If the conversion fails, the value of x will be NaN, a special number value indicating \"Not a Number.\" The Number function converts the empty string to zero.</p> <p>Mathematical functions in JavaScript are defined in a Math object, which is similar to the Math class in Java. For example, there are functions <code>Math.sin(x)</code>, <code>Math.cos(x)</code>, <code>Math.abs(x)</code>, and <code>Math.sqrt(x)</code>. <code>Math.PI</code> is the mathematical constant \u03c0. <code>Math.random()</code> is a function that returns a random number in the range 0.0 to 1.0, including 0.0 but excluding 1.0.</p> <p>JavaScript control structures are similar to those in Java or C, including if, while, for, do..while, and switch. JavaScript has a try..catch statement for handling exceptions that is similar to Java's, but since variables are untyped, there is only one catch block, and it does not declare a type for the exception. (That is, you say, \"catch (e)\" rather than \"catch(Exception e)\".) For an example, see the init() function in the sample program canvas2d/GraphicsStarter.html. An error can be generated using the throw statement. Any type of value can be thrown. You might, for example, throw a string that represents an error message:</p> <pre><code>throw \"Sorry, that value is illegal.\";\n</code></pre> <p>However, it is preferable to throw an object belonging to the class Error or one of its subclasses:</p> <pre><code>throw new Error(\"Sorry, that value is illegal.\");\n</code></pre> <p>Functions in JavaScript can be defined using the function keyword. Since variables are untyped, no return type is declared and parameters do not have declared types. Here is a typical function definition:</p> <pre><code>function square(x) {\n    return x * x;\n}\n</code></pre> <p>A function can return any type of value, or it can return nothing (like a void method in Java). In fact, the same function might sometimes return a value and sometimes not, although that would not be good style. JavaScript does not require the number of parameters in a function call to match the number of parameters in the definition of the function. If you provide too few parameters in the function call, then the extra parameters in the function definition get the value undefined. You can check for this in the function by testing if typeof the parameter is \"undefined\". There can be a good reason for doing this: It makes it possible to have optional parameters. For example, consider</p> <pre><code>function multiple( str, count ) {\n    if ( typeof count === \"undefined\" ) {\n        count = 2;\n    }\n    let copies = \"\";\n    for (let i = 0; i &lt; count; i++) {\n        copies += str;\n    }\n    return copies;\n}\n</code></pre> <p>If no value is provided for count, as in the function call multiple(\"boo\"), then count will be set to 2. Note by the way that declaring a variable in a function using let or const makes it local to the function, or more generally to the block in which it is declared. (Declaring it using var makes it local to the function but not to the block where it is declared.)</p> <p>It is also possible to provide a default value for a parameter, which will be used if the function call does not include a value for that parameter or if the value that is provided is undefined. For example, the above function could also be written as</p> <pre><code>function multiple( str, count = 2 ) { // default value of count is 2\n    let copies = \"\";\n    for (let i = 0; i &lt; count; i++) {\n        copies += str;\n    }\n    return copies;\n}\n</code></pre> <p>You can also provide extra values in a function call, using something called a \"rest parameter\": The last parameter in the parameter list can be preceded by three dots, as in \"function f(x, y, ...z)\". Any extra parameters are gathered into an array, which becomes the value of the rest parameter inside the function. For example, this makes it possible to write a sum function that takes any number of input values:</p> <pre><code>function sum(...rest) {\n    let total = 0;\n    for (let i = 0; i &lt; rest.length; i++) {\n        total += rest[i];\n    }\n    return total;\n}\n</code></pre> <p>With this definition, you can call <code>sum(2,2)</code>, <code>sum(1,2,3,4,5)</code>, and even <code>sum()</code>. The value of the last function call is zero.</p> <p>(An older technique for dealing with a variable number of parameters is to use the special variable arguments. In a function definition, arguments is an array-like object that contains the values of all of the parameters that were passed to the function.)</p> <p>It is possible to define a function inside another function. The nested function is then local to the function in which it is nested, and can only be used inside that function. This lets you define a \"helper function\" inside the function that uses it, instead of adding the helper function to the global namespace.</p> <p>Functions in JavaScript are \"first class objects.\" This means that functions are treated as regular data values, and you can do the sort of things with them that you do with data: assign them to variables, store them in arrays, pass them as parameters to functions, return them from functions. In fact, it is very common to do all of these things!</p> <p>When you define a function using a definition like the ones in the examples shown above, it's almost the same as assigning a function to a variable. For example, given the above definition of the function sum, you can assign sum to a variable or pass it as a parameter, and you would be assigning or passing the function. And if the value of a variable is a function, you can use the variable just as you would use the function name, to call the function. That is, if you do</p> <pre><code>let f = sum;\n</code></pre> <p>then you can call <code>f(1,2,3)</code>, and it will be the same as calling <code>sum(1,2,3)</code>. (One difference between defining a function and assigning a variable is that a function defined by a function definition can be used anywhere in the program, even before the function definition. Before it starts executing the program, the computer reads the entire program to find all the function definitions that it contains. Assignment statements, on the other hand, are executed when the computer gets to them while executing the program.)</p> <p>JavaScript even has something like \"function literals.\" That is, there is a way of writing a function data value just at the point where you need it, without giving it a name or defining it with a standard function definition. Such functions are called \"anonymous functions.\" There are two syntaxes for anonymous functions. The older syntax looks like a function definition without a name. Here, for example, an anonymous function is created and passed as the first parameter to a function named setTimeout:</p> <pre><code>setTimeout( function () {\n    alert(\"Time's Up!\");\n}, 5000 );\n</code></pre> <p>To do the same thing without anonymous functions would require defining a standard named function that is only going to be used once:</p> <pre><code>function alertFunc() {\n    alert(\"Time's Up!\");\n}\n\nsetTimeout( alertFunc, 5000 );\n</code></pre> <p>The second syntax for anonymous functions, new in ES6, is the \"arrow function,\" which takes the form parameter_list =&gt; function_definition. For example,</p> <pre><code>() =&gt; { alert(\"Times Up!\"); }\n</code></pre> <p>or</p> <pre><code>(x,y) =&gt; { return x+y; }\n</code></pre> <p>If there is exactly one parameter, the parentheses in the parameter list can be omitted. If there is only one statement, the braces around the definition can be omitted. And if the single statement is a return statement, then the word \"return\" can also be omitted. Thus, we have arrow functions such as \"<code>x =&gt; x*x</code>\". An arrow function, like any function, can be assigned to a variable, passed as a parameter, or even returned as the return value of a function. For example,</p> <pre><code>setTimeout( () =&gt; alert(\"Times up!\"), 5000);\n</code></pre> <p>In C, functions can be assigned to variables and passed as parameters to functions. However, there are no anonymous functions in C. Something similar to arrow functions has been added to Java in the form of \"lambda expressions.\"</p>"},{"location":"cn/a1/s3/#a32-\u6570\u7ec4\u548c\u5bf9\u8c61","title":"A.3.2  \u6570\u7ec4\u548c\u5bf9\u8c61","text":"<p>A.3.2  Arrays and Objects</p> \u4e2d\u6587\u82f1\u6587 <p>JavaScript \u4e2d\u7684\u6570\u7ec4\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5305\u62ec\u51e0\u79cd\u7528\u4e8e\u64cd\u4f5c\u6570\u7ec4\u7684\u65b9\u6cd5\u3002\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff1b\u5b9e\u9645\u4e0a\uff0c\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e0d\u540c\u5143\u7d20\u53ef\u4ee5\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u901a\u8fc7\u5728\u65b9\u62ec\u53f7 <code>[ ]</code> \u5185\u5217\u51fa\u503c\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\u503c\u3002\u4f8b\u5982\uff1a</p> <pre><code>let A = [1, 2, 3, 4, 5];\nlet B = [\"foo\", \"bar\"];\nlet C = [];\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u6700\u540e\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u6570\u7ec4\uff0c\u5b83\u6700\u521d\u957f\u5ea6\u4e3a\u96f6\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u5e76\u6307\u5b9a\u6570\u7ec4\u7684\u521d\u59cb\u5927\u5c0f\uff1a</p> <pre><code>let D = new Array(100);  // \u4e3a100\u4e2a\u5143\u7d20\u9884\u7559\u7a7a\u95f4\n</code></pre> <p>\u6700\u521d\uff0cD \u7684\u6240\u6709\u5143\u7d20\u7684\u503c\u90fd\u662f undefined\u3002</p> <p>\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u662f\u56fa\u5b9a\u7684\u3002\uff08\u8fd9\u4f7f\u5f97 JavaScript \u6570\u7ec4\u4e0e Java \u7684 ArrayLists \u66f4\u4e3a\u76f8\u4f3c\uff0c\u800c\u4e0e Java \u6216 C \u7684\u6570\u7ec4\u4e0d\u540c\u3002\uff09\u5982\u679c A \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5f53\u524d\u957f\u5ea6\u662f A.length\u3002\u53ef\u4ee5\u4f7f\u7528 push \u65b9\u6cd5\u5c06\u4e00\u4e2a\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u5c06\u5176\u957f\u5ea6\u589e\u52a0\u4e00\uff1aA.push(6)\u3002pop \u65b9\u6cd5\u79fb\u9664\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u9879\u76ee\uff1aA.pop()\u3002\u5b9e\u9645\u4e0a\uff0c\u7ed9\u5c1a\u672a\u5b58\u5728\u7684\u6570\u7ec4\u5143\u7d20\u8d4b\u503c\u662f\u5408\u6cd5\u7684\uff1a</p> <pre><code>let E = [1, 2, 3];  // E \u7684\u957f\u5ea6\u4e3a 3\nE[100] = 17;  // E \u73b0\u5728\u7684\u957f\u5ea6\u4e3a 101\u3002\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5f53\u4e00\u4e2a\u503c\u88ab\u8d4b\u7ed9 <code>E[100]</code> \u65f6\uff0c\u6570\u7ec4\u7684\u957f\u5ea6\u589e\u52a0\uff0c\u4ee5\u4f7f\u5176\u8db3\u591f\u5927\uff0c\u80fd\u591f\u5bb9\u7eb3\u65b0\u7684\u5143\u7d20\u3002</p> <p>\u73b0\u4ee3 JavaScript \u6709\u4e00\u4e2a\u7279\u522b\u9002\u5408\u4e0e\u6570\u7ec4\u4e00\u8d77\u4f7f\u7528\u7684 for \u5faa\u73af\u7684\u66ff\u4ee3\u7248\u672c\u3002\u5b83\u7684\u5f62\u5f0f\u662f for (let v of A) ...\uff0c\u5176\u4e2d A \u662f\u4e00\u4e2a\u6570\u7ec4\uff0cv \u662f\u5faa\u73af\u63a7\u5236\u53d8\u91cf\u3002\u5728\u5faa\u73af\u4f53\u4e2d\uff0c\u5faa\u73af\u63a7\u5236\u53d8\u91cf\u4f9d\u6b21\u53d6 A \u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u3002\u56e0\u6b64\uff0c\u8981\u7d2f\u52a0\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u503c\uff0c\u4f60\u53ef\u4ee5\u8bf4\uff1a</p> <pre><code>let total = 0;\nfor (let num of A) {\n    total = total + num; // num \u662f\u6570\u7ec4 A \u4e2d\u7684\u4e00\u9879\u3002\n}\n</code></pre> <p>\u7531\u4e8e\u5176\u7075\u6d3b\u6027\uff0c\u6807\u51c6\u7684 JavaScript \u6570\u7ec4\u5728\u5904\u7406\u6570\u5b57\u6570\u7ec4\u65f6\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\u3002\u73b0\u4ee3\u7f51\u7edc\u6d4f\u89c8\u5668\u4e3a\u6570\u503c\u5e94\u7528\u5b9a\u4e49\u4e86\u7c7b\u578b\u5316\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u7c7b\u578b\u4e3a Int32Array \u7684\u6570\u7ec4\u53ea\u80fd\u4fdd\u5b58 32 \u4f4d\u6574\u6570\u7684\u503c\u3002\u7c7b\u578b\u5316\u6570\u7ec4\u5728 WebGL \u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff1b\u5f53\u9700\u8981\u65f6\uff0c\u672c\u4e66\u5c06\u6db5\u76d6\u5b83\u4eec\u7684\u5185\u5bb9\u3002</p> <p>JavaScript \u62e5\u6709\u5bf9\u8c61\u548c\u7c7b\uff0c\u5c3d\u7ba1\u5b83\u7684\u7c7b\u5e76\u4e0d\u5b8c\u5168\u7b49\u540c\u4e8e Java \u6216 C++ \u4e2d\u7684\u7c7b\u3002\u9996\u5148\uff0c\u53ef\u4ee5\u6709\u65e0\u9700\u7c7b\u7684\u5bf9\u8c61\u5b58\u5728\u3002\u4e00\u4e2a\u5bf9\u8c61\u672c\u8d28\u4e0a\u53ea\u662f\u4e00\u7ec4\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u952e\u662f\u4e00\u4e2a\u540d\u79f0\uff0c\u7c7b\u4f3c\u4e8e Java \u4e2d\u7684\u5b9e\u4f8b\u53d8\u91cf\u6216\u65b9\u6cd5\u540d\u79f0\uff0c\u5b83\u6709\u4e00\u4e2a\u5173\u8054\u7684\u503c\u3002\u5728 JavaScript \u4e2d\u901a\u5e38\u4e0d\u4f7f\u7528\u201c\u5b9e\u4f8b\u53d8\u91cf\u201d\u8fd9\u4e2a\u672f\u8bed\uff1b\u9996\u9009\u7684\u672f\u8bed\u662f\u201c\u5c5e\u6027\u201d\u3002</p> <p>\u5bf9\u8c61\u5c5e\u6027\u7684\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u666e\u901a\u6570\u636e\u503c\u6216\u4e00\u4e2a\u51fd\u6570\uff08\u5728 JavaScript \u4e2d\uff0c\u51fd\u6570\u53ea\u662f\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u6570\u636e\u503c\uff09\u3002\u53ef\u4ee5\u901a\u8fc7\u7528 <code>{}</code> \u5305\u56f4\u7684\u952e\u503c\u5bf9\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u3002\u4f8b\u5982\uff1a</p> <pre><code>let pt = { x: 17, y: 42 };\n\nlet ajaxData = {\n    url: \"http://some.place.org/ajax.php\",\n    data: 42,\n    onSuccess: function () { alert(\"It worked!\"); },\n    onFailure: function (error) { alert(\"Sorry, it failed: \" + error); }\n};\n</code></pre> <p>\u6839\u636e\u8fd9\u4e9b\u5b9a\u4e49\uff0c<code>pt</code> \u662f\u4e00\u4e2a\u5bf9\u8c61\u3002\u5b83\u6709 <code>pt.x</code> \u548c <code>pt.y</code> \u5c5e\u6027\uff0c\u5206\u522b\u6709\u503c 17 \u548c 42\u3002\u800c <code>ajaxData</code> \u662f\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b <code>ajaxData.url</code> \u548c <code>ajaxData.onSuccess</code> \u7b49\u5c5e\u6027\u3002<code>ajaxData.onSuccess</code> \u7684\u503c\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u91cc\u4f5c\u4e3a\u533f\u540d\u51fd\u6570\u521b\u5efa\u3002\u4f5c\u4e3a\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\u7684\u51fd\u6570\u901a\u5e38\u88ab\u79f0\u4e3a\u8be5\u5bf9\u8c61\u7684\u201c\u65b9\u6cd5\u201d\uff0c\u6240\u4ee5 <code>ajaxData</code> \u5305\u542b\u4e24\u4e2a\u65b9\u6cd5 <code>onSuccess</code> \u548c <code>onFailure</code>\u3002</p> <p>\u5bf9\u8c61\u662f\u5f00\u653e\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u901a\u8fc7\u8d4b\u503c\u6765\u5411\u73b0\u6709\u5bf9\u8c61\u6dfb\u52a0\u65b0\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e0a\u9762\u5b9a\u4e49\u7684\u5bf9\u8c61 <code>pt</code>\uff0c\u4f60\u53ef\u4ee5\u8bf4\uff1a</p> <pre><code>pt.z = 84;\n</code></pre> <p>\u8fd9\u4e3a\u5bf9\u8c61\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u5c5e\u6027 <code>z</code>\uff0c\u521d\u59cb\u503c\u4e3a 84\u3002</p> <p>\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u3002\u6784\u9020\u51fd\u6570\u662f\u4e00\u4e2a\u4f7f\u7528 new \u8fd0\u7b97\u7b26\u8c03\u7528\u4ee5\u521b\u5efa\u5bf9\u8c61\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff1a</p> <pre><code>let now = new Date();\n</code></pre> <p>\u8fd9\u8c03\u7528\u4e86\u6784\u9020\u51fd\u6570 <code>Date()</code>\uff0c\u5b83\u662f JavaScript \u7684\u6807\u51c6\u90e8\u5206\u3002<code>Date</code> \u662f\u4e00\u4e2a\u7c7b\uff0c\"new Date()\" \u521b\u5efa\u4e86\u4e00\u4e2a <code>Date</code> \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u5f53\u4e0d\u5e26\u53c2\u6570\u8c03\u7528\u65f6\uff0c<code>new Date()</code> \u6784\u9020\u4e00\u4e2a\u8868\u793a\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4\u7684\u5bf9\u8c61\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 class \u5173\u952e\u5b57\u521b\u5efa\u65b0\u7c7b\u3002\u7c7b\u5b9a\u4e49\u5305\u542b\u4e00\u7cfb\u5217\u51fd\u6570\u5b9a\u4e49\uff0c\u8fd9\u4e9b\u51fd\u6570\u662f\u4e0d\u5e26 \"function\" \u5173\u952e\u5b57\u58f0\u660e\u7684\u3002\u7c7b\u5b9a\u4e49\u5e94\u8be5\u5305\u62ec\u4e00\u4e2a\u540d\u4e3a\u201cconstructor\u201d\u7684\u7279\u6b8a\u51fd\u6570\uff0c\u5b83\u4f5c\u4e3a\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u4f7f\u7528 new \u8fd0\u7b97\u7b26\u4e0e\u7c7b\u540d\u4e00\u8d77\u65f6\uff0c\u5b9e\u9645\u4e0a\u4f1a\u8c03\u7528\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u3002\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\uff0c\u4f7f\u7528\u7279\u6b8a\u53d8\u91cf this \u5f15\u7528\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u5e76\u901a\u8fc7\u5728\u6784\u9020\u51fd\u6570\u4e2d\u7ed9\u5b83\u4eec\u8d4b\u503c\u6765\u5411\u5bf9\u8c61\u6dfb\u52a0\u5c5e\u6027\u3002</p> <pre><code>class Point2D {\n    constructor(x = 0, y = 0) {\n        // \u6784\u9020\u4e00\u4e2a\u5177\u6709\u5c5e\u6027 x \u548c y \u7684 Point2D \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\n        // \uff08\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570 x \u548c y \u7684\u9ed8\u8ba4\u503c\u4e3a 0\u3002\uff09\n        if (typeof x !== \"number\" || typeof y !== \"number\")\n            throw new TypeError(\"The coordinates of a point must be numbers.\");\n        this.x = x;\n        this.y = y;\n    }\n    move(dx, dy) {\n        // \u5b9a\u4e49 move() \u65b9\u6cd5\u4f5c\u4e3a\u4efb\u4f55 Point2D \u5bf9\u8c61\u7684\u5c5e\u6027\u3002\n        this.x = this.x + dx;\n        this.y = this.y + dy;\n    }\n}\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u53ef\u4ee5\u521b\u5efa Point2D \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u4efb\u4f55\u8fd9\u6837\u7684\u5bf9\u8c61\u90fd\u5c06\u5177\u6709\u540d\u4e3a x \u548c y \u7684\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a\u540d\u4e3a move() \u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a</p> <pre><code>let p = new Point2D();  // p.x \u548c p.y \u90fd\u662f 0\u3002\nlet q = new Point2D(17, 42);  // q.x \u662f 17\uff0cq.y \u662f 42\u3002\nq.move(10, 20);  // q.x \u73b0\u5728\u662f 27\uff0cq.y \u73b0\u5728\u662f 62\u3002\nq.z = 1;  // \u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7ed9 q \u6dfb\u52a0\u65b0\u7684\u5c5e\u6027\u3002\n</code></pre> <p>\u4e00\u4e2a\u65b0\u7c7b\u53ef\u4ee5\u6269\u5c55\u4e00\u4e2a\u73b0\u6709\u7684\u7c7b\uff0c\u7136\u540e\u6210\u4e3a\u90a3\u4e2a\u7c7b\u7684\u201c\u5b50\u7c7b\u201d\u3002\u7136\u800c\uff0c\u8fd9\u4e2a\u9009\u9879\u5728\u8fd9\u91cc\u6ca1\u6709\u8986\u76d6\uff0c\u9664\u4e86\u4ee5\u4e0b\u7b80\u5355\u793a\u4f8b\uff1a</p> <pre><code>class Point3D extends Point2D {\n    constructor(x = 0, y = 0, z = 0) {\n        if (typeof z !== \"number\")\n            throw new TypeError(\"The coordinates of a point must be numbers.\");\n        super(x, y);  // \u8c03\u7528 Point2D \u7684\u6784\u9020\u51fd\u6570\uff1b\u521b\u5efa this.x \u548c this.y\u3002\n        this.z = z;  // \u5411\u5bf9\u8c61\u6dfb\u52a0\u5c5e\u6027 z\u3002\n    }\n    move(dx, dy, dz) { // \u8986\u76d6 move() \u65b9\u6cd5\u7684\u5b9a\u4e49\n        super.move(dx, dy);  // \u8c03\u7528\u8d85\u7c7b\u7684 move()\u3002\n        if (typeof dz !== \"undefined\") {\n            // \u5141\u8bb8 move() \u4ecd\u7136\u53ea\u4f7f\u7528\u4e24\u4e2a\u53c2\u6570\u88ab\u8c03\u7528\u3002\n            this.z = this.z + dz;\n        }\n    }\n}\n</code></pre> <p>\u6709\u5173\u7c7b\u548c\u5b50\u7c7b\u7684\u66f4\u5e7f\u6cdb\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 canvas2d/HierarchicalModel2D.html\u3002</p> <p>JavaScript \u4e2d\u7684 class \u5173\u952e\u5b57\u662f\u5728 ES6 \u4e2d\u65b0\u52a0\u5165\u7684\uff0c\u4f46 JavaScript \u5df2\u7ecf\u6709\u4e86\u7c7b\u7684\u6982\u5ff5\u3002\u7136\u800c\uff0c\u5728\u65e9\u671f\u7248\u672c\u7684 JavaScript \u4e2d\uff0c\u4e00\u4e2a\u7c7b\u7b80\u5355\u5730\u901a\u8fc7\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u6765\u5b9a\u4e49\uff0c\u800c\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u4f7f\u7528 \"new\" \u64cd\u4f5c\u7b26\u8c03\u7528\u7684\u51fd\u6570\u3002\u7531\u4e8e\u8fd9\u79cd\u7c7b\u4ecd\u7136\u5728\u4f7f\u7528\uff0c\u4e86\u89e3\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\u503c\u5f97\u7684\u3002</p> <p>\u6784\u9020\u51fd\u6570\u7684\u7f16\u5199\u65b9\u5f0f\u50cf\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff1b\u6309\u7167\u60ef\u4f8b\uff0c\u6784\u9020\u51fd\u6570\u7684\u540d\u79f0\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u3002\u6784\u9020\u51fd\u6570\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\uff0c\u5176\u540d\u79f0\u662f\u51fd\u6570\u7684\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6784\u9020\u51fd\u6570\u800c\u4e0d\u662f class \u5173\u952e\u5b57\u6765\u5b9a\u4e49 Point2D \u7c7b\uff1a</p> <pre><code>function Point2D(x, y) {\n    if (typeof x === \"number\") {\n        this.x = x;\n    } else {\n        this.x = 0;\n    }\n    if (typeof y === \"number\") {\n        this.y = y;\n    } else {\n        this.y = 0;\n    }\n    this.move = function(dx, dy) {\n        this.x = this.x + dx;\n        this.y = this.y + dy;\n    };\n}\n</code></pre> <p>\u5f53\u4f7f\u7528 new \u64cd\u4f5c\u7b26\u8c03\u7528\u65f6\uff0c\u5982 \"new Point2D(17,42)\"\uff0c\u8fd9\u4e2a\u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u5177\u6709 x\u3001y \u548c move \u5c5e\u6027\u7684\u5bf9\u8c61\u3002\u8fd9\u4e9b\u5c5e\u6027\u662f\u901a\u8fc7\u5728\u6784\u9020\u51fd\u6570\u4e2d\u7ed9 this.x\u3001this.y \u548c this.move \u5206\u914d\u503c\u6765\u521b\u5efa\u7684\u3002\u521b\u5efa\u7684\u5bf9\u8c61\u672c\u8d28\u4e0a\u4e0e\u4f7f\u7528\u4e0a\u8ff0\u5b9a\u4e49\u7684 Point2D \u7c7b\u521b\u5efa\u7684\u5bf9\u8c61\u76f8\u540c\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528\u7bad\u5934\u51fd\u6570\u5b9a\u4e49 move \u65b9\u6cd5\uff0c\u56e0\u4e3a\u5728\u7bad\u5934\u51fd\u6570\u7684\u4e3b\u4f53\u4e2d\uff0c\u7279\u6b8a\u53d8\u91cf \"this\" \u6ca1\u6709\u9002\u5f53\u5b9a\u4e49\u3002\uff09</p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d move \u65b9\u6cd5\u7684\u5b9a\u4e49\u5e76\u4e0d\u662f\u6700\u4f73\u65b9\u5f0f\u3002\u95ee\u9898\u662f\u6bcf\u4e2a Point2D \u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u5f97\u5230\u4e86\u81ea\u5df1\u7684 move \u526f\u672c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9a\u4e49 move \u7684\u4ee3\u7801\u4e3a\u6bcf\u4e2a\u521b\u5efa\u7684\u5bf9\u8c61\u90fd\u590d\u5236\u4e86\u4e00\u4efd\u3002\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u6240\u8c13\u7684\u51fd\u6570 Point2D \u7684 \"\u539f\u578b\"\uff08prototype\uff09\u3002</p> <p>\u8fd9\u53ef\u80fd\u8ba9\u6211\u4eec\u6df1\u5165\u4e86\u89e3 JavaScript \u7684\u7ec6\u8282\u6bd4\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u8981\u591a\uff0c\u4f46\u8fd9\u91cc\u662f\u5b83\u7684\u5de5\u4f5c\u539f\u7406\uff1a\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u539f\u578b\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u539f\u578b\u7684\u5c5e\u6027\u88ab\u8ba4\u4e3a\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u9664\u975e\u5bf9\u8c61\u6709\u540c\u540d\u7684\u81ea\u5df1\u7684\u5c5e\u6027\u3002\u5f53\u51e0\u4e2a\u5bf9\u8c61\u6709\u76f8\u540c\u7684\u539f\u578b\u65f6\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5171\u4eab\u539f\u578b\u7684\u5c5e\u6027\u3002\u73b0\u5728\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u901a\u8fc7\u6784\u9020\u51fd\u6570\u521b\u5efa\u65f6\uff0c\u6784\u9020\u51fd\u6570\u7684\u539f\u578b\u5c31\u6210\u4e3a\u5b83\u521b\u5efa\u7684\u65b0\u5bf9\u8c61\u7684\u539f\u578b\u3002\u8fd9\u610f\u5473\u7740\u6dfb\u52a0\u5230\u6784\u9020\u51fd\u6570\u539f\u578b\u7684\u5c5e\u6027\u5c06\u88ab\u8be5\u51fd\u6570\u521b\u5efa\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u5728\u6784\u9020\u51fd\u6570\u4e2d\u7ed9 this.move \u8d4b\u503c\uff0c\u800c\u662f\u53ef\u4ee5\u5728\u51fd\u6570 Point2D \u7684\u5b9a\u4e49\u4e4b\u5916\u8fd9\u6837\u505a\uff1a</p> <pre><code>Point2D.prototype.move = function(dx, dy) {\n    this.x = this.x + dx;\n    this.y = this.y + dy;\n};\n</code></pre> <p>\u539f\u578b\u7684\u5c5e\u6027\u7531\u6240\u6709 Point2D \u7c7b\u578b\u7684\u5bf9\u8c61\u5171\u4eab\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u539f\u578b\u4e2d\u6709\u4e00\u4e2a\u5355\u4e00\u7684 move \u526f\u672c\uff0c\u88ab\u6240\u6709\u8fd9\u6837\u7684\u5bf9\u8c61\u4f7f\u7528\u3002\u7ed3\u679c\u5c31\u662f\u4e00\u4e2a Point2D \u7c7b\uff0c\u672c\u8d28\u4e0a\u4e0e\u4f7f\u7528 class \u5173\u952e\u5b57\u5b9a\u4e49\u7684\u7c7b\u76f8\u540c\u3002</p> <p>An array in JavaScript is an object, which includes several methods for working with the array. The elements in an array can be of any type; in fact, different elements in the same array can have different types. An array value can be created as a list of values enclosed between square brackets, [ and ]. For example:</p> <pre><code>let A = [ 1, 2, 3, 4, 5 ];\nlet B = [ \"foo\", \"bar\" ];\nlet C = [];\n</code></pre> <p>The last line in this example creates an empty array, which initially has length zero. An array can also be created using a constructor that specifies the initial size of the array:</p> <pre><code>let D = new Array(100);  // space for 100 elements\n</code></pre> <p>Initially, the elements of D all have the value undefined.</p> <p>The length of an array is not fixed. (This makes JavaScript arrays more similar to Java ArrayLists than they are to Java or C arrays.) If A is an array, its current length is A.length. The push method can be used to add a new element to the end of an array, increasing its length by one: A.push(6). The pop method removes and returns the last item: A.pop(). In fact, it is legal to assign a value to an array element that does not yet exist:</p> <pre><code>let E = [ 1, 2, 3 ];  // E has length 3\nE[100] = 17;  // E now has length 101.\n</code></pre> <p>In this example, when a value is assigned to <code>E[100]</code>, the length of the array is increased to make it large enough to hold the new element.</p> <p>Modern JavaScript has an alternative version of the for loop that is particularly useful with arrays. It takes the form for (let v of A) ..., where A is an array and v is the loop control variable. In the body of the loop, the loop control variable takes on the value of each element of A in turn. Thus, to add up all the values in an array of numbers, you could say:</p> <pre><code>let total = 0;\nfor (let num of A) {\n    total = total + num; // num is one of the items in the array A.\n}\n</code></pre> <p>Because of their flexibility, standard JavaScript arrays are not very efficient for working with arrays of numbers. Modern web browsers define typed arrays for numerical applications. For example, an array of type Int32Array can only hold values that are 32-bit integers. Typed arrays are used extensively in WebGL; they are covered in this book when they are needed.</p> <p>JavaScript has objects and classes, although its classes are not exactly equivalent to those in Java or C++. For one thing, it is possible to have objects without classes. An object is essentially just a collection of key/value pairs, where a key is a name, like an instance variable or method name in Java, which has an associated value. The term \"instance variable\" is not usually used in JavaScript; the preferred term is \"property.\"</p> <p>The value of a property of an object can be an ordinary data value or a function (which is just another type of data value in JavaScript). It is possible to create an object as a list of key/value pairs, enclosed by { and }. For example,</p> <pre><code>let pt = { x: 17, y: 42 };\n\nlet ajaxData = {\n    url: \"http://some.place.org/ajax.php&amp;#34;,  \n    data: 42,\n    onSuccess: function () { alert(\"It worked!\"); },\n    onFailure: function (error) { alert(\"Sorry, it failed: \" + error); }\n};\n</code></pre> <p>With these definitions, pt is an object. It has properties pt.x, with value 17, and pt.y, with value 42. And ajaxData is another object with properties including ajaxData.url and ajaxData.onSuccess. The value of ajaxData.onSuccess is a function, created here as an anonymous function. A function that is part of an object is often referred to as a \"method\" of that object, so ajaxData contains two methods, onSuccess and onFailure.</p> <p>Objects are open in the sense that you can add a new property to an existing object at any time just by assigning a value. For example, given the object pt defined above, you can say</p> <pre><code>pt.z = 84;\n</code></pre> <p>This adds z as a new property of the object, with initial value 84.</p> <p>Objects can also be created using constructors. A constructor is a function that is called using the new operator to create an object. For example,</p> <pre><code>let now = new Date();\n</code></pre> <p>This calls the constructor Date(), which is a standard part of JavaScript. Date is a class, and \"new Date()\" creates an object of type Date. When called with no parameters, new Date() constructs an object that represents the current date and time.</p> <p>New classes can be created using the class keyword. A class definition contains a list of function definitions, which are declared without the \"function\" keyword. A class definition should include a special function named \"constructor\" that serves as the constructor for the class. This constructor function is actually called when the new operator is used with the name of the class. In the function definition, properties of the object are referred to using the special variable this, and properties are added to the object by assigning values to them in the constructor.</p> <pre><code>class Point2D {\n    constructor(x = 0,y = 0) {\n        // Construct an object of type Point2D with properties x and y.\n        // (The parameters x and y to the constructor have default value 0.)\n        if (typeof x !== \"number\" || typeof y !== \"number\")\n            throw new TypeError(\"The coordinates of a point must be numbers.\");\n        this.x = x;\n        this.y = y;\n    }\n    move(dx,dy) {\n        // Defines a move() method as a property of any Point2D object.\n        this.x = this.x + dx;\n        this.y = this.y + dy;\n    }\n}\n</code></pre> <p>With this definition, it is possible to create objects of type Point2D. Any such object will have properties named x and y, and a method named move(). For example:</p> <pre><code>let p = new Point2D();  // p.x and p.y are 0.\nlet q = new Point2D(17,42);  // q.x is 17, q.y is 42.\nq.move(10,20);  // q.x is now 27, and q.y is now 62.\nq.z = 1;  // We can still add new properties to q.\n</code></pre> <p>A new class can extend an existing class, and then becomes a \"subclass\" of that class. However, this option is not covered here, except for the following simple example:</p> <pre><code>class Point3D extends Point2D {\n    constructor(x = 0, y = 0, z = 0) {\n        if (typeof z !== \"number\")\n            throw new TypeError(\"The coordinates of a point must be numbers.\");\n        super(x,y);  // Call the Point2D constructor; creates this.x and this.y.\n        this.z = z;  // Add the property z to the object.\n    }\n    move(dx,dy,dz) { // Override the definition of the move() method\n        super.move(dx,dy);  // Call move() from the superclass.\n        if (typeof dz !== \"undefined\") {\n            // Allows move() to still be called with just two parameters.\n            this.z = this.z + dz;\n        }\n    }\n}\n</code></pre> <p>For a more extensive example of classes and subclasses, see canvas2d/HierarchicalModel2D.html.</p> <p>The class keyword was new in ES6, but JavaScript already had classes. However, in earlier versions of JavaScript, a class was simply defined by a constructor function, and a constructor function could be any function called with the \"new\" operator. Since this kind of class is still used, it is worthwhile to look at how it works.</p> <p>A constructor function is written like an ordinary function; by convention, the name of a constructor function begins with an upper case letter. A constructor function defines a class whose name is the name of the function. For example, let's see how to use a constructor function instead of the class keyword to define the class Point2D:</p> <pre><code>function Point2D(x,y) {\n    if ( typeof x === \"number\") {\n        this.x = x;\n    }\n    else {\n        this.x = 0;\n    }\n    if ( typeof y === \"number\" ) {\n        this.y = y;\n    }\n    else {\n        this.y = 0;\n    }\n    this.move = function(dx,dy) {\n        this.x = this.x + dx;\n        this.y = this.y + dy;\n    }\n}\n</code></pre> <p>When called with the new operator, as in \"new Point2D(17,42)\", this function creates an object that has properties x, y, and move. These properties are created by assigning values to this.x, this.y, and this.move in the constructor function. The object that is created is essentially the same as an object created using the Point2D class defined above. (One note: the move method could not be defined here using an arrow function, since the special variable \"this\" is not appropriately defined in the body of an arrow function.)</p> <p>The definition of the move method in this example is not done in the best way possible. The problem is that every object of type Point2D gets its own copy of move. That is, the code that defines move is duplicated for each object that is created. The solution is to use something called the \"prototype\" of the function Point2D.</p> <p>This might take us farther into the details of JavaScript than we really need to go, but here is how it works: Every object has a prototype, which is another object. Properties of the prototype are considered to be properties of the object, unless the object is given its own property of the same name. When several objects have the same prototype, those objects share the properties of the prototype. Now, when an object is created by a constructor function, the prototype of the constructor becomes the prototype of the new object that it creates. This means that properties that are added to the prototype of a constructor function are shared by all the objects that are created by that function. Thus, instead of assigning a value to this.move in the constructor function, we can do the following outside the definition of function Point2D:</p> <pre><code>Point2D.prototype.move = function(dx,dy) {\n    this.x = this.x + dx;\n    this.y = this.y + dy;\n}\n</code></pre> <p>The properties of the prototype are shared by all objects of type Point2D. In this case, there is a single copy of move in the prototype, which is used by all such objects. The result is then a Point2D class that is essentially the same as the class defined using the class keyword.</p>"},{"location":"cn/a1/s3/#a33-\u7f51\u9875\u4e0a\u7684-javascript","title":"A.3.3  \u7f51\u9875\u4e0a\u7684 JavaScript","text":"<p>A.3.3  JavaScript on Web Pages</p> \u4e2d\u6587\u82f1\u6587\u82f1\u6587 <p>\u5728\u7f51\u9875\u4e0a\uff08\u5373 HTML \u6587\u4ef6\u4e2d\uff09\u5305\u542b JavaScript \u4ee3\u7801\u6709\u4e09\u79cd\u65b9\u5f0f\u3002\u9996\u5148\uff0c\u4f60\u53ef\u4ee5\u5c06\u4ee3\u7801\u5305\u542b\u5728 <code>&lt;script&gt;</code> \u5143\u7d20\u5185\u90e8\uff0c\u5176\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>&lt;script&gt;\n    // ... JavaScript \u4ee3\u7801\u653e\u8fd9\u91cc ...\n&lt;/script&gt;\n</code></pre> <p>\u4f60\u6709\u65f6\u4f1a\u5728\u7b2c\u4e00\u884c\u770b\u5230 type \u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n</code></pre> <p>\u8be5\u5c5e\u6027\u6307\u5b9a\u4e86\u811a\u672c\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u7136\u800c\uff0c\"text/javascript\" \u662f\u9ed8\u8ba4\u503c\uff0c\u5bf9\u4e8e JavaScript \u811a\u672c\u5e76\u4e0d\u662f\u5fc5\u9700\u7684\u3002\uff08\u4f60\u53ef\u80fd\u8fd8\u4f1a\u770b\u5230 <code>&lt;script&gt;</code> \u5e26\u6709 <code>type=\"module\"</code>\uff0c\u8868\u793a\u4e00\u4e2a\u6a21\u5757\u5316\u7684 JavaScript \u7a0b\u5e8f\u3002\u6a21\u5757\u662f ES6 \u4e2d\u7684\u4e00\u4e2a\u65b0\u7279\u6027\u3002\u5b83\u4eec\u4f7f\u5f97\u5c06\u5927\u578b\u7a0b\u5e8f\u62c6\u5206\u6210\u7ec4\u4ef6\uff0c\u5e76\u63a7\u5236\u7ec4\u4ef6\u4e4b\u95f4\u53d8\u91cf\u7684\u5171\u4eab\u6210\u4e3a\u53ef\u80fd\u3002\u6a21\u5757\u5728 three.js 3D \u56fe\u5f62\u5e93\u4e2d\u4f7f\u7528\u3002\u5b83\u4eec\u5728\u5173\u4e8e three.js \u7684\u7ae0\u8282\u4e2d\u6709\u7b80\u8981\u4ecb\u7ecd\u3002\u672c\u4e66\u5176\u4ed6\u90e8\u5206\u6ca1\u6709\u4f7f\u7528\u3002\uff09</p> <p>\u7b2c\u4e8c\u79cd\u4f7f\u7528 JavaScript \u4ee3\u7801\u7684\u65b9\u5f0f\u662f\u5c06\u5176\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\uff0c\u6587\u4ef6\u540d\u901a\u5e38\u4ee5 \".js\" \u7ed3\u5c3e\uff0c\u5e76\u5c06\u8be5\u6587\u4ef6\u5bfc\u5165\u5230\u7f51\u9875\u4e2d\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684 <code>&lt;script&gt;</code> \u6807\u7b7e\u53d8\u4f53\u6765\u5bfc\u5165 JavaScript \u6587\u4ef6\uff1a</p> <pre><code>&lt;script src=\"filename.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\u8fd9\u91cc\u7684 \"filename.js\" \u5e94\u8be5\u66ff\u6362\u4e3a JavaScript \u6587\u4ef6\u7684 URL\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84\u3002\u8fd9\u91cc\u9700\u8981\u95ed\u5408\u6807\u7b7e <code>&lt;/script&gt;</code> \u6765\u6807\u8bb0\u811a\u672c\u7684\u7ed3\u675f\uff0c\u5373\u4f7f\u811a\u672c\u5143\u7d20\u5185\u90e8\u4e0d\u5141\u8bb8\u6709\u4efb\u4f55\u4ee3\u7801\u3002\uff08\u5982\u679c\u4f60\u8fd9\u6837\u505a\u4e86\uff0c\u5b83\u5c06\u88ab\u5ffd\u7565\u3002\uff09\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4ece\u6587\u4ef6\u4e2d\u5bfc\u5165 JavaScript \u4ee3\u7801\u4e0e\u76f4\u63a5\u5c06\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u952e\u5165\u7f51\u9875\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\u3002</p> <p>\u4e24\u79cd\u7c7b\u578b\u7684\u811a\u672c\u5143\u7d20\u901a\u5e38\u5305\u542b\u5728 HTML \u6587\u4ef6\u7684 <code>&lt;head&gt;</code> \u90e8\u5206\uff0c\u4f46\u5b83\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5728\u6587\u4ef6\u7684\u4efb\u4f55\u4f4d\u7f6e\u51fa\u73b0\u3002\u4f60\u53ef\u4ee5\u5728\u540c\u4e00\u9875\u9762\u4e0a\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u811a\u672c\u5143\u7d20\u3002\u811a\u672c\u53ef\u4ee5\u5305\u62ec\u8bf8\u5982\u51fd\u6570\u8c03\u7528\u548c\u8d4b\u503c\u8bed\u53e5\u7b49\u8bed\u53e5\uff0c\u4ee5\u53ca\u53d8\u91cf\u548c\u51fd\u6570\u58f0\u660e\u3002</p> <p>\u5728\u7f51\u9875\u4e0a\u4f7f\u7528 JavaScript \u7684\u7b2c\u4e09\u79cd\u65b9\u5f0f\u662f\u5728 HTML \u5143\u7d20\u5185\u90e8\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u4e2d\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>&lt;h1 onclick=\"doClick()\"&gt;\u6211\u7684\u7f51\u9875&lt;/h1&gt;\n</code></pre> <p>\u8fd9\u91cc\uff0conclick \u5c5e\u6027\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u5f53\u7528\u6237\u70b9\u51fb <code>&lt;h1&gt;</code> \u5143\u7d20\u7684\u6587\u672c\u65f6\u5c06\u6267\u884c\u8be5\u5904\u7406\u5668\u3002\u4e8b\u4ef6\u5904\u7406\u5668\u5c5e\u6027\uff08\u5982 onclick\uff09\u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55 JavaScript \u4ee3\u7801\u3002\u5b83\u53ef\u4ee5\u5305\u62ec\u591a\u4e2a\u7528\u5206\u53f7\u5206\u9694\u7684\u8bed\u53e5\uff0c\u751a\u81f3\u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u3002\u8fd9\u91cc\uff0c\u4ee3\u7801\u662f \"doClick()\"\uff0c\u6240\u4ee5\u70b9\u51fb <code>&lt;h1&gt;</code> \u5143\u7d20\u5c06\u5bfc\u81f4\u8c03\u7528 JavaScript \u51fd\u6570 doClick()\u3002\u6211\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u8fd9\u662f\u5c06\u4e8b\u4ef6\u5904\u7406\u5668\u9644\u52a0\u5230\u5143\u7d20\u7684\u4e00\u79cd\u8fc7\u65f6\u65b9\u5f0f\uff0c\u4e0d\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u6700\u4f73\u98ce\u683c\u3002\u6211\u5c06\u5728\u540e\u9762\u63d0\u5230\u66ff\u4ee3\u65b9\u6848\u3002\u7136\u800c\uff0c\u6211\u6709\u65f6\u4e5f\u4f1a\u4ee5\u8001\u5f0f\u7684\u65b9\u5f0f\u505a\u4e8b\u3002</p> <p>\u7406\u89e3\u6240\u6709\u5728 <code>&lt;script&gt;</code> \u5143\u7d20\u4e2d\u7684 JavaScript \u4ee3\u7801\uff0c\u5305\u62ec\u5bfc\u5165\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\uff0c\u5728\u9875\u9762\u52a0\u8f7d\u65f6\u88ab\u8bfb\u53d6\u548c\u6267\u884c\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b\u811a\u672c\u4e2d\u7684\u5927\u90e8\u5206\u4ee3\u7801\u7531\u53d8\u91cf\u521d\u59cb\u5316\u548c\u5b9a\u4e49\u51fd\u6570\u7ec4\u6210\uff0c\u8fd9\u4e9b\u51fd\u6570\u65e8\u5728\u5728\u9875\u9762\u52a0\u8f7d\u540e\u88ab\u8c03\u7528\uff0c\u4ee5\u54cd\u5e94\u4e8b\u4ef6\u3002\u6b64\u5916\uff0c\u9875\u9762\u4e0a\u7684\u6240\u6709\u811a\u672c\u90fd\u662f\u540c\u4e00\u4e2a\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u811a\u672c\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u6216\u51fd\u6570\uff0c\u751a\u81f3\u5728\u4e00\u4e2a\u5bfc\u5165\u7684\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u811a\u672c\u4e2d\u4f7f\u7528\u5b83\u3002</p> <p>JavaScript \u4e3a\u7f51\u9875\u63d0\u4f9b\u4e86\u51e0\u79cd\u6807\u51c6\u51fd\u6570\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528\u5bf9\u8bdd\u6846\u4e0e\u7528\u6237\u4ea4\u4e92\u3002\u5176\u4e2d\u6700\u7b80\u5355\u7684\u662f alert(message)\uff0c\u5b83\u5c06\u5728\u5f39\u51fa\u5bf9\u8bdd\u6846\u4e2d\u5411\u7528\u6237\u663e\u793a message\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u7528\u6237\u53ef\u4ee5\u70b9\u51fb\u8be5\u6309\u94ae\u5173\u95ed\u6d88\u606f\u3002</p> <p>\u51fd\u6570 prompt(question) \u5c06\u5728\u5bf9\u8bdd\u6846\u4e2d\u663e\u793a\u95ee\u9898\uff0c\u65c1\u8fb9\u6709\u4e00\u4e2a\u8f93\u5165\u5b57\u6bb5\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u5176\u4e2d\u8f93\u5165\u54cd\u5e94\u3002prompt \u51fd\u6570\u5c06\u5176\u8fd4\u56de\u503c\u4f5c\u4e3a\u7528\u6237\u7684\u54cd\u5e94\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u5bf9\u8bdd\u6846\u5e26\u6709\u201c\u786e\u5b9a\u201d\u6309\u94ae\u548c\u201c\u53d6\u6d88\u201d\u6309\u94ae\u3002\u5982\u679c\u7528\u6237\u70b9\u51fb\u201c\u53d6\u6d88\u201d\uff0c\u5219 prompt \u7684\u8fd4\u56de\u503c\u4e3a null\u3002\u5982\u679c\u7528\u6237\u70b9\u51fb\u201c\u786e\u5b9a\u201d\uff0c\u5219\u8fd4\u56de\u503c\u662f\u8f93\u5165\u5b57\u6bb5\u4e2d\u7684\u5185\u5bb9\uff08\u53ef\u80fd\u662f\u7a7a\u5b57\u7b26\u4e32\uff09\u3002</p> <p>\u51fd\u6570 confirm(question) \u4f1a\u5728\u5bf9\u8bdd\u6846\u4e2d\u663e\u793a\u95ee\u9898\uff0c\u65c1\u8fb9\u6709\u201c\u786e\u5b9a\u201d\u548c\u201c\u53d6\u6d88\u201d\u6309\u94ae\u3002\u8fd4\u56de\u503c\u662f true \u6216 false\uff0c\u53d6\u51b3\u4e8e\u7528\u6237\u70b9\u51fb\u201c\u786e\u5b9a\u201d\u8fd8\u662f\u201c\u53d6\u6d88\u201d\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\u8fdb\u884c\u7528\u6237\u4ea4\u4e92\u7684\u7b80\u5355\u731c\u6570\u6e38\u620f\u793a\u4f8b\uff1a</p> <pre><code>alert(\"\u6211\u5c06\u9009\u62e9\u4e00\u4e2a 1 \u5230 100 \u4e4b\u95f4\u7684\u6570\u5b57\u3002\\n\"\n    + \"\u8bd5\u7740\u731c\u731c\u770b\uff01\");\n\ndo {\n    let number = Math.floor(1 + 100 * Math.random());\n    let guesses = 1;\n    let guess = Number(prompt(\"\u731c\u731c\u770b\u662f\u4ec0\u4e48\uff1f\"));\n    while (guess !== number) {\n        if (isNaN(guess) || guess &lt; 1 || guess &gt; 100) { \n            guess = Number(prompt(\"\u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570\\n\"\n                            + \"\u8303\u56f4\u5728 1 \u5230 100 \u4e4b\u95f4\"));\n        }\n        else if (guess &lt; number) {\n            guess = Number(prompt(\"\u592a\u4f4e\u4e86\u3002\u518d\u8bd5\u4e00\u6b21\uff01\"));\n            guesses++;\n        }\n        else {\n            guess = Number(prompt(\"\u592a\u9ad8\u4e86\u3002\u518d\u8bd5\u4e00\u6b21\uff01\"));\n            guesses++;\n        }\n    }\n    alert(\"\u4f60\u5728 \" + guesses + \" \u6b21\u731c\u6d4b\u4e2d\u627e\u5230\u4e86\u3002\");\n\n} while (confirm(\"\u518d\u73a9\u4e00\u6b21\uff1f\"));\n</code></pre> <p>\uff08\u8be5\u7a0b\u5e8f\u4f7f\u7528 Number() \u5c06\u7528\u6237\u7684\u54cd\u5e94\u8f6c\u6362\u4e3a\u6570\u5b57\u3002\u5982\u679c\u54cd\u5e94\u4e0d\u80fd\u89e3\u6790\u4e3a\u6570\u5b57\uff0c\u5219\u8be5\u503c\u5c06\u4e3a\u975e\u6570\u5b57\u503c NaN\u3002isNaN(guess) \u51fd\u6570\u7528\u4e8e\u68c0\u67e5 guess \u7684\u503c\u662f\u5426\u4e3a\u8fd9\u4e2a\u7279\u6b8a\u7684\u975e\u6570\u5b57\u503c\u3002\u4e0d\u80fd\u901a\u8fc7\u8bf4 \"if (guess === NaN)\" \u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u8868\u8fbe\u5f0f NaN === NaN \u6c42\u503c\u4e3a false\uff01\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u5728 Java \u4e2d\u4e5f\u662f\u5982\u6b64\u3002\uff09</p> <p>\u60a8\u53ef\u4ee5\u5728\u8bb8\u591a\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u63d0\u4f9b\u7684 JavaScript \u63a7\u5236\u53f0\u4e2d\u5c1d\u8bd5 JavaScript \u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u5728 Chrome \u6d4f\u89c8\u5668\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u83dc\u5355\u4e0b\u7684\u201c\u66f4\u591a\u5de5\u5177\u201d/\u201c\u5f00\u53d1\u8005\u5de5\u5177\u201d\u8bbf\u95ee\u63a7\u5236\u53f0\uff0c\u7136\u540e\u70b9\u51fb\u5f00\u53d1\u8005\u5de5\u5177\u4e2d\u7684\u201c\u63a7\u5236\u53f0\u201d\u6807\u7b7e\u3002\u8fd9\u5c06\u5728 Chrome \u7a97\u53e3\u5e95\u90e8\u663e\u793a\u7f51\u7edc\u63a7\u5236\u53f0\uff0c\u6709\u4e00\u4e2a JavaScript \u8f93\u5165\u63d0\u793a\u7b26\u3002\u63a7\u5236\u53f0\u4e5f\u53ef\u4ee5\u5206\u79bb\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u7a97\u53e3\u3002\u5f53\u60a8\u8f93\u5165\u4e00\u884c JavaScript \u5e76\u6309\u56de\u8f66\u65f6\uff0c\u5b83\u5c06\u88ab\u6267\u884c\uff0c\u5176\u503c\u5c06\u5728\u63a7\u5236\u53f0\u4e2d\u8f93\u51fa\u3002\u4ee3\u7801\u5728\u5f53\u524d\u7f51\u9875\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fdb\u884c\u8bc4\u4f30\uff0c\u6240\u4ee5\u60a8\u751a\u81f3\u53ef\u4ee5\u8f93\u5165\u5f71\u54cd\u8be5\u9875\u9762\u7684\u547d\u4ee4\u3002Web \u63a7\u5236\u53f0\u8fd8\u663e\u793a\u5728\u6267\u884c\u5f53\u524d\u7f51\u9875\u4e0a\u7684\u4ee3\u7801\u65f6\u53d1\u751f\u7684 JavaScript \u9519\u8bef\uff0c\u5e76\u4e14 JavaScript \u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 console.log(message) \u5411\u63a7\u5236\u53f0\u5199\u5165\u6d88\u606f\u3002\u6240\u6709\u8fd9\u4e9b\u4f7f\u63a7\u5236\u53f0\u975e\u5e38\u9002\u5408\u8c03\u8bd5\u3002\uff08\u6d4f\u89c8\u5668\u5de5\u5177\u8fd8\u5305\u62ec\u4e00\u4e2a\u590d\u6742\u7684 JavaScript \u7a0b\u5e8f\u8c03\u8bd5\u5668\u3002\uff09</p> <p>\u5176\u4ed6\u6d4f\u89c8\u5668\u4e5f\u6709\u7c7b\u4f3c\u7684\u5f00\u53d1\u8005\u5de5\u5177\u3002\u5728 Firefox \u4e2d\u7684 JavaScript \u63a7\u5236\u53f0\uff0c\u53ef\u4ee5\u5728\u83dc\u5355\u4e2d\u627e\u5230\u201cWeb \u5f00\u53d1\u8005\u5de5\u5177\u201d\u4e0b\u7684\u201cWeb \u5f00\u53d1\u8005\u201d\u3002\u5728 Safari \u6d4f\u89c8\u5668\u4e2d\uff0c\u4f7f\u7528\u201c\u5f00\u53d1\u201d\u83dc\u5355\u4e2d\u7684\u201c\u663e\u793a JavaScript \u63a7\u5236\u53f0\u201d\uff08\u4f46\u8bf7\u6ce8\u610f\uff0c\u5728 Safari \u9996\u9009\u9879\u4e2d\u7684\u201c\u9ad8\u7ea7\u201d\u6807\u7b7e\u4e0b\u5fc5\u987b\u542f\u7528\u201c\u5f00\u53d1\u201d\u83dc\u5355\uff09\u3002\u5728 Edge \u6d4f\u89c8\u5668\u4e2d\uff0c\u901a\u8fc7\u6309 F12 \u952e\u8bbf\u95ee\u201c\u5f00\u53d1\u8005\u5de5\u5177\u201d\u3002</p> <p>\u5f53\u7f51\u9875\u4e0a\u53d1\u751f\u9519\u8bef\u65f6\uff0c\u9664\u4e86\u63a7\u5236\u53f0\u4e2d\u7684\u4e00\u4e9b\u8f93\u51fa\u5916\uff0c\u60a8\u4e0d\u4f1a\u6536\u5230\u4efb\u4f55\u901a\u77e5\u3002\u6240\u4ee5\uff0c\u5982\u679c\u60a8\u7684\u811a\u672c\u4f3c\u4e4e\u4e0d\u8d77\u4f5c\u7528\uff0c\u60a8\u5e94\u8be5\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u6253\u5f00\u63a7\u5236\u53f0\u5e76\u67e5\u627e\u9519\u8bef\u6d88\u606f\u3002\u5f53\u60a8\u8fdb\u884c JavaScript \u5f00\u53d1\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u59cb\u7ec8\u4fdd\u6301\u63a7\u5236\u53f0\u6253\u5f00\u3002</p> <p>There are three ways to include JavaScript code on web pages (that is, in HTML files). First, you can include it inside <code>&lt;script&gt;</code> elements, which have the form</p> <pre><code>&lt;script&gt;\n\n    // ... JavaScript code goes here ...\n\n&lt;/script&gt;\n</code></pre> <p>You will sometimes see a type attribute in the first line, as in</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n</code></pre> <p>The attribute specifies the programming language used for the script. However, the value \"text/javascript\" is the default and the type attribute is not required for JavaScript scripts. ()You might also see a <code>&lt;script&gt;</code> with <code>type=\"module\"</code>, indicating a modular JavaScript program. Modules were a new feature in ES6. They make it possible to break up a large program into components and control the sharing of variables between components. Modules are used in the three.js 3D graphics library. They are covered briefly in the chapter on three.js. They are not used elsewhere in this textbook.)</p> <p>The second way to use JavaScript code is to put it in a separate file, usually with a name ending with \".js\", and import that file into the web page. A JavaScript file can be imported using a variation of the <code>&lt;script&gt;</code> tag that has the form</p> <pre><code>&lt;script src=\"filename.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where \"filename.js\" should be replaced by the URL, relative or absolute, of the JavaScript file. The closing tag, <code>&lt;/script&gt;</code>, is required here to mark the end of the script, even though it is not permitted to have any code inside the script element. (If you do, it will be ignored.) Importing JavaScript code from a file in this way has the same effect as typing the code from the file directly into the web page.</p> <p>Script elements of either type are often included in the <code>&lt;head&gt;</code> section of an HTML file, but they actually occur at any point in the file. You can use any number of script elements on the same page. A script can include statements such as function calls and assignment statements, as well as variable and function declarations.</p> <p>The third way to use JavaScript on a web page is in event handlers that can occur inside HTML elements. For example, consider</p> <pre><code>&lt;h1 onclick=\"doClick()\"&gt;My Web Page&lt;/h1&gt;\n</code></pre> <p>Here, the onclick attribute defines an event handler that will be executed when the user clicks on the text of the <code>&lt;h1&gt;</code> element. The value of an event handler attribute such as onclick can be any JavaScript code. It can include multiple statements, separated by semicolons, and can even extend over several lines. Here, the code is \"doClick()\", so that clicking the <code>&lt;h1&gt;</code> element will cause the JavaScript function doClick() to be called. I should note that this is an old-fashioned way to attach an event handler to an element, and it should not be considered best style. There are alternatives that I will mention later. Nevertheless, I sometimes do things the old-fashioned way.</p> <p>It is important to understand that all the JavaScript code in <code>&lt;script&gt;</code> elements, including code in imported files, is read and executed as the page is being loaded. Usually, most of the code in such scripts consists of variable initializations and the definitions of functions that are meant to be called after the page has loaded, in response to events. Furthermore, all the scripts on a page are part of the same program. For example, you can define a variable or function in one script, even in an imported file, and then use it in another script.</p> <p>JavaScript for web pages has several standard functions that allow you to interact with the user using dialog boxes. The simplest of these is alert(message), which will display message to the user in a popup dialog box, with an \"OK\" button that the user can click to dismiss the message.</p> <p>The function prompt(question) will display question in a dialog box, along with an input field where the user can enter a response. The prompt function returns the user's response as its return value. This type of dialog box comes with an \"OK\" button and with a \"Cancel\" button. If the user hits \"Cancel\", the return value from prompt is null. If the user hits \"OK\", the return value is the content of the input field (which might be the empty string).</p> <p>The function confirm(question) displays question in a dialog box along with \"OK\" and \"Cancel\" buttons. The return value is true or false, depending on whether the user hits \"OK\" or \"Cancel\".</p> <p>Here, for example, is a simple guessing game that uses these functions for user interaction:</p> <pre><code>alert(\"I will pick a number between 1 and 100.\\n\"\n        + \"Try to guess it!\");\n\ndo {\n\n    let number = Math.floor( 1 + 100*Math.random() );\n    let guesses = 1;\n    let guess = Number( prompt(\"What's your guess?\") );\n    while (guess !== number ) {\n        if ( isNaN(guess) || guess &lt; 1 || guess &gt; 100 ) { \n            guess = Number( prompt(\"Please enter an integer\\n\" +\n                            \"in the range 1 to 100\") );\n        }\n        else if (guess &lt; number) {\n            guess = Number( prompt(\"Too low.  Try again!\") );\n            guesses++;\n        }\n        else {\n            guess = Number( prompt(\"Too high.  Try again!\") );\n            guesses++;\n        }\n    }\n    alert(\"You got it in \" + guesses + \" guesses.\");\n\n} while ( confirm(\"Play again?\") );\n</code></pre> <p>(This program uses Number() to convert the user's response to a number. If the response cannot be parsed as a number, then the value will be the not-a-number value NaN. The function isNaN(guess) is used to check whether the value of guess is this special not-a-number value. It's not possible to do that by saying \"if (guess === NaN)\" since the expression NaN === NaN evaluates to false! The same, by the way, is true of the not-a-number value in Java.)</p> <p>You can try out JavaScript code in the JavaScript consoles that are available in many web browsers. In the Chrome browser, for example, you can access a console in the menu under \"More Tools\" / \"Developer Tools\", then click the \"Console\" tab in the developer tools. This will show the web console at the bottom of the Chrome window, with a JavaScript input prompt. The console can also be detached into a separate window. When you type a line of JavaScript and press return, it is executed, and its value is output in the console. The code is evaluated in the context of the current web page, so you can even enter commands that affect that page. The Web console also shows JavaScript errors that occur when code on the current web page is executed, and JavaScript code can write a message to the console by calling console.log(message). All this makes the console very useful for debugging. (Browser tools also include a sophisticated JavaScript program debugger.)</p> <p>Other browsers have similar developer tools. For the JavaScript console in Firefox, look for \"Web Developer Tools\" under \"Web Developer\" in the menu. In the Safari browser, use \"Show JavaScript Console\" in the \"Develop\" menu (but note that the Develop menu has to be enabled in the Safari Preferences, under the \"Advanced\" tab). In the Edge browser, access \"Developer Tools\" by hitting the F12 key.</p> <p>When an error occurs on a web page, you don't get any notification, except for some output in the console. So, if your script doesn't seem to be working, the first thing you should do is open the console and look for an error message. When you are doing JavaScript development, you might want to keep the console always open.</p>"},{"location":"cn/a1/s3/#a34-\u4e0e\u9875\u9762\u4ea4\u4e92","title":"A.3.4  \u4e0e\u9875\u9762\u4ea4\u4e92","text":"<p>A.3.4  Interacting with the Page</p> \u4e2d\u6587\u82f1\u6587 <p>\u7f51\u9875\u4e0a\u7684 JavaScript \u4ee3\u7801\u53ef\u4ee5\u64cd\u4f5c\u8be5\u9875\u9762\u7684\u5185\u5bb9\u548c\u6837\u5f0f\u3002\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a DOM\uff08\u6587\u6863\u5bf9\u8c61\u6a21\u578b\uff09\u3002\u5f53\u4e00\u4e2a\u7f51\u9875\u88ab\u52a0\u8f7d\u65f6\uff0c\u9875\u9762\u4e0a\u7684\u6240\u6709\u5185\u5bb9\u90fd\u88ab\u7f16\u7801\u6210\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7531 DOM \u5b9a\u4e49\uff0c\u53ef\u4ee5\u4ece JavaScript \u8bbf\u95ee\u4e3a\u5bf9\u8c61\u96c6\u5408\u3002\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4f46\u6211\u5c06\u53ea\u8ba8\u8bba\u4e00\u79cd\uff1adocument.getElementById\u3002\u7f51\u9875\u4e0a\u7684\u4efb\u4f55\u5143\u7d20\u90fd\u53ef\u4ee5\u6709\u4e00\u4e2a id \u5c5e\u6027\u3002\u4f8b\u5982\uff1a</p> <pre><code>&lt;img src=\"somepicture.jpg\" id=\"pic\"&gt;\n</code></pre> <p>\u6216\u8005</p> <pre><code>&lt;h1 id=\"mainhead\"&gt;\u6211\u7684\u9875\u9762&lt;/h1&gt;\n</code></pre> <p>id \u5e94\u8be5\u662f\u9875\u9762\u4e0a\u552f\u4e00\u7684\uff0c\u4ee5\u4fbf\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u5176 id \u88ab\u552f\u4e00\u6807\u8bc6\u3002\u4efb\u4f55\u5143\u7d20\u90fd\u7531\u4e00\u4e2a DOM \u5bf9\u8c61\u8868\u793a\u3002\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u6709\u4e00\u4e2a id\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06 id \u4f20\u9012\u7ed9\u51fd\u6570 document.getElementById \u6765\u83b7\u5f97\u5bf9\u76f8\u5e94 DOM \u5bf9\u8c61\u7684\u5f15\u7528\u3002\u4f8b\u5982\uff1a</p> <pre><code>let image = document.getElementById(\"pic\");\nlet heading = document.getElementById(\"mainhead\");\n</code></pre> <p>\u4e00\u65e6\u4f60\u6709\u4e86 DOM \u5bf9\u8c61\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u64cd\u4f5c\u5b83\u6240\u4ee3\u8868\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5143\u7d20\u7684\u5185\u5bb9\u7531\u5bf9\u8c61\u7684 innerHTML \u5c5e\u6027\u7ed9\u51fa\u3002\u8fd9\u4e2a\u503c\u662f\u4e00\u4e2a\u5305\u542b\u6587\u672c\u6216 HTML \u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0cheading.innerHTML \u7684\u503c\u662f\u5b57\u7b26\u4e32 \"\u6211\u7684\u9875\u9762\"\u3002\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u7ed9\u8fd9\u4e2a\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u6837\u505a\u4f1a\u6539\u53d8\u5143\u7d20\u7684\u5185\u5bb9\u3002\u4f8b\u5982\uff1a</p> <pre><code>heading.innerHTML = \"\u6700\u597d\u7684\u9875\u9762\uff01\";\n</code></pre> <p>\u8fd9\u4e0d\u4ec5\u6539\u53d8\u4e86\u5bf9\u8c61\u4e2d\u7684\u5c5e\u6027\u503c\uff1b\u5b83\u5b9e\u9645\u4e0a\u6539\u53d8\u4e86\u7f51\u9875\u4e0a\u663e\u793a\u7684\u6587\u672c\uff01\u5bf9\u4e8e\u521a\u63a5\u89e6 JavaScript \u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u5947\u602a\uff08\u751a\u81f3\u6709\u70b9\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\uff09\uff1a\u8fd9\u662f\u4e00\u4e2a\u5e26\u6709\u526f\u4f5c\u7528\u7684\u8d4b\u503c\u8bed\u53e5\u3002\u4f46\u8fd9\u5c31\u662f DOM \u7684\u5de5\u4f5c\u539f\u7406\u3002\u5bf9\u4ee3\u8868\u7f51\u9875\u7684 DOM \u6570\u636e\u7ed3\u6784\u7684\u66f4\u6539\u5b9e\u9645\u4e0a\u4f1a\u4fee\u6539\u9875\u9762\u5e76\u6539\u53d8\u5b83\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u7684\u663e\u793a\u3002</p> <p>\u5143\u7d20\u7684\u4e00\u4e9b\u5c5e\u6027\u53d8\u6210\u4e86\u4ee3\u8868\u5b83\u4eec\u7684\u5c5e\u6027\u3002\u8fd9\u5bf9\u4e8e\u56fe\u50cf\u5143\u7d20\u7684 src \u5c5e\u6027\u6765\u8bf4\u662f\u6b63\u786e\u7684\uff0c\u6240\u4ee5\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8bf4\uff1a</p> <pre><code>image.src = \"anotherpicture.jpg\";\n</code></pre> <p>\u8fd9\u5c06\u6539\u53d8\u56fe\u50cf\u5143\u7d20\u7684\u6765\u6e90\u3002\u540c\u6837\uff0c\u8fd9\u662f\u4e00\u4e2a\u201c\u5b9e\u65f6\u201d\u8d4b\u503c\uff1a\u5f53\u6267\u884c\u8d4b\u503c\u8bed\u53e5\u65f6\uff0c\u7f51\u9875\u4e0a\u7684\u56fe\u50cf\u4f1a\u6539\u53d8\u3002</p> <p>\u5bf9\u4e8e\u719f\u6089 CSS \u7684\u8bfb\u8005\uff0c\u8bf7\u6ce8\u610f\uff0c\u5143\u7d20\u7684 DOM \u5bf9\u8c61\u6709\u4e00\u4e2a\u540d\u4e3a style \u7684\u5c5e\u6027\uff0c\u5b83\u672c\u8eab\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ee3\u8868\u5bf9\u8c61\u7684 CSS \u6837\u5f0f\u3002style \u5bf9\u8c61\u5177\u6709 color\u3001backgroundColor \u548c fontSize \u7b49\u5c5e\u6027\uff0c\u4ee3\u8868 CSS \u5c5e\u6027\u3002\u901a\u8fc7\u7ed9\u8fd9\u4e9b\u5c5e\u6027\u8d4b\u503c\uff0c\u4f60\u53ef\u4ee5\u6539\u53d8\u9875\u9762\u4e0a\u5143\u7d20\u7684\u5916\u89c2\u3002\u4f8b\u5982\uff0c</p> <pre><code>heading.style.color = \"red\";\nheading.style.fontSize = \"150%\";\n</code></pre> <p>\u8fd9\u4e9b\u547d\u4ee4\u5c06\u4f7f <code>&lt;h1&gt;</code> \u5143\u7d20\u4e2d\u7684\u6587\u672c\u53d8\u4e3a\u7ea2\u8272\uff0c\u5e76\u4e14\u6bd4\u901a\u5e38\u5927 50%\u3002style \u5c5e\u6027\u7684\u503c\u5fc5\u987b\u662f\u5bf9\u4e8e\u76f8\u5e94\u7684 CSS \u6837\u5f0f\u6765\u8bf4\u662f\u4e00\u4e2a\u5408\u6cd5\u503c\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5728\u7f51\u9875\u7684 HTML \u6e90\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u6709\u4ee5\u4e0b\u8f93\u5165\u5143\u7d20\uff1a</p> <pre><code>&lt;input type=\"text\" id=\"textin\"&gt;\n\n&lt;select id=\"sel\"&gt;\n    &lt;option value=\"1\"&gt;\u9009\u9879 1&lt;/option&gt;\n    &lt;option value=\"2\"&gt;\u9009\u9879 2&lt;/option&gt;\n    &lt;option value=\"3\"&gt;\u9009\u9879 3&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;input type=\"checkbox\" id=\"cbox\"&gt;\n</code></pre> <p>\u5728 JavaScript \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6\u8fd9\u4e9b\u5143\u7d20\u7684\u5f15\u7528\uff1a</p> <pre><code>let textin = document.getElementById(\"textin\");\nlet sel = document.getElementById(\"sel\");\nlet checkbox = document.getElementById(\"cbox\");\n</code></pre> <p>\u7136\u540e\uff0c\u5c5e\u6027 checkbox.checked \u7684\u503c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u590d\u9009\u6846\u662f\u5426\u88ab\u9009\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u7ed9 checkbox.checked \u8d4b\u503c\u4e3a true \u6216 false \u6765\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u9009\u4e2d\u6216\u53d6\u6d88\u9009\u4e2d\u8be5\u6846\u3002\u5c5e\u6027 checkbox.disabled \u7684\u503c\u4e5f\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u590d\u9009\u6846\u662f\u5426\u88ab\u7981\u7528\uff08\u7528\u6237\u4e0d\u80fd\u66f4\u6539\u88ab\u7981\u7528\u7684\u590d\u9009\u6846\u7684\u503c\uff09\u3002\u540c\u6837\uff0c\u4f60\u53ef\u4ee5\u6d4b\u8bd5\u5e76\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u3002\u5c5e\u6027 sel.disabled \u548c textin.disabled \u5bf9 <code>&lt;select&gt;</code> \u83dc\u5355\u548c\u6587\u672c\u8f93\u5165\u6846\u4e5f\u6709\u76f8\u540c\u7684\u529f\u80fd\u3002\u5c5e\u6027 textin.value \u548c sel.value \u5206\u522b\u4ee3\u8868\u8fd9\u4e9b\u5143\u7d20\u7684\u5f53\u524d\u503c\u3002\u6587\u672c\u8f93\u5165\u7684\u503c\u662f\u5f53\u524d\u5728\u6846\u4e2d\u7684\u6587\u672c\u3002<code>&lt;select&gt;</code> \u5143\u7d20\u7684\u503c\u662f\u5f53\u524d\u9009\u4e2d\u7684\u9009\u9879\u7684\u503c\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u6587\u672c\u8f93\u5165\u6846\u548c\u6309\u94ae\u5b9e\u73b0\u731c\u6570\u6e38\u620f\u7684\u5b8c\u6574\u7f51\u9875\u6e90\u4ee3\u7801\uff1a</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;\u731c\u6570\u6e38\u620f&lt;/title&gt;\n    &lt;script&gt;\n        \"use strict\";\n        let number = Math.floor(1 + 100 * Math.random());\n        let guessCount = 0;\n        let guessMessage = \"\u4f60\u76ee\u524d\u7684\u731c\u6d4b\uff1a\";\n        function guess() {\n            let userNumber = Number(document.getElementById(\"guess\").value);\n            document.getElementById(\"guess\").value = \"\";\n            if (isNaN(userNumber) || userNumber &lt; 1 || userNumber &gt; 100) {\n                document.getElementById(\"question\").innerHTML =\n                \"\u8f93\u5165\u65e0\u6548\uff01&lt;br&gt;\u8bf7\u518d\u6b21\u4f7f\u7528 1 \u5230 100 \u8303\u56f4\u5185\u7684\u6574\u6570\u5c1d\u8bd5\u3002\";\n            }\n            else if (userNumber === number) {\n                guessCount++;\n                document.getElementById(\"question\").innerHTML =\n                    \"\u4f60\u5728 \" + guessCount + \" \u6b21\u731c\u6d4b\u4e2d\u627e\u5230\u4e86\u3002 \" +\n                    number + \" \u662f\u6b63\u786e\u7684\u3002&lt;br&gt;\" +\n                    \"\u6211\u9009\u62e9\u4e86\u53e6\u4e00\u4e2a\u6570\u5b57\u3002 \u731c\u731c\u770b\uff01\";\n                number = Math.floor(1 + 100 * Math.random());\n                guessCount = 0;\n                guessMessage = \"\u4f60\u76ee\u524d\u7684\u731c\u6d4b\uff1a\";\n                document.getElementById(\"message\").innerHTML = \"\";\n            }\n            else if (userNumber &lt; number) {\n                guessCount++;\n                document.getElementById(\"question\").innerHTML =\n                    userNumber + \" \u592a\u4f4e\u4e86\u3002&lt;br&gt;\u518d\u8bd5\u4e00\u6b21\u3002\";\n                guessMessage += \" \" + userNumber;\n                document.getElementById(\"message\").innerHTML = guessMessage;\n            }\n            else {\n                guessCount++;\n                document.getElementById(\"question\").innerHTML =\n                    userNumber + \" \u592a\u9ad8\u4e86\u3002&lt;br&gt;\u518d\u8bd5\u4e00\u6b21\u3002\";\n                guessMessage += \" \" + userNumber;\n                document.getElementById(\"message\").innerHTML = guessMessage;\n            }\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p id=\"question\"&gt;\u6211\u5c06\u9009\u62e9\u4e00\u4e2a 1 \u5230 100 \u4e4b\u95f4\u7684\u6570\u5b57\u3002&lt;br&gt;\n    \u5c1d\u8bd5\u731c\u731c\u770b\u3002\u4f60\u7684\u7b2c\u4e00\u4e2a\u731c\u6d4b\u662f\u4ec0\u4e48\uff1f&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"text\" id=\"guess\"&gt;\n    &lt;button onclick=\"guess()\"&gt;\u8fdb\u884c\u731c\u6d4b&lt;/button&gt;&lt;/p&gt;\n    &lt;p id=\"message\"&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u6211\u7684\u4e00\u4e9b\u8ba8\u8bba\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\u3002\u5047\u8bbe\u4e00\u4e2a\u811a\u672c\u4f7f\u7528\u51fd\u6570 document.getElementById \u6765\u83b7\u53d6\u67d0\u4e2a HTML \u5143\u7d20\u7684 DOM \u5bf9\u8c61\u3002\u5982\u679c\u8be5\u811a\u672c\u5728\u9875\u9762\u52a0\u8f7d\u5b8c\u6210\u4e4b\u524d\u6267\u884c\uff0c\u5b83\u5c1d\u8bd5\u8bbf\u95ee\u7684\u5143\u7d20\u53ef\u80fd\u8fd8\u4e0d\u5b58\u5728\u3002\u8bf7\u8bb0\u4f4f\uff0c\u811a\u672c\u662f\u5728\u9875\u9762\u52a0\u8f7d\u65f6\u6267\u884c\u7684\u3002\u5f53\u7136\uff0c\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4ec5\u5728\u9875\u9762\u52a0\u8f7d\u5b8c\u6210\u540e\u624d\u54cd\u5e94\u4e8b\u4ef6\u6267\u884c\u7684\u51fd\u6570\u4e2d\u8c03\u7528 document.getElementById\uff1b\u8fd9\u6b63\u662f\u6211\u5728\u524d\u9762\u793a\u4f8b\u4e2d\u6240\u505a\u7684\u3002\u4f46\u6709\u65f6\uff0c\u4f60\u53ef\u80fd\u60f3\u5c06 DOM \u5bf9\u8c61\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u3002\u4f60\u5e94\u8be5\u5728\u54ea\u91cc\u8fd9\u6837\u505a\u5462\uff1f\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u5c06\u811a\u672c\u653e\u5728\u9875\u9762\u7684\u672b\u5c3e\u3002\u8fd9\u53ef\u80fd\u4f1a\u8d77\u4f5c\u7528\u3002\u53e6\u4e00\u79cd\u66f4\u5e38\u89c1\u7684\u6280\u672f\u662f\u5c06\u8d4b\u503c\u653e\u5165\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5e76\u5b89\u6392\u5728\u9875\u9762\u52a0\u8f7d\u5b8c\u6210\u540e\u8fd0\u884c\u8be5\u51fd\u6570\u3002\u5f53\u6d4f\u89c8\u5668\u52a0\u8f7d\u5b8c\u9875\u9762\u5e76\u6784\u5efa\u5176 DOM \u8868\u793a\u65f6\uff0c\u4f1a\u89e6\u53d1\u4e00\u4e2a\u52a0\u8f7d\u4e8b\u4ef6\u3002\u4f60\u53ef\u4ee5\u5b89\u6392\u4e00\u4e9b JavaScript \u4ee3\u7801\u4f5c\u4e3a\u5bf9\u8be5\u4e8b\u4ef6\u7684\u54cd\u5e94\u3002\u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u5411 <code>&lt;body&gt;</code> \u6807\u7b7e\u6dfb\u52a0\u4e00\u4e2a onload \u4e8b\u4ef6\u5904\u7406\u5668\uff1a</p> <pre><code>&lt;body onload=\"init()\"&gt;\n</code></pre> <p>\u8fd9\u5c06\u5728\u9875\u9762\u52a0\u8f7d\u65f6\u8c03\u7528\u540d\u4e3a init() \u7684\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5e94\u8be5\u5305\u542b\u4f60\u7684\u7a0b\u5e8f\u6240\u9700\u7684\u4efb\u4f55\u521d\u59cb\u5316\u4ee3\u7801\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728\u5176\u4ed6\u5143\u7d20\u4e2d\u5b9a\u4e49\u7c7b\u4f3c\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e <code>&lt;input&gt;</code> \u548c <code>&lt;select&gt;</code> \u5143\u7d20\uff0c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a onchange \u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u5f53\u7528\u6237\u66f4\u6539\u4e0e\u5143\u7d20\u5173\u8054\u7684\u503c\u65f6\uff0c\u5c06\u6267\u884c\u6b64\u5904\u7406\u5668\u3002\u8fd9\u5141\u8bb8\u4f60\u5728\u7528\u6237\u9009\u4e2d\u6216\u53d6\u6d88\u9009\u4e2d\u590d\u9009\u6846\u6216\u4ece\u9009\u62e9\u83dc\u5355\u4e2d\u9009\u62e9\u65b0\u9009\u9879\u65f6\u505a\u51fa\u54cd\u5e94\u3002</p> <p>\u53ef\u4ee5\u5c06\u4e8b\u4ef6\u5904\u7406\u5668\u5305\u542b\u5728\u521b\u5efa\u5143\u7d20\u7684 HTML \u6807\u7b7e\u4e2d\uff0c\u6b63\u5982\u6211\u5728 body onload \u4e8b\u4ef6\u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u4f46\u8fd9\u5e76\u4e0d\u662f\u8bbe\u7f6e\u4e8b\u4ef6\u5904\u7406\u7684\u9996\u9009\u65b9\u5f0f\u3002\u9996\u5148\uff0c\u6df7\u5408 JavaScript \u4ee3\u7801\u548c HTML \u4ee3\u7801\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u4e0d\u826f\u98ce\u683c\u3002\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 DOM \u5b89\u88c5\u4e8b\u4ef6\u5904\u7406\u5668\u7684\u53e6\u5916\u4e24\u79cd\u65b9\u5f0f\u3002\u5047\u8bbe checkbox \u662f\u8868\u793a\u590d\u9009\u6846\u5143\u7d20\u7684 DOM \u5bf9\u8c61\uff0c\u53ef\u80fd\u662f\u901a\u8fc7\u8c03\u7528 document.getElementById \u83b7\u5f97\u7684\u3002\u8be5\u5bf9\u8c61\u6709\u4e00\u4e2a\u540d\u4e3a onchange \u7684\u5c5e\u6027\uff0c\u8868\u793a\u590d\u9009\u6846\u7684 onchange \u4e8b\u4ef6\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u51fd\u6570\u5206\u914d\u7ed9\u8be5\u5c5e\u6027\u6765\u8bbe\u7f6e\u4e8b\u4ef6\u5904\u7406\u3002\u5982\u679c checkBoxChanged \u662f\u4f60\u5e0c\u671b\u5728\u7528\u6237\u9009\u4e2d\u6216\u53d6\u6d88\u9009\u4e2d\u6846\u65f6\u8c03\u7528\u7684\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 JavaScript \u547d\u4ee4\uff1a</p> <pre><code>checkbox.onchange = checkBoxChanged;\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u51fd\u6570\uff1a</p> <pre><code>checkbox.onchange = function() { alert(\"\u590d\u9009\u6846\u5df2\u66f4\u6539\"); };\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0ccheckbox.onchange \u7684\u503c\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e0d\u662f JavaScript \u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5728 JavaScript \u4e2d\u8bbe\u7f6e\u4e8b\u4ef6\u5904\u7406\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528 addEventListener \u51fd\u6570\u3002\u8fd9\u79cd\u6280\u672f\u66f4\u52a0\u7075\u6d3b\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4f60\u4e3a\u540c\u4e00\u4e8b\u4ef6\u8bbe\u7f6e\u591a\u4e2a\u4e8b\u4ef6\u5904\u7406\u5668\u3002\u8be5\u51fd\u6570\u662f\u4efb\u4f55 DOM \u5143\u7d20\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u7684\u590d\u9009\u6846\u793a\u4f8b\u53d8\u4e3a\uff1a</p> <pre><code>checkbox.addEventListener(\"change\", checkBoxChanged, false);\n</code></pre> <p>addEventListener \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u63d0\u4f9b\u4e8b\u4ef6\u7684\u540d\u79f0\u3002\u540d\u79f0\u4e0e HTML \u4e2d\u7684\u4e8b\u4ef6\u5c5e\u6027\u540d\u79f0\u76f8\u540c\uff0c\u53ea\u662f\u53bb\u6389\u4e86\u524d\u9762\u7684 \"on\"\uff1aonchange \u53d8\u4e3a \"change\"\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e8b\u4ef6\u53d1\u751f\u65f6\u5c06\u88ab\u8c03\u7528\u7684\u51fd\u6570\u3002\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u7684\u540d\u79f0\u7ed9\u51fa\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u533f\u540d\u51fd\u6570\u7ed9\u51fa\u3002\u7b2c\u4e09\u4e2a\u53c2\u6570\u5bf9\u6211\u4eec\u7684\u76ee\u7684\u6765\u8bf4\u66f4\u96be\u89e3\u91ca\uff0c\u5c06\u59cb\u7ec8\u662f false\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0e\u8c03\u7528 element.addEventListener \u65f6\u76f8\u540c\u7684\u53c2\u6570\u4ece\u5143\u7d20\u4e2d\u79fb\u9664\u4e8b\u4ef6\u4fa6\u542c\u5668\uff0c\u65b9\u6cd5\u662f\u8c03\u7528 element.removeEventListener\u3002\u52a0\u8f7d\u4e8b\u4ef6\u4e0e\u540d\u4e3a window \u7684\u9884\u5b9a\u4e49\u5bf9\u8c61\u5173\u8054\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4e0d\u8bf4\u5728 <code>&lt;body&gt;</code> \u6807\u7b7e\u4e2d\u9644\u52a0\u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u7a0b\u5e8f\uff0c\u800c\u662f\u8bf4\uff1a</p> <pre><code>window.onload = init;\n</code></pre> <p>\u6216\u8005</p> <pre><code>window.addEventListener(\"load\", init, false);\n</code></pre> <p>\u540c\u6837\uff0c\u6709\u4e00\u4e2a onmousedown \u4e8b\u4ef6\u662f\u4e3a\u4efb\u4f55\u5143\u7d20\u5b9a\u4e49\u7684\u3002\u53ef\u4ee5\u5206\u522b\u901a\u8fc7\u5c06\u51fd\u6570\u5206\u914d\u7ed9 elem.onmousedown \u6216\u8c03\u7528 elem.addEventListener(\"mousedown\",handler,false) \u5c06\u6b64\u4e8b\u4ef6\u7684\u5904\u7406\u7a0b\u5e8f\u9644\u52a0\u5230 DOM \u5143\u7d20\uff0celem\u3002\u5176\u4ed6\u5e38\u89c1\u4e8b\u4ef6\u5305\u62ec onmouseup\u3001onmousemove\u3001onclick \u548c onkeydown\u3002onkeydown \u4e8b\u4ef6\u5904\u7406\u5668\u54cd\u5e94\u7528\u6237\u6309\u4e0b\u952e\u76d8\u4e0a\u7684\u952e\u3002\u8be5\u5904\u7406\u5668\u901a\u5e38\u9644\u52a0\u5230\u6587\u6863\u5bf9\u8c61\uff1a</p> <pre><code>document.onkeydown = doKeyPressed;\n</code></pre> <p>\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\u53ef\u4ee5\u5e26\u4e00\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5728\u9f20\u6807\u4e8b\u4ef6\u7684\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528 evt \u4f5c\u4e3a\u53c2\u6570\u7684\u540d\u79f0\uff0cevt.clientX \u548c evt.clientY \u63d0\u4f9b\u9f20\u6807\u5728\u6d4f\u89c8\u5668\u7a97\u53e3\u4e2d\u7684\u4f4d\u7f6e\u3002\u5728\u5904\u7406 onkeydown \u4e8b\u4ef6\u7684\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0cevt.keyCode \u662f\u6240\u6309\u952e\u7684\u6570\u5b57\u4ee3\u7801\u3002</p> <p>\u4e8b\u4ef6\u5904\u7406\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8bdd\u9898\uff0c\u6211\u8fd9\u91cc\u53ea\u505a\u4e86\u4e00\u4e2a\u7b80\u77ed\u7684\u4ecb\u7ecd\u3002\u4f5c\u4e3a\u5b66\u4e60 JavaScript \u4e8b\u4ef6\u7684\u7b2c\u4e00\u6b65\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u793a\u4f8b\u7f51\u9875 canvas2d/EventsStarter.html \u7684 HTML \u6e90\u4ee3\u7801\u3002</p> <p>JavaScript code on a web page can manipulate the content and the style of that page. It can do this because of the DOM (Document Object Model). When a web page is loaded, everything on the page is encoded into a data structure, defined by the DOM, which can be accessed from JavaScript as a collection of objects. There are several ways to get references to these objects, but I will discuss only one: document.getElementById. Any element on a web page can have an id attribute. For example:</p> <pre><code>&lt;img src=\"somepicture.jpg\" id=\"pic\"&gt;\n</code></pre> <p>or</p> <pre><code>&lt;h1 id=\"mainhead\"&gt;My Page&lt;/h1&gt;\n</code></pre> <p>An id should be unique on the page, so that an element is uniquely identified by its id. Any element is represented by a DOM object. If an element has an id, you can obtain a reference to the corresponding DOM object by passing the id to the function document.getElementById. For example:</p> <pre><code>let image = document.getElementById(\"pic\");\nlet heading = document.getElementById(\"mainhead\");\n</code></pre> <p>Once you have a DOM object, you can use it to manipulate the element that it represents. For example, the content of the element is given by the innerHTML property of the object. The value is a string containing text or HTML code. In our example, the value of heading.innerHTML is the string \"My Page\". Furthermore, you can assign a value to this property, and doing so will change the content of the element. For example:</p> <pre><code>heading.innerHTML = \"Best Page Ever!\";\n</code></pre> <p>This does not just change the value of the property in the object; it actually changes the text that is displayed on the web page! This will seem odd (and maybe even a little creepy) to programmers who are new to JavaScript: It's an assignment statement that has a side effect. But that's the way the DOM works. A change to the DOM data structure that represents a web page will actually modify the page and change its display in the web browser.</p> <p>Some attributes of elements become properties of the objects that represent them. This is true for the src attribute of an image element, so that in our example, we could say</p> <pre><code>image.src = \"anotherpicture.jpg\";\n</code></pre> <p>This will change the source of the image element. Again, this is a \"live\" assignment: When the assignment statement is executed, the image on the web page changes.</p> <p>For readers who know CSS, note that the DOM object for an element has a property named style that is itself an object, representing the CSS style of the object. The style object has properties such as color, backgroundColor, and fontSize representing CSS properties. By assigning values to these properties, you can change the appearance of the element on the page. For example,</p> <pre><code>heading.style.color = \"red\";\nheading.style.fontSize = \"150%\";\n</code></pre> <p>These commands will make the text in the  element red and 50% larger than usual. The value of a style property must be a string that would be a legal value for the corresponding CSS style. <p>Most interesting along these lines, perhaps, are properties of input elements, since they make it possible to program interaction with the user. Suppose that in the HTML source of a web page, we have</p> <pre><code>&lt;input type=\"text\" id=\"textin\"&gt;\n\n&lt;select id=\"sel\"&gt;\n&lt;option value=\"1\"&gt;Option 1&lt;/option&gt;\n&lt;option value=\"2\"&gt;Option 2&lt;/option&gt;\n&lt;option value=\"3\"&gt;Option 3&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;input type=\"checkbox\" id=\"cbox\"&gt;\n</code></pre> <p>and in JavaScript, we have</p> <pre><code>let textin = document.getElementById(\"textin\");\nlet sel = document.getElementById(\"sel\");\nlet checkbox = document.getElementById(\"cbox\");\n</code></pre> <p>Then the value of the property checkbox.checked is a boolean that can be tested to determine whether the checkbox is checked or not, and the value true or false can be assigned to checkbox.checked to check or uncheck the box programmatically. The value of checkbox.disabled is a boolean that tells whether the checkbox is disabled. (The user can't change the value of a disabled checkbox.) Again, you can both test and set this value. The properties sel.disabled and textin.disabled do the same thing for the <code>&lt;select&gt;</code> menu and the text input box. The properties textin.value and sel.value represent the current values of those elements. The value of a text input is the text that is currently in the box. The value of a <code>&lt;select&gt;</code> element is the value of the currently selected option. As an example, here is complete source code for a web page that implements a guessing game using a text input box and buttons:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Guessing Game&lt;/title&gt;\n&lt;script&gt;\n    \"use strict\";\n    let number = Math.floor( 1 + 100*Math.random() );\n    let guessCount = 0;\n    let guessMessage = \"Your guesses so far: \";\n    function guess() {\n        let userNumber = Number( document.getElementById(\"guess\").value );\n        document.getElementById(\"guess\").value = \"\";\n        if ( isNaN(userNumber) || userNumber &lt; 1 || userNumber &gt; 100 ) {\n            document.getElementById(\"question\").innerHTML =\n            \"Bad input!&lt;br&gt;Try again with an integer in the range 1 to 100.\";\n        }\n        else if (userNumber === number) {\n            guessCount++;\n            document.getElementById(\"question\").innerHTML =\n                \"You got it in \" + guessCount + \" guesses. \" +\n                userNumber + \" is correct.&lt;br&gt;\" + \n                \"I have picked another number.  Make a guess!\";\n            number = Math.floor( 1 + 100*Math.random() );\n            guessCount = 0;\n            guessMessage = \"Your guesses so far: \";\n            document.getElementById(\"message\").innerHTML = \"\";\n        }\n        else if (userNumber &lt; number) {\n            guessCount++;\n            document.getElementById(\"question\").innerHTML =\n                userNumber + \" is too low.&lt;br&gt;Try again.\";\n            guessMessage += \" \" + userNumber;\n            document.getElementById(\"message\").innerHTML = guessMessage;\n        }\n        else {\n            guessCount++;\n            document.getElementById(\"question\").innerHTML =\n                userNumber + \" is too high.&lt;br&gt;Try again.\";\n            guessMessage += \" \" + userNumber;\n            document.getElementById(\"message\").innerHTML = guessMessage;\n        }\n    }\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p id=\"question\"&gt;I will pick a number between 1 and 100.&lt;br&gt;\n    Try to guess it.  What is your first guess?&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"text\" id=\"guess\"&gt;\n    &lt;button onclick=\"guess()\"&gt;Make Guess&lt;/button&gt;&lt;/p&gt;\n    &lt;p id=\"message\"&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Here's one problem with some of my discussion. Suppose that a script uses the function document.getElementById to get the DOM object for some HTML element. If that script is executed before the page has finished loading, the element that it is trying to access might not yet exist. And remember that scripts are executed as the page is loading. Of course, one solution is to call document.getElementById only in functions that are executed in response to events that can only occur after the page has loaded; that's what I did in the previous example. But sometimes, you want to assign a DOM object to a global variable. Where should you do that? One possibility is to put the script at the end of the page. That will probably work. Another, more common technique is to put the assignment into a function and arrange for that function to run after the page has finished loading. When the browser has finished loading the page and building its DOM representation, it fires a load event. You can arrange for some JavaScript code to be called in response to that event. A common way of doing this is to add an onload event-handler to the <code>&lt;body&gt;</code> tag:</p> <pre><code>&lt;body onload=\"init()\"&gt;\n</code></pre> <p>This will call a function named init() when the page has loaded. That function should include any initialization code that your program needs.</p> <p>You can define similar event-handlers in other elements. For example, for <code>&lt;input&gt;</code> and <code>&lt;select&gt;</code> elements, you can supply an onchange event-handler that will be executed when the user changes the value associated with the element. This allows you to respond when the user checks or unchecks a checkbox or selects a new option from a select menu.</p> <p>It's possible to include an event handler for an element in the HTML tag that creates the element, as I did with the body onload event. But that's not the preferred way to set up event handling. For one thing, the mixing of JavaScript code and HTML code is often considered to be bad style. Alternatively, there are two other ways to install event handlers using the DOM. Suppose that checkbox is a DOM object representing a check box element, probably obtained by calling document.getElementById. That object has a property named onchange that represents an event-handler for the checkbox's onchange event. You can set up event handling by assigning a function to that property. If checkBoxChanged is the function that you want to call when the user checks or unchecks the box, you can use the JavaScript command:</p> <pre><code>checkbox.onchange = checkBoxChanged;\n</code></pre> <p>You could also use an anonymous function:</p> <pre><code>checkbox.onchange = function() { alert(\"Checkbox changed\"); };\n</code></pre> <p>Note that the value of checkbox.onchange is a function, not a string of JavaScript code.</p> <p>The other way to set up event handling in JavaScript is with the addEventListener function. This technique is more flexible because it allows you to set up more than one event handler for the same event. This function is a method in any DOM element object. Using it, our checkbox example becomes</p> <pre><code>checkbox.addEventListener( \"change\", checkBoxChanged, false );\n</code></pre> <p>The first parameter to addEventListener is a string that gives the name of the event. The name is the same as the name of the event attribute in HTML, with \"on\" stripped off the front: onchange becomes \"change\". The second parameter is the function that will be called when the event occurs. It can be given as the name of a function or as an anonymous function. The third parameter is harder to explain and will, for our purposes, always be false. You can remove an event listener from an element by calling element.removeEventListener with the same parameters that were used in the call to element.addEventListener. The load event is associated with a predefined object named window, so instead of attaching an event-handler for that event in the <code>&lt;body&gt;</code> tag, you could say</p> <pre><code>window.onload = init;\n</code></pre> <p>or</p> <pre><code>window.addEventListener(\"load\", init, false);\n</code></pre> <p>Similarly, there is an onmousedown event that is defined for any element. A handler for this event can be attached to a DOM element, elem, either by assigning a function to elem.onmousedown or by calling elem.addEventListener(\"mousedown\",handler,false). Other common events include onmouseup, onmousemove, onclick, and onkeydown. An onkeydown event handler responds when the user presses a key on the keyboard. The handler is often attached to the document object:</p> <pre><code>document.onkeydown = doKeyPressed;\n</code></pre> <p>An event-handler function can take a parameter that contains information about the event. For example, in an event-handler for mouse events, using evt as the name of the parameter, evt.clientX and evt.clientY give the location of the mouse in the browser window. In a handler for the onkeydown event, evt.keyCode is a numeric code for the key that was pressed.</p> <p>Event handling is a complicated subject, and I have given only a short introduction here. As a first step in learning more about events in JavaScript, you might look at the HTML source code for the sample web page canvas2d/EventsStarter.html.</p>"},{"location":"cn/a1/s4/","title":"A.4  JavaScript Promise \u548c\u5f02\u6b65\u51fd\u6570","text":"<p>Section A.4  JavaScript Promises and Async Functions</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u4ecb\u7ecd\u4e86 JavaScript \u4e2d\u7684\u4e24\u4e2a\u65b0\u7279\u6027\uff1apromises\uff08\u627f\u8bfa\uff09\u548c async functions\uff08\u5f02\u6b65\u51fd\u6570\uff09\u3002\u8fd9\u4e9b\u7279\u6027\u5728 JavaScript API \u4e2d\u8d8a\u6765\u8d8a\u5e38\u89c1\u3002\u7279\u522b\u662f\uff0c\u5b83\u4eec\u5728 WebGPU \u4e2d\u4f7f\u7528\uff0cWebGPU \u5728 \u7b2c9\u7ae0 \u4e2d\u6709\u4ecb\u7ecd\u3002\u7136\u800c\uff0c\u8bf7\u6ce8\u610f\uff0c\u5b83\u4eec\u5728\u8fd9\u672c\u6559\u79d1\u4e66\u7684\u5176\u4ed6\u90e8\u5206\u5e76\u6ca1\u6709\u4f7f\u7528\u3002</p> <p>JavaScript \u627f\u8bfa\u4ee3\u8868\u4e86\u4e00\u4e2a\u53ef\u80fd\u5728\u67d0\u4e2a\u65f6\u5019\u53ef\u7528\u7684\u7ed3\u679c\u3002\u5982\u679c\u5e76\u4e14\u5f53\u7ed3\u679c\u53d8\u5f97\u53ef\u7528\u65f6\uff0c\u627f\u8bfa\u88ab\u5c65\u884c\uff1b\u5b83\u88ab\u79f0\u4e3a\u201c\u89e3\u51b3\u201d\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u53ef\u4ee5\u8fd4\u56de\u7ed3\u679c\uff0c\u5c3d\u7ba1\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u4ec5\u4ec5\u662f\u77e5\u9053\u627f\u8bfa\u7b49\u5f85\u7684\u4e8b\u60c5\u5df2\u7ecf\u53d1\u751f\u4e86\u3002\u5982\u679c\u53d1\u751f\u4e86\u67d0\u4e9b\u4e8b\u60c5\uff0c\u610f\u5473\u7740\u627f\u8bfa\u65e0\u6cd5\u5b9e\u73b0\uff0c\u90a3\u4e48\u627f\u8bfa\u88ab\u79f0\u4e3a\u201c\u62d2\u7edd\u201d\u3002\u7a0b\u5e8f\u5458\u53ef\u4ee5\u63d0\u4f9b\u5728\u627f\u8bfa\u89e3\u51b3\u6216\u62d2\u7edd\u65f6\u8c03\u7528\u7684\u51fd\u6570\u3002</p> <p>\u627f\u8bfa\u662f\u56de\u8c03\u51fd\u6570\u7684\u66ff\u4ee3\u54c1\u3002\u56de\u8c03\u51fd\u6570\u662f\u7531\u7a0b\u5e8f\u5458\u63d0\u4f9b\u7684\u51fd\u6570\uff0c\u7531\u7cfb\u7edf\u5728\u7a0d\u540e\u53d1\u751f\u67d0\u4e8b\u65f6\u8c03\u7528\u3002\u4f8b\u5982\uff0c\u5728\u6807\u51c6 JavaScript \u51fd\u6570\u4e2d\uff1a</p> <pre><code>setTimeout( callbackFunction, timeToWait );\n</code></pre> <p>\u5728 setTimeout() \u51fd\u6570\u6267\u884c\u540e\uff0c\u7cfb\u7edf\u5c06\u5728 timeToWait \u6beb\u79d2\u540e\u8c03\u7528 callbackFunction\u3002\u91cd\u8981\u7684\u662f\uff0csetTimeout() \u7acb\u5373\u8fd4\u56de\uff1b\u5b83\u53ea\u662f\u8bbe\u7f6e\u56de\u8c03\u51fd\u6570\u5728\u672a\u6765\u88ab\u8c03\u7528\u3002\u540c\u6837\u7684\u4e8b\u60c5\u9002\u7528\u4e8e\u627f\u8bfa\uff1a\u7a0b\u5e8f\u4e0d\u4f1a\u7b49\u5f85\u627f\u8bfa\u89e3\u51b3\u6216\u62d2\u7edd\uff1b\u5b83\u53ea\u662f\u7b80\u5355\u5730\u5b89\u6392\u7a0d\u540e\u53d1\u751f\u4e00\u4e9b\u4e8b\u60c5\uff0c\u5f53\u5176\u4e2d\u4e00\u4ef6\u4e8b\u60c5\u53d1\u751f\u65f6\u3002</p> <p>\u5178\u578b\u7684\u7a0b\u5e8f\u5458\u66f4\u6709\u53ef\u80fd\u4f7f\u7528\u7531\u67d0\u4e9b API \u521b\u5efa\u7684\u627f\u8bfa\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u521b\u5efa\u5b83\u4eec\u3002\u5e76\u4e14\u4ed6\u4eec\u66f4\u6709\u53ef\u80fd\u5728 async \u51fd\u6570\u4e2d\u4f7f\u7528 await \u64cd\u4f5c\u7b26\u4f7f\u7528\u8fd9\u4e9b\u627f\u8bfa\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u9996\u5148\u4ecb\u7ecd\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>This section introduces two new features in JavaScript: promises and async functions. These features are becoming increasingly common in JavaScript APIs. In particular, they are used in WebGPU, which is covered in Chapter 9. However, note that they are not used in any other part of this textbook.</p> <p>A JavaScript promise represents a result that might be available at some time. If and when the result becomes available, the promise is fulfilled; it is said to \"resolve.\" When that happens, the result can be returned, although in some cases the result is simply the knowledge that whatever the promise was waiting for has occurred. If something happens that means the promise cannot be fulfilled, then the promise is said to \"reject.\" A programmer can provide functions to be called when the promise resolves or rejects.</p> <p>Promises are a replacement for callback functions. A callback function is a function that is provided by a programmer to be called later, by the system, when something happens. For example in the standard JavaScript function</p> <pre><code>setTimeout( callbackFunction, timeToWait );\n</code></pre> <p>The callbackFunction will be called by the system timeToWait milliseconds after the setTimeout() function is executed. An important point is that setTimeout() returns immediately; it simply sets up the callback function to be called in the future. The same thing applies to promises: A program does not wait for a promise to resolve or reject; it simply arranges for something to happen later, when one of those things occurs.</p> <p>Typical programmers are more likely to use promises created by some API than to create them directly. And they are more likely to use those promises with the await operator in async functions than to use them directly, so we will cover that case first.</p>"},{"location":"cn/a1/s4/#a41-\u5f02\u6b65\u51fd\u6570\u548c\u7b49\u5f85","title":"A.4.1  \u5f02\u6b65\u51fd\u6570\u548c\u7b49\u5f85","text":"<p>A.4.1  Async Functions and await</p> \u4e2d\u6587\u82f1\u6587 <p>\u7b49\u5f85\u8fd0\u7b97\u7b26\uff08await operator\uff09\u7528\u4e8e\u68c0\u7d22\u5df2\u89e3\u51b3\u7684\u627f\u8bfa\u7684\u7ed3\u679c\u3002\u5982\u679c\u627f\u8bfa\u88ab\u62d2\u7edd\uff0c\u5219\u7b49\u5f85\u8fd0\u7b97\u7b26\u5c06\u629b\u51fa\u5f02\u5e38\u3002\u7b49\u5f85\u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u975e\u5e38\u7b80\u5355\uff1a</p> <pre><code>await promise\n</code></pre> <p>\u8fd9\u91cc\u7684 promise \u662f\u4e00\u4e2a\u627f\u8bfa\u3002\u5f53\u627f\u8bfa\u89e3\u51b3\u65f6\uff0c\u5176\u7ed3\u679c\u6210\u4e3a\u8868\u8fbe\u5f0f\u7684\u503c\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6765\u81ea WebGPU API \u7684\u793a\u4f8b\uff08\u89c1 9.1.1 \u5c0f\u8282\uff09\uff1a</p> <pre><code>let adapter = await navigator.gpu.requestAdapter();\n</code></pre> <p><code>navigator.gpu.requestAdapter()</code> \u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u627f\u8bfa\u3002\u5f53\u8be5\u627f\u8bfa\u89e3\u51b3\u65f6\uff0c\u627f\u8bfa\u7684\u7ed3\u679c\u6210\u4e3a\u7b49\u5f85\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5e76\u4e14\u8be5\u503c\u88ab\u8d4b\u7ed9 adapter\u3002</p> <p>\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0cawait \u5b9e\u9645\u4e0a\u5e76\u4e0d\u4f1a\u505c\u4e0b\u6765\u7b49\u5f85\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4e0d\u4f1a\u5728\u7b49\u5f85\u65f6\u4f7f JavaScript \u7a0b\u5e8f\u505c\u6b62\u3002\u76f8\u53cd\uff0c\u5305\u542b await \u8868\u8fbe\u5f0f\u7684\u51fd\u6570\u4f1a\u4e00\u76f4\u6302\u8d77\uff0c\u76f4\u5230\u7ed3\u679c\u53ef\u7528\uff0c\u800c\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u3002</p> <p>\u7b49\u5f85\u8fd0\u7b97\u7b26\u53ea\u80fd\u5728\u6807\u8bb0\u4e3a async \u7684\u5f02\u6b65\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff1a</p> <pre><code>async function name( parameters ) {\n    // \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 await\n}\n</code></pre> <p>\u5f53\u8c03\u7528\u4e00\u4e2a\u5f02\u6b65\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u7acb\u5373\u6267\u884c\u5230\u51fd\u6570\u5b9a\u4e49\u4e2d\u9996\u6b21\u51fa\u73b0 await \u7684\u4f4d\u7f6e\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6267\u884c\u88ab\u6302\u8d77\uff0c\u76f4\u5230\u627f\u8bfa\u89e3\u51b3\u6216\u62d2\u7edd\u3002\u5982\u679c\u89e3\u51b3\u4e86\uff0c\u6267\u884c\u5c31\u4f1a\u6062\u590d\uff0c\u5e76\u7ee7\u7eed\u6267\u884c\u5230\u4e0b\u4e00\u4e2a await\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u5982\u679c\u5728\u4efb\u4f55\u65f6\u5019\u627f\u8bfa\u88ab\u62d2\u7edd\u800c\u4e0d\u662f\u89e3\u51b3\uff0c\u5c31\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u53ef\u4ee5\u50cf\u901a\u5e38\u4e00\u6837\u6355\u83b7\u548c\u5904\u7406\u3002\u76f4\u5230\u6240\u6709 await \u8868\u8fbe\u5f0f\u4e2d\u7684\u627f\u8bfa\u90fd\u89e3\u51b3\uff0c\u6216\u8005\u5f02\u5e38\u5bfc\u81f4\u51fd\u6570\u9000\u51fa\uff0c\u51fd\u6570\u624d\u4f1a\u8fd4\u56de\u3002\u6ce8\u610f\uff0c\u8c03\u7528\u5f02\u6b65\u51fd\u6570\u7684\u90a3\u4e2a\u51fd\u6570\u4e5f\u5fc5\u7136\u88ab\u6302\u8d77\uff0c\u5373\u4f7f\u90a3\u4e2a\u51fd\u6570\u4e0d\u662f\u5f02\u6b65\u7684\u3002</p> <p>\u603b\u7684\u6765\u8bf4\uff0c\u7b49\u5f85\u8868\u8fbe\u5f0f\u5f88\u50cf\u666e\u901a\u8868\u8fbe\u5f0f\uff0c\u5f02\u6b65\u51fd\u6570\u4e5f\u5f88\u50cf\u666e\u901a\u51fd\u6570\u3002\u5b83\u4eec\u7684\u7f16\u5199\u548c\u4f7f\u7528\u65b9\u5f0f\u76f8\u540c\u3002\u8fd9\u53ef\u4ee5\u4f7f\u627f\u8bfa\u6bd4\u56de\u8c03\u51fd\u6570\u66f4\u5bb9\u6613\u4f7f\u7528\uff0c\u8fd9\u662f\u5b83\u4eec\u7684\u4e00\u5927\u4f18\u52bf\u3002\u7136\u800c\uff0c\u5f02\u6b65\u51fd\u6570\u53ef\u4ee5\u88ab\u6302\u8d77\u7684\u4e8b\u5b9e\u5f15\u5165\u4e86\u6f5c\u5728\u95ee\u9898\u7684\u65b0\u6765\u6e90\uff1a\u4f60\u5fc5\u987b\u8bb0\u4f4f\uff0c\u5728\u5f02\u6b65\u51fd\u6570\u4e2d\u95f4\uff0c\u53ef\u80fd\u53d1\u751f\u5176\u4ed6\u4e0d\u76f8\u5173\u7684\u4e8b\u60c5\u3002</p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002fetch API \u662f\u4e00\u4e2a\u4ece\u4e92\u8054\u7f51\u68c0\u7d22\u6587\u4ef6\u7684 API\u3002\uff08\u4f46\u5982\u679c\u6ca1\u6709\u989d\u5916\u7684\u5de5\u4f5c\uff0c\u5b83\u53ea\u80fd\u4ece\u4e0e\u4f7f\u7528\u5b83\u7684\u7f51\u9875\u76f8\u540c\u7684\u6765\u6e90\u83b7\u53d6\u6587\u4ef6\u3002\uff09\u5982\u679c url \u662f\u67d0\u4e2a\u6587\u4ef6\u7684 URL\uff0c\u90a3\u4e48 fetch(url) \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u5f53\u6587\u4ef6\u88ab\u5b9a\u4f4d\u65f6\u89e3\u51b3\uff0c\u5f53\u6587\u4ef6\u627e\u4e0d\u5230\u65f6\u62d2\u7edd\u3002\u8868\u8fbe\u5f0f await fetch(url) \u7b49\u5f85\u6587\u4ef6\u88ab\u5b9a\u4f4d\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u5947\u602a\u7684\u662f\uff0c\u6587\u4ef6\u5df2\u7ecf\u88ab\u5b9a\u4f4d\uff0c\u4f46\u4e0d\u4e00\u5b9a\u5df2\u7ecf\u4e0b\u8f7d\u3002\u5982\u679c response \u662f await fetch(url) \u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u51fd\u6570 response.text() \u8fd4\u56de\u53e6\u4e00\u4e2a\u627f\u8bfa\uff0c\u5f53\u6587\u4ef6\u5185\u5bb9\u53ef\u7528\u65f6\u89e3\u51b3\u3002await response.text() \u7684\u503c\u5c06\u4e3a\u6587\u4ef6\u5185\u5bb9\u3002\u4e00\u4e2a\u68c0\u7d22\u6587\u672c\u6587\u4ef6\u5e76\u5c06\u5176\u5185\u5bb9\u653e\u7f6e\u5728\u7f51\u9875\u5143\u7d20\u4e2d\u7684\u51fd\u6570\u53ef\u4ee5\u8fd9\u6837\u7f16\u5199\uff1a</p> <pre><code>async function loadTextFile( textFileURL ) {\n    let response = await fetch(textFileURL);\n    let text = await response.text();\n    document.getElementById(\"textdisplay\").innerHTML = text;\n}\n</code></pre> <p>\u8fd9\u5c06\u5de5\u4f5c\uff0c\u4f46\u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u4f8b\u5982\u5982\u679c\u4e0d\u5141\u8bb8\u8bbf\u95ee\u6587\u4ef6\uff0c\u6216\u8005\u6ca1\u6709\u8fd9\u6837\u7684\u6587\u4ef6\u5b58\u5728\u3002\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u6355\u83b7\u90a3\u4e2a\u5f02\u5e38\u3002\u6b64\u5916\uff0c\u83b7\u53d6\u6587\u4ef6\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u800c\u5728\u51fd\u6570\u7b49\u5f85\u65f6\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u53d1\u751f\u5176\u4ed6\u4e8b\u60c5\u3002\u7279\u522b\u662f\uff0c\u7528\u6237\u53ef\u80fd\u4f1a\u751f\u6210\u66f4\u591a\u4e8b\u4ef6\uff0c\u751a\u81f3\u53ef\u80fd\u662f\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5bfc\u81f4\u518d\u6b21\u8c03\u7528 loadTextFile()\uff0c\u4f46\u4f7f\u7528\u4e0d\u540c\u7684 URL\uff01\u73b0\u5728\uff0c\u6b63\u5728\u4e0b\u8f7d\u4e24\u4e2a\u6587\u4ef6\u3002\u54ea\u4e00\u4e2a\u5c06\u663e\u793a\u5728\u7f51\u9875\u4e0a\uff1f\u54ea\u4e00\u4e2a\u5e94\u8be5\u663e\u793a\u5728\u7f51\u9875\u4e0a\uff1f\u8fd9\u5c31\u662f\u6211\u4eec\u5728\u5e76\u884c\u7f16\u7a0b\u65f6\u53ef\u80fd\u9047\u5230\u7684\u540c\u6837\u7c7b\u578b\u7684\u6df7\u4e71\u3002\uff08\u516c\u5e73\u5730\u8bf4\uff0c\u4f7f\u7528\u56de\u8c03\u51fd\u6570\u65f6\u6211\u4eec\u4e5f\u53ef\u80fd\u4f1a\u9677\u5165\u7c7b\u4f3c\u7684\u6df7\u4e71\uff0c\u800c\u90a3\u91cc\u53ef\u80fd\u4f1a\u66f4\u96be\u89e3\u5f00\u8fd9\u4e2a\u6df7\u4e71\u3002\uff09</p> <p>\u5047\u8bbe\u6587\u4ef6\u4e0b\u8f7d\u662f\u7531\u7528\u6237\u70b9\u51fb\u67d0\u4e2a\u6309\u94ae\u89e6\u53d1\u7684\u3002\u89e3\u51b3\u53cc\u91cd\u4e0b\u8f7d\u6df7\u4e71\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5728\u4e0b\u8f7d\u8fdb\u884c\u65f6\u7981\u7528\u8be5\u6309\u94ae\uff0c\u4ee5\u9632\u6b62\u542f\u52a8\u53e6\u4e00\u4e2a\u4e0b\u8f7d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7a0b\u5e8f\u7684\u6539\u8fdb\u7248\u672c\u53ef\u80fd\u4f1a\u66f4\u50cf\u8fd9\u6837\uff1a</p> <pre><code>async function loadTextFile( textFileURL ) {\n    document.getElementById(\"downloadButton\").disabled = true;\n    document.getElementById(\"textdisplay\").innerHTML = \"Loading...\";\n    try {\n        let response = await fetch(textFileURL);\n        let text = await response.text();\n        document.getElementById(\"textdisplay\").innerHTML = text;\n    }\n    catch (e) {\n        document.getElementById(\"textdisplay\").innerHTML =\n            \"Can't fetch \" + textFileURL + \".  Error: \" + e;\n    }\n    finally {\n        document.getElementById(\"downloadButton\").disabled = false;\n    }\n}\n</code></pre> <p>\u597d\u5904\u5728\u4e8e\uff0c\u5f02\u6b65\u51fd\u6570\u770b\u8d77\u6765\u672c\u8d28\u4e0a\u548c\u5e38\u89c4 JavaScript \u51fd\u6570\u76f8\u540c\u3002\u6f5c\u5728\u7684\u9677\u9631\u662f\uff0c\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\u7684\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u7a0b\u53ef\u80fd\u4e0e\u5e38\u89c4\u63a7\u5236\u6d41\u7a0b\u5927\u4e0d\u76f8\u540c\uff1a\u5e38\u89c4\u51fd\u6570\u4ece\u5934\u5230\u5c3e\u8fd0\u884c\uff0c\u6ca1\u6709\u4e2d\u65ad\u3002</p> <p>The await operator is used to retrieve the result of a promise, when the promise has resolved. If, instead, the promise rejects, then the await operator will throw an exception. The syntax of an await expression is simply</p> <pre><code>await  promise\n</code></pre> <p>where promise is a promise. When the promise resolves, its result becomes the value of the expression. Here is an example from the WebGPU API (see Subsection 9.1.1):</p> <pre><code>let adapter = await navigator.gpu.requestAdapter();\n</code></pre> <p>The return value of <code>navigator.gpu.requestAdapter()</code> is a promise. When that promise resolves, the result of the promise becomes the value of the await expression, and that value is assigned to adapter.</p> <p>An important thing to understand is that await does not actually stop and wait for the result\u2014that is, it does not bring the JavaScript program to a halt while waiting. Instead, the function that contains the await expression is suspended until the result is available, while other parts of the program can continue to run.</p> <p>The await operator can only be used inside an async function, that is, one whose definition is marked as async:</p> <pre><code>async function name( parameters ) {\n    // await can be used here\n}\n</code></pre> <p>When an async function is called, it is immediately executed up to the first occurrence of await in the function definition. At that point, the execution is suspended until the promise resolves or rejects. If it resolves, the execution resumes and continues until the next await, and so on. If at any point a promise rejects instead of resolving, an exception is thrown that can be caught and handled in the usual way. The function does not return until all of the promises in await expressions have resolved or until an exception causes the function to exit. Note that, necessarily, the function that called the async function is also suspended, even if that function is not async.</p> <p>What this all amounts to is that await expressions are much like ordinary expressions and async functions are much like ordinary functions. They are written and used in the same way. This can make promises easier to use than callback functions, and this usage is one of their big advantages. However, the fact that async functions can be suspended introduces a new source of potential problems: You have to remember that other, unrelated things can happen in the middle of an async function.</p> <p>Let's look at a specific example. The fetch API is an API for retrieving files from the Internet. (But without extra work, it can only fetch files from the same source as the web page on which it is used.) If url is the URL for some file, the function fetch(url) returns a promise that resolves when the file has been located or rejects when the file cannot be found. The expression await fetch(url) waits for the file to be located and returns the result. Curiously, the file has been located but not necessarily downloaded. If response is the object returned by await fetch(url), then the function response.text() returns another promise that resolves when the contents of the file are available. The value of await response.text() will be the file contents. A function to retrieve a text file and place its content in an element on the web page could be written like this:</p> <pre><code>async function loadTextFile( textFileURL ) {\nlet response = await fetch(textFileURL);\nlet text = await response.text();\ndocument.getElementById(\"textdisplay\").innerHTML = text;\n}\n</code></pre> <p>This will work, but might throw an exception, for example if access to the file is not allowed or if no such file exists. We might want to catch that exception. Furthermore, it can take some time to get the file, and other things can happen in the program while the function is waiting. In particular, the user might generate more events, maybe even an event that causes loadTextFile() to be called again, with a different URL! Now, there are two files being downloaded. Which one will appear on the web page? Which one should appear on the web page? This is the same sort of mess we can get into when doing parallel programming. (To be fair, we can get into a similar sort of mess when using callback functions, and there it can be even harder to untangle the mess.)</p> <p>Let's say that a file download is triggered when the user clicks a certain button. One solution to the double-download mess would be to disable that button while a download is in progress, to prevent another download from being started. So, an improved version of our program might go something more like this:</p> <pre><code>async function loadTextFile( textFileURL ) {\n    document.getElementById(\"downloadButton\").disabled = true;\n    document.getElementById(\"textdisplay\").innerHTML = \"Loading...\";\n    try {\n    let response = await fetch(textFileURL);\n    let text = await response.text();\n    document.getElementById(\"textdisplay\").innerHTML = text;\n    }\n    catch (e) {\n    document.getElementById(\"textdisplay\").innerHTML =\n        \"Can't fetch \" + textFileURL + \".  Error: \" + e;\n    }\n    finally {\n    document.getElementById(\"downloadButton\").disabled = false;\n    }\n}\n</code></pre> <p>The nice thing is that an async function looks essentially the same as a regular JavaScript function. The potential trap is that the flow of control in a program that uses async functions can be very different from the regular flow of control: Regular functions run from beginning to end with no interruption.</p>"},{"location":"cn/a1/s4/#a42-\u76f4\u63a5\u4f7f\u7528-promise","title":"A.4.2  \u76f4\u63a5\u4f7f\u7528 Promise","text":"<p>A.4.2  Using Promises Directly</p> \u4e2d\u6587\u82f1\u6587 <p>\u7b49\u5f85\u8fd0\u7b97\u7b26\u4f7f\u627f\u8bfa\u76f8\u5f53\u5bb9\u6613\u4f7f\u7528\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u5408\u9002\u7684\u3002JavaScript \u4e2d\u7684\u627f\u8bfa\u662f\u4e00\u4e2a\u5c5e\u4e8e\u540d\u4e3a Promise \u7684\u7c7b\u7684\u5bf9\u8c61\u3002\u8be5\u7c7b\u4e2d\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u627f\u8bfa\u89e3\u51b3\u6216\u62d2\u7edd\u65f6\u4f5c\u51fa\u54cd\u5e94\u3002\u5982\u679c somePromise \u662f\u4e00\u4e2a\u627f\u8bfa\uff0conResolve \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48</p> <pre><code>somePromise.then( onResolve );\n</code></pre> <p>\u5982\u679c\u627f\u8bfa\u89e3\u51b3\uff0c\u5219\u8ba1\u5212\u8c03\u7528 onResolve\u3002\u4f20\u9012\u7ed9 onResolve \u7684\u53c2\u6570\u5c06\u662f\u627f\u8bfa\u7684\u7ed3\u679c\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u56de\u5230\u4e86\u4f7f\u7528\u56de\u8c03\u51fd\u6570\u7684\u72b6\u6001\uff1asomePromise.then() \u7acb\u5373\u8fd4\u56de\uff0c\u5982\u679c at all\uff0conResolve \u5c06\u5728\u67d0\u4e2a\u4e0d\u786e\u5b9a\u7684\u672a\u6765\u65f6\u95f4\u88ab\u8c03\u7528\u3002then() \u7684\u53c2\u6570\u5f80\u5f80\u662f\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u5047\u8bbe textPromise \u662f\u4e00\u4e2a\u6700\u7ec8\u4ea7\u751f\u5b57\u7b26\u4e32\u7684\u627f\u8bfa\uff0c</p> <pre><code>textPromise.then(\n    str =&gt; alert(\"Hey, I just got \" + str)\n);\n</code></pre> <p>\u73b0\u5728\uff0c\u6280\u672f\u4e0a\uff0conResolve \u56de\u8c03\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5728 promise.then(onResolve) \u4e2d\u5fc5\u987b\u662f\u53e6\u4e00\u4e2a\u627f\u8bfa\u3002\u5982\u679c\u4e0d\u662f\uff0c\u7cfb\u7edf\u5c06\u4ee5\u7acb\u5373\u89e3\u51b3\u4e3a\u540c\u4e00\u503c\u7684\u627f\u8bfa\u5305\u88c5\u8fd4\u56de\u503c\u3002\u7531 onResolve \u8fd4\u56de\u7684\u627f\u8bfa\u6210\u4e3a\u5bf9 promise.then() \u8c03\u7528\u7684\u8fd4\u56de\u503c\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728 promise.then() \u7684\u8fd4\u56de\u503c\u4e0a\u94fe\u5f0f\u53e6\u4e00\u4e2a then()\u3002\u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528 then() \u91cd\u5199\u6211\u4eec\u7684 loadTextFile() \u793a\u4f8b\u3002\u57fa\u672c\u7248\u672c\u662f\uff1a</p> <pre><code>function loadTextFileWithThen( textFileURL ) {\n    fetch(textFileURL)\n        .then( response =&gt; response.text() )\n        .then( text =&gt; document.getElementById(\"textdisplay\").innerHTML = text )\n}\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0cfetch(textFileURL) \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 then() \u9644\u52a0\u5230\u8be5\u627f\u8bfa\u4e0a\u3002\u5f53\u533f\u540d\u51fd\u6570 response =&gt; response.text() \u88ab\u8c03\u7528\u65f6\uff0c\u5176\u53c2\u6570 response \u7684\u503c\u662f fetch(textFileURL) \u89e3\u51b3\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\u8fd4\u56de\u503c response.text() \u662f\u4e00\u4e2a\u627f\u8bfa\uff0c\u8be5\u627f\u8bfa\u6210\u4e3a\u7b2c\u4e00\u4e2a then() \u7684\u8fd4\u56de\u503c\u3002\u7b2c\u4e8c\u4e2a then() \u9644\u52a0\u5230\u8be5\u627f\u8bfa\u4e0a\u3002\u5f53\u7b2c\u4e8c\u4e2a then() \u4e2d\u7684\u56de\u8c03\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u7684\u53c2\u6570\u662f\u7531 result.text() \u627f\u8bfa\u4ea7\u751f\u7684\u7ed3\u679c\u3002</p> <p>\u6ce8\u610f\uff0cloadTextFileWithThen() \u4e0d\u662f\u5f02\u6b65\u51fd\u6570\u3002\u5b83\u4e0d\u4f7f\u7528 await\u3002\u5f53\u5b83\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u7acb\u5373\u8fd4\u56de\uff0c\u4e0d\u7b49\u5f85\u6587\u672c\u5230\u8fbe\u3002</p> <p>\u73b0\u5728\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u77e5\u9053\u5982\u679c\u627f\u8bfa\u88ab\u62d2\u7edd\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u62d2\u7edd\u4f1a\u5bfc\u81f4\u5f02\u5e38\uff0c\u4f46\u8be5\u5f02\u5e38\u5728\u67d0\u4e2a\u4e0d\u786e\u5b9a\u7684\u672a\u6765\u65f6\u95f4\u88ab\u629b\u51fa\uff0c\u5f53\u627f\u8bfa\u88ab\u62d2\u7edd\u65f6\u3002\u5b9e\u9645\u4e0a\uff0cthen() \u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u5982\u679c\u627f\u8bfa\u88ab\u62d2\u7edd\u5219\u88ab\u8c03\u7528\u3002\u7136\u800c\uff0c\u4f60\u66f4\u6709\u53ef\u80fd\u4f7f\u7528 Promise \u7c7b\u7684\u53e6\u4e00\u4e2a\u65b9\u6cd5\u6765\u54cd\u5e94\u62d2\u7edd\uff1a</p> <pre><code>somePromise.catch( onReject )\n</code></pre> <p>\u53c2\u6570 onReject \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c\u627f\u8bfa\u88ab\u62d2\u7edd\uff08\u6216\u8005\uff0c\u5f53 catch() \u9644\u52a0\u5230 then() \u8c03\u7528\u94fe\u65f6\uff0c\u94fe\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u627f\u8bfa\u88ab\u62d2\u7edd\uff09\u5c06\u88ab\u8c03\u7528\u3002\u4f20\u9012\u7ed9 onReject \u7684\u53c2\u6570\u5c06\u662f\u7531\u62d2\u7edd\u7684\u627f\u8bfa\u751f\u6210\u7684\u9519\u8bef\u6d88\u606f\u3002\uff08catch() \u4e5f\u4f1a\u6355\u83b7\u7531\u627f\u8bfa\u751f\u6210\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u5f02\u5e38\u3002\uff09\u5e76\u4e14 Promise \u7c7b\u4e2d\u6709\u4e00\u4e2a finally() \u65b9\u6cd5\uff0c\u5b83\u8ba1\u5212\u5728 then/catch \u94fe\u7684\u672b\u5c3e\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002finally() \u4e2d\u7684\u56de\u8c03\u51fd\u6570\u53c2\u6570\u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u50cf\u4e0b\u9762\u8fd9\u6837\u6539\u8fdb\u6211\u4eec\u7684\u6587\u672c\u52a0\u8f7d\u793a\u4f8b\uff1a</p> <pre><code>function loadTextFileWithThen(textFileURL) {\n    document.getElementById(\"downloadButton\").disabled = true;\n    fetch(textFileURL)\n        .then( response =&gt; response.text() )\n        .then( text =&gt; document.getElementById(\"textdisplay\").innerHTML = text )\n        .catch( e =&gt; document.getElementById(\"textdisplay\").innerHTML =\n                    \"Can't fetch \" + textFileURL + \".  Error: \" + e )\n        .finally( () =&gt; document.getElementById(\"downloadButton\").disabled = false )\n}\n</code></pre> <p>\u901a\u5e38\uff0c\u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\u548c await\u3002\u4f60\u53ea\u5e94\u5076\u5c14\u4f7f\u7528 then() \u548c catch()\u3002\u867d\u7136\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u81ea\u5df1\u4f7f\u7528\u57fa\u4e8e\u627f\u8bfa\u7684 API\uff0c\u4f46\u4f60\u53ef\u80fd\u6c38\u8fdc\u4e0d\u9700\u8981\u521b\u5efa\u81ea\u5df1\u7684\u627f\u8bfa\u5bf9\u8c61\u2014\u2014\u8fd9\u4e0d\u662f\u672c\u6559\u79d1\u4e66\u6240\u6db5\u76d6\u7684\u4e3b\u9898\u3002</p> <p>The await operator makes promises fairly easy to use, but it is not always appropriate. A JavaScript promise is an object belonging to a class named Promise. There are methods in that class that make it possible to respond when a promise resolves or rejects. If somePromise is a promise, and onResolve is a function, then</p> <pre><code>somePromise.then( onResolve );\n</code></pre> <p>schedules onResolve to be called if and when the promise resolves. The parameter that is passed to onResolve will be the result of the promise. Note that we are essentially back to using callback functions: somePromise.then() returns immediately, and onResolve will be called, if at all, at some indeterminate future time. The parameter to then() is often an anonymous function. For example, assuming textPromise is a promise that eventually produces a string,</p> <pre><code>textPromise.then(\n    str =&gt; alert(\"Hey, I just got \" + str)\n);\n</code></pre> <p>Now, technically, the return value of the onResolve callback in promise.then(onResolve) must be another promise. If not, the system will wrap the return value in a promise that immediately resolves to the same value. The promise that is returned by onResolve becomes the return value of the call to promise.then(). This means that you can chain another then() onto the return value from promise.then(). For example, let's rewrite our loadTextFile() example using then(). The basic version is:</p> <pre><code>function loadTextFileWithThen( textFileURL ) {\nfetch(textFileURL)\n    .then( response =&gt; response.text() )\n    .then( text =&gt; document.getElementById(\"textdisplay\").innerHTML = text )\n}\n</code></pre> <p>Here, fetch(textFileURL) returns a promise, and we can attach then() to that promise. When the anonymous function, response =&gt; response.text(), is called, the value of its parameter, response, is the result produced when fetch(textFileURL) resolves. The return value response.text() is a promise, and that promise becomes the return value from the first then(). The second then() is attached to that promise. When the callback function in the second then() is called, its parameter is the result produced by the result.text() promise.</p> <p>Note that loadTextFileWithThen()is not an async function. It does not use await. When it is called, it returns immediately, without waiting for the text to arrive.</p> <p>Now, you might wonder what happens if the promise rejects. The rejection causes an exception, but that exception is thrown at some indeterminate future time, when the promise rejects. Now, in fact, then() takes an optional second parameter that is a callback function, to be called if the promise rejects. However, you are more likely to respond to the rejection by using another method from the Promise class:</p> <pre><code>somePromise.catch( onReject )\n</code></pre> <p>The parameter, onReject, is a function that will be called if and when the promise rejects (or, when catch() is attached to a chain of calls to then(), when any of the promises in the chain rejects). The parameter to onReject will be the error message produced by the promise that rejects. (A catch() will also catch other kinds of exceptions that are generated by the promise.) And there is a finally() method in the Promise class that schedules a callback function to be called at the end of a then/catch chain. The callback function parameter in finally() takes no parameters. So, we might improve our text-loading example as follows:</p> <pre><code>function loadTextFileWithThen(textFileURL) {\ndocument.getElementById(\"downloadButton\").disabled = true;\nfetch(textFileURL)\n    .then( response =&gt; response.text() )\n    .then( text =&gt; document.getElementById(\"textdisplay\").innerHTML = text )\n    .catch( e =&gt; document.getElementById(\"textdisplay\").innerHTML =\n                    \"Can't fetch \" + textFileURL + \".  Error: \" + e )\n    .finally( () =&gt; document.getElementById(\"downloadButton\").disabled = false )\n}\n</code></pre> <p>Generally, you should try to use async functions and await when possible. You should only occasionally have to use then() and catch(). And while you might find yourself using promise-based APIs, you will probably never need to create your own promise objects\u2014a topic that is not covered in this textbook.</p>"},{"location":"cn/a2/","title":"\u9644\u5f55 B\uff1a Blender\uff1a3D \u5efa\u6a21\u7a0b\u5e8f","text":"<p>Blender: A 3D Modeling Program</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s1/","title":"B.1 \u8282  Blender \u57fa\u7840\u77e5\u8bc6","text":"<p>Section B.1  Blender Basics</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s1/#b11-3d-\u89c6\u56fe","title":"B.1.1  3D \u89c6\u56fe","text":"<p>B.1.1  The 3D View</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s1/#b12-\u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u573a\u666f\u4e2d","title":"B.1.2  \u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u573a\u666f\u4e2d","text":"<p>B.1.2  Adding Objects to the Scene</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s1/#b13-\u7f16\u8f91\u6a21\u5f0f","title":"B.1.3  \u7f16\u8f91\u6a21\u5f0f","text":"<p>B.1.3  Edit Mode</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s1/#b14-\u5149\u6750\u8d28\u548c\u7eb9\u7406","title":"B.1.4  \u5149\u3001\u6750\u8d28\u548c\u7eb9\u7406","text":"<p>B.1.4  Light, Material, and Texture</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s1/#b15-\u4fdd\u5b58\u60a8\u7684\u5de5\u4f5c","title":"B.1.5  \u4fdd\u5b58\u60a8\u7684\u5de5\u4f5c","text":"<p>B.1.5  Saving Your Work</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s1/#b16-\u66f4\u591a\u529f\u80fd","title":"B.1.6  \u66f4\u591a\u529f\u80fd","text":"<p>B.1.6  More Features</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s2/","title":"B.2 \u8282  Blender \u5efa\u6a21","text":"<p>Section B.2  Blender Modeling</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s2/#b21-\u6587\u672c","title":"B.2.1  \u6587\u672c","text":"<p>B.2.1  Text</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s2/#b22-\u66f2\u7ebf","title":"B.2.2  \u66f2\u7ebf","text":"<p>B.2.2  Curves</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s2/#b23-\u6bd4\u4f8b\u7f16\u8f91","title":"B.2.3  \u6bd4\u4f8b\u7f16\u8f91","text":"<p>B.2.3  Proportional Editing</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s2/#b24-\u62c9\u4f38\u7f51\u683c","title":"B.2.4  \u62c9\u4f38\u7f51\u683c","text":"<p>B.2.4  Extruding Meshes</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s2/#b25-\u7f51\u683c\u4fee\u6539\u5668","title":"B.2.5  \u7f51\u683c\u4fee\u6539\u5668","text":"<p>B.2.5  Mesh Modifiers</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s3/","title":"B.3 \u8282  Blender \u52a8\u753b","text":"<p>Section B.3  Blender Animation</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s3/#b31-\u5173\u952e\u5e27\u52a8\u753b\u548c\u51fd\u6570\u66f2\u7ebf","title":"B.3.1  \u5173\u952e\u5e27\u52a8\u753b\u548c\u51fd\u6570\u66f2\u7ebf","text":"<p>B.3.1  Keyframe Animation and F-Curves</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s3/#b32-\u8ffd\u8e2a","title":"B.3.2  \u8ffd\u8e2a","text":"<p>B.3.2  Tracking</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s3/#b33-\u8def\u5f84\u52a8\u753b","title":"B.3.3  \u8def\u5f84\u52a8\u753b","text":"<p>B.3.3  Path Animation</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s3/#b34-\u6e32\u67d3\u52a8\u753b","title":"B.3.4  \u6e32\u67d3\u52a8\u753b","text":"<p>B.3.4  Rendering an Animation</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s4/","title":"B.4 \u8282  \u6709\u5173\u5149\u548c\u6750\u6599\u7684\u66f4\u591a\u4fe1\u606f","text":"<p>Section B.4  More on Light and Material</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s4/#b41-\u5149\u7ebf","title":"B.4.1  \u5149\u7ebf","text":"<p>B.4.1  Lighting</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s4/#b42-eevee-\u4e0e-cycles","title":"B.4.2  Eevee \u4e0e Cycles","text":"<p>B.4.2  Eevee versus Cycles</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a2/s4/#b43-\u7740\u8272\u5668\u7f16\u8f91\u5668","title":"B.4.3  \u7740\u8272\u5668\u7f16\u8f91\u5668","text":"<p>B.4.3  The Shader Editor</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a3/","title":"\u9644\u5f55 C\uff1a \u7528\u4e8e 2D \u56fe\u5f62\u7684 Gimp \u548c Inkscape","text":"<p>Gimp and Inkscape for 2D Graphics</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a3/s1/","title":"C.1 \u8282  Gimp\uff1a2D \u7ed8\u753b\u7a0b\u5e8f","text":"<p>Section C.1  Gimp: A 2D Painting Program</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a3/s1/#c11-\u7ed8\u753b\u5de5\u5177","title":"C.1.1  \u7ed8\u753b\u5de5\u5177","text":"<p>C.1.1  Painting Tools</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a3/s1/#c12-\u9009\u62e9\u548c\u8def\u5f84","title":"C.1.2  \u9009\u62e9\u548c\u8def\u5f84","text":"<p>C.1.2  Selections and Paths</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a3/s1/#c13-\u5c42","title":"C.1.3  \u5c42","text":"<p>C.1.3  Layers</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/a3/s2/","title":"C.2 \u8282  Inkscape\uff1a2D \u7ed8\u56fe\u7a0b\u5e8f","text":"<p>Inkscape: A 2D Drawing Program</p> \u4e2d\u6587\u82f1\u6587"},{"location":"cn/c1/","title":"\u7b2c\u4e00\u7ae0 \u7b80\u4ecb","text":"<p>\u672f\u8bed \u201c\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66(computer graphics)\u201d \u4e00\u8bcd\u6307\u6d89\u53ca\u5728\u8ba1\u7b97\u673a\u4e0a\u521b\u5efa\u6216\u64cd\u7eb5\u56fe\u50cf\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u5305\u62ec\u52a8\u753b\u56fe\u50cf\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e7f\u6cdb\u7684\u9886\u57df\uff0c\u53d8\u5316\u548c\u8fdb\u6b65\u4f3c\u4e4e\u4ee5\u4ee4\u4eba\u773c\u82b1\u7f2d\u4e71\u7684\u901f\u5ea6\u51fa\u73b0\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u5f88\u96be\u77e5\u9053\u4ece\u54ea\u91cc\u5f00\u59cb\u3002\u7136\u800c\uff0c\u6709\u4e00\u4e9b\u57fa\u672c\u7406\u5ff5\u6784\u6210\u4e86\u5927\u591a\u6570\u8ba1\u7b97\u673a\u56fe\u5f62\u5e94\u7528\u7684\u57fa\u7840\u3002\u672c\u4e66\u8bd5\u56fe\u6db5\u76d6\u8fd9\u4e9b\u57fa\u7840\u7406\u5ff5\uff0c\u6216\u8005\u81f3\u5c11\u5c3d\u53ef\u80fd\u591a\u5730\u6db5\u76d6\u5b83\u4eec\uff0c\u4ee5\u9002\u5e94\u4e00\u4e2a\u5b66\u671f\u7684\u5927\u5b66\u6c34\u5e73\u8bfe\u7a0b\u3002\u867d\u7136\u5728\u7b2c\u4e00\u95e8\u8bfe\u7a0b\u4e2d\u4e0d\u53ef\u80fd\u8986\u76d6\u6574\u4e2a\u9886\u57df\uff0c\u751a\u81f3\u5176\u4e2d\u7684\u5927\u90e8\u5206\u5185\u5bb9\uff0c\u4f46\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002</p> <p>\u672c\u7b80\u77ed\u7ae0\u8282\u63d0\u4f9b\u4e86\u5bf9\u672c\u4e66\u5176\u4f59\u90e8\u5206\u6db5\u76d6\u5185\u5bb9\u7684\u6982\u8ff0\u548c\u4ecb\u7ecd\uff0c\u4f46\u6ca1\u6709\u8fc7\u591a\u7ec6\u8282\u3002</p> <p>\u7b2c\u4e00\u7ae0\u5185\u5bb9\uff1a</p> <ul> <li>\u7b2c 1 \u8282\uff1a\u7ed8\u753b\u4e0e\u7ed8\u56fe</li> <li>\u7b2c 2 \u8282\uff1a\u4e09\u7ef4(3D)\u56fe\u5f62\u7684\u8981\u7d20</li> <li>\u7b2c 3 \u8282\uff1a\u786c\u4ef6\u4e0e\u8f6f\u4ef6</li> </ul>"},{"location":"cn/c1/s1/","title":"\u7b2c 1 \u8282 \u7ed8\u753b\u4e0e\u7ed8\u56fe","text":"<p>Painting and Drawing</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u4e66\u7684\u4e3b\u8981\u91cd\u70b9\u662f\u4e09\u7ef4\uff083D\uff09\u56fe\u5f62\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u662f\u4e3a\u4e86\u4ea7\u751f\u573a\u666f\u7684\u4e09\u7ef4\u6a21\u578b\u3002\u4f46\u6700\u7ec8\uff0c\u5728\u51e0\u4e4e\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u9879\u76ee\u7684\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u50cf\u3002\u5f53\u7136\uff0c\u76f4\u63a5\u5236\u4f5c\u548c\u64cd\u7eb5\u4e8c\u7ef4\u56fe\u50cf\u4e5f\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u8bfe\u9898\u3002\u6b64\u5916\uff0c\u8bb8\u591a\u601d\u60f3\u4ece\u4e8c\u7ef4\u5230\u4e09\u7ef4\u90fd\u662f\u901a\u7528\u7684\u3002\u56e0\u6b64\uff0c\u4ece\u4e8c\u7ef4\u56fe\u5f62\u5f00\u59cb\u662f\u6709\u610f\u4e49\u7684\u3002</p> <p>\u5728\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u5448\u73b0\u7684\u56fe\u50cf\u7531\u50cf\u7d20\u7ec4\u6210\u3002\u5c4f\u5e55\u7531\u50cf\u7d20(pixels)\u7684\u77e9\u5f62\u7f51\u683c\u7ec4\u6210\uff0c \u6392\u5217\u6210\u884c\u548c\u5217\u3002\u50cf\u7d20\u8db3\u591f\u5c0f\uff0c\u4ee5\u81f3\u4e8e\u5b83\u4eec\u4e0d\u5bb9\u6613\u88ab\u5355\u72ec\u770b\u5230\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u8bb8\u591a\u975e\u5e38\u9ad8\u5206\u8fa8\u7387\u7684\u663e\u793a\u5668\uff0c\u5b83\u4eec\u57fa\u672c\u4e0a\u53d8\u5f97\u770b\u4e0d\u89c1\u4e86\u3002\u5728\u7ed9\u5b9a\u65f6\u95f4\uff0c\u6bcf\u4e2a\u50cf\u7d20\u53ea\u80fd\u663e\u793a\u4e00\u79cd\u989c\u8272\u3002\u5982\u4eca\uff0c\u5927\u591a\u6570\u5c4f\u5e55\u4f7f\u752824\u4f4d\u989c\u8272\uff0c\u5176\u4e2d\u989c\u8272\u53ef\u4ee5\u7531\u4e09\u4e2a8\u4f4d\u6570\u5b57\u6307\u5b9a\uff0c\u5206\u522b\u7ed9\u51fa\u989c\u8272\u4e2d\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u7684\u7ea7\u522b\u3002\u5c4f\u5e55\u4e0a\u53ef\u4ee5\u663e\u793a\u7684\u4efb\u4f55\u989c\u8272\u90fd\u7531\u8fd9\u4e09\u79cd\u201c\u4e3b\u201d\u989c\u8272\u7684\u67d0\u79cd\u7ec4\u5408\u6784\u6210\u3002\u8fd8\u6709\u5176\u4ed6\u683c\u5f0f\uff0c\u4f8b\u5982\u7070\u5ea6(grayscale)\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u90fd\u662f\u4e00\u4e9b\u7070\u5ea6\u7684\u9634\u5f71\uff0c\u5e76\u4e14\u50cf\u7d20\u989c\u8272\u7531\u4e00\u4e2a\u6570\u5b57\u7ed9\u51fa\uff0c\u8be5\u6570\u5b57\u6307\u5b9a\u4e86\u9ed1\u5230\u767d\u6bd4\u4f8b\u4e0a\u7684\u7070\u5ea6\u7ea7\u522b\u3002\u901a\u5e38\u4f7f\u7528256\u4e2a\u7070\u5ea6\u7ea7\u522b\u3002\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u4f7f\u7528\u7d22\u5f15\u8272(indexed color)\uff0c\u5176\u4e2d\u53ea\u80fd\u663e\u793a\u4e00\u5c0f\u90e8\u5206\u989c\u8272\uff0c\u901a\u5e38\u662f16\u6216256\u79cd\u3002\u5bf9\u4e8e\u7d22\u5f15\u8272\u663e\u793a\u5668\uff0c\u6709\u4e00\u4e2a\u53ef\u80fd\u989c\u8272\u7684\u7f16\u53f7\u5217\u8868\uff0c\u50cf\u7d20\u7684\u989c\u8272\u7531\u4e00\u4e2a\u6574\u6570\u6307\u5b9a\uff0c\u8be5\u6574\u6570\u7ed9\u51fa\u4e86\u989c\u8272\u5728\u5217\u8868\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <p>\u65e0\u8bba\u5982\u4f55\uff0c\u5c4f\u5e55\u4e0a\u6240\u6709\u50cf\u7d20\u7684\u989c\u8272\u503c\u90fd\u5b58\u50a8\u5728\u4e00\u4e2a\u79f0\u4e3a\u5e27\u7f13\u51b2\u533a(frame buffer)\u7684\u5927\u578b\u5185\u5b58\u5757\u4e2d\u3002\u66f4\u6539\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u9700\u8981\u66f4\u6539\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u3002\u5c4f\u5e55\u6bcf\u79d2\u91cd\u7ed8\u8bb8\u591a\u6b21\uff0c\u56e0\u6b64\u51e0\u4e4e\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u66f4\u6539\u540e\uff0c\u5c4f\u5e55\u4e0a\u50cf\u7d20\u7684\u989c\u8272\u5c31\u4f1a\u66f4\u6539\u4ee5\u5339\u914d\uff0c\u5e76\u4e14\u663e\u793a\u7684\u56fe\u50cf\u4f1a\u66f4\u6539\u3002</p> <p>\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u662f\u5149\u6805\u56fe\u5f62(raster graphics)\u7684\u57fa\u672c\u6a21\u578b\u3002\u672f\u8bed\u201c\u5149\u6805\u201d\u5728\u6280\u672f\u4e0a\u6307\u7684\u662f\u65e7\u7684\u771f\u7a7a\u7ba1\u8ba1\u7b97\u673a\u76d1\u89c6\u5668\u4e0a\u4f7f\u7528\u7684\u673a\u5236\uff1a\u7535\u5b50\u675f\u5c06\u6cbf\u7740\u50cf\u7d20\u884c\u79fb\u52a8\uff0c\u4f7f\u5b83\u4eec\u53d1\u5149\u3002\u7535\u5b50\u675f\u662f\u901a\u8fc7\u5f3a\u5927\u7684\u78c1\u94c1\u5c06\u5176\u504f\u8f6c\u4ee5\u6a2a\u7a7f\u5c4f\u5e55\u7684\uff0c\u675f\u8d8a\u5f3a\uff0c\u50cf\u7d20\u7684\u53d1\u5149\u5c31\u8d8a\u4eae\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8c03\u5236\u7535\u5b50\u675f\u7684\u5f3a\u5ea6\u6765\u63a7\u5236\u50cf\u7d20\u7684\u4eae\u5ea6\u3002\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u7528\u4e8e\u786e\u5b9a\u7535\u5b50\u675f\u7684\u5f3a\u5ea6\u3002\uff08\u5bf9\u4e8e\u5f69\u8272\u5c4f\u5e55\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u4e00\u4e2a\u7ea2\u70b9\u3001\u4e00\u4e2a\u7eff\u70b9\u548c\u4e00\u4e2a\u84dd\u70b9\uff0c\u7531\u675f\u5206\u522b\u7167\u4eae\u3002\uff09</p> <p>\u73b0\u4ee3\u7684\u5e73\u677f\u8ba1\u7b97\u673a\u76d1\u89c6\u5668\u4e0d\u662f\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u5149\u6805\u3002\u6ca1\u6709\u79fb\u52a8\u7684\u7535\u5b50\u675f\u3002\u63a7\u5236\u50cf\u7d20\u989c\u8272\u7684\u673a\u5236\u56e0\u5c4f\u5e55\u7c7b\u578b\u800c\u5f02\u3002\u4f46\u5c4f\u5e55\u4ecd\u7136\u7531\u50cf\u7d20\u7ec4\u6210\uff0c\u5e76\u4e14\u6240\u6709\u50cf\u7d20\u7684\u989c\u8272\u503c\u4ecd\u7136\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u3002\u56fe\u50cf\u7531\u50cf\u7d20\u7f51\u683c\u7ec4\u6210\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u6570\u5b57\u989c\u8272\u503c\uff0c\u8fd9\u5c31\u662f\u5149\u6805\u56fe\u5f62\u7684\u6982\u5ff5\u3002</p> <p>The main focus of this book is three-dimensional (3D) graphics, where most of the work goes into producing a 3D model of a scene. But ultimately, in almost all cases, the end result of a computer graphics project is a two-dimensional image. And of course, the direct production and manipulation of 2D images is an important topic in its own right. Furthermore, a lot of ideas carry over from two dimensions to three. So, it makes sense to start with graphics in 2D.</p> <p>An image that is presented on the computer screen is made up of pixels. The screen consists of a rectangular grid of pixels, arranged in rows and columns. The pixels are small enough that they are not easy to see individually. In fact, for many very high-resolution displays, they become essentially invisible. At a given time, each pixel can show only one color. Most screens these days use 24-bit color, where a color can be specified by three 8-bit numbers, giving the levels of red, green, and blue in the color. Any color that can be shown on the screen is made up of some combination of these three \"primary\" colors. Other formats are possible, such as grayscale, where each pixel is some shade of gray and the pixel color is given by one number that specifies the level of gray on a black-to-white scale. Typically, 256 shades of gray are used. Early computer screens used indexed color, where only a small set of colors, usually 16 or 256, could be displayed. For an indexed color display, there is a numbered list of possible colors, and the color of a pixel is specified by an integer giving the position of the color in the list.</p> <p>In any case, the color values for all the pixels on the screen are stored in a large block of memory known as a frame buffer. Changing the image on the screen requires changing color values that are stored in the frame buffer. The screen is redrawn many times per second, so that almost immediately after the color values are changed in the frame buffer, the colors of the pixels on the screen will be changed to match, and the displayed image will change.</p> <p>A computer screen used in this way is the basic model of raster graphics. The term \"raster\" technically refers to the mechanism used on older vacuum tube computer monitors: An electron beam would move along the rows of pixels, making them glow. The beam was moved across the screen by powerful magnets that would deflect the path of the electrons. The stronger the beam, the brighter the glow of the pixel, so the brightness of the pixels could be controlled by modulating the intensity of the electron beam. The color values stored in the frame buffer were used to determine the intensity of the electron beam. (For a color screen, each pixel had a red dot, a green dot, and a blue dot, which were separately illuminated by the beam.)</p> <p>A modern flat-screen computer monitor is not a raster in the same sense. There is no moving electron beam. The mechanism that controls the colors of the pixels is different for different types of screen. But the screen is still made up of pixels, and the color values for all the pixels are still stored in a frame buffer. The idea of an image consisting of a grid of pixels, with numerical color values for each pixel, defines raster graphics.</p> \u4e2d\u6587\u82f1\u6587 <p>\u867d\u7136\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u662f\u4f7f\u7528\u50cf\u7d20\u8868\u793a\u7684\uff0c\u4f46\u6307\u5b9a\u5355\u4e2a\u50cf\u7d20\u989c\u8272\u5e76\u4e0d\u603b\u662f\u521b\u5efa\u56fe\u50cf\u7684\u6700\u4f73\u65b9\u5f0f\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u6307\u5b9a\u56fe\u50cf\u5305\u542b\u7684\u57fa\u672c\u51e0\u4f55\u5bf9\u8c61\uff0c\u4f8b\u5982\u7ebf\u6761\u3001\u5706\u5f62\u3001\u4e09\u89d2\u5f62\u548c\u77e9\u5f62\u7b49\u5f62\u72b6\u3002\u8fd9\u5c31\u662f\u5b9a\u4e49\u77e2\u91cf\u56fe\u5f62(vector graphics)\u7684\u7406\u5ff5\uff1a\u5c06\u56fe\u50cf\u8868\u793a\u4e3a\u5176\u5305\u542b\u7684\u51e0\u4f55\u5f62\u72b6\u7684\u5217\u8868\u3002\u4e3a\u4e86\u589e\u52a0\u8da3\u5473\u6027\uff0c\u8fd9\u4e9b\u5f62\u72b6\u53ef\u4ee5\u5177\u6709\u5c5e\u6027(attributes)\uff0c\u4f8b\u5982\u7ebf\u6761\u7684\u7c97\u7ec6\u6216\u586b\u5145\u77e9\u5f62\u7684\u989c\u8272\u3002\u5f53\u7136\uff0c\u5e76\u975e\u6bcf\u4e2a\u56fe\u50cf\u90fd\u53ef\u4ee5\u7531\u7b80\u5355\u7684\u51e0\u4f55\u5f62\u72b6\u7ec4\u6210\u3002\u5bf9\u4e8e\u7f8e\u4e3d\u7684\u65e5\u843d\u7167\u7247\uff08\u6216\u5927\u591a\u6570\u5176\u4ed6\u6444\u5f71\u56fe\u50cf\uff09\uff0c\u8fd9\u79cd\u65b9\u6cd5\u663e\u7136\u4e0d\u9002\u7528\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u8bb8\u591a\u7c7b\u578b\u7684\u56fe\u50cf\uff0c\u4f8b\u5982\u5efa\u7b51\u84dd\u56fe\u548c\u79d1\u5b66\u63d2\u56fe\uff0c\u5b83\u6548\u679c\u5f88\u597d\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u5728\u8ba1\u7b97\u673a\u53d1\u5c55\u7684\u65e9\u671f\u5386\u53f2\u4e2d\uff0c\u77e2\u91cf\u56fe\u5f62\u751a\u81f3\u76f4\u63a5\u7528\u4e8e\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u3002\u5f53\u7b2c\u4e00\u6279\u56fe\u5f62\u8ba1\u7b97\u673a\u663e\u793a\u5668\u95ee\u4e16\u65f6\uff0c\u5149\u6805\u663e\u793a\u5668\u7684\u901f\u5ea6\u592a\u6162\u3001\u4ef7\u683c\u592a\u9ad8\uff0c\u4e0d\u5207\u5b9e\u9645\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u53ef\u4ee5\u4ee5\u53e6\u4e00\u79cd\u65b9\u5f0f\u4f7f\u7528\u771f\u7a7a\u7ba1\u6280\u672f\uff1a\u7535\u5b50\u675f\u53ef\u4ee5\u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u4e00\u6761\u7ebf\uff0c\u53ea\u9700\u6cbf\u7740\u8be5\u7ebf\u79fb\u52a8\u675f\u3002\u77e2\u91cf\u56fe\u5f62\u663e\u793a\u5668\u5c06\u5b58\u50a8\u4e00\u4e2a\u5e94\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u7684\u7ebf\u6bb5\u663e\u793a\u5217\u8868(display list)\u3002\u7531\u4e8e\u5c4f\u5e55\u4e0a\u7684\u70b9\u53ea\u4f1a\u5728\u88ab\u7535\u5b50\u675f\u7167\u5c04\u540e\u77ed\u6682\u53d1\u5149\uff0c\u56fe\u5f62\u663e\u793a\u5668\u4f1a\u4e00\u904d\u53c8\u4e00\u904d\u5730\u904d\u5386\u663e\u793a\u5217\u8868\uff0c\u4e0d\u65ad\u5730\u91cd\u7ed8\u5217\u8868\u4e2d\u7684\u6240\u6709\u7ebf\u6761\u3002\u8981\u66f4\u6539\u56fe\u50cf\uff0c\u53ea\u9700\u8981\u66f4\u6539\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u5982\u679c\u663e\u793a\u5217\u8868\u53d8\u5f97\u592a\u957f\uff0c\u56fe\u50cf\u5c31\u4f1a\u5f00\u59cb\u95ea\u70c1\uff0c\u56e0\u4e3a\u4e00\u6761\u7ebf\u5728\u4e0b\u6b21\u91cd\u65b0\u7ed8\u5236\u4e4b\u524d\u4f1a\u6709\u673a\u4f1a\u53ef\u89c1\u5730\u6de1\u53bb\u3002</p> <p>\u4f46\u8fd9\u662f\u91cd\u70b9\uff1a\u5bf9\u4e8e\u53ef\u4ee5\u6307\u5b9a\u4e3a\u76f8\u5bf9\u8f83\u5c11\u6570\u91cf\u7684\u51e0\u4f55\u5f62\u72b6\u7684\u56fe\u50cf\u6765\u8bf4\uff0c\u4f7f\u7528\u77e2\u91cf\u8868\u793a\u6765\u8868\u793a\u56fe\u50cf\u6240\u9700\u7684\u4fe1\u606f\u91cf\u8981\u6bd4\u4f7f\u7528\u5149\u6805\u8868\u793a\u5c0f\u5f97\u591a\u3002\u8003\u8651\u4e00\u4e2a\u7531\u4e00\u5343\u6761\u7ebf\u6bb5\u7ec4\u6210\u7684\u56fe\u50cf\u3002\u5bf9\u4e8e\u56fe\u50cf\u7684\u77e2\u91cf\u8868\u793a\uff0c\u60a8\u53ea\u9700\u8981\u5b58\u50a8\u4e24\u5343\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5373\u7ebf\u6bb5\u7684\u7aef\u70b9\u3002\u8fd9\u53ea\u9700\u8981\u51e0\u5343\u5b57\u8282\u7684\u5185\u5b58\u3002\u8981\u5c06\u56fe\u50cf\u5b58\u50a8\u5728\u7528\u4e8e\u5149\u6805\u663e\u793a\u7684\u5e27\u7f13\u51b2\u533a\u4e2d\uff0c\u5c06\u9700\u8981\u66f4\u591a\u7684\u5185\u5b58\u3002\u540c\u6837\uff0c\u77e2\u91cf\u663e\u793a\u53ef\u4ee5\u6bd4\u5149\u6805\u663e\u793a\u66f4\u5feb\u5730\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u7ebf\u6761\uff0c\u540e\u8005\u5c06\u76f8\u540c\u7684\u56fe\u50cf\u4ece\u5e27\u7f13\u51b2\u533a\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\uff08\u7136\u800c\uff0c\u4e00\u65e6\u5149\u6805\u663e\u793a\u5668\u53d8\u5f97\u5feb\u901f\u4e14\u4ef7\u683c\u5408\u7406\uff0c\u5b83\u4eec\u5f88\u5feb\u5c31\u4f1a\u53d6\u4ee3\u77e2\u91cf\u663e\u793a\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u80fd\u591f\u76f8\u5f53\u597d\u5730\u663e\u793a\u6240\u6709\u7c7b\u578b\u7684\u56fe\u50cf\u3002\uff09</p> <p>Although images on the computer screen are represented using pixels, specifying individual pixel colors is not always the best way to create an image. Another way is to specify the basic geometric objects that it contains, shapes such as lines, circles, triangles, and rectangles. This is the idea that defines vector graphics: Represent an image as a list of the geometric shapes that it contains. To make things more interesting, the shapes can have attributes, such as the thickness of a line or the color that fills a rectangle. Of course, not every image can be composed from simple geometric shapes. This approach certainly wouldn't work for a picture of a beautiful sunset (or for most any other photographic image). However, it works well for many types of images, such as architectural blueprints and scientific illustrations.</p> <p>In fact, early in the history of computing, vector graphics was even used directly on computer screens. When the first graphical computer displays were developed, raster displays were too slow and expensive to be practical. Fortunately, it was possible to use vacuum tube technology in another way: The electron beam could be made to directly draw a line on the screen, simply by sweeping the beam along that line. A vector graphics display would store a display list of lines that should appear on the screen. Since a point on the screen would glow only very briefly after being illuminated by the electron beam, the graphics display would go through the display list over and over, continually redrawing all the lines on the list. To change the image, it would only be necessary to change the contents of the display list. Of course, if the display list became too long, the image would start to flicker because a line would have a chance to visibly fade before its next turn to be redrawn.</p> <p>But here is the point: For an image that can be specified as a reasonably small number of geometric shapes, the amount of information needed to represent the image is much smaller using a vector representation than using a raster representation. Consider an image made up of one thousand line segments. For a vector representation of the image, you only need to store the coordinates of two thousand points, the endpoints of the lines. This would take up only a few kilobytes of memory. To store the image in a frame buffer for a raster display would require much more memory. Similarly, a vector display could draw the lines on the screen more quickly than a raster display could copy the same image from the frame buffer to the screen. (As soon as raster displays became fast and inexpensive, however, they quickly displaced vector displays because of their ability to display all types of images reasonably well.)</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u6805\u56fe\u5f62\u548c\u77e2\u91cf\u56fe\u5f62\u4e4b\u95f4\u7684\u754c\u9650\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u591a\u4e2a\u9886\u57df\u4e2d\u4ecd\u7136\u5b58\u5728\u3002\u4f8b\u5982\uff0c\u5728\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u56fe\u50cf\u7684\u4e24\u7c7b\u7a0b\u5e8f\u4e4b\u95f4\u5b58\u5728\u660e\u663e\u7684\u533a\u522b\uff1a\u7ed8\u753b\u7a0b\u5e8f(painting programs)\u548c\u7ed8\u56fe\u7a0b\u5e8f(drawing programs)\u3002\u5728\u7ed8\u753b\u7a0b\u5e8f\u4e2d\uff0c\u56fe\u50cf\u8868\u793a\u4e3a\u50cf\u7d20\u7f51\u683c\uff0c\u5e76\u4e14\u7528\u6237\u901a\u8fc7\u4e3a\u50cf\u7d20\u5206\u914d\u989c\u8272\u6765\u521b\u5efa\u56fe\u50cf\u3002\u8fd9\u53ef\u80fd\u901a\u8fc7\u4f7f\u7528\u50cf\u753b\u5bb6\u7684\u753b\u7b14\u90a3\u6837\u7684\u201c\u7ed8\u56fe\u5de5\u5177\u201d\uff0c\u751a\u81f3\u901a\u8fc7\u7ed8\u5236\u7ebf\u6761\u6216\u77e9\u5f62\u7b49\u51e0\u4f55\u5f62\u72b6\u7684\u5de5\u5177\u6765\u5b8c\u6210\u3002\u4f46\u7ed8\u753b\u7a0b\u5e8f\u7684\u91cd\u70b9\u662f\u5bf9\u5355\u4e2a\u50cf\u7d20\u7740\u8272\uff0c\u800c\u53ea\u4fdd\u5b58\u50cf\u7d20\u7684\u989c\u8272\u3002\u4e3a\u4e86\u4f7f\u8fd9\u4e00\u70b9\u66f4\u6e05\u695a\uff0c\u5047\u8bbe\u60a8\u4f7f\u7528\u7ed8\u753b\u7a0b\u5e8f\u7ed8\u5236\u4e86\u4e00\u5e62\u623f\u5b50\uff0c\u7136\u540e\u5728\u623f\u5b50\u524d\u9762\u753b\u4e86\u4e00\u68f5\u6811\u3002\u5982\u679c\u60a8\u7136\u540e\u64e6\u9664\u4e86\u6811\uff0c\u60a8\u53ea\u4f1a\u770b\u5230\u4e00\u4e2a\u7a7a\u767d\u7684\u80cc\u666f\uff0c\u800c\u4e0d\u662f\u4e00\u680b\u623f\u5b50\u3002\u4e8b\u5b9e\u4e0a\uff0c\u56fe\u50cf\u4ece\u6765\u6ca1\u6709\u771f\u6b63\u5305\u542b\u201c\u623f\u5b50\u201d\u2014\u2014\u53ea\u662f\u72ec\u7acb\u7740\u8272\u7684\u50cf\u7d20\uff0c\u89c2\u770b\u8005\u53ef\u80fd\u4f1a\u5c06\u5176\u89c6\u4e3a\u7ec4\u6210\u623f\u5b50\u56fe\u7247\u7684\u90e8\u5206\u3002</p> <p>\u5728\u7ed8\u56fe\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6237\u901a\u8fc7\u6dfb\u52a0\u51e0\u4f55\u5f62\u72b6\u6765\u521b\u5efa\u56fe\u50cf\uff0c\u56fe\u50cf\u8868\u793a\u4e3a\u8fd9\u4e9b\u5f62\u72b6\u7684\u5217\u8868\u3002\u5982\u679c\u60a8\u5728\u56fe\u50cf\u4e2d\u653e\u7f6e\u4e86\u4e00\u4e2a\u623f\u5b50\u5f62\u72b6\uff08\u6216\u7ec4\u6210\u623f\u5b50\u7684\u5f62\u72b6\u96c6\u5408\uff09\uff0c\u7136\u540e\u5728\u623f\u5b50\u4e0a\u653e\u7f6e\u4e86\u4e00\u68f5\u6811\u5f62\u72b6\uff0c\u90a3\u4e48\u623f\u5b50\u4ecd\u7136\u5b58\u5728\uff0c\u56e0\u4e3a\u5b83\u5b58\u50a8\u5728\u56fe\u50cf\u5305\u542b\u7684\u5f62\u72b6\u5217\u8868\u4e2d\u3002\u5982\u679c\u5220\u9664\u4e86\u6811\uff0c\u623f\u5b50\u4ecd\u5c06\u5b58\u5728\u4e8e\u56fe\u50cf\u4e2d\uff0c\u5c31\u50cf\u5728\u6dfb\u52a0\u6811\u4e4b\u524d\u4e00\u6837\u3002\u6b64\u5916\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u9009\u62e9\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u5f62\u72b6\u5e76\u79fb\u52a8\u5b83\u6216\u6539\u53d8\u5176\u5927\u5c0f\uff0c\u56e0\u6b64\u7ed8\u56fe\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u5957\u4e30\u5bcc\u7684\u7f16\u8f91\u64cd\u4f5c\uff0c\u8fd9\u5728\u7ed8\u753b\u7a0b\u5e8f\u4e2d\u662f\u4e0d\u53ef\u80fd\u7684\u3002\uff08\u7136\u800c\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\uff09</p> <p>\u4e00\u4e2a\u5b9e\u7528\u7684\u56fe\u50cf\u521b\u5efa\u548c\u7f16\u8f91\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u7ed3\u5408\u7ed8\u753b\u548c\u7ed8\u56fe\u7684\u5143\u7d20\uff0c\u5c3d\u7ba1\u5176\u4e2d\u4e00\u79cd\u901a\u5e38\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002\u4f8b\u5982\uff0c\u7ed8\u56fe\u7a0b\u5e8f\u53ef\u4ee5\u5141\u8bb8\u7528\u6237\u5305\u542b\u5149\u6805\u7c7b\u578b\u7684\u56fe\u50cf\uff0c\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u5f62\u72b6\u3002\u7ed8\u753b\u7a0b\u5e8f\u53ef\u80fd\u5141\u8bb8\u7528\u6237\u521b\u5efa\u201c\u56fe\u5c42\u201d\uff0c\u8fd9\u4e9b\u662f\u53ef\u4ee5\u53e0\u52a0\u5728\u4e00\u8d77\u4ee5\u521b\u5efa\u6700\u7ec8\u56fe\u50cf\u7684\u5355\u72ec\u56fe\u50cf\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u50cf\u7ed8\u56fe\u7a0b\u5e8f\u4e2d\u7684\u5f62\u72b6\u4e00\u6837\u64cd\u4f5c\u8fd9\u4e9b\u56fe\u5c42\uff08\u56e0\u6b64\uff0c\u5373\u4f7f\u623f\u5b50\u7684\u56fe\u50cf\u5728\u6811\u7684\u540e\u9762\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5c06\u623f\u5b50\u548c\u6811\u4fdd\u6301\u5728\u5355\u72ec\u7684\u56fe\u5c42\u4e2d\uff09\u3002</p> <p>\u4e24\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u56fe\u5f62\u7a0b\u5e8f\u662fAdobe Photoshop\u548cAdobe Illustrator\u3002Photoshop\u5c5e\u4e8e\u7ed8\u753b\u7a0b\u5e8f\u7c7b\u522b\uff0c\u800cIllustrator\u66f4\u50cf\u662f\u7ed8\u56fe\u7a0b\u5e8f\u3002\u5728\u81ea\u7531\u8f6f\u4ef6\u9886\u57df\uff0cGNU\u56fe\u50cf\u5904\u7406\u7a0b\u5e8fGimp\u662fPhotoshop\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u66ff\u4ee3\u54c1\uff0c\u800cInkscape\u662f\u4e00\u4e2a\u76f8\u5f53\u80fd\u5e72\u7684\u514d\u8d39\u7ed8\u56fe\u7a0b\u5e8f\u3002Gimp\u548cInkscape\u7684\u7b80\u8981\u4ecb\u7ecd\u53ef\u4ee5\u5728\u9644\u5f55C\u4e2d\u627e\u5230\u3002</p> <p>The divide between raster graphics and vector graphics persists in several areas of computer graphics. For example, it can be seen in a division between two categories of programs that can be used to create images: painting programs and drawing programs. In a painting program, the image is represented as a grid of pixels, and the user creates an image by assigning colors to pixels. This might be done by using a \"drawing tool\" that acts like a painter's brush, or even by tools that draw geometric shapes such as lines or rectangles. But the point in a painting program is to color the individual pixels, and it is only the pixel colors that are saved. To make this clearer, suppose that you use a painting program to draw a house, then draw a tree in front of the house. If you then erase the tree, you'll only reveal a blank background, not a house. In fact, the image never really contained a \"house\" at all\u2014only individually colored pixels that the viewer might perceive as making up a picture of a house.</p> <p>In a drawing program, the user creates an image by adding geometric shapes, and the image is represented as a list of those shapes. If you place a house shape (or collection of shapes making up a house) in the image, and you then place a tree shape on top of the house, the house is still there, since it is stored in the list of shapes that the image contains. If you delete the tree, the house will still be in the image, just as it was before you added the tree. Furthermore, you should be able to select one of the shapes in the image and move it or change its size, so drawing programs offer a rich set of editing operations that are not possible in painting programs. (The reverse, however, is also true.)</p> <p>A practical program for image creation and editing might combine elements of painting and drawing, although one or the other is usually dominant. For example, a drawing program might allow the user to include a raster-type image, treating it as one shape. A painting program might let the user create \"layers,\" which are separate images that can be layered one on top of another to create the final image. The layers can then be manipulated much like the shapes in a drawing program (so that you could keep both your house and your tree in separate layers, even if in the image of the house is in back of the tree).</p> <p>Two well-known graphics programs are Adobe Photoshop and Adobe Illustrator. Photoshop is in the category of painting programs, while Illustrator is more of a drawing program. In the world of free software, the GNU image-processing program, Gimp, is a good alternative to Photoshop, while Inkscape is a reasonably capable free drawing program. Short introductions to Gimp and Inkscape can be found in Appendix C.</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u6805\u56fe\u5f62\u548c\u77e2\u91cf\u56fe\u5f62\u4e4b\u95f4\u7684\u5dee\u5f02\u4e5f\u51fa\u73b0\u5728\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f\u9886\u57df\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u5c06\u56fe\u50cf\u8868\u793a\u4e3a\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002\u5982\u679c\u8981\u4ece\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u4f4d\u4e2d\u6062\u590d\u539f\u59cb\u56fe\u50cf\uff0c\u5219\u8868\u793a\u5fc5\u987b\u9075\u5faa\u67d0\u4e9b\u786e\u5207\u7684\u3001\u5df2\u77e5\u7684\u89c4\u8303\u3002\u8fd9\u6837\u7684\u89c4\u8303\u79f0\u4e3a\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f(graphics file format)\u3002\u4e00\u4e9b\u6d41\u884c\u7684\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f\u5305\u62ecGIF\u3001PNG\u3001JPEG\u3001WebP\u548cSVG\u3002\u5927\u591a\u6570\u5728Web\u4e0a\u4f7f\u7528\u7684\u56fe\u50cf\u90fd\u662fGIF\u3001PNG\u6216JPEG\u683c\u5f0f\uff0c\u4f46\u5927\u591a\u6570\u6d4f\u89c8\u5668\u4e5f\u652f\u6301SVG\u56fe\u50cf\u548c\u8f83\u65b0\u7684WebP\u683c\u5f0f\u3002</p> <p>GIF\u3001PNG\u3001JPEG\u548cWebP\u57fa\u672c\u4e0a\u662f\u5149\u6805\u56fe\u5f62\u683c\u5f0f\uff1b\u56fe\u50cf\u662f\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u5b58\u50a8\u4e00\u4e2a\u989c\u8272\u503c\u6765\u6307\u5b9a\u7684\u3002GIF\u662f\u4e00\u79cd\u8f83\u8001\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5927\u90e8\u5206\u5df2\u88abPNG\u53d6\u4ee3\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u5728Web\u4e0a\u627e\u5230GIF\u56fe\u50cf\u3002\uff08GIF\u683c\u5f0f\u652f\u6301\u52a8\u753b\u56fe\u50cf\uff0c\u56e0\u6b64\u7ecf\u5e38\u7528\u4e8eWeb\u9875\u9762\u4e0a\u7684\u7b80\u5355\u52a8\u753b\u3002\uff09GIF\u4f7f\u7528\u7d22\u5f15\u8272\u6a21\u578b\uff0c\u6700\u591a\u53ef\u5305\u542b256\u79cd\u989c\u8272\u3002PNG\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u8272\u6216\u516824\u4f4d\u989c\u8272\uff0c\u800cJPEG\u9002\u7528\u4e8e\u5168\u5f69\u8272\u56fe\u50cf\u3002</p> <p>\u8868\u793a\u5149\u6805\u56fe\u50cf\u6240\u9700\u7684\u6570\u636e\u91cf\u53ef\u80fd\u76f8\u5f53\u5927\u3002\u7136\u800c\uff0c\u6570\u636e\u901a\u5e38\u5305\u542b\u5927\u91cf\u5197\u4f59\uff0c\u5e76\u4e14\u6570\u636e\u53ef\u4ee5\u8fdb\u884c\u201c\u538b\u7f29\u201d\u4ee5\u51cf\u5c0f\u5176\u5927\u5c0f\u3002GIF\u548cPNG\u4f7f\u7528\u65e0\u635f\u6570\u636e\u538b\u7f29(lossless data compression)\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u4ece\u538b\u7f29\u6570\u636e\u5b8c\u7f8e\u5730\u6062\u590d\u539f\u59cb\u56fe\u50cf\u3002JPEG\u4f7f\u7528\u6709\u635f\u6570\u636e\u538b\u7f29(lossy data compression)\u7b97\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u4eceJPEG\u6587\u4ef6\u4e2d\u6062\u590d\u7684\u56fe\u50cf\u4e0e\u539f\u59cb\u56fe\u50cf\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\uff1b\u4e00\u4e9b\u4fe1\u606f\u5df2\u7ecf\u4e22\u5931\u3002\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5dee\u5f02\u901a\u5e38\u5e76\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u4f7f\u7528\u6709\u635f\u538b\u7f29\u901a\u5e38\u53ef\u4ee5\u66f4\u5927\u7a0b\u5ea6\u5730\u51cf\u5c0f\u538b\u7f29\u6570\u636e\u7684\u5927\u5c0f\u3002JPEG\u901a\u5e38\u9002\u7528\u4e8e\u6444\u5f71\u56fe\u50cf\uff0c\u4f46\u5bf9\u4e8e\u5177\u6709\u4e0d\u540c\u989c\u8272\u4e4b\u95f4\u6e05\u6670\u8fb9\u7f18\u7684\u56fe\u50cf\u6548\u679c\u4e0d\u4f73\u3002\u5b83\u5bf9\u4e8e\u7ebf\u6761\u7ed8\u56fe\u548c\u5305\u542b\u6587\u672c\u7684\u56fe\u50cf\u7279\u522b\u4e0d\u9002\u7528\uff1bPNG\u662f\u6b64\u7c7b\u56fe\u50cf\u7684\u9996\u9009\u683c\u5f0f\u3002WebP\u53ef\u4ee5\u4f7f\u7528\u65e0\u635f\u548c\u6709\u635f\u538b\u7f29\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0cSVG\u57fa\u672c\u4e0a\u662f\u4e00\u79cd\u77e2\u91cf\u56fe\u5f62\u683c\u5f0f\uff08\u5c3d\u7ba1SVG\u56fe\u50cf\u53ef\u4ee5\u5305\u542b\u5149\u6805\u56fe\u50cf\uff09\u3002SVG\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u7528\u4e8e\u63cf\u8ff0\u4e8c\u7ef4\u77e2\u91cf\u56fe\u5f62\u56fe\u50cf\u7684\u57fa\u4e8eXML\u7684\u8bed\u8a00\u3002\u201cSVG\u201d\u4ee3\u8868\u201c\u53ef\u7f29\u653e\u77e2\u91cf\u56fe\u5f62(Scalable Vector Graphics)\u201d\uff0c\u800c\u201c\u53ef\u7f29\u653e(scalable)\u201d\u4e00\u8bcd\u8868\u793a\u77e2\u91cf\u56fe\u5f62\u7684\u4e00\u4e2a\u4f18\u70b9\uff1a\u5f53\u56fe\u50cf\u7684\u5927\u5c0f\u589e\u52a0\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u8d28\u91cf\u3002\u4e24\u70b9\u4e4b\u95f4\u7684\u7ebf\u6761\u53ef\u4ee5\u4ee5\u4efb\u4f55\u6bd4\u4f8b\u8868\u793a\uff0c\u4ecd\u7136\u662f\u540c\u4e00\u6761\u5b8c\u7f8e\u7684\u51e0\u4f55\u7ebf\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5c1d\u8bd5\u5927\u5e45\u589e\u52a0\u5149\u6805\u56fe\u50cf\u7684\u5927\u5c0f\uff0c\u60a8\u4f1a\u53d1\u73b0\u60a8\u6ca1\u6709\u8db3\u591f\u7684\u989c\u8272\u503c\u6765\u8986\u76d6\u65b0\u56fe\u50cf\u4e2d\u6240\u6709\u50cf\u7d20\uff1b\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u5c06\u6269\u5c55\u4e3a\u8986\u76d6\u7f29\u653e\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u77e9\u5f62\uff0c\u5e76\u4e14\u60a8\u5c06\u83b7\u5f97\u5747\u5300\u989c\u8272\u7684\u591a\u50cf\u7d20\u5757\u3002SVG\u56fe\u50cf\u7684\u53ef\u6269\u5c55\u7279\u6027\u4f7f\u5176\u6210\u4e3aWeb\u6d4f\u89c8\u5668\u548c\u8ba1\u7b97\u673a\u684c\u9762\u4e0a\u56fe\u5f62\u5143\u7d20\u7684\u826f\u597d\u9009\u62e9\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e00\u4e9b\u684c\u9762\u73af\u5883\u73b0\u5728\u6b63\u5728\u4f7f\u7528SVG\u56fe\u50cf\u4f5c\u4e3a\u5176\u684c\u9762\u56fe\u6807\u3002</p> <p>The divide between raster and vector graphics also appears in the field of graphics file formats. There are many ways to represent an image as data stored in a file. If the original image is to be recovered from the bits stored in the file, the representation must follow some exact, known specification. Such a specification is called a graphics file format. Some popular graphics file formats include GIF, PNG, JPEG, WebP, and SVG. Most images used on the Web are GIF, PNG, or JPEG, but most browsers also have support for SVG images and for the newer WebP format.</p> <p>GIF, PNG, JPEG, and WebP are basically raster graphics formats; an image is specified by storing a color value for each pixel. GIF is an older file format, which has largely been superseded by PNG, but you can still find GIF images on the web. (The GIF format supports animated images, so GIFs are often used for simple animations on Web pages.) GIF uses an indexed color model with a maximum of 256 colors. PNG can use either indexed or full 24-bit color, while JPEG is meant for full color images.</p> <p>The amount of data necessary to represent a raster image can be quite large. However, the data usually contains a lot of redundancy, and the data can be \"compressed\" to reduce its size. GIF and PNG use lossless data compression, which means that the original image can be recovered perfectly from the compressed data. JPEG uses a lossy data compression algorithm, which means that the image that is recovered from a JPEG file is not exactly the same as the original image; some information has been lost. This might not sound like a good idea, but in fact the difference is often not very noticeable, and using lossy compression usually permits a greater reduction in the size of the compressed data. JPEG generally works well for photographic images, but not as well for images that have sharp edges between different colors. It is especially bad for line drawings and images that contain text; PNG is the preferred format for such images. WebP can use both lossless and lossy compression.</p> <p>SVG, on the other hand, is fundamentally a vector graphics format (although SVG images can include raster images). SVG is actually an XML-based language for describing two-dimensional vector graphics images. \"SVG\" stands for \"Scalable Vector Graphics,\" and the term \"scalable\" indicates one of the advantages of vector graphics: There is no loss of quality when the size of the image is increased. A line between two points can be represented at any scale, and it is still the same perfect geometric line. If you try to greatly increase the size of a raster image, on the other hand, you will find that you don't have enough color values for all the pixels in the new image; each pixel from the original image will be expanded to cover a rectangle of pixels in the scaled image, and you will get multi-pixel blocks of uniform color. The scalable nature of SVG images make them a good choice for web browsers and for graphical elements on your computer's desktop. And indeed, some desktop environments are now using SVG images for their desktop icons.</p> \u4e2d\u6587\u82f1\u6587 <p>\u65e0\u8bba\u56fe\u50cf\u7684\u683c\u5f0f\u5982\u4f55\uff0c\u6570\u5b57\u56fe\u50cf\u90fd\u662f\u4f7f\u7528\u5750\u6807\u7cfb(coordinate system)\u6307\u5b9a\u7684\u3002\u5750\u6807\u7cfb\u5efa\u7acb\u4e86\u6570\u5b57\u548c\u51e0\u4f55\u70b9\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u5728\u4e8c\u7ef4\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u88ab\u5206\u914d\u4e86\u4e00\u5bf9\u6570\u5b57\uff0c\u79f0\u4e3a\u70b9\u7684\u5750\u6807\u3002\u70b9\u7684\u4e24\u4e2a\u5750\u6807\u901a\u5e38\u79f0\u4e3a\u5176x\u5750\u6807\u548cy\u5750\u6807\uff0c\u5c3d\u7ba1\u540d\u79f0\"x\"\u548c\"y\"\u662f\u4efb\u610f\u7684\u3002</p> <p>\u5149\u6805\u56fe\u50cf\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7684\u50cf\u7d20\u7f51\u683c\uff0c\u6392\u5217\u6210\u884c\u548c\u5217\u3002\u56e0\u6b64\uff0c\u5b83\u6709\u4e00\u4e2a\u81ea\u7136\u7684\u5750\u6807\u7cfb\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u5bf9\u5e94\u4e8e\u4e00\u5bf9\u6574\u6570\uff0c\u7ed9\u51fa\u5305\u542b\u8be5\u50cf\u7d20\u7684\u884c\u53f7\u548c\u5217\u53f7\u3002\uff08\u5373\u4f7f\u5728\u8fd9\u79cd\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u5173\u4e8e\u5e94\u8be5\u4ece\u4e0a\u5230\u4e0b\u8fd8\u662f\u4ece\u4e0b\u5230\u4e0a\u7f16\u53f7\u884c\u7684\u95ee\u9898\u5b58\u5728\u4e00\u4e9b\u5206\u6b67\u3002\uff09</p> <p>\u5bf9\u4e8e\u77e2\u91cf\u56fe\u50cf\uff0c\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u662f\u81ea\u7136\u7684\u3002\u56fe\u50cf\u7684\u5750\u6807\u7cfb\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4efb\u610f\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u5750\u6807\u7cfb\u6307\u5b9a\u76f8\u540c\u7684\u56fe\u50cf\u3002\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u8be6\u7ec6\u8ba8\u8bba\u5750\u6807\u7cfb\uff0c\u4f46\u5b83\u4eec\u5c06\u662f\u672c\u4e66\u7684\u4e00\u4e2a\u91cd\u70b9\uff0c\u5e76\u4e14\u5728\u4e09\u7ef4\u56fe\u5f62\u4e2d\u6bd4\u5728\u4e8c\u7ef4\u56fe\u5f62\u4e2d\u66f4\u52a0\u91cd\u8981\u3002</p> <p>A digital image, no matter what its format, is specified using a coordinate system. A coordinate system sets up a correspondence between numbers and geometric points. In two dimensions, each point is assigned a pair of numbers, which are called the coordinates of the point. The two coordinates of a point are often called its x-coordinate and y-coordinate, although the names \"x\" and \"y\" are arbitrary.</p> <p>A raster image is a two-dimensional grid of pixels arranged into rows and columns. As such, it has a natural coordinate system in which each pixel corresponds to a pair of integers giving the number of the row and the number of the column that contain the pixel. (Even in this simple case, there is some disagreement as to whether the rows should be numbered from top-to-bottom or from bottom-to-top.)</p> <p>For a vector image, it is natural to use real-number coordinates. The coordinate system for an image is arbitrary to some degree; that is, the same image can be specified using different coordinate systems. I do not want to say a lot about coordinate systems here, but they will be a major focus of a large part of the book, and they are even more important in three-dimensional graphics than in two dimensions.</p>"},{"location":"cn/c1/s2/","title":"\u7b2c 2 \u8282\uff1a\u4e09\u7ef4(3D)\u56fe\u5f62\u7684\u8981\u7d20","text":"<p>Elements of 3D Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u6211\u4eec\u8f6c\u54113D\u56fe\u5f62\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u4e0e\u77e2\u91cf\u56fe\u5f62(vector graphics)\u66f4\u76f8\u4f3c\uff0c\u800c\u4e0d\u662f\u5149\u6805\u56fe\u5f62(raster graphics)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u56fe\u50cf\u7684\u5185\u5bb9\u88ab\u6307\u5b9a\u4e3a\u4e00\u7ec4\u51e0\u4f55\u5bf9\u8c61\u7684\u5217\u8868\u3002\u8fd9\u79cd\u6280\u672f\u79f0\u4e3a\u51e0\u4f55\u5efa\u6a21(geometric modeling)\u3002\u8d77\u70b9\u662f\u6784\u5efa\u4e00\u4e2a\u201c\u4eba\u5de53D\u4e16\u754c\u201d\uff0c\u4f5c\u4e3a\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6392\u5217\u7684\u7b80\u5355\u51e0\u4f55\u5f62\u72b6\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u5bf9\u8c61\u53ef\u4ee5\u5177\u6709\u5c5e\u6027(attributes)\uff0c\u7ed3\u5408\u4e16\u754c\u7684\u5168\u5c40\u5c5e\u6027\uff0c\u786e\u5b9a\u5bf9\u8c61\u7684\u5916\u89c2\u3002\u901a\u5e38\uff0c\u57fa\u672c\u5f62\u72b6\u7684\u8303\u56f4\u975e\u5e38\u6709\u9650\uff0c\u53ef\u80fd\u4ec5\u5305\u62ec\u70b9\u3001\u7ebf\u6bb5\u548c\u4e09\u89d2\u5f62\u3002\u5982\u679c\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u5f62\u72b6\uff0c\u4f8b\u5982\u591a\u8fb9\u5f62\u6216\u7403\u4f53\uff0c\u4e0d\u88ab\u8ba4\u4e3a\u662f\u57fa\u672c\u5f62\u72b6\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u88ab\u6784\u5efa\u6216\u8fd1\u4f3c\u4e3a\u66f4\u57fa\u672c\u7684\u5f62\u72b6\u7684\u96c6\u5408\u3002\u4e3a\u4e86\u5236\u4f5c\u573a\u666f\u7684\u4e8c\u7ef4\u56fe\u50cf\uff0c\u5c06\u573a\u666f\u4ece\u4e09\u7ef4\u6295\u5f71(projected)\u5230\u4e8c\u7ef4\u3002\u6295\u5f71\u76f8\u5f53\u4e8e\u5bf9\u573a\u666f\u62cd\u6444\u7167\u7247\u3002\u8ba9\u6211\u4eec\u7a0d\u5fae\u8be6\u7ec6\u5730\u770b\u4e00\u4e0b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002</p> <p>\u9996\u5148\u662f\u51e0\u4f55...... \u6211\u4eec\u4ece\u4e00\u4e2a\u7a7a\u76843D\u7a7a\u95f4\u6216\u201c\u4e16\u754c\u201d\u5f00\u59cb\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u53ea\u5728\u6982\u5ff5\u4e0a\u5b58\u5728\uff0c\u4f46\u5c06\u5176\u89c6\u4e3a\u771f\u5b9e\u5e76\u4e14\u80fd\u591f\u5728\u8111\u6d77\u4e2d\u53ef\u89c6\u5316\u662f\u6709\u7528\u7684\u3002\u8be5\u7a7a\u95f4\u9700\u8981\u4e00\u4e2a\u5750\u6807\u7cfb(coordinate system)\uff0c\u5c06\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4e0e\u4e09\u4e2a\u6570\u5b57\u76f8\u5173\u8054\uff0c\u901a\u5e38\u79f0\u4e3a\u70b9\u7684x\u3001y\u548cz\u5750\u6807\u3002\u8fd9\u4e2a\u5750\u6807\u7cfb\u79f0\u4e3a\u201c\u4e16\u754c\u5750\u6807(world coordinates)\u201d\u3002</p> <p>\u6211\u4eec\u60f3\u8981\u5728\u4e16\u754c\u4e2d\u5efa\u7acb\u4e00\u4e2a\u573a\u666f\uff0c\u7531\u51e0\u4f55\u5bf9\u8c61\u7ec4\u6210\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u5750\u6807\u6765\u6307\u5b9a\u573a\u666f\u4e2d\u7684\u4e00\u6761\u7ebf\u6bb5\uff0c\u901a\u8fc7\u7ed9\u51fa\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807\u6765\u6307\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u6211\u4eec\u8981\u5904\u7406\u7684\u6700\u5c0f\u7684\u6784\u5efa\u5757\uff0c\u4f8b\u5982\u7ebf\u6bb5\u548c\u4e09\u89d2\u5f62\uff0c\u79f0\u4e3a\u51e0\u4f55\u57fa\u5143(geometric primitives)\u3002\u4e0d\u540c\u7684\u56fe\u5f62\u7cfb\u7edf\u63d0\u4f9b\u4e0d\u540c\u7684\u57fa\u5143\u96c6\u5408\uff0c\u4f46\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u53ea\u8003\u8651\u975e\u5e38\u57fa\u672c\u7684\u5f62\u72b6\uff0c\u4f8b\u5982\u7ebf\u6761\u548c\u4e09\u89d2\u5f62\u3002\u4e00\u4e2a\u590d\u6742\u7684\u573a\u666f\u53ef\u80fd\u5305\u542b\u5927\u91cf\u7684\u57fa\u5143\uff0c\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5355\u72ec\u7684\u57fa\u5143\u7ed9\u51fa\u663e\u5f0f\u5750\u6807\u6765\u521b\u5efa\u573a\u666f\u5c06\u975e\u5e38\u56f0\u96be\u3002\u4efb\u4f55\u7a0b\u5e8f\u5458\u5e94\u8be5\u7acb\u5373\u731c\u5230\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u57fa\u5143\u7ec4\u5408\u6210\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u7ec4\u4ef6\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5305\u542b\u591a\u8f86\u6c7d\u8f66\u7684\u573a\u666f\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8f66\u8f6e\u7684\u51e0\u4f55\u6a21\u578b\u3002\u4e00\u8f86\u6c7d\u8f66\u53ef\u4ee5\u5efa\u6a21\u4e3a\u56db\u4e2a\u8f66\u8f6e\u4ee5\u53ca\u5176\u4ed6\u7ec4\u4ef6\u6a21\u578b\u7684\u96c6\u5408\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u573a\u666f\u4e2d\u4f7f\u7528\u51e0\u4e2a\u6c7d\u8f66\u6a21\u578b\u7684\u526f\u672c\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u65e6\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u51e0\u4f55\u6a21\u578b\uff0c\u5b83\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u66f4\u590d\u6742\u6a21\u578b\u4e2d\u7684\u7ec4\u4ef6\u4f7f\u7528\u3002\u8fd9\u88ab\u79f0\u4e3a\u5206\u5c42\u5efa\u6a21(hierarchical modeling)\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u7528\u51e0\u4f55\u57fa\u5143\u6784\u5efa\u4e86\u4e00\u4e2a\u8f66\u8f6e\u6a21\u578b\u3002\u5f53\u5c06\u8be5\u8f66\u8f6e\u79fb\u52a8\u5230\u6c7d\u8f66\u6a21\u578b\u4e2d\u7684\u4f4d\u7f6e\u65f6\uff0c\u6240\u6709\u57fa\u5143\u7684\u5750\u6807\u90fd\u5fc5\u987b\u8c03\u6574\u3002\u90a3\u4e48\u901a\u8fc7\u6784\u5efa\u8f66\u8f6e\u6211\u4eec\u7a76\u7adf\u83b7\u5f97\u4e86\u4ec0\u4e48\uff1f\u5173\u952e\u5728\u4e8e\u8f66\u8f6e\u4e2d\u7684\u6240\u6709\u5750\u6807\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u8c03\u6574\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a\u4e86\u5c06\u8f66\u8f6e\u653e\u7f6e\u5728\u6c7d\u8f66\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5e94\u7528\u4e8e\u6574\u4e2a\u8f66\u8f6e\u7684\u5355\u4e00\u8c03\u6574\u3002\u6240\u4f7f\u7528\u7684\u201c\u8c03\u6574\u201d\u7c7b\u578b\u79f0\u4e3a\u51e0\u4f55\u53d8\u6362(geometric transform)\u3002\u51e0\u4f55\u53d8\u6362\u7528\u4e8e\u8c03\u6574\u51e0\u4f55\u5bf9\u8c61\u7684\u5927\u5c0f\u3001\u65b9\u5411\u548c\u4f4d\u7f6e\u3002\u5f53\u5236\u4f5c\u6c7d\u8f66\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u8f66\u8f6e\u3002\u7136\u540e\u6211\u4eec\u5bf9\u8f66\u8f6e\u6a21\u578b\u5e94\u7528\u56db\u4e2a\u4e0d\u540c\u7684\u53d8\u6362\uff0c\u4ee5\u5c06\u56db\u4e2a\u8f66\u8f6e\u6dfb\u52a0\u5230\u6c7d\u8f66\u4e2d\u3002\u540c\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u540c\u4e00\u6c7d\u8f66\u6a21\u578b\u5e94\u7528\u4e0d\u540c\u7684\u53d8\u6362\uff0c\u5411\u573a\u666f\u4e2d\u6dfb\u52a0\u51e0\u8f86\u6c7d\u8f66\u3002</p> <p>\u4e09\u79cd\u6700\u57fa\u672c\u7684\u51e0\u4f55\u53d8\u6362\u79f0\u4e3a\u7f29\u653e(scaling)\u3001\u65cb\u8f6c(rotation)\u548c\u5e73\u79fb(translation)\u3002\u7f29\u653e\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u5927\u5c0f\uff0c\u5373\u901a\u8fc7\u67d0\u4e2a\u6307\u5b9a\u56e0\u5b50\u4f7f\u5176\u53d8\u5927\u6216\u53d8\u5c0f\u3002\u65cb\u8f6c\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u65b9\u5411\uff0c\u901a\u8fc7\u56f4\u7ed5\u67d0\u4e2a\u7279\u5b9a\u8f74\u65cb\u8f6c\u4e00\u5b9a\u89d2\u5ea6\u6765\u65cb\u8f6c\u5bf9\u8c61\u3002\u5e73\u79fb\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u4f4d\u7f6e\uff0c\u901a\u8fc7\u5c06\u5176\u4ece\u539f\u59cb\u4f4d\u7f6e\u79fb\u52a8\u4e00\u5b9a\u91cf\u6765\u5e73\u79fb\u5b83\u3002\u5728\u672c\u4e66\u4e2d\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5728\u4e8c\u7ef4\u4e2d\u9047\u5230\u8fd9\u4e9b\u53d8\u6362\uff0c\u56e0\u4e3a\u5b83\u4eec\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u4f46\u57283D\u56fe\u5f62\u4e2d\uff0c\u5b83\u4eec\u53d8\u5f97\u771f\u6b63\u91cd\u8981\u3002</p> <p>When we turn to 3D graphics, we find that the most common approaches have more in common with vector graphics than with raster graphics. That is, the content of an image is specified as a list of geometric objects. The technique is referred to as geometric modeling. The starting point is to construct an \"artificial 3D world\" as a collection of simple geometric shapes, arranged in three-dimensional space. The objects can have attributes that, combined with global properties of the world, determine the appearance of the objects. Often, the range of basic shapes is very limited, perhaps including only points, line segments, and triangles. A more complex shape such as a polygon or sphere can be built or approximated as a collection of more basic shapes, if it is not itself considered to be basic. To make a two-dimensional image of the scene, the scene is projected from three dimensions down to two dimensions. Projection is the equivalent of taking a photograph of the scene. Let's look at how it all works in a little more detail.</p> <p>First, the geometry.... We start with an empty 3D space or \"world.\" Of course, this space exists only conceptually, but it's useful to think of it as real and to be able to visualize it in your mind. The space needs a coordinate system that associates each point in the space with three numbers, usually referred to as the x, y, and z coordinates of the point. This coordinate system is referred to as \"world coordinates.\"</p> <p>We want to build a scene inside the world, made up of geometric objects. For example, we can specify a line segment in the scene by giving the coordinates of its two endpoints, and we can specify a triangle by giving the coordinates of its three vertices. The smallest building blocks that we have to work with, such as line segments and triangles, are called geometric primitives. Different graphics systems make different sets of primitives available, but in many cases only very basic shapes such as lines and triangles are considered primitive. A complex scene can contain a large number of primitives, and it would be very difficult to create the scene by giving explicit coordinates for each individual primitive. The solution, as any programmer should immediately guess, is to chunk together primitives into reusable components. For example, for a scene that contains several automobiles, we might create a geometric model of a wheel. An automobile can be modeled as four wheels together with models of other components. And we could then use several copies of the automobile model in the scene. Note that once a geometric model has been designed, it can be used as a component in more complex models. This is referred to as hierarchical modeling.</p> <p>Suppose that we have constructed a model of a wheel out of geometric primitives. When that wheel is moved into position in the model of an automobile, the coordinates of all of its primitives will have to be adjusted. So what exactly have we gained by building the wheel? The point is that all of the coordinates in the wheel are adjusted in the same way. That is, to place the wheel in the automobile, we just have to specify a single adjustment that is applied to the wheel as a whole. The type of \"adjustment\" that is used is called a geometric transform (or geometric transformation). A geometric transform is used to adjust the size, orientation, and position of a geometric object. When making a model of an automobile, we build one wheel. We then apply four different transforms to the wheel model to add four copies of the wheel to the automobile. Similarly, we can add several automobiles to a scene by applying different transforms to the same automobile model.</p> <p>The three most basic kinds of geometric transform are called scaling, rotation, and translation. A scaling transform is used to set the size of an object, that is, to make it bigger or smaller by some specified factor. A rotation transform is used to set an object's orientation, by rotating it by some angle about some specific axis. A translation transform is used to set the position of an object, by displacing it by a given amount from its original position. In this book, we will meet these transformations first in two dimensions, where they are easier to understand. But it is in 3D graphics that they become truly essential.</p> \u4e2d\u6587\u82f1\u6587 <p>\u63a5\u4e0b\u6765\u662f\u5916\u89c2... \u5355\u72ec\u7684\u51e0\u4f55\u5f62\u72b6\u5e76\u4e0d\u662f\u5f88\u6709\u8da3\u3002\u4f60\u5fc5\u987b\u80fd\u591f\u8bbe\u7f6e\u5b83\u4eec\u7684\u5916\u89c2\u3002\u8fd9\u662f\u901a\u8fc7\u7ed9\u51e0\u4f55\u5bf9\u8c61\u5206\u914d\u5c5e\u6027(attributes)\u6765\u5b8c\u6210\u7684\u3002\u4e00\u4e2a\u660e\u663e\u7684\u5c5e\u6027\u662f\u989c\u8272\uff0c\u4f46\u5b9e\u73b0\u903c\u771f\u7684\u5916\u89c2\u8fdc\u6bd4\u7b80\u5355\u5730\u4e3a\u6bcf\u4e2a\u57fa\u5143\u6307\u5b9a\u4e00\u4e2a\u989c\u8272\u8981\u590d\u6742\u5f97\u591a\u3002\u57283D\u56fe\u5f62\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u8c08\u8bba\u989c\u8272\uff0c\u800c\u662f\u8c08\u8bba\u6750\u8d28(material)\u3002\u8fd9\u91cc\u7684\u6750\u8d28\u6307\u7684\u662f\u786e\u5b9a\u8868\u9762\u56fa\u6709\u89c6\u89c9\u5916\u89c2\u7684\u5c5e\u6027\u3002\u57fa\u672c\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u8868\u9762\u4e0e\u51fb\u4e2d\u8868\u9762\u7684\u5149\u7ebf\u5982\u4f55\u76f8\u4e92\u4f5c\u7528\u3002\u6750\u8d28\u5c5e\u6027\u53ef\u4ee5\u5305\u62ec\u57fa\u672c\u989c\u8272\u4ee5\u53ca\u5176\u4ed6\u5c5e\u6027\uff0c\u5982\u5149\u6cfd\u5ea6(shininess)\u3001\u7c97\u7cd9\u5ea6(roughness)\u548c\u900f\u660e\u5ea6(transparency)\u3002</p> <p>\u6700\u6709\u7528\u7684\u6750\u8d28\u5c5e\u6027\u4e4b\u4e00\u662f\u7eb9\u7406(texture)\u3002\u5728\u6700\u4e00\u822c\u7684\u672f\u8bed\u4e2d\uff0c\u7eb9\u7406\u662f\u4e00\u79cd\u5728\u8868\u9762\u70b9\u4e0e\u70b9\u4e4b\u95f4\u53d8\u5316\u6750\u8d28\u5c5e\u6027\u7684\u65b9\u5f0f\u3002\u7eb9\u7406\u6700\u5e38\u89c1\u7684\u7528\u9014\u662f\u5141\u8bb8\u4e0d\u540c\u70b9\u6709\u4e0d\u540c\u7684\u989c\u8272\u3002\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u4f7f\u7528\u4e8c\u7ef4\u56fe\u50cf\u4f5c\u4e3a\u7eb9\u7406\u6765\u5b9e\u73b0\u7684\u3002\u56fe\u50cf\u53ef\u4ee5\u5e94\u7528\u5230\u8868\u9762\u4e0a\uff0c\u4f7f\u5f97\u56fe\u50cf\u770b\u8d77\u6765\u50cf\u662f\u201c\u7ed8\u5236\u201d\u5728\u8868\u9762\u4e0a\u3002\u7136\u800c\uff0c\u7eb9\u7406\u4e5f\u53ef\u4ee5\u6307\u53d8\u5316\u7684\u503c\uff0c\u6bd4\u5982\u900f\u660e\u5ea6\u6216\u201c\u51f9\u51f8\u4e0d\u5e73\u201d\u3002\u7eb9\u7406\u5141\u8bb8\u6211\u4eec\u5728\u4e0d\u4f7f\u7528\u5927\u91cf\u51e0\u4f55\u57fa\u5143\u7684\u60c5\u51b5\u4e0b\u4e3a\u573a\u666f\u6dfb\u52a0\u7ec6\u8282\uff1b\u800c\u662f\u4f7f\u7528\u8f83\u5c11\u6570\u91cf\u7684\u5e26\u6709\u7eb9\u7406\u7684\u57fa\u5143\u3002</p> <p>\u6750\u8d28\u662f\u5bf9\u8c61\u7684 \u56fa\u6709\u5c5e\u6027 (intrinsic property)\uff0c\u4f46\u5bf9\u8c61\u7684\u5b9e\u9645\u5916\u89c2\u8fd8\u53d6\u51b3\u4e8e\u5bf9\u8c61\u6240\u5904\u7684\u73af\u5883\u3002\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u9664\u975e\u73af\u5883\u4e2d\u6709\u4e00\u4e9b\u5149\u7ebf\uff0c\u5426\u5219\u4f60\u770b\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f\u3002\u57283D\u56fe\u5f62\u4e2d\u4e5f\u662f\u5982\u6b64\uff1a\u4f60\u5fc5\u987b\u5728\u573a\u666f\u4e2d\u6dfb\u52a0 \u6a21\u62df\u5149\u7ebf(simulated lighting)\u3002\u573a\u666f\u4e2d\u53ef\u4ee5\u6709\u51e0\u4e2a\u5149\u6e90\u3002\u6bcf\u4e2a\u5149\u6e90\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u989c\u8272\u3001\u5f3a\u5ea6\u548c\u65b9\u5411\u6216\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6765\u81ea\u8fd9\u4e9b\u5149\u6e90\u7684\u5149\u5c06\u4e0e\u573a\u666f\u4e2d\u5bf9\u8c61\u7684\u6750\u8d28\u5c5e\u6027\u76f8\u4e92\u4f5c\u7528\u3002\u56fe\u5f62\u7cfb\u7edf\u4e2d\u7684\u5149\u7167\u652f\u6301\u53ef\u4ee5\u4ece\u76f8\u5f53\u7b80\u5355\u5230\u975e\u5e38\u590d\u6742\u548c\u8ba1\u7b97\u5bc6\u96c6\u7684\u8303\u56f4\u5185\u3002</p> <p>Next, appearance.... Geometric shapes by themselves are not very interesting. You have to be able to set their appearance. This is done by assigning attributes to the geometric objects. An obvious attribute is color, but getting a realistic appearance turns out to be a lot more complicated than simply specifying a color for each primitive. In 3D graphics, instead of color, we usually talk about material. The term material here refers to the properties that determine the intrinsic visual appearance of a surface. Essentially, this means how the surface interacts with light that hits the surface. Material properties can include a basic color as well as other properties such as shininess, roughness, and transparency.</p> <p>One of the most useful kinds of material property is a texture. In most general terms, a texture is a way of varying material properties from point-to-point on a surface. The most common use of texture is to allow different colors for different points. This is often done by using a 2D image as a texture. The image can be applied to a surface so that the image looks like it is \"painted\" onto the surface. However, texture can also refer to changing values for things like transparency or \"bumpiness.\" Textures allow us to add detail to a scene without using a huge number of geometric primitives; instead, you can use a smaller number of textured primitives.</p> <p>A material is an intrinsic property of an object, but the actual appearance of the object also depends on the environment in which the object is viewed. In the real world, you don't see anything unless there is some light in the environment. The same is true in 3D graphics: you have to add simulated lighting to a scene. There can be several sources of light in a scene. Each light source can have its own color, intensity, and direction or position. The light from those sources will then interact with the material properties of the objects in the scene. Support for lighting in a graphics system can range from fairly simple to very complex and computationally intensive.</p> \u4e2d\u6587\u82f1\u6587 <p>\u6700\u540e\uff0c\u56fe\u50cf... \u4e00\u822c\u6765\u8bf4\uff0c3D\u56fe\u5f62\u7684\u6700\u7ec8\u76ee\u6807\u662f\u751f\u62103D\u4e16\u754c\u76842D\u56fe\u50cf\u3002\u4ece3D\u52302D\u7684\u8f6c\u6362\u6d89\u53ca\u89c6\u56fe(viewing)\u548c\u6295\u5f71(projection)\u3002\u5f53\u4ece\u4e0d\u540c\u7684\u89c6\u89d2\u89c2\u5bdf\u65f6\uff0c\u4e16\u754c\u770b\u8d77\u6765\u4e0d\u540c\u3002\u4e3a\u4e86\u8bbe\u7f6e\u4e00\u4e2a\u89c6\u89d2\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u89c2\u5bdf\u8005\u7684\u4f4d\u7f6e\u548c\u89c2\u5bdf\u8005\u7684\u671d\u5411\u3002\u8fd8\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u201c\u4e0a(up)\u201d\u65b9\u5411\uff0c\u5373\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u5c06\u6307\u5411\u4e0a\u65b9\u7684\u65b9\u5411\u3002\u8fd9\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u5c06\u4e00\u4e2a\u201c\u865a\u62df\u76f8\u673a\u201d\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u3002\u4e00\u65e6\u89c6\u56fe\u8bbe\u7f6e\u597d\u4e86\uff0c\u4ece\u90a3\u4e2a\u89c6\u89d2\u770b\u5230\u7684\u4e16\u754c\u53ef\u4ee5\u6295\u5f71\u52302D\u4e2d\u3002\u6295\u5f71\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u76f8\u673a\u62cd\u7167\u3002</p> <p>\u6700\u7ec8\u76843D\u56fe\u5f62\u6b65\u9aa4\u662f\u5c06\u989c\u8272\u5206\u914d\u7ed92D\u56fe\u50cf\u4e2d\u7684\u5355\u4e2a\u50cf\u7d20\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u5149\u6805\u5316(rasterization)\uff0c\u800c\u751f\u6210\u56fe\u50cf\u7684\u6574\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u6e32\u67d3(rendering)\u573a\u666f\u3002</p> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7684\u76ee\u6807\u4e0d\u662f\u521b\u5efa\u5355\u4e2a\u56fe\u50cf\uff0c\u800c\u662f\u521b\u5efa\u4e00\u4e2a\u52a8\u753b(animation)\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u663e\u793a\u4e0d\u540c\u65f6\u523b\u4e16\u754c\u7684\u56fe\u50cf\u3002\u5728\u52a8\u753b\u4e2d\uff0c\u4ece\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u56fe\u50cf\u5230\u4e0b\u4e00\u4e2a\u56fe\u50cf\u6709\u5fae\u5c0f\u7684\u53d8\u5316\u3002\u573a\u666f\u7684\u51e0\u4e4e\u4efb\u4f55\u65b9\u9762\u5728\u52a8\u753b\u671f\u95f4\u90fd\u53ef\u4ee5\u53d1\u751f\u53d8\u5316\uff0c\u5305\u62ec\u57fa\u5143\u7684\u5750\u6807\u3001\u53d8\u6362\u3001\u6750\u8d28\u5c5e\u6027\u548c\u89c6\u56fe\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u9010\u6e10\u589e\u52a0\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u7f29\u653e\u53d8\u6362\u4e2d\u7684\u6bd4\u4f8b\u56e0\u5b50\u6765\u4f7f\u5bf9\u8c61\u5728\u52a8\u753b\u8fc7\u7a0b\u4e2d\u589e\u957f\u3002\u5728\u52a8\u753b\u671f\u95f4\u6539\u53d8\u89c6\u56fe\u53ef\u4ee5\u4f7f\u5f97\u6548\u679c\u770b\u8d77\u6765\u662f\u5728\u573a\u666f\u4e2d\u79fb\u52a8\u6216\u98de\u884c\u3002\u5f53\u7136\uff0c\u8ba1\u7b97\u6240\u9700\u7684\u53d8\u5316\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\u3002\u6709\u8bb8\u591a\u6280\u672f\u53ef\u4ee5\u5e2e\u52a9\u8fdb\u884c\u8ba1\u7b97\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u4e4b\u4e00\u662f\u4f7f\u7528\u201c\u7269\u7406\u5f15\u64ce(physics engine)\u201d\uff0c\u5b83\u6839\u636e\u7269\u7406\u5b9a\u5f8b\u8ba1\u7b97\u5bf9\u8c61\u7684\u8fd0\u52a8\u548c\u76f8\u4e92\u4f5c\u7528\u3002\uff08\u7136\u800c\uff0c\u672c\u4e66\u4e0d\u4f1a\u4ecb\u7ecd\u7269\u7406\u5f15\u64ce\u3002\uff09</p> <p>Finally, the image.... In general, the ultimate goal of 3D graphics is to produce 2D images of the 3D world. The transformation from 3D to 2D involves viewing and projection. The world looks different when seen from different points of view. To set up a point of view, we need to specify the position of the viewer and the direction that the viewer is looking. It is also necessary to specify an \"up\" direction, a direction that will be pointing upwards in the final image. This can be thought of as placing a \"virtual camera\" into the scene. Once the view is set up, the world as seen from that point of view can be projected into 2D. Projection is analogous to taking a picture with the camera.</p> <p>The final step in 3D graphics is to assign colors to individual pixels in the 2D image. This process is called rasterization, and the whole process of producing an image is referred to as rendering the scene.</p> <p>In many cases the ultimate goal is not to create a single image, but to create an animation, consisting of a sequence of images that show the world at different times. In an animation, there are small changes from one image in the sequence to the next. Almost any aspect of a scene can change during an animation, including coordinates of primitives, transformations, material properties, and the view. For example, an object can be made to grow over the course of an animation by gradually increasing the scale factor in a scaling transformation that is applied to the object. And changing the view during an animation can give the effect of moving or flying through the scene. Of course, it can be difficult to compute the necessary changes. There are many techniques to help with the computation. One of the most important is to use a \"physics engine,\" which computes the motion and interaction of objects based on the laws of physics. (However, you won't learn about physics engines in this book.)</p>"},{"location":"cn/c1/s3/","title":"\u7b2c 3 \u8282\uff1a\u786c\u4ef6\u4e0e\u8f6f\u4ef6","text":"<p>Hardware and Software</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5c06\u4ee5OpenGL\u4f5c\u4e3a3D\u56fe\u5f62\u7f16\u7a0b\u7684\u4e3b\u8981\u57fa\u7840\u3002\u6700\u521d\u7684\u5f00\u653eGL(OpenGL)\u7248\u672c\u4e8e1992\u5e74\u7531\u4e00\u5bb6\u540d\u4e3aSilicon Graphics\u7684\u516c\u53f8\u53d1\u5e03\uff0c\u8be5\u516c\u53f8\u4ee5\u5176\u56fe\u5f62\u5de5\u4f5c\u7ad9\u800c\u95fb\u540d\u2014\u2014\u8fd9\u662f\u8bbe\u8ba1\u7528\u4e8e\u5bc6\u96c6\u56fe\u5f62\u5e94\u7528\u7684\u5f3a\u5927\u4e14\u6602\u8d35\u7684\u8ba1\u7b97\u673a\u3002\uff08\u4eca\u5929\uff0c\u60a8\u7684\u667a\u80fd\u624b\u673a\u5177\u6709\u66f4\u591a\u7684\u56fe\u5f62\u8ba1\u7b97\u80fd\u529b\u3002\uff09OpenGL\u53d7\u5230\u5927\u591a\u6570\u73b0\u4ee3\u8ba1\u7b97\u8bbe\u5907\u7684\u56fe\u5f62\u786c\u4ef6\u652f\u6301\uff0c\u5305\u62ec\u53f0\u5f0f\u8ba1\u7b97\u673a\u3001\u7b14\u8bb0\u672c\u7535\u8111\u548c\u8bb8\u591a\u79fb\u52a8\u8bbe\u5907\u3002\u4f5c\u4e3a\u7f51\u9875GL(WebGL)\u7684\u5f62\u5f0f\uff0c\u5b83\u662fWeb\u4e0a\u5927\u591a\u65703D\u56fe\u5f62\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\u672c\u8282\u5c06\u4e3a\u60a8\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8eOpenGL\u5386\u53f2\u548c\u652f\u6301\u5b83\u7684\u56fe\u5f62\u786c\u4ef6\u7684\u80cc\u666f\u77e5\u8bc6\u3002</p> <p>\u5728\u6700\u521d\u7684\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e2d\uff0c\u5c4f\u5e55\u5185\u5bb9\u662f\u7531\u4e2d\u592e\u5904\u7406\u5668(CPU)\u76f4\u63a5\u7ba1\u7406\u7684\u3002\u4f8b\u5982\uff0c\u8981\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u4e00\u6761\u7ebf\u6bb5\uff0cCPU\u5c06\u8fd0\u884c\u4e00\u4e2a\u5faa\u73af\u6765\u8bbe\u7f6e\u6cbf\u7ebf\u7684\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u3002\u4e0d\u7528\u8bf4\uff0c\u56fe\u5f62\u53ef\u80fd\u4f1a\u5360\u7528CPU\u5927\u91cf\u7684\u65f6\u95f4\u3002\u4e0e\u6211\u4eec\u4eca\u5929\u671f\u671b\u7684\u76f8\u6bd4\uff0c\u56fe\u5f62\u6027\u80fd\u975e\u5e38\u6162\u3002\u90a3\u4e48\uff0c\u6709\u4ec0\u4e48\u53d8\u5316\u5462\uff1f\u5f53\u7136\uff0c\u8ba1\u7b97\u673a\u603b\u4f53\u4e0a\u66f4\u5feb\u4e86\uff0c\u4f46\u6700\u5927\u7684\u53d8\u5316\u662f\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u4e2d\uff0c\u56fe\u5f62\u5904\u7406\u662f\u7531\u4e00\u79cd\u79f0\u4e3a\u56fe\u5f62\u5904\u7406\u5668(GPU)\u7684\u4e13\u7528\u7ec4\u4ef6\u5b8c\u6210\u7684\u3002 GPU\u5305\u62ec\u7528\u4e8e\u6267\u884c\u56fe\u5f62\u8ba1\u7b97\u7684\u5904\u7406\u5668\uff1b \u5b9e\u9645\u4e0a\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u5927\u91cf\u7684\u8fd9\u79cd\u5904\u7406\u5668\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u5e76\u884c\u5de5\u4f5c\u4ee5\u5927\u5927\u52a0\u901f\u56fe\u5f62\u64cd\u4f5c\u3002 \u5b83\u8fd8\u5305\u62ec\u4e13\u7528\u5185\u5b58\uff0c\u7528\u4e8e\u5b58\u50a8\u8bf8\u5982\u56fe\u50cf\u548c\u5750\u6807\u5217\u8868\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 GPU\u5904\u7406\u5668\u5bf9\u5b58\u50a8\u5728GPU\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5177\u6709\u975e\u5e38\u5feb\u7684\u8bbf\u95ee\u901f\u5ea6\u2014\u2014\u6bd4\u5b83\u4eec\u8bbf\u95ee\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e3b\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8981\u5feb\u5f97\u591a\u3002</p> <p>\u8981\u7ed8\u5236\u4e00\u6761\u7ebf\u6216\u6267\u884c\u5176\u4ed6\u56fe\u5f62\u64cd\u4f5c\uff0cCPU\u53ea\u9700\u5c06\u547d\u4ee4\u4ee5\u53ca\u4efb\u4f55\u5fc5\u8981\u7684\u6570\u636e\u53d1\u9001\u5230GPU\uff0cGPU\u8d1f\u8d23\u5b9e\u9645\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u3002 CPU\u5c06\u5927\u90e8\u5206\u56fe\u5f62\u5de5\u4f5c\u4ea4\u7ed9\u4e86GPU\uff0c\u540e\u8005\u88ab\u4f18\u5316\u4e3a\u975e\u5e38\u5feb\u5730\u6267\u884c\u8fd9\u9879\u5de5\u4f5c\u3002 GPU\u7406\u89e3\u7684\u547d\u4ee4\u96c6\u7ec4\u6210\u4e86GPU\u7684\u63a5\u53e3(API)\u3002 OpenGL\u662f\u56fe\u5f62API\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5927\u591a\u6570GPU\u652f\u6301OpenGL\uff0c\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u7406\u89e3OpenGL\u547d\u4ee4\uff0c\u6216\u8005\u81f3\u5c11OpenGL\u547d\u4ee4\u53ef\u4ee5\u88ab\u6709\u6548\u5730\u8f6c\u6362\u4e3aGPU\u53ef\u4ee5\u7406\u89e3\u7684\u547d\u4ee4\u3002</p> <p>OpenGL\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u56fe\u5f62API\u3002 \u5b9e\u9645\u4e0a\uff0c\u5b83\u6b63\u5728\u88ab\u66f4\u73b0\u4ee3\u7684\u66ff\u4ee3\u65b9\u6848\u6240\u53d6\u4ee3\uff0c\u5305\u62ec\u4f0f\u5c14\u7518(Vulkan)\uff0c\u8fd9\u662f\u7531\u8d1f\u8d23OpenGL\u7684\u540c\u4e00\u7ec4\u7ec7\u5f00\u53d1\u7684\u5f00\u653eAPI\u3002 \u8fd8\u6709\u4e00\u4e9b\u7531\u82f9\u679c\u548c\u5fae\u8f6f\u4f7f\u7528\u7684\u4e13\u6709API\uff1ametal(Metal)\u548cdirect3D(Direct3D)\u3002 \u81f3\u4e8eWeb\uff0c\u4e00\u4e2a\u540d\u4e3a\u7f51\u9875GPU(WebGPU)\u7684\u65b0API\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728\u4e00\u4e9bWeb\u6d4f\u89c8\u5668\u4e2d\u5b9e\u73b0\u4e86\u3002 \u8fd9\u4e9b\u8f83\u65b0\u7684API\u662f\u590d\u6742\u4e14\u5e95\u5c42\u7684\u3002 \u5b83\u4eec\u66f4\u591a\u5730\u8bbe\u8ba1\u7528\u4e8e\u901f\u5ea6\u548c\u6548\u7387\uff0c\u800c\u4e0d\u662f\u6613\u7528\u6027\u3002 \u672c\u6559\u6750\u4e0d\u6db5\u76d6Metal\u3001Direct3D\u548cVulkan\uff0c\u4f46\u5728\u7b2c9\u7ae0\u4e2d\u4ecb\u7ecd\u4e86WebGPU\u3002 \u5728\u5927\u90e8\u5206\u7684\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528OpenGL\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u5bb9\u6613\u5165\u95e8\u76843D\u56fe\u5f62\u4ecb\u7ecd\uff0c\u4ee5\u53caWebGL\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u662fWeb\u6d4f\u89c8\u5668\u4e2d3D\u56fe\u5f62\u7684\u4e3b\u8981API\u3002</p> <p>We will be using OpenGL as the primary basis for 3D graphics programming. The original version of OpenGL was released in 1992 by a company named Silicon Graphics, which was known for its graphics workstations\u2014powerful, expensive computers designed for intensive graphical applications. (Today, you have more graphics computing power on your smart phone.) OpenGL is supported by the graphics hardware in most modern computing devices, including desktop computers, laptops, and many mobile devices. In the form of WebGL, it is the used for most 3D graphics on the Web. This section will give you a bit of background about the history of OpenGL and about the graphics hardware that supports it.</p> <p>In the first desktop computers, the contents of the screen were managed directly by the CPU. For example, to draw a line segment on the screen, the CPU would run a loop to set the color of each pixel that lies along the line. Needless to say, graphics could take up a lot of the CPU's time. And graphics performance was very slow, compared to what we expect today. So what has changed? Computers are much faster in general, of course, but the big change is that in modern computers, graphics processing is done by a specialized component called a GPU, or Graphics Processing Unit. A GPU includes processors for doing graphics computations; in fact, it can include a large number of such processors that work in parallel to greatly speed up graphical operations. It also includes its own dedicated memory for storing things like images and lists of coordinates. GPU processors have very fast access to data that is stored in GPU memory\u2014much faster than their access to data stored in the computer's main memory.</p> <p>To draw a line or perform some other graphical operation, the CPU simply has to send commands, along with any necessary data, to the GPU, which is responsible for actually carrying out those commands. The CPU offloads most of the graphical work to the GPU, which is optimized to carry out that work very quickly. The set of commands that the GPU understands make up the API of the GPU. OpenGL is an example of a graphics API, and most GPUs support OpenGL in the sense that they can understand OpenGL commands, or at least that OpenGL commands can efficiently be translated into commands that the GPU can understand.</p> <p>OpenGL is not the only graphics API. In fact, it is in the process of being replaced by more modern alternatives, including Vulkan an open API from the same group that is responsible for OpenGL. There are also proprietary APIs used by Apple and Microsoft: Metal and Direct3D. As for the Web, a new API called WebGPU has been under development for some time and is already implemented in some Web browsers. These newer APIs are complex and low-level. They are designed more for speed and efficiency rather than ease-of-use. Metal, Direct3D, and Vulkan are not covered in this textbook, but WebGPU is introduced in Chapter 9. For most of the book, we will use OpenGL, because it provides an easier introduction to 3D graphics, and WebGL, because it is still the major API for 3D graphics in Web browsers.</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u66fe\u7ecf\u8bf4\u8fc7OpenGL\u662f\u4e00\u4e2aAPI\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u662f\u4e00\u7cfb\u5217API\uff0c\u7ecf\u8fc7\u591a\u6b21\u6269\u5c55\u548c\u4fee\u8ba2\u3002\u57282023\u5e74\uff0c\u5f53\u524d\uff08\u4e5f\u8bb8\u662f\u6700\u7ec8\uff09\u7248\u672c\u662f4.6\uff0c\u5b83\u9996\u6b21\u53d1\u5e03\u4e8e2017\u5e74\u3002\u8fd9\u4e0e1992\u5e74\u76841.0\u7248\u672c\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u7248\u672c\u53eb\u505aOpenGL ES\uff0c\u7528\u4e8e\u8bf8\u5982\u624b\u673a\u548c\u5e73\u677f\u7535\u8111\u4e4b\u7c7b\u7684\u201c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u201d\u3002\u8fd8\u6709WebGL\uff0c\u7528\u4e8eWeb\u6d4f\u89c8\u5668\uff0c\u57fa\u672c\u4e0a\u662fOpenGL ES\u7684\u4e00\u4e2a\u79fb\u690d\u7248\u672c\u3002\u4e86\u89e3OpenGL\u7684\u53d8\u5316\u662f\u5982\u4f55\u53d1\u751f\u4ee5\u53ca\u539f\u56e0\u5c06\u4f1a\u5f88\u6709\u7528\u3002</p> <p>\u9996\u5148\uff0c\u60a8\u5e94\u8be5\u77e5\u9053OpenGL\u88ab\u8bbe\u8ba1\u4e3a\u4e00\u4e2a\u201c\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\u201d\u7cfb\u7edf\u3002\u670d\u52a1\u5668\u8d1f\u8d23\u63a7\u5236\u8ba1\u7b97\u673a\u7684\u663e\u793a\u5e76\u6267\u884c\u56fe\u5f62\u8ba1\u7b97\uff0c\u6267\u884c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u547d\u4ee4\u3002\u901a\u5e38\uff0c\u670d\u52a1\u5668\u662f\u4e00\u4e2aGPU\uff0c\u5305\u62ec\u5176\u56fe\u5f62\u5904\u7406\u5668\u548c\u5185\u5b58\u3002\u670d\u52a1\u5668\u6267\u884cOpenGL\u547d\u4ee4\u3002\u5ba2\u6237\u7aef\u662f\u540c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e2d\u7684CPU\uff0c\u4ee5\u53ca\u5b83\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002OpenGL\u547d\u4ee4\u6765\u81ea\u4e8e\u5728CPU\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002\u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8fdc\u7a0b\u8fd0\u884cOpenGL\u7a0b\u5e8f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5728\u8fdc\u7a0b\u8ba1\u7b97\u673a\uff08OpenGL\u5ba2\u6237\u7aef\uff09\u4e0a\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u56fe\u5f62\u8ba1\u7b97\u548c\u663e\u793a\u662f\u5728\u60a8\u5b9e\u9645\u4f7f\u7528\u7684\u8ba1\u7b97\u673a\u4e0a\u5b8c\u6210\u7684\uff08OpenGL\u670d\u52a1\u5668\uff09\u3002</p> <p>\u5173\u952e\u601d\u60f3\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u662f\u5206\u5f00\u7684\u7ec4\u4ef6\uff0c\u5e76\u4e14\u5728\u8fd9\u4e9b\u7ec4\u4ef6\u4e4b\u95f4\u6709\u4e00\u4e2a\u901a\u4fe1\u901a\u9053\u3002OpenGL\u547d\u4ee4\u53ca\u5176\u6240\u9700\u7684\u6570\u636e\u901a\u8fc7\u8be5\u901a\u9053\u4ece\u5ba2\u6237\u7aef\uff08CPU\uff09\u4f20\u8f93\u5230\u670d\u52a1\u5668\uff08GPU\uff09\u3002\u901a\u9053\u7684\u5bb9\u91cf\u53ef\u80fd\u662f\u56fe\u5f62\u6027\u80fd\u7684\u9650\u5236\u56e0\u7d20\u3002\u60f3\u8c61\u4e00\u4e0b\u5c06\u56fe\u50cf\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\u3002\u5982\u679cGPU\u53ef\u4ee5\u5728\u5fae\u79d2\u5185\u7ed8\u5236\u56fe\u50cf\uff0c\u4f46\u662f\u5c06\u56fe\u50cf\u6570\u636e\u4eceCPU\u53d1\u9001\u5230GPU\u9700\u8981\u6beb\u79d2\u7ea7\u7684\u65f6\u95f4\uff0c\u90a3\u4e48GPU\u7684\u5feb\u901f\u901f\u5ea6\u5c31\u65e0\u5173\u7d27\u8981\u4e86\u2014\u2014\u7ed8\u5236\u56fe\u50cf\u6240\u9700\u7684\u5927\u90e8\u5206\u65f6\u95f4\u662f\u901a\u4fe1\u65f6\u95f4\u3002</p> <p>\u56e0\u6b64\uff0cOpenGL\u53d1\u5c55\u7684\u9a71\u52a8\u56e0\u7d20\u4e4b\u4e00\u662f\u5e0c\u671b\u9650\u5236CPU\u548cGPU\u4e4b\u95f4\u9700\u8981\u7684\u901a\u4fe1\u91cf\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u4fe1\u606f\u5b58\u50a8\u5728GPU\u7684\u5185\u5b58\u4e2d\u3002\u5982\u679c\u67d0\u4e9b\u6570\u636e\u5c06\u88ab\u591a\u6b21\u4f7f\u7528\uff0c\u5219\u53ef\u4ee5\u4e00\u6b21\u5c06\u5176\u4f20\u8f93\u5230GPU\u5e76\u5b58\u50a8\u5728\u90a3\u91cc\u7684\u5185\u5b58\u4e2d\uff0c\u4ece\u800c\u7acb\u5373\u4f7fGPU\u53ef\u4ee5\u8bbf\u95ee\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5c1d\u8bd5\u51cf\u5c11\u5fc5\u987b\u4f20\u8f93\u5230GPU\u4ee5\u7ed8\u5236\u7ed9\u5b9a\u56fe\u50cf\u7684OpenGL\u547d\u4ee4\u7684\u6570\u91cf\u3002</p> <p>OpenGL\u7ed8\u5236\u8bf8\u5982\u4e09\u89d2\u5f62\u4e4b\u7c7b\u7684\u57fa\u5143\u3002\u6307\u5b9a\u4e00\u4e2a\u57fa\u5143\u610f\u5473\u7740\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u5750\u6807\u548c\u5c5e\u6027\u3002\u5728\u6700\u521d\u7684OpenGL 1.0\u4e2d\uff0c\u4f7f\u7528\u5355\u72ec\u7684\u547d\u4ee4\u6765\u6307\u5b9a\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\uff0c\u5e76\u4e14\u6bcf\u5f53\u5c5e\u6027\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\u90fd\u9700\u8981\u4e00\u4e2a\u547d\u4ee4\u3002\u8981\u7ed8\u5236\u4e00\u4e2a\u4e09\u89d2\u5f62\u5c06\u9700\u8981\u4e09\u4e2a\u6216\u66f4\u591a\u4e2a\u547d\u4ee4\u3002\u7531\u6210\u5343\u4e0a\u4e07\u4e2a\u4e09\u89d2\u5f62\u7ec4\u6210\u7684\u590d\u6742\u5bf9\u8c61\u7684\u7ed8\u5236\u5c06\u9700\u8981\u8bb8\u591a\u6210\u5343\u4e0a\u4e07\u4e2a\u547d\u4ee4\u3002\u5373\u4f7f\u5728OpenGL 1.1\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u547d\u4ee4\u800c\u4e0d\u662f\u6570\u5343\u4e2a\u6765\u7ed8\u5236\u8fd9\u6837\u7684\u5bf9\u8c61\u3002\u5bf9\u8c61\u7684\u6240\u6709\u6570\u636e\u5c06\u52a0\u8f7d\u5230\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u53ef\u4ee5\u4e00\u6b21\u6027\u5c06\u5176\u53d1\u9001\u5230GPU\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5982\u679c\u8981\u591a\u6b21\u7ed8\u5236\u5bf9\u8c61\uff0c\u5219\u6bcf\u6b21\u7ed8\u5236\u5bf9\u8c61\u65f6\u90fd\u5fc5\u987b\u91cd\u65b0\u4f20\u8f93\u6570\u636e\u3002\u8fd9\u5728OpenGL 1.5\u4e2d\u901a\u8fc7\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61(VBO(Vertex Buffer Objects))\u5f97\u5230\u4e86\u4fee\u590d\u3002 VBO \u662fGPU\u4e2d\u7684\u4e00\u5757\u5185\u5b58\u5757\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e00\u7ec4\u9876\u70b9\u7684\u5750\u6807\u6216\u5c5e\u6027\u503c\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5728\u4e0d\u5fc5\u6bcf\u6b21\u4f7f\u7528\u65f6\u90fd\u4eceCPU\u91cd\u65b0\u4f20\u8f93\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u91cd\u7528\u6570\u636e\u3002</p> <p>\u540c\u6837\uff0c\u5728OpenGL 1.1\u4e2d\u5f15\u5165\u4e86\u7eb9\u7406\u5bf9\u8c61(texture objects)\uff0c\u4ee5\u4fbf\u5728GPU\u4e0a\u5b58\u50a8\u591a\u4e2a\u56fe\u50cf\u4ee5\u4f9b\u7eb9\u7406\u4f7f\u7528\u3002\u8fd9\u610f\u5473\u7740\u5c06\u591a\u6b21\u91cd\u590d\u4f7f\u7528\u7684\u7eb9\u7406\u56fe\u50cf\u52a0\u8f7d\u5230GPU\u4e2d\u4e00\u6b21\uff0c\u4ee5\u4fbfGPU\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u56fe\u50cf\u4e4b\u95f4\u5207\u6362\u800c\u65e0\u9700\u91cd\u65b0\u52a0\u8f7d\u5b83\u4eec\u3002</p> <p>I have said that OpenGL is an API, but in fact it is a series of APIs that have been subject to repeated extension and revision. In 2023, the current (and perhaps final) version is 4.6, which was first released in 2017. It is very different from the 1.0 version from 1992. Furthermore, there is a specialized version called OpenGL ES for \"embedded systems\" such as mobile phones and tablets. And there is also WebGL, for use in Web browsers, which is basically a port of OpenGL ES. It will be useful to know something about how and why OpenGL has changed.</p> <p>First of all, you should know that OpenGL was designed as a \"client/server\" system. The server, which is responsible for controlling the computer's display and performing graphics computations, carries out commands issued by the client. Typically, the server is a GPU, including its graphics processors and memory. The server executes OpenGL commands. The client is the CPU in the same computer, along with the application program that it is running. OpenGL commands come from the program that is running on the CPU. However, it is actually possible to run OpenGL programs remotely over a network. That is, you can execute an application program on a remote computer (the OpenGL client), while the graphics computations and display are done on the computer that you are actually using (the OpenGL server).</p> <p>The key idea is that the client and the server are separate components, and there is a communication channel between those components. OpenGL commands and the data that they need are communicated from the client (the CPU) to the server (the GPU) over that channel. The capacity of the channel can be a limiting factor in graphics performance. Think of drawing an image onto the screen. If the GPU can draw the image in microseconds, but it takes milliseconds to send the data for the image from the CPU to the GPU, then the great speed of the GPU is irrelevant\u2014most of the time that it takes to draw the image is communication time.</p> <p>For this reason, one of the driving factors in the evolution of OpenGL has been the desire to limit the amount of communication that is needed between the CPU and the GPU. One approach is to store information in the GPU's memory. If some data is going to be used several times, it can be transmitted to the GPU once and stored in memory there, where it will be immediately accessible to the GPU. Another approach is to try to decrease the number of OpenGL commands that must be transmitted to the GPU to draw a given image.</p> <p>OpenGL draws primitives such as triangles. Specifying a primitive means specifying coordinates and attributes for each of its vertices. In the original OpenGL 1.0, a separate command was used to specify the coordinates of each vertex, and a command was needed each time the value of an attribute changed. To draw a single triangle would require three or more commands. Drawing a complex object made up of thousands of triangles would take many thousands of commands. Even in OpenGL 1.1, it became possible to draw such an object with a single command instead of thousands. All the data for the object would be loaded into arrays, which could then be sent in a single step to the GPU. Unfortunately, if the object was going to be drawn more than once, then the data would have to be retransmitted each time the object was drawn. This was fixed in OpenGL 1.5 with Vertex Buffer Objects. A VBO is a block of memory in the GPU that can store the coordinates or attribute values for a set of vertices. This makes it possible to reuse the data without having to retransmit it from the CPU to the GPU every time it is used.</p> <p>Similarly, OpenGL 1.1 introduced texture objects to make it possible to store several images on the GPU for use as textures. This means that texture images that are going to be reused several times can be loaded once into the GPU, so that the GPU can easily switch between images without having to reload them.</p> \u4e2d\u6587\u82f1\u6587 <p>\u968f\u7740\u65b0\u7684\u529f\u80fd\u88ab\u6dfb\u52a0\u5230OpenGL\u4e2d\uff0cAPI\u7684\u89c4\u6a21\u4e5f\u5728\u589e\u957f\u3002\u4f46\u589e\u957f\u901f\u5ea6\u4ecd\u7136\u88ab\u7528\u4e8e\u8fdb\u884c\u56fe\u5f62\u5904\u7406\u7684\u65b0\u7684\u3001\u66f4\u590d\u6742\u7684\u6280\u672f\u6240\u8d85\u8d8a\u3002\u5176\u4e2d\u4e00\u4e9b\u65b0\u6280\u672f\u88ab\u6dfb\u52a0\u5230\u4e86OpenGL\u4e2d\uff0c\u4f46\u95ee\u9898\u5728\u4e8e\uff0c\u65e0\u8bba\u4f60\u6dfb\u52a0\u4e86\u591a\u5c11\u529f\u80fd\uff0c\u603b\u4f1a\u6709\u5bf9\u65b0\u529f\u80fd\u7684\u9700\u6c42\uff0c\u4ee5\u53ca\u5bf9\u6240\u6709\u65b0\u529f\u80fd\u4f7f\u4e8b\u60c5\u53d8\u5f97\u8fc7\u4e8e\u590d\u6742\u7684\u62b1\u6028\uff01OpenGL\u662f\u4e00\u4e2a\u5e9e\u5927\u7684\u673a\u5668\uff0c\u4e0d\u65ad\u5730\u589e\u52a0\u65b0\u7ec4\u4ef6\uff0c\u4f46\u4ecd\u7136\u4e0d\u80fd\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u6ee1\u610f\u3002\u771f\u6b63\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u673a\u5668\u53ef\u7f16\u7a0b\u5316(programmable)\u3002\u968f\u7740OpenGL 2.0\u7684\u51fa\u73b0\uff0c\u7f16\u5199\u7a0b\u5e8f\u4ee5\u4f5c\u4e3aGPU\u56fe\u5f62\u8ba1\u7b97\u7684\u4e00\u90e8\u5206\u6267\u884c\u6210\u4e3a\u53ef\u80fd\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u5728GPU\u4e0a\u4ee5GPU\u901f\u5ea6\u8fd0\u884c\u3002\u60f3\u8981\u4f7f\u7528\u65b0\u56fe\u5f62\u6280\u672f\u7684\u7a0b\u5e8f\u5458\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5b9e\u73b0\u8be5\u529f\u80fd\uff0c\u7136\u540e\u5c06\u5176\u4ea4\u7ed9GPU\u6267\u884c\u3002OpenGL API\u4e0d\u5fc5\u66f4\u6539\u3002API\u552f\u4e00\u9700\u8981\u652f\u6301\u7684\u662f\u5c06\u7a0b\u5e8f\u53d1\u9001\u5230GPU\u4ee5\u8fdb\u884c\u6267\u884c\u7684\u80fd\u529b\u3002</p> <p>\u8fd9\u4e9b\u7a0b\u5e8f\u88ab\u79f0\u4e3a\u7740\u8272\u5668(shaders)\uff08\u5c3d\u7ba1\u8fd9\u4e2a\u672f\u8bed\u5b9e\u9645\u4e0a\u5e76\u4e0d\u63cf\u8ff0\u5b83\u4eec\u5927\u591a\u6570\u505a\u4ec0\u4e48\uff09\u3002\u9996\u5148\u88ab\u5f15\u5165\u7684\u7740\u8272\u5668\u662f\u9876\u70b9\u7740\u8272\u5668(vertex shaders)\u548c\u7247\u6bb5\u7740\u8272\u5668(fragment shaders)\u3002\u5f53\u7ed8\u5236\u4e00\u4e2a\u57fa\u5143\u65f6\uff0c\u5fc5\u987b\u5728\u6bcf\u4e2a\u57fa\u5143\u7684\u9876\u70b9\u4e0a\u8fdb\u884c\u4e00\u4e9b\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bf9\u9876\u70b9\u5750\u6807\u5e94\u7528\u51e0\u4f55\u53d8\u6362\u6216\u4f7f\u7528\u5c5e\u6027\u548c\u5168\u5c40\u5149\u7167\u73af\u5883\u6765\u8ba1\u7b97\u8be5\u9876\u70b9\u7684\u989c\u8272\u3002\u9876\u70b9\u7740\u8272\u5668\u662f\u4e00\u4e2a\u53ef\u4ee5\u63a5\u7ba1\u6267\u884c\u6b64\u7c7b\u201c\u6bcf\u4e2a\u9876\u70b9\u201d\u8ba1\u7b97\u7684\u7a0b\u5e8f\u3002\u540c\u6837\uff0c\u5bf9\u4e8e\u57fa\u5143\u5185\u7684\u6bcf\u4e2a\u50cf\u7d20\uff0c\u5fc5\u987b\u6267\u884c\u4e00\u4e9b\u5de5\u4f5c\u3002\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u63a5\u7ba1\u6267\u884c\u8fd9\u79cd\u201c\u6bcf\u4e2a\u50cf\u7d20\u201d\u7684\u8ba1\u7b97\u3002\uff08\u7247\u6bb5\u7740\u8272\u5668\u4e5f\u79f0\u4e3a\u50cf\u7d20\u7740\u8272\u5668(pixel shaders)\u3002\uff09</p> <p>\u53ef\u7f16\u7a0b\u56fe\u5f62\u786c\u4ef6\u7684\u6982\u5ff5\u975e\u5e38\u6210\u529f\u2014\u2014\u6210\u529f\u5230\u5728OpenGL 3.0\u4e2d\uff0c\u5e38\u89c4\u7684\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u4e2a\u7247\u6bb5\u7684\u5904\u7406\u88ab\u5f03\u7528\uff08\u610f\u5473\u7740\u4e0d\u9f13\u52b1\u4f7f\u7528\uff09\u3002\u5e76\u4e14\u5728OpenGL 3.1\u4e2d\uff0c\u5b83\u5df2\u4eceOpenGL\u6807\u51c6\u4e2d\u5220\u9664\uff0c\u5c3d\u7ba1\u4ecd\u4f5c\u4e3a\u53ef\u9009\u6269\u5c55\u5b58\u5728\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u684c\u9762\u7248\u672c\u7684OpenGL\u4e2d\u4ecd\u652f\u6301\u6240\u6709\u539f\u59cb\u529f\u80fd\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u7ee7\u7eed\u63d0\u4f9b\u3002\u7136\u800c\uff0c\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u65b9\u9762\uff0c\u4f7f\u7528OpenGL ES 2.0\u53ca\u66f4\u9ad8\u7248\u672c\u65f6\uff0c\u7740\u8272\u5668\u7684\u4f7f\u7528\u662f\u5f3a\u5236\u6027\u7684\uff0c\u5e76\u4e14\u5df2\u5b8c\u5168\u5220\u9664\u4e86OpenGL 1.1 API\u7684\u5927\u90e8\u5206\u5185\u5bb9\u3002\u7528\u4e8eWeb\u6d4f\u89c8\u5668\u7684OpenGL\u7248\u672cWebGL\u662f\u57fa\u4e8eOpenGL ES\u7684\uff0c\u5b83\u4e5f\u9700\u8981\u4f7f\u7528\u7740\u8272\u5668\u6765\u5b8c\u6210\u4efb\u4f55\u4e8b\u60c5\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u5c06\u4ece\u7248\u672c1.1\u5f00\u59cb\u5b66\u4e60OpenGL\u3002\u8be5\u7248\u672c\u7684\u5927\u591a\u6570\u6982\u5ff5\u548c\u8bb8\u591a\u7ec6\u8282\u4ecd\u7136\u76f8\u5173\uff0c\u5e76\u4e14\u4e3a\u521d\u5b66\u8005\u63d0\u4f9b\u4e86\u66f4\u5bb9\u6613\u7684\u5165\u95e8\u70b9\u3002</p> <p>OpenGL\u7740\u8272\u5668\u662f\u7528OpenGL\u7740\u8272\u8bed\u8a00(GLSL)\uff08(OpenGL Shading Language)\uff09\u7f16\u5199\u7684\u3002\u4e0e OpenGL \u672c\u8eab\u4e00\u6837\uff0cGLSL\u4e5f\u7ecf\u5386\u4e86\u51e0\u4e2a\u7248\u672c\u3002\u6211\u4eec\u5c06\u5728\u8bfe\u7a0b\u540e\u671f\u82b1\u4e00\u4e9b\u65f6\u95f4\u5b66\u4e60GLSL ES\uff0c\u8fd9\u662f\u4e0e WebGL \u548c OpenGL ES \u4e00\u8d77\u4f7f\u7528\u7684\u7248\u672c\u3002GLSL\u4f7f\u7528\u7c7b\u4f3c\u4e8eC\u7f16\u7a0b\u8bed\u8a00\u7684\u8bed\u6cd5\u3002</p> <p>As new capabilities were added to OpenGL, the API grew in size. But the growth was still outpaced by the invention of new, more sophisticated techniques for doing graphics. Some of these new techniques were added to OpenGL, but the problem is that no matter how many features you add, there will always be demands for new features\u2014as well as complaints that all the new features are making things too complicated! OpenGL was a giant machine, with new pieces always being tacked onto it, but still not pleasing everyone. The real solution was to make the machine programmable. With OpenGL 2.0, it became possible to write programs to be executed as part of the graphical computation in the GPU. The programs are run on the GPU at GPU speed. A programmer who wants to use a new graphics technique can write a program to implement the feature and just hand it to the GPU. The OpenGL API doesn't have to be changed. The only thing that the API has to support is the ability to send programs to the GPU for execution.</p> <p>The programs are called shaders (although the term doesn't really describe what most of them actually do). The first shaders to be introduced were vertex shaders and fragment shaders. When a primitive is drawn, some work has to be done at each vertex of the primitive, such as applying a geometric transform to the vertex coordinates or using the attributes and global lighting environment to compute the color of that vertex. A vertex shader is a program that can take over the job of doing such \"per-vertex\" computations. Similarly, some work has to be done for each pixel inside the primitive. A fragment shader can take over the job of performing such \"per-pixel\" computations. (Fragment shaders are also called pixel shaders.)</p> <p>The idea of programmable graphics hardware was very successful\u2014so successful that in OpenGL 3.0, the usual per-vertex and per-fragment processing was deprecated (meaning that its use was discouraged). And in OpenGL 3.1, it was removed from the OpenGL standard, although it is still present as an optional extension. In practice, all the original features of OpenGL are still supported in desktop versions of OpenGL and will probably continue to be available in the future. On the embedded system side, however, with OpenGL ES 2.0 and later, the use of shaders is mandatory, and a large part of the OpenGL 1.1 API has been completely removed. WebGL, the version of OpenGL for use in web browsers, is based on OpenGL ES, and it also requires shaders to get anything at all done. Nevertheless, we will begin our study of OpenGL with version 1.1. Most of the concepts and many of the details from that version are still relevant, and it offers an easier entry point for someone new to 3D graphics programming.</p> <p>OpenGL shaders are written in GLSL (OpenGL Shading Language). Like OpenGL itself, GLSL has gone through several versions. We will spend some time later in the course studying GLSL ES, the version used with WebGL and OpenGL ES. GLSL uses a syntax similar to the C programming language.</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f5c\u4e3a\u5bf9GPU\u786c\u4ef6\u7684\u6700\u540e\u4e00\u70b9\u8bf4\u660e\uff0c\u6211\u5e94\u8be5\u6307\u51fa\uff0c\u5bf9\u4e8e\u4e0d\u540c\u9876\u70b9\u8fdb\u884c\u7684\u8ba1\u7b97\u57fa\u672c\u4e0a\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u5927\u6982\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u8ba1\u7b97\u3002\u5bf9\u4e8e\u4e0d\u540c\u7247\u6bb5\u7684\u8ba1\u7b97\u4e5f\u662f\u5982\u6b64\u3002\u4e8b\u5b9e\u4e0a\uff0cGPU\u53ef\u4ee5\u62e5\u6709\u6570\u767e\u4e2a\u751a\u81f3\u6570\u5343\u4e2a\u53ef\u4ee5\u5e76\u884c\u64cd\u4f5c\u7684\u5904\u7406\u5668\u3002\u8bda\u7136\uff0c\u5355\u4e2a\u5904\u7406\u5668\u7684\u6027\u80fd\u8fdc\u4e0d\u53caCPU\u5f3a\u5927\uff0c\u4f46\u5178\u578b\u7684\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u4e2a\u7247\u6bb5\u7684\u8ba1\u7b97\u5e76\u4e0d\u662f\u975e\u5e38\u590d\u6742\u7684\u3002\u5728\u56fe\u5f62\u8ba1\u7b97\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u5927\u91cf\u5904\u7406\u5668\u548c\u5927\u91cf\u5e76\u884c\u6027\uff0c\u4f7f\u5f97\u5373\u4f7f\u5728\u76f8\u5f53\u5ec9\u4ef7\u7684GPU\u4e0a\u4e5f\u80fd\u5b9e\u73b0\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u56fe\u5f62\u6027\u80fd\u3002</p> <p>As a final remark on GPU hardware, I should note that the computations that are done for different vertices are pretty much independent, and so can potentially be done in parallel. The same is true of the computations for different fragments. In fact, GPUs can have hundreds or thousands of processors that can operate in parallel. Admittedly, the individual processors are much less powerful than a CPU, but then typical per-vertex and per-fragment computations are not very complicated. The large number of processors, and the large amount of parallelism that is possible in graphics computations, makes for impressive graphics performance even on fairly inexpensive GPUs.</p>"},{"location":"cn/c2/","title":"\u7b2c\u4e8c\u7ae0 \u4e8c\u7ef4\u56fe\u5f62\u7ed8\u5236","text":"<p>Two-Dimensional Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>\u901a\u8fc7\u672c\u7ae0\uff0c\u6211\u4eec\u5f00\u59cb\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\uff0c\u9996\u5148\u4ece\u4e8c\u7ef4\u56fe\u5f62\u5f00\u59cb\u3002\u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b\uff0c\u4e8b\u60c5\u66f4\u7b80\u5355\uff0c\u6bd4\u5728\u4e09\u7ef4\u60c5\u51b5\u4e0b\u66f4\u5bb9\u6613\u5f62\u8c61\u5316\uff0c\u4f46\u672c\u7ae0\u6db5\u76d6\u7684\u5927\u90e8\u5206\u6982\u5ff5\u4e5f\u5c06\u4e0e\u4e09\u7ef4\u60c5\u51b5\u975e\u5e38\u76f8\u5173\u3002</p> <p>\u672c\u7ae0\u5f00\u59cb\u7684\u56db\u4e2a\u90e8\u5206\u4ee5\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f\u68c0\u89c6\u4e8c\u7ef4\u56fe\u5f62\uff0c\u800c\u4e0d\u5c06\u5176\u4e0e\u7279\u5b9a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u56fe\u5f62API\u8054\u7cfb\u8d77\u6765\u3002\u8fd9\u4e9b\u90e8\u5206\u4e2d\u7684\u7f16\u7801\u793a\u4f8b\u91c7\u7528\u4e86\u4f2a\u4ee3\u7801\u7f16\u5199\uff0c\u5e94\u8be5\u80fd\u8ba9\u4efb\u4f55\u5177\u6709\u8db3\u591f\u7f16\u7a0b\u80cc\u666f\u7684\u4eba\u7406\u89e3\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4e09\u4e2a\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u5feb\u901f\u67e5\u770b\u4e09\u79cd\u7279\u5b9a\u8bed\u8a00\u4e2d\u7684\u4e8c\u7ef4\u56fe\u5f62\uff1a\u4f7f\u7528Graphics2D\u7684Java\uff0c\u4f7f\u7528HTML &lt;canvas&gt;\u56fe\u5f62\u7684JavaScript\u4ee5\u53caSVG\u3002\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u4e9b\u8bed\u8a00\u5982\u4f55\u4f7f\u7528\u672c\u7ae0\u524d\u9762\u4ecb\u7ecd\u7684\u8bb8\u591a\u901a\u7528\u6982\u5ff5\u3002</p> <p>\u7b2c\u4e8c\u7ae0\u5185\u5bb9:</p> <ul> <li>\u7b2c1\u8282: \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272</li> <li>\u7b2c2\u8282: \u5f62\u72b6</li> <li>\u7b2c3\u8282: \u53d8\u6362</li> <li>\u7b2c4\u8282: \u5206\u5c42\u5efa\u6a21</li> <li>\u7b2c5\u8282: Java Graphics2D</li> <li>\u7b2c6\u8282: HTML Canvas\u56fe\u5f62</li> <li>\u7b2c7\u8282: SVG\uff1a\u4e00\u79cd\u573a\u666f\u63cf\u8ff0\u8bed\u8a00</li> </ul> <p>With this chapter, we begin our study of computer graphics by looking at the two-dimensional case. Things are simpler and a lot easier to visualize in 2D than in 3D, but most of the ideas that are covered in this chapter will also be very relevant to 3D.</p> <p>The chapter begins with four sections that examine 2D graphics in a general way, without tying it to a particular programming language or graphics API. The coding examples in these sections are written in pseudocode that should make sense to anyone with enough programming background to be reading this book. In the next three sections, we will take quick looks at 2D graphics in three particular languages: Java with Graphics2D, JavaScript with HTML &lt;canvas&gt; graphics, and SVG. We will see how these languages use many of the general ideas from earlier in the chapter.</p> <p>Contents of Chapter 2:</p> <ul> <li>Section 1: Pixels, Coordinates, and Colors</li> <li>Section 2: Shapes</li> <li>Section 3: Transforms</li> <li>Section 4: Hierarchical Modeling</li> <li>Section 5: Java Graphics2D</li> <li>Section 6: HTML Canvas Graphics</li> <li>Section 7: SVG: A Scene Description Language</li> </ul>"},{"location":"cn/c2/s1/","title":"\u7b2c1\u8282: \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272","text":"<p>Pixels, Coordinates, and Colors</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u50cf\uff0c\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u79cd\u989c\u8272\u3002\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\u53ef\u4ee5\u7531\u4e00\u5bf9\u6570\u5b57\u5750\u6807\u6765\u786e\u5b9a\u3002\u989c\u8272\u4e5f\u53ef\u4ee5\u7528\u6570\u5b57\u6765\u6307\u5b9a\u3002\u7136\u800c\uff0c\u5c06\u6570\u5b57\u5206\u914d\u7ed9\u70b9\u6216\u989c\u8272\u6709\u4e00\u5b9a\u7684\u4efb\u610f\u6027\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\u6765\u7814\u7a76\u5750\u6807\u7cfb(coordinate systems)\uff0c\u5c06\u6570\u5b57\u4e0e\u70b9\u76f8\u5173\u8054\uff0c\u5e76\u4e14\u989c\u8272\u6a21\u578b(color model)\uff0c\u5c06\u6570\u5b57\u4e0e\u989c\u8272\u76f8\u5173\u8054\u3002</p> <p>To create a two-dimensional image, each point in the image is assigned a color. A point in 2D can be identified by a pair of numerical coordinates. Colors can also be specified numerically. However, the assignment of numbers to points or colors is somewhat arbitrary. So we need to spend some time studying coordinate systems, which associate numbers to points, and color models, which associate numbers to colors.</p>"},{"location":"cn/c2/s1/#211-\u50cf\u7d20\u5750\u6807","title":"2.1.1 \u50cf\u7d20\u5750\u6807","text":"<p>Pixel Coordinates</p> \u4e2d\u6587\u82f1\u6587 <p>\u6570\u5b57\u56fe\u50cf\u7531\u50cf\u7d20\u7684\u884c\u548c\u5217\u7ec4\u6210\u3002\u5728\u8fd9\u6837\u7684\u56fe\u50cf\u4e2d\uff0c\u4e00\u4e2a\u50cf\u7d20\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5305\u542b\u5b83\u7684\u5217\u548c\u884c\u6765\u786e\u5b9a\u3002\u5c31\u5750\u6807\u800c\u8a00\uff0c\u4e00\u4e2a\u50cf\u7d20\u53ef\u4ee5\u7531\u7ed9\u5b9a\u7684\u5217\u53f7\u548c\u884c\u53f7\u7ec4\u6210\u7684\u6574\u6570\u5bf9\u6765\u6807\u8bc6\u3002\u4f8b\u5982\uff0c\u5750\u6807\u4e3a\uff083\uff0c5\uff09\u7684\u50cf\u7d20\u4f4d\u4e8e\u7b2c3\u5217\u548c\u7b2c5\u884c\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5217\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\uff0c\u4ece\u96f6\u5f00\u59cb\u3002\u5927\u591a\u6570\u56fe\u5f62\u7cfb\u7edf\uff0c\u5305\u62ec\u672c\u7ae0\u5c06\u8981\u8ba8\u8bba\u7684\u7cfb\u7edf\uff0c\u5c06\u884c\u4ece\u4e0a\u5230\u4e0b\u7f16\u53f7\uff0c\u4ece\u96f6\u5f00\u59cb\u3002\u4f46\u662f\uff0c\u4e00\u4e9b\u7cfb\u7edf\uff0c\u5305\u62ecOpenGL\uff0c\u5c06\u884c\u4ece\u5e95\u90e8\u5230\u9876\u90e8\u7f16\u53f7\u3002</p> <p> pixel coordinates </p> <p>\u8bf7\u7279\u522b\u6ce8\u610f\uff0c\u7531\u4e00\u5bf9\u5750\u6807\uff08x\uff0cy\uff09\u786e\u5b9a\u7684\u50cf\u7d20\u53d6\u51b3\u4e8e\u5750\u6807\u7cfb\u7edf\u7684\u9009\u62e9\u3002\u5728\u4e86\u89e3\u6240\u4f7f\u7528\u7684\u5750\u6807\u7cfb\u7edf\u4e4b\u524d\uff0c\u60a8\u603b\u662f\u9700\u8981\u77e5\u9053\u60a8\u6240\u8ba8\u8bba\u7684\u662f\u54ea\u4e2a\u70b9\u3002</p> <p>\u884c\u53f7\u548c\u5217\u53f7\u6807\u8bc6\u4e00\u4e2a\u50cf\u7d20\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u70b9\u3002\u4e00\u4e2a\u50cf\u7d20\u5305\u542b\u8bb8\u591a\u70b9\uff1b\u4ece\u6570\u5b66\u4e0a\u8bb2\uff0c\u5b83\u5305\u542b\u65e0\u9650\u591a\u4e2a\u70b9\u3002 \u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u76ee\u6807\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u4e3a\u50cf\u7d20\u7740\u8272\uff0c\u800c\u662f\u521b\u5efa\u548c\u64cd\u4f5c\u56fe\u50cf\u3002\u5728\u67d0\u79cd\u7406\u60f3\u610f\u4e49\u4e0a\uff0c\u56fe\u50cf\u5e94\u8be5\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u70b9\u6307\u5b9a\u4e00\u4e2a\u989c\u8272\u6765\u5b9a\u4e49\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u6307\u5b9a\u4e00\u4e2a\u989c\u8272\u3002\u50cf\u7d20\u662f\u4e00\u79cd\u8fd1\u4f3c\u3002\u5982\u679c\u6211\u4eec\u60f3\u8c61\u6709\u4e00\u4e2a\u771f\u6b63\u7684\u3001\u7406\u60f3\u7684\u56fe\u50cf\u8981\u663e\u793a\uff0c\u90a3\u4e48\u901a\u8fc7\u7ed9\u50cf\u7d20\u7740\u8272\u663e\u793a\u7684\u4efb\u4f55\u56fe\u50cf\u90fd\u662f\u4e00\u79cd\u8fd1\u4f3c\u3002\u8fd9\u6709\u5f88\u591a\u542b\u4e49\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u753b\u4e00\u6761\u7ebf\u6bb5\u3002\u6570\u5b66\u4e0a\u7684\u7ebf\u6761\u662f\u6ca1\u6709\u539a\u5ea6\u7684\uff0c\u56e0\u6b64\u662f\u770b\u4e0d\u89c1\u7684\u3002\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u60f3\u8981\u753b\u7684\u662f\u4e00\u6761\u6709\u4e00\u5b9a\u5bbd\u5ea6\u7684\u7ebf\u6bb5\u3002\u5047\u8bbe\u7ebf\u6761\u5e94\u8be5\u662f\u4e00\u50cf\u7d20\u5bbd\u3002\u95ee\u9898\u662f\uff0c\u9664\u975e\u7ebf\u662f\u6c34\u5e73\u6216\u5782\u76f4\u7684\uff0c\u5426\u5219\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u7ed9\u50cf\u7d20\u7740\u8272\u6765\u771f\u6b63\u7ed8\u5236\u7ebf\u3002\u5bf9\u89d2\u51e0\u4f55\u7ebf\u6761\u53ea\u4f1a\u90e8\u5206\u5730\u8986\u76d6\u4e00\u4e9b\u50cf\u7d20\u3002\u4e0d\u53ef\u80fd\u5c06\u50cf\u7d20\u7684\u4e00\u90e8\u5206\u6d82\u6210\u9ed1\u8272\uff0c\u53e6\u4e00\u90e8\u5206\u6d82\u6210\u767d\u8272\u3002\u5f53\u60a8\u5c1d\u8bd5\u4ec5\u4f7f\u7528\u9ed1\u8272\u548c\u767d\u8272\u50cf\u7d20\u7ed8\u5236\u7ebf\u6761\u65f6\uff0c\u7ed3\u679c\u662f\u51fa\u73b0\u4e86\u9636\u68af\u6548\u5e94\u3002\u8fd9\u79cd\u6548\u5e94\u662f\u6240\u8c13\u201c\u6df7\u53e0(aliasing)\u201d\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u6df7\u53e0\u4e5f\u53ef\u4ee5\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u7684\u5b57\u7b26\u8f6e\u5ed3\u548c\u4e24\u4e2a\u4e0d\u540c\u989c\u8272\u533a\u57df\u4e4b\u95f4\u7684\u5bf9\u89d2\u7ebf\u6216\u66f2\u7ebf\u8fb9\u754c\u4e2d\u770b\u5230\u3002\uff08\u201c\u6df7\u53e0\u201d\u4e00\u8bcd\u53ef\u80fd\u6765\u81ea\u4e8e\u7406\u60f3\u56fe\u50cf\u81ea\u7136\u662f\u7528\u5b9e\u6570\u5750\u6807\u63cf\u8ff0\u7684\u3002\u5f53\u60a8\u5c1d\u8bd5\u4f7f\u7528\u50cf\u7d20\u8868\u793a\u56fe\u50cf\u65f6\uff0c\u8bb8\u591a\u5b9e\u6570\u5750\u6807\u5c06\u6620\u5c04\u5230\u76f8\u540c\u7684\u6574\u6570\u50cf\u7d20\u5750\u6807\uff1b\u5b83\u4eec\u53ef\u4ee5\u88ab\u89c6\u4e3a\u540c\u4e00\u4e2a\u50cf\u7d20\u7684\u4e0d\u540c\u540d\u79f0\u6216\u201c\u522b\u540d\u201d\u3002\uff09</p> <p>\u6297\u6df7\u53e0(Antialiasing) \u662f\u4e00\u79cd\u65e8\u5728\u51cf\u8f7b\u6df7\u53e0\u6548\u5e94\u7684\u6280\u672f\u672f\u8bed\u3002\u5176\u601d\u60f3\u662f\uff0c\u5f53\u4e00\u4e2a\u50cf\u7d20\u53ea\u88ab\u4e00\u4e2a\u5f62\u72b6\u7684\u4e00\u90e8\u5206\u8986\u76d6\u65f6\uff0c\u50cf\u7d20\u7684\u989c\u8272\u5e94\u8be5\u662f\u5f62\u72b6\u989c\u8272\u548c\u80cc\u666f\u989c\u8272\u7684\u6df7\u5408\u3002\u5f53\u5728\u767d\u8272\u80cc\u666f\u4e0a\u7ed8\u5236\u4e00\u6761\u9ed1\u8272\u7ebf\u65f6\uff0c\u88ab\u90e8\u5206\u8986\u76d6\u7684\u50cf\u7d20\u7684\u989c\u8272\u5c06\u662f\u7070\u8272\uff0c\u5176\u7070\u5ea6\u53d6\u51b3\u4e8e\u7ebf\u6bb5\u8986\u76d6\u50cf\u7d20\u7684\u6bd4\u4f8b\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u7cbe\u786e\u8ba1\u7b97\u8fd9\u4e2a\u533a\u57df\u662f\u592a\u56f0\u96be\u7684\uff0c\u56e0\u6b64\u91c7\u7528\u4e86\u4e00\u4e9b\u8fd1\u4f3c\u65b9\u6cd5\u3002\uff09\u4f8b\u5982\uff0c\u4e0b\u56fe\u663e\u793a\u4e86\u4e00\u4e2a\u51e0\u4f55\u7ebf\u6bb5\uff0c\u5de6\u4fa7\u662f\u8be5\u7ebf\u6bb5\uff0c\u53f3\u4fa7\u662f\u7531\u50cf\u7d20\u7740\u8272\u5f97\u5230\u7684\u4e24\u4e2a\u8fd1\u4f3c\u56fe\u50cf\u3002\u4e3a\u4e86\u8ba9\u60a8\u80fd\u591f\u770b\u5230\u5355\u4e2a\u50cf\u7d20\uff0c\u8fd9\u4e9b\u7ebf\u6bb5\u88ab\u653e\u5927\u4e86\u8bb8\u591a\u3002\u4e2d\u95f4\u7684\u7ebf\u6bb5\u6ca1\u6709\u4f7f\u7528\u6297\u6df7\u53e0\u6280\u672f\u7ed8\u5236\uff0c\u800c\u53f3\u4fa7\u7684\u7ebf\u6bb5\u4f7f\u7528\u4e86\u6297\u6df7\u53e0\u6280\u672f\uff1a</p> <p> antialiased line </p> <p>\u8bf7\u6ce8\u610f\uff0c\u6297\u6df7\u53e0\u5e76\u4e0d\u80fd\u63d0\u4f9b\u5b8c\u7f8e\u7684\u56fe\u50cf\uff0c\u4f46\u5b83\u53ef\u4ee5\u51cf\u5c11\u6df7\u53e0\u4ea7\u751f\u7684\u201c\u9636\u68af(jaggies)\u201d\u6548\u5e94\uff08\u81f3\u5c11\u5728\u6b63\u5e38\u7f29\u653e\u65f6\uff09\u3002</p> <p>\u5c06\u5b9e\u6570\u5750\u6807\u6620\u5c04\u5230\u50cf\u7d20\u65f6\u8fd8\u6d89\u53ca\u5176\u4ed6\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u5728\u50cf\u7d20\u4e2d\u54ea\u4e00\u70b9\u5e94\u4e0e\uff083\uff0c5\uff09\u7b49\u6574\u6570\u503c\u7684\u5750\u6807\u5bf9\u5e94\uff1f\u50cf\u7d20\u7684\u4e2d\u5fc3\uff1f\u50cf\u7d20\u7684\u4e00\u4e2a\u89d2\u843d\uff1f\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u6570\u5b57\u662f\u6307\u50cf\u7d20\u7684\u5de6\u4e0a\u89d2\u3002\u53e6\u4e00\u79cd\u601d\u8003\u65b9\u5f0f\u662f\u8bf4\u6574\u6570\u5750\u6807\u662f\u6307\u50cf\u7d20\u4e4b\u95f4\u7684\u7ebf\uff0c\u800c\u4e0d\u662f\u6307\u50cf\u7d20\u672c\u8eab\u3002\u4f46\u662f\u8fd9\u4ecd\u7136\u4e0d\u80fd\u786e\u5b9a\u7ed8\u5236\u51e0\u4f55\u5f62\u72b6\u65f6\u786e\u5207\u5f71\u54cd\u4e86\u54ea\u4e9b\u50cf\u7d20\u3002\u4f8b\u5982\uff0c\u4e0b\u56fe\u663e\u793a\u4e86\u4f7f\u7528HTML\u753b\u5e03\u56fe\u5f62\u7ed8\u5236\u7684\u4e24\u6761\u7ebf\uff0c\u653e\u5927\u4e86\u8bb8\u591a\u3002\u8fd9\u4e9b\u7ebf\u88ab\u6307\u5b9a\u4e3a\u4ee5\u4e00\u50cf\u7d20\u7ebf\u5bbd\u7ed8\u5236\u7684\u9ed1\u8272\uff1a</p> <p> horizontal lines from canvas </p> <p>\u9876\u90e8\u7ebf\u6bb5\u4ece\u70b9\uff08100,100\uff09\u5230\u70b9\uff08120,100\uff09\u7ed8\u5236\u3002\u5728\u753b\u5e03\u56fe\u5f62\u4e2d\uff0c\u6574\u6570\u5750\u6807\u5bf9\u5e94\u4e8e\u50cf\u7d20\u4e4b\u95f4\u7684\u7ebf\uff0c\u4f46\u662f\u5f53\u7ed8\u5236\u4e00\u50cf\u7d20\u5bbd\u7684\u7ebf\u65f6\uff0c\u8be5\u7ebf\u5ef6\u4f38\u4e86\u4e00\u4e2a\u50cf\u7d20\u7684\u4e00\u534a\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u9876\u90e8\u7ebf\u6bb5\uff0c\u7ed8\u5236\u7684\u7ebf\u4f4d\u4e8e\u4e00\u4e2a\u50cf\u7d20\u7684\u4e00\u534a\u4ee5\u53ca\u53e6\u4e00\u4e2a\u50cf\u7d20\u7684\u4e00\u534a\u3002\u4f7f\u7528\u6297\u6df7\u53e0\u7684\u56fe\u5f62\u7cfb\u7edf\u5c06\u4e24\u884c\u50cf\u7d20\u90fd\u6e32\u67d3\u6210\u4e86\u7070\u8272\u3002\u5e95\u90e8\u7ebf\u6bb5\u4ece\u70b9\uff08100.5,100.5\uff09\u5230\uff08120.5,100.5\uff09\u7ed8\u5236\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ebf\u6bb5\u6b63\u597d\u4f4d\u4e8e\u4e00\u4e2a\u50cf\u7d20\u7684\u4e00\u884c\u4e2d\uff0c\u8fd9\u4e2a\u50cf\u7d20\u88ab\u6d82\u6210\u4e86\u9ed1\u8272\u3002\u5e95\u90e8\u7ebf\u6bb5\u672b\u7aef\u7684\u7070\u8272\u50cf\u7d20\u4e0e\u8be5\u7ebf\u6bb5\u4ec5\u5ef6\u4f38\u5230\u50cf\u7d20\u4e00\u534a\u6709\u5173\u3002\u5176\u4ed6\u56fe\u5f62\u7cfb\u7edf\u53ef\u80fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u6e32\u67d3\u76f8\u540c\u7684\u7ebf\u6bb5\u3002</p> <p>\u4e0b\u9762\u7684\u4ea4\u4e92\u5f0f\u6f14\u793a\u5141\u8bb8\u60a8\u5bf9\u50cf\u7d20\u548c\u6297\u6df7\u53e0\u8fdb\u884c\u5b9e\u9a8c\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u5728\u672c\u4e66\u7684\u4efb\u4f55\u4ea4\u4e92\u5f0f\u6f14\u793a\u4e2d\uff0c\u60a8\u90fd\u53ef\u4ee5\u70b9\u51fb\u5de6\u4e0a\u89d2\u7684\u95ee\u53f7\u56fe\u6807\u83b7\u53d6\u6709\u5173\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u66f4\u591a\u4fe1\u606f\u3002\uff09</p> <p></p> <p>\u6240\u6709\u8fd9\u4e9b\u90fd\u88ab\u73b0\u4eca\u50cf\u7d20\u4e0d\u518d\u662f\u8fc7\u53bb\u7684\u50cf\u7d20\u6240\u590d\u6742\u5316\u3002\u4eca\u5929\u7684\u50cf\u7d20\u66f4\u5c0f\u4e86\uff01\u663e\u793a\u8bbe\u5907\u7684\u5206\u8fa8\u7387\u53ef\u4ee5\u7528\u6bcf\u82f1\u5bf8\u7684\u50cf\u7d20\u6570\u6765\u8861\u91cf\uff0c\u8fd9\u4e2a\u6570\u91cf\u88ab\u79f0\u4e3aPPI\uff08\u6bcf\u82f1\u5bf8\u50cf\u7d20\uff09\u6216\u6709\u65f6\u79f0\u4e3aDPI\uff08\u6bcf\u82f1\u5bf8\u70b9\uff09\u3002\u65e9\u671f\u7684\u5c4f\u5e55\u7684\u5206\u8fa8\u7387\u5927\u7ea6\u572872 PPI\u5de6\u53f3\u3002\u5728\u8fd9\u79cd\u5206\u8fa8\u7387\u4e0b\uff0c\u4e2a\u522b\u50cf\u7d20\u662f\u6e05\u6670\u53ef\u89c1\u7684\u3002\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u5927\u591a\u6570\u663e\u793a\u5668\u7684\u50cf\u7d20\u5bc6\u5ea6\u7ea6\u4e3a100\u50cf\u7d20/\u82f1\u5bf8\uff0c\u4f46\u662f\u4eca\u5929\u7684\u9ad8\u5206\u8fa8\u7387\u663e\u793a\u5668\u53ef\u4ee5\u6709200\u3001300\u751a\u81f3400\u50cf\u7d20/\u82f1\u5bf8\u3002\u5728\u6700\u9ad8\u5206\u8fa8\u7387\u4e0b\uff0c\u5355\u4e2a\u50cf\u7d20\u5df2\u7ecf\u65e0\u6cd5\u5206\u8fa8\u3002</p> <p>\u50cf\u7d20\u6709\u7740\u5404\u79cd\u5404\u6837\u7684\u5c3a\u5bf8\uff0c\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u50cf\u7d20\u7684\u5750\u6807\u7cfb\u7edf\u3002\u4e00\u4e2a\u56fe\u50cf\u662f\u6839\u636e\u6bcf\u82f1\u5bf8100\u4e2a\u50cf\u7d20\u7684\u5047\u8bbe\u521b\u5efa\u7684\uff0c\u5c06\u5728400 PPI\u7684\u663e\u793a\u5668\u4e0a\u770b\u8d77\u6765\u5f88\u5c0f\u3002\u4e00\u6761\u4e00\u50cf\u7d20\u5bbd\u7684\u7ebf\u5728100 PPI\u7684\u663e\u793a\u5668\u4e0a\u770b\u8d77\u6765\u4e0d\u9519\uff0c\u4f46\u5728400 PPI\u7684\u663e\u793a\u5668\u4e0a\uff0c\u4e00\u50cf\u7d20\u5bbd\u7684\u7ebf\u53ef\u80fd\u592a\u7ec6\u4e86\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5728\u8bb8\u591a\u56fe\u5f62\u7cfb\u7edf\u4e2d\uff0c\u201c\u50cf\u7d20(pixel)\u201d\u5e76\u4e0d\u771f\u6b63\u6307\u7684\u662f\u7269\u7406\u50cf\u7d20\u7684\u5c3a\u5bf8\u3002\u76f8\u53cd\uff0c\u5b83\u53ea\u662f\u53e6\u4e00\u4e2a\u5ea6\u91cf\u5355\u4f4d\uff0c\u7531\u7cfb\u7edf\u8bbe\u7f6e\u4e3a\u9002\u5f53\u7684\u5c3a\u5bf8\u3002\uff08\u5728\u684c\u9762\u7cfb\u7edf\u4e0a\uff0c\u4e00\u4e2a\u50cf\u7d20\u901a\u5e38\u5927\u7ea6\u662f\u4e00\u82f1\u5bf8\u7684\u767e\u5206\u4e4b\u4e00\u3002\u5728\u667a\u80fd\u624b\u673a\u4e0a\uff0c\u89c2\u770b\u8ddd\u79bb\u66f4\u8fd1\uff0c\u8fd9\u4e2a\u503c\u53ef\u80fd\u66f4\u63a5\u8fd1\u4e8e1/160\u82f1\u5bf8\u3002\u6b64\u5916\uff0c\u5f53\u7528\u6237\u5bf9\u7f51\u9875\u8fdb\u884c\u653e\u5927\u65f6\uff0c\u50cf\u7d20\u4f5c\u4e3a\u4e00\u4e2a\u5ea6\u91cf\u5355\u4f4d\u7684\u542b\u4e49\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\uff09</p> <p>\u50cf\u7d20\u5f15\u8d77\u4e86\u4e00\u4e9b\u5c1a\u672a\u5b8c\u5168\u89e3\u51b3\u7684\u95ee\u9898\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5bf9\u4e8e\u6211\u4eec\u5728\u672c\u4e66\u4e2d\u5927\u591a\u6570\u4f7f\u7528\u7684\u77e2\u91cf\u56fe\u5f62\u6765\u8bf4\uff0c\u5b83\u4eec\u4e0d\u518d\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5bf9\u4e8e\u77e2\u91cf\u56fe\u5f62\u6765\u8bf4\uff0c\u50cf\u7d20\u4ec5\u5728\u6805\u683c\u5316\u671f\u95f4\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u5c06\u77e2\u91cf\u56fe\u50cf\u8f6c\u6362\u4e3a\u7528\u4e8e\u663e\u793a\u7684\u50cf\u7d20\u3002\u77e2\u91cf\u56fe\u50cf\u672c\u8eab\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u4fbf\u7684\u5750\u6807\u7cfb\u7edf\u521b\u5efa\u3002\u5b83\u4ee3\u8868\u4e86\u4e00\u4e2a\u7406\u60f3\u5316\u7684\u3001\u4e0e\u5206\u8fa8\u7387\u65e0\u5173\u7684\u56fe\u50cf\u3002\u6805\u683c\u5316\u56fe\u50cf\u662f\u8be5\u7406\u60f3\u56fe\u50cf\u7684\u8fd1\u4f3c\uff0c\u4f46\u5982\u4f55\u8fdb\u884c\u8fd1\u4f3c\u53ef\u4ee5\u4ea4\u7ed9\u663e\u793a\u786c\u4ef6\u5904\u7406\u3002</p> <p>A digital image is made up of rows and columns of pixels. A pixel in such an image can be specified by saying which column and which row contains it. In terms of coordinates, a pixel can be identified by a pair of integers giving the column number and the row number. For example, the pixel with coordinates (3,5) would lie in column number 3 and row number 5. Conventionally, columns are numbered from left to right, starting with zero. Most graphics systems, including the ones we will study in this chapter, number rows from top to bottom, starting from zero. Some, including OpenGL, number the rows from bottom to top instead.</p> <p> pixel coordinates </p> <p>Note in particular that the pixel that is identified by a pair of coordinates (x,y) depends on the choice of coordinate system. You always need to know what coordinate system is in use before you know what point you are talking about.</p> <p>Row and column numbers identify a pixel, not a point. A pixel contains many points; mathematically, it contains an infinite number of points. The goal of computer graphics is not really to color pixels\u2014it is to create and manipulate images. In some ideal sense, an image should be defined by specifying a color for each point, not just for each pixel. Pixels are an approximation. If we imagine that there is a true, ideal image that we want to display, then any image that we display by coloring pixels is an approximation. This has many implications.</p> <p>Suppose, for example, that we want to draw a line segment. A mathematical line has no thickness and would be invisible. So we really want to draw a thick line segment, with some specified width. Let's say that the line should be one pixel wide. The problem is that, unless the line is horizontal or vertical, we can't actually draw the line by coloring pixels. A diagonal geometric line will cover some pixels only partially. It is not possible to make part of a pixel black and part of it white. When you try to draw a line with black and white pixels only, the result is a jagged staircase effect. This effect is an example of something called \"aliasing.\" Aliasing can also be seen in the outlines of characters drawn on the screen and in diagonal or curved boundaries between any two regions of different color. (The term aliasing likely comes from the fact that ideal images are naturally described in real-number coordinates. When you try to represent the image using pixels, many real-number coordinates will map to the same integer pixel coordinates; they can all be considered as different names or \"aliases\" for the same pixel.)</p> <p>Antialiasing is a term for techniques that are designed to mitigate the effects of aliasing. The idea is that when a pixel is only partially covered by a shape, the color of the pixel should be a mixture of the color of the shape and the color of the background. When drawing a black line on a white background, the color of a partially covered pixel would be gray, with the shade of gray depending on the fraction of the pixel that is covered by the line. (In practice, calculating this area exactly for each pixel would be too difficult, so some approximate method is used.) Here, for example, is a geometric line, shown on the left, along with two approximations of that line made by coloring pixels. The lines are greatly magnified so that you can see the individual pixels. The line on the right is drawn using antialiasing, while the one in the middle is not:</p> <p> antialiased line </p> <p>Note that antialiasing does not give a perfect image, but it can reduce the \"jaggies\" that are caused by aliasing (at least when it is viewed on a normal scale).</p> <p>There are other issues involved in mapping real-number coordinates to pixels. For example, which point in a pixel should correspond to integer-valued coordinates such as (3,5)? The center of the pixel? One of the corners of the pixel? In general, we think of the numbers as referring to the top-left corner of the pixel. Another way of thinking about this is to say that integer coordinates refer to the lines between pixels, rather than to the pixels themselves. But that still doesn't determine exactly which pixels are affected when a geometric shape is drawn. For example, here are two lines drawn using HTML canvas graphics, shown greatly magnified. The lines were specified to be colored black with a one-pixel line width:</p> <p> horizontal lines from canvas </p> <p>The top line was drawn from the point (100,100) to the point (120,100). In canvas graphics, integer coordinates correspond to the lines between pixels, but when a one-pixel line is drawn, it extends one-half pixel on either side of the infinitely thin geometric line. So for the top line, the line as it is drawn lies half in one row of pixels and half in another row. The graphics system, which uses antialiasing, rendered the line by coloring both rows of pixels gray. The bottom line was drawn from the point (100.5,100.5) to (120.5,100.5). In this case, the line lies exactly along one line of pixels, which gets colored black. The gray pixels at the ends of the bottom line have to do with the fact that the line only extends halfway into the pixels at its endpoints. Other graphics systems might render the same lines differently.</p> <p>The following interactive demo lets you experiment with pixels and antialiasing. (Note that in any of the interactive demos that accompany this book, you can click the question mark icon in the upper left for more information about how to use it.)</p> <p></p> <p>All this is complicated further by the fact that pixels aren't what they used to be. Pixels today are smaller! The resolution of a display device can be measured in terms of the number of pixels per inch on the display, a quantity referred to as PPI (pixels per inch) or sometimes DPI (dots per inch). Early screens tended to have resolutions of somewhere close to 72 PPI. At that resolution, and at a typical viewing distance, individual pixels are clearly visible. For a while, it seemed like most displays had about 100 pixels per inch, but high resolution displays today can have 200, 300 or even 400 pixels per inch. At the highest resolutions, individual pixels can no longer be distinguished.</p> <p>The fact that pixels come in such a range of sizes is a problem if we use coordinate systems based on pixels. An image created assuming that there are 100 pixels per inch will look tiny on a 400 PPI display. A one-pixel-wide line looks good at 100 PPI, but at 400 PPI, a one-pixel-wide line is probably too thin.</p> <p>In fact, in many graphics systems, \"pixel\" doesn't really refer to the size of a physical pixel. Instead, it is just another unit of measure, which is set by the system to be something appropriate. (On a desktop system, a pixel is usually about one one-hundredth of an inch. On a smart phone, which is usually viewed from a closer distance, the value might be closer to 1/160 inch. Furthermore, the meaning of a pixel as a unit of measure can change when, for example, the user applies a magnification to a web page.)</p> <p>Pixels cause problems that have not been completely solved. Fortunately, they are less of a problem for vector graphics, which is mostly what we will use in this book. For vector graphics, pixels only become an issue during rasterization, the step in which a vector image is converted into pixels for display. The vector image itself can be created using any convenient coordinate system. It represents an idealized, resolution-independent image. A rasterized image is an approximation of that ideal image, but how to do the approximation can be left to the display hardware.</p>"},{"location":"cn/c2/s1/#212-\u5b9e\u6570\u5750\u6807\u7cfb","title":"2.1.2  \u5b9e\u6570\u5750\u6807\u7cfb","text":"<p>Real-number Coordinate Systems</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u8fdb\u884c\u4e8c\u7ef4\u56fe\u5f62\u7ed8\u5236\u65f6\uff0c\u60a8\u4f1a\u5f97\u5230\u4e00\u4e2a\u77e9\u5f62\uff0c\u5728\u5176\u4e2d\u60a8\u60f3\u8981\u7ed8\u5236\u4e00\u4e9b\u56fe\u5f62\u539f\u8bed(graphics primitives)\u3002\u4f7f\u7528\u67d0\u4e2a\u5750\u6807\u7cfb\u7edf\u5728\u77e9\u5f62\u4e0a\u6307\u5b9a\u539f\u8bed\u3002\u5e94\u8be5\u80fd\u591f\u9009\u62e9\u4e00\u4e2a\u9002\u5408\u5e94\u7528\u7a0b\u5e8f\u7684\u5750\u6807\u7cfb\u7edf\u3002\u4f8b\u5982\uff0c\u5982\u679c\u77e9\u5f62\u8868\u793a\u4e00\u4e2a15\u82f1\u5c3a\u4e5812\u82f1\u5c3a\u7684\u623f\u95f4\u7684\u5e73\u9762\u56fe\uff0c\u5219\u60a8\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u5355\u4f4d\u4e3a\u4e00\u82f1\u5c3a\u7684\u5750\u6807\u7cfb\u7edf\uff0c\u5750\u6807\u8303\u56f4\u4ece\u6c34\u5e73\u65b9\u5411\u76840\u523015\uff0c\u5782\u76f4\u65b9\u5411\u76840\u523012\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5355\u4f4d\u662f\u82f1\u5c3a\u800c\u4e0d\u662f\u50cf\u7d20\uff0c\u800c\u4e14\u4e00\u4e2a\u82f1\u5c3a\u53ef\u4ee5\u5bf9\u5e94\u4e8e\u56fe\u50cf\u4e2d\u7684\u8bb8\u591a\u50cf\u7d20\u3002\u50cf\u7d20\u7684\u5750\u6807\u901a\u5e38\u662f\u5b9e\u6570\u800c\u4e0d\u662f\u6574\u6570\u3002\u5b9e\u9645\u4e0a\uff0c\u6700\u597d\u5fd8\u8bb0\u50cf\u7d20\uff0c\u53ea\u8003\u8651\u56fe\u50cf\u4e2d\u7684\u70b9\u3002\u4e00\u4e2a\u70b9\u5c06\u7531\u4e00\u5bf9\u5b9e\u6570\u7ed9\u51fa\u7684\u5750\u6807\u8868\u793a\u3002</p> <p>\u4e3a\u4e86\u5728\u77e9\u5f62\u4e0a\u6307\u5b9a\u5750\u6807\u7cfb\u7edf\uff0c\u60a8\u53ea\u9700\u8981\u6307\u5b9a\u77e9\u5f62\u5de6\u8fb9\u7f18\u548c\u53f3\u8fb9\u7f18\u7684\u6c34\u5e73\u5750\u6807\uff0c\u4ee5\u53ca\u9876\u90e8\u548c\u5e95\u90e8\u7684\u5782\u76f4\u5750\u6807\u3002\u8ba9\u6211\u4eec\u5c06\u8fd9\u4e9b\u503c\u79f0\u4e3aleft\u3001right\u3001top\u548cbottom\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u88ab\u8ba4\u4e3a\u662fxmin\u3001xmax\u3001ymin\u548cymax\uff0c\u4f46\u662f\u6ca1\u6709\u7406\u7531\u8ba4\u4e3a\u4f8b\u5982top\u5c0f\u4e8ebottom\u3002\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u5782\u76f4\u5750\u6807\u4ece\u4e0b\u5230\u4e0a\u9012\u589e\uff0c\u800c\u4e0d\u662f\u4ece\u4e0a\u5230\u4e0b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9876\u90e8\u5c06\u5bf9\u5e94\u4e8e\u6700\u5927\u7684y\u503c\uff0c\u800c\u4e0d\u662f\u6700\u5c0f\u503c\u3002</p> <p>\u4e3a\u4e86\u8ba9\u7a0b\u5e8f\u5458\u80fd\u591f\u6307\u5b9a\u4ed6\u4eec\u60f3\u8981\u4f7f\u7528\u7684\u5750\u6807\u7cfb\u7edf\uff0c\u6700\u597d\u6709\u4e00\u4e2a\u5b50\u7a0b\u5e8f\uff0c\u4f8b\u5982</p> <pre><code>setCoordinateSystem(left,right,bottom,top)\n</code></pre> <p>\u7136\u540e\uff0c\u56fe\u5f62\u7cfb\u7edf\u5c06\u8d1f\u8d23\u81ea\u52a8\u5c06\u6307\u5b9a\u5750\u6807\u7cfb\u7edf\u7684\u5750\u6807\u8f6c\u6362\u4e3a\u50cf\u7d20\u5750\u6807\u3002\u53ef\u80fd\u6ca1\u6709\u8fd9\u6837\u7684\u5b50\u7a0b\u5e8f\uff0c\u6240\u4ee5\u4e86\u89e3\u5982\u4f55\u624b\u52a8\u8fdb\u884c\u8f6c\u6362\u662f\u6709\u7528\u7684\u3002\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u822c\u60c5\u51b5\u3002\u7ed9\u5b9a\u7b2c\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u6211\u4eec\u60f3\u8981\u5728\u7b2c\u4e8c\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u627e\u5230\u76f8\u540c\u70b9\u7684\u5750\u6807\u3002\uff08\u8bf7\u8bb0\u4f4f\uff0c\u5750\u6807\u7cfb\u7edf\u53ea\u662f\u4e00\u79cd\u7ed9\u70b9\u5206\u914d\u6570\u5b57\u7684\u65b9\u6cd5\u3002\u91cd\u8981\u7684\u662f\u70b9\uff01\uff09\u5047\u8bbe\u7b2c\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u7684\u6c34\u5e73\u548c\u5782\u76f4\u9650\u5236\u4e3aoldLeft\u3001oldRight\u3001oldTop\u548coldBottom\uff0c\u7b2c\u4e8c\u4e2a\u5750\u6807\u7cfb\u7edf\u7684\u9650\u5236\u4e3anewLeft\u3001newRight\u3001newTop\u548cnewBottom\u3002\u5047\u8bbe\u4e00\u4e2a\u70b9\u5728\u7b2c\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u7684\u5750\u6807\u4e3a(oldX,oldY)\u3002\u6211\u4eec\u60f3\u8981\u627e\u5230\u5728\u7b2c\u4e8c\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u8be5\u70b9\u7684\u5750\u6807(newX,newY)</p> <p> old to new coords </p> <p>newX \u548c newY \u7684\u516c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>newX = newLeft + ((oldX - oldLeft) / (oldRight - oldLeft)) * (newRight - newLeft))\nnewY = newTop + ((oldY - oldTop) / (oldBottom - oldTop)) * (newBottom - newTop)\n</code></pre> <p>\u8fd9\u91cc\u7684\u903b\u8f91\u662f\uff0coldX \u4f4d\u4e8e\u4eceoldLeft\u5230oldRight\u7684\u8ddd\u79bb\u7684\u67d0\u4e2a\u6bd4\u4f8b\u5904\u3002\u8be5\u6bd4\u4f8b\u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>((oldX - oldLeft) / (oldRight - oldLeft))\n</code></pre> <p>\u5bf9\u4e8enewX\u7684\u516c\u5f0f\u53ea\u662f\u8bf4newX\u5e94\u8be5\u4f4d\u4e8e\u4ecenewLeft\u5230newRight\u7684\u8ddd\u79bb\u7684\u76f8\u540c\u6bd4\u4f8b\u5904\u3002\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\u6765\u68c0\u67e5\u8fd9\u4e9b\u516c\u5f0f\uff0c\u770b\u770b\u5f53oldX\u7b49\u4e8eoldLeft\u6216oldRight\uff0c\u4ee5\u53ca\u5f53oldY\u7b49\u4e8eoldBottom\u6216oldTop\u65f6\uff0c\u5b83\u4eec\u662f\u5426\u8d77\u4f5c\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5c06\u67d0\u4e2a\u5177\u6709\u5de6\u3001\u53f3\u3001\u9876\u90e8\u548c\u5e95\u90e8\u9650\u5236\u7684\u5b9e\u6570\u5750\u6807\u7cfb\u8f6c\u6362\u4e3a\u50cf\u7d20\u5750\u6807\uff0c\u8be5\u50cf\u7d20\u5750\u6807\u5728\u5de6\u8fb9\u4e3a0\u3001\u53f3\u8fb9\u4e3a800\u3001\u9876\u90e8\u4e3a0\u3001\u5e95\u90e8\u4e3a600\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cnewLeft\u548cnewTop\u4e3a\u96f6\uff0c\u516c\u5f0f\u7b80\u5316\u4e3a\uff1a</p> <pre><code>newX = ((oldX - left) / (right - left)) * 800\nnewY = ((oldY - top) / (bottom - top)) * 600\n</code></pre> <p>\u5f53\u7136\uff0c\u8fd9\u5c06\u4ee5\u5b9e\u6570\u5f62\u5f0f\u7ed9\u51fanewX\u548cnewY\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u50cf\u7d20\u7684\u6574\u6570\u5750\u6807\uff0c\u5219\u5fc5\u987b\u5c06\u5b83\u4eec\u56db\u820d\u4e94\u5165\u6216\u622a\u65ad\u3002\u53cd\u5411\u8f6c\u6362\u2014\u2014\u4ece\u50cf\u7d20\u5750\u6807\u5230\u5b9e\u6570\u5750\u6807\u2014\u2014\u4e5f\u662f\u6709\u7528\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u56fe\u50cf\u663e\u793a\u5728\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\uff0c\u5e76\u4e14\u60a8\u5e0c\u671b\u5bf9\u56fe\u50cf\u4e0a\u7684\u9f20\u6807\u70b9\u51fb\u505a\u51fa\u53cd\u5e94\uff0c\u60a8\u53ef\u80fd\u4f1a\u4ee5\u6574\u6570\u50cf\u7d20\u5750\u6807\u5f62\u5f0f\u83b7\u5f97\u9f20\u6807\u5750\u6807\uff0c\u4f46\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u8fd9\u4e9b\u50cf\u7d20\u5750\u6807\u8f6c\u6362\u4e3a\u60a8\u9009\u62e9\u7684\u5750\u6807\u7cfb\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u5fc5\u81ea\u5df1\u6267\u884c\u8f6c\u6362\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u56fe\u5f62API\u63d0\u4f9b\u4e86\u67d0\u79cd\u66f4\u9ad8\u7ea7\u7684\u65b9\u5f0f\u6765\u6307\u5b9a\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u5728\u7b2c2.3\u8282\u4e2d\u66f4\u591a\u5730\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>When doing 2D graphics, you are given a rectangle in which you want to draw some graphics primitives. Primitives are specified using some coordinate system on the rectangle. It should be possible to select a coordinate system that is appropriate for the application. For example, if the rectangle represents a floor plan for a 15 foot by 12 foot room, then you might want to use a coordinate system in which the unit of measure is one foot and the coordinates range from 0 to 15 in the horizontal direction and 0 to 12 in the vertical direction. The unit of measure in this case is feet rather than pixels, and one foot can correspond to many pixels in the image. The coordinates for a pixel will, in general, be real numbers rather than integers. In fact, it's better to forget about pixels and just think about points in the image. A point will have a pair of coordinates given by real numbers.</p> <p>To specify the coordinate system on a rectangle, you just have to specify the horizontal coordinates for the left and right edges of the rectangle and the vertical coordinates for the top and bottom. Let's call these values left, right, top, and bottom. Often, they are thought of as xmin, xmax, ymin, and ymax, but there is no reason to assume that, for example, top is less than bottom. We might want a coordinate system in which the vertical coordinate increases from bottom to top instead of from top to bottom. In that case, top will correspond to the maximum y-value instead of the minimum value.</p> <p>To allow programmers to specify the coordinate system that they would like to use, it would be good to have a subroutine such as</p> <pre><code>setCoordinateSystem(left,right,bottom,top)\n</code></pre> <p>The graphics system would then be responsible for automatically transforming the coordinates from the specified coordinate system into pixel coordinates. Such a subroutine might not be available, so it's useful to see how the transformation is done by hand. Let's consider the general case. Given coordinates for a point in one coordinate system, we want to find the coordinates for the same point in a second coordinate system. (Remember that a coordinate system is just a way of assigning numbers to points. It's the points that are real!) Suppose that the horizontal and vertical limits are oldLeft, oldRight, oldTop, and oldBottom for the first coordinate system, and are newLeft, newRight, newTop, and newBottom for the second. Suppose that a point has coordinates (oldX,oldY) in the first coordinate system. We want to find the coordinates (newX,newY) of the point in the second coordinate system</p> <p> old to new coords </p> <p>Formulas for newX and newY are then given by</p> <pre><code>newX = newLeft + \n      ((oldX - oldLeft) / (oldRight - oldLeft)) * (newRight - newLeft))\nnewY = newTop + \n        ((oldY - oldTop) / (oldBottom - oldTop)) * (newBottom - newTop)\n</code></pre> <p>The logic here is that oldX is located at a certain fraction of the distance from oldLeft to oldRight. That fraction is given by</p> <pre><code>((oldX - oldLeft) / (oldRight - oldLeft))\n</code></pre> <p>The formula for newX just says that newX should lie at the same fraction of the distance from newLeft to newRight. You can also check the formulas by testing that they work when oldX is equal to oldLeft or to oldRight, and when oldY is equal to oldBottom or to oldTop.</p> <p>As an example, suppose that we want to transform some real-number coordinate system with limits left, right, top, and bottom into pixel coordinates that range from 0 at left to 800 at the right and from 0 at the top 600 at the bottom. In that case, newLeft and newTop are zero, and the formulas become simply</p> <pre><code>newX = ((oldX - left) / (right - left)) * 800\nnewY = ((oldY - top) / (bottom - top)) * 600\n</code></pre> <p>Of course, this gives newX and newY as real numbers, and they will have to be rounded or truncated to integer values if we need integer coordinates for pixels. The reverse transformation\u2014going from pixel coordinates to real number coordinates\u2014is also useful. For example, if the image is displayed on a computer screen, and you want to react to mouse clicks on the image, you will probably get the mouse coordinates in terms of integer pixel coordinates, but you will want to transform those pixel coordinates into your own chosen coordinate system.</p> <p>In practice, though, you won't usually have to do the transformations yourself, since most graphics APIs provide some higher level way to specify transforms. We will talk more about this in Section 2.3.</p>"},{"location":"cn/c2/s1/#213-\u7eb5\u6a2a\u6bd4","title":"2.1.3  \u7eb5\u6a2a\u6bd4","text":"<p>Aspect Ratio</p> \u4e2d\u6587\u82f1\u6587 <p>\u77e9\u5f62\u7684\u5bbd\u9ad8\u6bd4(aspect ratio)\u662f\u5176\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u7684\u6bd4\u503c\u3002\u4f8b\u5982\uff0c\u5bbd\u9ad8\u6bd4\u4e3a2:1\u610f\u5473\u7740\u77e9\u5f62\u7684\u5bbd\u5ea6\u662f\u5176\u9ad8\u5ea6\u7684\u4e24\u500d\uff0c\u800c\u5bbd\u9ad8\u6bd4\u4e3a4:3\u610f\u5473\u7740\u5bbd\u5ea6\u662f\u9ad8\u5ea6\u76844/3\u500d\u3002\u5c3d\u7ba1\u5bbd\u9ad8\u6bd4\u901a\u5e38\u4ee5\u5bbd\u5ea6:\u9ad8\u5ea6(width:height)\u7684\u5f62\u5f0f\u5199\u6210\uff0c\u4f46\u6211\u5c06\u4f7f\u7528\u8be5\u672f\u8bed\u6765\u6307\u4ee3\u5206\u6570\u5bbd\u5ea6/\u9ad8\u5ea6(width/height)\u3002\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5bbd\u9ad8\u6bd4\u7b49\u4e8e1\u3002\u4e00\u4e2a\u9ad8\u5ea6\u4e3a600\u4e14\u5bbd\u9ad8\u6bd4\u4e3a5/4\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\u7b49\u4e8e 600*(5/4)\uff0c\u5373750\u3002</p> <p>\u5750\u6807\u7cfb\u7edf\u4e5f\u6709\u4e00\u4e2a\u5bbd\u9ad8\u6bd4\u3002\u5982\u679c\u5750\u6807\u7cfb\u7edf\u7684\u6c34\u5e73\u548c\u5782\u76f4\u9650\u5236\u5982\u4e0a\u6240\u8ff0\u4e3aleft\u3001right\u3001bottom\u548ctop\uff0c\u5219\u5bbd\u9ad8\u6bd4\u662f\u7edd\u5bf9\u503c</p> <pre><code>(right - left) / (top - bottom)\n</code></pre> <p>\u5982\u679c\u5728\u5177\u6709\u76f8\u540c\u5bbd\u9ad8\u6bd4\u7684\u77e9\u5f62\u4e0a\u4f7f\u7528\u5750\u6807\u7cfb\u7edf\uff0c\u5219\u5728\u8be5\u77e9\u5f62\u4e2d\u67e5\u770b\u65f6\uff0c\u6c34\u5e73\u65b9\u5411\u4e0a\u7684\u4e00\u4e2a\u5355\u4f4d\u5c06\u5177\u6709\u4e0e\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u5355\u4f4d\u76f8\u540c\u7684\u89c6\u89c9\u957f\u5ea6\u3002\u5982\u679c\u5bbd\u9ad8\u6bd4\u4e0d\u5339\u914d\uff0c\u5219\u4f1a\u5b58\u5728\u4e00\u4e9b\u7578\u53d8\u3002\u4f8b\u5982\uff0c\u7531\u65b9\u7a0bx2 + y2 = 9\u5b9a\u4e49\u7684\u5f62\u72b6\u5e94\u8be5\u662f\u4e00\u4e2a\u5706\uff0c\u4f46\u53ea\u6709\u5728(x,y)\u5750\u6807\u7cfb\u7684\u5bbd\u9ad8\u6bd4\u4e0e\u7ed8\u56fe\u533a\u57df\u7684\u5bbd\u9ad8\u6bd4\u76f8\u5339\u914d\u65f6\u624d\u6210\u7acb\u3002</p> <p> aspect ratio 1 </p> <p>\u8fd9\u5e76\u4e0d\u603b\u662f\u4e00\u4ef6\u574f\u4e8b\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u957f\u5ea6\u5355\u4f4d\u5728\u5782\u76f4\u548c\u6c34\u5e73\u65b9\u5411\u4e0a\u3002\u7136\u800c\uff0c\u5047\u8bbe\u60a8\u5e0c\u671b\u4f7f\u7528\u5177\u6709\u9650\u5236left\u3001right\u3001bottom\u548ctop\u7684\u5750\u6807\uff0c\u5e76\u4e14\u786e\u5b9e\u5e0c\u671b\u4fdd\u6301\u5bbd\u9ad8\u6bd4\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u663e\u793a\u77e9\u5f62\u7684\u5f62\u72b6\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8c03\u6574left\u548cright\u6216bottom\u548ctop\u7684\u503c\uff0c\u4ee5\u4f7f\u5bbd\u9ad8\u6bd4\u5339\u914d\uff1a</p> <p> </p> <p>\u6211\u4eec\u5c06\u5728\u672c\u7ae0\u540e\u9762\u66f4\u6df1\u5165\u5730\u7814\u7a76\u51e0\u4f55\u53d8\u6362\uff0c\u5230\u90a3\u65f6\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e9b\u7528\u4e8e\u8bbe\u7f6e\u5750\u6807\u7cfb\u7edf\u7684\u7a0b\u5e8f\u4ee3\u7801\u3002</p> <p>The aspect ratio of a rectangle is the ratio of its width to its height. For example an aspect ratio of 2:1 means that a rectangle is twice as wide as it is tall, and an aspect ratio of 4:3 means that the width is 4/3 times the height. Although aspect ratios are often written in the form width:height, I will use the term to refer to the fraction width/height. A square has aspect ratio equal to 1. A rectangle with aspect ratio 5/4 and height 600 has a width equal to 600*(5/4), or 750.</p> <p>A coordinate system also has an aspect ratio. If the horizontal and vertical limits for the coordinate system are left, right, bottom, and top, as above, then the aspect ratio is the absolute value of</p> <pre><code>(right - left) / (top - bottom)\n</code></pre> <p>If the coordinate system is used on a rectangle with the same aspect ratio, then when viewed in that rectangle, one unit in the horizontal direction will have the same apparent length as a unit in the vertical direction. If the aspect ratios don't match, then there will be some distortion. For example, the shape defined by the equation x2 +y2 = 9 should be a circle, but that will only be true if the aspect ratio of the (x,y) coordinate system matches the aspect ratio of the drawing area.</p> <p> aspect ratio 1 </p> <p>It is not always a bad thing to use different units of length in the vertical and horizontal directions. However, suppose that you want to use coordinates with limits left, right, bottom, and top, and that you do want to preserve the aspect ratio. In that case, depending on the shape of the display rectangle, you might have to adjust the values either of left and right or of bottom and top to make the aspect ratios match:</p> <p> </p> <p>We will look more deeply into geometric transforms later in the chapter, and at that time, we'll see some program code for setting up coordinate systems.</p>"},{"location":"cn/c2/s1/#214-\u989c\u8272\u6a21\u578b","title":"2.1.4  \u989c\u8272\u6a21\u578b","text":"<p>Color Models</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u6b63\u5728\u8c08\u8bba\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6700\u57fa\u7840\u7684\u57fa\u7840\u77e5\u8bc6\u4e4b\u4e00\u3002\u5176\u4e2d\u4e4b\u4e00\u662f\u5750\u6807\u7cfb\u3002\u53e6\u4e00\u4e2a\u662f\u989c\u8272\u3002\u4e8b\u5b9e\u4e0a\uff0c\u989c\u8272\u662f\u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u590d\u6742\u8bdd\u9898\u3002\u6211\u4eec\u5c06\u770b\u4e00\u4e9b\u4e0e\u8ba1\u7b97\u673a\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u6700\u76f8\u5173\u7684\u90e8\u5206\u3002</p> <p>\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u7684\u989c\u8272\u662f\u901a\u8fc7\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u7684\u7ec4\u5408\u4ea7\u751f\u7684\u3002\u901a\u8fc7\u6539\u53d8\u6bcf\u79cd\u7c7b\u578b\u5149\u7684\u5f3a\u5ea6\u6765\u4ea7\u751f\u4e0d\u540c\u7684\u989c\u8272\u3002\u989c\u8272\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\uff0c\u5206\u522b\u8868\u793a\u989c\u8272\u4e2d\u7ea2\u3001\u7eff\u548c\u84dd\u7684\u5f3a\u5ea6\u3002\u5f3a\u5ea6\u53ef\u4ee5\u7528\u8303\u56f4\u4ece\u96f6\uff08\u6700\u5c0f\u5f3a\u5ea6\uff09\u5230\u4e00\uff08\u6700\u5927\u5f3a\u5ea6\uff09\u7684\u6570\u5b57\u6765\u6307\u5b9a\u3002\u8fd9\u79cd\u6307\u5b9a\u989c\u8272\u7684\u65b9\u6cd5\u79f0\u4e3aRGB\u989c\u8272\u6a21\u578b(RGB color model)\uff0c\u5176\u4e2dRGB\u4ee3\u8868\u7ea2/\u7eff/\u84dd(Red/Green/Blue)\u3002\u4f8b\u5982\uff0c\u5728RGB\u989c\u8272\u6a21\u578b\u4e2d\uff0c\u6570\u503c\u4e09\u5143\u7ec4\uff081\uff0c0.5\uff0c0.5\uff09\u8868\u793a\u5c06\u7ea2\u8272\u8bbe\u7f6e\u4e3a\u5168\u5f3a\u5ea6\uff0c\u800c\u7eff\u8272\u548c\u84dd\u8272\u8bbe\u7f6e\u4e3a\u534a\u5f3a\u5ea6\u7684\u989c\u8272\u3002\u989c\u8272\u7684\u7ea2\u3001\u7eff\u548c\u84dd\u503c\u5728RGB\u989c\u8272\u6a21\u578b\u4e2d\u79f0\u4e3a\u8be5\u989c\u8272\u7684\u989c\u8272\u5206\u91cf(color components)\u3002</p> <p>\u5149\u7531\u5177\u6709\u5404\u79cd\u6ce2\u957f\u7684\u6ce2\u6784\u6210\u3002\u7eaf\u8272\u662f\u6307\u6240\u6709\u5149\u5177\u6709\u76f8\u540c\u6ce2\u957f\u7684\u5149\uff0c\u4f46\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u989c\u8272\u53ef\u4ee5\u5305\u542b\u8bb8\u591a\u6ce2\u957f - \u4ece\u6570\u5b66\u4e0a\u8bb2\uff0c\u662f\u65e0\u9650\u591a\u4e2a\u6ce2\u957f\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u901a\u8fc7\u4ec5\u7ec4\u5408\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u6765\u8868\u793a\u6240\u6709\u989c\u8272\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u80fd\u5b8c\u5168\u505a\u5230\u8fd9\u4e00\u70b9\u3002</p> <p>\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7\uff0c\u4e09\u79cd\u57fa\u672c\u6216\u201c\u4e3b\u8981\u201d\u989c\u8272\u7684\u7ec4\u5408\u8db3\u4ee5\u8868\u793a\u6240\u6709\u989c\u8272\uff0c\u56e0\u4e3a\u4eba\u773c\u6709\u4e09\u79cd\u989c\u8272\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u68c0\u6d4b\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u3002\u7136\u800c\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u8fd1\u4f3c\u503c\u3002\u773c\u775b\u786e\u5b9e\u5305\u542b\u4e09\u79cd\u989c\u8272\u4f20\u611f\u5668\u3002\u8fd9\u4e9b\u4f20\u611f\u5668\u79f0\u4e3a\u201c\u9525\u5f62\u7ec6\u80de(cone cells)\u201d\u3002\u7136\u800c\uff0c\u9525\u5f62\u7ec6\u80de\u4e0d\u4ec5\u5bf9\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u505a\u51fa\u53cd\u5e94\u3002\u6bcf\u79cd\u7c7b\u578b\u7684\u9525\u5f62\u7ec6\u80de\u5bf9\u5e7f\u6cdb\u8303\u56f4\u5185\u7684\u5149\u6ce2\u957f\u4ee5\u4e0d\u540c\u7a0b\u5ea6\u4f5c\u51fa\u53cd\u5e94\u3002\u4e00\u7ec4\u7ed9\u5b9a\u7684\u6ce2\u957f\u6df7\u5408\u7269\u5c06\u4f7f\u6bcf\u79cd\u7c7b\u578b\u7684\u7ec6\u80de\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u88ab\u523a\u6fc0\uff0c\u800c\u523a\u6fc0\u7684\u5f3a\u5ea6\u51b3\u5b9a\u4e86\u6211\u4eec\u770b\u5230\u7684\u989c\u8272\u3002\u5c06\u6bcf\u79cd\u7c7b\u578b\u7684\u9525\u7ec6\u80de\u523a\u6fc0\u5230\u540c\u6837\u7a0b\u5ea6\u7684\u4e0d\u540c\u6ce2\u957f\u6df7\u5408\u7269\u5c06\u88ab\u611f\u77e5\u4e3a\u76f8\u540c\u7684\u989c\u8272\u3002\u56e0\u6b64\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u6570\u5b57\u6307\u5b9a\u611f\u77e5\u5230\u7684\u989c\u8272\uff0c\u8fd9\u4e09\u4e2a\u6570\u5b57\u5206\u522b\u8868\u793a\u4e09\u79cd\u7c7b\u578b\u7684\u9525\u7ec6\u80de\u7684\u523a\u6fc0\u5f3a\u5ea6\u3002\u4f46\u662f\uff0c\u65e0\u8bba\u5982\u4f55\u9009\u62e9\u8fd9\u4e09\u79cd\u989c\u8272\uff0c\u90fd\u4e0d\u53ef\u80fd\u901a\u8fc7\u7ec4\u5408\u6765\u4ea7\u751f\u6240\u6709\u53ef\u80fd\u7684\u523a\u6fc0\u6a21\u5f0f\u3002\u8fd9\u53ea\u662f\u5173\u4e8e\u6211\u4eec\u773c\u775b\u5b9e\u9645\u5de5\u4f5c\u65b9\u5f0f\u7684\u4e8b\u5b9e\uff1b\u8fd9\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4e09\u79cd\u57fa\u672c\u989c\u8272\u53ef\u4ee5\u4ea7\u751f\u76f8\u5f53\u5927\u6bd4\u4f8b\u7684\u53ef\u611f\u77e5\u989c\u8272\u96c6\u5408\uff0c\u4f46\u662f\u5728\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u53ef\u80fd\u770b\u4e0d\u5230\u7684\u989c\u8272\u6709\u5f88\u591a\u3002\uff08\u8fd9\u6574\u4e2a\u8ba8\u8bba\u4ec5\u9002\u7528\u4e8e\u5b9e\u9645\u62e5\u6709\u4e09\u79cd\u7c7b\u578b\u9525\u7ec6\u80de\u7684\u4eba\u3002\u8272\u76f2\uff0c\u5373\u67d0\u4eba\u7f3a\u5c11\u4e00\u79cd\u6216\u591a\u79cd\u7c7b\u578b\u7684\u9525\u7ec6\u80de\uff0c\u662f\u4ee4\u4eba\u60ca\u8bb6\u5730\u666e\u904d\u7684\u3002\uff09</p> <p>\u8bf8\u5982\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e4b\u7c7b\u7684\u8bbe\u5907\u53ef\u4ee5\u4ea7\u751f\u7684\u989c\u8272\u8303\u56f4\u79f0\u4e3a\u8be5\u8bbe\u5907\u7684\u8272\u57df\u3002\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u53ef\u4ee5\u5177\u6709\u4e0d\u540c\u7684\u8272\u57df\uff0c\u5e76\u4e14\u76f8\u540c\u7684 RGB \u503c\u5728\u4e0d\u540c\u7684\u5c4f\u5e55\u4e0a\u53ef\u80fd\u4f1a\u4ea7\u751f\u7565\u6709\u4e0d\u540c\u7684\u989c\u8272\u3002\u5f69\u8272\u6253\u5370\u673a\u7684\u8272\u57df\u660e\u663e\u4e0d\u540c\uff0c\u800c\u4e14\u53ef\u80fd\u6bd4\u5c4f\u5e55\u7684\u8272\u57df\u8981\u5c0f\uff0c\u8fd9\u5c31\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6253\u5370\u51fa\u6765\u7684\u56fe\u50cf\u53ef\u80fd\u770b\u8d77\u6765\u4e0e\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\u3002\uff08\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u6253\u5370\u673a\u5236\u9020\u989c\u8272\u7684\u65b9\u5f0f\u4e0e\u5c4f\u5e55\u4e0d\u540c\u3002\u5c4f\u5e55\u662f\u901a\u8fc7\u7ec4\u5408\u5149\u6765\u751f\u6210\u989c\u8272\uff0c\u800c\u6253\u5370\u673a\u5219\u662f\u901a\u8fc7\u7ec4\u5408\u58a8\u6c34\u6216\u67d3\u6599\u3002\u7531\u4e8e\u8fd9\u79cd\u5dee\u5f02\uff0c\u4e3a\u6253\u5370\u673a\u8bbe\u8ba1\u7684\u989c\u8272\u901a\u5e38\u4f7f\u7528\u4e0d\u540c\u7684\u57fa\u672c\u989c\u8272\u96c6\u5408\u3002\u4e00\u79cd\u5e38\u89c1\u7684\u6253\u5370\u673a\u989c\u8272\u6a21\u578b\u662f CMYK\uff0c\u4f7f\u7528\u9752\u8272\u3001\u54c1\u7ea2\u8272\u3001\u9ec4\u8272\u548c\u9ed1\u8272\u3002\uff09</p> <p>\u65e0\u8bba\u5982\u4f55\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u6700\u5e38\u89c1\u7684\u989c\u8272\u6a21\u578b\u662f RGB\u3002RGB \u989c\u8272\u901a\u5e38\u4f7f\u7528\u6bcf\u4e2a\u989c\u8272\u5206\u91cf 8 \u4f4d\u8868\u793a\uff0c\u603b\u5171\u9700\u8981 24 \u4f4d\u6765\u8868\u793a\u4e00\u4e2a\u989c\u8272\u3002\u8fd9\u79cd\u8868\u793a\u6709\u65f6\u88ab\u79f0\u4e3a \"24 \u4f4d\u989c\u8272(24-bit color)\"\u30028 \u4f4d\u6570\u5b57\u53ef\u4ee5\u8868\u793a 2^8\uff0c\u6216 256\uff0c\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4ece 0 \u5230 255 \u7684\u6b63\u6574\u6570\u3002\u7136\u540e\uff0c\u989c\u8272\u88ab\u6307\u5b9a\u4e3a\u5728\u8be5\u8303\u56f4\u5185\u7684\u6574\u6570\u4e09\u5143\u7ec4 (r,g,b)\u3002</p> <p>\u8fd9\u79cd\u8868\u793a\u65b9\u6cd5\u5f88\u6709\u6548\uff0c\u56e0\u4e3a 256 \u79cd\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u7684\u8272\u8c03\u51e0\u4e4e\u662f\u4eba\u773c\u53ef\u4ee5\u533a\u5206\u7684\u3002\u5728\u56fe\u50cf\u901a\u8fc7\u989c\u8272\u5206\u91cf\u8fdb\u884c\u8ba1\u7b97\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u4f7f\u7528\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u989d\u5916\u7684\u4f4d\u6570\uff0c\u4ee5\u907f\u514d\u7531\u4e8e\u8ba1\u7b97\u4e2d\u7684\u820d\u5165\u8bef\u5dee\u800c\u4ea7\u751f\u7684\u89c6\u89c9\u6548\u679c\u3002\u8fd9\u79cd\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u4e3a\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u4f7f\u7528 16 \u4f4d\u6574\u6570\u751a\u81f3 32 \u4f4d\u6d6e\u70b9\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6709\u65f6\u4f1a\u4f7f\u7528\u66f4\u5c11\u7684\u4f4d\u6570\u3002\u4f8b\u5982\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u989c\u8272\u65b9\u6848\u4f7f\u7528 5 \u4f4d\u7528\u4e8e\u7ea2\u8272\u548c\u84dd\u8272\u5206\u91cf\uff0c\u4ee5\u53ca 6 \u4f4d\u7528\u4e8e\u7eff\u8272\u5206\u91cf\uff0c\u603b\u5171\u4e3a\u989c\u8272\u4f7f\u7528 16 \u4f4d\u3002\uff08\u7eff\u8272\u83b7\u5f97\u989d\u5916\u7684\u4f4d\uff0c\u56e0\u4e3a\u773c\u775b\u5bf9\u7eff\u5149\u7684\u654f\u611f\u6027\u6bd4\u5bf9\u7ea2\u8272\u6216\u84dd\u8272\u7684\u654f\u611f\u6027\u66f4\u9ad8\u3002\uff09\u8fd9\u79cd \"16 \u4f4d\u989c\u8272\" \u76f8\u5bf9\u4e8e 24 \u4f4d\u989c\u8272\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u5e76\u4e14\u5728\u5185\u5b58\u66f4\u6602\u8d35\u65f6\u66f4\u4e3a\u5e38\u89c1\u3002</p> <p>\u9664\u4e86 RGB \u5916\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u989c\u8272\u6a21\u578b\u3002RGB \u6709\u65f6\u88ab\u6279\u8bc4\u4e3a\u4e0d\u76f4\u89c2\u3002\u4f8b\u5982\uff0c\u5bf9\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u9ec4\u8272\u662f\u7531\u7ea2\u8272\u548c\u7eff\u8272\u7684\u7ec4\u5408\u800c\u6210\u5e76\u4e0d\u660e\u663e\u3002\u5bc6\u5207\u76f8\u5173\u7684\u989c\u8272\u6a21\u578b HSV \u548c HSL \u63cf\u8ff0\u4e0e RGB \u76f8\u540c\u7684\u989c\u8272\u96c6\uff0c\u4f46\u8bd5\u56fe\u4ee5\u66f4\u76f4\u89c2\u7684\u65b9\u5f0f\u8fdb\u884c\u63cf\u8ff0\u3002\uff08HSV \u6709\u65f6\u88ab\u79f0\u4e3a HSB\uff0c\u5176\u4e2d\u7684 \"B\" \u4ee3\u8868 \"\u4eae\u5ea6\"\u3002HSV \u548c HSB \u662f\u5b8c\u5168\u76f8\u540c\u7684\u6a21\u578b\u3002\uff09</p> <p>\u8fd9\u4e9b\u6a21\u578b\u4e2d\u7684 \"H\" \u4ee3\u8868 \"\u8272\u76f8(hue)\"\uff0c\u662f\u57fa\u672c\u7684\u5149\u8c31\u989c\u8272\u3002\u968f\u7740 H \u7684\u589e\u52a0\uff0c\u989c\u8272\u4ece\u7ea2\u8272(red)\u53d8\u4e3a\u9ec4\u8272(yellow)\u3001\u7eff\u8272(green)\u3001\u9752\u8272(cyan)\u3001\u84dd\u8272(blue)\u3001\u54c1\u7ea2(magenta)\uff0c\u7136\u540e\u56de\u5230\u7ea2\u8272(red)\u3002\u901a\u5e38\u5c06 H \u7684\u503c\u53d6\u4e3a\u4ece 0 \u5230 360\uff0c\u56e0\u4e3a\u989c\u8272\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u56f4\u7ed5\u4e00\u4e2a\u5706\u5708\u6392\u5217\uff0c\u7ea2\u8272\u5728 0 \u548c 360 \u5ea6\u5904\u3002</p> <p>HSV \u548c HSL \u4e2d\u7684 \"S\" \u4ee3\u8868 \"\u9971\u548c\u5ea6(saturation)\"\uff0c\u53d6\u503c\u8303\u56f4\u4e3a 0 \u5230 1\u3002\u9971\u548c\u5ea6\u4e3a 0 \u4f1a\u4ea7\u751f\u7070\u8272\u7684\u8272\u8c03\uff08\u8272\u8c03\u53d6\u51b3\u4e8e V \u6216 L \u7684\u503c\uff09\u3002\u9971\u548c\u5ea6\u4e3a 1 \u7ed9\u51fa \"\u7eaf\u8272\"\uff0c\u51cf\u5c0f\u9971\u548c\u5ea6\u5c31\u50cf\u5728\u989c\u8272\u4e2d\u6dfb\u52a0\u66f4\u591a\u7070\u8272\u4e00\u6837\u3002\"V\" \u4ee3\u8868 \"\u503c(value)\"\uff0c\"L\" \u4ee3\u8868 \"\u4eae\u5ea6(lightness)\"\u3002\u5b83\u4eec\u786e\u5b9a\u989c\u8272\u7684\u660e\u4eae\u6216\u6697\u3002\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728 HSV \u6a21\u578b\u4e2d\uff0c\u7eaf\u5149\u8c31\u989c\u8272\u51fa\u73b0\u5728 V=1 \u65f6\uff0c\u800c\u5728 HSL \u4e2d\uff0c\u5b83\u4eec\u51fa\u73b0\u5728 L=0.5 \u65f6\u3002</p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u770b HSV \u989c\u8272\u6a21\u578b\u4e2d\u7684\u4e00\u4e9b\u989c\u8272\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u5177\u6709\u5168\u8303\u56f4 H \u503c\u7684\u989c\u8272\uff0c\u5176\u4e2d S \u548c V \u5206\u522b\u7b49\u4e8e 1 \u548c 0.5\u3002\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e S=V=1\uff0c\u4f60\u4f1a\u5f97\u5230\u660e\u4eae\u3001\u7eaf\u51c0\u7684\u989c\u8272\u3002S=0.5 \u4f1a\u7ed9\u51fa\u8f83\u82cd\u767d\u3001\u9971\u548c\u5ea6\u8f83\u4f4e\u7684\u989c\u8272\u3002V=0.5 \u4f1a\u4ea7\u751f\u8f83\u6697\u7684\u989c\u8272\u3002</p> <p> </p> <p>\u53ef\u80fd\u901a\u8fc7\u89c2\u5bdf\u4e00\u4e9b\u5b9e\u9645\u989c\u8272\u53ca\u5176\u8868\u793a\u65b9\u5f0f\u6765\u66f4\u5bb9\u6613\u7406\u89e3\u989c\u8272\u6a21\u578b\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u8ba9\u60a8\u53ef\u4ee5\u4f7f\u7528RGB\u548cHSV\u989c\u8272\u6a21\u578b\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a</p> <p></p> <p>\u901a\u5e38\uff0c\u989c\u8272\u6a21\u578b\u4f1a\u6dfb\u52a0\u7b2c\u56db\u4e2a\u5206\u91cf\u3002\u7b2c\u56db\u4e2a\u5206\u91cf\u79f0\u4e3a \u963f\u5c14\u6cd5(alpha)\uff0c\u4f7f\u7528\u5b83\u7684\u989c\u8272\u6a21\u578b\u901a\u5e38\u88ab\u79f0\u4e3a RGBA \u548c HSLA \u7b49\u540d\u79f0\u3002Alpha \u5e76\u4e0d\u662f\u4e00\u79cd\u989c\u8272\uff0c\u5b83\u901a\u5e38\u7528\u6765\u8868\u793a\u900f\u660e\u5ea6(transparency)\u3002\u5177\u6709\u6700\u5927 alpha \u503c\u7684\u989c\u8272\u662f\u5b8c\u5168\u4e0d\u900f\u660e\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5b8c\u5168\u4e0d\u900f\u660e\u3002\u5177\u6709 alpha \u7b49\u4e8e\u96f6\u7684\u989c\u8272\u662f\u5b8c\u5168\u900f\u660e\u7684\uff0c\u56e0\u6b64\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u4e2d\u95f4\u503c\u7ed9\u51fa\u534a\u900f\u660e\u6216\u90e8\u5206\u900f\u660e\u7684\u989c\u8272\u3002\u900f\u660e\u5ea6\u51b3\u5b9a\u4e86\u5728\u53e6\u4e00\u79cd\u989c\u8272\uff08\u524d\u666f\u8272\uff09\u4e4b\u4e0a\u7ed8\u5236\u53e6\u4e00\u79cd\u989c\u8272\uff08\u80cc\u666f\u8272\uff09\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\u3002\u5982\u679c\u524d\u666f\u8272\u5b8c\u5168\u4e0d\u900f\u660e\uff0c\u5219\u7b80\u5355\u5730\u66ff\u6362\u80cc\u666f\u8272\u3002\u5982\u679c\u524d\u666f\u8272\u90e8\u5206\u900f\u660e\uff0c\u5219\u4e0e\u80cc\u666f\u8272\u6df7\u5408\u3002\u5047\u8bbe alpha \u5206\u91cf\u7684\u8303\u56f4\u662f\u4ece 0 \u5230 1\uff0c\u5219\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u7684\u989c\u8272\u4e3a</p> <pre><code>new_color = (alpha)*(foreground_color) + (1 - alpha)*(background_color)\n</code></pre> <p>\u8fd9\u4e2a\u8ba1\u7b97\u662f\u5206\u522b\u5bf9\u7ea2\u8272\u3001\u84dd\u8272\u548c\u7eff\u8272\u7684\u989c\u8272\u5206\u91cf\u8fdb\u884c\u7684\u3002\u8fd9\u88ab\u79f0\u4e3a \u963f\u5c14\u6cd5\u6df7\u5408(alpha blending)\u3002\u6548\u679c\u5c31\u50cf\u900f\u8fc7\u6709\u8272\u73bb\u7483\u89c2\u5bdf\u80cc\u666f\u4e00\u6837\uff1b\u73bb\u7483\u7684\u989c\u8272\u4f1a\u7ed9\u80cc\u666f\u8272\u6dfb\u52a0\u4e00\u79cd\u8272\u8c03\u3002\u8fd9\u79cd\u6df7\u5408\u5e76\u4e0d\u662f alpha \u5206\u91cf\u7684\u552f\u4e00\u53ef\u80fd\u7528\u6cd5\uff0c\u4f46\u5b83\u662f\u6700\u5e38\u89c1\u7684\u3002</p> <p>\u4f7f\u7528\u6bcf\u4e2a\u5206\u91cf 8 \u4f4d\u7684 RGBA \u989c\u8272\u6a21\u578b\u603b\u5171\u4f7f\u7528 32 \u4f4d\u6765\u8868\u793a\u4e00\u4e2a\u989c\u8272\u3002\u8fd9\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u6574\u6570\u503c\u901a\u5e38\u4f7f\u7528 32 \u4f4d\u503c\u8868\u793a\u300232 \u4f4d\u6574\u6570\u503c\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a 32 \u4f4d RGBA \u989c\u8272\u3002\u5982\u4f55\u5728 32 \u4f4d\u6574\u6570\u5185\u6392\u5217\u989c\u8272\u5206\u91cf\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4efb\u610f\u7684\u3002\u6700\u5e38\u89c1\u7684\u5e03\u5c40\u662f\u5c06 alpha \u5206\u91cf\u5b58\u50a8\u5728\u9ad8 8 \u4f4d\u4e2d\uff0c\u7136\u540e\u662f\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u3002\uff08\u8fd9\u53ef\u80fd\u5e94\u8be5\u79f0\u4e3a ARGB \u989c\u8272\u3002\uff09\u4f46\u662f\uff0c\u4e5f\u6709\u5176\u4ed6\u5e03\u5c40\u5728\u4f7f\u7528\u4e2d\u3002</p> <p>We are talking about the most basic foundations of computer graphics. One of those is coordinate systems. The other is color. Color is actually a surprisingly complex topic. We will look at some parts of the topic that are most relevant to computer graphics applications.</p> <p>The colors on a computer screen are produced as combinations of red, green, and blue light. Different colors are produced by varying the intensity of each type of light. A color can be specified by three numbers giving the intensity of red, green, and blue in the color. Intensity can be specified as a number in the range zero, for minimum intensity, to one, for maximum intensity. This method of specifying color is called the RGB color model, where RGB stands for Red/Green/Blue. For example, in the RGB color model, the number triple (1, 0.5, 0.5) represents the color obtained by setting red to full intensity, while green and blue are set to half intensity. The red, green, and blue values for a color are called the color components of that color in the RGB color model.</p> <p>Light is made up of waves with a variety of wavelengths. A pure color is one for which all the light has the same wavelength, but in general, a color can contain many wavelengths\u2014mathematically, an infinite number. How then can we represent all colors by combining just red, green, and blue light? In fact, we can't quite do that.</p> <p>You might have heard that combinations of the three basic, or \"primary,\" colors are sufficient to represent all colors, because the human eye has three kinds of color sensors that detect red, green, and blue light. However, that is only an approximation. The eye does contain three kinds of color sensors. The sensors are called \"cone cells.\" However, cone cells do not respond exclusively to red, green, and blue light. Each kind of cone cell responds, to a varying degree, to wavelengths of light in a wide range. A given mix of wavelengths will stimulate each type of cell to a certain degree, and the intensity of stimulation determines the color that we see. A different mixture of wavelengths that stimulates each type of cone cell to the same extent will be perceived as the same color. So a perceived color can, in fact, be specified by three numbers giving the intensity of stimulation of the three types of cone cell. However, it is not possible to produce all possible patterns of stimulation by combining just three basic colors, no matter how those colors are chosen. This is just a fact about the way our eyes actually work; it might have been different. Three basic colors can produce a reasonably large fraction of the set of perceivable colors, but there are colors that you can see in the world that you will never see on your computer screen. (This whole discussion only applies to people who actually have three kinds of cone cell. Color blindness, where someone is missing one or more kinds of cone cell, is surprisingly common.)</p> <p>The range of colors that can be produced by a device such as a computer screen is called the color gamut of that device. Different computer screens can have different color gamuts, and the same RGB values can produce somewhat different colors on different screens. The color gamut of a color printer is noticeably different\u2014and probably smaller\u2014than the color gamut of a screen, which explains why a printed image probably doesn't look exactly the same as it did on the screen. (Printers, by the way, make colors differently from the way a screen does it. Whereas a screen combines light to make a color, a printer combines inks or dyes. Because of this difference, colors meant for printers are often expressed using a different set of basic colors. A common color model for printer colors is CMYK, using the colors cyan, magenta, yellow, and black.)</p> <p>In any case, the most common color model for computer graphics is RGB. RGB colors are most often represented using 8 bits per color component, a total of 24 bits to represent a color. This representation is sometimes called \"24-bit color.\" An 8-bit number can represent 28, or 256, different values, which we can take to be the positive integers from 0 to 255. A color is then specified as a triple of integers (r,g,b) in that range.</p> <p>This representation works well because 256 shades of red, green, and blue are about as many as the eye can distinguish. In applications where images are processed by computing with color components, it is common to use additional bits per color component to avoid visual effects that might occur due to rounding errors in the computations. Such applications might use a 16-bit integer or even a 32-bit floating point value for each color component. On the other hand, sometimes fewer bits are used. For example, one common color scheme uses 5 bits for the red and blue components and 6 bits for the green component, for a total of 16 bits for a color. (Green gets an extra bit because the eye is more sensitive to green light than to red or blue.) This \"16-bit color\" saves memory compared to 24-bit color and was more common when memory was more expensive.</p> <p>There are many other color models besides RGB. RGB is sometimes criticized as being unintuitive. For example, it's not obvious to most people that yellow is made of a combination of red and green. The closely related color models HSV and HSL describe the same set of colors as RGB, but attempt to do it in a more intuitive way. (HSV is sometimes called HSB, with the \"B\" standing for \"brightness.\" HSV and HSB are exactly the same model.)</p> <p>The \"H\" in these models stands for \"hue,\" a basic spectral color. As H increases, the color changes from red to yellow to green to cyan to blue to magenta, and then back to red. The value of H is often taken to range from 0 to 360, since the colors can be thought of as arranged around a circle with red at both 0 and 360 degrees.</p> <p>The \"S\" in HSV and HSL stands for \"saturation,\" and is taken to range from 0 to 1. A saturation of 0 gives a shade of gray (the shade depending on the value of V or L). A saturation of 1 gives a \"pure color,\" and decreasing the saturation is like adding more gray to the color. \"V\" stands for \"value,\" and \"L\" stands for \"lightness.\" They determine how bright or dark the color is. The main difference is that in the HSV model, the pure spectral colors occur for V=1, while in HSL, they occur for L=0.5.</p> <p>Let's look at some colors in the HSV color model. The illustration below shows colors with a full range of H-values, for S and V equal to 1 and to 0.5. Note that for S=V=1, you get bright, pure colors. S=0.5 gives paler, less saturated colors. V=0.5 gives darker colors.</p> <p> </p> <p>It's probably easier to understand color models by looking at some actual colors and how they are represented. Here is an interactive demo that let's you do that for the RGB and HSV color models:</p> <p></p> <p>Often, a fourth component is added to color models. The fourth component is called alpha, and color models that use it are referred to by names such as RGBA and HSLA. Alpha is not a color as such. It is usually used to represent transparency. A color with maximal alpha value is fully opaque; that is, it is not at all transparent. A color with alpha equal to zero is completely transparent and therefore invisible. Intermediate values give translucent, or partly transparent, colors. Transparency determines what happens when you draw with one color (the foreground color) on top of another color (the background color). If the foreground color is fully opaque, it simply replaces the background color. If the foreground color is partly transparent, then it is blended with the background color. Assuming that the alpha component ranges from 0 to 1, the color that you get can be computed as</p> <pre><code>new_color = (alpha)*(foreground_color) + (1 - alpha)*(background_color)\n</code></pre> <p>This computation is done separately for the red, blue, and green color components. This is called alpha blending. The effect is like viewing the background through colored glass; the color of the glass adds a tint to the background color. This type of blending is not the only possible use of the alpha component, but it is the most common.</p> <p>An RGBA color model with 8 bits per component uses a total of 32 bits to represent a color. This is a convenient number because integer values are often represented using 32-bit values. A 32-bit integer value can be interpreted as a 32-bit RGBA color. How the color components are arranged within a 32-bit integer is somewhat arbitrary. The most common layout is to store the alpha component in the eight high-order bits, followed by red, green, and blue. (This should probably be called ARGB color.) However, other layouts are also in use.</p>"},{"location":"cn/c2/s2/","title":"\u7b2c2\u8282: \u5f62\u72b6","text":"<p>Shapes</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u4e00\u76f4\u5728\u8c08\u8bba\u50cf\u7d20\u548c\u5750\u6807\u8fd9\u6837\u7684\u4f4e\u7ea7\u56fe\u5f62\u6982\u5ff5\uff0c\u4f46\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u5fc5\u5728\u6700\u4f4e\u7ea7\u522b\u4e0a\u5de5\u4f5c\u3002\u5927\u591a\u6570\u56fe\u5f62\u7cfb\u7edf\u5141\u8bb8\u60a8\u4f7f\u7528\u66f4\u9ad8\u7ea7\u7684\u5f62\u72b6\uff0c\u5982\u4e09\u89d2\u5f62\u548c\u5706\u5f62\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u50cf\u7d20\u3002\u5e76\u4e14\uff0c\u5927\u90e8\u5206\u5173\u4e8e\u5750\u6807\u7684\u8270\u96be\u5de5\u4f5c\u90fd\u662f\u4f7f\u7528\u53d8\u6362\u6765\u5b8c\u6210\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u5750\u6807\u3002\u5728\u672c\u8282\u548c\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u901a\u5e38\u75312D\u56fe\u5f62API\u63d0\u4f9b\u7684\u66f4\u9ad8\u7ea7\u522b\u7684\u529f\u80fd\u3002</p> <p>We have been talking about low-level graphics concepts like pixels and coordinates, but fortunately we don't usually have to work on the lowest levels. Most graphics systems let you work with higher-level shapes, such as triangles and circles, rather than individual pixels. And a lot of the hard work with coordinates is done using transforms rather than by working with coordinates directly. In this section and the next, we will look at some of the higher-level capabilities that are typically provided by 2D graphics APIs.</p>"},{"location":"cn/c2/s2/#221-\u57fa\u672c\u5f62\u72b6","title":"2.2.1  \u57fa\u672c\u5f62\u72b6","text":"<p>Basic Shapes</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u56fe\u5f62API\u4e2d\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u547d\u4ee4\u7ed8\u5236\u67d0\u4e9b\u57fa\u672c\u5f62\u72b6\uff0c\u800c\u66f4\u590d\u6742\u7684\u5f62\u72b6\u5219\u9700\u8981\u591a\u4e2a\u547d\u4ee4\u3002\u4ec0\u4e48\u6837\u7684\u5f62\u72b6\u88ab\u89c6\u4e3a\u57fa\u672c\u5f62\u72b6\u5728\u4e0d\u540c\u7684API\u4e2d\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5728WebGL API\u4e2d\uff0c\u552f\u4e00\u7684\u57fa\u672c\u5f62\u72b6\u662f\u70b9\u3001\u7ebf\u548c\u4e09\u89d2\u5f62\u3002\u5728\u672c\u5c0f\u8282\u4e2d\uff0c\u6211\u5c06\u7ebf\u6761\u3001\u77e9\u5f62\u548c\u692d\u5706\u89c6\u4e3a\u57fa\u672c\u5f62\u72b6\u3002</p> <p>\u6240\u8c13\u201c\u7ebf\u6761\u201d\uff0c\u5b9e\u9645\u4e0a\u662f\u6307\u8fde\u63a5\u5e73\u9762\u4e0a\u4e24\u4e2a\u7ed9\u5b9a\u70b9\u7684\u76f4\u7ebf\u6bb5\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u4e00\u50cf\u7d20\u5bbd\u7684\u7ebf\u6bb5\uff0c\u6ca1\u6709\u53cd\u952f\u9f7f(antialiasing)\uff0c\u662f\u6700\u57fa\u672c\u7684\u5f62\u72b6\u3002\u53ef\u4ee5\u901a\u8fc7\u7ed9\u4f4d\u4e8e\u65e0\u9650\u7ec6\u51e0\u4f55\u7ebf\u6bb5\u4e0a\u7684\u50cf\u7d20\u4e0a\u8272\u6765\u7ed8\u5236\u5b83\u3002\u7ed8\u5236\u7ebf\u6bb5\u7684\u7b97\u6cd5\u5fc5\u987b\u51b3\u5b9a\u8981\u4e0a\u8272\u7684\u786e\u5207\u50cf\u7d20\u3002\u5e03\u96f7\u68ee\u6c49\u59c6\u7ebf\u6bb5\u7ed8\u5236\u7b97\u6cd5(Bresenham's algorithm)\u662f\u6700\u65e9\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u7b97\u6cd5\u4e4b\u4e00\uff0c\u5b9e\u73b0\u4e86\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u8fc7\u7a0b\u3002\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u8fd9\u4e9b\u4f4e\u7ea7\u7ec6\u8282\uff0c\u4f46\u5982\u679c\u60a8\u60f3\u5f00\u59cb\u5b66\u4e60\u56fe\u5f62\u786c\u4ef6\u5728\u4f4e\u7ea7\u522b\u4e0a\u5b9e\u9645\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u503c\u5f97\u67e5\u9605\u4e00\u4e0b\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u7ebf\u6761\u901a\u5e38\u66f4\u590d\u6742\u3002\u53cd\u952f\u9f7f\u662f\u4e00\u79cd\u590d\u6742\u6027\u3002\u7ebf\u5bbd\u662f\u53e6\u4e00\u4e2a\u590d\u6742\u6027\u3002\u5bbd\u7ebf\u53ef\u80fd\u5b9e\u9645\u4e0a\u4f1a\u88ab\u7ed8\u5236\u6210\u4e00\u4e2a\u77e9\u5f62\u3002</p> <p>\u7ebf\u6761\u53ef\u4ee5\u5177\u6709\u5176\u4ed6\u5f71\u54cd\u5176\u5916\u89c2\u7684\u5c5e\u6027(attributes)\u3002\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5bbd\u7ebf\u7684\u672b\u7aef\u5e94\u8be5\u53d1\u751f\u4ec0\u4e48\uff1f\u901a\u8fc7\u5728\u7ebf\u7684\u672b\u7aef\u6dfb\u52a0\u4e00\u4e2a\u5706\u89d2\u7684\u201c\u5e3d\u5b50\u201d\uff0c\u53ef\u4ee5\u6539\u5584\u5916\u89c2\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5c06\u7ebf\u5ef6\u957f\u7ebf\u5bbd\u7684\u4e00\u534a\u6765\u4f7f\u7528\u65b9\u5f62\u5e3d\u5b50\u3002\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5f53\u4e24\u6761\u7ebf\u4f5c\u4e3a\u8f83\u5927\u5f62\u72b6\u7684\u4e00\u90e8\u5206\u76f8\u4ea4\u65f6\uff0c\u7ebf\u5e94\u8be5\u5982\u4f55\u8fde\u63a5\uff1f\u8bb8\u591a\u56fe\u5f62\u7cfb\u7edf\u652f\u6301\u7531\u77ed\u5212\u7ebf\u548c\u70b9\u7ec4\u6210\u7684\u7ebf\u6761\u3002\u8fd9\u4e2a\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e9b\u53ef\u80fd\u6027\uff1a</p> <p> <p>\u5de6\u8fb9\u662f\u4e09\u6761\u5bbd\u7ebf\uff0c\u5206\u522b\u6ca1\u6709\u5e3d\u5b50\u3001\u5706\u5e3d\u548c\u65b9\u5e3d\u3002\u51e0\u4f55\u7ebf\u6bb5\u663e\u793a\u4e3a\u865a\u7ebf\u3002\uff08\u6ca1\u6709\u5e3d\u5b50\u7684\u6837\u5f0f\u79f0\u4e3a\u201c\u5e73\u5934(butt)\u201d\uff09\u53f3\u8fb9\u662f\u56db\u6761\u5177\u6709\u4e0d\u540c\u70b9\u5212\u7ebf\u6837\u5f0f\u7684\u7ebf\u6761\u3002\u4e2d\u95f4\u662f\u4e09\u79cd\u4e0d\u540c\u7684\u7ebf\u6bb5\u8fde\u63a5\u6837\u5f0f\uff1a\u5c16\u89d2\u3001\u5706\u89d2\u548c\u659c\u89d2\u3002</p> <p>\u57fa\u672c\u77e9\u5f62\u5f62\u72b6\u7684\u8fb9\u662f\u5782\u76f4\u548c\u6c34\u5e73\u7684\u3002\uff08\u503e\u659c\u7684\u77e9\u5f62\u901a\u5e38\u9700\u8981\u5e94\u7528\u65cb\u8f6c(rotation)\u6765\u5236\u4f5c\u3002\uff09\u8fd9\u6837\u7684\u77e9\u5f62\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a\u70b9\uff08x1\uff0cy1\uff09\u548c\uff08x2\uff0cy2\uff09\u6765\u6307\u5b9a\uff0c\u8fd9\u4e9b\u70b9\u7ed9\u51fa\u4e86\u77e9\u5f62\u7684\u5bf9\u89d2\u7ebf\u7684\u7aef\u70b9\u4e4b\u4e00\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u7ed9\u51fa\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u4ee5\u53ca\u4e00\u4e2a\u57fa\u51c6\u70b9\uff08x\uff0cy\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5fc5\u987b\u662f\u6b63\u6570\uff0c\u5426\u5219\u77e9\u5f62\u4e3a\u7a7a\u3002\u5982\u679cy\u4ece\u4e0a\u5230\u4e0b\u589e\u52a0\uff0c\u57fa\u51c6\u70b9\uff08x\uff0cy\uff09\u5c06\u662f\u77e9\u5f62\u7684\u5de6\u4e0a\u89d2\uff0c\u5982\u679cy\u4ece\u4e0b\u5230\u4e0a\u589e\u52a0\uff0c\u5b83\u5c06\u662f\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u3002</p> <p> <p>\u5047\u8bbe\u60a8\u5df2\u7ecf\u7ed9\u5b9a\u4e86\u70b9(x1,y1)\u548c(x2,y2)\uff0c\u5e76\u4e14\u60a8\u60f3\u8981\u7ed8\u5236\u7531\u5b83\u4eec\u786e\u5b9a\u7684\u77e9\u5f62\u3002\u5047\u8bbe\u60a8\u53ef\u4ee5\u4f7f\u7528\u7684\u552f\u4e00\u7ed8\u5236\u77e9\u5f62\u7684\u547d\u4ee4\u662f\u9700\u8981\u4e00\u4e2a\u70b9(x,y)\u3001\u4e00\u4e2a\u5bbd\u5ea6\u548c\u4e00\u4e2a\u9ad8\u5ea6\u7684\u547d\u4ee4\u3002\u5bf9\u4e8e\u8be5\u547d\u4ee4\uff0cx\u5fc5\u987b\u662fx1\u548cx2\u4e2d\u8f83\u5c0f\u7684\u503c\uff0c\u5bbd\u5ea6\u53ef\u4ee5\u8ba1\u7b97\u4e3ax1\u51cf\u53bbx2\u7684\u7edd\u5bf9\u503c\u3002y\u548c\u9ad8\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u7c7b\u4f3c\u3002\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>DrawRectangle from points (x1,y1) and (x2,y2):\n    x = min( x1, x2 )\n    y = min( y1, y2 )\n    width = abs( x1 - x2 )\n    height = abs( y1 - y2 )\n    DrawRectangle( x, y, width, height )\n</code></pre> <p>\u77e9\u5f62\u7684\u4e00\u4e2a\u5e38\u89c1\u53d8\u4f53\u662f\u5141\u8bb8\u5706\u89d2\u3002\u5bf9\u4e8e\u4e00\u4e2a\"round rect\"\uff0c\u89d2\u88ab\u66ff\u6362\u4e3a\u692d\u5706\u5f27\u3002\u5706\u89d2\u7684\u7a0b\u5ea6\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u692d\u5706\u7684\u6c34\u5e73\u534a\u5f84\u548c\u5782\u76f4\u534a\u5f84\u6765\u6307\u5b9a\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5706\u89d2\u77e9\u5f62\u7684\u4f8b\u5b50\u3002\u5bf9\u4e8e\u53f3\u8fb9\u7684\u5f62\u72b6\uff0c\u692d\u5706\u7684\u4e24\u4e2a\u534a\u5f84\u88ab\u663e\u793a\u51fa\u6765:</p> <p> <p>\u6211\u7684\u6700\u540e\u4e00\u4e2a\u57fa\u672c\u5f62\u72b6\u662f\u692d\u5706\uff08\u4e5f\u79f0\u4e3a\u692d\u5706\u5f62\uff09\u3002\u692d\u5706\u662f\u4e00\u4e2a\u6709\u4e24\u4e2a\u534a\u5f84\u7684\u95ed\u5408\u66f2\u7ebf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u57fa\u672c\u7684\u692d\u5706\uff0c\u6211\u4eec\u5047\u8bbe\u534a\u5f84\u662f\u5782\u76f4\u548c\u6c34\u5e73\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u521a\u597d\u5305\u542b\u5b83\u7684\u77e9\u5f62\u6765\u6307\u5b9a\u8fd9\u6837\u7684\u692d\u5706\u3002\u6216\u8005\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u5b83\u7684\u4e2d\u5fc3\u70b9\u548c\u5782\u76f4\u534a\u5f84\u4ee5\u53ca\u6c34\u5e73\u534a\u5f84\u7684\u957f\u5ea6\u6765\u6307\u5b9a\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u5de6\u8fb9\u7684\u692d\u5706\u663e\u793a\u4e86\u5b83\u7684\u5305\u542b\u77e9\u5f62\u4ee5\u53ca\u5b83\u7684\u4e2d\u5fc3\u70b9\u548c\u534a\u5f84:</p> <p> <p>\u53f3\u8fb9\u7684\u692d\u5706\u662f\u4e00\u4e2a\u5706\u3002\u5706\u53ea\u662f\u4e24\u4e2a\u534a\u5f84\u957f\u5ea6\u76f8\u7b49\u7684\u692d\u5706\u3002</p> <p>\u5982\u679c\u692d\u5706\u4e0d\u53ef\u7528\u4f5c\u57fa\u672c\u5f62\u72b6\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ed8\u5236\u5927\u91cf\u7684\u7ebf\u6bb5\u6765\u8fd1\u4f3c\u3002\u6240\u9700\u7ebf\u6bb5\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u692d\u5706\u7684\u5927\u5c0f\u3002\u4e86\u89e3\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u662f\u6709\u7528\u7684\u3002\u5047\u8bbe\u4e00\u4e2a\u692d\u5706\u5177\u6709\u4e2d\u5fc3\u70b9(x,y)\uff0c\u6c34\u5e73\u534a\u5f84r1\u548c\u5782\u76f4\u534a\u5f84r2\u3002\u6570\u5b66\u4e0a\uff0c\u692d\u5706\u4e0a\u7684\u70b9\u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>( x + r1*cos(angle), y + r2*sin(angle) )\n</code></pre> <p>\u5176\u4e2dangle\u7684\u503c\u4ece0\u5230360\uff08\u5982\u679c\u89d2\u5ea6\u4ee5\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\uff09\u6216\u4ece0\u52302\u03c0\uff08\u5982\u679c\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\uff09\u3002\u8fd9\u91cc\u7684sin\u548ccos\u662f\u6807\u51c6\u7684\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570\u3002\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u692d\u5706\u7684\u8fd1\u4f3c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u516c\u5f0f\u751f\u6210\u4e00\u4e9b\u70b9\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u8fde\u63a5\u8fd9\u4e9b\u70b9\u3002\u5047\u8bbe\u89d2\u5ea6\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\uff0c\u5e76\u4e14pi\u8868\u793a\u6570\u5b66\u5e38\u6570\u03c0\uff0c\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>Draw Oval with center (x,y), horizontal radius r1, and vertical radius r2:\n    for i = 0 to numberOfLines:\n        angle1 = i * (2*pi/numberOfLines)\n        angle2 = (i+1) * (2*pi/numberOfLines)\n        a1 = x + r1*cos(angle1)\n        b1 = y + r2*sin(angle1)\n        a2 = x + r1*cos(angle2)\n        b2 = y + r2*sin(angle2)\n        Draw Line from (a1,b1) to (a2,b2)\n</code></pre> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5706\uff0c\u5f53\u7136\uff0cr1 = r2\u3002\u8fd9\u662f\u6211\u4eec\u7b2c\u4e00\u6b21\u4f7f\u7528\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570\uff0c\u4f46\u4e0d\u4f1a\u662f\u6700\u540e\u4e00\u6b21\u3002\u8fd9\u4e9b\u51fd\u6570\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u626e\u6f14\u91cd\u8981\u89d2\u8272\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e\u5706\u3001\u5706\u5468\u8fd0\u52a8\u548c\u65cb\u8f6c\u6709\u5173\u3002\u5f53\u6211\u4eec\u5728\u4e0b\u4e00\u8282\u4e2d\u8ba8\u8bba\u53d8\u6362\u65f6\uff0c\u6211\u4eec\u5c06\u518d\u6b21\u9047\u5230\u5b83\u4eec\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u7684\u6f14\u793a\uff0c\u60a8\u53ef\u4ee5\u7528\u5b83\u6765\u5c1d\u8bd5\u4f7f\u7528\u7ebf\u6bb5\u8fd1\u4f3c\u692d\u5706\uff1a</p> <p></p> <p>In a graphics API, there will be certain basic shapes that can be drawn with one command, whereas more complex shapes will require multiple commands. Exactly what qualifies as a basic shape varies from one API to another. In the WebGL API, for example, the only basic shapes are points, lines, and triangles. In this subsection, I consider lines, rectangles, and ovals to be basic.</p> <p>By \"line,\" I really mean line segment, that is a straight line segment connecting two given points in the plane. A simple one-pixel-wide line segment, without antialiasing, is the most basic shape. It can be drawn by coloring pixels that lie along the infinitely thin geometric line segment. An algorithm for drawing the line has to decide exactly which pixels to color. One of the first computer graphics algorithms, Bresenham's algorithm for line drawing, implements a very efficient procedure for doing so. I won't discuss such low-level details here, but it's worth looking them up if you want to start learning about what graphics hardware actually has to do on a low level. In any case, lines are typically more complicated. Antialiasing is one complication. Line width is another. A wide line might actually be drawn as a rectangle.</p> <p>Lines can have other attributes, or properties, that affect their appearance. One question is, what should happen at the end of a wide line? Appearance might be improved by adding a rounded \"cap\" on the ends of the line. A square cap\u2014that is, extending the line by half of the line width\u2014might also make sense. Another question is, when two lines meet as part of a larger shape, how should the lines be joined? And many graphics systems support lines that are patterns of dashes and dots. This illustration shows some of the possibilities:</p> <p> <p>On the left are three wide lines with no cap, a round cap, and a square cap. The geometric line segment is shown as a dotted line. (The no-cap style is called \"butt.\") To the right are four lines with different patterns of dots and dashes. In the middle are three different styles of line joins: mitered, rounded, and beveled.</p> <p>The basic rectangular shape has sides that are vertical and horizontal. (A tilted rectangle generally has to be made by applying a rotation.) Such a rectangle can be specified with two points, (x1,y1) and (x2,y2), that give the endpoints of one of the diagonals of the rectangle. Alternatively, the width and the height can be given, along with a single base point, (x,y). In that case, the width and height have to be positive, or the rectangle is empty. The base point (x,y) will be the upper left corner of the rectangle if y increases from top to bottom, and it will be the lower left corner of the rectangle if y increases from bottom to top.</p> <p> <p>Suppose that you are given points (x1,y1) and (x2,y2), and that you want to draw the rectangle that they determine. And suppose that the only rectangle-drawing command that you have available is one that requires a point (x,y), a width, and a height. For that command, x must be the smaller of x1 and x2, and the width can be computed as the absolute value of x1 minus x2. And similarly for y and the height. In pseudocode,</p> <pre><code>DrawRectangle from points (x1,y1) and (x2,y2):\n    x = min( x1, x2 )\n    y = min( y1, y2 )\n    width = abs( x1 - x2 )\n    height = abs( y1 - y2 )\n    DrawRectangle( x, y, width, height )\n</code></pre> <p>A common variation on rectangles is to allow rounded corners. For a \"round rect,\" the corners are replaced by elliptical arcs. The degree of rounding can be specified by giving the horizontal radius and vertical radius of the ellipse. Here are some examples of round rects. For the shape at the right, the two radii of the ellipse are shown:</p> <p> <p>My final basic shape is the oval. (An oval is also called an ellipse.) An oval is a closed curve that has two radii. For a basic oval, we assume that the radii are vertical and horizontal. An oval with this property can be specified by giving the rectangle that just contains it. Or it can be specified by giving its center point and the lengths of its vertical radius and its horizontal radius. In this illustration, the oval on the left is shown with its containing rectangle and with its center point and radii:</p> <p> <p>The oval on the right is a circle. A circle is just an oval in which the two radii have the same length.</p> <p>If ovals are not available as basic shapes, they can be approximated by drawing a large number of line segments. The number of lines that is needed for a good approximation depends on the size of the oval. It's useful to know how to do this. Suppose that an oval has center point (x,y), horizontal radius r1, and vertical radius r2. Mathematically, the points on the oval are given by</p> <pre><code>( x + r1*cos(angle), y + r2*sin(angle) )\n</code></pre> <p>where angle takes on values from 0 to 360 if angles are measured in degrees or from 0 to 2\u03c0 if they are measured in radians. Here sin and cos are the standard sine and cosine functions. To get an approximation for an oval, we can use this formula to generate some number of points and then connect those points with line segments. In pseudocode, assuming that angles are measured in radians and that pi represents the mathematical constant \u03c0,</p> <pre><code>Draw Oval with center (x,y), horizontal radius r1, and vertical radius r2:\n    for i = 0 to numberOfLines:\n        angle1 = i * (2*pi/numberOfLines)\n        angle2 = (i+1) * (2*pi/numberOfLines)\n        a1 = x + r1*cos(angle1)\n        b1 = y + r2*sin(angle1)\n        a2 = x + r1*cos(angle2)\n        b2 = y + r2*sin(angle2)\n        Draw Line from (a1,b1) to (a2,b2)\n</code></pre> <p>For a circle, of course, you would just have r1 = r2. This is the first time we have used the sine and cosine functions, but it won't be the last. These functions play an important role in computer graphics because of their association with circles, circular motion, and rotation. We will meet them again when we talk about transforms in the next section.</p> <p>Here's a little demo that you can use to experiment with using line segments to approximate ovals:</p> <p></p>"},{"location":"cn/c2/s2/#222-\u63cf\u8fb9\u548c\u586b\u5145","title":"2.2.2  \u63cf\u8fb9\u548c\u586b\u5145","text":"<p>Stroke and Fill</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u7ed8\u56fe\u4e2d\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4f7f\u5f62\u72b6\u53ef\u89c1\u3002\u60a8\u53ef\u4ee5\u63cf\u8fb9(stroke)\u5b83\uff0c\u6216\u8005\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u5c01\u95ed\u7684\u5f62\u72b6\uff0c\u6bd4\u5982\u77e9\u5f62\u6216\u692d\u5706\uff0c\u60a8\u53ef\u4ee5\u586b\u5145(fill)\u5b83\u3002\u63cf\u8fb9\u4e00\u6761\u7ebf\u5c31\u50cf\u6cbf\u7740\u7ebf\u6761\u62d6\u52a8\u4e00\u652f\u7b14\u3002\u63cf\u8fb9\u4e00\u4e2a\u77e9\u5f62\u6216\u692d\u5706\u5c31\u50cf\u6cbf\u7740\u5b83\u7684\u8fb9\u754c\u62d6\u52a8\u4e00\u652f\u7b14\u3002\u586b\u5145\u4e00\u4e2a\u5f62\u72b6\u610f\u5473\u7740\u7ed9\u5305\u542b\u5728\u8be5\u5f62\u72b6\u5185\u7684\u6240\u6709\u70b9\u4e0a\u8272\u3002\u53ef\u4ee5\u540c\u65f6\u63cf\u8fb9\u548c\u586b\u5145\u540c\u4e00\u4e2a\u5f62\u72b6\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f62\u72b6\u7684\u5185\u90e8\u548c\u5916\u8f6e\u5ed3\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5916\u89c2\u3002</p> <p>\u5f53\u4e00\u4e2a\u5f62\u72b6\u4e0e\u81ea\u8eab\u76f8\u4ea4\u65f6\uff0c\u5c31\u50cf\u4e0b\u9762\u63d2\u56fe\u4e2d\u7684\u4e24\u4e2a\u5f62\u72b6\u4e00\u6837\uff0c\u4e0d\u592a\u6e05\u695a\u5e94\u8be5\u5982\u4f55\u5b9a\u4e49\u5f62\u72b6\u7684\u5185\u90e8\u3002\u4e8b\u5b9e\u4e0a\uff0c\u81f3\u5c11\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u89c4\u5219\u53ef\u4ee5\u7528\u6765\u586b\u5145\u8fd9\u6837\u7684\u5f62\u72b6\u3002\u8fd9\u4e24\u4e2a\u89c4\u5219\u90fd\u57fa\u4e8e\u4e00\u4e2a\u53eb\u505a\u201c\u7ed5\u6570(winding number)\u201d\u7684\u4e1c\u897f\u3002\u5173\u4e8e\u4e00\u4e2a\u70b9\u7684\u7ed5\u6570\u5927\u81f4\u662f\u6307\u5f62\u72b6\u4ee5\u6b63\u65b9\u5411\u7ed5\u8be5\u70b9\u65cb\u8f6c\u7684\u6b21\u6570\uff0c\u8fd9\u91cc\u6211\u8ba4\u4e3a\u6b63\u65b9\u5411\u662f\u9006\u65f6\u9488\u65b9\u5411\u3002\u5f53\u7ed5\u6570\u4e3a\u8d1f\u6570\u65f6\uff0c\u8868\u793a\u7ed5\u6570\u65b9\u5411\u76f8\u53cd\u3002\u5728\u63d2\u56fe\u4e2d\uff0c\u5de6\u8fb9\u7684\u5f62\u72b6\u6309\u7167\u6240\u793a\u65b9\u5411\u8fdb\u884c\u63cf\u7ed8\uff0c\u5e76\u4e14\u6bcf\u4e2a\u533a\u57df\u7684\u7ed5\u6570\u5728\u533a\u57df\u5185\u663e\u793a\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002</p> <p> </p> <p>\u8fd9\u4e9b\u5f62\u72b6\u4e5f\u7528\u4e24\u79cd\u586b\u5145\u89c4\u5219\u8fdb\u884c\u4e86\u586b\u5145\u3002\u5bf9\u4e8e\u4e2d\u95f4\u7684\u5f62\u72b6\uff0c\u586b\u5145\u89c4\u5219\u662f\u5bf9\u5177\u6709\u975e\u96f6\u7ed5\u6570\u7684\u4efb\u4f55\u533a\u57df\u8fdb\u884c\u7740\u8272\u3002\u5bf9\u4e8e\u53f3\u8fb9\u663e\u793a\u7684\u5f62\u72b6\uff0c\u89c4\u5219\u662f\u5bf9\u7ed5\u6570\u4e3a\u5947\u6570\u7684\u4efb\u4f55\u533a\u57df\u8fdb\u884c\u7740\u8272\uff1b\u7ed5\u6570\u4e3a\u5076\u6570\u7684\u533a\u57df\u4e0d\u586b\u5145\u3002</p> <p>\u4ecd\u7136\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u5f62\u72b6\u5e94\u8be5\u7528\u4ec0\u4e48\u6765\u586b\u5145\u3002\u5f53\u7136\uff0c\u53ef\u4ee5\u7528\u989c\u8272\u6765\u586b\u5145\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7c7b\u578b\u7684\u586b\u5145\uff0c\u5305\u62ec\u56fe\u6848(patterns)\u548c\u6e10\u53d8(gradients)\u3002\u56fe\u6848\u662f\u4e00\u4e2a\u56fe\u50cf\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u5c0f\u56fe\u50cf\u3002\u5f53\u7528\u4e8e\u586b\u5145\u5f62\u72b6\u65f6\uff0c\u56fe\u6848\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6c34\u5e73\u548c\u5782\u76f4\u91cd\u590d\uff0c\u4ee5\u8986\u76d6\u6574\u4e2a\u5f62\u72b6\u3002\u6e10\u53d8\u7c7b\u4f3c\uff0c\u5b83\u662f\u4e00\u79cd\u8ba9\u989c\u8272\u4ece\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u70b9\u53d8\u5316\u7684\u65b9\u5f0f\uff0c\u4f46\u4e0d\u662f\u4ece\u56fe\u50cf\u4e2d\u83b7\u53d6\u989c\u8272\uff0c\u800c\u662f\u8ba1\u7b97\u5f97\u51fa\u3002\u57fa\u672c\u601d\u60f3\u6709\u5f88\u591a\u53d8\u5316\uff0c\u4f46\u603b\u662f\u6709\u4e00\u6761\u7ebf\u6bb5\u6cbf\u7740\u5b83\u7684\u989c\u8272\u53d8\u5316\u3002\u989c\u8272\u5728\u7ebf\u6bb5\u7684\u7aef\u70b9\u5904\u6307\u5b9a\uff0c\u53ef\u80fd\u8fd8\u5728\u5176\u4ed6\u70b9\u5904\u6307\u5b9a\uff1b\u5728\u8fd9\u4e9b\u70b9\u4e4b\u95f4\uff0c\u989c\u8272\u8fdb\u884c\u63d2\u503c(interpolated)\u3002\u989c\u8272\u4e5f\u53ef\u4ee5\u5916\u63a8\u5230\u5305\u542b\u7ebf\u6bb5\u7684\u7ebf\u4e0a\u7684\u5176\u4ed6\u70b9\uff0c\u4f46\u4f4d\u4e8e\u7ebf\u6bb5\u4e4b\u5916\uff1b\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ece\u7ebf\u6bb5\u91cd\u590d\u56fe\u6848\u6216\u8005\u7b80\u5355\u5730\u4ece\u6700\u8fd1\u7684\u7aef\u70b9\u5ef6\u4f38\u989c\u8272\u6765\u5b8c\u6210\u3002\u5bf9\u4e8e\u7ebf\u6027\u6e10\u53d8(linear gradient)\uff0c\u989c\u8272\u6cbf\u7740\u4e0e\u57fa\u672c\u7ebf\u6bb5\u5782\u76f4\u7684\u7ebf\u4fdd\u6301\u6052\u5b9a\uff0c\u56e0\u6b64\u60a8\u4f1a\u5f97\u5230\u4ee5\u8be5\u65b9\u5411\u7684\u5b9e\u8272\u7ebf\u6761\u3002\u5728\u5f84\u5411\u6e10\u53d8(radial gradient)\u4e2d\uff0c\u989c\u8272\u6cbf\u7740\u4ee5\u7ebf\u6bb5\u7684\u4e00\u4e2a\u7aef\u70b9\u4e3a\u4e2d\u5fc3\u7684\u5706\u4fdd\u6301\u6052\u5b9a\u3002\u8fd9\u8fd8\u6ca1\u6709\u7a77\u5c3d\u6240\u6709\u53ef\u80fd\u6027\u3002\u4e3a\u4e86\u8ba9\u60a8\u4e86\u89e3\u56fe\u6848\u548c\u6e10\u53d8\u7684\u5916\u89c2\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f62\u72b6\uff0c\u7528\u4e24\u79cd\u6e10\u53d8\u548c\u4e24\u79cd\u56fe\u6848\u586b\u5145\uff1a</p> <p> </p> <p>\u7b2c\u4e00\u4e2a\u5f62\u72b6\u4f7f\u7528\u4ec5\u7531\u4e24\u79cd\u989c\u8272\u5b9a\u4e49\u7684\u7b80\u5355\u7ebf\u6027\u6e10\u53d8\u8fdb\u884c\u586b\u5145\uff0c\u800c\u7b2c\u4e8c\u4e2a\u5f62\u72b6\u4f7f\u7528\u5f84\u5411\u6e10\u53d8\u8fdb\u884c\u586b\u5145\u3002</p> <p>\u56fe\u6848\u548c\u6e10\u53d8\u4e0d\u4e00\u5b9a\u5c40\u9650\u4e8e\u586b\u5145\u5f62\u72b6\u3002\u6bd5\u7adf\uff0c\u63cf\u8fb9\u4e00\u4e2a\u5f62\u72b6\u5c31\u662f\u586b\u5145\u6cbf\u7740\u5f62\u72b6\u8fb9\u754c\u7684\u50cf\u7d20\u5e26\uff0c\u53ef\u4ee5\u7528\u6e10\u53d8\u6216\u56fe\u6848\u6765\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u7528\u7eaf\u8272\u586b\u5145\u3002</p> <p>\u6700\u540e\uff0c\u6211\u8981\u63d0\u5230\uff0c\u4e3a\u4e86\u7ed8\u5236\u6587\u672c\uff0c\u53ef\u4ee5\u5c06\u6587\u672c\u89c6\u4e3a\u4e00\u4e2a\u5f62\u72b6\u3002\u5f62\u72b6\u7684\u8fb9\u754c\u662f\u5b57\u7b26\u7684\u8f6e\u5ed3\u3002\u6587\u672c\u901a\u8fc7\u586b\u5145\u8be5\u5f62\u72b6\u6765\u7ed8\u5236\u3002\u5728\u67d0\u4e9b\u56fe\u5f62\u7cfb\u7edf\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u63cf\u7ed8\u5b9a\u4e49\u6587\u672c\u7684\u5f62\u72b6\u7684\u8f6e\u5ed3\u3002\u5728\u4e0b\u9762\u7684\u63d2\u56fe\u4e2d\uff0c\u9876\u90e8\u663e\u793a\u4e86\u5b57\u7b26\u4e32\"Graphics\"\uff0c\u4f7f\u7528\u56fe\u6848\u8fdb\u884c\u586b\u5145\uff0c\u4e0b\u65b9\u5219\u4f7f\u7528\u6e10\u53d8\u8fdb\u884c\u586b\u5145\uff0c\u5e76\u7528\u7eaf\u9ed1\u8272\u63cf\u8fb9\uff1a</p> <p> </p> <p>There are two ways to make a shape visible in a drawing. You can stroke it. Or, if it is a closed shape such as a rectangle or an oval, you can fill it. Stroking a line is like dragging a pen along the line. Stroking a rectangle or oval is like dragging a pen along its boundary. Filling a shape means coloring all the points that are contained inside that shape. It's possible to both stroke and fill the same shape; in that case, the interior of the shape and the outline of the shape can have a different appearance.</p> <p>When a shape intersects itself, like the two shapes in the illustration below, it's not entirely clear what should count as the interior of the shape. In fact, there are at least two different rules for filling such a shape. Both are based on something called the winding number. The winding number of a shape about a point is, roughly, how many times the shape winds around the point in the positive direction, which I take here to be counterclockwise. Winding number can be negative when the winding is in the opposite direction. In the illustration, the shapes on the left are traced in the direction shown, and the winding number about each region is shown as a number inside the region.</p> <p> </p> <p>The shapes are also shown filled using the two fill rules. For the shapes in the center, the fill rule is to color any region that has a non-zero winding number. For the shapes shown on the right, the rule is to color any region whose winding number is odd; regions with even winding number are not filled.</p> <p>There is still the question of what a shape should be filled with. Of course, it can be filled with a color, but other types of fill are possible, including patterns and gradients. A pattern is an image, usually a small image. When used to fill a shape, a pattern can be repeated horizontally and vertically as necessary to cover the entire shape. A gradient is similar in that it is a way for color to vary from point to point, but instead of taking the colors from an image, they are computed. There are a lot of variations to the basic idea, but there is always a line segment along which the color varies. The color is specified at the endpoints of the line segment, and possibly at additional points; between those points, the color is interpolated. The color can also be extrapolated to other points on the line that contains the line segment but lying outside the line segment; this can be done either by repeating the pattern from the line segment or by simply extending the color from the nearest endpoint. For a linear gradient, the color is constant along lines perpendicular to the basic line segment, so you get lines of solid color going in that direction. In a radial gradient, the color is constant along circles centered at one of the endpoints of the line segment. And that doesn't exhaust the possibilities. To give you an idea what patterns and gradients can look like, here is a shape, filled with two gradients and two patterns:</p> <p> </p> <p>The first shape is filled with a simple linear gradient defined by just two colors, while the second shape uses a radial gradient.</p> <p>Patterns and gradients are not necessarily restricted to filling shapes. Stroking a shape is, after all, the same as filling a band of pixels along the boundary of the shape, and that can be done with a gradient or a pattern, instead of with a solid color.</p> <p>Finally, I will mention that a string of text can be considered to be a shape for the purpose of drawing it. The boundary of the shape is the outline of the characters. The text is drawn by filling that shape. In some graphics systems, it is also possible to stroke the outline of the shape that defines the text. In the following illustration, the string \"Graphics\" is shown, on top, filled with a pattern and, below that, filled with a gradient and stroked with solid black:</p> <p> </p>"},{"location":"cn/c2/s2/#223-\u591a\u8fb9\u5f62\u66f2\u7ebf\u548c\u8def\u5f84","title":"2.2.3  \u591a\u8fb9\u5f62\u3001\u66f2\u7ebf\u548c\u8def\u5f84","text":"<p>Polygons, Curves, and Paths</p> \u4e2d\u6587\u82f1\u6587 <p>\u5bf9\u4e8e\u4e00\u4e2a\u56fe\u5f62API\u6765\u8bf4\uff0c\u5305\u542b\u6bcf\u79cd\u53ef\u80fd\u7684\u5f62\u72b6\u4f5c\u4e3a\u57fa\u672c\u5f62\u72b6\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f46\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u521b\u5efa\u66f4\u590d\u6742\u7684\u5f62\u72b6\u3002\u4f8b\u5982\uff0c\u8003\u8651\u591a\u8fb9\u5f62(polygons)\u3002\u591a\u8fb9\u5f62\u662f\u7531\u4e00\u7cfb\u5217\u7ebf\u6bb5\u7ec4\u6210\u7684\u5c01\u95ed\u5f62\u72b6\u3002\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u7aef\u70b9\u4e0e\u4e0b\u4e00\u4e2a\u7ebf\u6bb5\u7684\u7aef\u70b9\u8fde\u63a5\uff0c\u6700\u540e\u4e00\u4e2a\u7ebf\u6bb5\u8fde\u63a5\u56de\u7b2c\u4e00\u4e2a\u7ebf\u6bb5\u3002\u7aef\u70b9\u88ab\u79f0\u4e3a\u591a\u8fb9\u5f62\u7684\u9876\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u5217\u51fa\u9876\u70b9\u6765\u5b9a\u4e49\u4e00\u4e2a\u591a\u8fb9\u5f62\u3002</p> <p>\u5728\u4e00\u4e2a\u6b63\u591a\u8fb9\u5f62(regular polygon)\u4e2d\uff0c\u6240\u6709\u7684\u8fb9\u957f\u76f8\u7b49\uff0c\u6240\u6709\u8fb9\u4e4b\u95f4\u7684\u89d2\u5ea6\u4e5f\u76f8\u7b49\u3002\u6b63\u65b9\u5f62\u548c\u7b49\u8fb9\u4e09\u89d2\u5f62\u662f\u6b63\u591a\u8fb9\u5f62\u7684\u4f8b\u5b50\u3002\u51f8\u591a\u8fb9\u5f62(convex polygon)\u5177\u6709\u8fd9\u6837\u7684\u5c5e\u6027\uff1a\u65e0\u8bba\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u591a\u8fb9\u5f62\u5185\u90e8\u6216\u8fb9\u4e0a\uff0c\u8fde\u63a5\u8fd9\u4e9b\u70b9\u7684\u6574\u6761\u7ebf\u6bb5\u4e5f\u5728\u591a\u8fb9\u5f62\u5185\u90e8\u6216\u8fb9\u4e0a\u3002\u76f4\u89c2\u5730\u8bf4\uff0c\u51f8\u591a\u8fb9\u5f62\u5728\u8fb9\u754c\u4e0a\u6ca1\u6709\"\u51f9\u9677\"\u3002\uff08\u51f9\u9677\u662f\u4efb\u4f55\u5f62\u72b6\u7684\u5c5e\u6027\uff0c\u4e0d\u4ec5\u4ec5\u662f\u591a\u8fb9\u5f62\u7684\u5c5e\u6027\u3002\uff09</p> <p> </p> <p>\u6709\u65f6\u5019\uff0c\u591a\u8fb9\u5f62\u9700\u8981\u662f\"\u7b80\u5355\"\u7684\uff0c\u8fd9\u610f\u5473\u7740\u591a\u8fb9\u5f62\u6ca1\u6709\u81ea\u76f8\u4ea4\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u4e00\u6761\u8fb9\u53ea\u80fd\u5728\u5176\u7aef\u70b9\u5904\u4e0e\u53e6\u4e00\u6761\u8fb9\u76f8\u4ea4\u3002\u800c\u4e14\u901a\u5e38\u8981\u6c42\u591a\u8fb9\u5f62\u662f\"\u5e73\u9762\"\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6240\u6709\u7684\u9876\u70b9\u90fd\u4f4d\u4e8e\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\u3002\uff08\u5f53\u7136\uff0c\u57282D\u56fe\u5f62\u4e2d\uff0c\u4e00\u5207\u90fd\u4f4d\u4e8e\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\uff0c\u6240\u4ee5\u8fd9\u4e0d\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u4f46\u57283D\u4e2d\u5c31\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002\uff09</p> <p>\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u7ed8\u5236\u591a\u8fb9\u5f62\u5462\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u7ed8\u56feAPI\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5177\u5907\u54ea\u4e9b\u529f\u80fd\u6765\u7ed8\u5236\u591a\u8fb9\u5f62\u3002\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u5177\u5907\u7ed8\u5236\u7ebf\u6bb5\u548c\u586b\u5145\u591a\u8fb9\u5f62\u7684\u547d\u4ee4\uff0c\u5176\u4e2d\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u53ef\u4ee5\u4f5c\u4e3a\u70b9\u7684\u6570\u7ec4\u6216\u8005\u4f5c\u4e3ax\u5750\u6807\u6570\u7ec4\u52a0\u4e0ay\u5750\u6807\u6570\u7ec4\u6765\u7ed9\u51fa\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u65f6\u5019\u786e\u5b9e\u662f\u8fd9\u6837\u505a\u7684\uff1b\u4f8b\u5982\uff0cJava\u56fe\u5f62API\u5c31\u5305\u542b\u4e86\u8fd9\u6837\u7684\u547d\u4ee4\u3002\u53e6\u4e00\u79cd\u66f4\u7075\u6d3b\u7684\u65b9\u6cd5\u662f\u5f15\u5165\"\u8def\u5f84\"\u7684\u6982\u5ff5\u3002Java\u3001SVG\u548cHTML\u753b\u5e03API\u90fd\u652f\u6301\u8fd9\u4e2a\u6982\u5ff5\u3002\u8def\u5f84\u662f\u4e00\u4e2a\u901a\u7528\u7684\u5f62\u72b6\uff0c\u53ef\u4ee5\u5305\u542b\u7ebf\u6bb5\u548c\u66f2\u7ebf\u6bb5\u3002\u7ebf\u6bb5\u53ef\u4ee5\u8fde\u63a5\u5230\u5176\u4ed6\u7ebf\u6bb5\u7684\u7aef\u70b9\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u8fde\u63a5\u3002\u901a\u8fc7\u7ed9\u51fa\u4e00\u7cfb\u5217\u547d\u4ee4\u6765\u521b\u5efa\u8def\u5f84\uff0c\u8fd9\u4e9b\u547d\u4ee4\u57fa\u672c\u4e0a\u544a\u8bc9\u4e86\u5982\u4f55\u79fb\u52a8\u753b\u7b14\u6765\u7ed8\u5236\u8def\u5f84\u3002\u5728\u521b\u5efa\u8def\u5f84\u65f6\uff0c\u6709\u4e00\u4e2a\u8868\u793a\u753b\u7b14\u5f53\u524d\u4f4d\u7f6e\u7684\u70b9\u3002\u6709\u4e00\u4e2a\u547d\u4ee4\u53ef\u4ee5\u79fb\u52a8\u753b\u7b14\u800c\u4e0d\u7ed8\u5236\uff0c\u8fd8\u6709\u7528\u4e8e\u7ed8\u5236\u5404\u79cd\u7c7b\u578b\u7ebf\u6bb5\u7684\u547d\u4ee4\u3002\u5bf9\u4e8e\u7ed8\u5236\u591a\u8fb9\u5f62\uff0c\u6211\u4eec\u9700\u8981\u7684\u547d\u4ee4\u5305\u62ec\uff1a</p> <ul> <li><code>createPath()</code> \u2014 \u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u7a7a\u8def\u5f84</li> <li><code>moveTo(x,y)</code> \u2014 \u5c06\u753b\u7b14\u79fb\u52a8\u5230\u70b9(x,y)\uff0c\u800c\u4e0d\u6dfb\u52a0\u7ebf\u6bb5\u5230\u8def\u5f84\u4e2d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u7ed8\u5236\u4efb\u4f55\u4e1c\u897f</li> <li><code>lineTo(x,y)</code> \u2014 \u6dfb\u52a0\u4e00\u4e2a\u7ebf\u6bb5\u5230\u8def\u5f84\u4e2d\uff0c\u8be5\u7ebf\u6bb5\u4ece\u5f53\u524d\u753b\u7b14\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5230\u70b9(x,y)\u7ed3\u675f\uff0c\u5e76\u5c06\u753b\u7b14\u79fb\u52a8\u5230(x,y)</li> <li><code>closePath()</code> \u2014 \u6dfb\u52a0\u4e00\u6761\u7ebf\u6bb5\u4ece\u5f53\u524d\u753b\u7b14\u4f4d\u7f6e\u8fd4\u56de\u5230\u8d77\u59cb\u70b9\uff0c\u9664\u975e\u753b\u7b14\u5df2\u7ecf\u5728\u8d77\u59cb\u70b9\uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u5c01\u95ed\u7684\u8def\u5f84\u3002</li> </ul> <p>\uff08\u5bf9\u4e8e<code>closePath()</code>\uff0c\u6211\u9700\u8981\u5b9a\u4e49\"\u8d77\u59cb\u70b9\"\u3002\u4e00\u4e2a\u8def\u5f84\u53ef\u4ee5\u7531\u591a\u4e2a\"\u5b50\u8def\u5f84\"\u7ec4\u6210\u3002\u4e00\u4e2a\u5b50\u8def\u5f84\u7531\u4e00\u7cfb\u5217\u8fde\u63a5\u7684\u7ebf\u6bb5\u7ec4\u6210\u3002<code>moveTo()</code>\u603b\u662f\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u5b50\u8def\u5f84\u3002<code>closePath()</code>\u7ed3\u675f\u5f53\u524d\u7ebf\u6bb5\u5e76\u9690\u5f0f\u5730\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u3002\u6240\u4ee5\"\u8d77\u59cb\u70b9\"\u6307\u7684\u662f\u5728\u6700\u8fd1\u7684<code>moveTo()</code>\u6216<code>closePath()</code>\u4e4b\u540e\u753b\u7b14\u7684\u4f4d\u7f6e\u3002\uff09</p> <p>\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u8868\u793a\u4e09\u89d2\u5f62\u7684\u8def\u5f84\uff0c\u5176\u9876\u70b9\u5206\u522b\u4e3a(100,100)\u3001(300,100)\u548c(200,200)\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b9e\u73b0\uff1a</p> <pre><code>createPath()\nmoveTo(100, 100)\nlineTo(300, 100)\nlineTo(200, 200)\nclosePath()\n</code></pre> <p>\u6700\u540e\u7684<code>closePath()</code>\u547d\u4ee4\u4e5f\u53ef\u4ee5\u66ff\u6362\u4e3a<code>lineTo(100,100)</code>\uff0c\u5c06\u753b\u7b14\u79fb\u56de\u5230\u7b2c\u4e00\u4e2a\u9876\u70b9\u3002</p> <p>\u8def\u5f84\u8868\u793a\u4e00\u4e2a\u62bd\u8c61\u7684\u51e0\u4f55\u5bf9\u8c61\u3002\u521b\u5efa\u8def\u5f84\u5e76\u4e0d\u4f1a\u4f7f\u5176\u5728\u5c4f\u5e55\u4e0a\u53ef\u89c1\u3002\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u8def\u5f84\uff0c\u4e3a\u4e86\u4f7f\u5176\u53ef\u89c1\uff0c\u6211\u4eec\u9700\u8981\u989d\u5916\u7684\u547d\u4ee4\u6765\u63cf\u8fb9\u548c\u586b\u5145\u8def\u5f84\u3002</p> <p>\u5728\u672c\u8282\u7684\u524d\u9762\u90e8\u5206\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5982\u4f55\u901a\u8fc7\u7ed8\u5236\u4e00\u4e2a\u5177\u6709\u5927\u91cf\u8fb9\u7684\u591a\u8fb9\u5f62\u6765\u8fd1\u4f3c\u692d\u5706\u3002\u5728\u90a3\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u5c06\u6bcf\u6761\u8fb9\u7ed8\u5236\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u6bb5\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u5806\u5355\u72ec\u7684\u7ebf\u6bb5\u800c\u4e0d\u662f\u4e00\u4e2a\u591a\u8fb9\u5f62\u3002\u8fd9\u6837\u7684\u4e1c\u897f\u65e0\u6cd5\u586b\u5145\u3002\u6700\u597d\u7684\u65b9\u6cd5\u662f\u7528\u591a\u8fb9\u5f62\u8def\u5f84\u6765\u8fd1\u4f3c\u692d\u5706\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4ee5\u4e2d\u5fc3\u70b9(x,y)\u548c\u534a\u5f84r1\u548cr2\u7684\u692d\u5706\u6765\u8bf4\uff1a</p> <pre><code>createPath()\nmoveTo(x + r1, y)\nfor i = 1 to numberOfPoints-1\n    angle = i * (2*pi/numberOfLines)\n    lineTo(x + r1*cos(angle), y + r2*sin(angle))\nclosePath()\n</code></pre> <p>\u4f7f\u7528\u8fd9\u4e2a\u8def\u5f84\uff0c\u6211\u4eec\u65e2\u53ef\u4ee5\u7ed8\u5236\u586b\u5145\u7684\u692d\u5706\uff0c\u4e5f\u53ef\u4ee5\u7ed8\u5236\u63cf\u8fb9\u3002\u5373\u4f7f\u6211\u4eec\u53ea\u60f3\u7ed8\u5236\u591a\u8fb9\u5f62\u7684\u8f6e\u5ed3\uff0c\u5c06\u591a\u8fb9\u5f62\u521b\u5efa\u4e3a\u8def\u5f84\u800c\u4e0d\u662f\u7ed8\u5236\u5355\u72ec\u7684\u7ebf\u6bb5\u4e5f\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002\u901a\u8fc7\u8def\u5f84\uff0c\u8ba1\u7b97\u673a\u77e5\u9053\u8fd9\u4e9b\u8fb9\u662f\u5355\u4e2a\u5f62\u72b6\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u63a7\u5236\u76f8\u90bb\u8fb9\u4e4b\u95f4\u7684\"\u8fde\u63a5\"\u7684\u5916\u89c2\uff0c\u6b63\u5982\u672c\u8282\u524d\u9762\u6240\u63d0\u5230\u7684\u3002</p> <p>\u6211\u4e4b\u524d\u63d0\u5230\u8def\u5f84\u53ef\u4ee5\u5305\u542b\u9664\u4e86\u7ebf\u6bb5\u4e4b\u5916\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u6bb5\u3002\u4f8b\u5982\uff0c\u53ef\u80fd\u53ef\u4ee5\u5c06\u5706\u5f27\u4f5c\u4e3a\u4e00\u4e2a\u6bb5\u5305\u542b\u8fdb\u6765\u3002\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u66f2\u7ebf\u662f\u8d1d\u585e\u5c14\u66f2\u7ebf(Bezier curve)\u3002\u8d1d\u585e\u5c14\u66f2\u7ebf\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u975e\u5e38\u901a\u7528\u7684\u66f2\u7ebf\u5f62\u72b6\u3002\u5b83\u4eec\u76f8\u5bf9\u76f4\u89c2\uff0c\u6240\u4ee5\u5e38\u5e38\u5728\u5141\u8bb8\u7528\u6237\u4ea4\u4e92\u5f0f\u8bbe\u8ba1\u66f2\u7ebf\u7684\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002\u6570\u5b66\u4e0a\uff0c\u8d1d\u585e\u5c14\u66f2\u7ebf\u7531\u53c2\u6570\u591a\u9879\u5f0f\u65b9\u7a0b\u5b9a\u4e49\uff0c\u4f46\u4f60\u4e0d\u9700\u8981\u7406\u89e3\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u5c31\u80fd\u4f7f\u7528\u5b83\u4eec\u3002\u5e38\u89c1\u7684\u8d1d\u585e\u5c14\u66f2\u7ebf\u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u5206\u522b\u662f\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u548c\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\uff1b\u5b83\u4eec\u5206\u522b\u7531\u4e09\u6b21\u548c\u4e8c\u6b21\u591a\u9879\u5f0f\u5b9a\u4e49\u3002\u5f53\u4e00\u822c\u672f\u8bed\"\u8d1d\u585e\u5c14\u66f2\u7ebf\"\u88ab\u4f7f\u7528\u65f6\uff0c\u901a\u5e38\u6307\u7684\u662f\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u3002</p> <p>\u4e00\u4e2a\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u7531\u4e24\u4e2a\u7aef\u70b9\u548c\u4e24\u4e2a\u63a7\u5236\u70b9(control points)\u5b9a\u4e49\u3002\u8981\u7406\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6700\u597d\u60f3\u8c61\u4e00\u4e0b\u753b\u7b14\u5982\u4f55\u7ed8\u5236\u66f2\u7ebf\u6bb5\u3002\u753b\u7b14\u4ece\u7b2c\u4e00\u4e2a\u7aef\u70b9\u5f00\u59cb\uff0c\u671d\u7740\u7b2c\u4e00\u4e2a\u63a7\u5236\u70b9\u7684\u65b9\u5411\u3002\u63a7\u5236\u70b9\u4e0e\u7aef\u70b9\u7684\u8ddd\u79bb\u63a7\u5236\u4e86\u753b\u7b14\u5f00\u59cb\u7ed8\u5236\u66f2\u7ebf\u7684\u901f\u5ea6\u3002\u7b2c\u4e8c\u4e2a\u63a7\u5236\u70b9\u63a7\u5236\u4e86\u753b\u7b14\u5728\u5230\u8fbe\u66f2\u7ebf\u7684\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u65f6\u7684\u65b9\u5411\u548c\u901f\u5ea6\u3002\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\u7684\u4e09\u6b21\u66f2\u7ebf\u662f\u552f\u4e00\u7684\u3002</p> <p> </p> <p>\u4e0a\u56fe\u663e\u793a\u4e86\u4e09\u4e2a\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u3002\u53f3\u4fa7\u7684\u4e24\u4e2a\u66f2\u7ebf\u6bb5\u5728\u4e00\u4e2a\u7aef\u70b9\u5904\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u4e00\u4e2a\u66f4\u957f\u7684\u66f2\u7ebf\u3002\u66f2\u7ebf\u4ee5\u7c97\u9ed1\u7ebf\u7ed8\u5236\u3002\u7aef\u70b9\u663e\u793a\u4e3a\u9ed1\u8272\u70b9\uff0c\u63a7\u5236\u70b9\u663e\u793a\u4e3a\u84dd\u8272\u65b9\u5757\uff0c\u6bcf\u4e2a\u63a7\u5236\u70b9\u4e0e\u76f8\u5e94\u7684\u7aef\u70b9\u4e4b\u95f4\u7528\u7ec6\u7ea2\u7ebf\u8fde\u63a5\u3002\uff08\u901a\u5e38\uff0c\u53ea\u4f1a\u7ed8\u5236\u66f2\u7ebf\uff0c\u9664\u975e\u5728\u5141\u8bb8\u7528\u6237\u624b\u52a8\u7f16\u8f91\u66f2\u7ebf\u7684\u754c\u9762\u4e2d\u3002\uff09\u8bf7\u6ce8\u610f\uff0c\u5728\u4e00\u4e2a\u7aef\u70b9\u5904\uff0c\u66f2\u7ebf\u6bb5\u4e0e\u8fde\u63a5\u7aef\u70b9\u548c\u63a7\u5236\u70b9\u7684\u7ebf\u76f8\u5207\u3002\u8bf7\u6ce8\u610f\uff0c\u4e24\u4e2a\u66f2\u7ebf\u6bb5\u76f8\u4ea4\u5904\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u5c16\u9510\u7684\u70b9\u6216\u62d0\u89d2\u3002\u7136\u800c\uff0c\u5982\u679c\u9009\u62e9\u4e86\u9002\u5f53\u7684\u63a7\u5236\u70b9\uff0c\u4e00\u4e2a\u6bb5\u4f1a\u5e73\u6ed1\u5730\u8fc7\u6e21\u5230\u4e0b\u4e00\u4e2a\u6bb5\u3002</p> <p>\u901a\u8fc7\u4e00\u4e9b\u5b9e\u9645\u64cd\u4f5c\u7ecf\u9a8c\uff0c\u8fd9\u4e00\u5207\u90fd\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u8fd9\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\u5141\u8bb8\u60a8\u901a\u8fc7\u62d6\u52a8\u7aef\u70b9\u548c\u63a7\u5236\u70b9\u6765\u7f16\u8f91\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\uff1a</p> <p></p> <p>\u5f53\u5c06\u4e00\u4e2a\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\u65f6\uff0c\u8def\u5f84\u7684\u5f53\u524d\u753b\u7b14\u4f4d\u7f6e\u5145\u5f53\u6bb5\u7684\u7b2c\u4e00\u4e2a\u7aef\u70b9\u3002\u6dfb\u52a0\u6bb5\u5230\u8def\u5f84\u7684\u547d\u4ee4\u5fc5\u987b\u6307\u5b9a\u4e24\u4e2a\u63a7\u5236\u70b9\u548c\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u3002\u4e00\u4e2a\u5178\u578b\u7684\u547d\u4ee4\u53ef\u80fd\u662f</p> <pre><code>cubicCurveTo( cx1, cy1, cx2, cy2, x, y )\n</code></pre> <p>\u8fd9\u5c06\u4ece\u5f53\u524d\u4f4d\u7f6e\u5230\u70b9(x,y)\u6dfb\u52a0\u4e00\u6761\u66f2\u7ebf\uff0c\u4f7f\u7528(cx1,cy1)\u548c(cx2,cy2)\u4f5c\u4e3a\u63a7\u5236\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u753b\u7b14\u79bb\u5f00\u5f53\u524d\u4f4d\u7f6e\u671d\u5411(cx1,cy1)\uff0c\u5e76\u4ee5(cx2,cy2)\u7684\u65b9\u5411\u5230\u8fbe\u70b9(x,y)\u3002</p> <p>\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u4e0e\u4e09\u6b21\u7248\u672c\u7c7b\u4f3c\uff0c\u4f46\u5728\u4e8c\u6b21\u60c5\u51b5\u4e0b\uff0c\u6bb5\u53ea\u6709\u4e00\u4e2a\u63a7\u5236\u70b9\u3002\u66f2\u7ebf\u79bb\u5f00\u7b2c\u4e00\u4e2a\u7aef\u70b9\u671d\u7740\u63a7\u5236\u70b9\u7684\u65b9\u5411\uff0c\u7136\u540e\u4ece\u63a7\u5236\u70b9\u7684\u65b9\u5411\u5230\u8fbe\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u66f2\u7ebf\u5c06\u662f\u4e00\u4e2a\u629b\u7269\u7ebf\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u540c\u6837\uff0c\u901a\u8fc7\u4e00\u4e9b\u5b9e\u9645\u64cd\u4f5c\u7ecf\u9a8c\uff0c\u8fd9\u5c06\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u8bf7\u5c1d\u8bd5\u8fd9\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\uff1a</p> <p></p> <p>It is impossible for a graphics API to include every possible shape as a basic shape, but there is usually some way to create more complex shapes. For example, consider polygons. A polygon is a closed shape consisting of a sequence of line segments. Each line segment is joined to the next at its endpoint, and the last line segment connects back to the first. The endpoints are called the vertices of the polygon, and a polygon can be defined by listing its vertices.</p> <p>In a regular polygon, all the sides are the same length and all the angles between sides are equal. Squares and equilateral triangles are examples of regular polygons. A convex polygon has the property that whenever two points are inside or on the polygon, then the entire line segment between those points is also inside or on the polygon. Intuitively, a convex polygon has no \"indentations\" along its boundary. (Concavity can be a property of any shape, not just of polygons.)</p> <p> </p> <p>Sometimes, polygons are required to be \"simple,\" meaning that the polygon has no self-intersections. That is, all the vertices are different, and a side can only intersect another side at its endpoints. And polygons are usually required to be \"planar,\" meaning that all the vertices lie in the same plane. (Of course, in 2D graphics, everything lies in the same plane, so this is not an issue. However, it does become an issue in 3D.)</p> <p>How then should we draw polygons? That is, what capabilities would we like to have in a graphics API for drawing them. One possibility is to have commands for stroking and for filling polygons, where the vertices of the polygon are given as an array of points or as an array of x-coordinates plus an array of y-coordinates. In fact, that is sometimes done; for example, the Java graphics API includes such commands. Another, more flexible, approach is to introduce the idea of a \"path.\" Java, SVG, and the HTML canvas API all support this idea. A path is a general shape that can include both line segments and curved segments. Segments can, but don't have to be, connected to other segments at their endpoints. A path is created by giving a series of commands that tell, essentially, how a pen would be moved to draw the path. While a path is being created, there is a point that represents the pen's current location. There will be a command for moving the pen without drawing, and commands for drawing various kinds of segments. For drawing polygons, we need commands such as</p> <ul> <li><code>createPath()</code> \u2014 start a new, empty path</li> <li><code>moveTo(x,y)</code> \u2014 move the pen to the point (x,y), without adding a segment to the path; that is, without drawing anything</li> <li><code>lineTo(x,y)</code> \u2014 add a line segment to the path that starts at the current pen location and ends at the point (x,y), and move the pen to (x,y)</li> <li><code>closePath()</code> \u2014 add a line segment from the current pen location back to the starting point, unless the pen is already there, producing a closed path.</li> </ul> <p>(For closePath, I need to define \"starting point.\" A path can be made up of \"subpaths\" A subpath consists of a series of connected segments. A moveTo always starts a new subpath. A closePath ends the current segment and implicitly starts a new one. So \"starting point\" means the position of the pen after the most recent moveTo or closePath.)</p> <p>Suppose that we want a path that represents the triangle with vertices at (100,100), (300,100), and (200, 200). We can do that with the commands</p> <pre><code>createPath()\nmoveTo( 100, 100 )\nlineTo( 300, 100 )\nlineTo( 200, 200 )\nclosePath()\n</code></pre> <p>The closePath command at the end could be replaced by lineTo(100,100), to move the pen back to the first vertex.</p> <p>A path represents an abstract geometric object. Creating one does not make it visible on the screen. Once we have a path, to make it visible we need additional commands for stroking and filling the path.</p> <p>Earlier in this section, we saw how to approximate an oval by drawing, in effect, a polygon with a large number of sides. In that example, I drew each side as a separate line segment, so we really had a bunch of separate lines rather than a polygon. There is no way to fill such a thing. It would be better to approximate the oval with a polygonal path. For an oval with center (x,y) and radii r1 and r2:</p> <pre><code>createPath()\nmoveTo( x + r1, y )\nfor i = 1 to numberOfPoints-1\n    angle = i * (2*pi/numberOfLines)\n    lineTo( x + r1*cos(angle), y + r2*sin(angle) )\nclosePath()\n</code></pre> <p>Using this path, we could draw a filled oval as well as stroke it. Even if we just want to draw the outline of a polygon, it's still better to create the polygon as a path rather than to draw the line segments as separate sides. With a path, the computer knows that the sides are part of single shape. This makes it possible to control the appearance of the \"join\" between consecutive sides, as noted earlier in this section.</p> <p>I noted above that a path can contain other kinds of segments besides lines. For example, it might be possible to include an arc of a circle as a segment. Another type of curve is a Bezier curve. Bezier curves can be used to create very general curved shapes. They are fairly intuitive, so that they are often used in programs that allow users to design curves interactively. Mathematically, Bezier curves are defined by parametric polynomial equations, but you don't need to understand what that means to use them. There are two kinds of Bezier curve in common use, cubic Bezier curves and quadratic Bezier curves; they are defined by cubic and quadratic polynomials respectively. When the general term \"Bezier curve\" is used, it usually refers to cubic Bezier curves.</p> <p>A cubic Bezier curve segment is defined by the two endpoints of the segment together with two control points. To understand how it works, it's best to think about how a pen would draw the curve segment. The pen starts at the first endpoint, headed in the direction of the first control point. The distance of the control point from the endpoint controls the speed of the pen as it starts drawing the curve. The second control point controls the direction and speed of the pen as it gets to the second endpoint of the curve. There is a unique cubic curve that satisfies these conditions.</p> <p> </p> <p>The illustration above shows three cubic Bezier curve segments. The two curve segments on the right are connected at an endpoint to form a longer curve. The curves are drawn as thick black lines. The endpoints are shown as black dots and the control points as blue squares, with a thin red line connecting each control point to the corresponding endpoint. (Ordinarily, only the curve would be drawn, except in an interface that lets the user edit the curve by hand.) Note that at an endpoint, the curve segment is tangent to the line that connects the endpoint to the control point. Note also that there can be a sharp point or corner where two curve segments meet. However, one segment will merge smoothly into the next if control points are properly chosen.</p> <p>This will all be easier to understand with some hands-on experience. This interactive demo lets you edit cubic Bezier curve segments by dragging their endpoints and control points:</p> <p></p> <p>When a cubic Bezier curve segment is added to a path, the path's current pen location acts as the first endpoint of the segment. The command for adding the segment to the path must specify the two control points and the second endpoint. A typical command might look like</p> <pre><code>cubicCurveTo( cx1, cy1, cx2, cy2, x, y )\n</code></pre> <p>This would add a curve from the current location to point (x,y), using (cx1,cy1) and (cx2,cy2) as the control points. That is, the pen leaves the current location heading towards (cx1,cy1), and it ends at the point (x,y), arriving there from the direction of (cx2,cy2).</p> <p>Quadratic Bezier curve segments are similar to the cubic version, but in the quadratic case, there is only one control point for the segment. The curve leaves the first endpoint heading in the direction of the control point, and it arrives at the second endpoint coming from the direction of the control point. The curve in this case will be an arc of a parabola.</p> <p>Again, this is easier to understand this with some hands-on experience. Try this interactive demo:</p> <p></p>"},{"location":"cn/c2/s3/","title":"\u7b2c3\u8282: \u53d8\u6362","text":"<p>Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u7b2c2.1\u8282\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u5750\u6807\u7cfb\u7edf\u4ee5\u53ca\u5982\u4f55\u5c06\u5750\u6807\u4ece\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u7684\u53ef\u80fd\u6027\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u4ed4\u7ec6\u5730\u63a2\u8ba8\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u5e76\u4e14\u8fd8\u5c06\u770b\u770b\u51e0\u4f55\u53d8\u6362\u5982\u4f55\u7528\u4e8e\u5c06\u56fe\u5f62\u5bf9\u8c61\u653e\u7f6e\u5230\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u3002</p> <p>In Section 2.1, we discussed coordinate systems and how it is possible to transform coordinates from one coordinate system to another. In this section, we'll look at that idea a little more closely, and also look at how geometric transformations can be used to place graphics objects into a coordinate system.</p>"},{"location":"cn/c2/s3/#231-\u89c6\u53e3\u548c\u5efa\u6a21","title":"2.3.1  \u89c6\u53e3\u548c\u5efa\u6a21","text":"<p>Viewing and Modeling</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u5178\u578b\u7684\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u50cf\u7d20\u6784\u6210\u7684\u77e9\u5f62\uff0c\u5176\u81ea\u7136\u50cf\u7d20\u5750\u6807\u7528\u4e8e\u663e\u793a\u56fe\u50cf\u3002\u8fd9\u4e2a\u77e9\u5f62\u79f0\u4e3a\u89c6\u53e3(viewport)\u3002\u6211\u4eec\u8fd8\u6709\u4e00\u7ec4\u51e0\u4f55\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5728\u53ef\u80fd\u4e0d\u540c\u7684\u5750\u6807\u7cfb\u4e2d\u5b9a\u4e49\uff0c\u901a\u5e38\u662f\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u800c\u4e0d\u662f\u6574\u6570\u3002\u8fd9\u4e9b\u5bf9\u8c61\u7ec4\u6210\u4e86\u6211\u4eec\u60f3\u8981\u67e5\u770b\u7684\u201c\u573a\u666f\u201d\u6216\u201c\u4e16\u754c\u201d\uff0c\u7528\u4e8e\u5b9a\u4e49\u573a\u666f\u7684\u5750\u6807\u79f0\u4e3a\u4e16\u754c\u5750\u6807(world coordinates)\u3002</p> <p>\u5bf9\u4e8e\u4e8c\u7ef4\u56fe\u5f62\uff0c\u4e16\u754c\u4f4d\u4e8e\u4e00\u4e2a\u5e73\u9762\u4e0a\u3002\u4e0d\u53ef\u80fd\u663e\u793a\u6574\u4e2a\u65e0\u9650\u5e73\u9762\u7684\u56fe\u50cf\u3002\u6211\u4eec\u9700\u8981\u5728\u5e73\u9762\u4e0a\u9009\u62e9\u4e00\u4e9b\u77e9\u5f62\u533a\u57df\u6765\u663e\u793a\u5728\u56fe\u50cf\u4e2d\u3002\u8ba9\u6211\u4eec\u79f0\u8fd9\u4e2a\u77e9\u5f62\u533a\u57df\u4e3a\u7a97\u53e3\uff0c\u6216\u79f0\u4e3a\u89c6\u7a97(window)\u3002\u5750\u6807\u53d8\u6362\u7528\u4e8e\u5c06\u7a97\u53e3\u6620\u5c04\u5230\u89c6\u53e3\u4e2d\u3002</p> <p> </p> <p>\u5728\u8fd9\u4e2a\u56fe\u793a\u4e2d\uff0cT\u4ee3\u8868\u5750\u6807\u53d8\u6362\u3002T\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u7a97\u53e3\u4e2d\u7684\u4e16\u754c\u5750\u6807(x,y)\u5e76\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u89c6\u53e3\u4e2d\u7684\u50cf\u7d20\u5750\u6807T(x,y)\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u4ee5\u68c0\u67e5\u5230\uff1a</p> <pre><code>T(x,y) = ( 800*(x+4)/8, 600*(3-y)/6 )\n</code></pre> <p>\u770b\u4e00\u4e0b\u7a97\u53e3\u4e2d\u89d2\u843d\u5750\u6807\u4e3a(-1,2)\u548c(3,-1)\u7684\u77e9\u5f62\u3002\u5f53\u8fd9\u4e2a\u77e9\u5f62\u5728\u89c6\u53e3\u4e2d\u663e\u793a\u65f6\uff0c\u5b83\u5c06\u663e\u793a\u4e3a\u5177\u6709\u89d2\u843dT(-1,2)\u548cT(3,-1)\u7684\u77e9\u5f62\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cT(-1,2) = (300,100) \u4ee5\u53ca T(3,-1) = (700,400)\u3002</p> <p>\u6211\u4eec\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u5750\u6807\u53d8\u6362\u662f\u56e0\u4e3a\u5b83\u5141\u8bb8\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5bf9\u4e8e\u63cf\u8ff0\u6211\u4eec\u60f3\u8981\u663e\u793a\u7684\u573a\u666f\u800c\u8a00\u662f\u81ea\u7136\u7684\u4e16\u754c\u5750\u6807\u7cfb\uff0c\u800c\u8fd9\u6bd4\u76f4\u63a5\u4f7f\u7528\u89c6\u53e3\u5750\u6807\u66f4\u5bb9\u6613\u3002\u6cbf\u7740\u540c\u6837\u7684\u601d\u8def\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5b9a\u4e49\u4e00\u4e9b\u590d\u6742\u7684\u5bf9\u8c61\uff0c\u5e76\u5047\u8bbe\u5728\u6211\u4eec\u7684\u573a\u666f\u4e2d\u4f1a\u6709\u51e0\u4e2a\u8be5\u5bf9\u8c61\u7684\u526f\u672c\u3002\u6216\u8005\u4e5f\u8bb8\u6211\u4eec\u6b63\u5728\u5236\u4f5c\u4e00\u4e2a\u52a8\u753b\uff0c\u5e76\u4e14\u5e0c\u671b\u8be5\u5bf9\u8c61\u5728\u4e0d\u540c\u5e27\u4e2d\u6709\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u5e0c\u671b\u9009\u62e9\u4e00\u4e9b\u65b9\u4fbf\u7684\u5750\u6807\u7cfb\uff0c\u5e76\u5c06\u5176\u7528\u4e8e\u4e00\u52b3\u6c38\u9038\u5730\u5b9a\u4e49\u5bf9\u8c61\u3002\u6211\u4eec\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u5750\u6807\u79f0\u4e3a\u8be5\u5bf9\u8c61\u7684\u5bf9\u8c61\u5750\u6807(object coordinates)\u3002\u5f53\u6211\u4eec\u60f3\u8981\u5c06\u5bf9\u8c61\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u5bf9\u8c61\u5750\u6807\u8f6c\u6362\u4e3a\u6211\u4eec\u7528\u4e8e\u573a\u666f\u7684\u4e16\u754c\u5750\u6807\u7cfb\u3002\u6211\u4eec\u9700\u8981\u7684\u8f6c\u6362\u79f0\u4e3a\u5efa\u6a21\u53d8\u6362(modeling transformation)\u3002\u8fd9\u5f20\u56fe\u7247\u8bf4\u660e\u4e86\u4e00\u4e2a\u5728\u5176\u81ea\u5df1\u7684\u5bf9\u8c61\u5750\u6807\u7cfb\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7\u4e09\u79cd\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u6620\u5c04\u5230\u4e16\u754c\u5750\u6807\u7cfb\u4e2d\uff1a</p> <p> </p> <p>\u8bb0\u4f4f\uff0c\u4e3a\u4e86\u67e5\u770b\u573a\u666f\uff0c\u8fd8\u4f1a\u6709\u53e6\u4e00\u4e2a\u8f6c\u6362\uff0c\u5c06\u5bf9\u8c61\u4ece\u4e16\u754c\u5750\u6807\u4e2d\u7684\u89c6\u7a97\u6620\u5c04\u5230\u89c6\u53e3\u4e2d\u3002</p> <p>\u73b0\u5728\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u89c6\u7a97\u7684\u9009\u62e9\u51b3\u5b9a\u4e86\u56fe\u50cf\u4e2d\u663e\u793a\u573a\u666f\u7684\u54ea\u4e00\u90e8\u5206\u3002\u79fb\u52a8\u3001\u8c03\u6574\u5927\u5c0f\uff0c\u751a\u81f3\u65cb\u8f6c\u7a97\u53e3\u90fd\u4f1a\u7ed9\u573a\u666f\u5e26\u6765\u4e0d\u540c\u7684\u89c6\u56fe\u3002\u5047\u8bbe\u6211\u4eec\u5236\u4f5c\u4e86\u51e0\u5f20\u540c\u4e00\u8f86\u6c7d\u8f66\u7684\u56fe\u7247\uff1a</p> <p> </p> <p>\u8fd9\u5f20\u56fe\u7247\u4e0a\u90e8\u7684\u56fe\u50cf\u548c\u5de6\u4e0b\u89d2\u7684\u56fe\u50cf\u4e4b\u95f4\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u5b9e\u9645\u4e0a\uff0c\u6709\u4e24\u79cd\u53ef\u80fd\u6027\uff1a\u8981\u4e48\u6c7d\u8f66\u5411\u53f3\u79fb\u52a8\uff0c\u8981\u4e48\u5b9a\u4e49\u573a\u666f\u7684\u89c6\u7a97\u5411\u5de6\u79fb\u52a8\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u8bf7\u786e\u4fdd\u4f60\u7406\u89e3\u4e86\u5b83\u3002\uff08\u8bd5\u8bd5\u7528\u4f60\u7684\u624b\u673a\u76f8\u673a\u3002\u628a\u5b83\u5bf9\u51c6\u4e00\u4e9b\u7269\u4f53\uff0c\u5411\u5de6\u8d70\u4e00\u6b65\uff0c\u6ce8\u610f\u4e00\u4e0b\u76f8\u673a\u53d6\u666f\u5668\u4e2d\u7684\u7269\u4f53\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff1a\u5b83\u4eec\u5728\u7167\u7247\u4e2d\u5411\u53f3\u79fb\u52a8\uff01\uff09\u540c\u6837\uff0c\u5728\u9876\u90e8\u56fe\u7247\u548c\u5e95\u90e8\u4e2d\u95f4\u7684\u56fe\u7247\u4e4b\u95f4\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u8981\u4e48\u6c7d\u8f66\u9006\u65f6\u9488\u65cb\u8f6c\uff0c\u8981\u4e48\u7a97\u53e3\u987a\u65f6\u9488\u65cb\u8f6c\u3002\uff08\u518d\u6b21\u5c1d\u8bd5\u4f7f\u7528\u76f8\u673a\u2014\u2014\u4f60\u53ef\u80fd\u60f3\u62cd\u4e24\u5f20\u5b9e\u9645\u7167\u7247\u4ee5\u4fbf\u6bd4\u8f83\u3002\uff09\u6700\u540e\uff0c\u4ece\u9876\u90e8\u56fe\u7247\u5230\u53f3\u4e0b\u89d2\u7684\u56fe\u7247\u7684\u53d8\u5316\u53ef\u80fd\u662f\u56e0\u4e3a\u6c7d\u8f66\u53d8\u5c0f\u4e86\uff0c\u4e5f\u53ef\u80fd\u662f\u56e0\u4e3a\u7a97\u53e3\u53d8\u5927\u4e86\u3002\uff08\u5728\u4f60\u7684\u76f8\u673a\u4e0a\uff0c\u66f4\u5927\u7684\u7a97\u53e3\u610f\u5473\u7740\u4f60\u770b\u5230\u4e86\u66f4\u5927\u7684\u89c6\u91ce\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u7ed9\u76f8\u673a\u52a0\u4e0a\u53d8\u7126\u6216\u8005\u4ece\u4f60\u6b63\u5728\u89c2\u770b\u7684\u7269\u4f53\u540e\u9000\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\uff09</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u603b\u4f53\u6982\u5ff5\u3002\u5f53\u6211\u4eec\u4fee\u6539\u89c6\u7a97\u65f6\uff0c\u6211\u4eec\u6539\u53d8\u4e86\u5e94\u7528\u4e8e\u89c6\u53e3\u7684\u5750\u6807\u7cfb\u7edf\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u8fd9\u7b49\u540c\u4e8e\u4fdd\u6301\u8be5\u5750\u6807\u7cfb\u7edf\u4e0d\u53d8\uff0c\u800c\u662f\u79fb\u52a8\u573a\u666f\u4e2d\u7684\u5bf9\u8c61\u3002\u4e0d\u8fc7\uff0c\u4e3a\u4e86\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u83b7\u5f97\u76f8\u540c\u7684\u6548\u679c\uff0c\u60a8\u5fc5\u987b\u5bf9\u5bf9\u8c61\u5e94\u7528\u76f8\u53cd\u7684\u53d8\u6362\uff08\u4f8b\u5982\uff0c\u5411\u5de6\u79fb\u52a8\u7a97\u53e3\u7b49\u540c\u4e8e\u5c06\u5bf9\u8c61\u5411\u53f3\u79fb\u52a8\uff09\u3002\u56e0\u6b64\uff0c\u5728\u8f6c\u6362\u7a97\u53e3\u548c\u8f6c\u6362\u5bf9\u8c61\u4e4b\u95f4\u5e76\u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002\u5728\u6570\u5b66\u4e0a\uff0c\u60a8\u901a\u8fc7\u5728\u67d0\u4e2a\u81ea\u7136\u5750\u6807\u7cfb\u7edf\u4e2d\u7ed9\u51fa\u5750\u6807\u6765\u6307\u5b9a\u51e0\u4f55\u57fa\u5143\uff0c\u8ba1\u7b97\u673a\u4f1a\u5bf9\u8fd9\u4e9b\u5750\u6807\u5e94\u7528\u4e00\u7cfb\u5217\u53d8\u6362\uff0c\u6700\u7ec8\u4ea7\u751f\u7528\u4e8e\u5728\u56fe\u50cf\u4e2d\u5b9e\u9645\u7ed8\u5236\u57fa\u5143\u7684\u5750\u6807\u3002\u60a8\u4f1a\u8ba4\u4e3a\u5176\u4e2d\u4e00\u4e9b\u53d8\u6362\u662f\u5efa\u6a21\u53d8\u6362\uff0c\u4e00\u4e9b\u662f\u5750\u6807\u53d8\u6362\uff0c\u4f46\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u8fd9\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u5b9e\u65f6\u6f14\u793a\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u7406\u89e3\u5efa\u6a21\u53d8\u6362\u548c\u89c6\u53e3\u53d8\u6362\u4e4b\u95f4\u7684\u7b49\u4ef7\u6027\u3002\u6ed1\u5757\u63a7\u5236\u5e94\u7528\u4e8e\u56fe\u7247\u4e2d\u5bf9\u8c61\u7684\u53d8\u6362\u3002\u5728\u6f14\u793a\u7684\u5e95\u90e8\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u8f83\u5927\u7684\u89c6\u56fe\uff0c\u5176\u4e2d\u4e0a\u90e8\u56fe\u50cf\u7684\u89c6\u53e3\u88ab\u8868\u793a\u4e3a\u534a\u900f\u660e\u7684\u9ed1\u8272\u77e9\u5f62\u3002\u9605\u8bfb\u6f14\u793a\u4e2d\u7684\u5e2e\u52a9\u6587\u672c\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002</p> <p></p> <p>\u6211\u4eec\u7a0d\u540e\u4f1a\u5728\u4e66\u4e2d\u591a\u6b21\u56de\u5230\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u51e0\u4f55\u53d8\u6362\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u7684\u4e00\u4e2a\u6838\u5fc3\u6982\u5ff5\u3002\u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u770b\u770b\u4e00\u4e9b\u57fa\u672c\u7c7b\u578b\u7684\u53d8\u6362\u3002\u6211\u4eec\u5728\u4e8c\u7ef4\u56fe\u5f62\u4e2d\u5c06\u4f7f\u7528\u7684\u53d8\u6362\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>x1 = a*x + b*y + e\ny1 = c*x + d*y + f\n</code></pre> <p>\u5176\u4e2d (x,y) \u8868\u793a\u53d8\u6362\u5e94\u7528\u524d\u7684\u67d0\u4e00\u70b9\u7684\u5750\u6807\uff0c(x1,y1) \u662f\u53d8\u6362\u540e\u7684\u5750\u6807\u3002\u8fd9\u4e2a\u53d8\u6362\u7531\u516d\u4e2a\u5e38\u6570 a\u3001b\u3001c\u3001d\u3001e \u548c f \u5b9a\u4e49\u3002\u6ce8\u610f\uff0c\u8fd9\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u51fd\u6570 T\uff0c\u5176\u4e2d</p> <pre><code>T(x,y) = ( a*x + b*y + e, c*x + d*y + f )\n</code></pre> <p>\u8fd9\u79cd\u5f62\u5f0f\u7684\u53d8\u6362\u79f0\u4e3a\u4eff\u5c04\u53d8\u6362\u3002\u4eff\u5c04\u53d8\u6362\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\u5f53\u5b83\u5e94\u7528\u4e8e\u4e24\u6761\u5e73\u884c\u7ebf\u65f6\uff0c\u53d8\u6362\u540e\u7684\u7ebf\u4e5f\u5c06\u662f\u5e73\u884c\u7684\u3002\u6b64\u5916\uff0c\u5982\u679c\u5c06\u4e00\u4e2a\u4eff\u5c04\u53d8\u6362\u8ddf\u968f\u53e6\u4e00\u4e2a\u4eff\u5c04\u53d8\u6362\uff0c\u7ed3\u679c\u4ecd\u7136\u662f\u4e00\u4e2a\u4eff\u5c04\u53d8\u6362\u3002</p> <p>In a typical application, we have a rectangle made of pixels, with its natural pixel coordinates, where an image will be displayed. This rectangle will be called the viewport. We also have a set of geometric objects that are defined in a possibly different coordinate system, generally one that uses real-number coordinates rather than integers. These objects make up the \"scene\" or \"world\" that we want to view, and the coordinates that we use to define the scene are called world coordinates.</p> <p>For 2D graphics, the world lies in a plane. It's not possible to show a picture of the entire infinite plane. We need to pick some rectangular area in the plane to display in the image. Let's call that rectangular area the window, or view window. A coordinate transform is used to map the window to the viewport.</p> <p> </p> <p>In this illustration, T represents the coordinate transformation. T is a function that takes world coordinates (x,y) in some window and maps them to pixel coordinates T(x,y) in the viewport. (I've drawn the viewport and window with different sizes to emphasize that they are not the same thing, even though they show the same objects, but in fact they don't even exist in the same space, so it doesn't really make sense to compare their sizes.) In this example, as you can check,</p> <pre><code>T(x,y) = ( 800*(x+4)/8, 600*(3-y)/6 )\n</code></pre> <p>Look at the rectangle with corners at (-1,2) and (3,-1) in the window. When this rectangle is displayed in the viewport, it is displayed as the rectangle with corners T(-1,2) and T(3,-1). In this example, T(-1,2) = (300,100) and T(3,-1) = (700,400).</p> <p>We use coordinate transformations in this way because it allows us to choose a world coordinate system that is natural for describing the scene that we want to display, and it is easier to do that than to work directly with viewport coordinates. Along the same lines, suppose that we want to define some complex object, and suppose that there will be several copies of that object in our scene. Or maybe we are making an animation, and we would like the object to have different positions in different frames. We would like to choose some convenient coordinate system and use it to define the object once and for all. The coordinates that we use to define an object are called object coordinates for the object. When we want to place the object into a scene, we need to transform the object coordinates that we used to define the object into the world coordinate system that we are using for the scene. The transformation that we need is called a modeling transformation. This picture illustrates an object defined in its own object coordinate system and then mapped by three different modeling transformations into the world coordinate system:</p> <p> </p> <p>Remember that in order to view the scene, there will be another transformation that maps the object from a view window in world coordinates into the viewport.</p> <p>Now, keep in mind that the choice of a view window tells which part of the scene is shown in the image. Moving, resizing, or even rotating the window will give a different view of the scene. Suppose we make several images of the same car:</p> <p> </p> <p>What happened between making the top image in this illustration and making the image on the bottom left? In fact, there are two possibilities: Either the car was moved to the right, or the view window that defines the scene was moved to the left. This is important, so be sure you understand it. (Try it with your cell phone camera. Aim it at some objects, take a step to the left, and notice what happens to the objects in the camera's viewfinder: They move to the right in the picture!) Similarly, what happens between the top picture and the middle picture on the bottom? Either the car rotated counterclockwise, or the window was rotated clockwise. (Again, try it with a camera\u2014you might want to take two actual photos so that you can compare them.) Finally, the change from the top picture to the one on the bottom right could happen because the car got smaller or because the window got larger. (On your camera, a bigger window means that you are seeing a larger field of view, and you can get that by applying a zoom to the camera or by backing up away from the objects that you are viewing.)</p> <p>There is an important general idea here. When we modify the view window, we change the coordinate system that is applied to the viewport. But in fact, this is the same as leaving that coordinate system in place and moving the objects in the scene instead. Except that to get the same effect in the final image, you have to apply the opposite transformation to the objects (for example, moving the window to the left is equivalent to moving the objects to the right). So, there is no essential distinction between transforming the window and transforming the object. Mathematically, you specify a geometric primitive by giving coordinates in some natural coordinate system, and the computer applies a sequence of transformations to those coordinates to produce, in the end, the coordinates that are used to actually draw the primitive in the image. You will think of some of those transformations as modeling transforms and some as coordinate transforms, but to the computer, it's all the same.</p> <p>Here is a live demo that can help you to understand the equivalence between modeling transformations and viewport transformations. The sliders control transformations that are applied to the objects in the picture. In the lower section of the demo, you see a larger view in which the viewport for the upper image is represented as a translucent black rectangle. Read the help text in the demo for more information.</p> <p></p> <p>We will return to this idea several times later in the book, but in any case, you can see that geometric transforms are a central concept in computer graphics. Let's look at some basic types of transformation in more detail. The transforms we will use in 2D graphics can be written in the form</p> <pre><code>x1 = a*x + b*y + e\ny1 = c*x + d*y + f\n</code></pre> <p>where (x,y) represents the coordinates of some point before the transformation is applied, and (x1,y1) are the transformed coordinates. The transform is defined by the six constants a, b, c, d, e, and f. Note that this can be written as a function T, where</p> <pre><code>T(x,y) = ( a*x + b*y + e, c*x + d*y + f )\n</code></pre> <p>A transformation of this form is called an affine transform. An affine transform has the property that, when it is applied to two parallel lines, the transformed lines will also be parallel. Also, if you follow one affine transform by another affine transform, the result is again an affine transform.</p>"},{"location":"cn/c2/s3/#232-\u5e73\u79fb","title":"2.3.2  \u5e73\u79fb","text":"<p>Translation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5e73\u79fb\u53d8\u6362\u7b80\u5355\u5730\u5c06\u6bcf\u4e2a\u70b9\u6c34\u5e73\u79fb\u52a8\u4e00\u5b9a\u91cf\uff0c\u5782\u76f4\u79fb\u52a8\u4e00\u5b9a\u91cf\u3002\u5982\u679c (x,y) \u662f\u539f\u59cb\u70b9\uff0c(x1,y1) \u662f\u53d8\u6362\u540e\u7684\u70b9\uff0c\u90a3\u4e48\u5e73\u79fb\u7684\u516c\u5f0f\u4e3a</p> <pre><code>x1 = x + e\ny1 = y + f\n</code></pre> <p>\u5176\u4e2d e \u662f\u70b9\u6c34\u5e73\u79fb\u52a8\u7684\u5355\u4f4d\u6570\uff0cf \u662f\u5782\u76f4\u79fb\u52a8\u7684\u5355\u4f4d\u6570\u3002\uff08\u56e0\u6b64\uff0c\u5bf9\u4e8e\u5e73\u79fb\uff0c\u4eff\u5c04\u53d8\u6362\u7684\u4e00\u822c\u516c\u5f0f\u4e2d a = d = 1\uff0cb = c = 0\u3002\uff09\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u5f62\u7cfb\u7edf\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u7c7b\u4f3c\u4e8e</p> <pre><code>translate( e, f )\n</code></pre> <p>\u7684\u51fd\u6570\u6765\u5e94\u7528\u5e73\u79fb\u53d8\u6362\u3002\u5e73\u79fb\u5c06\u5e94\u7528\u4e8e\u5728\u7ed9\u51fa\u547d\u4ee4\u540e\u7ed8\u5236\u7684\u6240\u6709\u5185\u5bb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6240\u6709\u540e\u7eed\u7684\u7ed8\u56fe\u64cd\u4f5c\uff0ce \u5c06\u88ab\u6dfb\u52a0\u5230 x \u5750\u6807\uff0cf \u5c06\u88ab\u6dfb\u52a0\u5230 y \u5750\u6807\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002\u5047\u8bbe\u4f60\u4f7f\u7528\u4ee5 (0,0) \u4e3a\u4e2d\u5fc3\u7684\u5750\u6807\u7ed8\u5236\u4e00\u4e2a\u201cF\u201d\u3002\u5982\u679c\u5728\u7ed8\u5236\u201cF\u201d\u4e4b\u524d\u8bf4 translate(4,2)\uff0c\u90a3\u4e48\u5728\u5b9e\u9645\u4f7f\u7528\u5750\u6807\u4e4b\u524d\uff0c\u201cF\u201d\u7684\u6bcf\u4e2a\u70b9\u90fd\u5c06\u6c34\u5e73\u79fb\u52a8 4 \u4e2a\u5355\u4f4d\uff0c\u5782\u76f4\u79fb\u52a8 2 \u4e2a\u5355\u4f4d\uff0c\u56e0\u6b64\u5728\u5e73\u79fb\u4e4b\u540e\uff0c\u201cF\u201d\u5c06\u4f4d\u4e8e (4,2)\uff1a</p> <p> </p> <p>\u8fd9\u5f20\u56fe\u7247\u4e2d\u6d45\u7070\u8272\u7684\u201cF\u201d\u663e\u793a\u4e86\u5728\u6ca1\u6709\u5e73\u79fb\u7684\u60c5\u51b5\u4e0b\u4f1a\u7ed8\u5236\u4ec0\u4e48\uff1b\u6df1\u7ea2\u8272\u7684\u201cF\u201d\u663e\u793a\u4e86\u5e94\u7528\u4e86\u5e73\u79fb (4,2) \u540e\u7ed8\u5236\u7684\u76f8\u540c\u7684\u201cF\u201d\u3002\u9876\u90e8\u7684\u7bad\u5934\u663e\u793a\u4e86\u201cF\u201d\u7684\u5de6\u4e0a\u89d2\u5df2\u5411\u53f3\u79fb\u52a8 4 \u4e2a\u5355\u4f4d\uff0c\u5411\u4e0a\u79fb\u52a8 2 \u4e2a\u5355\u4f4d\u3002\u5728\u201cF\u201d\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u53d7\u5230\u76f8\u540c\u7684\u4f4d\u79fb\u5f71\u54cd\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u6211\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u5047\u8bbe y \u5750\u6807\u4ece\u4e0b\u5230\u4e0a\u9012\u589e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cy \u8f74\u671d\u4e0a\u3002</p> <p>\u8bb0\u4f4f\uff0c\u5f53\u4f60\u7ed9\u51fa translate(e,f) \u547d\u4ee4\u65f6\uff0c\u8fd9\u4e2a\u5e73\u79fb\u5c06\u5e94\u7528\u4e8e\u4e4b\u540e\u6240\u6709\u7684\u7ed8\u56fe\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e0b\u4e00\u4e2a\u4f60\u7ed8\u5236\u7684\u5f62\u72b6\u3002\u5982\u679c\u4f60\u5728\u5e73\u79fb\u540e\u5e94\u7528\u53e6\u4e00\u4e2a\u53d8\u6362\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u6362\u4e0d\u4f1a\u53d6\u4ee3\u5e73\u79fb\uff0c\u800c\u662f\u4e0e\u5e73\u79fb\u7ed3\u5408\u8d77\u6765\uff0c\u4ece\u800c\u540e\u7eed\u7684\u7ed8\u56fe\u5c06\u53d7\u5230\u7ec4\u5408\u53d8\u6362\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5c06 translate(4,2) \u4e0e translate(-1,5) \u7ec4\u5408\uff0c\u7ed3\u679c\u4e0e\u5355\u4e2a\u5e73\u79fb translate(3,7) \u76f8\u540c\u3002\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u89c2\u70b9\uff0c\u7a0d\u540e\u5c06\u4f1a\u6709\u66f4\u591a\u5185\u5bb9\u4ecb\u7ecd\u3002</p> <p>\u8fd8\u8981\u8bb0\u4f4f\uff0c\u4f60\u4e0d\u9700\u8981\u81ea\u5df1\u8ba1\u7b97\u5750\u6807\u53d8\u6362\u3002\u4f60\u53ea\u9700\u8981\u4e3a\u5bf9\u8c61\u6307\u5b9a\u539f\u59cb\u5750\u6807\uff08\u5373\u5bf9\u8c61\u5750\u6807\uff09\uff0c\u5e76\u6307\u5b9a\u8981\u5e94\u7528\u7684\u53d8\u6362\u6216\u53d8\u6362\u3002\u8ba1\u7b97\u673a\u4f1a\u8d1f\u8d23\u5c06\u53d8\u6362\u5e94\u7528\u4e8e\u5750\u6807\u3002\u4f60\u751a\u81f3\u4e0d\u9700\u8981\u77e5\u9053\u7528\u4e8e\u53d8\u6362\u7684\u65b9\u7a0b\u5f0f\uff1b\u4f60\u53ea\u9700\u8981\u7406\u89e3\u5b83\u5728\u51e0\u4f55\u4e0a\u505a\u4e86\u4ec0\u4e48\u3002</p> <p>A translation transform simply moves every point by a certain amount horizontally and a certain amount vertically. If (x,y) is the original point and (x1,y1) is the transformed point, then the formula for a translation is</p> <pre><code>x1 = x + e\ny1 = y + f\n\u2035\u2035\u2035\n\nwhere e is the number of units by which the point is moved horizontally and f is the amount by which it is moved vertically. (Thus for a translation, a = d = 1, and b = c = 0 in the general formula for an affine transform.) A 2D graphics system will typically have a function such as\n\n```text\ntranslate( e, f )\n</code></pre> <p>to apply a translate transformation. The translation would apply to everything that is drawn after the command is given. That is, for all subsequent drawing operations, e would be added to the x-coordinate and f would be added to the y-coordinate. Let's look at an example. Suppose that you draw an \"F\" using coordinates in which the \"F\" is centered at (0,0). If you say translate(4,2) before drawing the \"F\", then every point of the \"F\" will be moved horizontally by 4 units and vertically by 2 units before the coordinates are actually used, so that after the translation, the \"F\" will be centered at (4,2):</p> <p> </p> <p>The light gray \"F\" in this picture shows what would be drawn without the translation; the dark red \"F\" shows the same \"F\" drawn after applying a translation by (4,2). The top arrow shows that the upper left corner of the \"F\" has been moved over 4 units and up 2 units. Every point in the \"F\" is subjected to the same displacement. Note that in my examples, I am assuming that the y-coordinate increases from bottom to top. That is, the y-axis points up.</p> <p>Remember that when you give the command translate(e,f), the translation applies to all the drawing that you do after that, not just to the next shape that you draw. If you apply another transformation after the translation, the second transform will not replace the translation. It will be combined with the translation, so that subsequent drawing will be affected by the combined transformation. For example, if you combine translate(4,2) with translate(-1,5), the result is the same as a single translation, translate(3,7). This is an important point, and there will be a lot more to say about it later.</p> <p>Also remember that you don't compute coordinate transformations yourself. You just specify the original coordinates for the object (that is, the object coordinates), and you specify the transform or transforms that are to be applied. The computer takes care of applying the transformation to the coordinates. You don't even need to know the equations that are used for the transformation; you just need to understand what it does geometrically.</p>"},{"location":"cn/c2/s3/#233-\u65cb\u8f6c","title":"2.3.3  \u65cb\u8f6c","text":"<p>Rotation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6211\u4eec\u8fd9\u91cc\u7684\u60c5\u51b5\u4e0b\uff0c\u65cb\u8f6c\u53d8\u6362\u4f1a\u56f4\u7ed5\u539f\u70b9 (0,0) \u65cb\u8f6c\u6bcf\u4e2a\u70b9\u3002\u6bcf\u4e2a\u70b9\u90fd\u88ab\u65cb\u8f6c\u76f8\u540c\u7684\u89d2\u5ea6\uff0c\u79f0\u4e3a\u65cb\u8f6c\u89d2\u5ea6\u3002\u4e3a\u6b64\uff0c\u89d2\u5ea6\u53ef\u4ee5\u7528\u5ea6\u6216\u5f27\u5ea6\u6765\u5ea6\u91cf\u3002\uff08\u6211\u4eec\u7a0d\u540e\u5c06\u5728\u672c\u7ae0\u4e2d\u67e5\u770b\u7684 Java \u548c JavaScript \u7684 2D \u56fe\u5f62 API \u4f7f\u7528\u5f27\u5ea6\uff0c\u4f46 OpenGL \u548c SVG \u4f7f\u7528\u5ea6\u3002\uff09\u5177\u6709\u6b63\u89d2\u5ea6\u7684\u65cb\u8f6c\u4f1a\u5c06\u5bf9\u8c61\u987a\u65f6\u9488\u65cb\u8f6c\u4ece\u6b63 x \u8f74\u6307\u5411\u6b63 y \u8f74\u7684\u65b9\u5411\u3002\u5728\u8fd9\u91cc\u7684\u793a\u4f8b\u4e2d\uff0c\u5750\u6807\u7cfb\u4e2d y \u8f74\u5411\u4e0a\uff0c\u8fd9\u662f\u9006\u65f6\u9488\u65cb\u8f6c\uff0c\u4f46\u5728\u901a\u5e38\u7684\u50cf\u7d20\u5750\u6807\u4e2d\uff0cy \u8f74\u5411\u4e0b\u800c\u4e0d\u662f\u5411\u4e0a\uff0c\u6240\u4ee5\u8fd9\u662f\u987a\u65f6\u9488\u65cb\u8f6c\u3002\u867d\u7136\u4e0d\u660e\u663e\uff0c\u4f46\u662f\u5f53\u5bf9\u70b9 (x,y) \u5e94\u7528\u4ee5 r \u5f27\u5ea6\u4e3a\u89d2\u5ea6\u7684\u7ed5\u539f\u70b9\u65cb\u8f6c\u65f6\uff0c\u7ed3\u679c\u70b9 (x1,y1) \u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>x1 = cos(r) * x - sin(r) * y\ny1 = sin(r) * x + cos(r) * y\n</code></pre> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4eff\u5c04\u53d8\u6362\u7684\u4e00\u822c\u516c\u5f0f\u4e2d\uff0ce = f = 0\uff0ca = d = cos(r)\uff0cb = -sin(r)\uff0cc = sin(r)\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u56fe\u793a\uff0c\u8bf4\u660e\u4e86\u7ed5\u539f\u70b9\u65cb\u8f6c\u8d1f 135 \u5ea6\u7684\u89d2\u5ea6\uff1a</p> <p> </p> <p>\u518d\u6b21\uff0c\u6d45\u7070\u8272\u7684\u201cF\u201d\u662f\u539f\u59cb\u5f62\u72b6\uff0c\u6df1\u7ea2\u8272\u7684\u201cF\u201d\u662f\u5e94\u7528\u65cb\u8f6c\u540e\u7684\u5f62\u72b6\u3002\u7bad\u5934\u663e\u793a\u4e86\u539f\u59cb\u201cF\u201d\u7684\u5de6\u4e0a\u89d2\u662f\u5982\u4f55\u79fb\u52a8\u7684\u3002</p> <p>\u4e00\u4e2a 2D \u56fe\u5f62 API \u901a\u5e38\u4f1a\u6709\u4e00\u4e2a rotate(r) \u547d\u4ee4\u6765\u5e94\u7528\u65cb\u8f6c\u3002\u8fd9\u4e2a\u547d\u4ee4\u5728\u7ed8\u5236\u5e94\u7528\u65cb\u8f6c\u7684\u5bf9\u8c61\u4e4b\u524d\u4f7f\u7528\u3002</p> <p>A rotation transform, for our purposes here, rotates each point about the origin, (0,0). Every point is rotated through the same angle, called the angle of rotation. For this purpose, angles can be measured either in degrees or in radians. (The 2D graphics APIs for Java and JavaScript that we will look at later in this chapter use radians, but OpenGL and SVG use degrees.) A rotation with a positive angle rotates objects in the direction from the positive x-axis towards the positive y-axis. This is counterclockwise in a coordinate system where the y-axis points up, as it does in my examples here, but it is clockwise in the usual pixel coordinates, where the y-axis points down rather than up. Although it is not obvious, when rotation through an angle of r radians about the origin is applied to the point (x,y), then the resulting point (x1,y1) is given by</p> <p>```text x1 = cos(r) * x - sin(r) * y y1 = sin(r) * x + cos(r) * y \u2035\u2035\u2035</p> <p>That is, in the general formula for an affine transform, e = f = 0, a = d = cos(r), b = -sin(r), and c = sin(r). Here is a picture that illustrates a rotation about the origin by the angle negative 135 degrees:</p> <p> </p> <p>Again, the light gray \"F\" is the original shape, and the dark red \"F\" is the shape that results if you apply the rotation. The arrow shows how the upper left corner of the original \"F\" has been moved.</p> <p>A 2D graphics API would typically have a command rotate(r) to apply a rotation. The command is used before drawing the objects to which the rotation applies.</p>"},{"location":"cn/c2/s3/#234-\u7ec4\u5408\u53d8\u6362","title":"2.3.4  \u7ec4\u5408\u53d8\u6362","text":"<p>Combining Transformations</p> \u4e2d\u6587\u82f1\u6587 <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5f53\u4f60\u7ec4\u5408\u4e24\u4e2a\u53d8\u6362\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u5047\u8bbe\u5728\u7ed8\u5236\u67d0\u4e2a\u5bf9\u8c61\u4e4b\u524d\uff0c\u4f60\u8bf4\uff1a</p> <pre><code>translate(4,0)\nrotate(90)\n</code></pre> <p>\u5047\u8bbe\u89d2\u5ea6\u662f\u4ee5\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\u7684\u3002\u7136\u540e\u5e73\u79fb\u5c06\u5e94\u7528\u4e8e\u6240\u6709\u540e\u7eed\u7684\u7ed8\u5236\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u65cb\u8f6c\u547d\u4ee4\uff0c\u4f60\u5728\u5e73\u79fb\u4e4b\u540e\u7ed8\u5236\u7684\u4e1c\u897f\u662f\u65cb\u8f6c\u7684\u5bf9\u8c61\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5e73\u79fb\u5e94\u7528\u4e8e\u5df2\u7ecf\u65cb\u8f6c\u8fc7\u7684\u5bf9\u8c61\u3002\u4e0b\u56fe\u7684\u5de6\u4fa7\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6d45\u7070\u8272\u7684\u201cF\u201d\u662f\u539f\u59cb\u5f62\u72b6\uff0c\u7ea2\u8272\u7684\u201cF\u201d\u663e\u793a\u4e86\u5c06\u8fd9\u4e24\u4e2a\u53d8\u6362\u5e94\u7528\u4e8e\u539f\u59cb\u5f62\u72b6\u7684\u7ed3\u679c\u3002\u539f\u59cb\u201cF\u201d\u9996\u5148\u88ab\u65cb\u8f6c\u4e8690\u5ea6\u89d2\u5ea6\uff0c\u7136\u540e\u5411\u53f3\u79fb\u52a8\u4e864\u4e2a\u5355\u4f4d\u3002</p> <p> </p> <p>\u8bf7\u6ce8\u610f\uff0c\u53d8\u6362\u662f\u4ee5\u4e0e\u4ee3\u7801\u4e2d\u7ed9\u51fa\u7684\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\uff08\u56e0\u4e3a\u4ee3\u7801\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u6362\u662f\u5e94\u7528\u4e8e\u5df2\u7ecf\u53d7\u5230\u7b2c\u4e8c\u4e2a\u53d8\u6362\u5f71\u54cd\u7684\u5bf9\u8c61\uff09\u3002\u8fd8\u8bf7\u6ce8\u610f\uff0c\u5e94\u7528\u53d8\u6362\u7684\u987a\u5e8f\u5f88\u91cd\u8981\u3002\u5982\u679c\u6211\u4eec\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u98a0\u5012\u4e24\u4e2a\u53d8\u6362\u7684\u5e94\u7528\u987a\u5e8f\uff0c\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a</p> <pre><code>rotate(90)\ntranslate(4,0)\n</code></pre> <p>\u90a3\u4e48\u7ed3\u679c\u5c31\u5982\u4e0a\u56fe\u53f3\u4fa7\u6240\u793a\u3002\u5728\u90a3\u5f20\u56fe\u7247\u4e2d\uff0c\u539f\u59cb\u201cF\u201d\u9996\u5148\u5411\u53f3\u79fb\u52a84\u4e2a\u5355\u4f4d\uff0c\u7136\u540e\u901a\u8fc7\u539f\u70b9\u65cb\u8f6c90\u5ea6\u89d2\u5ea6\uff0c\u4ee5\u5f97\u5230\u5b9e\u9645\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u7684\u5f62\u72b6\u3002</p> <p>\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5e94\u7528\u591a\u4e2a\u53d8\u6362\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u56f4\u7ed5\u70b9 (p,q) \u800c\u4e0d\u662f\u56f4\u7ed5\u70b9 (0,0) \u5c06\u4e00\u4e2a\u5f62\u72b6\u65cb\u8f6c r \u89d2\u5ea6\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u5c06\u70b9 (p,q) \u79fb\u52a8\u5230\u539f\u70b9\uff0c\u4f7f\u7528 translate(-p,-q) \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 rotate(r) \u8fdb\u884c\u56f4\u7ed5\u539f\u70b9\u7684\u6807\u51c6\u65cb\u8f6c\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528 translate(p,q) \u5c06\u539f\u70b9\u79fb\u56de\u70b9 (p,q)\u3002\u8bb0\u4f4f\u6211\u4eec\u5fc5\u987b\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u7f16\u5199\u53d8\u6362\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u9700\u8981\u5728\u7ed8\u5236\u5f62\u72b6\u4e4b\u524d\u8bf4\uff1a</p> <pre><code>translate(p,q)\nrotate(r)\ntranslate(-p,-q)\n</code></pre> <p>\uff08\u4e8b\u5b9e\u4e0a\uff0c\u4e00\u4e9b\u56fe\u5f62 API \u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u5355\u4e2a\u547d\u4ee4\u6765\u5b9e\u73b0\u8fd9\u4e2a\u53d8\u6362\uff0c\u4f8b\u5982 rotate(r,p,q)\u3002\u8fd9\u5c06\u5728\u70b9 (p,q) \u5904\u56f4\u7ed5\u89d2\u5ea6 r \u8fdb\u884c\u65cb\u8f6c\u3002\uff09</p> <p>We are now in a position to see what can happen when you combine two transformations. Suppose that before drawing some object, you say</p> <pre><code>translate(4,0)\nrotate(90)\n\u2035\u2035\u2035\n\nAssume that angles are measured in degrees. The translation will then apply to all subsequent drawing. But, because of the rotation command, the things that you draw after the translation are rotated objects. That is, the translation applies to objects that have already been rotated. An example is shown on the left in the illustration below, where the light gray \"F\" is the original shape, and red \"F\" shows the result of applying the two transforms to the original. The original \"F\" was first rotated through a 90 degree angle, and then moved 4 units to the right.\n\n&lt;figure markdown=\"span\"&gt;\n    ![pixel-coordinates](../../en/c2/rotate-and-translate-2d.png)\n&lt;/figure&gt;\n\nNote that transforms are applied to objects in the reverse of the order in which they are given in the code (because the first transform in the code is applied to an object that has already been affected by the second transform). And note that the order in which the transforms are applied is important. If we reverse the order in which the two transforms are applied in this example, by saying\n\n```text\nrotate(90)\ntranslate(4,0)\n\u2035\u2035\u2035\n\nthen the result is as shown on the right in the above illustration. In that picture, the original \"F\" is first moved 4 units to the right and the resulting shape is then rotated through an angle of 90 degrees about the origin to give the shape that actually appears on the screen.\n\nFor another example of applying several transformations, suppose that we want to rotate a shape through an angle r about a point (p,q) instead of about the point (0,0). We can do this by first moving the point (p,q) to the origin, using translate(-p,-q). Then we can do a standard rotation about the origin by calling rotate(r). Finally, we can move the origin back to the point (p,q) by applying translate(p,q). Keeping in mind that we have to write the code for the transformations in the reverse order, we need to say\n\n```text\ntranslate(p,q)\nrotate(r)\ntranslate(-p,-q)\n</code></pre> <p>before drawing the shape. (In fact, some graphics APIs let us accomplish this transform with a single command such as rotate(r,p,q). This would apply a rotation through the angle r about the point (p,q).)</p>"},{"location":"cn/c2/s3/#235-\u7f29\u653e","title":"2.3.5  \u7f29\u653e","text":"<p>Scaling</p> \u4e2d\u6587\u82f1\u6587 <p>\u7f29\u653e\u53d8\u6362\u53ef\u7528\u4e8e\u4f7f\u5bf9\u8c61\u53d8\u5927\u6216\u53d8\u5c0f\u3002\u5728\u6570\u5b66\u4e0a\uff0c\u7f29\u653e\u53d8\u6362\u7b80\u5355\u5730\u5c06\u6bcf\u4e2a x \u5750\u6807\u4e58\u4ee5\u4e00\u4e2a\u7ed9\u5b9a\u7684\u91cf\uff0c\u6bcf\u4e2a y \u5750\u6807\u4e58\u4ee5\u4e00\u4e2a\u7ed9\u5b9a\u7684\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u70b9 (x,y) \u5728 x \u65b9\u5411\u4e0a\u6309\u6bd4\u4f8b\u56e0\u5b50 a \u7f29\u653e\uff0c\u5728 y \u65b9\u5411\u4e0a\u6309\u6bd4\u4f8b\u56e0\u5b50 d \u7f29\u653e\uff0c\u90a3\u4e48\u7ed3\u679c\u70b9 (x1,y1) \u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>x1 = a * x\ny1 = d * y\n</code></pre> <p>\u5982\u679c\u5c06\u6b64\u53d8\u6362\u5e94\u7528\u4e8e\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u7684\u5f62\u72b6\uff0c\u5219\u4f1a\u5c06\u5f62\u72b6\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u62c9\u4f38 a \u500d\uff0c\u5782\u76f4\u65b9\u5411\u4e0a\u62c9\u4f38 d \u500d\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u539f\u59cb\u7684\u6d45\u7070\u8272\u201cF\u201d\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u6309 3 \u500d\uff0c\u5782\u76f4\u65b9\u5411\u4e0a\u6309 2 \u500d\u8fdb\u884c\u7f29\u653e\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u6df1\u7ea2\u8272\u201cF\u201d\uff1a</p> <p> </p> <p>\u5e38\u89c1\u60c5\u51b5\u662f\u6c34\u5e73\u548c\u5782\u76f4\u7f29\u653e\u56e0\u5b50\u76f8\u540c\uff0c\u79f0\u4e3a\u5747\u5300\u7f29\u653e(uniform scaling)\u3002\u5747\u5300\u7f29\u653e\u62c9\u4f38\u6216\u6536\u7f29\u4e00\u4e2a\u5f62\u72b6\u800c\u4e0d\u4f1a\u626d\u66f2\u5b83\u3002</p> <p>\u5f53\u7f29\u653e\u5e94\u7528\u4e8e\u4e0d\u4ee5 (0,0) \u4e3a\u4e2d\u5fc3\u7684\u5f62\u72b6\u65f6\uff0c\u9664\u4e86\u88ab\u62c9\u4f38\u6216\u6536\u7f29\u4e4b\u5916\uff0c\u5f62\u72b6\u8fd8\u5c06\u8fdc\u79bb\u6216\u63a5\u8fd1 0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7f29\u653e\u64cd\u4f5c\u7684\u771f\u5b9e\u63cf\u8ff0\u662f\u5c06\u6bcf\u4e2a\u70b9\u8fdc\u79bb (0,0) \u6216\u5c06\u6bcf\u4e2a\u70b9\u62c9\u5411 (0,0)\u3002\u5982\u679c\u60f3\u8981\u56f4\u7ed5\u4e0d\u540c\u4e8e (0,0) \u7684\u70b9\u8fdb\u884c\u7f29\u653e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0e\u65cb\u8f6c\u60c5\u51b5\u7c7b\u4f3c\u7684\u4e09\u4e2a\u53d8\u6362\u7684\u5e8f\u5217\u3002</p> <p>\u4e00\u4e2a 2D \u56fe\u5f62 API \u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u540d\u4e3a scale(a,d) \u7684\u51fd\u6570\u6765\u5e94\u7528\u7f29\u653e\u53d8\u6362\u3002\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u8be5\u53d8\u6362\u5e94\u7528\u4e8e\u6240\u6709\u540e\u7eed\u7ed8\u56fe\u64cd\u4f5c\u4e2d\u7684\u6240\u6709 x \u548c y \u5750\u6807\u3002\u8bf7\u6ce8\u610f\uff0c\u5141\u8bb8\u4f7f\u7528\u8d1f\u7f29\u653e\u56e0\u5b50\uff0c\u5e76\u4e14\u4f1a\u5bfc\u81f4\u53cd\u5c04\u5f62\u72b6\u4ee5\u53ca\u53ef\u80fd\u7684\u62c9\u4f38\u6216\u6536\u7f29\u3002\u4f8b\u5982\uff0cscale(1,-1) \u5c06\u4f7f\u5bf9\u8c61\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u53cd\u5c04\uff0c\u901a\u8fc7 x \u8f74\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u6bcf\u4e2a\u4eff\u5c04\u53d8\u6362\u90fd\u53ef\u4ee5\u901a\u8fc7\u7ec4\u5408\u5e73\u79fb\u3001\u7ed5\u539f\u70b9\u65cb\u8f6c\u548c\u539f\u70b9\u7f29\u653e\u6765\u521b\u5efa\u3002\u6211\u4e0d\u4f1a\u8bd5\u56fe\u8bc1\u660e\u8fd9\u4e00\u70b9\uff0c\u4f46\u4e0b\u9762\u662f\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u5e73\u79fb\u3001\u65cb\u8f6c\u548c\u7f29\u653e\uff0c\u5e76\u5c1d\u8bd5\u7ec4\u5408\u5b83\u4eec\u6240\u4ea7\u751f\u7684\u53d8\u6362\u3002</p> <p></p> <p>\u6211\u8fd8\u6ce8\u610f\u5230\uff0c\u7531\u5e73\u79fb\u548c\u7ed5\u539f\u70b9\u65cb\u8f6c\u6784\u6210\u7684\u53d8\u6362\uff0c\u6ca1\u6709\u7f29\u653e\uff0c\u5c06\u4fdd\u6301\u88ab\u5e94\u7528\u5bf9\u8c61\u7684\u957f\u5ea6\u548c\u89d2\u5ea6\u3002\u5b83\u4e5f\u4f1a\u4fdd\u6301\u77e9\u5f62\u7684\u7eb5\u6a2a\u6bd4\u3002\u5177\u6709\u8fd9\u79cd\u5c5e\u6027\u7684\u53d8\u6362\u88ab\u79f0\u4e3a\u201c\u6b27\u51e0\u91cc\u5f97\u201d\u3002\u5982\u679c\u8fd8\u5141\u8bb8\u5747\u5300\u7f29\u653e\uff0c\u5219\u7ed3\u679c\u53d8\u6362\u5c06\u4fdd\u6301\u89d2\u5ea6\u548c\u7eb5\u6a2a\u6bd4\uff0c\u4f46\u4e0d\u4f1a\u4fdd\u6301\u957f\u5ea6\u3002</p> <p>A scaling transform can be used to make objects bigger or smaller. Mathematically, a scaling transform simply multiplies each x-coordinate by a given amount and each y-coordinate by a given amount. That is, if a point (x,y) is scaled by a factor of a in the x direction and by a factor of d in the y direction, then the resulting point (x1,y1) is given by</p> <pre><code>x1 = a * x\ny1 = d * y\n</code></pre> <p>If you apply this transform to a shape that is centered at the origin, it will stretch the shape by a factor of a horizontally and d vertically. Here is an example, in which the original light gray \"F\" is scaled by a factor of 3 horizontally and 2 vertically to give the final dark red \"F\":</p> <p> </p> <p>The common case where the horizontal and vertical scaling factors are the same is called uniform scaling. Uniform scaling stretches or shrinks a shape without distorting it.</p> <p>When scaling is applied to a shape that is not centered at (0,0), then in addition to being stretched or shrunk, the shape will be moved away from 0 or towards 0. In fact, the true description of a scaling operation is that it pushes every point away from (0,0) or pulls every point towards (0,0). If you want to scale about a point other than (0,0), you can use a sequence of three transforms, similar to what was done in the case of rotation.</p> <p>A 2D graphics API can provide a function scale(a,d) for applying scaling transformations. As usual, the transform applies to all x and y coordinates in subsequent drawing operations. Note that negative scaling factors are allowed and will result in reflecting the shape as well as possibly stretching or shrinking it. For example, scale(1,-1) will reflect objects vertically, through the x-axis.</p> <p>It is a fact that every affine transform can be created by combining translations, rotations about the origin, and scalings about the origin. I won't try to prove that, but here is an interactive demo that will let you experiment with translations, rotations, and scalings, and with the transformations that can be made by combining them.</p> <p></p> <p>I also note that a transform that is made from translations and rotations, with no scaling, will preserve length and angles in the objects to which it is applied. It will also preserve aspect ratios of rectangles. Transforms with this property are called \"Euclidean.\" If you also allow uniform scaling, the resulting transformation will preserve angles and aspect ratio, but not lengths.</p>"},{"location":"cn/c2/s3/#236-\u526a\u5207","title":"2.3.6  \u526a\u5207","text":"<p>Shear</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5c06\u518d\u770b\u4e00\u4e2a\u57fa\u672c\u53d8\u6362\u7c7b\u578b\uff0c\u526a\u5207\u53d8\u6362\u3002\u5c3d\u7ba1\u5fc5\u8981\u65f6\u53ef\u4ee5\u901a\u8fc7\u65cb\u8f6c\u548c\u7f29\u653e\u6765\u6784\u5efa\u526a\u5207\uff0c\u4f46\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u5e76\u4e0d\u662f\u5f88\u660e\u663e\u3002\u526a\u5207\u4f1a\u201c\u503e\u659c\u201d\u5bf9\u8c61\u3002\u6c34\u5e73\u526a\u5207\u4f1a\u5c06\u4e8b\u7269\u5411\u5de6\uff08\u8d1f\u526a\u5207\uff09\u6216\u5411\u53f3\uff08\u6b63\u526a\u5207\uff09\u503e\u659c\u3002\u5782\u76f4\u526a\u5207\u4f1a\u4f7f\u5b83\u4eec\u5411\u4e0a\u6216\u5411\u4e0b\u503e\u659c\u3002\u4ee5\u4e0b\u662f\u6c34\u5e73\u526a\u5207\u7684\u793a\u4f8b\uff1a</p> <p> </p> <p>\u6c34\u5e73\u526a\u5207\u4e0d\u4f1a\u79fb\u52a8 x \u8f74\u3002\u6bcf\u6761\u6c34\u5e73\u7ebf\u90fd\u4f1a\u6839\u636e\u8be5\u7ebf\u4e0a\u7684 y \u503c\u79fb\u52a8\u5230\u5de6\u4fa7\u6216\u53f3\u4fa7\u3002\u5f53\u5c06\u6c34\u5e73\u526a\u5207\u5e94\u7528\u4e8e\u70b9 (x,y) \u65f6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u70b9 (x1,y1) \u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>x1 = x + b * y\ny1 = y\n</code></pre> <p>\u5176\u4e2d b \u662f\u67d0\u4e2a\u5e38\u6570\u526a\u5207\u56e0\u5b50\u3002\u7c7b\u4f3c\u5730\uff0c\u5177\u6709\u526a\u5207\u56e0\u5b50 c \u7684\u5782\u76f4\u526a\u5207\u7531\u4ee5\u4e0b\u65b9\u7a0b\u7ed9\u51fa\uff1a</p> <pre><code>x1 = x\ny1 = c * x + y\n</code></pre> <p>\u526a\u5207\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u503e\u659c\u201d\uff0c\u4f46\u503e\u659c\u901a\u5e38\u662f\u6307\u4e00\u4e2a\u89d2\u5ea6\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u526a\u5207\u56e0\u5b50\u3002</p> <p>We will look at one more type of basic transform, a shearing transform. Although shears can in fact be built up out of rotations and scalings if necessary, it is not really obvious how to do so. A shear will \"tilt\" objects. A horizontal shear will tilt things towards the left (for negative shear) or right (for positive shear). A vertical shear tilts them up or down. Here is an example of horizontal shear:</p> <p> </p> <p>A horizontal shear does not move the x-axis. Every other horizontal line is moved to the left or to the right by an amount that is proportional to the y-value along that line. When a horizontal shear is applied to a point (x,y), the resulting point (x1,y1) is given by</p> <pre><code>x1 = x + b * y\ny1 = y\n</code></pre> <p>for some constant shearing factor b. Similarly, a vertical shear with shearing factor c is given by the equations</p> <pre><code>x1 = x\ny1 = c * x + y\n</code></pre> <p>Shear is occasionally called \"skew,\" but skew is usually specified as an angle rather than as a shear factor.</p>"},{"location":"cn/c2/s3/#237-\u89c6\u7a97\u5230\u89c6\u53e3","title":"2.3.7  \u89c6\u7a97\u5230\u89c6\u53e3","text":"<p>Window-to-Viewport</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u56fe\u50cf\u663e\u793a\u4e4b\u524d\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u6700\u540e\u4e00\u4e2a\u53d8\u6362\u662f\u7a97\u53e3\u5230\u89c6\u53e3\u53d8\u6362\uff0c\u5b83\u5c06\u5305\u542b\u573a\u666f\u7684 xy \u5e73\u9762\u4e2d\u7684\u77e9\u5f62\u89c6\u7a97\u6620\u5c04\u5230\u56fe\u50cf\u5c06\u663e\u793a\u7684\u50cf\u7d20\u77e9\u5f62\u7f51\u683c\u4e2d\u3002\u6211\u5728\u8fd9\u91cc\u5047\u8bbe\u89c6\u7a97\u6ca1\u6709\u65cb\u8f6c\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u7684\u8fb9\u662f\u5e73\u884c\u4e8e x \u548c y \u8f74\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a97\u53e3\u5230\u89c6\u53e3\u53d8\u6362\u53ef\u4ee5\u7528\u5e73\u79fb\u548c\u7f29\u653e\u53d8\u6362\u6765\u8868\u793a\u3002\u8ba9\u6211\u4eec\u770b\u770b\u5178\u578b\u60c5\u51b5\uff0c\u5176\u4e2d\u89c6\u53e3\u5177\u6709\u4ece\u5de6\u8fb9\u7684 0 \u5230\u53f3\u8fb9\u7684\u5bbd\u5ea6\u3001\u4ece\u9876\u90e8\u7684 0 \u5230\u5e95\u90e8\u7684\u9ad8\u5ea6\u7684\u50cf\u7d20\u5750\u6807\u3002\u5e76\u5047\u8bbe\u89c6\u7a97\u7684\u9650\u5236\u662f left\u3001right\u3001bottom \u548c top\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a97\u53e3\u5230\u89c6\u53e3\u53d8\u6362\u53ef\u4ee5\u7f16\u7a0b\u4e3a\uff1a</p> <pre><code>scale( width / (right-left), height / (bottom-top) );\ntranslate( -left, -top )\n</code></pre> <p>\u8fd9\u4e9b\u5e94\u8be5\u662f\u5e94\u7528\u4e8e\u70b9\u7684\u6700\u540e\u53d8\u6362\u3002\u7531\u4e8e\u53d8\u6362\u662f\u6309\u4e0e\u7a0b\u5e8f\u4e2d\u6307\u5b9a\u7684\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u4e8e\u70b9\u7684\uff0c\u5b83\u4eec\u5e94\u8be5\u662f\u7a0b\u5e8f\u4e2d\u6307\u5b9a\u7684\u7b2c\u4e00\u4e2a\u53d8\u6362\u3002\u4e3a\u4e86\u770b\u5230\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8bf7\u8003\u8651\u89c6\u7a97\u4e2d\u7684\u4e00\u4e2a\u70b9 (x,y)\u3002\uff08\u8fd9\u4e2a\u70b9\u6765\u81ea\u573a\u666f\u4e2d\u7684\u67d0\u4e2a\u5bf9\u8c61\u3002\u53ef\u80fd\u5df2\u7ecf\u5e94\u7528\u4e86\u51e0\u6b21\u5efa\u6a21\u53d8\u6362\u6765\u751f\u6210\u70b9 (x,y)\uff0c\u800c\u8be5\u70b9\u73b0\u5728\u5df2\u51c6\u5907\u597d\u8fdb\u884c\u6700\u7ec8\u7684\u8f6c\u6362\u4e3a\u89c6\u53e3\u5750\u6807\u3002\uff09\u5750\u6807 (x,y) \u9996\u5148\u88ab\u5e73\u79fb\u4e86 (-left,-top) \u4ee5\u5f97\u5230 (x-left,y-top)\u3002\u7136\u540e\u5c06\u8fd9\u4e9b\u5750\u6807\u4e58\u4ee5\u4e0a\u9762\u663e\u793a\u7684\u7f29\u653e\u56e0\u5b50\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u5750\u6807\uff1a</p> <pre><code>x1 = width / (right-left) * (x-left)\ny1 = height / (bottom-top) * (y-top)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u70b9 (left,top) \u88ab\u6620\u5c04\u5230 (0,0)\uff0c\u800c\u70b9 (right,bottom) \u88ab\u6620\u5c04\u5230 (width,height)\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u7eb5\u6a2a\u6bd4\u7684\u95ee\u9898\u3002\u5982 2.1.3 \u5c0f\u8282 \u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5f3a\u5236\u7a97\u53e3\u7684\u7eb5\u6a2a\u6bd4\u4e0e\u89c6\u53e3\u7684\u7eb5\u6a2a\u6bd4\u5339\u914d\uff0c\u53ef\u80fd\u9700\u8981\u8c03\u6574\u7a97\u53e3\u7684\u9650\u5236\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u7684\u4f2a\u4ee3\u7801\uff0c\u5047\u8bbe\u89c6\u53e3\u7684\u5de6\u4e0a\u89d2\u5177\u6709\u50cf\u7d20\u5750\u6807 (0,0)\uff1a</p> <pre><code>subroutine applyWindowToViewportTransformation (\n        left, right,   // horizontal limits on view window\n        bottom, top,   // vertical limits on view window\n        width, height, // width and height of viewport\n        preserveAspect // should window be forced to match viewport aspect?\n    )\n\nif preserveAspect :\n    // Adjust the limits to match the aspect ratio of the drawing area.\n    displayAspect = abs(height / width);\n    windowAspect = abs(( top-bottom ) / ( right-left ));\n    if displayAspect &gt; windowAspect :\n        // Expand the viewport vertically.\n        excess = (top-bottom) * (displayAspect/windowAspect - 1)\n        top = top + excess/2\n        bottom = bottom - excess/2\n    else if displayAspect &lt; windowAspect :\n        // Expand the viewport horizontally.\n        excess = (right-left) * (windowAspect/displayAspect - 1)\n        right = right + excess/2\n        left = left - excess/2 \n\n    scale( width / (right-left), height / (bottom-top) )\n    translate( -left, -top )\n</code></pre> <p>The last transformation that is applied to an object before it is displayed in an image is the window-to-viewport transformation, which maps the rectangular view window in the xy-plane that contains the scene to the rectangular grid of pixels where the image will be displayed. I'll assume here that the view window is not rotated; that it, its sides are parallel to the x- and y-axes. In that case, the window-to-viewport transformation can be expressed in terms of translation and scaling transforms. Let's look at the typical case where the viewport has pixel coordinates ranging from 0 on the left to width on the right and from 0 at the top to height at the bottom. And assume that the limits on the view window are left, right, bottom, and top. In that case, the window-to-viewport transformation can be programmed as:</p> <pre><code>scale( width / (right-left), height / (bottom-top) );\ntranslate( -left, -top )\n</code></pre> <p>These should be the last transforms that are applied to a point. Since transforms are applied to points in the reverse of the order in which they are specified in the program, they should be the first transforms that are specified in the program. To see how this works, consider a point (x,y) in the view window. (This point comes from some object in the scene. Several modeling transforms might have already been applied to the object to produce the point (x,y), and that point is now ready for its final transformation into viewport coordinates.) The coordinates (x,y) are first translated by (-left,-top) to give (x-left,y-top). These coordinates are then multiplied by the scaling factors shown above, giving the final coordinates</p> <pre><code>x1 = width / (right-left) * (x-left)\ny1 = height / (bottom-top) * (y-top)\n</code></pre> <p>Note that the point (left,top) is mapped to (0,0), while the point (right,bottom) is mapped to (width,height), which is just what we want.</p> <p>There is still the question of aspect ratio. As noted in Subsection 2.1.3, if we want to force the aspect ratio of the window to match the aspect ratio of the viewport, it might be necessary to adjust the limits on the window. Here is pseudocode for a subroutine that will do that, again assuming that the top-left corner of the viewport has pixel coordinates (0,0):</p> <pre><code>subroutine applyWindowToViewportTransformation (\n        left, right,   // horizontal limits on view window\n        bottom, top,   // vertical limits on view window\n        width, height, // width and height of viewport\n        preserveAspect // should window be forced to match viewport aspect?\n    )\n\nif preserveAspect :\n    // Adjust the limits to match the aspect ratio of the drawing area.\n    displayAspect = abs(height / width);\n    windowAspect = abs(( top-bottom ) / ( right-left ));\n    if displayAspect &gt; windowAspect :\n        // Expand the viewport vertically.\n        excess = (top-bottom) * (displayAspect/windowAspect - 1)\n        top = top + excess/2\n        bottom = bottom - excess/2\n    else if displayAspect &lt; windowAspect :\n        // Expand the viewport horizontally.\n        excess = (right-left) * (windowAspect/displayAspect - 1)\n        right = right + excess/2\n        left = left - excess/2 \n\n    scale( width / (right-left), height / (bottom-top) )\n    translate( -left, -top )\n</code></pre>"},{"location":"cn/c2/s3/#238-\u77e9\u9635\u548c\u5411\u91cf","title":"2.3.8  \u77e9\u9635\u548c\u5411\u91cf","text":"<p>Matrices and Vectors</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u4e2d\u4f7f\u7528\u7684\u53d8\u6362\u53ef\u4ee5\u8868\u793a\u4e3a\u77e9\u9635\uff0c\u800c\u5b83\u4eec\u4f5c\u7528\u7684\u70b9\u5219\u8868\u793a\u4e3a\u5411\u91cf\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4ece\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u77e9\u9635(matrix)\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u800c\u5411\u91cf(vector)\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u3002\u77e9\u9635\u548c\u5411\u91cf\u662f\u7ebf\u6027\u4ee3\u6570(linear algebra)\u9886\u57df\u7684\u7814\u7a76\u5bf9\u8c61\u3002\u7ebf\u6027\u4ee3\u6570\u5bf9\u8ba1\u7b97\u673a\u56fe\u5f62\u81f3\u5173\u91cd\u8981\u3002\u4e8b\u5b9e\u4e0a\uff0c\u77e9\u9635\u548c\u5411\u91cf\u6570\u5b66\u5df2\u7ecf\u5185\u7f6e\u5728\u4e86 GPU \u4e2d\u3002\u4f60\u4e0d\u9700\u8981\u5bf9\u7ebf\u6027\u4ee3\u6570\u6709\u5f88\u591a\u4e86\u89e3\u6765\u9605\u8bfb\u672c\u6559\u6750\uff0c\u4f46\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002</p> <p>\u6211\u4eec\u9700\u8981\u7684\u5411\u91cf\u662f\u7531\u4e24\u4e2a\u3001\u4e09\u4e2a\u6216\u56db\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u5217\u8868\u3002\u5b83\u4eec\u901a\u5e38\u88ab\u5199\u4f5c (x,y)\u3001(x,y,z) \u548c (x,y,z,w)\u3002\u4e00\u4e2a\u5177\u6709 N \u884c\u548c M \u5217\u7684\u77e9\u9635\u79f0\u4e3a\u201cN\u884cM\u5217\u77e9\u9635\u201d\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u7684\u77e9\u9635\u662f N \u884c N \u5217\u7684\u77e9\u9635\uff0c\u5176\u4e2d N \u4e3a 2\u30013 \u6216 4\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u6709 2\u30013 \u6216 4 \u884c\u548c\u5217\uff0c\u884c\u6570\u7b49\u4e8e\u5217\u6570\u3002</p> <p>\u5982\u679c A \u548c B \u662f\u4e24\u4e2a N \u884c N \u5217\u7684\u77e9\u9635\uff0c\u90a3\u4e48\u5b83\u4eec\u53ef\u4ee5\u76f8\u4e58\u5f97\u5230\u4e00\u4e2a\u4e58\u79ef\u77e9\u9635 C = AB\u3002\u5982\u679c A \u662f\u4e00\u4e2a N \u884c N \u5217\u7684\u77e9\u9635\uff0cv \u662f\u957f\u5ea6\u4e3a N \u7684\u5411\u91cf\uff0c\u90a3\u4e48 v \u53ef\u4ee5\u4e58\u4ee5 A \u5f97\u5230\u53e6\u4e00\u4e2a\u5411\u91cf w = Av\u3002\u5c06 v \u6620\u5c04\u5230 Av \u7684\u51fd\u6570\u662f\u4e00\u4e2a\u53d8\u6362\uff1b\u5b83\u5c06\u4efb\u610f\u7ed9\u5b9a\u7684\u5927\u5c0f\u4e3a N \u7684\u5411\u91cf\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e3a N \u7684\u5411\u91cf\u3002\u8fd9\u79cd\u5f62\u5f0f\u7684\u53d8\u6362\u79f0\u4e3a\u7ebf\u6027\u53d8\u6362(linear transformation)\u3002</p> <p>\u73b0\u5728\uff0c\u5047\u8bbe A \u548c B \u662f N \u884c N \u5217\u7684\u77e9\u9635\uff0cv \u662f\u957f\u5ea6\u4e3a N \u7684\u5411\u91cf\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u5f62\u6210\u4e24\u4e2a\u4e0d\u540c\u7684\u4e58\u79ef\uff1aA(Bv) \u548c (AB)v\u3002\u4e00\u4e2a\u6838\u5fc3\u4e8b\u5b9e\u662f\uff0c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06 v \u4e58\u4ee5 B\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4e58\u4ee5 A\uff0c\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635 A \u548c B \u76f8\u4e58\u5f97\u5230\u77e9\u9635\u4e58\u79ef AB\uff0c\u7136\u540e\u5c06 v \u4e58\u4ee5 AB\u3002\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002</p> <p>\u4e8b\u5b9e\u8bc1\u660e\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u90fd\u662f\u7ebf\u6027\u53d8\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed5\u539f\u70b9\u65cb\u8f6c (x,y) \u89d2\u5ea6\u4e3a d \u7684\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u5c06 (x,y) \u4e58\u4ee5\u4e00\u4e2a 2\u00d72 \u7684\u77e9\u9635\u6765\u5b9e\u73b0\u3002\u8ba9\u6211\u4eec\u79f0\u8be5\u77e9\u9635\u4e3a Rd\u3002\u7c7b\u4f3c\u5730\uff0c\u6c34\u5e73\u65b9\u5411\u7f29\u653e\u56e0\u5b50\u4e3a a\uff0c\u5782\u76f4\u65b9\u5411\u7f29\u653e\u56e0\u5b50\u4e3a b\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u77e9\u9635 Sa,b\u3002\u5982\u679c\u6211\u4eec\u60f3\u5bf9\u70b9 v = (x,y) \u5e94\u7528\u7f29\u653e\u540e\u518d\u65cb\u8f6c\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u8981\u4e48 Rd(Sa,b^v) \u8981\u4e48 (RdSa,b)v\u3002</p> <p>\u90a3\u4e48\u5462\uff1f\u55ef\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5bf9\u6570\u5343\u4e2a\u70b9\u5e94\u7528\u76f8\u540c\u7684\u4e24\u4e2a\u64cd\u4f5c\uff0c\u5148\u7f29\u653e\u518d\u65cb\u8f6c\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e3a\u8ba1\u7b97\u673a\u56fe\u5f62\u4e2d\u7684\u5bf9\u8c61\u8fdb\u884c\u53d8\u6362\u65f6\u901a\u5e38\u6240\u505a\u7684\u90a3\u6837\u3002\u5173\u952e\u5728\u4e8e\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u52b3\u6c38\u9038\u5730\u8ba1\u7b97\u4e58\u79ef\u77e9\u9635 RdSa,b\uff0c\u7136\u540e\u901a\u8fc7\u5355\u6b21\u4e58\u6cd5\u5c06\u7ec4\u5408\u53d8\u6362\u5e94\u7528\u4e8e\u6bcf\u4e2a\u70b9\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u8bf4</p> <pre><code>rotate(d)\nscale(a,b)\n.\n.  // draw a complex object\n.\n</code></pre> <p>\u8ba1\u7b97\u673a\u65e0\u9700\u8ddf\u8e2a\u4e24\u4e2a\u72ec\u7acb\u7684\u64cd\u4f5c\u3002\u5b83\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u5408\u5e76\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u77e9\u9635\uff0c\u7136\u540e\u53ea\u9700\u8ddf\u8e2a\u8fd9\u4e2a\u77e9\u9635\u3002\u5373\u4f7f\u5bf9\u5bf9\u8c61\u5e94\u7528\u4e8650\u4e2a\u53d8\u6362\uff0c\u8ba1\u7b97\u673a\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u5168\u90e8\u5408\u5e76\u6210\u4e00\u4e2a\u77e9\u9635\u3002\u901a\u8fc7\u4f7f\u7528\u77e9\u9635\u4ee3\u6570\uff0c\u591a\u4e2a\u53d8\u6362\u53ef\u4ee5\u50cf\u5355\u4e2a\u53d8\u6362\u4e00\u6837\u9ad8\u6548\u5730\u5904\u7406\uff01</p> <p>\u8fd9\u786e\u5b9e\u5f88\u597d\uff0c\u4f46\u5b58\u5728\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff1a\u5e73\u79fb\u4e0d\u662f\u7ebf\u6027\u53d8\u6362\u3002\u4e3a\u4e86\u5c06\u5e73\u79fb\u7eb3\u5165\u8fd9\u4e2a\u6846\u67b6\uff0c\u6211\u4eec\u9996\u5148\u505a\u4e00\u4e9b\u770b\u8d77\u6765\u6709\u70b9\u5947\u602a\u7684\u4e8b\u60c5\uff1a\u6211\u4eec\u4e0d\u518d\u5c06\u4e8c\u7ef4\u70b9\u8868\u793a\u4e3a\u4e00\u5bf9\u6570\u5b57 (x,y)\uff0c\u800c\u662f\u8868\u793a\u4e3a\u4e09\u4e2a\u6570\u5b57\u7684\u4e09\u5143\u7ec4 (x,y,1)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u7b2c\u4e09\u4e2a\u5750\u6807\u4f4d\u7f6e\u6dfb\u52a0\u4e86\u4e00\u4e2a 1\u3002\u7136\u540e\uff0c\u7ed3\u679c\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u5e73\u79fb\u2014\u2014\u56e0\u6b64\u4efb\u4f55\u4eff\u5c04\u53d8\u6362\u2014\u2014\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u8868\u793a\u4e3a\u4e00\u4e2a 3\u00d73 \u77e9\u9635\u7684\u4e58\u6cd5\u3002\u6211\u4eec\u9700\u8981\u7684\u77e9\u9635\u5177\u6709\u5305\u542b (0,0,1) \u7684\u5e95\u90e8\u4e00\u884c\u3002\u5c06 (x,y,1) \u4e58\u4ee5\u8fd9\u6837\u7684\u77e9\u9635\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u5411\u91cf (x1,y1,1)\u3002\u6211\u4eec\u5ffd\u7565\u989d\u5916\u7684\u5750\u6807\uff0c\u5e76\u5c06\u5176\u89c6\u4e3a\u5c06 (x,y) \u8f6c\u6362\u4e3a (x1,y1)\u3002\u6709\u5173\u8bb0\u5f55\uff0c2D \u5e73\u79fb (Ta,b)\u3001\u7f29\u653e (Sa,b) \u548c\u65cb\u8f6c (Rd) \u7684 3\u00d73 \u77e9\u9635\u5982\u4e0b\u6240\u793a\uff1a</p> <p> </p> <p>\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u77e9\u9635\u7684\u4e58\u6cd5\u4e0e\u4e0a\u9762\u7ed9\u51fa\u7684\u5e73\u79fb\u3001\u7f29\u653e\u548c\u65cb\u8f6c\u516c\u5f0f\u8fdb\u884c\u6bd4\u8f83\u3002\u4f46\u5728\u8fdb\u884c\u56fe\u5f62\u7f16\u7a0b\u65f6\uff0c\u4f60\u4e0d\u9700\u8981\u81ea\u5df1\u6267\u884c\u8fd9\u4e9b\u4e58\u6cd5\u3002\u76ee\u524d\uff0c\u4f60\u5e94\u8be5\u4ece\u8fd9\u6b21\u8ba8\u8bba\u4e2d\u5e26\u8d70\u7684\u91cd\u8981\u89c2\u70b9\u662f\uff0c\u4e00\u7cfb\u5217\u53d8\u6362\u53ef\u4ee5\u5408\u5e76\u6210\u5355\u4e2a\u53d8\u6362\u3002\u8ba1\u7b97\u673a\u53ea\u9700\u8981\u8ddf\u8e2a\u4e00\u4e2a\u77e9\u9635\uff0c\u6211\u4eec\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u201c\u5f53\u524d\u77e9\u9635\u201d\u6216\u201c\u5f53\u524d\u53d8\u6362\u201d\u3002\u4e3a\u4e86\u5b9e\u73b0\u8bf8\u5982 translate(a,b) \u6216 rotate(d) \u7b49\u53d8\u6362\u547d\u4ee4\uff0c\u8ba1\u7b97\u673a\u53ea\u9700\u5c06\u5f53\u524d\u77e9\u9635\u4e58\u4ee5\u4ee3\u8868\u53d8\u6362\u7684\u77e9\u9635\u3002</p> <p>The transforms that are used in computer graphics can be represented as matrices, and the points on which they operate are represented as vectors. Recall that a matrix, from the point of view of a computer scientist, is a two-dimensional array of numbers, while a vector is a one-dimensional array. Matrices and vectors are studied in the field of mathematics called linear algebra. Linear algebra is fundamental to computer graphics. In fact, matrix and vector math is built into GPUs. You won't need to know a great deal about linear algebra for this textbook, but a few basic ideas are essential.</p> <p>The vectors that we need are lists of two, three, or four numbers. They are often written as (x,y), (x,y,z), and (x,y,z,w). A matrix with N rows and M columns is called an \"N-by-M matrix.\" For the most part, the matrices that we need are N-by-N matrices, where N is 2, 3, or 4. That is, they have 2, 3, or 4 rows and columns, and the number of rows is equal to the number of columns.</p> <p>If A and B are two N-by-N matrices, then they can be multiplied to give a product matrix C = AB. If A is an N-by-N matrix, and v is a vector of length N, then v can be multiplied by A to give another vector w = Av. The function that takes v to Av is a transformation; it transforms any given vector of size N into another vector of size N. A transformation of this form is called a linear transformation.</p> <p>Now, suppose that A and B are N-by-N matrices and v is a vector of length N. Then, we can form two different products: A(Bv) and (AB)v. It is a central fact that these two operations have the same effect. That is, we can multiply v by B and then multiply the result by A, or we can multiply the matrices A and B to get the matrix product AB and then multiply v by AB. The result is the same.</p> <p>Rotation and scaling, as it turns out, are linear transformations. That is, the operation of rotating (x,y) through an angle d about the origin can be done by multiplying (x,y) by a 2-by-2 matrix. Let's call that matrix Rd. Similarly, scaling by a factor a in the horizontal direction and b in the vertical direction can be given as a matrix Sa,b. If we want to apply a scaling followed by a rotation to the point v = (x,y), we can compute either Rd(Sa,b^v) or (RdSa,b)v.</p> <p>So what? Well, suppose that we want to apply the same two operations, scale then rotate, to thousands of points, as we typically do when transforming objects for computer graphics. The point is that we could compute the product matrix RdSa,b once and for all, and then apply the combined transform to each point with a single multiplication. This means that if a program says</p> <pre><code>rotate(d)\nscale(a,b)\n.\n.  // draw a complex object\n.\n</code></pre> <p>the computer doesn't have to keep track of two separate operations. It combines the operations into a single matrix and just keeps track of that. Even if you apply, say, 50 transformations to the object, the computer can just combine them all into one matrix. By using matrix algebra, multiple transformations can be handled as efficiently as a single transformation!</p> <p>This is really nice, but there is a gaping problem: Translation is not a linear transformation. To bring translation into this framework, we do something that looks a little strange at first: Instead of representing a point in 2D as a pair of numbers (x,y), we represent it as the triple of numbers (x,y,1). That is, we add a one as the third coordinate. It then turns out that we can then represent rotation, scaling, and translation\u2014and hence any affine transformation\u2014on 2D space as multiplication by a 3-by-3 matrix. The matrices that we need have a bottom row containing (0,0,1). Multiplying (x,y,1) by such a matrix gives a new vector (x1,y1,1). We ignore the extra coordinate and consider this to be a transformation of (x,y) into (x1,y1). For the record, the 3-by-3 matrices for translation (Ta,b), scaling (Sa,b), and rotation (Rd) in 2D are</p> <p> </p> <p>You can compare multiplication by these matrices to the formulas given above for translation, scaling, and rotation. But when doing graphics programming, you won't need to do the multiplication yourself. For now, the important idea that you should take away from this discussion is that a sequence of transformations can be combined into a single transformation. The computer only needs to keep track of a single matrix, which we can call the \"current matrix\" or \"current transformation.\" To implement transform commands such as translate(a,b) or rotate(d), the computer simply multiplies the current matrix by the matrix that represents the transform.</p>"},{"location":"cn/c2/s4/","title":"\u7b2c4\u8282: \u5206\u5c42\u5efa\u6a21","text":"<p>Hierarchical Modeling</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d,\u6211\u4eec\u5c06\u770b\u770b\u5982\u4f55\u4ece\u975e\u5e38\u7b80\u5355\u7684\u5f62\u72b6\u6784\u5efa\u590d\u6742\u7684\u573a\u666f\u3002\u5173\u952e\u662f\u5206\u5c42\u7ed3\u6784\u3002\u4e5f\u5c31\u662f\u8bf4,\u590d\u6742\u7684\u5bf9\u8c61\u53ef\u4ee5\u7531\u66f4\u7b80\u5355\u7684\u5bf9\u8c61\u7ec4\u6210,\u8fd9\u4e9b\u5bf9\u8c61\u53c8\u53ef\u4ee5\u7531\u66f4\u7b80\u5355\u7684\u5bf9\u8c61\u7ec4\u6210,\u4f9d\u6b64\u7c7b\u63a8,\u76f4\u5230\u6700\u7ec8\u7531\u7b80\u5355\u7684\u51e0\u4f55\u56fe\u5143\u7ec4\u6210,\u53ef\u4ee5\u76f4\u63a5\u7ed8\u5236\u3002\u8fd9\u88ab\u79f0\u4e3a\u5206\u5c42\u5efa\u6a21\u3002\u6211\u4eec\u5c06\u770b\u5230,\u5728\u5206\u5c42\u5efa\u6a21\u4e2d,\u5728\u4e0a\u4e00\u8282\u4e2d\u5b66\u4e60\u7684\u53d8\u6362\u8d77\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002</p> <p>\u5206\u5c42\u7ed3\u6784\u662f\u5904\u7406\u590d\u6742\u6027\u7684\u5173\u952e,\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u8bb8\u591a\u9886\u57df(\u4ee5\u53ca\u73b0\u5b9e\u4e16\u754c\u7684\u5176\u4ed6\u9886\u57df)\u4e2d\u90fd\u662f\u5982\u6b64,\u6240\u4ee5\u5b83\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528,\u8fd9\u4e00\u70b9\u5e76\u4e0d\u4ee4\u4eba\u610f\u5916\u3002</p> <p>In this section, we look at how complex scenes can be built from very simple shapes. The key is hierarchical structure. That is, a complex object can be made up of simpler objects, which can in turn be made up of even simpler objects, and so on until it bottoms out with simple geometric primitives that can be drawn directly. This is called hierarchical modeling. We will see that the transforms that were studied in the previous section play an important role in hierarchical modeling.</p> <p>Hierarchical structure is the key to dealing with complexity in many areas of computer science (and in the rest of reality), so it be no surprise that it plays an important role in computer graphics.</p>"},{"location":"cn/c2/s4/#241-\u6784\u5efa\u590d\u6742\u5bf9\u8c61","title":"2.4.1  \u6784\u5efa\u590d\u6742\u5bf9\u8c61","text":"<p>Building Complex Objects</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f15\u5165\u65b0\u7684\u5750\u6807\u7cfb\u7684\u4e00\u4e2a\u4e3b\u8981\u52a8\u673a\u662f\u5e94\u8be5\u80fd\u591f\u4f7f\u7528\u5bf9\u8981\u7ed8\u5236\u7684\u573a\u666f\u6700\u81ea\u7136\u7684\u5750\u6807\u7cfb\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u60f3\u6cd5\u6269\u5c55\u5230\u573a\u666f\u4e2d\u7684\u5355\u4e2a\u5bf9\u8c61\uff1a\u5728\u7ed8\u5236\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f7f\u7528\u6700\u9002\u5408\u8be5\u5bf9\u8c61\u7684\u5750\u6807\u7cfb\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u4e00\u4e2a\u5bf9\u8c61\u5728\u5176\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u4ee5\u539f\u70b9(0,0)\u4e3a\u4e2d\u5fc3\uff0c\u6216\u8005\u81f3\u5c11\u4f7f\u7528\u539f\u70b9\u4f5c\u4e3a\u4fbf\u6377\u7684\u53c2\u8003\u70b9\u3002\u7136\u540e\uff0c\u4e3a\u4e86\u5c06\u5176\u653e\u7f6e\u5728\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7f29\u653e\u53d8\u6362\uff0c\u63a5\u7740\u662f\u65cb\u8f6c\u53d8\u6362\uff0c\u63a5\u7740\u662f\u5e73\u79fb\u53d8\u6362\uff0c\u4ee5\u8bbe\u7f6e\u5176\u5728\u573a\u666f\u4e2d\u7684\u5927\u5c0f\u3001\u65b9\u5411\u548c\u4f4d\u7f6e\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\u4f7f\u7528\u7684\u53d8\u6362\u88ab\u79f0\u4e3a\u5efa\u6a21\u53d8\u6362\u3002\u901a\u5e38\uff0c\u53d8\u6362\u7684\u987a\u5e8f\u662f\u5148\u7f29\u653e\uff0c\u7136\u540e\u65cb\u8f6c\uff0c\u6700\u540e\u5e73\u79fb\uff0c\u56e0\u4e3a\u7f29\u653e\u548c\u65cb\u8f6c\u4f1a\u4fdd\u6301\u53c2\u8003\u70b9(0,0)\u4e0d\u53d8\u3002\u4e00\u65e6\u5bf9\u8c61\u88ab\u7f29\u653e\u548c\u65cb\u8f6c\uff0c\u4f7f\u7528\u5e73\u79fb\u53d8\u6362\u5c06\u53c2\u8003\u70b9\u79fb\u52a8\u5230\u573a\u666f\u4e2d\u7684\u4efb\u610f\u6240\u9700\u70b9\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\uff08\u5f53\u7136\uff0c\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u4e0d\u9700\u8981\u6240\u6709\u4e09\u4e2a\u64cd\u4f5c\u3002\uff09\u8bf7\u8bb0\u4f4f\uff0c\u5728\u4ee3\u7801\u4e2d\uff0c\u53d8\u6362\u7684\u987a\u5e8f\u4e0e\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u987a\u5e8f\u76f8\u53cd\uff0c\u5e76\u4e14\u53d8\u6362\u662f\u5728\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d\u6307\u5b9a\u7684\u3002\u56e0\u6b64\uff0c\u5728\u4ee3\u7801\u4e2d\uff0c\u5e73\u79fb\u5e94\u8be5\u9996\u5148\u51fa\u73b0\uff0c\u7136\u540e\u662f\u65cb\u8f6c\uff0c\u7136\u540e\u662f\u7f29\u653e\u3002\u5efa\u6a21\u53d8\u6362\u7684\u7ec4\u5408\u987a\u5e8f\u4e0d\u603b\u662f\u8fd9\u6837\uff0c\u4f46\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u7528\u6cd5\u3002</p> <p>\u7528\u4e8e\u5c06\u5bf9\u8c61\u653e\u7f6e\u5728\u573a\u666f\u4e2d\u7684\u5efa\u6a21\u53d8\u6362\u4e0d\u5e94\u5f71\u54cd\u573a\u666f\u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u3002\u4e3a\u4e86\u5c06\u5176\u5e94\u7528\u4e8e\u4ec5\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5f00\u59cb\u5904\u7406\u5bf9\u8c61\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u7684\u53d8\u6362\u72b6\u6001\uff0c\u5e76\u5728\u4e4b\u540e\u6062\u590d\u5b83\u3002\u8fd9\u6837\u505a\u7684\u65b9\u5f0f\u56e0\u4e0d\u540c\u7684\u56fe\u5f62API\u800c\u5f02\uff0c\u4f46\u5047\u8bbe\u8fd9\u91cc\u6709\u7528\u4e8e\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\u7684\u5b50\u7a0b\u5e8f<code>saveTransform()</code>\u548c<code>restoreTransform()</code>\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>saveTransform</code>\u5c06\u590d\u5236\u5f53\u524d\u751f\u6548\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u5e76\u5b58\u50a8\u8be5\u526f\u672c\u3002\u5b83\u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u7684\u53d8\u6362\uff1b\u5b83\u53ea\u662f\u4fdd\u5b58\u4e00\u4e2a\u526f\u672c\u3002\u7a0d\u540e\uff0c\u5f53\u8c03\u7528restoreTransform\u65f6\uff0c\u5b83\u5c06\u68c0\u7d22\u8be5\u526f\u672c\uff0c\u5e76\u5c06\u5f53\u524d\u7684\u5efa\u6a21\u53d8\u6362\u66ff\u6362\u4e3a\u68c0\u7d22\u5230\u7684\u53d8\u6362\u3002\u7ed8\u5236\u5bf9\u8c61\u7684\u5178\u578b\u4ee3\u7801\u5c06\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>saveTransform()\ntranslate(dx,dy) // move object into position\nrotate(r)        // set the orientation of the object\nscale(sx,sy)     // set the size of the object\n    .\n    .  // draw the object, using its natural coordinates\n    .\nrestoreTransform()\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u5e76\u4e14\u4e0d\u9700\u8981\u77e5\u9053\u4fdd\u5b58\u7684\u53d8\u6362\u662f\u505a\u4ec0\u4e48\u7684\u3002\u4e5f\u8bb8\u5b83\u53ea\u662f\u6240\u8c13\u7684\u5355\u4f4d\u53d8\u6362(identity transform)\uff0c\u5b83\u662f\u4e00\u4e2a\u4e0d\u4fee\u6539\u5e94\u7528\u4e8e\u5176\u4e0a\u7684\u5750\u6807\u7684\u53d8\u6362\u3002\u6216\u8005\u53ef\u80fd\u5df2\u7ecf\u6709\u53e6\u4e00\u4e2a\u53d8\u6362\u5b58\u5728\uff0c\u4f8b\u5982\u5f71\u54cd\u6574\u4e2a\u573a\u666f\u7684\u5750\u6807\u53d8\u6362\u3002\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\u5b9e\u9645\u4e0a\u662f\u5728\u4e4b\u524d\u6307\u5b9a\u7684\u4efb\u4f55\u5176\u4ed6\u53d8\u6362\u7684\u57fa\u7840\u4e0a\u5e94\u7528\u7684\u3002\u5efa\u6a21\u53d8\u6362\u5c06\u5bf9\u8c61\u4ece\u5176\u81ea\u7136\u5750\u6807\u79fb\u52a8\u5230\u573a\u666f\u4e2d\u7684\u9002\u5f53\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5e94\u7528\u4e8e\u6574\u4e2a\u573a\u666f\u7684\u5750\u6807\u53d8\u6362\u5c06\u968f\u4e4b\u79fb\u52a8\u5bf9\u8c61\u3002</p> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u6269\u5c55\u8fd9\u4e2a\u60f3\u6cd5\u3002\u5047\u8bbe\u6211\u4eec\u8981\u7ed8\u5236\u7684\u5bf9\u8c61\u672c\u8eab\u662f\u4e00\u4e2a\u590d\u6742\u7684\u5b9e\u4f53\uff0c\u7531\u8bb8\u591a\u8f83\u5c0f\u7684\u5bf9\u8c61\u7ec4\u6210\u3002\u4f8b\u5982\uff0c\u60f3\u8c61\u4e00\u4e0b\u7531\u76c6\u3001\u830e\u3001\u53f6\u5b50\u548c\u82b1\u6735\u7ec4\u6210\u7684\u76c6\u683d\u82b1\u5349\u3002\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ee5\u5b83\u4eec\u81ea\u5df1\u7684\u81ea\u7136\u5750\u6807\u7cfb\u7ed8\u5236\u8f83\u5c0f\u7684\u7ec4\u4ef6\u5bf9\u8c61\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u5f85\u4e3b\u5bf9\u8c61\u4e00\u6837\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u4ee5\u82b1\u6735\u7684\u4e2d\u5fc3\u4e3a(0,0)\u7684\u5750\u6807\u7cfb\u4e2d\u6307\u5b9a\u82b1\u6735\u3002\u4f46\u8fd9\u5f88\u5bb9\u6613\uff1a\u6211\u4eec\u5728\u6bcf\u4e2a\u5c0f\u7ec4\u4ef6\u5bf9\u8c61\uff08\u5982\u82b1\u6735\uff09\u7684\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\uff0c\u5e76\u4f7f\u7528\u5efa\u6a21\u53d8\u6362\u5c06\u5b50\u5bf9\u8c61\u79fb\u52a8\u5230\u4e3b\u5bf9\u8c61\u5185\u90e8\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u5728\u5176\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u7ec4\u5408\u590d\u6742\u5bf9\u8c61\uff0c\u4eff\u4f5b\u5b83\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u573a\u666f\u3002</p> <p>\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6574\u4e2a\u590d\u6742\u5bf9\u8c61\u5e94\u7528\u53e6\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff1b\u590d\u6742\u5bf9\u8c61\u7684\u5b50\u5bf9\u8c61\u5c06\u968f\u4e4b\u79fb\u52a8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5e94\u7528\u4e8e\u5b50\u5bf9\u8c61\u7684\u603b\u4f53\u53d8\u6362\u7531\u5c06\u5b50\u5bf9\u8c61\u653e\u7f6e\u5230\u590d\u6742\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u4ee5\u53ca\u5c06\u590d\u6742\u5bf9\u8c61\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u7684\u53d8\u6362\u7ec4\u6210\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u7531\u8f83\u5c0f\u5bf9\u8c61\u7ec4\u6210\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u8f83\u5c0f\u5bf9\u8c61\u53c8\u7531\u66f4\u5c0f\u7684\u5bf9\u8c61\u7ec4\u6210\uff0c\u4ee5\u4efb\u610f\u7ea7\u522b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5b83\u4eec\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\u82b1\u6735\u7684\u82b1\u74e3\uff0c\u7136\u540e\u5e94\u7528\u5efa\u6a21\u53d8\u6362\u5c06\u82b1\u74e3\u653e\u7f6e\u5230\u82b1\u6735\u7684\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u3002\u8fd8\u5c06\u6709\u53e6\u4e00\u4e2a\u53d8\u6362\u5c06\u82b1\u6735\u653e\u7f6e\u5230\u830e\u4e0a\uff0c\u4ee5\u53ca\u53e6\u4e00\u4e2a\u53d8\u6362\u5c06\u6574\u4e2a\u76c6\u683d\u82b1\u5349\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u3002\u8fd9\u5c31\u662f\u5c42\u6b21\u5efa\u6a21\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u5c0f\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u7ed8\u5236\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u7ef4\u56fe\u50cf\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6709\u4e24\u4e2a\u8f66\u8f6e\u7684\u624b\u63a8\u8f66\u3002</p> <p> </p> <p>\u8fd9\u8f86\u624b\u63a8\u8f66\u662f\u4e0b\u9762\u793a\u4f8b\u4e2d\u590d\u6742\u573a\u666f\u7684\u4e00\u90e8\u5206\u3002\u624b\u63a8\u8f66\u7684\u8f66\u8eab\u53ef\u4ee5\u7ed8\u5236\u4e3a\u4e00\u5bf9\u77e9\u5f62\u3002\u5bf9\u4e8e\u8f66\u8f6e\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u7f16\u5199\u4e86\u4e00\u4e2a\u5b50\u7a0b\u5e8f</p> <pre><code>drawWheel()\n</code></pre> <p>\u5b83\u7528\u4e8e\u7ed8\u5236\u8f66\u8f6e\u3002\u8fd9\u4e2a\u5b50\u7a0b\u5e8f\u5728\u5b83\u81ea\u5df1\u7684\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\u8f66\u8f6e\u3002\u5728\u8fd9\u4e2a\u5750\u6807\u7cfb\u4e2d\uff0c\u8f66\u8f6e\u4ee5(0,0)\u4e3a\u4e2d\u5fc3\uff0c\u534a\u5f84\u4e3a1\u3002</p> <p>\u5728\u624b\u63a8\u8f66\u7684\u5750\u6807\u7cfb\u4e2d\uff0c\u6211\u53d1\u73b0\u4f7f\u7528\u5927\u77e9\u5f62\u5e95\u90e8\u7684\u4e2d\u70b9\u4f5c\u4e3a\u53c2\u8003\u70b9\u5f88\u65b9\u4fbf\u3002\u6211\u5047\u8bbey\u8f74\u7684\u6b63\u65b9\u5411\u5411\u4e0a\uff0c\u8fd9\u662f\u6570\u5b66\u4e2d\u7684\u5e38\u89c1\u7ea6\u5b9a\u3002\u624b\u63a8\u8f66\u7684\u77e9\u5f62\u8f66\u8eab\u5bbd\u5ea6\u4e3a6\uff0c\u9ad8\u5ea6\u4e3a2\uff0c\u56e0\u6b64\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u5750\u6807\u4e3a(-3,0)\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3cfillRectangle(-3,0,6,2)\u7684\u547d\u4ee4\u6765\u7ed8\u5236\u5b83\u3002\u8f66\u9876\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u7ea2\u8272\u77e9\u5f62\uff0c\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u7ed8\u5236\u3002\u8981\u5b8c\u6210\u624b\u63a8\u8f66\uff0c\u6211\u4eec\u9700\u8981\u5728\u5bf9\u8c61\u4e0a\u6dfb\u52a0\u4e24\u4e2a\u8f66\u8f6e\u3002\u4e3a\u4e86\u4f7f\u8f66\u8f6e\u7684\u5c3a\u5bf8\u9002\u5408\u624b\u63a8\u8f66\uff0c\u5b83\u4eec\u9700\u8981\u8fdb\u884c\u7f29\u653e\u3002\u4e3a\u4e86\u5c06\u5b83\u4eec\u76f8\u5bf9\u4e8e\u624b\u63a8\u8f66\u7684\u8f66\u8eab\u653e\u7f6e\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u8f66\u8f6e\u5fc5\u987b\u5411\u5de6\u5e73\u79fb\uff0c\u53e6\u4e00\u4e2a\u8f66\u8f6e\u5fc5\u987b\u5411\u53f3\u5e73\u79fb\u3002\u5f53\u6211\u7f16\u5199\u8fd9\u4e2a\u793a\u4f8b\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u5c1d\u8bd5\u5404\u79cd\u6570\u5b57\uff0c\u4ee5\u83b7\u5f97\u8f66\u8f6e\u7684\u6b63\u786e\u5c3a\u5bf8\u548c\u4f4d\u7f6e\uff0c\u5e76\u4e14\u6211\u53d1\u73b0\u5982\u679c\u6211\u5c06\u5b83\u4eec\u7a0d\u5fae\u5411\u4e0b\u79fb\u52a8\uff0c\u8f66\u8f6e\u770b\u8d77\u6765\u66f4\u597d\u3002\u4f7f\u7528\u5c42\u6b21\u5efa\u6a21\u7684\u5e38\u89c4\u6280\u672f\uff0c\u6211\u4eec\u5728\u7ed8\u5236\u6bcf\u4e2a\u8f66\u8f6e\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u7684\u53d8\u6362\uff0c\u5e76\u5728\u7ed8\u5236\u8f66\u8f6e\u4e4b\u540e\u6062\u590d\u5b83\u3002\u8fd9\u5c06\u9650\u5236\u8f66\u8f6e\u7684\u5efa\u6a21\u53d8\u6362\u7684\u5f71\u54cd\u8303\u56f4\u4ec5\u9650\u4e8e\u8be5\u8f66\u8f6e\u672c\u8eab\uff0c\u4ee5\u786e\u4fdd\u5b83\u4e0d\u4f1a\u5f71\u54cd\u624b\u63a8\u8f66\u7684\u4efb\u4f55\u5176\u4ed6\u90e8\u5206\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4ee5\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u7ed8\u5236\u624b\u63a8\u8f66\u7684\u5b50\u7a0b\u5e8f\u7684\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>subroutine drawCart() :\nsaveTransform()       // save the current transform\ntranslate(-1.65,-0.1) // center of first wheel will be at (-1.65,-0.1)\nscale(0.8,0.8)        // scale to reduce radius from 1 to 0.8\ndrawWheel()           // draw the first wheel\nrestoreTransform()    // restore the saved transform \nsaveTransform()       // save it again\ntranslate(1.5,-0.1)   // center of second wheel will be at (1.5,-0.1)\nscale(0.8,0.8)        // scale to reduce radius from 1 to 0.8\ndrawWheel()           // draw the second wheel\nrestoreTransform()    // restore the transform\nsetDrawingColor(RED)  // use red color to draw the rectangles\nfillRectangle(-3, 0, 6, 2)      // draw the body of the cart\nfillRectangle(-2.3, 1, 2.6, 1)  // draw the top of the cart\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u540c\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u7528\u4e8e\u7ed8\u5236\u4e24\u4e2a\u8f66\u8f6e\u3002\u4e24\u4e2a\u8f66\u8f6e\u5728\u56fe\u7247\u4e2d\u51fa\u73b0\u5728\u4e0d\u540c\u4f4d\u7f6e\u7684\u539f\u56e0\u662f\u5bf9\u4e24\u4e2a\u5b50\u7a0b\u5e8f\u8c03\u7528\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u3002</p> <p>\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u8fd9\u4e2a\u7ed8\u5236\u624b\u63a8\u8f66\u7684\u5b50\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5176\u6dfb\u52a0\u5230\u573a\u666f\u4e2d\u3002\u5728\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4eec\u5bf9\u6574\u4e2a\u624b\u63a8\u8f66\u5e94\u7528\u53e6\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u8c03\u7528drawCart\u5b50\u7a0b\u5e8f\u6765\u5411\u573a\u666f\u4e2d\u6dfb\u52a0\u591a\u8f86\u624b\u63a8\u8f66\u3002</p> <p>\u4f60\u5e94\u8be5\u6ce8\u610f\u5230\u8fd9\u91cc\u7684\u7c7b\u6bd4\uff1a\u5c06\u5bf9\u8c61\u7ec4\u5408\u6210\u590d\u6742\u573a\u666f\u7c7b\u4f3c\u4e8e\u5c06\u5b50\u7a0b\u5e8f\u7ec4\u5408\u6210\u590d\u6742\u7a0b\u5e8f\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5206\u522b\u5904\u7406\u95ee\u9898\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u5c0f\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u7ec4\u5408\u6210\u5927\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4e00\u65e6\u89e3\u51b3\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u5728\u591a\u4e2a\u5730\u65b9\u91cd\u590d\u4f7f\u7528\u8be5\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f7f\u7528\u624b\u63a8\u8f66\u5728\u52a8\u753b\u573a\u666f\u4e2d\u7684\u6f14\u793a\uff1a</p> <p></p> <p></p> <p>\u4f60\u53ef\u80fd\u53ef\u4ee5\u731c\u5230\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5982\u4f55\u4f7f\u7528\u5c42\u6b21\u5efa\u6a21\u6765\u7ed8\u5236\u4e09\u4e2a\u98ce\u8f66\u3002\u6709\u4e00\u4e2adrawWindmill\u65b9\u6cd5\u7528\u4e8e\u5728\u5176\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\u98ce\u8f66\u3002\u7136\u540e\uff0c\u901a\u8fc7\u5bf9\u6807\u51c6\u98ce\u8f66\u5e94\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u6765\u751f\u6210\u573a\u666f\u4e2d\u7684\u6bcf\u4e2a\u98ce\u8f66\u3002\u6b64\u5916\uff0c\u98ce\u8f66\u672c\u8eab\u662f\u4e00\u4e2a\u7531\u51e0\u4e2a\u5b50\u5bf9\u8c61\u4f7f\u7528\u5404\u79cd\u5efa\u6a21\u53d8\u6362\u6784\u5efa\u800c\u6210\u7684\u590d\u6742\u5bf9\u8c61\u3002</p> <p>\u4e5f\u8bb8\u5f88\u96be\u770b\u51fa\u573a\u666f\u7684\u4e0d\u540c\u90e8\u5206\u5982\u4f55\u8fdb\u884c\u52a8\u753b\u3002\u5b9e\u9645\u4e0a\uff0c\u52a8\u753b\u53ea\u662f\u5efa\u6a21\u7684\u53e6\u4e00\u4e2a\u65b9\u9762\u3002\u8ba1\u7b97\u673a\u52a8\u753b\u7531\u4e00\u7cfb\u5217\u5e27\u7ec4\u6210\u3002\u6bcf\u4e00\u5e27\u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u56fe\u50cf\uff0c\u4e0e\u4e0b\u4e00\u5e27\u76f8\u6bd4\u6709\u5fae\u5c0f\u7684\u53d8\u5316\u3002\u4ece\u6211\u4eec\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6bcf\u4e00\u5e27\u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u573a\u666f\uff0c\u5fc5\u987b\u5355\u72ec\u7ed8\u5236\u3002\u540c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u51fa\u73b0\u5728\u8bb8\u591a\u5e27\u4e2d\u3002\u4e3a\u4e86\u7ed9\u5bf9\u8c61\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e00\u5e27\u4e2d\u5bf9\u5bf9\u8c61\u5e94\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u3002\u53d8\u6362\u4e2d\u4f7f\u7528\u7684\u53c2\u6570\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6216\u5e27\u7f16\u53f7\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u4f7f\u624b\u63a8\u8f66\u4ece\u5de6\u5230\u53f3\u79fb\u52a8\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u624b\u63a8\u8f66\u5e94\u7528\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362</p> <pre><code>translate( frameNumber * 0.1, 0 )\n</code></pre> <p>\u5176\u4e2dframeNumber\u662f\u5e27\u7f16\u53f7\u3002\u5728\u6bcf\u4e00\u5e27\u4e2d\uff0c\u624b\u63a8\u8f66\u5c06\u6bd4\u4e0a\u4e00\u5e27\u5411\u53f3\u79fb\u52a80.1\u4e2a\u5355\u4f4d\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u5728\u5b9e\u9645\u7a0b\u5e8f\u4e2d\uff0c\u5e94\u7528\u4e8e\u624b\u63a8\u8f66\u7684\u5e73\u79fb\u662f</p> <pre><code>translate( -3 + 13*(frameNumber % 300) / 300.0,  0 )\n</code></pre> <p>\u5b83\u5728\u6bcf300\u5e27\u4e2d\u5c06\u624b\u63a8\u8f66\u7684\u53c2\u8003\u70b9\u4ece\u6c34\u5e73\u8f74\u4e0a\u7684-3\u79fb\u52a8\u523013\u3002\u5728\u7528\u4e8e\u573a\u666f\u7684\u5750\u6807\u7cfb\u4e2d\uff0cx\u5750\u6807\u7684\u8303\u56f4\u662f\u4ece0\u52307\uff0c\u56e0\u6b64\u5728\u5927\u90e8\u5206\u5faa\u73af\u4e2d\uff0c\u8fd9\u5c06\u4f7f\u624b\u63a8\u8f66\u8d85\u51fa\u573a\u666f\u8303\u56f4\u3002\uff09</p> <p>\u771f\u6b63\u597d\u7684\u662f\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u52a8\u753b\u4e0e\u5c42\u6b21\u5efa\u6a21\u4e00\u8d77\u4f7f\u7528\u3002\u4f8b\u5982\uff0cdrawWindmill\u65b9\u6cd5\u4e0d\u4ec5\u4ec5\u7ed8\u5236\u4e00\u4e2a\u98ce\u8f66-\u5b83\u7ed8\u5236\u4e00\u4e2a\u5e26\u6709\u65cb\u8f6c\u53f6\u7247\u7684\u52a8\u753b\u98ce\u8f66\u3002\u8fd9\u610f\u5473\u7740\u5e94\u7528\u4e8e\u53f6\u7247\u7684\u65cb\u8f6c\u53d6\u51b3\u4e8e\u5e27\u7f16\u53f7\u3002\u5f53\u5bf9\u98ce\u8f66\u5e94\u7528\u5efa\u6a21\u53d8\u6362\u65f6\uff0c\u65cb\u8f6c\u7684\u53f6\u7247\u4f5c\u4e3a\u6574\u4f53\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u7f29\u653e\u548c\u79fb\u52a8\u3002\u8fd9\u662f\u5c42\u6b21\u5efa\u6a21\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u53f6\u7247\u662f\u98ce\u8f66\u7684\u5b50\u5bf9\u8c61\u3002\u53f6\u7247\u7684\u65cb\u8f6c\u662f\u5c06\u53f6\u7247\u653e\u7f6e\u5230\u98ce\u8f66\u5bf9\u8c61\u4e2d\u7684\u5efa\u6a21\u53d8\u6362\u7684\u4e00\u90e8\u5206\u3002\u7136\u540e\uff0c\u8fdb\u4e00\u6b65\u7684\u5efa\u6a21\u53d8\u6362\u88ab\u5e94\u7528\u5230\u98ce\u8f66\u5bf9\u8c61\u4e2d\u4ee5\u5c06\u5176\u653e\u7f6e\u5728\u573a\u666f\u4e2d\u3002</p> <p>\u6587\u4ef6java2d/HierarchicalModeling2D.java\u5305\u542b\u4e86\u8fd9\u4e2a\u793a\u4f8b\u7684Java\u7248\u672c\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\u3002\u672c\u4e66\u7684\u4e0b\u4e00\u8282\u6db5\u76d6\u4e86Java\u4e2d\u7684\u56fe\u5f62\u7f16\u7a0b\u3002\u4e00\u65e6\u4f60\u719f\u6089\u4e86\u90a3\u90e8\u5206\u5185\u5bb9\uff0c\u4f60\u5e94\u8be5\u770b\u4e00\u4e0b\u6e90\u4ee3\u7801\uff0c\u7279\u522b\u662fpaintComponent()\u65b9\u6cd5\uff0c\u5b83\u7ed8\u5236\u6574\u4e2a\u573a\u666f\u3002\u540c\u6837\u7684\u793a\u4f8b\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u573a\u666f\u56feAPI\uff0c\u5728canvas2d/HierarchicalModel2D.html\u4e2d\u7528JavaScript\u5b9e\u73b0\u3002</p> <p>A major motivation for introducing a new coordinate system is that it should be possible to use the coordinate system that is most natural to the scene that you want to draw. We can extend this idea to individual objects in a scene: When drawing an object, use the coordinate system that is most natural for the object.</p> <p>Usually, we want an object in its natural coordinates to be centered at the origin, (0,0), or at least to use the origin as a convenient reference point. Then, to place it in the scene, we can use a scaling transform, followed by a rotation, followed by a translation to set its size, orientation, and position in the scene. Recall that transformations used in this way are called modeling transformations. The transforms are often applied in the order scale, then rotate, then translate, because scaling and rotation leave the reference point, (0,0), fixed. Once the object has been scaled and rotated, it's easy to use a translation to move the reference point to any desired point in the scene. (Of course, in a particular case, you might not need all three operations.) Remember that in the code, the transformations are specified in the opposite order from the order in which they are applied to the object and that the transformations are specified before drawing the object. So in the code, the translation would come first, followed by the rotation and then the scaling. Modeling transforms are not always composed in this order, but it is the most common usage.</p> <p>The modeling transformations that are used to place an object in the scene should not affect other objects in the scene. To limit their application to just the one object, we can save the current transformation before starting work on the object and restore it afterwards. How this is done differs from one graphics API to another, but let's suppose here that there are subroutines <code>saveTransform()</code> and <code>restoreTransform()</code> for performing those tasks. That is, <code>saveTransform</code> will make a copy of the modeling transformation that is currently in effect and store that copy. It does not change the current transformation; it merely saves a copy. Later, when restoreTransform is called, it will retrieve that copy and will replace the current modeling transform with the retrieved transform. Typical code for drawing an object will then have the form:</p> <pre><code>saveTransform()\ntranslate(dx,dy) // move object into position\nrotate(r)        // set the orientation of the object\nscale(sx,sy)     // set the size of the object\n    .\n    .  // draw the object, using its natural coordinates\n    .\nrestoreTransform()\n</code></pre> <p>Note that we don't know and don't need to know what the saved transform does. Perhaps it is simply the so-called identity transform, which is a transform that doesn't modify the coordinates to which it is applied. Or there might already be another transform in place, such as a coordinate transform that affects the scene as a whole. The modeling transform for the object is effectively applied in addition to any other transform that was specified previously. The modeling transform moves the object from its natural coordinates into its proper place in the scene. Then on top of that, a coordinate transform that is applied to the scene as a whole would carry the object along with it.</p> <p>Now let's extend this idea. Suppose that the object that we want to draw is itself a complex entity, made up of a number of smaller objects. Think, for example, of a potted flower made up of pot, stem, leaves, and bloom. We would like to be able to draw the smaller component objects in their own natural coordinate systems, just as we do the main object. For example, we would like to specify the bloom in a coordinate system in which the center of the bloom is at (0,0). But this is easy: We draw each small component object, such as the bloom, in its own coordinate system, and use a modeling transformation to move the sub-object into position within the main object. We are composing the complex object in its own natural coordinate system as if it were a complete scene.</p> <p>On top of that, we can apply another modeling transformation to the complex object as a whole, to move it into the actual scene; the sub-objects of the complex object are carried along with it. That is, the overall transformation that applies to a sub-object consists of a modeling transformation that places the sub-object into the complex object, followed by the transformation that places the complex object into the scene.</p> <p>In fact, we can build objects that are made up of smaller objects which in turn are made up of even smaller objects, to any level. For example, we could draw the bloom's petals in their own coordinate systems, then apply modeling transformations to place the petals into the natural coordinate system for the bloom. There will be another transformation that moves the bloom into position on the stem, and yet another transformation that places the entire potted flower into the scene. This is hierarchical modeling.</p> <p>Let's look at a little example. Suppose that we want to draw a simple 2D image of a cart with two wheels.</p> <p> </p> <p>This cart is used as one part of a complex scene in an example below. The body of the cart can be drawn as a pair of rectangles. For the wheels, suppose that we have written a subroutine</p> <pre><code>drawWheel()\n</code></pre> <p>that draws a wheel. This subroutine draws the wheel in its own natural coordinate system. In this coordinate system, the wheel is centered at (0,0) and has radius 1.</p> <p>In the cart's coordinate system, I found it convenient to use the midpoint of the base of the large rectangle as the reference point. I assume that the positive direction of the y-axis points upward, which is the common convention in mathematics. The rectangular body of the cart has width 6 and height 2, so the coordinates of the lower left corner of the rectangle are (-3,0), and we can draw it with a command such as fillRectangle(-3,0,6,2). The top of the cart is a smaller red rectangle, which can be drawn in a similar way. To complete the cart, we need to add two wheels to the object. To make the size of the wheels fit the cart, they need to be scaled. To place them in the correct positions relative to body of the cart, one wheel must be translated to the left and the other wheel, to the right. When I coded this example, I had to play around with the numbers to get the right sizes and positions for the wheels, and I found that the wheels looked better if I also moved them down a bit. Using the usual techniques of hierarchical modeling, we save the current transform before drawing each wheel, and we restore it after drawing the wheel. This restricts the effect of the modeling transformation for the wheel to that wheel alone, so that it does not affect any other part of the cart. Here is pseudocode for a subroutine that draws the cart in its own coordinate system:</p> <pre><code>subroutine drawCart() :\nsaveTransform()       // save the current transform\ntranslate(-1.65,-0.1) // center of first wheel will be at (-1.65,-0.1)\nscale(0.8,0.8)        // scale to reduce radius from 1 to 0.8\ndrawWheel()           // draw the first wheel\nrestoreTransform()    // restore the saved transform \nsaveTransform()       // save it again\ntranslate(1.5,-0.1)   // center of second wheel will be at (1.5,-0.1)\nscale(0.8,0.8)        // scale to reduce radius from 1 to 0.8\ndrawWheel()           // draw the second wheel\nrestoreTransform()    // restore the transform\nsetDrawingColor(RED)  // use red color to draw the rectangles\nfillRectangle(-3, 0, 6, 2)      // draw the body of the cart\nfillRectangle(-2.3, 1, 2.6, 1)  // draw the top of the cart\n</code></pre> <p>It's important to note that the same subroutine is used to draw both wheels. The reason that two wheels appear in the picture in different positions is that different modeling transformations are in effect for the two subroutine calls.</p> <p>Once we have this cart-drawing subroutine, we can use it to add a cart to a scene. When we do this, we apply another modeling transformation to the cart as a whole. Indeed, we could add several carts to the scene, if we wanted, by calling the drawCart subroutine several times with different modeling transformations.</p> <p>You should notice the analogy here: Building up a complex scene out of objects is similar to building up a complex program out of subroutines. In both cases, you can work on pieces of the problem separately, you can compose a solution to a big problem from solutions to smaller problems, and once you have solved a problem, you can reuse that solution in several places.</p> <p>Here is a demo that uses the cart in an animated scene:</p> <p></p> <p></p> <p>You can probably guess how hierarchical modeling is used to draw the three windmills in this example. There is a drawWindmill method that draws a windmill in its own coordinate system. Each of the windmills in the scene is then produced by applying a different modeling transform to the standard windmill. Furthermore, the windmill is itself a complex object that is constructed from several sub-objects using various modeling transformations.</p> <p>It might not be so easy to see how different parts of the scene can be animated. In fact, animation is just another aspect of modeling. A computer animation consists of a sequence of frames. Each frame is a separate image, with small changes from one frame to the next. From our point of view, each frame is a separate scene and has to be drawn separately. The same object can appear in many frames. To animate the object, we can simply apply a different modeling transformation to the object in each frame. The parameters used in the transformation can be computed from the current time or from the frame number. To make a cart move from left to right, for example, we might apply a modeling transformation</p> <pre><code>translate( frameNumber * 0.1, 0 )\n</code></pre> <p>to the cart, where frameNumber is the frame number. In each frame, the cart will be 0.1 units farther to the right than in the previous frame. (In fact, in the actual program, the translation that is applied to the cart is</p> <pre><code>translate( -3 + 13*(frameNumber % 300) / 300.0,  0 )\n</code></pre> <p>which moves the reference point of the cart from -3 to 13 along the horizontal axis every 300 frames. In the coordinate system that is used for the scene, the x-coordinate ranges from 0 to 7, so this puts the cart outside the scene for much of the loop.)</p> <p>The really neat thing is that this type of animation works with hierarchical modeling. For example, the drawWindmill method doesn't just draw a windmill\u2014it draws an animated windmill, with turning vanes. That just means that the rotation applied to the vanes depends on the frame number. When a modeling transformation is applied to the windmill, the rotating vanes are scaled and moved as part of the object as a whole. This is an example of hierarchical modeling. The vanes are sub-objects of the windmill. The rotation of the vanes is part of the modeling transformation that places the vanes into the windmill object. Then a further modeling transformation is applied to the windmill object to place it in the scene.</p> <p>The file java2d/HierarchicalModeling2D.java contains the complete source code for a Java version of this example. The next section of this book covers graphics programming in Java. Once you are familiar with that, you should take a look at the source code, especially the paintComponent() method, which draws the entire scene. The same example, using the same scene graph API, is implemented in JavaScript in canvas2d/HierarchicalModel2D.html.</p>"},{"location":"cn/c2/s4/#242-\u573a\u666f\u56fe","title":"2.4.2  \u573a\u666f\u56fe","text":"<p>Scene Graphs</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u590d\u6742\u573a\u666f\u7684\u7ec4\u4ef6\u5f62\u6210\u4e86\u4e00\u4e2a\u7ed3\u6784\u3002\u5728\u8fd9\u4e2a\u7ed3\u6784\u4e2d\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u4e0e\u5176\u5305\u542b\u7684\u5b50\u5bf9\u8c61\u76f8\u5173\u8054\u3002\u5982\u679c\u573a\u666f\u662f\u5206\u5c42\u7684\uff0c\u90a3\u4e48\u7ed3\u6784\u5c31\u662f\u5206\u5c42\u7684\u3002\u8fd9\u79cd\u7ed3\u6784\u88ab\u79f0\u4e3a\u573a\u666f\u56fe(scene graph)\u3002\u573a\u666f\u56fe\u662f\u4e00\u79cd\u7c7b\u4f3c\u6811\u7684\u7ed3\u6784\uff0c\u6839\u8868\u793a\u6574\u4e2a\u573a\u666f\uff0c\u6839\u7684\u5b50\u8282\u70b9\u8868\u793a\u573a\u666f\u4e2d\u7684\u9876\u7ea7\u5bf9\u8c61\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6211\u4eec\u53ef\u4ee5\u53ef\u89c6\u5316\u6211\u4eec\u793a\u4f8b\u573a\u666f\u7684\u573a\u666f\u56fe\uff1a</p> <p> </p> <p>\u5728\u8fd9\u4e2a\u56fe\u4e2d\uff0c\u4e00\u4e2a\u5355\u72ec\u7684\u5bf9\u8c61\u53ef\u4ee5\u4e0e\u4e00\u4e2a\u6216\u591a\u4e2a\u7236\u5bf9\u8c61\u6709\u591a\u4e2a\u8fde\u63a5\u3002\u6bcf\u4e2a\u8fde\u63a5\u8868\u793a\u8be5\u5bf9\u8c61\u5728\u5176\u7236\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4f8b\u5982\uff0c\u201c\u586b\u5145\u7684\u6b63\u65b9\u5f62\u201d\u5bf9\u8c61\u5728\u624b\u63a8\u8f66\u548c\u98ce\u8f66\u4e2d\u4f5c\u4e3a\u5b50\u5bf9\u8c61\u51fa\u73b0\u3002\u5b83\u5728\u624b\u63a8\u8f66\u4e2d\u4f7f\u7528\u4e86\u4e24\u6b21\uff0c\u5728\u98ce\u8f66\u4e2d\u4f7f\u7528\u4e86\u4e00\u6b21\u3002\uff08\u624b\u63a8\u8f66\u5305\u542b\u4e24\u4e2a\u7ea2\u8272\u77e9\u5f62\uff0c\u5b83\u4eec\u88ab\u521b\u5efa\u4e3a\u5177\u6709\u975e\u5747\u5300\u7f29\u653e\u7684\u6b63\u65b9\u5f62\uff1b\u98ce\u8f66\u7684\u6746\u662f\u4e00\u4e2a\u7f29\u653e\u7684\u6b63\u65b9\u5f62\u3002\uff09\u201c\u586b\u5145\u7684\u5706\u201d\u5728\u592a\u9633\u4e2d\u4f7f\u7528\uff0c\u5e76\u5728\u8f6e\u5b50\u4e2d\u4f7f\u7528\u4e86\u4e24\u6b21\u3002\u201c\u7ebf\u201d\u5728\u592a\u9633\u4e2d\u4f7f\u7528\u4e8612\u6b21\uff0c\u5728\u8f6e\u5b50\u4e2d\u4f7f\u7528\u4e8612\u6b21\uff1b\u6211\u753b\u4e86\u4e00\u6839\u7c97\u7bad\u5934\uff0c\u6807\u670912\uff0c\u8868\u793a12\u4e2a\u8fde\u63a5\u3002\u8f6e\u5b50\u53c8\u5728\u624b\u63a8\u8f66\u4e2d\u4f7f\u7528\u4e86\u4e24\u6b21\u3002\uff08\u51fa\u4e8e\u7a7a\u95f4\u539f\u56e0\uff0c\u6211\u7684\u56fe\u8868\u4e2d\u7701\u7565\u4e86\u573a\u666f\u4e2d\u586b\u5145\u7684\u6b63\u65b9\u5f62\u7684\u4e24\u4e2a\u51fa\u73b0\uff1a\u5b83\u4eec\u7528\u4e8e\u5236\u4f5c\u9053\u8def\u548c\u9053\u8def\u4e2d\u592e\u7684\u7ebf\u3002\uff09</p> <p>\u56fe\u7247\u4e2d\u7684\u6bcf\u4e2a\u7bad\u5934\u90fd\u53ef\u4ee5\u4e0e\u5c06\u5b50\u5bf9\u8c61\u653e\u7f6e\u5230\u5176\u7236\u5bf9\u8c61\u4e2d\u7684\u5efa\u6a21\u53d8\u6362\u76f8\u5173\u8054\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5305\u542b\u591a\u4e2a\u5b50\u5bf9\u8c61\u7684\u526f\u672c\u65f6\uff0c\u8fde\u63a5\u5b50\u5bf9\u8c61\u4e0e\u5bf9\u8c61\u7684\u6bcf\u4e2a\u7bad\u5934\u5c06\u5177\u6709\u4e0d\u540c\u7684\u5173\u8054\u5efa\u6a21\u53d8\u6362\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u526f\u672c\uff0c\u5bf9\u8c61\u662f\u76f8\u540c\u7684\uff1b\u53ea\u6709\u53d8\u6362\u4e0d\u540c\u3002</p> <p>\u867d\u7136\u573a\u666f\u56fe\u5728\u6982\u5ff5\u4e0a\u5b58\u5728\uff0c\u4f46\u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u5b83\u53ea\u662f\u9690\u5f0f\u5b58\u5728\u7684\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u63d0\u5230\u7684\u7a0b\u5e8f\u7684Java\u7248\u672c\u4ee5\u201c\u8fc7\u7a0b\u5316\u201d\u7684\u65b9\u5f0f\u7ed8\u5236\u56fe\u50cf\uff0c\u5373\u901a\u8fc7\u8c03\u7528\u5b50\u7a0b\u5e8f\u3002\u6ca1\u6709\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\u573a\u666f\u56fe\u3002\u76f8\u53cd\uff0c\u573a\u666f\u56fe\u9690\u542b\u5728\u7ed8\u5236\u573a\u666f\u7684\u5b50\u7a0b\u5e8f\u8c03\u7528\u5e8f\u5217\u4e2d\u3002\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u5b50\u7a0b\u5e8f\uff0c\u6bcf\u4e2a\u7bad\u5934\u90fd\u662f\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u8c03\u7528\u3002\u4f7f\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u7ed8\u5236\u5404\u79cd\u5bf9\u8c61\u3002\u6b63\u5982\u5b50\u8282 2.3.8\u4e2d\u6240\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u8ba1\u7b97\u673a\u53ea\u8ddf\u8e2a\u8868\u793a\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u6362\u7684\u201c\u5f53\u524d\u53d8\u6362\u201d\u3002\u5f53\u5b50\u7a0b\u5e8f\u7ed8\u5236\u5bf9\u8c61\u65f6\uff0c\u7a0b\u5e8f\u5728\u8c03\u7528\u5b50\u7a0b\u5e8f\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u3002\u5b50\u7a0b\u5e8f\u8fd4\u56de\u540e\uff0c\u4fdd\u5b58\u7684\u53d8\u6362\u5c06\u88ab\u6062\u590d\u3002\u5728\u5b50\u7a0b\u5e8f\u5185\u90e8\uff0c\u5bf9\u8c61\u5728\u5176\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\uff0c\u53ef\u80fd\u8c03\u7528\u5176\u4ed6\u5b50\u7a0b\u5e8f\u4ee5\u7ed8\u5236\u5177\u6709\u81ea\u5df1\u7684\u5efa\u6a21\u53d8\u6362\u7684\u5b50\u5bf9\u8c61\u3002\u8fd9\u4e9b\u989d\u5916\u7684\u53d8\u6362\u5728\u5b50\u7a0b\u5e8f\u5916\u90e8\u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u4e3a\u5728\u8c03\u7528\u5b50\u7a0b\u5e8f\u4e4b\u524d\u751f\u6548\u7684\u53d8\u6362\u5728\u5b50\u7a0b\u5e8f\u8fd4\u56de\u540e\u5c06\u88ab\u6062\u590d\u3002</p> <p>\u573a\u666f\u56fe\u4e5f\u53ef\u4ee5\u7531\u7a0b\u5e8f\u4e2d\u7684\u5b9e\u9645\u6570\u636e\u7ed3\u6784\u8868\u793a\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e2d\uff0c\u573a\u666f\u4e2d\u7684\u56fe\u5f62\u5bf9\u8c61\u7531\u7a0b\u5e8f\u5bf9\u8c61\u8868\u793a\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u6784\u5efa\u9762\u5411\u5bf9\u8c61\u7684\u573a\u666f\u56feAPI\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5728Java\u4e2d\u5b9e\u73b0\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u770b\u4e00\u4e0bjava2d/SceneGraphAPI2D.java\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7ed8\u5236\u4e86\u4e0e\u524d\u9762\u793a\u4f8b\u76f8\u540c\u7684\u52a8\u753b\u573a\u666f\uff0c\u4f46\u5b83\u4f7f\u7528\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\u573a\u666f\uff0c\u800c\u4e0d\u662f\u8fc7\u7a0b\u5316\u7684\u65b9\u5f0f\u3002\u76f8\u540c\u7684\u573a\u666f\u56feAPI\u5728\u6b64\u9875\u9762\u65e9\u671f\u663e\u793a\u7684\u5b9e\u65f6\u6f14\u793a\u4e2d\u7528JavaScript\u5b9e\u73b0\uff0c\u9605\u8bfb\u5b8c\u7b2c2.6\u8282\u4e2d\u5173\u4e8eHTML\u753b\u5e03\u56fe\u5f62\u7684\u5185\u5bb9\u540e\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u5176\u6e90\u4ee3\u7801\u3002</p> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u65e0\u8bba\u662f\u5728Java\u8fd8\u662fJavaScript\u4e2d\uff0c\u573a\u666f\u56fe\u4e2d\u7684\u8282\u70b9\u90fd\u7531\u5c5e\u4e8e\u540d\u4e3aSceneGraphNode\u7684\u7c7b\u7684\u5bf9\u8c61\u8868\u793a\u3002SceneGraphNode\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u573a\u666f\u56fe\u4e2d\u7684\u5b9e\u9645\u8282\u70b9\u7531\u8be5\u7c7b\u7684\u5b50\u7c7b\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c\u6709\u4e00\u4e2a\u540d\u4e3aCompoundObject\u7684\u5b50\u7c7b\uff0c\u7528\u4e8e\u8868\u793a\u7531\u5b50\u5bf9\u8c61\u7ec4\u6210\u7684\u590d\u6742\u56fe\u5f62\u5bf9\u8c61\u3002\u7c7b\u578b\u4e3aCompoundObject\u7684\u53d8\u91cfobj\u5305\u62ec\u4e00\u4e2a\u65b9\u6cd5obj.add(subobj)\uff0c\u7528\u4e8e\u5c06\u5b50\u5bf9\u8c61\u6dfb\u52a0\u5230\u590d\u5408\u5bf9\u8c61\u4e2d\u3002</p> <p>\u5f53\u5c06\u573a\u666f\u56fe\u5b9e\u73b0\u4e3a\u7531\u5bf9\u8c61\u7ec4\u6210\u7684\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u53d8\u6362\u3002\u4e00\u4e2a\u9009\u62e9\u662f\u5141\u8bb8\u5c06\u53d8\u6362\u4e0e\u573a\u666f\u56fe\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u5173\u8054\u8d77\u6765\u3002\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u51b3\u5b9a\u4f7f\u7528\u7279\u6b8a\u8282\u70b9\u6765\u8868\u793a\u53d8\u6362\uff0c\u4f5c\u4e3aTransformedObject\u7c7b\u578b\u7684\u5bf9\u8c61\u3002TransformedObject\u662f\u4e00\u4e2a\u5305\u542b\u6307\u5411\u53e6\u4e00\u4e2aSceneGraphNode\u7684\u94fe\u63a5\u4ee5\u53ca\u5305\u542b\u8981\u5e94\u7528\u4e8e\u8be5\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\u7684SceneGraphNode\u3002\u5efa\u6a21\u53d8\u6362\u662f\u4ee5\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u91cf\u5f62\u5f0f\u7ed9\u51fa\u7684\uff0c\u8fd9\u4e9b\u91cf\u662f\u5bf9\u8c61\u4e2d\u7684\u5b9e\u4f8b\u53d8\u91cf\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u65e0\u8bba\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u5b9e\u4f8b\u53d8\u91cf\u7684\u987a\u5e8f\u5982\u4f55\uff0c\u8fd9\u4e9b\u53d8\u6362\u603b\u662f\u6309\u7167\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u987a\u5e8f\u5e94\u7528\u3002\u5982\u679c\u8981\u8fdb\u884c\u5e73\u79fb\u540e\u65cb\u8f6c\u7684\u64cd\u4f5c\uff0c\u5219\u9700\u8981\u4f7f\u7528\u4e24\u4e2aTransformedObject\u6765\u5b9e\u73b0\uff0c\u56e0\u4e3a\u5728\u540c\u4e00\u4e2aTransformedObject\u4e2d\u7684\u5e73\u79fb\u548c\u65cb\u8f6c\u5c06\u6309\u7167\u65cb\u8f6c-\u7136\u540e-\u5e73\u79fb\u7684\u987a\u5e8f\u5e94\u7528\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u8bbe\u7f6e\u5668\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7b49\u4e8e\u5bf9\u8c61\u672c\u8eab\u3002\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u5c06\u8c03\u7528\u65b9\u6cd5\u7684\u94fe\u5f0f\u8c03\u7528\u94fe\u6210\u4e00\u4e2a\u8bed\u53e5\uff0c\u4f8b\u5982</p> <pre><code>transformedObject.setScale(5,2).setTranslation(3.5,0);\n</code></pre> <p>\u751a\u81f3\u53ef\u4ee5\u8fd9\u6837\u8bf4</p> <pre><code>world.add(\n    new TransformedObject(windmill).setScale(0.4,0.4).setTranslation(2.2,1.3)\n);\n</code></pre> <p>\u8fd9\u79cd\u94fe\u5f0f\u8c03\u7528\u53ef\u4ee5\u4f7f\u4ee3\u7801\u66f4\u7d27\u51d1\uff0c\u53ef\u4ee5\u6d88\u9664\u8bb8\u591a\u989d\u5916\u7684\u4e34\u65f6\u53d8\u91cf\u7684\u9700\u8981\u3002</p> <p>\u8fd8\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u989c\u8272\u3002\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u521b\u5efa\u4e00\u4e2a\u7c7b\u4f3c\u4e8eTransformedObject\u7684ColoredObject\u7c7b\u3002\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u53ea\u662f\u5728\u4e3bScreenGraphNode\u7c7b\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2asetColor()\u65b9\u6cd5\u3002\u8bbe\u7f6e\u5728\u590d\u5408\u5bf9\u8c61\u4e0a\u7684\u989c\u8272\u4f1a\u88ab\u5176\u5b50\u5bf9\u8c61\u7ee7\u627f\uff0c\u9664\u975e\u5728\u5b50\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u4e86\u4e0d\u540c\u7684\u989c\u8272\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u590d\u5408\u5bf9\u8c61\u4e0a\u7684\u989c\u8272\u5145\u5f53\u5176\u5b50\u5bf9\u8c61\u7684\u9ed8\u8ba4\u989c\u8272\uff0c\u4f46\u53ef\u4ee5\u5728\u5b50\u5bf9\u8c61\u4e0a\u8986\u76d6\u989c\u8272\u3002</p> <p>\u9664\u4e86\u590d\u5408\u5bf9\u8c61\u548c\u53d8\u6362\u5bf9\u8c61\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u573a\u666f\u56fe\u8282\u70b9\u6765\u8868\u793a\u5360\u636e\u573a\u666f\u56fe\u5e95\u5c42\u7684\u57fa\u672c\u56fe\u5f62\u5bf9\u8c61\u3002\u8fd9\u4e9b\u8282\u70b9\u5728\u6700\u540e\u8fdb\u884c\u5b9e\u9645\u7ed8\u5236\u3002</p> <p>\u5bf9\u4e8e\u719f\u6089\u6570\u636e\u7ed3\u6784\u7684\u4eba\u6765\u8bf4\uff0c\u6211\u8981\u6ce8\u610f\u7684\u662f\uff0c\u573a\u666f\u56fe\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u201c\u6709\u5411\u65e0\u73af\u56fe\u201d\u6216\u201cDAG\u201d\u7684\u4f8b\u5b50\u3002\u7ed8\u5236\u573a\u666f\u7684\u8fc7\u7a0b\u6d89\u53ca\u5bf9\u8be5DAG\u7684\u904d\u5386\u3002\u672f\u8bed\u201c\u65e0\u73af\u201d\u610f\u5473\u7740\u56fe\u4e2d\u4e0d\u80fd\u6709\u5faa\u73af\u3002\u5bf9\u4e8e\u573a\u666f\u56fe\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u660e\u663e\u7684\u8981\u6c42\uff0c\u5373\u4e00\u4e2a\u5bf9\u8c61\u4e0d\u80fd\u662f\u5176\u672c\u8eab\u7684\u5b50\u5bf9\u8c61\uff0c\u65e0\u8bba\u662f\u76f4\u63a5\u8fd8\u662f\u95f4\u63a5\u7684\u3002</p> <p>Logically, the components of a complex scene form a structure. In this structure, each object is associated with the sub-objects that it contains. If the scene is hierarchical, then the structure is hierarchical. This structure is known as a scene graph. A scene graph is a tree-like structure, with the root representing the entire scene, the children of the root representing the top-level objects in the scene, and so on. We can visualize the scene graph for our sample scene:</p> <p> </p> <p>In this drawing, a single object can have several connections to one or more parent objects. Each connection represents one occurrence of the object in its parent object. For example, the \"filled square\" object occurs as a sub-object in the cart and in the windmill. It is used twice in the cart and once in the windmill. (The cart contains two red rectangles, which are created as squares with a non-uniform scaling; the pole of the windmill is made as a scaled square.) The \"filled circle\" is used in the sun and is used twice in the wheel. The \"line\" is used 12 times in the sun and 12 times in the wheel; I've drawn one thick arrow, marked with a 12, to represent 12 connections. The wheel, in turn, is used twice in the cart. (My diagram leaves out, for lack of space, two occurrences of the filled square in the scene: It is used to make the road and the line down the middle of the road.)</p> <p>Each arrow in the picture can be associated with a modeling transformation that places the sub-object into its parent object. When an object contains several copies of a sub-object, each arrow connecting the sub-object to the object will have a different associated modeling transformation. The object is the same for each copy; only the transformation differs.</p> <p>Although the scene graph exists conceptually, in some applications it exists only implicitly. For example, the Java version of the program that was mentioned above draws the image \"procedurally,\" that is, by calling subroutines. There is no data structure to represent the scene graph. Instead, the scene graph is implicit in the sequence of subroutine calls that draw the scene. Each node in the graph is a subroutine, and each arrow is a subroutine call. The various objects are drawn using different modeling transformations. As discussed in Subsection 2.3.8, the computer only keeps track of a \"current transformation\" that represents all the transforms that are applied to an object. When an object is drawn by a subroutine, the program saves the current transformation before calling the subroutine. After the subroutine returns, the saved transformation is restored. Inside the subroutine, the object is drawn in its own coordinate system, possibly calling other subroutines to draw sub-objects with their own modeling transformations. Those extra transformations will have no effect outside of the subroutine, since the transform that is in effect before the subroutine is called will be restored after the subroutine returns.</p> <p>It is also possible for a scene graph to be represented by an actual data structure in the program. In an object-oriented approach, the graphical objects in the scene are represented by program objects. There are many ways to build an object-oriented scene graph API. For a simple example implemented in Java, you can take a look at java2d/SceneGraphAPI2D.java. This program draws the same animated scene as the previous example, but it represents the scene with an object-oriented data structure rather than procedurally. The same scene graph API is implemented in JavaScript in the live demo shown earlier on this page, and you might take a look at its source code after you read about HTML canvas graphics in Section 2.6.</p> <p>In the example program, both in Java and in JavaScript, a node in the scene graph is represented by an object belonging to a class named SceneGraphNode. SceneGraphNode is an abstract class, and actual nodes in the scene graph are defined by subclasses of that class. For example, there is a subclass named CompoundObject to represent a complex graphical object that is made up of sub-objects. A variable, obj, of type CompoundObject includes a method obj.add(subobj) for adding a sub-object to the compound object.</p> <p>When implementing a scene graph as a data structure made up of objects, a decision has to be made about how to handle transforms. One option is to allow transformations to be associated with any node in the scene graph. In this case, however, I decided to use special nodes to represent transforms as objects of type TransformedObject. A TransformedObject is a SceneGraphNode that contains a link to another SceneGraphNode and also contains a modeling transformation that is to be applied to that object. The modeling transformation is given in terms of scaling, rotation, and translation amounts that are instance variables in the object. It is worth noting that these are always applied in the order scale, then rotate, then translate, no matter what order the instance variables are set in the code. If you want to do a translation followed by a rotation, you will need two TransformedObject to implement it, since a translation plus a rotation in the same TransformedObject would be applied in the order rotate-then-translate. It is also worth noting that the setter methods for the scaling, rotation, and translation have a return value that is equal to the object. This makes it possible to chain calls to the methods into a single statement such as</p> <pre><code>transformedObject.setScale(5,2).setTranslation(3.5,0);\n</code></pre> <p>and even say things like</p> <pre><code>world.add(\n    new TransformedObject(windmill).setScale(0.4,0.4).setTranslation(2.2,1.3)\n);\n</code></pre> <p>This type of chaining can make for more compact code and can eliminate the need for a lot of extra temporary variables.</p> <p>Another decision has to be made about how to handle color. One possibility would be to make a ColoredObject class similar to TransformedObject. However, in this case I just added a setColor() method to the main ScreenGraphNode class. A color that is set on a compound object is inherited by any sub-objects, unless a different color is set on the sub-object. In other words, a color on a compound object acts as a default color for its sub-objects, but color can be overridden on the sub-objects.</p> <p>In addition to compound objects and transformed objects, we need scene graph nodes to represent the basic graphical objects that occupy the bottom level of the scene graph. These are the nodes that do the actual drawing in the end.</p> <p>For those who are familiar with data structures, I will note that a scene graph is actually an example of a \"directed acyclic graph\" or \"dag.\" The process of drawing the scene involves a traversal of this dag. The term \"acyclic\" means that there can't be cycles in the graph. For a scene graph, this is the obvious requirement that an object cannot be a sub-object, either directly or indirectly, of itself.</p>"},{"location":"cn/c2/s4/#243-\u53d8\u6362\u5806\u6808","title":"2.4.3  \u53d8\u6362\u5806\u6808","text":"<p>The Transform Stack</p> \u4e2d\u6587\u82f1\u6587 <p>\u5047\u8bbe\u60a8\u7f16\u5199\u4e86\u4e00\u4e2a\u7ed8\u5236\u5bf9\u8c61\u7684\u5b50\u4f8b\u7a0b\u3002\u5728\u5b50\u4f8b\u7a0b\u7684\u5f00\u59cb,\u60a8\u4f7f\u7528\u8bf8\u5982<code>saveTransform()</code>\u4e4b\u7c7b\u7684\u4f8b\u7a0b\u6765\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\u3002\u5728\u5b50\u4f8b\u7a0b\u7684\u672b\u5c3e,\u60a8\u8c03\u7528<code>restoreTransform()</code>\u5c06\u5f53\u524d\u53d8\u6362\u91cd\u7f6e\u4e3a\u5df2\u4fdd\u5b58\u7684\u503c\u3002\u73b0\u5728,\u4e3a\u4e86\u8fd9\u5728\u5206\u5c42\u56fe\u5f62\u4e2d\u6b63\u786e\u5de5\u4f5c,\u8fd9\u4e9b\u4f8b\u7a0b\u5b9e\u9645\u4e0a\u5fc5\u987b\u4f7f\u7528\u53d8\u6362\u7684\u5806\u6808(stack)\u3002(\u56de\u60f3\u4e00\u4e0b,\u5806\u6808\u53ea\u662f\u4e00\u4e2a\u5217\u8868,\u53ef\u4ee5\u5728\u5217\u8868\u7684\u4e00\u7aef\u6dfb\u52a0\u6216\"\u63a8\u5165\"\u9879\u76ee,\u5e76\u4ece\u540c\u4e00\u7aef\u79fb\u9664\u6216\"\u5f39\u51fa\"\u9879\u76ee\u3002)\u95ee\u9898\u5728\u4e8e,\u5728\u7ed8\u5236\u590d\u6742\u5bf9\u8c61\u65f6,\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u5b50\u4f8b\u7a0b\u3002\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u540c\u65f6\u6fc0\u6d3b\u591a\u4e2a\u7ed8\u56fe\u5b50\u4f8b\u7a0b,\u6bcf\u4e2a\u5b50\u4f8b\u7a0b\u90fd\u6709\u81ea\u5df1\u4fdd\u5b58\u7684\u53d8\u6362\u3002\u5f53\u5728\u53e6\u4e00\u4e2a\u53d8\u6362\u5df2\u7ecf\u4fdd\u5b58\u7684\u60c5\u51b5\u4e0b\u4fdd\u5b58\u4e00\u4e2a\u53d8\u6362\u65f6,\u7cfb\u7edf\u9700\u8981\u8bb0\u4f4f\u4e24\u4e2a\u53d8\u6362\u3002\u5f53\u8c03\u7528<code>restoreTransform()</code>\u65f6,\u5e94\u8be5\u6062\u590d\u6700\u8fd1\u4fdd\u5b58\u7684\u53d8\u6362\u3002</p> <p>\u5806\u6808\u6b63\u597d\u5177\u6709\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\u6240\u9700\u7684\u7ed3\u6784\u3002\u5728\u5f00\u59cb\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d,\u60a8\u4f1a\u5c06\u5f53\u524d\u53d8\u6362\u63a8\u5165\u5806\u6808\u3002\u7ed8\u5236\u5bf9\u8c61\u540e,\u60a8\u4f1a\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u53d8\u6362\u3002\u5728\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4,\u5982\u679c\u5bf9\u8c61\u662f\u5206\u5c42\u7684,\u5219\u5176\u5b50\u5bf9\u8c61\u7684\u53d8\u6362\u5c06\u6839\u636e\u9700\u8981\u88ab\u63a8\u5165\u548c\u5f39\u51fa\u5806\u6808\u3002</p> <p>\u4e00\u4e9b\u56fe\u5f62API\u5df2\u7ecf\u5b9a\u4e49\u4e86\u53d8\u6362\u5806\u6808\u3002\u4f8b\u5982,\u539f\u59cb\u7684OpenGL API\u5305\u62ecglPushMatrix()\u548cglPopMatrix()\u51fd\u6570,\u7528\u4e8e\u4f7f\u7528\u5185\u7f6e\u4e8eOpenGL\u4e2d\u7684\u53d8\u6362\u77e9\u9635\u5806\u6808\u3002Java Graphics2D API\u6ca1\u6709\u5185\u7f6e\u7684\u53d8\u6362\u5806\u6808,\u4f46\u5b83\u786e\u5b9e\u6709\u83b7\u53d6\u548c\u8bbe\u7f6e\u5f53\u524d\u53d8\u6362\u7684\u65b9\u6cd5,\u8fd9\u4e9b\u83b7\u53d6\u548c\u8bbe\u7f6e\u65b9\u6cd5\u53ef\u4ee5\u4e0e\u663e\u5f0f\u7684\u5806\u6808\u6570\u636e\u7ed3\u6784\u4e00\u8d77\u4f7f\u7528,\u4ee5\u5b9e\u73b0\u5fc5\u8981\u7684\u64cd\u4f5c\u3002\u5f53\u6211\u4eec\u8f6c\u5411\u7528\u4e8e2D\u56fe\u5f62\u7684HTML canvas API\u65f6,\u6211\u4eec\u4f1a\u770b\u5230\u5b83\u5305\u542b\u540d\u4e3asave()\u548crestore()\u7684\u51fd\u6570,\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u5bf9\u5806\u6808\u7684\u63a8\u5165\u548c\u5f39\u51fa\u64cd\u4f5c\u3002\u8fd9\u4e9b\u51fd\u6570\u5bf9\u4e8e\u5b9e\u73b0HTML canvas\u7684\u5206\u5c42\u56fe\u5f62\u81f3\u5173\u91cd\u8981\u3002</p> <p>\u8ba9\u6211\u4eec\u8bd5\u7740\u5c06\u8fd9\u4e9b\u5168\u90e8\u7ed3\u5408\u8d77\u6765,\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u5e94\u7528\u4e8e\u793a\u4f8b\u573a\u666f\u4e2d\u524d\u8f6e\u8f66\u8f6e\u7684\u4e00\u4e2a\u586b\u5145\u5706\u5708\u8fd9\u6837\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\u3002\u8fd9\u91cc,\u6211\u91cd\u65b0\u6392\u5217\u4e86\u8be5\u573a\u666f\u56fe\u7684\u4e00\u90e8\u5206,\u5e76\u6dfb\u52a0\u4e86\u6807\u7b7e\u6765\u663e\u793a\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362:</p> <p> </p> <p>\u8f6e\u5b50\u7684\u65cb\u8f6c\u91cf\u548c\u8f66\u7684\u5e73\u79fb\u91cf\u88ab\u663e\u793a\u4e3a\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u52a8\u753b\u7684\u4e0d\u540c\u5e27\u4e2d\u662f\u4e0d\u540c\u7684\u3002\u5f53\u8ba1\u7b97\u673a\u5f00\u59cb\u7ed8\u5236\u573a\u666f\u65f6\uff0c\u751f\u6548\u7684\u5efa\u6a21\u53d8\u6362\u662f\u6052\u7b49\u53d8\u6362\uff0c\u5373\u6ca1\u6709\u4efb\u4f55\u53d8\u6362\u3002\u5728\u51c6\u5907\u7ed8\u5236\u8f66\u65f6\uff0c\u5b83\u901a\u8fc7\u5c06\u5f53\u524d\u53d8\u6362\uff08\u6052\u7b49\u53d8\u6362\uff09\u63a8\u5165\u5806\u6808\u6765\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\u3002\u7136\u540e\uff0c\u5b83\u901a\u8fc7\u5c06\u8f66\u7684\u5efa\u6a21\u53d8\u6362scale(0.3,0.3)\u548ctranslate(dx,0)\u4e0e\u5f53\u524d\u53d8\u6362\u76f8\u4e58\u6765\u4fee\u6539\u5f53\u524d\u53d8\u6362\u3002\u5f53\u7ed8\u5236\u8f6e\u5b50\u65f6\uff0c\u5b83\u518d\u6b21\u5c06\u5f53\u524d\u53d8\u6362\uff08\u6574\u4e2a\u8f66\u7684\u5efa\u6a21\u53d8\u6362\uff09\u63a8\u5165\u5806\u6808\uff0c\u5e76\u4fee\u6539\u5f53\u524d\u53d8\u6362\u4ee5\u8003\u8651\u8f6e\u5b50\u7684\u5efa\u6a21\u53d8\u6362\u3002\u7c7b\u4f3c\u5730\uff0c\u5f53\u7ed8\u5236\u586b\u5145\u5706\u65f6\uff0c\u5b83\u4fdd\u5b58\u8f6e\u5b50\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u7136\u540e\u5e94\u7528\u5706\u7684\u5efa\u6a21\u53d8\u6362\u3002</p> <p>\u5f53\u5706\u5b9e\u9645\u7ed8\u5236\u5728\u573a\u666f\u4e2d\u65f6\uff0c\u5b83\u4f1a\u901a\u8fc7\u7ec4\u5408\u53d8\u6362\u8fdb\u884c\u53d8\u6362\u3002\u8be5\u53d8\u6362\u5c06\u5706\u76f4\u63a5\u653e\u5165\u573a\u666f\u4e2d\uff0c\u4f46\u662f\u5b83\u662f\u7531\u5c06\u5706\u653e\u5165\u8f6e\u5b50\u7684\u53d8\u6362\u3001\u5c06\u8f6e\u5b50\u653e\u5165\u8f66\u4e2d\u7684\u53d8\u6362\u548c\u5c06\u8f66\u653e\u5165\u573a\u666f\u4e2d\u7684\u53d8\u6362\u7ec4\u6210\u7684\u3002\u5728\u7ed8\u5236\u5706\u4e4b\u540e\uff0c\u8ba1\u7b97\u673a\u4f7f\u7528\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u7684\u5f53\u524d\u53d8\u6362\u66ff\u6362\u5f53\u524d\u53d8\u6362\u3002\u90a3\u5c06\u662f\u6574\u4e2a\u8f6e\u5b50\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u5e76\u4e14\u8be5\u53d8\u6362\u5c06\u7528\u4e8e\u7ed8\u5236\u4efb\u4f55\u8fdb\u4e00\u6b65\u7684\u8f6e\u5b50\u90e8\u5206\u3002\u5f53\u5b8c\u6210\u8f6e\u5b50\u65f6\uff0c\u8f66\u7684\u53d8\u6362\u88ab\u5f39\u51fa\u3002\u5f53\u5b8c\u6210\u8f66\u65f6\uff0c\u539f\u59cb\u53d8\u6362\uff08\u6052\u7b49\u53d8\u6362\uff09\u88ab\u5f39\u51fa\u3002\u5f53\u8ba1\u7b97\u673a\u8fdb\u5165\u573a\u666f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u5b83\u518d\u6b21\u4ece\u6052\u7b49\u53d8\u6362\u4f5c\u4e3a\u8d77\u70b9\u5f00\u59cb\u6574\u4e2a\u8fc7\u7a0b\u3002</p> <p>\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u5f88\u590d\u6742\uff0c\u4f46\u6211\u5e94\u8be5\u5f3a\u8c03\uff0c\u8fd9\u662f\u8ba1\u7b97\u673a\u4e3a\u60a8\u6267\u884c\u7684\u64cd\u4f5c\u3002\u60a8\u7684\u8d23\u4efb\u53ea\u662f\u8bbe\u8ba1\u5404\u4e2a\u5bf9\u8c61\uff0c\u4f7f\u7528\u5b83\u4eec\u81ea\u5df1\u7684\u81ea\u7136\u5750\u6807\u7cfb\u3002\u4f5c\u4e3a\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u60a8\u6307\u5b9a\u4e86\u5e94\u7528\u4e8e\u8be5\u5bf9\u8c61\u7684\u5b50\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\u3002\u60a8\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u6784\u5efa\u6574\u4e2a\u573a\u666f\u3002\u8ba1\u7b97\u673a\u5c06\u4e3a\u60a8\u5c06\u6240\u6709\u5185\u5bb9\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u8003\u8651\u5230\u8bb8\u591a\u5c42\u6b21\u7684\u5206\u5c42\u7ed3\u6784\u3002\u60a8\u4e00\u6b21\u53ea\u9700\u5904\u7406\u7ed3\u6784\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u3002\u8fd9\u5c31\u662f\u5206\u5c42\u8bbe\u8ba1\u7684\u5a01\u529b\u6240\u5728\uff1b\u8fd9\u5c31\u662f\u5b83\u5982\u4f55\u5e2e\u52a9\u60a8\u5904\u7406\u590d\u6742\u6027\u3002</p> <p>Suppose that you write a subroutine to draw an object. At the beginning of the subroutine, you use a routine such as saveTransform() to save a copy of the current transform. At the end of the subroutine, you call restoreTransform() to reset the current transform back to the value that was saved. Now, in order for this to work correctly for hierarchical graphics, these routines must actually use a stack of transforms. (Recall that a stack is simply a list where items can be added, or \"pushed,\" onto one end of the list and removed, or \"popped,\" from the same end.) The problem is that when drawing a complex object, one subroutine can call other subroutines. This means that several drawing subroutines can be active at the same time, each with its own saved transform. When a transform is saved after another transform has already been saved, the system needs to remember both transforms. When restoreTransform() is called, it is the most recently saved transform that should be restored.</p> <p>A stack has exactly the structure that is needed to implement these operations. Before you start drawing an object, you would push the current transform onto the stack. After drawing the object, you would pop the transform from the stack. Between those two operations, if the object is hierarchical, the transforms for its sub-objects will have been pushed onto and popped from the stack as needed.</p> <p>Some graphics APIs come with transform stacks already defined. For example, the original OpenGL API includes the functions glPushMatrix() and glPopMatrix() for using a stack of transformation matrices that is built into OpenGL. The Java Graphics2D API does not include a built-in stack of transforms, but it does have methods for getting and setting the current transform, and the get and set methods can be used with an explicit stack data structure to implement the necessary operations. When we turn to the HTML canvas API for 2D graphics, we'll see that it includes functions named save() and restore() that are actually push and pop operations on a stack. These functions are essential to implementing hierarchical graphics for an HTML canvas.</p> <p>Let's try to bring this all together by considering how it applies to a simple object in a complex scene: one of the filled circles that is part of the front wheel on the cart in our example scene. Here, I have rearranged part of the scene graph for that scene, and I've added labels to show the modeling transformations that are applied to each object:</p> <p> </p> <p>The rotation amount for the wheel and the translation amount for the cart are shown as variables, since they are different in different frames of the animation. When the computer starts drawing the scene, the modeling transform that is in effect is the identity transform, that is, no transform at all. As it prepares to draw the cart, it saves a copy of the current transform (the identity) by pushing it onto the stack. It then modifies the current transform by multiplying it by the modeling transforms for the cart, scale(0.3,0.3) and translate(dx,0). When it comes to drawing the wheel, it again pushes the current transform (the modeling transform for the cart as a whole) onto the stack, and it modifies the current transform to take the wheel's modeling transforms into account. Similarly, when it comes to the filled circle, it saves the modeling transform for the wheel, and then applies the modeling transform for the circle.</p> <p>When, finally, the circle is actually drawn in the scene, it is transformed by the combined transform. That transform places the circle directly into the scene, but it has been composed from the transform that places the circle into the wheel, the one that places the wheel into the cart, and the one that places the cart into the scene. After drawing the circle, the computer replaces the current transform with one it pops from the stack. That will be the modeling transform for the wheel as a whole, and that transform will be used for any further parts of the wheel that have to be drawn. When the wheel is done, the transform for the cart is popped. And when the cart is done, the original transform, the identity, is popped. When the computer goes onto the next object in the scene, it starts the whole process again, with the identity transform as the starting point.</p> <p>This might sound complicated, but I should emphasize that it is something that the computer does for you. Your responsibility is simply to design the individual objects, in their own natural coordinate system. As part of that, you specify the modeling transformations that are applied to the sub-objects of that object. You construct the scene as a whole in a similar way. The computer will then put everything together for you, taking into account the many layers of hierarchical structure. You only have to deal with one component of the structure at a time. That's the power of hierarchical design; that's how it helps you deal with complexity.</p>"},{"location":"cn/c2/s5/","title":"\u7b2c5\u8282: Java \u7ed8\u52362D","text":"<p>Java Graphics2D</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u7ae0\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u770b\u4e00\u4e9b\u4e8c\u7ef4\u56fe\u5f62\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u65b0\u7684\u60f3\u6cd5\uff0c\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u770b\u5230\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u7684\u4e00\u822c\u6982\u5ff5\u5982\u4f55\u5728\u51e0\u4e2a\u5b9e\u9645\u56fe\u5f62\u7cfb\u7edf\u4e2d\u4f7f\u7528\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u7684\u91cd\u70b9\u662fJava\u7f16\u7a0b\u8bed\u8a00\u3002Java\u4ecd\u7136\u662f\u6700\u53d7\u6b22\u8fce\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002\u5176\u6807\u51c6\u684c\u9762\u7248\u672c\u5305\u62ec\u4e00\u4e2a\u590d\u6742\u76842D\u56fe\u5f62API\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u8fd9\u91cc\u8ba8\u8bba\u7684\u4e3b\u9898\u3002\u5728\u9605\u8bfb\u672c\u8282\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u5df2\u7ecf\u4e86\u89e3Java\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u4f46\u5373\u4f7f\u60a8\u4e0d\u4e86\u89e3\uff0c\u60a8\u4e5f\u5e94\u8be5\u80fd\u591f\u7406\u89e3\u5927\u90e8\u5206\u5173\u4e8e\u56fe\u5f62API\u672c\u8eab\u7684\u8ba8\u8bba\u3002\uff08\u5728\u9644\u5f55A\u4e2d\u7684Section A.1\u4e2d\u53ef\u4ee5\u627e\u5230Java\u7684\u57fa\u672c\u4ecb\u7ecd\u3002\uff09</p> <p>\u8fd9\u91cc\u8ba8\u8bba\u7684\u56fe\u5f62API\u662fSwing\u7684\u4e00\u90e8\u5206\uff0cSwing\u662f\u7528\u4e8e\u56fe\u5f62\u7528\u6237\u754c\u9762\u7f16\u7a0b\u7684API\uff0c\u5305\u542b\u5728Java\u7684\u6807\u51c6\u53d1\u884c\u7248\u4e2d\u3002\u73b0\u5728\u8bb8\u591aJava\u7a0b\u5e8f\u90fd\u662f\u4f7f\u7528\u540d\u4e3aJavaFX\u7684\u53e6\u4e00\u79cdAPI\u7f16\u5199\u7684\uff0c\u5b83\u4e0d\u662f\u6807\u51c6\u53d1\u884c\u7248\u7684\u4e00\u90e8\u5206\u3002\u672c\u6559\u6750\u4e0d\u8ba8\u8bbaJavaFX\u3002\u5b9e\u9645\u4e0a\uff0cJavaFX\u7684\u56fe\u5f62API\u4e0eHTML\u753b\u5e03\u56fe\u5f62\u7684API\u975e\u5e38\u76f8\u4f3c\uff0c\u8fd9\u5728Section 2.6\u4e2d\u8ba8\u8bba\u8fc7\u3002</p> <p>Java\u7684\u539f\u59cb\u7248\u672c\u5177\u6709\u66f4\u5c0f\u7684\u56fe\u5f62API\u3002\u5b83\u4e25\u683c\u4fa7\u91cd\u4e8e\u50cf\u7d20\uff0c\u5e76\u4e14\u4ec5\u4f7f\u7528\u6574\u6570\u5750\u6807\u3002\u8be5API\u6709\u7528\u4e8e\u63cf\u7ed8\u548c\u586b\u5145\u5404\u79cd\u57fa\u672c\u5f62\u72b6\uff08\u5305\u62ec\u7ebf\u6761\u3001\u77e9\u5f62\u3001\u692d\u5706\u548c\u591a\u8fb9\u5f62\uff0c\u5c3d\u7ba1Java\u4f7f\u7528draw\u800c\u4e0d\u662fstroke\u8fd9\u4e2a\u672f\u8bed\uff09\u7684\u5b50\u4f8b\u7a0b\u3002\u5176\u7ed8\u56fe\u64cd\u4f5c\u7684\u542b\u4e49\u89c4\u5b9a\u5728\u50cf\u7d20\u7ea7\u522b\u975e\u5e38\u7cbe\u786e\u3002\u6574\u6570\u5750\u6807\u88ab\u5b9a\u4e49\u4e3a\u53c2\u8003\u50cf\u7d20\u4e4b\u95f4\u7684\u7ebf\u6761\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a12x8\u50cf\u7d20\u7f51\u683c\u7684x\u5750\u6807\u4ece0\u523012\uff0cy\u5750\u6807\u4ece0\u52308\uff0c\u5982\u4e0b\u6240\u793a\u3002\u7f16\u53f7\u7684\u662f\u50cf\u7d20\u4e4b\u95f4\u7684\u7ebf\u6761\uff0c\u800c\u4e0d\u662f\u50cf\u7d20\u672c\u8eab\u3002</p> <p>\u547d\u4ee4fillRect(3,2,5,3)\u4f1a\u586b\u5145\u5de6\u4e0a\u89d2\u4f4d\u4e8e(3,2)\u3001\u5bbd\u5ea6\u4e3a5\u3001\u9ad8\u5ea6\u4e3a3\u7684\u77e9\u5f62\uff0c\u5982\u4e0a\u56fe\u5de6\u4fa7\u6240\u793a\u3002\u547d\u4ee4drawRect(3,2,5,3)\u5728\u6982\u5ff5\u4e0a\u56f4\u7ed5\u8be5\u77e9\u5f62\u7684\u8f6e\u5ed3\u7ed8\u5236\u4e00\u4e2a\u201c\u7b14\u201d\u3002\u4f46\u662f\uff0c\u8fd9\u652f\u7b14\u662f\u4e00\u4e2a1\u50cf\u7d20\u7684\u6b63\u65b9\u5f62\uff0c\u800c\u6cbf\u8f6e\u5ed3\u79fb\u52a8\u7684\u662f\u7b14\u7684\u5de6\u4e0a\u89d2\u3002\u5f53\u7b14\u6cbf\u77e9\u5f62\u7684\u53f3\u8fb9\u7f18\u79fb\u52a8\u65f6\uff0c\u8be5\u8fb9\u7f18\u53f3\u4fa7\u7684\u50cf\u7d20\u88ab\u7740\u8272\uff1b\u5f53\u7b14\u6cbf\u5e95\u8fb9\u79fb\u52a8\u65f6\uff0c\u5e95\u8fb9\u4e0b\u65b9\u7684\u50cf\u7d20\u88ab\u7740\u8272\u3002\u7ed3\u679c\u5982\u4e0a\u56fe\u53f3\u4fa7\u6240\u793a\u3002\u6211\u5728\u8fd9\u91cc\u7684\u91cd\u70b9\u4e0d\u662f\u4e3a\u4e86\u7ea0\u7ed3\u7ec6\u8282\uff0c\u800c\u662f\u8981\u6307\u51fa\uff0c\u5bf9\u7ed8\u56fe\u64cd\u4f5c\u7684\u542b\u4e49\u6709\u7cbe\u786e\u89c4\u5b9a\u53ef\u4ee5\u8ba9\u60a8\u5728\u50cf\u7d20\u7ea7\u522b\u4e0a\u6709\u975e\u5e38\u7cbe\u7ec6\u7684\u63a7\u5236\u3002</p> <p>Java\u7684\u539f\u59cb\u56fe\u5f62\u4e0d\u652f\u6301\u5b9e\u6570\u5750\u6807\u3001\u53d8\u6362\u3001\u6297\u952f\u9f7f\u6216\u6e10\u53d8\u7b49\u529f\u80fd\u3002\u5728Java\u9996\u6b21\u5f15\u5165\u51e0\u5e74\u540e\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\u7684\u65b0\u56fe\u5f62API\u3002\u6211\u4eec\u5c06\u5728\u8fd9\u91cc\u770b\u4e00\u4e0b\u8fd9\u4e2a\u66f4\u9ad8\u7ea7\u7684API\u3002</p> <p>In the rest of this chapter, we look at specific implementations of two-dimensional graphics. There are a few new ideas here, but mostly you will see how the general concepts that we have covered are used in several real graphics systems.</p> <p>In this section, our focus is on the Java programming language. Java remains one of the most popular programming languages. Its standard desktop version includes a sophisticated 2D graphics API, which is our topic here. Before reading this section, you should already know the basics of Java programming. But even if you don't, you should be able to follow most of the discussion of the graphics API itself. (See Section A.1 in Appendix A for a very basic introduction to Java.)</p> <p>The graphics API that is discussed here is part of Swing, an API for graphical user interface programming that is included as part of the standard distribution of Java. Many Java programs are now written using an alternative API called JavaFX, which is not part of the standard distribution. JavaFX is not discussed in this textbook. Its graphics API is, in fact, quite similar to the API for HTML canvas graphics, which is discussed in Section 2.6.</p> <p>The original version of Java had a much smaller graphics API. It was tightly focused on pixels, and it used only integer coordinates. The API had subroutines for stroking and filling a variety of basic shapes, including lines, rectangles, ovals, and polygons (although Java uses the term draw instead of stroke). Its specification of the meaning of drawing operations was very precise on the pixel level. Integer coordinates are defined to refer to the lines between pixels. For example, a 12-by-8 pixel grid has x-coordinates from 0 to 12 and y-coordinates from 0 to 8, as shown below. The lines between pixels are numbered, not the pixels.</p> <p> </p> <p>The command fillRect(3,2,5,3) fills the rectangle with upper left corner at (3,2), with width 5, and with height 3, as shown on the left above. The command drawRect(3,2,5,3) conceptually drags a \"pen\" around the outline of this rectangle. However, the pen is a 1-pixel square, and it is the upper left corner of the pen that moves along the outline. As the pen moves along the right edge of the rectangle, the pixels to the right of that edge are colored; as the pen moves along the bottom edge, the pixels below the edge are colored. The result is as shown on the right above. My point here is not to belabor the details, but to point out that having a precise specification of the meaning of graphical operations gives you very fine control over what happens on the pixel level.</p> <p>Java's original graphics did not support things like real-number coordinates, transforms, antialiasing, or gradients. Just a few years after Java was first introduced, a new graphics API was added that does support all of these. It is that more advanced API that we will look at here.</p>"},{"location":"cn/c2/s5/#251-\u7ed8\u52362d","title":"2.5.1  \u7ed8\u52362D","text":"<p>Graphics2D</p> \u4e2d\u6587\u82f1\u6587 <p>Java\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u3002\u5176API\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5927\u578b\u7684\u7c7b\u96c6\u5408\uff0c\u539f\u59cb\u56fe\u5f62API\u4e2d\u7684\u5b9e\u9645\u7ed8\u56fe\u64cd\u4f5c\u5927\u591a\u5305\u542b\u5728\u540d\u4e3aGraphics\u7684\u7c7b\u4e2d\u3002\u5728\u66f4\u65b0\u7684Swing API\u4e2d\uff0c\u7ed8\u56fe\u64cd\u4f5c\u662f\u4f4d\u4e8e\u540d\u4e3aGraphics2D\u7684\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u5b83\u662fGraphics\u7684\u5b50\u7c7b\uff0c\u56e0\u6b64\u6240\u6709\u539f\u59cb\u7684\u7ed8\u56fe\u64cd\u4f5c\u4ecd\u7136\u53ef\u7528\u3002\uff08\u5728Java\u4e2d\uff0c\u4e00\u4e2a\u7c7b\u5305\u542b\u5728\u79f0\u4e3a\u201c\u5305\u201d\u7684\u7c7b\u96c6\u5408\u4e2d\u3002\u4f8b\u5982\uff0cGraphics\u548cGraphics2D\u4f4d\u4e8e\u540d\u4e3ajava.awt\u7684\u5305\u4e2d\u3002\u5b9a\u4e49\u5f62\u72b6\u548c\u53d8\u6362\u7684\u7c7b\u4f4d\u4e8e\u540d\u4e3ajava.awt.geom\u7684\u5305\u4e2d\u3002\uff09</p> <p>\u56fe\u5f62\u7cfb\u7edf\u9700\u8981\u4e00\u4e2a\u7ed8\u5236\u7684\u4f4d\u7f6e\u3002\u5728Java\u4e2d\uff0c\u7ed8\u56fe\u8868\u9762\u901a\u5e38\u662fJPanel\u7c7b\u7684\u5bf9\u8c61\uff0c\u5b83\u4ee3\u8868\u5c4f\u5e55\u4e0a\u7684\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u3002JPanel\u7c7b\u6709\u4e00\u4e2a\u540d\u4e3apaintComponent()\u7684\u65b9\u6cd5\u6765\u7ed8\u5236\u5176\u5185\u5bb9\u3002\u8981\u521b\u5efa\u4e00\u4e2a\u7ed8\u56fe\u8868\u9762\uff0c\u60a8\u53ef\u4ee5\u521b\u5efaJPanel\u7684\u5b50\u7c7b\u5e76\u4e3a\u5176paintComponent()\u65b9\u6cd5\u63d0\u4f9b\u5b9a\u4e49\u3002\u6240\u6709\u7ed8\u56fe\u90fd\u5e94\u8be5\u5728paintComponent()\u5185\u5b8c\u6210\uff1b\u5f53\u9700\u8981\u66f4\u6539\u7ed8\u56fe\u7684\u5185\u5bb9\u65f6\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528\u9762\u677f\u7684repaint()\u65b9\u6cd5\u6765\u89e6\u53d1\u5bf9paintComponent()\u7684\u8c03\u7528\u3002paintComponent()\u65b9\u6cd5\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3aGraphics\u7684\u53c2\u6570\uff0c\u4f46\u5b9e\u9645\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\u53c2\u6570\u662fGraphics2D\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u88ab\u7c7b\u578b\u8f6c\u6362\u4e3aGraphics2D\u4ee5\u83b7\u53d6\u5bf9\u66f4\u9ad8\u7ea7\u522b\u56fe\u5f62\u529f\u80fd\u7684\u8bbf\u95ee\u3002\u56e0\u6b64\uff0cpaintComponent()\u65b9\u6cd5\u7684\u5b9a\u4e49\u901a\u5e38\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>protected void paintComponent( Graphics g ) {\n    Graphics2D g2;\n    g2 = (Graphics2D)g;  // \u5c06\u53c2\u6570\u8f6c\u6362\u4e3aGraphics2D\u7c7b\u578b\u3002\n    .\n    .  // \u4f7f\u7528g2\u7ed8\u56fe\u3002\n    .\n}\n</code></pre> <p>\u5728\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u5c06\u5047\u8bbeg2\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3aGraphics2D\u7684\u53d8\u91cf\uff0c\u5e76\u8ba8\u8bba\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u505a\u7684\u4e00\u4e9b\u4e8b\u60c5\u3002\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u6211\u6ce8\u610f\u5230Graphics2D\u652f\u6301\u6297\u952f\u9f7f\uff0c\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528\u3002\u53ef\u4ee5\u5728\u56fe\u5f62\u4e0a\u4e0b\u6587g2\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u76f8\u5f53\u4ee4\u4eba\u751f\u754f\u7684\u547d\u4ee4\u542f\u7528\u5b83\uff1a</p> <pre><code>g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n                            RenderingHints.VALUE_ANTIALIAS_ON);\n</code></pre> <p>\u5bf9\u4e8e\u5728\u5b8c\u6574\u7684Java\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u7b80\u5355\u56fe\u5f62\u7ed8\u5236\u7684\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u6837\u672c\u7a0b\u5e8fjava2d/GraphicsStarter.java\u548cjava2d/AnimationStarter.java\u3002\u5b83\u4eec\u5206\u522b\u63d0\u4f9b\u4e86\u4f7f\u7528Graphics2D\u7ed8\u5236\u9759\u6001\u548c\u52a8\u753b\u56fe\u50cf\u7684\u975e\u5e38\u7b80\u5355\u7684\u6846\u67b6\u3002\u7a0b\u5e8fjava2d/EventsStarter.java\u662f\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6846\u67b6\uff0c\u7528\u4e8e\u5904\u7406\u56fe\u5f62\u7a0b\u5e8f\u4e2d\u7684\u9f20\u6807\u548c\u952e\u4e8b\u4ef6\u3002\u5982\u679c\u60a8\u60f3\u63a2\u7d22Java\u56fe\u5f62\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u7a0b\u5e8f\u4f5c\u4e3a\u4e00\u4e9b\u5b9e\u9a8c\u7684\u57fa\u7840\u3002</p> <p>Java is an object-oriented language. Its API is defined as a large set of classes, The actual drawing operations in the original graphics API were mostly contained in the class named Graphics. In the newer Swing API, drawing operations are methods in a class named Graphics2D, which is a subclass of Graphics, so that all the original drawing operations are still available. (A class in Java is contained in a collection of classes known as a \"package.\" Graphics and Graphics2D, for example, are in the package named java.awt. Classes that define shapes and transforms are in a package named java.awt.geom.)</p> <p>A graphics system needs a place to draw. In Java, the drawing surface is often an object of the class JPanel, which represents a rectangular area on the screen. The JPanel class has a method named paintComponent() to draw its content. To create a drawing surface, you can create a subclass of JPanel and provide a definition for its paintComponent() method. All drawing should be done inside paintComponent(); when it is necessary to change the contents of the drawing, you can call the panel's repaint() method to trigger a call to paintComponent(). The paintComponent() method has a parameter of type Graphics, but the parameter that is passed to the method is actually an object of type Graphics2D, and it can be type-cast to Graphics2D to obtain access to the more advanced graphics capabilities. So, the definition of the paintComponent() method usually looks something like this:</p> <pre><code>protected void paintComponent( Graphics g ) {\n    Graphics2D g2;\n    g2 = (Graphics2D)g;  // Type-cast the parameter to Graphics2D.\n    .\n    .  // Draw using g2.\n    .\n}\n</code></pre> <p>In the rest of this section, I will assume that g2 is a variable of type Graphics2D, and I will discuss some of the things that you can do with it. As a first example, I note that Graphics2D supports antialiasing, but it is not turned on by default. It can be enabled in a graphics context g2 with the rather intimidating command</p> <pre><code>g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n                            RenderingHints.VALUE_ANTIALIAS_ON);\n</code></pre> <p>For simple examples of graphics in complete Java programs, you can look at the sample programs java2d/GraphicsStarter.java and java2d/AnimationStarter.java. They provide very minimal frameworks for drawing static and animated images, respectively, using Graphics2D. The program java2d/EventsStarter.java is a similar framework for working with mouse and key events in a graphics program. You can use these programs as the basis for some experimentation if you want to explore Java graphics.</p>"},{"location":"cn/c2/s5/#252-\u5f62\u72b6","title":"2.5.2  \u5f62\u72b6","text":"<p>Shapes</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528\u539f\u59cb\u7684Graphics\u7c7b\u8fdb\u884c\u7ed8\u5236\u65f6\uff0c\u4f7f\u7528\u6574\u6570\u5750\u6807\uff0c\u5355\u4f4d\u4e3a\u50cf\u7d20\u3002\u8fd9\u5728\u6807\u51c6\u5750\u6807\u7cfb\u4e2d\u6548\u679c\u5f88\u597d\uff0c\u4f46\u5728\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u65f6\u4e0d\u9002\u7528\uff0c\u56e0\u4e3a\u5728\u8fd9\u6837\u7684\u5750\u6807\u7cfb\u4e2d\uff0c\u5ea6\u91cf\u5355\u4f4d\u5c06\u4e0d\u7b49\u4e8e\u4e00\u4e2a\u50cf\u7d20\u3002\u6211\u4eec\u9700\u8981\u80fd\u591f\u4f7f\u7528\u5b9e\u6570\u6765\u6307\u5b9a\u5f62\u72b6\u3002Java\u5305java.awt.geom\u63d0\u4f9b\u4e86\u652f\u6301\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u5b9a\u4e49\u7684\u5f62\u72b6\u7684\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u8be5\u5305\u4e2d\u7684Line2D\u7c7b\u8868\u793a\u4ee5\u4e00\u5bf9\u5b9e\u6570\u4e3a\u7aef\u70b9\u7684\u7ebf\u6bb5\u3002</p> <p>\u73b0\u5728\uff0cJava\u6709\u4e24\u79cd\u5b9e\u6570\u7c7b\u578b\uff1adouble\u548cfloat\u3002double\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u6bd4float\u66f4\u5927\u8303\u56f4\u7684\u6570\u5b57\uff0c\u5e76\u4e14\u5177\u6709\u66f4\u591a\u7684\u6709\u6548\u4f4d\u6570\uff0cdouble\u662f\u66f4\u5e38\u7528\u7684\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a\uff0cdoubles\u5728Java\u4e2d\u66f4\u5bb9\u6613\u4f7f\u7528\u3002\u7136\u800c\uff0cfloat\u503c\u901a\u5e38\u5728\u56fe\u5f62\u5e94\u7528\u4e2d\u5177\u6709\u8db3\u591f\u7684\u7cbe\u5ea6\uff0c\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u5728\u5185\u5b58\u4e2d\u5360\u7528\u66f4\u5c11\u7a7a\u95f4\u7684\u4f18\u52bf\u3002\u6b64\u5916\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u786c\u4ef6\u901a\u5e38\u5728\u5185\u90e8\u4f7f\u7528float\u503c\u3002</p> <p>\u56e0\u6b64\uff0c\u8003\u8651\u5230\u8fd9\u4e9b\u56e0\u7d20\uff0cjava.awt.geom\u5305\u5b9e\u9645\u4e0a\u4e3a\u6bcf\u4e2a\u5f62\u72b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u7248\u672c\uff0c\u4e00\u4e2a\u4f7f\u7528float\u7c7b\u578b\u7684\u5750\u6807\uff0c\u53e6\u4e00\u4e2a\u4f7f\u7528double\u7c7b\u578b\u7684\u5750\u6807\u3002\u8fd9\u662f\u4ee5\u4e00\u79cd\u76f8\u5f53\u5947\u602a\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\u3002\u4ee5Line2D\u4e3a\u4f8b\uff0cLine2D\u7c7b\u672c\u8eab\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\u3002\u5b83\u6709\u4e24\u4e2a\u5b50\u7c7b\uff0c\u4e00\u4e2a\u8868\u793a\u4f7f\u7528float\u5750\u6807\u7684\u7ebf\uff0c\u53e6\u4e00\u4e2a\u4f7f\u7528double\u5750\u6807\u3002\u6700\u5947\u602a\u7684\u90e8\u5206\u662f\uff0c\u8fd9\u4e9b\u5b50\u7c7b\u88ab\u5b9a\u4e49\u4e3aLine2D\u7684\u5d4c\u5957\u7c7b\uff1aLine2D.Float\u548cLine2D.Double\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u7c7b\u578b\u4e3aLine2D\u7684\u53d8\u91cf\uff0c\u4f46\u8981\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u60a8\u9700\u8981\u4f7f\u7528Line2D.Double\u6216Line2D.Float\uff1a</p> <pre><code>Line2D line1, line2;\nline1 = new Line2D.Double(1,2,5,7); // \u4ece (1.0,2.0) \u5230 (5.0,7.0) \u7684\u7ebf\u6bb5\nline2 = new Line2D.Float(2.7F,3.1F,1.5F,7.1F); // \u4ece (2.7,3.1) \u5230 (1.5,7.1) \u7684\u7ebf\u6bb5\n</code></pre> <p>\u6ce8\u610f\uff0c\u5728Java\u4e2d\u4f7f\u7528float\u7c7b\u578b\u7684\u5e38\u91cf\u65f6\uff0c\u60a8\u5fc5\u987b\u5c06\"F\"\u4f5c\u4e3a\u540e\u7f00\u6dfb\u52a0\u5230\u503c\u540e\u9762\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48doubles\u5728Java\u4e2d\u66f4\u5bb9\u6613\u7684\u4e00\u4e2a\u539f\u56e0\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u575a\u6301\u4f7f\u7528Line2D.Double\u3002\u7136\u800c\uff0cLine2D.Float\u53ef\u80fd\u4f1a\u63d0\u4f9b\u7a0d\u5fae\u66f4\u597d\u7684\u6027\u80fd\u3002</p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u770bjava.awt.geom\u4e2d\u7684\u4e00\u4e9b\u5176\u4ed6\u7c7b\u3002\u62bd\u8c61\u7c7bPoint2D\u2014\u4ee5\u53ca\u5b83\u7684\u5177\u4f53\u5b50\u7c7bPoint2D.Double\u548cPoint2D.Float\u2014\u8868\u793a\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u7531\u4e24\u4e2a\u5b9e\u6570\u5750\u6807\u6307\u5b9a\u3002\u70b9\u4e0d\u662f\u4e00\u4e2a\u5f62\u72b6\uff1b\u60a8\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u586b\u5145\u6216\u63cf\u8fb9\u3002\u53ef\u4ee5\u7528\u4e24\u4e2a\u5b9e\u6570\u6784\u9020\u4e00\u4e2a\u70b9\uff08\"new Point2D.Double(1.2,3.7)\"\uff09\u3002\u5982\u679cp\u662f\u7c7b\u578b\u4e3aPoint2D\u7684\u53d8\u91cf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528p.getX()\u548cp.getY()\u6765\u68c0\u7d22\u5176\u5750\u6807\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u4f7f\u7528p.setX(x)\u3001p.setY(y)\u6216p.setLocation(x,y)\u6765\u8bbe\u7f6e\u5176\u5750\u6807\u3002\u5982\u679cpd\u662f\u7c7b\u578b\u4e3aPoint2D.Double\u7684\u53d8\u91cf\uff0c\u60a8\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u5750\u6807\uff0c\u5982pd.x\u548cpd.y\uff08\u5bf9\u4e8ePoint2D.Float\u4e5f\u662f\u5982\u6b64\uff09\u3002java.awt.geom\u4e2d\u7684\u5176\u4ed6\u7c7b\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u7684\u591a\u79cd\u65b9\u5f0f\u6765\u64cd\u7eb5\u5176\u5c5e\u6027\uff0c\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u5217\u51fa\u5b83\u4eec\u6240\u6709\u3002</p> <p>\u6709\u5404\u79cd\u5404\u6837\u7684\u7c7b\u8868\u793a\u51e0\u4f55\u5f62\u72b6\uff0c\u5305\u62ecLine2D\u3001Rectangle2D\u3001RoundRectangle2D\u3001Ellipse2D\u3001Arc2D\u548cPath2D\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u62bd\u8c61\u7c7b\uff0c\u6bcf\u4e2a\u7c7b\u5305\u542b\u4e00\u5bf9\u5b50\u7c7b\uff0c\u4f8b\u5982Rectangle2D.Double\u548cRectangle2D.Float\u3002\u4e00\u4e9b\u5f62\u72b6\uff0c\u6bd4\u5982\u77e9\u5f62\uff0c\u5177\u6709\u53ef\u4ee5\u586b\u5145\u7684\u5185\u90e8\uff1b\u8fd9\u6837\u7684\u5f62\u72b6\u4e5f\u6709\u53ef\u4ee5\u63cf\u8fb9\u7684\u8f6e\u5ed3\u3002\u4e00\u4e9b\u5f62\u72b6\uff0c\u6bd4\u5982\u7ebf\u6bb5\uff0c\u7eaf\u7cb9\u662f\u4e00\u7ef4\u7684\uff0c\u53ea\u80fd\u63cf\u8fb9\u3002</p> <p>\u9664\u4e86\u7ebf\u6bb5\uff0c\u77e9\u5f62\u53ef\u80fd\u662f\u6700\u7b80\u5355\u7684\u5f62\u72b6\u3002Rectangle2D\u6709\u4e00\u4e2a\u89d2\u70b9\uff08x\uff0cy\uff09\uff0c\u4e00\u4e2a\u5bbd\u5ea6\u548c\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u6784\u9020\uff08\"new Rectangle2D.Double(x,y,w,h)\"\uff09\u3002\u89d2\u70b9\uff08x\uff0cy\uff09\u6307\u5b9a\u4e86\u77e9\u5f62\u4e2d\u7684\u6700\u5c0fx\u503c\u548cy\u503c\u3002\u5bf9\u4e8e\u901a\u5e38\u7684\u50cf\u7d20\u5750\u6807\u7cfb\uff0c\uff08x\uff0cy\uff09\u662f\u5de6\u4e0a\u89d2\u3002\u7136\u800c\uff0c\u5728\u6700\u5c0fy\u503c\u5728\u5e95\u90e8\u7684\u5750\u6807\u7cfb\u4e2d\uff0c\uff08x\uff0cy\uff09\u5c06\u662f\u5de6\u4e0b\u89d2\u3002\u77e9\u5f62\u7684\u8fb9\u5e73\u884c\u4e8e\u5750\u6807\u8f74\u3002\u7c7b\u578b\u4e3aRectangle2D.Double\u7684\u53d8\u91cfr\u5177\u6709\u516c\u5171\u5b9e\u4f8b\u53d8\u91cfr.x\u3001r.y\u3001r.width\u548cr.height\u3002\u5982\u679c\u5bbd\u5ea6\u6216\u9ad8\u5ea6\u5c0f\u4e8e\u6216\u7b49\u4e8e\u96f6\uff0c\u5f53\u77e9\u5f62\u88ab\u586b\u5145\u6216\u63cf\u8fb9\u65f6\u5c06\u4e0d\u4f1a\u7ed8\u5236\u4efb\u4f55\u5185\u5bb9\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u4efb\u52a1\u662f\u4ece\u4e24\u4e2a\u89d2\u70b9\uff08x1\uff0cy1\uff09\u548c\uff08x2\uff0cy2\uff09\u5b9a\u4e49\u4e00\u4e2a\u77e9\u5f62\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u5747\u4e3a\u96f6\u7684\u77e9\u5f62\uff0c\u7136\u540e\u5c06\u7b2c\u4e8c\u4e2a\u70b9\u6dfb\u52a0\u5230\u77e9\u5f62\u4e2d\u6765\u5b8c\u6210\u3002\u5c06\u4e00\u4e2a\u70b9\u6dfb\u52a0\u5230\u77e9\u5f62\u4f1a\u4f7f\u77e9\u5f62\u589e\u957f\u8db3\u591f\u4ee5\u5305\u62ec\u8be5\u70b9\uff1a</p> <pre><code>Rectangle2D.Double r = new Rectangle2D.Double(x1,y1,0,0);\nr.add(x2,y2);\n</code></pre> <p>\u7c7bLine2D\u3001Ellipse2D\u3001RoundRectangle2D\u548cArc2D\u521b\u5efa\u5176\u4ed6\u57fa\u672c\u5f62\u72b6\uff0c\u5e76\u4e14\u5de5\u4f5c\u539f\u7406\u7c7b\u4f3c\u4e8eRectangle2D\u3002\u60a8\u53ef\u4ee5\u67e5\u770bJava API\u6587\u6863\u4ee5\u83b7\u53d6\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>Path2D\u7c7b\u66f4\u6709\u8da3\u3002\u5b83\u8868\u793a\u7531\u7ebf\u6bb5\u548c\u8d1d\u585e\u5c14\u66f2\u7ebf\u7ec4\u6210\u7684\u4e00\u822c\u8def\u5f84\u3002\u8def\u5f84\u662f\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u5728\u5b50\u82822.2.3\u4e2d\u8ba8\u8bba\u8fc7\u7684moveTo\u548clineTo\u5b50\u4f8b\u7a0b\u521b\u5efa\u7684\u3002\u8981\u521b\u5efa\u8def\u5f84\uff0c\u9996\u5148\u6784\u9020\u4e00\u4e2a\u7c7b\u578b\u4e3aPath2D.Double\uff08\u6216Path2D.Float\uff09\u7684\u5bf9\u8c61\uff1a</p> <pre><code>Path2D.Double p = new Path2D.Double();\n</code></pre> <p>\u5f53\u9996\u6b21\u521b\u5efa\u8def\u5f84p\u65f6\uff0c\u5b83\u662f\u7a7a\u7684\u3002\u901a\u8fc7\u6cbf\u7740\u8981\u521b\u5efa\u7684\u8def\u5f84\u79fb\u52a8\u4e00\u4e2a\u60f3\u8c61\u7684\u201c\u7b14\u201d\u6765\u6784\u9020\u8def\u5f84\u3002\u65b9\u6cd5p.moveTo(x,y)\u5c06\u7b14\u79fb\u52a8\u5230\u70b9(x,y)\u800c\u4e0d\u7ed8\u5236\u4efb\u4f55\u5185\u5bb9\u3002\u5b83\u7528\u4e8e\u6307\u5b9a\u8def\u5f84\u7684\u521d\u59cb\u70b9\u6216\u8def\u5f84\u7684\u65b0\u90e8\u5206\u7684\u8d77\u59cb\u70b9\u3002\u65b9\u6cd5p.lineTo(x,y)\u7ed8\u5236\u4e00\u6761\u4ece\u5f53\u524d\u7b14\u4f4d\u7f6e\u5230(x,y)\u7684\u76f4\u7ebf\uff0c\u5c06\u7b14\u7559\u5728(x,y)\u5904\u3002\u65b9\u6cd5p.close()\u53ef\u7528\u4e8e\u901a\u8fc7\u7ed8\u5236\u4e00\u6761\u7ebf\u8fd4\u56de\u5230\u5176\u8d77\u59cb\u70b9\u6765\u5173\u95ed\u8def\u5f84\uff08\u6216\u8def\u5f84\u7684\u5f53\u524d\u90e8\u5206\uff09\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a\u9876\u70b9\u5206\u522b\u4f4d\u4e8e(0,5)\u3001(2,-3)\u548c(-4,1)\u7684\u4e09\u89d2\u5f62\uff1a</p> <pre><code>Path2D.Double p = new Path2D.Double();\np.moveTo(0,5);\np.lineTo(2,-3);\np.lineTo(-4,1);\np.close();\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u5411Path2D\u6dfb\u52a0\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u3002\u8d1d\u585e\u5c14\u66f2\u7ebf\u5728\u5b50\u82822.2.3\u4e2d\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u65b9\u6cd5\u5c06\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6dfb\u52a0\u5230\u8def\u5f84Path2D p\u4e2d</p> <pre><code>p.curveTo( cx1, cy1, cx2, cy2, x, y );\n</code></pre> <p>\u8fd9\u5c06\u6dfb\u52a0\u4e00\u4e2a\u66f2\u7ebf\u6bb5\uff0c\u4ece\u5f53\u524d\u7b14\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5230(x,y)\u7ed3\u675f\uff0c\u5e76\u4f7f\u7528(cx1,cy1)\u548c(cx2,cy2)\u4f5c\u4e3a\u66f2\u7ebf\u7684\u4e24\u4e2a\u63a7\u5236\u70b9\u3002\u6dfb\u52a0\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u5230\u8def\u5f84\u7684\u65b9\u6cd5\u662fquadTo\u3002\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u63a7\u5236\u70b9\uff1a</p> <pre><code>p.quadTo( cx, cy, x, y );\n</code></pre> <p>\u5f53\u8def\u5f84\u4e0e\u81ea\u8eab\u76f8\u4ea4\u65f6\uff0c\u5176\u5185\u90e8\u662f\u901a\u8fc7\u67e5\u770b\u7f20\u7ed5\u6570\u786e\u5b9a\u7684\uff0c\u5982\u5b50\u82822.2.2\u4e2d\u6240\u8ba8\u8bba\u7684\u3002\u786e\u5b9a\u70b9\u662f\u5426\u5728\u5185\u90e8\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u89c4\u5219\uff1a\u8be2\u95ee\u56f4\u7ed5\u8be5\u70b9\u7684\u66f2\u7ebf\u7684\u7f20\u7ed5\u6570\u662f\u5426\u4e3a\u975e\u96f6\uff0c\u6216\u8005\u8be2\u95ee\u662f\u5426\u4e3a\u5947\u6570\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u8bbe\u7f6ePath2D p\u4f7f\u7528\u7684\u7f20\u7ed5\u89c4\u5219\uff1a</p> <pre><code>p.setWindingRule( Path2D.WIND_NON_ZERO );\np.setWindingRule( Path2D.WIND_EVEN_ODD );\n</code></pre> <p>\u9ed8\u8ba4\u662fWIND_NON_ZERO\u3002</p> <p>\u6700\u540e\uff0c\u6211\u8981\u6ce8\u610f\u7684\u662f\u53ef\u4ee5\u5728\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u7ed8\u5236\u56fe\u50cf\u7684\u526f\u672c\u3002\u56fe\u50cf\u53ef\u4ee5\u4ece\u6587\u4ef6\u52a0\u8f7d\u6216\u7531\u7a0b\u5e8f\u521b\u5efa\u3002\u6211\u7a0d\u540e\u5728\u672c\u8282\u4e2d\u8ba8\u8bba\u7b2c\u4e8c\u79cd\u53ef\u80fd\u6027\u3002\u56fe\u50cf\u7531\u7c7b\u578b\u4e3aImage\u7684\u5bf9\u8c61\u8868\u793a\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u5728\u8fd9\u91cc\u5047\u8bbe\u5bf9\u8c61\u662fBufferedImage\u7c7b\u578b\uff0c\u5b83\u662fImage\u7684\u5b50\u7c7b\u3002\u5982\u679cimg\u662f\u8fd9\u6837\u7684\u5bf9\u8c61\uff0c\u5219</p> <pre><code>g2.drawImage( img, x, y, null );\n</code></pre> <p>\u5c06\u5728\u70b9(x,y)\u5904\u7ed8\u5236\u56fe\u50cf\u7684\u5de6\u4e0a\u89d2\u3002\uff08\u7b2c\u56db\u4e2a\u53c2\u6570\u5f88\u96be\u89e3\u91ca\uff0c\u4f46\u5bf9\u4e8eBufferedImage\uff0c\u5e94\u5c06\u5176\u6307\u5b9a\u4e3anull\u3002\uff09\u8fd9\u5c06\u4ee5\u5176\u81ea\u7136\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7ed8\u5236\u56fe\u50cf\uff0c\u4f46\u53ef\u4ee5\u5728\u65b9\u6cd5\u4e2d\u6307\u5b9a\u4e0d\u540c\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff1a</p> <pre><code>g2.drawImage( img, x, y, width, height, null );\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u7ed8\u5236\u6587\u672c\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u6307\u5b9a\u4e86\u5b57\u7b26\u4e32\u548c\u5b57\u7b26\u4e32\u7684\u57fa\u70b9\u3002\uff08\u57fa\u70b9\u662f\u5b57\u7b26\u4e32\u7684\u5de6\u4e0b\u89d2\uff0c\u5ffd\u7565\u4e86\u50cf\u5b57\u6bcd\"g\"\u7684\u5c3e\u5df4\u4e4b\u7c7b\u7684\u201c\u4e0b\u6c89\u201d\u90e8\u5206\u3002\uff09\u4f8b\u5982\uff0c</p> <pre><code>g2.drawString( \"Hello World\", 100, 50 );\n</code></pre> <p>\u56fe\u50cf\u548c\u5b57\u7b26\u4e32\u4e0e\u5176\u4ed6\u5f62\u72b6\u4e00\u6837\u53d7\u5230\u53d8\u6362\u7684\u5f71\u54cd\u3002\u53d8\u6362\u662f\u83b7\u5f97\u65cb\u8f6c\u6587\u672c\u548c\u56fe\u50cf\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5f53\u5bf9\u4e00\u4e9b\u6587\u672c\u548c\u56fe\u50cf\u5e94\u7528\u65cb\u8f6c\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u4ee5\u4e0b\u60c5\u51b5\uff1a</p> <p> </p> <p>Drawing with the original Graphics class is done using integer coordinates, with the measurement given in pixels. This works well in the standard coordinate system, but is not appropriate when real-number coordinates are used, since the unit of measure in such a coordinate system will not be equal to a pixel. We need to be able to specify shapes using real numbers. The Java package java.awt.geom provides support for shapes defined using real number coordinates. For example, the class Line2D in that package represents line segments whose endpoints are given as pairs of real numbers.</p> <p>Now, Java has two real number types: double and float. The double type can represent a larger range of numbers than float, with a greater number of significant digits, and double is the more commonly used type. In fact, doubles are simply easier to use in Java. However, float values generally have enough accuracy for graphics applications, and they have the advantage of taking up less space in memory. Furthermore, computer graphics hardware often uses float values internally.</p> <p>So, given these considerations, the java.awt.geom package actually provides two versions of each shape, one using coordinates of type float and one using coordinates of type double. This is done in a rather strange way. Taking Line2D as an example, the class Line2D itself is an abstract class. It has two subclasses, one that represents lines using float coordinates and one using double coordinates. The strangest part is that these subclasses are defined as nested classes inside Line2D: Line2D.Float and Line2D.Double. This means that you can declare a variable of type Line2D, but to create an object, you need to use Line2D.Double or Line2D.Float:</p> <pre><code>Line2D line1, line2;\nline1 = new Line2D.Double(1,2,5,7); // Line from (1.0,2.0) to (5.0,7.0)\nline2 = new Line2D.Float(2.7F,3.1F,1.5F,7.1F); // (2.7,3.1) to (1.5,7.1)\n</code></pre> <p>Note that when using constants of type float in Java, you have to add \"F\" as a suffix to the value. This is one reason why doubles are easier in Java. For simplicity, you might want to stick to using Line2D.Double. However, Line2D.Float might give slightly better performance.</p> <p>Let's take a look at some of the other classes from java.awt.geom. The abstract class Point2D\u2014with its concrete subclasses Point2D.Double and Point2D.Float\u2014represents a point in two dimensions, specified by two real number coordinates. A point is not a shape; you can't fill or stroke it. A point can be constructed from two real numbers (\"new Point2D.Double(1.2,3.7)\"). If p is a variable of type Point2D, you can use p.getX() and p.getY() to retrieve its coordinates, and you can use p.setX(x), p.setY(y), or p.setLocation(x,y) to set its coordinates. If pd is a variable of type Point2D.Double, you can also refer directly to the coordinates as pd.x and pd.y (and similarly for Point2D.Float). Other classes in java.awt.geom offer a similar variety of ways to manipulate their properties, and I won't try to list them all here.</p> <p>There is a variety of classes that represent geometric shapes, including Line2D, Rectangle2D, RoundRectangle2D, Ellipse2D, Arc2D, and Path2D. All of these are abstract classes, and each of them contains a pair of subclasses such as Rectangle2D.Double and Rectangle2D.Float. Some shapes, such as rectangles, have interiors that can be filled; such shapes also have outlines that can be stroked. Some shapes, such as lines, are purely one-dimensional and can only be stroked.</p> <p>Aside from lines, rectangles are probably the simplest shapes. A Rectangle2D has a corner point (x,y), a width, and a height, and can be constructed from that data (\"new Rectangle2D.Double(x,y,w,h)\"). The corner point (x,y) specifies the minimum x- and y-values in the rectangle. For the usual pixel coordinate system, (x,y) is the upper left corner. However, in a coordinate system in which the minimum value of y is at the bottom, (x,y) would be the lower left corner. The sides of the rectangle are parallel to the coordinate axes. A variable r of type Rectangle2D.Double has public instance variables r.x, r.y, r.width, and r.height. If the width or the height is less than or equal to zero, nothing will be drawn when the rectangle is filled or stroked. A common task is to define a rectangle from two corner points (x1,y1) and (x2,y2). This can be accomplished by creating a rectangle with height and width equal to zero and then adding the second point to the rectangle. Adding a point to a rectangle causes the rectangle to grow just enough to include that point:</p> <pre><code>Rectangle2D.Double r = new Rectangle2D.Double(x1,y1,0,0);\nr.add(x2,y2);\n</code></pre> <p>The classes Line2D, Ellipse2D, RoundRectangle2D and Arc2D create other basic shapes and work similarly to Rectangle2D. You can check the Java API documentation for details.</p> <p>The Path2D class is more interesting. It represents general paths made up of segments that can be lines and Bezier curves. Paths are created using methods similar to the moveTo and lineTo subroutines that were discussed in Subsection 2.2.3. To create a path, you start by constructing an object of type Path2D.Double (or Path2D.Float):</p> <pre><code>Path2D.Double p = new Path2D.Double();\n</code></pre> <p>The path p is empty when it is first created. You construct the path by moving an imaginary \"pen\" along the path that you want to create. The method p.moveTo(x,y) moves the pen to the point (x,y) without drawing anything. It is used to specify the initial point of the path or the starting point of a new piece of the path. The method p.lineTo(x,y) draws a line from the current pen position to (x,y), leaving the pen at (x,y). The method p.close() can be used to close the path (or the current piece of the path) by drawing a line back to its starting point. For example, the following code creates a triangle with vertices at (0,5), (2,-3), and (-4,1):</p> <pre><code>Path2D.Double p = new Path2D.Double();\np.moveTo(0,5);\np.lineTo(2,-3);\np.lineTo(-4,1);\np.close();\n</code></pre> <p>You can also add Bezier curve segments to a Path2D. Bezier curves were discussed in Subsection 2.2.3. You can add a cubic Bezier curve to a Path2D p with the method</p> <pre><code>p.curveTo( cx1, cy1, cx2, cy2, x, y );\n</code></pre> <p>This adds a curve segment that starts at the current pen position and ends at (x,y), using (cx1,cy1) and (cx2,cy2) as the two control points for the curve. The method for adding a quadratic Bezier curve segment to a path is quadTo. It requires only a single control point:</p> <pre><code>p.quadTo( cx, cy, x, y );\n</code></pre> <p>When a path intersects itself, its interior is determined by looking at the winding number, as discussed in Subsection 2.2.2. There are two possible rules for determining whether a point is interior: asking whether the winding number of the curve about that point is non-zero, or asking whether it is odd. You can set the winding rule used by a Path2D p with</p> <pre><code>p.setWindingRule( Path2D.WIND_NON_ZERO );\np.setWindingRule( Path2D.WIND_EVEN_ODD );\n</code></pre> <p>The default is WIND_NON_ZERO.</p> <p>Finally, I will note that it is possible to draw a copy of an image into a graphics context. The image could be loaded from a file or created by the program. I discuss the second possibility later in this section. An image is represented by an object of type Image. In fact, I will assume here that the object is of type BufferedImage, which is a subclass of Image. If img is such an object, then</p> <pre><code>g2.drawImage( img, x, y, null );\n</code></pre> <p>will draw the image with its upper left corner at the point (x,y). (The fourth parameter is hard to explain, but it should be specified as null for BufferedImages.) This draws the image at its natural width and height, but a different width and height can be specified in the method:</p> <pre><code>g2.drawImage( img, x, y, width, height, null );\n</code></pre> <p>There is also a method for drawing a string of text. The method specifies the string and the basepoint of the string. (The basepoint is the lower left corner of the string, ignoring \"descenders\" like the tail on the letter \"g\".) For example,</p> <pre><code>g2.drawString( \"Hello World\", 100, 50 );\n</code></pre> <p>Images and strings are subject to transforms in the same way as other shapes. Transforms are the only way to get rotated text and images. As an example, here is what can happen when you apply a rotation to some text and an image:</p> <p> </p>"},{"location":"cn/c2/s5/#253-\u63cf\u8fb9\u548c\u586b\u5145","title":"2.5.3  \u63cf\u8fb9\u548c\u586b\u5145","text":"<p>Stroke and Fill</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u65e6\u60a8\u6709\u4e00\u4e2a\u8868\u793a\u5f62\u72b6\u7684\u5bf9\u8c61\uff0c\u60a8\u5c31\u53ef\u4ee5\u586b\u5145\u8be5\u5f62\u72b6\u6216\u63cf\u8fb9\u5b83\u3002Graphics2D\u7c7b\u5b9a\u4e49\u4e86\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002\u63cf\u8fb9\u5f62\u72b6\u7684\u65b9\u6cd5\u79f0\u4e3adraw\uff1a</p> <pre><code>g2.fill(shape);\ng2.draw(shape);\n</code></pre> <p>\u8fd9\u91cc\uff0cg2\u662fGraphics2D\u7c7b\u578b\uff0cshape\u53ef\u4ee5\u662fPath2D\u3001Line2D\u3001Rectangle2D\u6216\u4efb\u4f55\u5176\u4ed6\u5f62\u72b6\u7c7b\u7684\u5bf9\u8c61\u3002\u8fd9\u4e9b\u901a\u5e38\u7528\u4e8e\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u4e0a\uff0c\u5f53\u8be5\u5bf9\u8c61\u8868\u793a\u7684\u5f62\u72b6\u53ea\u4f1a\u88ab\u7ed8\u5236\u4e00\u6b21\u65f6\u3002\u4f8b\u5982\uff1a</p> <pre><code>g2.draw( new Line2D.Double( -5, -5, 5, 5 ) );\n</code></pre> <p>\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u5f62\u72b6\u5bf9\u8c61\u5e76\u591a\u6b21\u91cd\u7528\u5b83\u4eec\u3002</p> <p>\u7528\u4e8e\u63cf\u8fb9\u5f62\u72b6\u7684\u201c\u7b14\u201d\u901a\u5e38\u7531BasicStroke\u7c7b\u578b\u7684\u5bf9\u8c61\u8868\u793a\u3002\u9ed8\u8ba4\u7684\u7b14\u7684\u7ebf\u5bbd\u7b49\u4e8e1\u3002\u8fd9\u662f\u5f53\u524d\u5750\u6807\u7cfb\u4e2d\u7684\u4e00\u4e2a\u5355\u4f4d\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u50cf\u7d20\u3002\u8981\u83b7\u5f97\u4e0d\u540c\u5bbd\u5ea6\u7684\u7ebf\u6761\uff0c\u53ef\u4ee5\u5b89\u88c5\u4e00\u4e2a\u65b0\u7684\u7b14\uff1a</p> <pre><code>g2.setStroke( new BasicStroke(width) );\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u4e2d\u7684width\u7684\u7c7b\u578b\u662ffloat\u3002\u53ef\u4ee5\u5411\u6784\u9020\u51fd\u6570\u6dfb\u52a0\u53c2\u6570\u6765\u63a7\u5236\u7b14\u5728\u5176\u7aef\u70b9\u7684\u5f62\u72b6\u4ee5\u53ca\u4e24\u4e2a\u7ebf\u6bb5\u76f8\u9047\u7684\u4f4d\u7f6e\u3002\uff08\u89c1\u5b50\u82822.2.1\u3002\uff09\u4f8b\u5982\uff1a</p> <pre><code>g2.setStroke( new BasicStroke( 5.0F,\n        BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL) );\n</code></pre> <p>\u8fd8\u53ef\u4ee5\u7528\u865a\u7ebf\u548c\u70b9\u7ebf\u5236\u4f5c\u7b14\uff0c\u4f46\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u5982\u4f55\u505a\u3002</p> <p>\u5bf9\u5f62\u72b6\u8fdb\u884c\u63cf\u8fb9\u6216\u586b\u5145\u610f\u5473\u7740\u8bbe\u7f6e\u67d0\u4e9b\u50cf\u7d20\u7684\u989c\u8272\u3002\u5728Java\u4e2d\uff0c\u7528\u4e8e\u5bf9\u8fd9\u4e9b\u50cf\u7d20\u7740\u8272\u7684\u89c4\u5219\u79f0\u4e3a\u201c\u753b\u7b14\u201d\u3002\u753b\u7b14\u53ef\u4ee5\u662f\u7eaf\u8272\u3001\u6e10\u53d8\u6216\u56fe\u6848\u3002\u4e0eJava\u4e2d\u7684\u5927\u591a\u6570\u4e1c\u897f\u4e00\u6837\uff0c\u753b\u7b14\u7531\u5bf9\u8c61\u8868\u793a\u3002\u5982\u679cpaint\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48</p> <pre><code>g2.setPaint(paint);\n</code></pre> <p>\u5c06\u8bbe\u7f6epaint\u7528\u4e8e\u56fe\u5f62\u4e0a\u4e0b\u6587g2\u7684\u540e\u7eed\u7ed8\u56fe\u64cd\u4f5c\uff0c\u76f4\u5230\u4e0b\u6b21\u66f4\u6539\u753b\u7b14\u4e3a\u6b62\u3002\uff08\u8fd8\u6709\u4e00\u79cd\u66f4\u65e7\u7684\u65b9\u6cd5\uff0cg2.setColor(c)\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u989c\u8272\uff0c\u5e76\u7b49\u4ef7\u4e8e\u8c03\u7528g2.setPaint(c)\u3002\uff09</p> <p>\u7eaf\u8272\u7531Color\u7c7b\u578b\u7684\u5bf9\u8c61\u8868\u793a\u3002\u989c\u8272\u5728\u5185\u90e8\u8868\u793a\u4e3aRGBA\u989c\u8272\u3002\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u4e0d\u900f\u660e\u989c\u8272\uff0c\u5176alpha\u5206\u91cf\u6700\u5927\uff1a</p> <pre><code>new Color( r, g, b );\n</code></pre> <p>\u5176\u4e2dr\u3001g\u548cb\u662f\u4ecb\u4e8e0\u5230255\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u8868\u793a\u989c\u8272\u7684\u7ea2\u3001\u7eff\u548c\u84dd\u5206\u91cf\u3002\u8981\u83b7\u5f97\u534a\u900f\u660e\u989c\u8272\uff0c\u53ef\u4ee5\u6dfb\u52a0alpha\u5206\u91cf\uff0c\u4e5f\u57280\u5230255\u8303\u56f4\u5185\uff1a</p> <pre><code>new Color( r, b, g, a );\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\uff0cColor.getHSBColor(h,s,b)\uff0c\u5b83\u4eceHSB\uff08\u53c8\u540dHSV\uff09\u989c\u8272\u6a21\u578b\u7684\u503c\u521b\u5efa\u989c\u8272\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8272\u76f8\u3001\u9971\u548c\u5ea6\u548c\u4eae\u5ea6\u989c\u8272\u5206\u91cf\u5fc5\u987b\u4f5c\u4e3afloat\u7c7b\u578b\u7684\u503c\u7ed9\u51fa\u3002\u8fd8\u6709\u5e38\u91cf\u6765\u8868\u793a\u5927\u7ea6\u5341\u51e0\u79cd\u5e38\u89c1\u7684\u989c\u8272\uff0c\u4f8b\u5982Color.WHITE\u3001Color.RED\u548cColor.YELLOW\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u6211\u53ef\u80fd\u5982\u4f55\u7ed8\u5236\u4e00\u4e2a\u5e26\u6709\u9ed1\u8272\u8f6e\u5ed3\u548c\u6d45\u84dd\u8272\u5185\u90e8\u7684\u6b63\u65b9\u5f62\u7684\u65b9\u6cd5\uff1a</p> <pre><code>Rectangle2D square = new Rectangle2D.Double(-2,-2,4,4);\ng2.setPaint( new Color(200,200,255) );\ng2.fill( square );\ng2.setStroke( new BasicStroke(0.1F) );\ng2.setPaint( Color.BLACK );\ng2.draw( square );\n</code></pre> <p>\u9664\u4e86\u7eaf\u8272\u5916\uff0cJava\u8fd8\u6709GradientPaint\u7c7b\uff0c\u7528\u4e8e\u8868\u793a\u7b80\u5355\u7684\u7ebf\u6027\u6e10\u53d8\uff0c\u4ee5\u53caTexturePaint\u7c7b\uff0c\u7528\u4e8e\u8868\u793a\u56fe\u6848\u586b\u5145\u3002\u5728\u4e09\u7ef4\u56fe\u5f62\u4e2d\u4f7f\u7528\u7684\u56fe\u50cf\u6a21\u5f0f\u79f0\u4e3a\u7eb9\u7406\u3002\u6e10\u53d8\u548c\u56fe\u6848\u5728\u5b50\u82822.2.2\u4e2d\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u753b\u7b14\uff0c\u5e94\u7528\u4e8e\u50cf\u7d20\u7684\u989c\u8272\u53d6\u51b3\u4e8e\u50cf\u7d20\u7684\u5750\u6807\u3002</p> <p>\u8981\u521b\u5efa\u4e00\u4e2aTexturePaint\uff0c\u60a8\u9700\u8981\u4e00\u4e2aBufferedImage\u5bf9\u8c61\u6765\u6307\u5b9a\u5b83\u5c06\u7528\u4f5c\u56fe\u6848\u7684\u56fe\u50cf\u3002\u60a8\u8fd8\u5fc5\u987b\u8bf4\u660e\u56fe\u50cf\u4e2d\u7684\u5750\u6807\u5982\u4f55\u6620\u5c04\u5230\u663e\u793a\u4e2d\u7684\u7ed8\u56fe\u5750\u6807\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u77e9\u5f62\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u8be5\u77e9\u5f62\u5c06\u5bb9\u7eb3\u56fe\u50cf\u7684\u4e00\u4e2a\u526f\u672c\u3002\u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>new TexturePaint( image, rect );\n</code></pre> <p>\u5176\u4e2dimage\u662fBufferedImage\uff0crect\u662fRectangle2D\u3002\u5728\u6307\u5b9a\u7684\u77e9\u5f62\u5916\u90e8\uff0c\u56fe\u50cf\u5728\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u4e0a\u91cd\u590d\u3002GradientPaint\u7684\u6784\u9020\u51fd\u6570\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>new GradientPaint( x1, y1, color1, x2, y2, color2, cyclic )\n</code></pre> <p>\u8fd9\u91cc\uff0cx1\u3001y1\u3001x2\u548cy2\u662ffloat\u7c7b\u578b\u7684\u503c\uff1bcolor1\u548ccolor2\u662fColor\u7c7b\u578b\uff1bcyclic\u662f\u5e03\u5c14\u503c\u3002\u6e10\u53d8\u989c\u8272\u5c06\u6cbf\u7740\u4ece\u70b9(x1,y1)\u5230\u70b9(x2,y2)\u7684\u7ebf\u6bb5\u53d8\u5316\u3002\u5728\u7b2c\u4e00\u4e2a\u7aef\u70b9\u5904\uff0c\u989c\u8272\u662fcolor1\uff0c\u5728\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u5904\u662fcolor2\u3002\u989c\u8272\u6cbf\u7740\u4e0e\u8be5\u7ebf\u6bb5\u5782\u76f4\u7684\u7ebf\u6bb5\u662f\u6052\u5b9a\u7684\u3002\u5e03\u5c14\u53c2\u6570cyclic\u6307\u5b9a\u989c\u8272\u6a21\u5f0f\u662f\u5426\u91cd\u590d\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u547d\u4ee4\u5c06\u5728\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u5b89\u88c5\u4e00\u4e2aGradientPaint\uff1a</p> <pre><code>g2.setPaint( new GradientPaint( 0,0, Color.BLACK, 200,100, Color.RED, true ) );\n</code></pre> <p>\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u5f53\u524d\u753b\u7b14\u7528\u4e8e\u63cf\u8fb9\u548c\u586b\u5145\u3002</p> <p>\u793a\u4f8bJava\u7a0b\u5e8fjava2d/PaintDemo.java\u663e\u793a\u4e86\u4e00\u4e2a\u586b\u5145\u6709GradientPaint\u6216TexturePaint\u7684\u591a\u8fb9\u5f62\uff0c\u5e76\u5141\u8bb8\u60a8\u8c03\u6574\u5176\u5c5e\u6027\u3002\u56fe\u50cf\u6587\u4ef6java2d/QueenOfHearts.png\u548cjava2d/TinySmiley.png\u662f\u8be5\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u5728\u8fd0\u884c\u8be5\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4eec\u5fc5\u987b\u4e0e\u6784\u6210\u8be5\u7a0b\u5e8f\u7684\u7f16\u8bd1\u540e\u7684\u7c7b\u6587\u4ef6\u4f4d\u4e8e\u540c\u4e00\u4f4d\u7f6e\u3002</p> <p>Once you have an object that represents a shape, you can fill the shape or stroke it. The Graphics2D class defines methods for doing this. The method for stroking a shape is called draw:</p> <pre><code>g2.fill(shape);\ng2.draw(shape);\n</code></pre> <p>Here, g2 is of type Graphics2D, and shape can be of type Path2D, Line2D, Rectangle2D or any of the other shape classes. These are often used on a newly created object, when that object represents a shape that will only be drawn once. For example</p> <pre><code>g2.draw( new Line2D.Double( -5, -5, 5, 5 ) );\n</code></pre> <p>Of course, it is also possible to create shape objects and reuse them many times.</p> <p>The \"pen\" that is used for stroking a shape is usually represented by an object of type BasicStroke. The default stroke has line width equal to 1. That's one unit in the current coordinate system, not one pixel. To get a line with a different width, you can install a new stroke with</p> <pre><code>g2.setStroke( new BasicStroke(width) );\n</code></pre> <p>The width in the constructor is of type float. It is possible to add parameters to the constructor to control the shape of a stroke at its endpoints and where two segments meet. (See Subsection 2.2.1.) For example,</p> <pre><code>g2.setStroke( new BasicStroke( 5.0F,\n        BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL) );\n</code></pre> <p>It is also possible to make strokes out of dashes and dots, but I won't discuss how to do it here.</p> <p>Stroking or filling a shape means setting the colors of certain pixels. In Java, the rule that is used for coloring those pixels is called a \"paint.\" Paints can be solid colors, gradients, or patterns. Like most things in Java, paints are represented by objects. If paint is such an object, then</p> <pre><code>g2.setPaint(paint);\n</code></pre> <p>will set paint to be used in the graphics context g2 for subsequent drawing operations, until the next time the paint is changed. (There is also an older method, g2.setColor(c), that works only for colors and is equivalent to calling g2.setPaint(c).)</p> <p>Solid colors are represented by objects of type Color. A color is represented internally as an RGBA color. An opaque color, with maximal alpha component, can be created using the constructor</p> <pre><code>new Color( r, g, b );\n</code></pre> <p>where r, g, and b are integers in the range 0 to 255 that give the red, green, and blue components of the color. To get a translucent color, you can add an alpha component, also in the range 0 to 255:</p> <pre><code>new Color( r, b, g, a );\n</code></pre> <p>There is also a function, Color.getHSBColor(h,s,b), that creates a color from values in the HSB color model (which is another name for HSV). In this case, the hue, saturation, and brightness color components must be given as values of type float. And there are constants to represent about a dozen common colors, such as Color.WHITE, Color.RED, and Color.YELLOW. For example, here is how I might draw a square with a black outline and a light blue interior:</p> <pre><code>Rectangle2D square = new Rectangle2D.Double(-2,-2,4,4);\ng2.setPaint( new Color(200,200,255) );\ng2.fill( square );\ng2.setStroke( new BasicStroke(0.1F) );\ng2.setPaint( Color.BLACK );\ng2.draw( square );\n</code></pre> <p>Beyond solid colors, Java has the class GradientPaint, to represent simple linear gradients, and TexturePaint to represent pattern fills. (Image patterns used in a similar way in 3D graphics are called textures.) Gradients and patterns were discussed in Subsection 2.2.2. For these paints, the color that is applied to a pixel depends on the coordinates of the pixel.</p> <p>To create a TexturePaint, you need a BufferedImage object to specify the image that it will use as a pattern. You also have to say how coordinates in the image will map to drawing coordinates in the display. You do this by specifying a rectangle that will hold one copy of the image. So the constructor takes the form:</p> <pre><code>new TexturePaint( image, rect );\n</code></pre> <p>where image is the BufferedImage and rect is a Rectangle2D. Outside that specified rectangle, the image is repeated horizontally and vertically. The constructor for a GradientPaint takes the form</p> <pre><code>new GradientPaint( x1, y1, color1, x2, y2, color2, cyclic )\n</code></pre> <p>Here, x1, y1, x2, and y2 are values of type float; color1 and color2 are of type Color; and cyclic is boolean. The gradient color will vary along the line segment from the point (x1,y1) to the point (x2,y2). The color is color1 at the first endpoint and is color2 at the second endpoint. Color is constant along lines perpendicular to that line segment. The boolean parameter cyclic says whether or not the color pattern repeats. As an example, here is a command that will install a GradientPaint into a graphics context:</p> <pre><code>g2.setPaint( new GradientPaint( 0,0, Color.BLACK, 200,100, Color.RED, true ) );\n</code></pre> <p>You should, by the way, note that the current paint is used for strokes as well as for fills.</p> <p>The sample Java program java2d/PaintDemo.java displays a polygon filled with a GradientPaint or a TexturePaint and lets you adjust their properties. The image files java2d/QueenOfHearts.png and java2d/TinySmiley.png are part of that program, and they must be in the same location as the compiled class files that make up that program when it is run.</p>"},{"location":"cn/c2/s5/#254-\u53d8\u6362","title":"2.5.4  \u53d8\u6362","text":"<p>Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>Java\u5c06\u51e0\u4f55\u53d8\u6362\u5b9e\u73b0\u4e3aGraphics2D\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5982\u679cg2\u662f\u4e00\u4e2aGraphics2D\uff0c\u90a3\u4e48\u8c03\u7528g2.translate(1,3)\u5c06\u5bf9\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\u4e4b\u540e\u7ed8\u5236\u7684\u5bf9\u8c61\u5e94\u7528\u4e00\u4e2a(1,3)\u7684\u5e73\u79fb\u53d8\u6362\u3002\u53ef\u7528\u7684\u65b9\u6cd5\u5bf9\u5e94\u4e8eSection 2.3\u4e2d\u8ba8\u8bba\u7684\u53d8\u6362\u51fd\u6570\uff1a</p> <ul> <li><code>g2.scale(sx,sy)</code> \u2014 \u6309\u6c34\u5e73\u7f29\u653e\u56e0\u5b50sx\u548c\u5782\u76f4\u7f29\u653e\u56e0\u5b50sy\u7f29\u653e\u3002</li> <li><code>g2.rotate(r)</code> \u2014 \u7ed5\u539f\u70b9\u65cb\u8f6cr\u5f27\u5ea6\u89d2\u5ea6\uff0c\u5176\u4e2d\u89d2\u5ea6\u4ee5\u5f27\u5ea6\u8868\u793a\u3002\u6b63\u89d2\u5ea6\u5c06\u6b63x\u8f74\u65cb\u8f6c\u5230\u6b63y\u8f74\u7684\u65b9\u5411\u3002</li> <li><code>g2.rotate(r,x,y)</code> \u2014 \u7ed5\u70b9(x,y)\u65cb\u8f6cr\u89d2\u5ea6\u3002</li> <li><code>g2.translate(dx,dy)</code> \u2014 \u6c34\u5e73\u5e73\u79fbdx\u548c\u5782\u76f4\u5e73\u79fbdy\u3002</li> <li><code>g2.shear(sx,sy)</code> \u2014 \u5e94\u7528\u6c34\u5e73\u526a\u5207\u91cfsx\u548c\u5782\u76f4\u526a\u5207\u91cfsy\u3002\uff08\u901a\u5e38\uff0c\u526a\u5207\u91cf\u4e4b\u4e00\u4e3a0\uff0c\u4ea7\u751f\u7eaf\u6c34\u5e73\u6216\u7eaf\u5782\u76f4\u7684\u526a\u5207\u3002\uff09</li> </ul> <p>\u5728Java\u4e2d\uff0c\u53d8\u6362\u8868\u793a\u4e3aAffineTransform\u7c7b\u7684\u5bf9\u8c61\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u4e00\u822c\u7684\u4eff\u5c04\u53d8\u6362</p> <pre><code>AffineTransform trns = new AffineTransform(a,b,c,d,e,f);\n</code></pre> <p>\u53d8\u6362trns\u5c06\u70b9(x,y)\u53d8\u6362\u4e3a\u70b9(x1,y1)\uff0c\u516c\u5f0f\u5982\u4e0b</p> <pre><code>x1 = a*x + c*y + e\ny1 = b*x + d*y + f;\n</code></pre> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528g2.transform(trns)\u5c06\u53d8\u6362trns\u5e94\u7528\u4e8e\u56fe\u5f62\u4e0a\u4e0b\u6587g2\u3002</p> <p>\u56fe\u5f62\u4e0a\u4e0b\u6587g2\u5305\u62ec\u5f53\u524d\u7684\u4eff\u5c04\u53d8\u6362\uff0c\u8be5\u53d8\u6362\u662f\u5e94\u7528\u7684\u6240\u6709\u53d8\u6362\u7684\u7ec4\u5408\u3002\u8bf8\u5982g2.rotate\u548cg2.transform\u4e4b\u7c7b\u7684\u547d\u4ee4\u4fee\u6539\u5f53\u524d\u53d8\u6362\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528g2.getTransform()\u83b7\u53d6\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2aAffineTransform\u5bf9\u8c61\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528g2.setTransform(trns)\u8bbe\u7f6e\u5f53\u524d\u53d8\u6362\u3002\u8fd9\u5c06\u5728g2\u4e2d\u7528AffineTransform trns\u66ff\u6362\u5f53\u524d\u53d8\u6362\u3002\uff08\u6ce8\u610f\uff0cg2.setTransform(trns)\u4e0eg2.transform(trns)\u4e0d\u540c\uff1b\u7b2c\u4e00\u4e2a\u547d\u4ee4\u66ff\u6362g2\u4e2d\u7684\u5f53\u524d\u53d8\u6362\uff0c\u800c\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u4fee\u6539\u5f53\u524d\u53d8\u6362\uff0c\u5c06\u5176\u4e0etrns\u7ec4\u5408\u3002\uff09</p> <p>getTransform\u548csetTransform\u65b9\u6cd5\u53ef\u7528\u4e8e\u5b9e\u73b0\u5206\u5c42\u5efa\u6a21\u3002\u5982Section 2.4\u6240\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d\uff0c\u60a8\u5e94\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u3002\u7ed8\u5236\u5bf9\u8c61\u540e\uff0c\u6062\u590d\u4fdd\u5b58\u7684\u53d8\u6362\u3002\u5728\u7ed8\u5236\u5bf9\u8c61\u53ca\u5176\u5b50\u5bf9\u8c61\u65f6\u5e94\u7528\u7684\u4efb\u4f55\u989d\u5916\u7684\u5efa\u6a21\u53d8\u6362\u5c06\u4e0d\u4f1a\u5f71\u54cd\u5bf9\u8c61\u4e4b\u5916\u7684\u5185\u5bb9\u3002\u5728Java\u4e2d\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\uff1a</p> <pre><code>AffineTransform savedTransform = g2.getTransform();\ndrawObject();\ng2.setTransform( savedTransform );\n</code></pre> <p>\u5bf9\u4e8e\u5206\u5c42\u56fe\u5f62\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u9700\u8981\u4e00\u4e2a\u53d8\u6362\u5806\u6808\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f7f\u7528\u5b50\u7a0b\u5e8f\u5b9e\u73b0\u5c42\u6b21\u7ed3\u6784\uff0c\u5219\u4e0a\u8ff0\u4ee3\u7801\u5c06\u662f\u5b50\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u5c40\u90e8\u53d8\u91cfsavedTransform\u7684\u503c\u5c06\u5b58\u50a8\u5728\u5b50\u7a0b\u5e8f\u8c03\u7528\u5806\u6808\u4e0a\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b50\u7a0b\u5e8f\u8c03\u7528\u5806\u6808\u6765\u5b9e\u73b0\u4fdd\u5b58\u53d8\u6362\u7684\u5806\u6808\u3002</p> <p>\u9664\u4e86\u5efa\u6a21\u53d8\u6362\u4e4b\u5916\uff0c\u53d8\u6362\u8fd8\u7528\u4e8e\u8bbe\u7f6e\u7a97\u53e3\u5230\u89c6\u53e3\u53d8\u6362\uff0c\u5efa\u7acb\u7528\u4e8e\u7ed8\u56fe\u7684\u5750\u6807\u7cfb\u7edf\u3002\u8fd9\u901a\u5e38\u5728\u521b\u5efa\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e4b\u540e\u7acb\u5373\u8fdb\u884c\uff0c\u800c\u4e0d\u662f\u5728\u4efb\u4f55\u7ed8\u56fe\u64cd\u4f5c\u4e4b\u524d\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528Subsection 2.3.7\u4e2d\u7684Java\u7248\u672c\u7684applyWindowToViewportTransformation\u51fd\u6570\u8fdb\u884c\u3002\u8bf7\u53c2\u89c1\u793a\u4f8b\u7a0b\u5e8fjava2d/GraphicsStarter.java\u3002</p> <p>\u6211\u8fd8\u8981\u63d0\u4e00\u4e0bAffineTransform\u5bf9\u8c61\u7684\u53e6\u4e00\u4e2a\u7528\u9014\uff1a\u6709\u65f6\uff0c\u60a8\u786e\u5b9e\u9700\u8981\u663e\u5f0f\u5730\u8f6c\u6362\u5750\u6807\u3002\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5bf9\u8c61\u5750\u6807(x,y)\uff0c\u6211\u53ef\u80fd\u9700\u8981\u77e5\u9053\u5b83\u4eec\u5728\u5c4f\u5e55\u4e0a\u5b9e\u9645\u4f1a\u5230\u8fbe\u54ea\u91cc\uff0c\u5373\u50cf\u7d20\u5750\u6807\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u60f3\u901a\u8fc7\u5f53\u524d\u53d8\u6362\u6765\u8f6c\u6362(x,y)\u4ee5\u83b7\u53d6\u76f8\u5e94\u7684\u50cf\u7d20\u5750\u6807\u3002AffineTransform\u7c7b\u6709\u4e00\u4e2a\u65b9\u6cd5\u7528\u4e8e\u5c06\u4eff\u5c04\u53d8\u6362\u5e94\u7528\u4e8e\u70b9\u3002\u5b83\u4f7f\u7528Point2D\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>AffineTransform trns = g2.getTransform();\nPoint2D.Double originalPoint = new Point2D.Double(x,y);\nPoint2D.Double transformedPoint = new Point2D.Double();\ntrns.transform( originalPoint, transformedPoint );\n// transformedPoint \u73b0\u5728\u5305\u542b\u4e0e (x,y) \u5bf9\u5e94\u7684\u50cf\u7d20\u5750\u6807\nint pixelX = (int)transformedPoint.x;\nint pixelY = (int)transformedPoint.y;\n</code></pre> <p>\u6211\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u5728\u5904\u7406\u5b57\u7b26\u4e32\u65f6\u3002\u901a\u5e38\uff0c\u5728\u4f7f\u7528\u53d8\u6362\u5750\u6807\u7cfb\u663e\u793a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u5e0c\u671b\u8f6c\u6362\u5b57\u7b26\u4e32\u7684\u57fa\u70b9\uff0c\u4f46\u4e0d\u8f6c\u6362\u5b57\u7b26\u4e32\u672c\u8eab\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u5e0c\u671b\u53d8\u6362\u5f71\u54cd\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u4f46\u4e0d\u5f71\u54cd\u5176\u5927\u5c0f\u6216\u65cb\u8f6c\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4f7f\u7528\u4e0a\u8ff0\u6280\u672f\u83b7\u53d6\u8f6c\u6362\u540e\u57fa\u70b9\u7684\u50cf\u7d20\u5750\u6807\uff0c\u7136\u540e\u5728\u8fd9\u4e9b\u5750\u6807\u5904\u7ed8\u5236\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u539f\u59cb\u7684\u3001\u672a\u7ecf\u8f6c\u6362\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002</p> <p>\u53cd\u5411\u64cd\u4f5c\u6709\u65f6\u4e5f\u662f\u5fc5\u8981\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed9\u5b9a\u50cf\u7d20\u5750\u6807(px,py)\uff0c\u627e\u5230\u901a\u8fc7\u7ed9\u5b9a\u4eff\u5c04\u53d8\u6362\u8f6c\u6362\u4e3a(px,py)\u7684\u70b9(x,y)\u3002\u4f8b\u5982\uff0c\u5f53\u5b9e\u73b0\u9f20\u6807\u4ea4\u4e92\u65f6\uff0c\u901a\u5e38\u4f1a\u77e5\u9053\u9f20\u6807\u7684\u50cf\u7d20\u5750\u6807\uff0c\u4f46\u60a8\u5e0c\u671b\u627e\u5230\u60a8\u81ea\u5df1\u9009\u62e9\u7684\u5750\u6807\u7cfb\u4e2d\u76f8\u5e94\u7684\u70b9\u3002\u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u9006\u53d8\u6362\u3002\u4eff\u5c04\u53d8\u6362T\u7684\u9006\u53d8\u6362\u662f\u6267\u884c\u76f8\u53cd\u53d8\u6362\u7684\u53e6\u4e00\u4e2a\u53d8\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cT(x,y) = (px,py)\uff0c\u5e76\u4e14\u5982\u679cR\u662f\u9006\u53d8\u6362\uff0c\u5219R(px,py) = (x,y)\u3002\u5728Java\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u83b7\u5f97AffineTransform trns\u7684\u9006\u53d8\u6362\uff1a</p> <pre><code>AffineTransform inverse = trns.createInverse();\n</code></pre> <p>\uff08\u6700\u540e\u6ce8\u610f\uff1a\u6765\u81eaGraphics\u7684\u65e7\u7ed8\u56fe\u65b9\u6cd5\uff0c\u5982drawLine\uff0c\u4f7f\u7528\u6574\u6570\u5750\u6807\u3002\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u4f7f\u7528\u8fd9\u4e9b\u65e7\u65b9\u6cd5\u7ed8\u5236\u7684\u4efb\u4f55\u5f62\u72b6\u90fd\u53d7\u5230\u4e0e\u6307\u5b9a\u5b9e\u6570\u5750\u6807\u7684Line2D\u7b49\u5f62\u72b6\u76f8\u540c\u7684\u53d8\u6362\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u4f7f\u7528g.drawLine(1,2,5,7)\u7ed8\u5236\u7ebf\u5c06\u5177\u6709\u4e0e\u7ed8\u5236\u5177\u6709\u7aef\u70b9(1.0,2.0)\u548c(5.0,7.0)\u7684Line2D\u76f8\u540c\u7684\u6548\u679c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6240\u6709\u7ed8\u56fe\u90fd\u53d7\u5230\u5750\u6807\u53d8\u6362\u7684\u5f71\u54cd\u3002\uff09</p> <p>Java implements geometric transformations as methods in the Graphics2D class. For example, if g2 is a Graphics2D, then calling g2.translate(1,3) will apply a translation by (1,3) to objects that are drawn after the method is called. The methods that are available correspond to the transform functions discussed in Section 2.3:</p> <ul> <li><code>g2.scale(sx,sy)</code> \u2014 scales by a horizontal scale factor sx and a vertical scale factor sy.</li> <li><code>g2.rotate(r)</code> \u2014 rotates by the angle r about the origin, where the angle is measured in radians. A positive angle rotates the positive x-axis in the direction of the positive y-axis.</li> <li><code>g2.rotate(r,x,y)</code> \u2014 rotates by the angle r about the point (x,y).</li> <li><code>g2.translate(dx,dy)</code> \u2014 translates by dx horizontally and dy vertically.</li> <li><code>g2.shear(sx,sy)</code> \u2014 applies a horizontal shear amount sx and a vertical shear amount sy. (Usually, one of the shear amounts is 0, giving a pure horizontal or vertical shear.)</li> </ul> <p>A transform in Java is represented as an object of the class AffineTransform. You can create a general affine transform with the constructor</p> <pre><code>AffineTransform trns = new AffineTransform(a,b,c,d,e,f);\n</code></pre> <p>The transform trns will transform a point (x,y) to the point (x1,y1) given by</p> <pre><code>x1 = a*x + c*y + e\ny1 = b*x + d*y + f;\n</code></pre> <p>You can apply the transform trns to a graphics context g2 by calling g2.transform(trns).</p> <p>The graphics context g2 includes the current affine transform, which is the composition of all the transforms that have been applied. Commands such as g2.rotate and g2.transform modify the current transform. You can get a copy of the current transform by calling g2.getTransform(), which returns an AffineTransform object. You can set the current transform using g2.setTransform(trns). This replaces the current transform in g2 with the AffineTransform trns. (Note that g2.setTransform(trns) is different from g2.transform(trns); the first command replaces the current transform in g2, while the second modifies the current transform by composing it with trns.)</p> <p>The getTransform and setTransform methods can be used to implement hierarchical modeling. The idea, as discussed in Section 2.4, is that before drawing an object, you should save the current transform. After drawing the object, restore the saved transform. Any additional modeling transformations that are applied while drawing the object and its sub-objects will have no effect outside the object. In Java, this looks like</p> <pre><code>AffineTransform savedTransform = g2.getTransform();\ndrawObject();\ng2.setTransform( savedTransform );\n</code></pre> <p>For hierarchical graphics, we really need a stack of transforms. However, if the hierarchy is implemented using subroutines, then the above code would be part of a subroutine, and the value of the local variable savedTransform would be stored on the subroutine call stack. Effectively, we would be using the subroutine call stack to implement the stack of saved transforms.</p> <p>In addition to modeling transformations, transforms are used to set up the window-to-viewport transformation that establishes the coordinate system that will be used for drawing. This is usually done in Java just after the graphics context has been created, before any drawing operations. It can be done with a Java version of the applyWindowToViewportTransformation function from Subsection 2.3.7. See the sample program java2d/GraphicsStarter.java for an example.</p> <p>I will mention one more use for AffineTransform objects: Sometimes, you do need to explicitly transform coordinates. For example, given object coordinates (x,y), I might need to know where they will actually end up on the screen, in pixel coordinates. That is, I would like to transform (x,y) by the current transform to get the corresponding pixel coordinates. The AffineTransform class has a method for applying the affine transform to a point. It works with objects of type Point2D. Here is an example:</p> <pre><code>AffineTransform trns = g2.getTransform();\nPoint2D.Double originalPoint = new Point2D.Double(x,y);\nPoint2D.Double transformedPoint = new Point2D.Double();\ntrns.transform( originalPoint, transformedPoint );\n// transformedPoint now contains the pixel coords corresponding to (x,y)\nint pixelX = (int)transformedPoint.x;\nint pixelY = (int)transformedPoint.y;\n</code></pre> <p>One way I have used this is when working with strings. Often when displaying a string in a transformed coordinate system, I want to transform the basepoint of a string, but not the string itself. That is, I want the transformation to affect the location of the string but not its size or rotation. To accomplish this, I use the above technique to obtain the pixel coordinates for the transformed basepoint, and then draw the string at those coordinates, using an original, untransformed graphics context.</p> <p>The reverse operation is also sometimes necessary. That is, given pixel coordinates (px,py), find the point (x,y) that is transformed to (px,py) by a given affine transform. For example, when implementing mouse interaction, you will generally know the pixel coordinates of the mouse, but you will want to find the corresponding point in your own chosen coordinate system. For that, you need an inverse transform. The inverse of an affine transform T is another transform that performs the opposite transformation. That is, if T(x,y) = (px,py), and if R is the inverse transform, then R(px,py) = (x,y). In Java, the inverse transform of an AffineTransform trns can be obtained with</p> <p>AffineTransform inverse = trns.createInverse(); (A final note: The older drawing methods from Graphics, such as drawLine, use integer coordinates. It's important to note that any shapes drawn using these older methods are subject to the same transformation as shapes such as Line2D that are specified with real number coordinates. For example, drawing a line with g.drawLine(1,2,5,7) will have the same effect as drawing a Line2D that has endpoints (1.0,2.0) and (5.0,7.0). In fact, all drawing is affected by the transformation of coordinates.)</p> <pre><code>AffineTransform inverse = trns.createInverse();\n</code></pre> <p>(A final note: The older drawing methods from Graphics, such as drawLine, use integer coordinates. It's important to note that any shapes drawn using these older methods are subject to the same transformation as shapes such as Line2D that are specified with real number coordinates. For example, drawing a line with g.drawLine(1,2,5,7) will have the same effect as drawing a Line2D that has endpoints (1.0,2.0) and (5.0,7.0). In fact, all drawing is affected by the transformation of coordinates.)</p>"},{"location":"cn/c2/s5/#255-bufferedimage-\u548c-pixels","title":"2.5.5  BufferedImage \u548c Pixels","text":"<p>BufferedImage and Pixels</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u4e00\u4e9b\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u80fd\u591f\u4f7f\u7528\u4e0d\u53ef\u89c1\u4e8e\u5c4f\u5e55\u7684\u56fe\u50cf\u662f\u5f88\u6709\u7528\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u9700\u8981\u6211\u6240\u79f0\u7684\u79bb\u5c4f\u753b\u5e03\u3002\u60a8\u8fd8\u9700\u8981\u4e00\u79cd\u5feb\u901f\u5c06\u79bb\u5c4f\u753b\u5e03\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u526f\u672c\u5b58\u50a8\u5728\u79bb\u5c4f\u753b\u5e03\u4e2d\u53ef\u80fd\u5f88\u6709\u7528\u3002\u753b\u5e03\u662f\u56fe\u50cf\u7684\u5b98\u65b9\u526f\u672c\u3002\u5bf9\u56fe\u50cf\u7684\u66f4\u6539\u662f\u5728\u753b\u5e03\u4e0a\u8fdb\u884c\u7684\uff0c\u7136\u540e\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u3002\u8fd9\u6837\u505a\u7684\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u60a8\u53ef\u4ee5\u5728\u5c4f\u5e55\u56fe\u50cf\u4e0a\u7ed8\u5236\u989d\u5916\u7684\u5185\u5bb9\u800c\u4e0d\u6539\u53d8\u5b98\u65b9\u526f\u672c\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u4f1a\u5728\u5c4f\u5e55\u56fe\u50cf\u4e2d\u9009\u62e9\u4e00\u4e2a\u533a\u57df\u5e76\u7ed8\u5236\u4e00\u4e2a\u6846\u3002\u60a8\u53ef\u4ee5\u5728\u4e0d\u635f\u5bb3\u79bb\u5c4f\u753b\u5e03\u4e2d\u7684\u5b98\u65b9\u526f\u672c\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u8981\u4ece\u5c4f\u5e55\u4e2d\u5220\u9664\u6846\uff0c\u60a8\u53ea\u9700\u5c06\u79bb\u5c4f\u753b\u5e03\u56fe\u50cf\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u3002</p> <p>\u5728Java\u4e2d\uff0c\u53ef\u4ee5\u5c06\u79bb\u5c4f\u56fe\u50cf\u5b9e\u73b0\u4e3aBufferedImage\u7c7b\u578b\u7684\u5bf9\u8c61\u3002BufferedImage\u8868\u793a\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u7ed8\u5236\uff0c\u65b9\u5f0f\u4e0e\u60a8\u53ef\u4ee5\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\u7684\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u83b7\u53d6\u4e00\u4e2a\u540d\u4e3ag2\u7684Graphics2D\u7c7b\u578b\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\uff0c\u7528\u4e8e\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u3002BufferedImage\u662f\u4e00\u4e2aImage\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\u6216\u4efb\u4f55\u5176\u4ed6\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5c31\u50cf\u5904\u7406\u4efb\u4f55\u5176\u4ed6Image\u4e00\u6837\uff0c\u5373\u4f7f\u7528\u8981\u663e\u793a\u56fe\u50cf\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684drawImage\u65b9\u6cd5\u3002\u5728\u5178\u578b\u7684\u8bbe\u7f6e\u4e2d\uff0c\u6709\u5982\u4e0b\u53d8\u91cf\uff1a</p> <pre><code>BufferedImage OSC;  // \u79bb\u5c4f\u753b\u5e03\nGraphics2D OSG;     // \u7528\u4e8e\u5728\u753b\u5e03\u4e0a\u7ed8\u5236\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\u5bf9\u8c61\uff1a</p> <pre><code>OSC = new BufferedImage( 640, 480, BufferedImage.TYPE_INT_RGB );\nOSG = OSC.createGraphics();\n</code></pre> <p>BufferedImage\u7684\u6784\u9020\u51fd\u6570\u6307\u5b9a\u4e86\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4ee5\u53ca\u5176\u7c7b\u578b\u3002\u7c7b\u578b\u544a\u8bc9\u4e86\u56fe\u50cf\u4e2d\u53ef\u4ee5\u8868\u793a\u4ec0\u4e48\u989c\u8272\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u5b58\u50a8\u3002\u5728\u8fd9\u91cc\uff0c\u7c7b\u578b\u4e3aTYPE_INT_RGB\uff0c\u8fd9\u610f\u5473\u7740\u56fe\u50cf\u4f7f\u7528\u5e26\u6709\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u76848\u4f4d\u7684\u5e38\u89c4RGB\u989c\u8272\u3002\u6bcf\u4e2a\u50cf\u7d20\u7684\u4e09\u4e2a\u989c\u8272\u5206\u91cf\u88ab\u6253\u5305\u5230\u4e00\u4e2a\u6574\u6570\u503c\u4e2d\u3002</p> <p>\u5728\u4f7f\u7528BufferedImage\u5b58\u50a8\u5c4f\u5e55\u4e0a\u56fe\u50cf\u7684\u7a0b\u5e8f\u4e2d\uff0cpaintComponent\u65b9\u6cd5\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>protected void paintComponent(Graphics g) {\n    g.drawImage( OSC, 0, 0, null );\n    Graphics2D g2 = (Graphics2D)g.create();\n    .\n    . // \u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u989d\u5916\u7684\u5185\u5bb9\u3002\n    .\n}\n</code></pre> <p>\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u7684\u793a\u4f8b\u7a0b\u5e8f\u662fjava2d/JavaPixelManipulation.java\u3002\u5728\u8be5\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u62d6\u52a8\u9f20\u6807\u6765\u7ed8\u5236\u7ebf\u6761\u3001\u77e9\u5f62\u548c\u692d\u5706\u3002\u5f53\u9f20\u6807\u79fb\u52a8\u65f6\uff0c\u5f62\u72b6\u5728\u9f20\u6807\u7684\u8d77\u59cb\u70b9\u548c\u5f53\u524d\u4f4d\u7f6e\u4e4b\u95f4\u7ed8\u5236\u3002\u968f\u7740\u9f20\u6807\u7684\u79fb\u52a8\uff0c\u73b0\u6709\u56fe\u50cf\u7684\u90e8\u5206\u53ef\u4ee5\u88ab\u91cd\u590d\u8986\u76d6\u548c\u66b4\u9732\uff0c\u800c\u4e0d\u66f4\u6539\u73b0\u6709\u56fe\u50cf\u3002\u4e8b\u5b9e\u4e0a\uff0c\u56fe\u50cf\u5728\u4e00\u4e2a\u79bb\u5c4f\u753b\u5e03\u4e2d\uff0c\u7528\u6237\u7ed8\u5236\u7684\u5f62\u72b6\u5b9e\u9645\u4e0a\u662f\u7531paintComponent\u5728\u753b\u5e03\u7684\u5185\u5bb9\u4e0a\u7ed8\u5236\u7684\u3002\u76f4\u5230\u7528\u6237\u91ca\u653e\u9f20\u6807\u5e76\u7ed3\u675f\u62d6\u52a8\u64cd\u4f5c\uff0c\u5f62\u72b6\u624d\u4f1a\u88ab\u7ed8\u5236\u5230\u753b\u5e03\u4e2d\u7684\u5b98\u65b9\u56fe\u50cf\u4e0a\u3002</p> <p>\u4f46\u6211\u7f16\u5199\u8be5\u7a0b\u5e8f\u7684\u4e3b\u8981\u539f\u56e0\u662f\u4e3a\u4e86\u8bf4\u660e\u50cf\u7d20\u64cd\u4f5c\uff0c\u5373\u4f7f\u7528\u5355\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u5206\u91cf\u8fdb\u884c\u8ba1\u7b97\u3002BufferedImage\u7c7b\u6709\u7528\u4e8e\u8bfb\u53d6\u548c\u8bbe\u7f6e\u5355\u4e2a\u50cf\u7d20\u989c\u8272\u7684\u65b9\u6cd5\u3002\u56fe\u50cf\u7531\u50cf\u7d20\u7684\u884c\u548c\u5217\u7ec4\u6210\u3002\u5982\u679cOSC\u662fBufferedImage\uff0c\u5219</p> <pre><code>int color = OSC.getRGB(x,y)\n</code></pre> <p>\u83b7\u53d6\u8868\u793ax\u5217y\u884c\u50cf\u7d20\u989c\u8272\u7684\u6574\u6570\u3002\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u5b58\u50a8\u5728\u6574\u6570\u989c\u8272\u503c\u4e2d\u7684\u4e00\u4e2a8\u4f4d\u5b57\u6bb5\u4e2d\u3002\u53ef\u4ee5\u4f7f\u7528Java\u7684\u4f4d\u64cd\u4f5c\u7b26\u4ece\u6574\u6570\u989c\u8272\u503c\u4e2d\u63d0\u53d6\u51fa\u7528\u4e8e\u5904\u7406\u7684\u5355\u4e2a\u989c\u8272\u5206\u91cf\uff1a</p> <pre><code>int red = (color &gt;&gt; 16) &amp; 255;\nint green = (color &gt;&gt; 8) &amp; 255;\nint blue = color &amp; 255;\n</code></pre> <p>\u7c7b\u4f3c\u5730\uff0c\u7ed9\u5b9a\u8303\u56f4\u4e3a0\u5230255\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5206\u91cf\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u8bbe\u7f6e\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u989c\u8272\uff1a</p> <pre><code>int color = (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue;\nOSC.setRGB(x,y,color);\n</code></pre> <p>\u8fd8\u6709\u7528\u4e8e\u8bfb\u53d6\u548c\u8bbe\u7f6e\u77e9\u5f62\u533a\u57df\u4e2d\u6240\u6709\u50cf\u7d20\u989c\u8272\u7684\u65b9\u6cd5\u3002</p> <p>\u50cf\u7d20\u64cd\u4f5c\u7528\u4e8e\u5b9e\u73b0\u793a\u4f8b\u7a0b\u5e8f\u7684\u4e24\u4e2a\u529f\u80fd\u3002\u9996\u5148\uff0c\u6709\u4e00\u4e2a\u201c\u6d82\u62b9\u201d\u5de5\u5177\u3002\u5f53\u7528\u6237\u4f7f\u7528\u6b64\u5de5\u5177\u62d6\u52a8\u65f6\uff0c\u5c31\u50cf\u6d82\u62b9\u6e7f\u6f06\u4e00\u6837\u3002\u5f53\u7528\u6237\u9996\u6b21\u5355\u51fb\u9f20\u6807\u65f6\uff0c\u4ece\u9f20\u6807\u4f4d\u7f6e\u5468\u56f4\u7684\u4e00\u5c0f\u5757\u50cf\u7d20\u4e2d\u590d\u5236\u989c\u8272\u5206\u91cf\u5230\u6570\u7ec4\u4e2d\u3002\u968f\u7740\u7528\u6237\u79fb\u52a8\u9f20\u6807\uff0c\u989c\u8272\u4ece\u6570\u7ec4\u4e2d\u6df7\u5408\u5230\u9f20\u6807\u9644\u8fd1\u7684\u50cf\u7d20\u989c\u8272\u4e2d\uff0c\u540c\u65f6\u5c06\u8fd9\u4e9b\u989c\u8272\u6df7\u5408\u5230\u6570\u7ec4\u4e2d\u7684\u989c\u8272\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u5df2\u7ecf\u201c\u6d82\u62b9\u201d\u7684\u5c0f\u77e9\u5f62\uff1a</p> <p>     ![ <p>pixel-coordinates](../../en/c2/smudge.png) </p> <p>\u50cf\u7d20\u64cd\u4f5c\u7684\u7b2c\u4e8c\u4e2a\u7528\u9014\u662f\u5b9e\u73b0\u201c\u6ee4\u955c\u201d\u3002\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6ee4\u955c\u662f\u4e00\u79cd\u901a\u8fc7\u5c06\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u66ff\u6362\u4e3a\u4e00\u4e2a3x3\u50cf\u7d20\u65b9\u5757\u7684\u989c\u8272\u7684\u52a0\u6743\u5e73\u5747\u503c\u6765\u4fee\u6539\u56fe\u50cf\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u201c\u6a21\u7cca\u201d\u6ee4\u955c\u4f7f\u7528\u6240\u6709\u50cf\u7d20\u7684\u5e73\u5747\u6743\u91cd\uff0c\u56e0\u6b64\u50cf\u7d20\u7684\u989c\u8272\u4f1a\u66f4\u6539\u4e3a\u8be5\u50cf\u7d20\u53ca\u5176\u90bb\u5c45\u7684\u989c\u8272\u7684\u7b80\u5355\u5e73\u5747\u503c\u3002\u4f7f\u7528\u4e0d\u540c\u7684\u6743\u91cd\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u8fdb\u884c\u64cd\u4f5c\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e9b\u5f15\u4eba\u6ce8\u76ee\u7684\u6548\u679c\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u50cf\u7d20\u64cd\u4f5c\u4ea7\u751f\u4e86\u7eaf\u77e2\u91cf\u56fe\u5f62\u65e0\u6cd5\u5b9e\u73b0\u7684\u6548\u679c\u3002\u6211\u9f13\u52b1\u60a8\u901a\u8fc7\u67e5\u770b\u6e90\u4ee3\u7801\u6765\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\u60a8\u8fd8\u53ef\u4ee5\u67e5\u770b\u4e0b\u4e00\u8282\u4e2d\u4f7f\u7528HTML\u753b\u5e03\u56fe\u5f62\u5b9e\u73b0\u76f8\u540c\u6548\u679c\u7684\u5b9e\u65f6\u6f14\u793a\u3002</p> <p>In some graphics applications, it is useful to be able to work with images that are not visible on the screen. That is, you need what I call an off-screen canvas. You also need a way to quickly copy the off-screen canvas onto the screen. For example, it can be useful to store a copy of the on-screen image in an off-screen canvas. The canvas is the official copy of the image. Changes to the image are made to the canvas, then copied to the screen. One reason to do this is that you can then draw extra stuff on top of the screen image without changing the official copy. For example, you might draw a box around a selected region in the on-screen image. You can do this without damaging the official copy in the off-screen canvas. To remove the box from the screen, you just have to copy the off-screen canvas image onto the screen.</p> <p>In Java, an off-screen image can be implemented as an object of type BufferedImage. A BufferedImage represents a region in memory where you can draw, in exactly the same way that you can draw to the screen. That is, you can obtain a graphics context g2 of type Graphics2D that you can use for drawing on the image. A BufferedImage is an Image, and you can draw it onto the screen\u2014or into any other graphics context\u2014like any other Image, that is, by using the drawImage method of the graphics context where you want to display the image. In a typical setup, there are variables</p> <pre><code>BufferedImage OSC;  // The off-screen canvas.\nGraphics2D OSG;     // graphics context for drawing to the canvas\n</code></pre> <p>The objects are created using, for example,</p> <pre><code>OSC = new BufferedImage( 640, 480, BufferedImage.TYPE_INT_RGB );\nOSG = OSC.createGraphics();\n</code></pre> <p>The constructor for BufferedImage specifies the width and height of the image along with its type. The type tells what colors can be represented in the image and how they are stored. Here, the type is TYPE_INT_RGB, which means the image uses regular RGB colors with 8 bits for each color component. The three color components for a pixel are packed into a single integer value.</p> <p>In a program that uses a BufferedImage to store a copy of the on-screen image, the paintComponent method generally has the form</p> <pre><code>protected void paintComponent(Graphics g) {\n    g.drawImage( OSC, 0, 0, null );\n    Graphics2D g2 = (Graphics2D)g.create();\n    .\n    . // Draw extra stuff on top of the image.\n    .\n}\n</code></pre> <p>A sample program that uses this technique is java2d/JavaPixelManipulation.java. In that program, the user can draw lines, rectangles, and ovals by dragging the mouse. As the mouse moves, the shape is drawn between the starting point of the mouse and its current location. As the mouse moves, parts of the existing image can be repeatedly covered and uncovered, without changing the existing image. In fact, the image is in an off-screen canvas, and the shape that the user is drawing is actually drawn by paintComponent over the contents of the canvas. The shape is not drawn to the official image in the canvas until the user releases the mouse and ends the drag operation.</p> <p>But my main reason for writing the program was to illustrate pixel manipulation, that is, computing with the color components of individual pixels. The BufferedImage class has methods for reading and setting the color of individual pixels. An image consists of rows and columns of pixels. If OSC is a BufferedImage, then</p> <pre><code>int color = OSC.getRGB(x,y)\n</code></pre> <p>gets the integer that represents the color of the pixel in column number x and row number y. Each color component is stored in an 8-bit field in the integer color value. The individual color components can be extracted for processing using Java's bit manipulation operators:</p> <pre><code>int red = (color &gt;&gt; 16) &amp; 255;\nint green = (color &gt;&gt; 8) &amp; 255;\nint blue = color &amp; 255;\n</code></pre> <p>Similarly, given red, green, and blue color component values in the range 0 to 255, we can combine those component values into a single integer and use it to set the color of a pixel in the image:</p> <pre><code>int color = (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue;\nOSC.setRGB(x,y,color);\n</code></pre> <p>There are also methods for reading and setting the colors of an entire rectangular region of pixels.</p> <p>Pixel operations are used to implement two features of the sample program. First, there is a \"Smudge\" tool. When the user drags with this tool, it's like smearing wet paint. When the user first clicks the mouse, the color components from a small square of pixels surrounding the mouse position are copied into arrays. As the user moves the mouse, color from the arrays is blended into the color of the pixels near the mouse position, while those colors are blended into the colors in the arrays. Here is a small rectangle that has been \"smudged\":</p> <p> </p> <p>The second use of pixel manipulation is in implementing \"filters.\" A filter, in this program, is an operation that modifies an image by replacing the color of each pixel with a weighted average of the colors of a 3-by-3 square of pixels. A \"Blur\" filter for example, uses equal weights for all pixels in the average, so the color of a pixel is changed to the simple average of the colors of that pixel and its neighbors. Using different weights for each pixel can produce some striking effects.</p> <p>The pixel manipulation in the sample program produces effects that can't be achieved with pure vector graphics. I encourage you to learn more by looking at the source code. You might also take a look at the live demos in the next section, which implement the same effects using HTML canvas graphics.</p>"},{"location":"cn/c2/s6/","title":"\u7b2c6\u8282: HTML Canvas\u56fe\u5f62","text":"<p>HTML Canvas Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>\u73b0\u4ee3\u5927\u591a\u6570\u7f51\u7edc\u6d4f\u89c8\u5668\u90fd\u652f\u6301\u4e00\u79cd2D\u56fe\u5f62API\uff0c\u53ef\u4ee5\u7528\u4e8e\u5728\u7f51\u9875\u4e0a\u521b\u5efa\u56fe\u50cf\u3002\u8be5API\u662f\u4f7f\u7528JavaScript\u5b9e\u73b0\u7684\uff0c\u8fd9\u662f\u7528\u4e8e\u7f51\u9875\u7684\u5ba2\u6237\u7aef\u7f16\u7a0b\u8bed\u8a00\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4e0d\u4f1a\u6d89\u53caJavaScript\u8bed\u8a00\u3002\u8981\u7406\u89e3\u6b64\u5904\u5448\u73b0\u7684\u6750\u6599\uff0c\u60a8\u4e0d\u9700\u8981\u4e86\u89e3\u592a\u591a\u6709\u5173\u5b83\u7684\u77e5\u8bc6\u3002\u5373\u4f7f\u60a8\u5bf9\u6b64\u4e00\u65e0\u6240\u77e5\uff0c\u4e5f\u53ef\u4ee5\u4e86\u89e3\u51762D\u56fe\u5f62API\uff0c\u5e76\u4e86\u89e3\u5b83\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684Java API\u6709\u4f55\u76f8\u4f3c\u4e4b\u5904\uff0c\u4ee5\u53ca\u6709\u4f55\u4e0d\u540c\u4e4b\u5904\u3002 \uff08\u6709\u5173JavaScript\u7684\u7b80\u8981\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u9605\u9644\u5f55A\u4e2d\u7684\u7b2cA.3\u8282\u3002\uff09</p> <p>Most modern web browsers support a 2D graphics API that can be used to create images on a web page. The API is implemented using JavaScript, the client-side programming language for the web. I won't cover the JavaScript language in this section. To understand the material presented here, you don't need to know much about it. Even if you know nothing about it at all, you can learn something about its 2D graphics API and see how it is similar to, and how it differs from, the Java API presented in the previous section. (For a short introduction to JavaScript, see Section A.3 in Appendix A.)</p>"},{"location":"cn/c2/s6/#261-2d\u7ed8\u5236\u4e0a\u4e0b\u6587","title":"2.6.1  2D\u7ed8\u5236\u4e0a\u4e0b\u6587","text":"<p>The 2D Graphics Context</p> \u4e2d\u6587\u82f1\u6587 <p>\u7f51\u9875\u7684\u53ef\u89c1\u5185\u5bb9\u7531\u8bf8\u5982\u6807\u9898\u548c\u6bb5\u843d\u4e4b\u7c7b\u7684\u201c\u5143\u7d20\u201d\u7ec4\u6210\u3002\u5185\u5bb9\u662f\u4f7f\u7528HTML\u8bed\u8a00\u6307\u5b9a\u7684\u3002\u4e00\u4e2a\u201c\u753b\u5e03\u201d\u662f\u4e00\u4e2aHTML\u5143\u7d20\u3002\u5b83\u5728\u9875\u9762\u4e0a\u663e\u793a\u4e3a\u4e00\u4e2a\u7a7a\u767d\u7684\u77e9\u5f62\u533a\u57df\uff0c\u53ef\u4ee5\u901a\u8fc7\u6211\u6240\u79f0\u7684\u201cHTML\u753b\u5e03\u201d\u56fe\u5f62API\u7528\u4f5c\u7ed8\u56fe\u8868\u9762\u3002\u5728\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684\u4ee3\u7801\u521b\u5efa\u4e00\u4e2a\u753b\u5e03\u5143\u7d20</p> <pre><code>&lt;canvas width=\"800\" height=\"600\" id=\"theCanvas\"&gt;&lt;/canvas&gt;\n</code></pre> <p>\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u6307\u5b9a\u4e86\u7ed8\u56fe\u533a\u57df\u7684\u5927\u5c0f\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u3002id\u662f\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u53ef\u4ee5\u5728JavaScript\u4e2d\u7528\u6765\u5f15\u7528\u753b\u5e03\u3002</p> <p>\u8981\u5728\u753b\u5e03\u4e0a\u7ed8\u5236\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u56fe\u5f62\u4e0a\u4e0b\u6587\u662f\u4e00\u4e2a\u5305\u542b\u7528\u4e8e\u7ed8\u5236\u5f62\u72b6\u7684\u51fd\u6570\u7684\u5bf9\u8c61\u3002\u5b83\u8fd8\u5305\u542b\u8bb0\u5f55\u5f53\u524d\u56fe\u5f62\u72b6\u6001\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u5f53\u524d\u7ed8\u56fe\u989c\u8272\u3001\u53d8\u6362\u548c\u5b57\u4f53\u7b49\u5185\u5bb9\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u901a\u5e38\u5c06graphics\u7528\u4f5c\u6307\u5411\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u53d8\u91cf\u7684\u540d\u79f0\uff0c\u4f46\u53d8\u91cf\u540d\u5f53\u7136\u7531\u7a0b\u5e8f\u5458\u51b3\u5b9a\u3002\u8fd9\u4e2a\u56fe\u5f62\u4e0a\u4e0b\u6587\u5728canvas API\u4e2d\u626e\u6f14\u7740\u4e0eJava\u4e2d\u7684Graphics2D\u7c7b\u578b\u7684\u53d8\u91cf\u76f8\u540c\u7684\u89d2\u8272\u3002\u4e00\u4e2a\u5178\u578b\u7684\u8d77\u70b9\u662f</p> <pre><code>canvas = document.getElementById(\"theCanvas\");\ngraphics = canvas.getContext(\"2d\");\n</code></pre> <p>\u7b2c\u4e00\u884c\u4f7f\u7528\u5176id\u83b7\u53d6\u7f51\u9875\u4e0a\u753b\u5e03\u5143\u7d20\u7684\u5f15\u7528\u3002\u7b2c\u4e8c\u884c\u4e3a\u8be5\u753b\u5e03\u5143\u7d20\u521b\u5efa\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002(\u8fd9\u6bb5\u4ee3\u7801\u5c06\u5728\u4e0d\u652f\u6301canvas\u7684\u7f51\u9875\u6d4f\u89c8\u5668\u4e2d\u4ea7\u751f\u9519\u8bef\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u9519\u8bef\u68c0\u67e5\uff0c\u4f8b\u5982\u5c06\u8fd9\u4e9b\u547d\u4ee4\u653e\u5728try...catch\u8bed\u53e5\u4e2d\u3002)</p> <p>\u901a\u5e38\uff0c\u60a8\u5c06\u628a\u753b\u5e03\u56fe\u5f62\u4e0a\u4e0b\u6587\u5b58\u50a8\u5728\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u4e2d\uff0c\u5e76\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e0eJava\u4e2d\u7684\u60c5\u51b5\u4e0d\u540c\uff0c\u5728Java\u4e2d\uff0c\u6bcf\u6b21\u8c03\u7528paintComponent()\u65b9\u6cd5\u65f6\uff0c\u901a\u5e38\u4f1a\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684Graphics2D\u4e0a\u4e0b\u6587\uff0c\u8be5\u65b0\u4e0a\u4e0b\u6587\u5904\u4e8e\u5176\u521d\u59cb\u72b6\u6001\uff0c\u5177\u6709\u9ed8\u8ba4\u7684\u989c\u8272\u548c\u7b14\u753b\u5c5e\u6027\uff0c\u5e76\u4e14\u6ca1\u6709\u5e94\u7528\u7684\u53d8\u6362\u3002\u5f53\u56fe\u5f62\u4e0a\u4e0b\u6587\u662f\u5168\u5c40\u7684\u65f6\u5019\uff0c\u5728\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u4e2d\u5bf9\u72b6\u6001\u7684\u66f4\u6539\u5c06\u5ef6\u7eed\u5230\u540e\u7eed\u7684\u51fd\u6570\u8c03\u7528\uff0c\u9664\u975e\u60a8\u91c7\u53d6\u63aa\u65bd\u9650\u5236\u5b83\u4eec\u7684\u5f71\u54cd\u3002\u8fd9\u5b9e\u9645\u4e0a\u53ef\u80fd\u5bfc\u81f4\u4e00\u79cd\u76f8\u5f53\u5e38\u89c1\u7684\u9519\u8bef\u7c7b\u578b\uff1a\u4f8b\u5982\uff0c\u5982\u679c\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u5e94\u7528\u4e8630\u5ea6\u7684\u65cb\u8f6c\uff0c\u90a3\u4e48\u6bcf\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u8fd9\u4e9b\u65cb\u8f6c\u90fd\u5c06\u7d2f\u79ef\uff0c\u9664\u975e\u60a8\u5728\u518d\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u524d\u91c7\u53d6\u63aa\u65bd\u6765\u64a4\u9500\u4e4b\u524d\u7684\u65cb\u8f6c\u3002</p> <p>\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u4e3b\u8981\u63cf\u8ff0\u4e86\u60a8\u53ef\u4ee5\u4f7f\u7528\u753b\u5e03\u56fe\u5f62\u4e0a\u4e0b\u6587\u505a\u4ec0\u4e48\u3002\u4f46\u662f\uff0c\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e2a\u4f7f\u7528\u753b\u5e03\u56fe\u5f62\u7684\u975e\u5e38\u7b80\u5355\u7684\u7f51\u9875\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\uff1a</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Canvas Graphics&lt;/title&gt;\n&lt;script&gt;\n    let canvas;    // DOM object corresponding to the canvas\n    let graphics;  // 2D graphics context for drawing on the canvas\n\n    function draw() {\n        // draw on the canvas, using the graphics context\n        graphics.fillText(\"Hello World\", 10, 20);\n    }\n\n    function init() {\n        canvas = document.getElementById(\"theCanvas\");\n        graphics = canvas.getContext(\"2d\");\n        draw();  // draw something on the canvas\n    }\n\n    window.onload = init;\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;canvas id=\"theCanvas\" width=\"640\" height=\"480\"&gt;&lt;/canvas&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u5bf9\u4e8e\u4e00\u4e2a\u66f4\u5b8c\u6574\u4f46\u4ecd\u7136\u5f88\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u793a\u4f8b\u9875\u9762canvas2d/GraphicsStarter.html\u3002(\u60a8\u5e94\u8be5\u5728\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u8be5\u9875\u9762\uff0c\u4f46\u60a8\u4e5f\u5e94\u8be5\u9605\u8bfb\u6e90\u4ee3\u7801\u3002)\u8be5\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u753b\u5e03\u56fe\u5f62\u7ed8\u5236\u4e00\u4e9b\u57fa\u672c\u5f62\u72b6\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u81ea\u5df1\u5b9e\u9a8c\u7684\u57fa\u7840\u3002\u8fd8\u6709\u4e09\u4e2a\u66f4\u9ad8\u7ea7\u7684\u201c\u5165\u95e8\u201d\u793a\u4f8b\uff1acanvas2d/GraphicsPlusStarter.html\u6dfb\u52a0\u4e86\u4e00\u4e9b\u7ed8\u5236\u5f62\u72b6\u548c\u8bbe\u7f6e\u5750\u6807\u7cfb\u7edf\u7684\u5b9e\u7528\u51fd\u6570\uff1bcanvas2d/AnimationStarter.html\u6dfb\u52a0\u4e86\u52a8\u753b\u5e76\u5305\u62ec\u4e00\u4e2a\u7b80\u5355\u7684\u5c42\u6b21\u5efa\u6a21\u793a\u4f8b\uff1b\u4ee5\u53cacanvas2d/EventsStarter.html\u5c55\u793a\u4e86\u5982\u4f55\u54cd\u5e94\u952e\u76d8\u548c\u9f20\u6807\u4e8b\u4ef6\u3002</p> <p>The visible content of a web page is made up of \"elements\" such as headlines and paragraphs. The content is specified using the HTML language. A \"canvas\" is an HTML element. It appears on the page as a blank rectangular area which can be used as a drawing surface by what I am calling the \"HTML canvas\" graphics API. In the source code of a web page, a canvas element is created with code of the form</p> <pre><code>&lt;canvas width=\"800\" height=\"600\" id=\"theCanvas\"&gt;&lt;/canvas&gt;\n</code></pre> <p>The width and height give the size of the drawing area, in pixels. The id is an identifier that can be used to refer to the canvas in JavaScript.</p> <p>To draw on a canvas, you need a graphics context. A graphics context is an object that contains functions for drawing shapes. It also contains variables that record the current graphics state, including things like the current drawing color, transform, and font. Here, I will generally use graphics as the name of the variable that refers to the graphics context, but the variable name is, of course, up to the programmer. This graphics context plays the same role in the canvas API that a variable of type Graphics2D plays in Java. A typical starting point is</p> <pre><code>canvas = document.getElementById(\"theCanvas\");\ngraphics = canvas.getContext(\"2d\");\n</code></pre> <p>The first line gets a reference to the canvas element on the web page, using its id. The second line creates the graphics context for that canvas element. (This code will produce an error in a web browser that doesn't support canvas, so you might add some error checking such as putting these commands inside a try..catch statement.)</p> <p>Typically, you will store the canvas graphics context in a global variable and use the same graphics context throughout your program. This is in contrast to Java, where you typically get a new Graphics2D context each time the paintComponent() method is called, and that new context is in its initial state with default color and stroke properties and with no applied transform. When a graphics context is global, changes made to the state in one function call will carry over to subsequent function calls, unless you do something to limit their effect. This can actually lead to a fairly common type of bug: For example, if you apply a 30-degree rotation in a function, those rotations will accumulate each time the function is called, unless you do something to undo the previous rotation before the function is called again.</p> <p>The rest of this section will be mostly concerned with describing what you can do with a canvas graphics context. But here, for the record, is the complete source code for a very minimal web page that uses canvas graphics:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Canvas Graphics&lt;/title&gt;\n&lt;script&gt;\n    let canvas;    // DOM object corresponding to the canvas\n    let graphics;  // 2D graphics context for drawing on the canvas\n\n    function draw() {\n        // draw on the canvas, using the graphics context\n        graphics.fillText(\"Hello World\", 10, 20);\n    }\n\n    function init() {\n        canvas = document.getElementById(\"theCanvas\");\n        graphics = canvas.getContext(\"2d\");\n        draw();  // draw something on the canvas\n    }\n\n    window.onload = init;\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;canvas id=\"theCanvas\" width=\"640\" height=\"480\"&gt;&lt;/canvas&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>For a more complete, though still minimal, example, you can look at the sample page canvas2d/GraphicsStarter.html. (You should look at the page in a browser, but you should also read the source code.) This example shows how to draw some basic shapes using canvas graphics, and you can use it as a basis for your own experimentation. There are also three more advanced \"starter\" examples: canvas2d/GraphicsPlusStarter.html adds some utility functions for drawing shapes and setting up a coordinate system; canvas2d/AnimationStarter.html adds animation and includes a simple hierarchical modeling example; and canvas2d/EventsStarter.html shows how to respond to keyboard and mouse events.</p>"},{"location":"cn/c2/s6/#262-\u5f62\u72b6","title":"2.6.2  \u5f62\u72b6","text":"\u4e2d\u6587\u82f1\u6587 <p>\u753b\u5e03\u4e0a\u7684\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\u662f\u901a\u5e38\u7684\uff1a\u5355\u4f4d\u662f\u4e00\u4e2a\u50cf\u7d20\uff1b(0,0)\u4f4d\u4e8e\u5de6\u4e0a\u89d2\uff1bx\u5750\u6807\u5411\u53f3\u589e\u52a0\uff1by\u5750\u6807\u5411\u4e0b\u589e\u52a0\u3002x\u548cy\u503c\u7684\u8303\u56f4\u7531\u5143\u7d20\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5c5e\u6027\u7ed9\u51fa\u3002\u8fd9\u91cc\u5bf9\u4e8e\u5ea6\u91cf\u5355\u4f4d\u7684\u672f\u8bed\u201c\u50cf\u7d20\u201d\u5e76\u4e0d\u5b8c\u5168\u6b63\u786e\u3002\u53ef\u80fd\u6211\u5e94\u8be5\u8bf4\u7c7b\u4f3c\u201c\u4e00\u4e2a\u540d\u4e49\u50cf\u7d20\u201d\u7684\u4e1c\u897f\u3002\u5728\u5178\u578b\u7684\u684c\u9762\u5206\u8fa8\u7387\u4e0b\u6ca1\u6709\u653e\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u5ea6\u91cf\u5355\u4f4d\u662f\u4e00\u4e2a\u50cf\u7d20\u3002\u5982\u679c\u60a8\u5728\u6d4f\u89c8\u5668\u7a97\u53e3\u4e2d\u5e94\u7528\u653e\u5927\uff0c\u5ea6\u91cf\u5355\u4f4d\u5c06\u88ab\u62c9\u4f38\u3002\u5728\u9ad8\u5206\u8fa8\u7387\u5c4f\u5e55\u4e0a\uff0c\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u5355\u4f4d\u53ef\u80fd\u5bf9\u5e94\u4e8e\u663e\u793a\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u5b9e\u9645\u50cf\u7d20\u3002 <p>\u753b\u5e03API\u53ea\u652f\u6301\u4e00\u7ec4\u975e\u5e38\u6709\u9650\u7684\u57fa\u672c\u5f62\u72b6\u3002\u4e8b\u5b9e\u4e0a\uff0c\u552f\u4e00\u7684\u57fa\u672c\u5f62\u72b6\u662f\u77e9\u5f62\u548c\u6587\u672c\u3002\u5176\u4ed6\u5f62\u72b6\u5fc5\u987b\u521b\u5efa\u4e3a\u8def\u5f84\u3002\u5f62\u72b6\u53ef\u4ee5\u63cf\u8fb9\u548c\u586b\u5145\u3002\u8fd9\u5305\u62ec\u6587\u672c\uff1a\u5f53\u4f60\u63cf\u8fb9\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u65f6\uff0c\u4e00\u4e2a\u7b14\u6cbf\u7740\u5b57\u7b26\u7684\u8f6e\u5ed3\u88ab\u62d6\u52a8\uff1b\u5f53\u4f60\u586b\u5145\u4e00\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c\u5b57\u7b26\u7684\u5185\u90e8\u88ab\u586b\u5145\u3002\u53ea\u6709\u5728\u5b57\u7b26\u76f8\u5f53\u5927\u65f6\uff0c\u63cf\u8fb9\u6587\u672c\u624d\u771f\u6b63\u6709\u610f\u4e49\u3002\u4ee5\u4e0b\u662f\u7ed8\u5236\u77e9\u5f62\u548c\u6587\u672c\u7684\u51fd\u6570\uff0c\u5176\u4e2dgraphics\u6307\u4ee3\u8868\u793a\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u5bf9\u8c61\uff1a</p> <ul> <li><code>graphics.fillRect(x,y,w,h)</code> \u2014 \u7ed8\u5236\u4ee5(x,y)\u4e3a\u89d2\u7684\u586b\u5145\u77e9\u5f62\uff0c\u5bbd\u5ea6\u4e3aw\uff0c\u9ad8\u5ea6\u4e3ah\u3002\u5982\u679c\u5bbd\u5ea6\u6216\u9ad8\u5ea6\u5c0f\u4e8e\u6216\u7b49\u4e8e\u96f6\uff0c\u5c06\u4e0d\u7ed8\u5236\u4efb\u4f55\u5185\u5bb9\u3002</li> <li><code>graphics.strokeRect(x,y,w,h)</code> \u2014 \u63cf\u8fb9\u76f8\u540c\u77e9\u5f62\u7684\u8f6e\u5ed3\u3002</li> <li><code>graphics.clearRect(x,y,w,h)</code> \u2014 \u901a\u8fc7\u586b\u5145\u5177\u6709\u5b8c\u5168\u900f\u660e\u50cf\u7d20\u7684\u77e9\u5f62\u6765\u6e05\u9664\u77e9\u5f62\uff0c\u5141\u8bb8\u753b\u5e03\u7684\u80cc\u666f\u663e\u793a\u51fa\u6765\u3002\u80cc\u666f\u7531\u753b\u5e03\u6240\u5728\u7684\u7f51\u9875\u7684\u5c5e\u6027\u786e\u5b9a\u3002\u5b83\u53ef\u80fd\u662f\u80cc\u666f\u989c\u8272\u3001\u56fe\u50cf\uff0c\u751a\u81f3\u662f\u53e6\u4e00\u4e2a\u753b\u5e03\u3002</li> <li><code>graphics.fillText(str,x,y)</code> \u2014 \u586b\u5145\u5b57\u7b26\u4e32str\u4e2d\u7684\u5b57\u7b26\u3002\u5b57\u7b26\u4e32\u57fa\u7ebf\u7684\u5de6\u7aef\u5b9a\u4f4d\u5728\u70b9(x,y)\u5904\u3002</li> <li><code>graphics.strokeText(str,x,y)</code> \u2014 \u63cf\u8fb9\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u8f6e\u5ed3\u3002</li> </ul> <p>\u53ef\u4ee5\u4f7f\u7528\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\u521b\u5efa\u8def\u5f84\u3002\u4e0a\u4e0b\u6587\u8ddf\u8e2a\u4e00\u4e2a\u201c\u5f53\u524d\u8def\u5f84\u201d\u3002\u5728\u5f53\u524d\u7248\u672c\u7684API\u4e2d\uff0c\u8def\u5f84\u4e0d\u662f\u7531\u5bf9\u8c61\u8868\u793a\u7684\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u8def\u5f84\u6216\u4fdd\u7559\u8def\u5f84\u7684\u526f\u672c\u4ee5\u4f9b\u4ee5\u540e\u91cd\u7528\u3002\u8def\u5f84\u53ef\u4ee5\u5305\u542b\u7ebf\u6bb5\u3001\u8d1d\u585e\u5c14\u66f2\u7ebf\u548c\u5706\u5f27\u3002\u4ee5\u4e0b\u662f\u5904\u7406\u8def\u5f84\u7684\u6700\u5e38\u89c1\u51fd\u6570\uff1a</p> <ul> <li><code>graphics.beginPath()</code> \u2014 \u5f00\u59cb\u4e00\u4e2a\u65b0\u8def\u5f84\u3002\u4efb\u4f55\u5148\u524d\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u4e22\u5f03\uff0c\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u7684\u5f53\u524d\u8def\u5f84\u73b0\u5728\u4e3a\u7a7a\u3002\u8bf7\u6ce8\u610f\uff0c\u56fe\u5f62\u4e0a\u4e0b\u6587\u8fd8\u4f1a\u8ddf\u8e2a\u5f53\u524d\u70b9\uff0c\u5373\u5f53\u524d\u8def\u5f84\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u3002\u8c03\u7528graphics.beginPath()\u540e\uff0c\u5f53\u524d\u70b9\u672a\u5b9a\u4e49\u3002</li> <li><code>graphics.moveTo(x,y)</code> \u2014 \u5c06\u5f53\u524d\u70b9\u79fb\u52a8\u5230(x,y)\uff0c\u800c\u4e0d\u6dfb\u52a0\u4efb\u4f55\u5185\u5bb9\u5230\u8def\u5f84\u4e2d\u3002\u8fd9\u53ef\u4ee5\u7528\u4e8e\u8def\u5f84\u7684\u8d77\u70b9\u6216\u8005\u5f00\u59cb\u65b0\u7684\u4e0d\u8fde\u7eed\u8def\u5f84\u6bb5\u3002</li> <li><code>graphics.lineTo(x,y)</code> \u2014 \u5c06\u4ece\u5f53\u524d\u70b9\u5f00\u59cb\u5e76\u4ee5(x,y)\u7ed3\u675f\u7684\u7ebf\u6bb5\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\uff0c\u5e76\u5c06\u5f53\u524d\u70b9\u79fb\u52a8\u5230(x,y)\u3002</li> <li><code>graphics.bezierCurveTo(cx1,cy1,c2x,cy2,x,y)</code> \u2014 \u5c06\u7acb\u65b9\u8d1d\u585e\u5c14\u66f2\u7ebf\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\u3002\u66f2\u7ebf\u4ece\u5f53\u524d\u70b9\u5f00\u59cb\uff0c\u4ee5(x,y)\u7ed3\u675f\u3002\u70b9(cx1,cy1)\u548c(cx2,cy2)\u662f\u66f2\u7ebf\u7684\u4e24\u4e2a\u63a7\u5236\u70b9\u3002\uff08\u8d1d\u585e\u5c14\u66f2\u7ebf\u53ca\u5176\u63a7\u5236\u70b9\u57282.2.3\u5c0f\u8282\u4e2d\u6709\u8ba8\u8bba\u3002\uff09</li> <li><code>graphics.quadraticCurveTo(cx,cy,x,y)</code> \u2014 \u4ece\u5f53\u524d\u70b9\u5230(x,y)\u6dfb\u52a0\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\uff0c\u63a7\u5236\u70b9\u4e3a(cx,cy)\u3002</li> <li><code>graphics.arc(x,y,r,startAngle,endAngle)</code> \u2014 \u6dfb\u52a0\u4ee5\u4e2d\u5fc3\u70b9(x,y)\u548c\u534a\u5f84r\u7684\u5706\u7684\u5f27\u3002\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u53c2\u6570\u7ed9\u51fa\u5f27\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u89d2\u5ea6\u3002\u5b83\u4eec\u4ee5\u5f27\u5ea6\u8868\u793a\u3002\u5f27\u5728\u6b63\u65b9\u5411\u4e0a\u4ece\u8d77\u59cb\u89d2\u5ea6\u5ef6\u4f38\u5230\u7ed3\u675f\u89d2\u5ea6\u3002\uff08\u6b63\u65b9\u5411\u662f\u4ece\u6b63x\u8f74\u5411\u6b63y\u8f74\u7684\u65b9\u5411\u65cb\u8f6c\uff1b\u8fd9\u5728\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\u4e2d\u662f\u987a\u65f6\u9488\u65b9\u5411\u3002\uff09\u53ef\u4ee5\u5c06\u53ef\u9009\u7684\u7b2c\u4e94\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3atrue\u4ee5\u83b7\u5f97\u4e00\u4e2a\u5411\u8d1f\u65b9\u5411\u5ef6\u4f38\u7684\u5f27\u3002\u7ed8\u5236\u5f27\u540e\uff0c\u5f53\u524d\u70b9\u5728\u5f27\u7684\u672b\u7aef\u3002\u5982\u679c\u5728\u8c03\u7528graphics.arc\u4e4b\u524d\u6709\u4e00\u4e2a\u5f53\u524d\u70b9\uff0c\u90a3\u4e48\u5728\u7ed8\u5236\u5f27\u4e4b\u524d\uff0c\u4f1a\u5411\u8def\u5f84\u6dfb\u52a0\u4e00\u6761\u4ece\u5f53\u524d\u70b9\u5230\u5f27\u7684\u8d77\u59cb\u70b9\u7684\u7ebf\u6bb5\u3002\uff08\u56de\u60f3\u4e00\u4e0b\uff0cgraphics.beginPath()\u4e4b\u540e\u7acb\u5373\u6ca1\u6709\u5f53\u524d\u70b9\u3002\uff09</li> <li><code>graphics.closePath()</code> \u2014 \u5c06\u4ece\u5f53\u524d\u70b9\u6dfb\u52a0\u5230\u5f53\u524d\u66f2\u7ebf\u6bb5\u7684\u8d77\u59cb\u70b9\u7684\u7ebf\u6bb5\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\u3002\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u6bcf\u6b21\u4f7f\u7528moveTo\u65f6\uff0c\u90fd\u4f1a\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u66f2\u7ebf\u6bb5\u3002\uff09</li> </ul> <p>\u4f7f\u7528\u8fd9\u4e9b\u547d\u4ee4\u521b\u5efa\u7684\u66f2\u7ebf\u4e0d\u4f1a\u7ed8\u5236\u4efb\u4f55\u4e1c\u897f\u3002\u8981\u4f7f\u56fe\u50cf\u4e2d\u51fa\u73b0\u53ef\u89c1\u7684\u4e1c\u897f\uff0c\u60a8\u5fc5\u987b\u586b\u5145\u6216\u63cf\u8fb9\u8def\u5f84\u3002</p> <p>\u547d\u4ee4<code>graphics.fill()</code>\u548c<code>graphics.stroke()</code>\u7528\u4e8e\u586b\u5145\u548c\u63cf\u8fb9\u5f53\u524d\u8def\u5f84\u3002\u5982\u679c\u586b\u5145\u4e00\u4e2a\u672a\u95ed\u5408\u7684\u8def\u5f84\uff0c\u586b\u5145\u7b97\u6cd5\u4f1a\u50cf\u6dfb\u52a0\u4e86\u4e00\u6761\u6700\u7ec8\u7ebf\u6bb5\u6765\u5173\u95ed\u8def\u5f84\u4e00\u6837\u3002\u5f53\u4f60\u63cf\u8fb9\u4e00\u4e2a\u5f62\u72b6\u65f6\uff0c\u865a\u62df\u7b14\u7684\u4e2d\u5fc3\u6cbf\u7740\u8def\u5f84\u79fb\u52a8\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u9ad8\u7cbe\u5ea6\u7684\u753b\u5e03\u7ed8\u5236\uff0c\u901a\u5e38\u4f7f\u7528\u901a\u8fc7\u50cf\u7d20\u4e2d\u5fc3\u800c\u4e0d\u662f\u89d2\u843d\u7684\u8def\u5f84\u3002\u4f8b\u5982\uff0c\u8981\u7ed8\u5236\u4e00\u6761\u4ece\u5750\u6807\u4e3a(100,200)\u7684\u50cf\u7d20\u5ef6\u4f38\u5230\u5750\u6807\u4e3a(300,200)\u7684\u50cf\u7d20\u7684\u7ebf\uff0c\u5b9e\u9645\u4e0a\u8981\u63cf\u8fb9\u7684\u51e0\u4f55\u7ebf\u7684\u7aef\u70b9\u662f(100.5,200.5)\u548c(100.5,300.5)\u3002\u6211\u4eec\u5e94\u8be5\u770b\u4e00\u4e9b\u4f8b\u5b50\u3002\u7ed8\u5236\u4e00\u6761\u7ebf\u9700\u8981\u56db\u4e2a\u6b65\u9aa4\uff1a</p> <pre><code>graphics.beginPath();          // \u5f00\u59cb\u4e00\u4e2a\u65b0\u8def\u5f84\ngraphics.moveTo(100.5,200.5);  // \u65b0\u8def\u5f84\u7684\u8d77\u59cb\u70b9\ngraphics.lineTo(300.5,200.5);  // \u6dfb\u52a0\u4e00\u6761\u7ebf\u5230\u70b9(300.5,200.5)\ngraphics.stroke();             // \u7ed8\u5236\u7ebf\n</code></pre> <p>\u8bb0\u4f4f\uff0c\u76f4\u5230\u4e0b\u4e00\u6b21\u8c03\u7528<code>graphics.beginPath()</code>\uff0c\u7ebf\u90fd\u4f1a\u4f5c\u4e3a\u5f53\u524d\u8def\u5f84\u7684\u4e00\u90e8\u5206\u4fdd\u7559\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u7ed8\u5236\u4e00\u4e2a\u586b\u5145\u7684\u3001\u6b63\u516b\u8fb9\u5f62\uff0c\u4e2d\u5fc3\u4f4d\u4e8e(200,400)\uff0c\u534a\u5f84\u4e3a100\u7684\u65b9\u6cd5\uff1a</p> <pre><code>graphics.beginPath();\ngraphics.moveTo(300,400);\nfor (let i = 1; i &lt; 8; i++) {\n    let angle = (2*Math.PI)/8 * i;\n    let x = 200 + 100*Math.cos(angle);\n    let y = 400 + 100*Math.sin(angle);\n    graphics.lineTo(x,y);\n}\ngraphics.closePath();\ngraphics.fill();\n</code></pre> <p>\u51fd\u6570<code>graphics.arc()</code>\u53ef\u7528\u4e8e\u7ed8\u5236\u5706\uff0c\u8d77\u59cb\u89d2\u5ea6\u4e3a0\uff0c\u7ed3\u675f\u89d2\u5ea6\u4e3a2*Math.PI\u3002\u4ee5\u4e0b\u662f\u534a\u5f84\u4e3a100\u3001\u4e2d\u5fc3\u4f4d\u4e8e200,300\u7684\u586b\u5145\u5706\uff1a</p> <pre><code>graphics.beginPath();\ngraphics.arc( 200, 300, 100, 0, 2*Math.PI );\ngraphics.fill();\n</code></pre> <p>\u8981\u4ec5\u7ed8\u5236\u5706\u7684\u8f6e\u5ed3\uff0c\u8bf7\u5c06<code>graphics.fill()</code>\u66ff\u6362\u4e3a<code>graphics.stroke()</code>\u3002\u60a8\u53ef\u4ee5\u5bf9\u540c\u4e00\u8def\u5f84\u5e94\u7528\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u3002\u5982\u679c\u67e5\u770b<code>graphics.arc()</code>\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u5982\u4f55\u7ed8\u5236\u5706\u7684\u6247\u5f62\uff1a</p> <pre><code>graphics.beginPath();\ngraphics.moveTo(200,300);   // \u5c06\u5f53\u524d\u70b9\u79fb\u52a8\u5230\u5706\u7684\u4e2d\u5fc3\u3002\ngraphics.arc(200,300,100,0,Math.PI/4);  // \u5f27\uff0c\u52a0\u4e0a\u4ece\u5f53\u524d\u70b9\u5230\u5f27\u7684\u672b\u7aef\u7684\u7ebf\u3002\ngraphics.lineTo(200,300);  // \u4ece\u5f27\u7684\u672b\u7aef\u56de\u5230\u5706\u7684\u4e2d\u5fc3\u7684\u7ebf\u3002\ngraphics.fill();  // \u586b\u5145\u6247\u5f62\u3002\n</code></pre> <p>\u6ca1\u6709\u529e\u6cd5\u7ed8\u5236\u4e0d\u662f\u5706\u7684\u692d\u5706\uff0c\u9664\u975e\u4f7f\u7528\u53d8\u6362\u3002\u6211\u4eec\u5c06\u5728\u672c\u8282\u540e\u9762\u4ecb\u7ecd\u8fd9\u4e00\u70b9\u3002\u4f46\u662fJavaScript\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u7279\u6027\uff0c\u5373\u53ef\u4ee5\u5411\u73b0\u6709\u5bf9\u8c61\u6dfb\u52a0\u65b0\u7684\u51fd\u6570\u548c\u5c5e\u6027\u3002\u793a\u4f8b\u7a0b\u5e8fcanvas2d/GraphicsPlusStarter.html\u5c55\u793a\u4e86\u5982\u4f55\u5411\u56fe\u5f62\u4e0a\u4e0b\u6587\u6dfb\u52a0\u51fd\u6570\u6765\u7ed8\u5236\u7ebf\u6761\u3001\u692d\u5706\u548c\u5176\u4ed6\u4e0d\u5728API\u4e2d\u7684\u5f62\u72b6\u3002</p> <p>The default coordinate system on a canvas is the usual: The unit of measure is one pixel; (0,0) is at the upper left corner; the x-coordinate increases to the right; and the y-coordinate increases downward. The range of x and y values is given by the width and height properties of the  element. The term \"pixel\" here for the unit of measure is not really correct. Probably, I should say something like \"one nominal pixel.\" The unit of measure is one pixel at typical desktop resolution with no magnification. If you apply a magnification to a browser window, the unit of measure gets stretched. And on a high-resolution screen, one unit in the default coordinate system might correspond to several actual pixels on the display device. <p>The canvas API supports only a very limited set of basic shapes. In fact, the only basic shapes are rectangles and text. Other shapes must be created as paths. Shapes can be stroked and filled. That includes text: When you stroke a string of text, a pen is dragged along the outlines of the characters; when you fill a string, the insides of the characters are filled. It only really makes sense to stroke text when the characters are rather large. Here are the functions for drawing rectangles and text, where graphics refers to the object that represents the graphics context:</p> <ul> <li><code>graphics.fillRect(x,y,w,h)</code> \u2014 draws a filled rectangle with corner at (x,y), with width w and with height h. If the width or the height is less than or equal to zero, nothing is drawn.</li> <li><code>graphics.strokeRect(x,y,w,h)</code> \u2014 strokes the outline of the same rectangle.</li> <li><code>graphics.clearRect(x,y,w,h)</code> \u2014 clears the rectangle by filling it with fully transparent pixels, allowing the background of the canvas to show. The background is determined by the properties of the web page on which the canvas appears. It might be a background color, an image, or even another canvas.</li> <li><code>graphics.fillText(str,x,y)</code> \u2014 fills the characters in the string str. The left end of the baseline of the string is positioned at the point (x,y).</li> <li><code>graphics.strokeText(str,x,y)</code> \u2014 strokes the outlines of the characters in the string.</li> </ul> <p>A path can be created using functions in the graphics context. The context keeps track of a \"current path.\" In the current version of the API, paths are not represented by objects, and there is no way to work with more than one path at a time or to keep a copy of a path for later reuse. Paths can contain lines, Bezier curves, and circular arcs. Here are the most common functions for working with paths:</p> <ul> <li><code>graphics.beginPath()</code> \u2014 start a new path. Any previous path is discarded, and the current path in the graphics context is now empty. Note that the graphics context also keeps track of the current point, the last point in the current path. After calling graphics.beginPath(), the current point is undefined.</li> <li><code>graphics.moveTo(x,y)</code> \u2014 move the current point to (x,y), without adding anything to the path. This can be used for the starting point of the path or to start a new, disconnected segment of the path.</li> <li><code>graphics.lineTo(x,y)</code> \u2014 add the line segment starting at current point and ending at (x,y) to the path, and move the current point to (x,y).</li> <li><code>graphics.bezierCurveTo(cx1,cy1,c2x,cy2,x,y)</code> \u2014 add a cubic Bezier curve to the path. The curve starts at the current point and ends at (x,y). The points (cx1,cy1) and (cx2,cy2) are the two control points for the curve. (Bezier curves and their control points were discussed in Subsection 2.2.3.)</li> <li><code>graphics.quadraticCurveTo(cx,cy,x,y)</code> \u2014 adds a quadratic Bezier curve from the current point to (x,y), with control point (cx,cy).</li> <li><code>graphics.arc(x,y,r,startAngle,endAngle)</code> \u2014 adds an arc of the circle with center (x,y) and radius r. The next two parameters give the starting and ending angle of the arc. They are measured in radians. The arc extends in the positive direction from the start angle to the end angle. (The positive rotation direction is from the positive x-axis towards the positive y-axis; this is clockwise in the default coordinate system.) An optional fifth parameter can be set to true to get an arc that extends in the negative direction. After drawing the arc, the current point is at the end of the arc. If there is a current point before graphics.arc is called, then before the arc is drawn, a line is added to the path that extends from the current point to the starting point of the arc. (Recall that immediately after graphics.beginPath(), there is no current point.)</li> <li><code>graphics.closePath()</code> \u2014 adds to the path a line from the current point back to the starting point of the current segment of the curve. (Recall that you start a new segment of the curve every time you use moveTo.)</li> </ul> <p>Creating a curve with these commands does not draw anything. To get something visible to appear in the image, you must fill or stroke the path.</p> <p>The commands graphics.fill() and graphics.stroke() are used to fill and to stroke the current path. If you fill a path that has not been closed, the fill algorithm acts as though a final line segment had been added to close the path. When you stroke a shape, it's the center of the virtual pen that moves along the path. So, for high-precision canvas drawing, it's common to use paths that pass through the centers of pixels rather than through their corners. For example, to draw a line that extends from the pixel with coordinates (100,200) to the pixel with coordinates (300,200), you would actually stroke the geometric line with endpoints (100.5,200.5) and (100.5,300.5). We should look at some examples. It takes four steps to draw a line:</p> <pre><code>graphics.beginPath();          // start a new path\ngraphics.moveTo(100.5,200.5);  // starting point of the new path\ngraphics.lineTo(300.5,200.5);  // add a line to the point (300.5,200.5)\ngraphics.stroke();             // draw the line\n</code></pre> <p>Remember that the line remains as part of the current path until the next time you call graphics.beginPath(). Here's how to draw a filled, regular octagon centered at (200,400) and with radius 100:</p> <pre><code>graphics.beginPath();\ngraphics.moveTo(300,400);\nfor (let i = 1; i &lt; 8; i++) {\n    let angle = (2*Math.PI)/8 * i;\n    let x = 200 + 100*Math.cos(angle);\n    let y = 400 + 100*Math.sin(angle);\n    graphics.lineTo(x,y);\n}\ngraphics.closePath();\ngraphics.fill();\n</code></pre> <p>The function graphics.arc() can be used to draw a circle, with a start angle of 0 and an end angle of 2*Math.PI. Here's a filled circle with radius 100, centered at 200,300:</p> <pre><code>graphics.beginPath();\ngraphics.arc( 200, 300, 100, 0, 2*Math.PI );\ngraphics.fill();\n</code></pre> <p>To draw just the outline of the circle, use graphics.stroke() in place of graphics.fill(). You can apply both operations to the same path. If you look at the details of graphics.arc(), you can see how to draw a wedge of a circle:</p> <pre><code>graphics.beginPath();\ngraphics.moveTo(200,300);   // Move current point to center of the circle.\ngraphics.arc(200,300,100,0,Math.PI/4);  // Arc, plus line from current point.\ngraphics.lineTo(200,300);  // Line from end of arc back to center of circle.\ngraphics.fill();  // Fill the wedge.\n</code></pre> <p>There is no way to draw an oval that is not a circle, except by using transforms. We will cover that later in this section. But JavaScript has the interesting property that it is possible to add new functions and properties to an existing object. The sample program canvas2d/GraphicsPlusStarter.html shows how to add functions to a graphics context for drawing lines, ovals, and other shapes that are not built into the API.</p>"},{"location":"cn/c2/s6/#263-\u63cf\u8fb9\u548c\u586b\u5145","title":"2.6.3  \u63cf\u8fb9\u548c\u586b\u5145","text":"\u4e2d\u6587\u82f1\u6587 <p>Attributes such as line width that affect the visual appearance of strokes and fills are stored as properties of the graphics context. For example, the value of graphics.lineWidth is a number that represents the width that will be used for strokes. (The width is given in pixels for the default coordinate system, but it is subject to transforms.) You can change the line width by assigning a value to this property:</p> <pre><code>graphics.lineWidth = 2.5;  // Change the current width.\n</code></pre> <p>The change affects subsequent strokes. You can also read the current value:</p> <pre><code>saveWidth = graphics.lineWidth;  // Save current width.\n</code></pre> <p>The property graphics.lineCap controls the appearance of the endpoints of a stroke. It can be set to \"round\", \"square\", or \"butt\". The quotation marks are part of the value. For example,</p> <pre><code>graphics.lineCap = \"round\";\n</code></pre> <p>Similarly, graphics.lineJoin controls the appearance of the point where one segment of a stroke joins another segment; its possible values are \"round\", \"bevel\", or \"miter\". (Line endpoints and joins were discussed in Subsection 2.2.1.)</p> <p>Note that the values for graphics.lineCap and graphics.lineJoin are strings. This is a somewhat unusual aspect of the API. Several other properties of the graphics context take values that are strings, including the properties that control the colors used for drawing and the font that is used for drawing text.</p> <p>Color is controlled by the values of the properties graphics.fillStyle and graphics.strokeStyle. The graphics context maintains separate styles for filling and for stroking. A solid color for stroking or filling is specified as a string. Valid color strings are ones that can be used in CSS, the language that is used to specify colors and other style properties of elements on web pages. Many solid colors can be specified by their names, such as \"red\", \"black\", and \"beige\". An RGB color can be specified as a string of the form \"rgb(r,g,b)\", where the parentheses contain three numbers in the range 0 to 255 giving the red, green, and blue components of the color. Hexadecimal color codes are also supported, in the form \"#XXYYZZ\" where XX, YY, and ZZ are two-digit hexadecimal numbers giving the RGB color components. For example,</p> <pre><code>graphics.fillStyle = \"rgb(200,200,255)\"; // light blue\ngraphics.strokeStyle = \"#0070A0\"; // a darker, greenish blue\n</code></pre> <p>The style can actually be more complicated than a simple solid color: Gradients and patterns are also supported. As an example, a gradient can be created with a series of steps such as</p> <pre><code>let lineargradient = graphics.createLinearGradient(420,420,550,200);\nlineargradient.addColorStop(0,\"red\");\nlineargradient.addColorStop(0.5,\"yellow\");\nlineargradient.addColorStop(1,\"green\");\ngraphics.fillStyle = lineargradient;  // Use a gradient fill!\n</code></pre> <p>The first line creates a linear gradient that will vary in color along the line segment from the point (420,420) to the point (550,200). Colors for the gradient are specified by the addColorStop function: the first parameter gives the fraction of the distance from the initial point to the final point where that color is applied, and the second is a string that specifies the color itself. A color stop at 0 specifies the color at the initial point; a color stop at 1 specifies the color at the final point. Once a gradient has been created, it can be used both as a fill style and as a stroke style in the graphics context.</p> <p>Finally, I note that the font that is used for drawing text is the value of the property graphics.font. The value is a string that could be used to specify a font in CSS. As such, it can be fairly complicated, but the simplest versions include a font-size (such as 20px or 150%) and a font-family (such as serif, sans-serif, monospace, or the name of any font that is accessible to the web page). You can add italic or bold or both to the front of the string. Some examples:</p> <pre><code>graphics.font = \"2cm monospace\";  // the size is in centimeters\ngraphics.font = \"bold 18px sans-serif\";\ngraphics.font = \"italic 150% serif\";   // size is 150% of the usual size\n</code></pre> <p>The default is \"10px sans-serif,\" which is usually too small. Note that text, like all drawing, is subject to coordinate transforms. Applying a scaling operation changes the size of the text, and a negative scaling factor can produce mirror-image text.</p>"},{"location":"cn/c2/s6/#264-\u53d8\u6362","title":"2.6.4  \u53d8\u6362","text":"\u4e2d\u6587\u82f1\u6587 <p>\u56fe\u5f62\u4e0a\u4e0b\u6587\u5177\u6709\u4e09\u4e2a\u57fa\u672c\u51fd\u6570\uff0c\u7528\u4e8e\u901a\u8fc7\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u4fee\u6539\u5f53\u524d\u53d8\u6362\u3002\u8fd8\u6709\u4e00\u4e9b\u51fd\u6570\u5c06\u5f53\u524d\u53d8\u6362\u4e0e\u4efb\u610f\u53d8\u6362\u7ec4\u5408\uff0c\u5e76\u5b8c\u5168\u66ff\u6362\u5f53\u524d\u53d8\u6362\uff1a</p> <ul> <li><code>graphics.scale(sx,sy)</code> \u2014 \u5728x\u65b9\u5411\u7f29\u653esx\uff0cy\u65b9\u5411\u7f29\u653esy\u3002</li> <li><code>graphics.rotate(angle)</code> \u2014 \u56f4\u7ed5\u539f\u70b9\u4ee5angle\u5f27\u5ea6\u65cb\u8f6c\u3002\u5728\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\u4e2d\uff0c\u6b63\u65cb\u8f6c\u662f\u987a\u65f6\u9488\u7684\u3002</li> <li><code>graphics.translate(tx,ty)</code> \u2014 \u5728x\u65b9\u5411\u5e73\u79fbtx\uff0c\u5728y\u65b9\u5411\u5e73\u79fbty\u3002</li> <li><code>graphics.transform(a,b,c,d,e,f)</code> \u2014 \u5e94\u7528\u4eff\u5c04\u53d8\u6362x1 = ax + cy + e\uff0cy1 = bx + dy + f\u3002</li> <li><code>graphics.setTransform(a,b,c,d,e,f)</code> \u2014 \u4e22\u5f03\u5f53\u524d\u53d8\u6362\uff0c\u5e76\u5c06\u5f53\u524d\u53d8\u6362\u8bbe\u7f6e\u4e3ax1 = ax + cy + e\uff0cy1 = bx + dy + f\u3002</li> </ul> <p>\u8bf7\u6ce8\u610f\uff0c\u6ca1\u6709\u526a\u5207\u53d8\u6362\uff0c\u4f46\u53ef\u4ee5\u5c06\u526a\u5207\u4f5c\u4e3a\u4e00\u822c\u53d8\u6362\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u526a\u5207\u56e0\u5b50\u4e3a0.5\u7684\u6c34\u5e73\u526a\u5207\uff0c\u4f7f\u7528\uff1a</p> <pre><code>graphics.transform(1, 0, 0.5, 1, 0, 0)\n</code></pre> <p>\u8981\u5b9e\u73b0\u5206\u5c42\u5efa\u6a21\uff0c\u5982\u7b2c2.4\u8282\u4e2d\u8ba8\u8bba\u7684\uff0c\u60a8\u9700\u8981\u80fd\u591f\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\uff0c\u4ee5\u4fbf\u7a0d\u540e\u53ef\u4ee5\u6062\u590d\u5b83\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5e76\u6ca1\u6709\u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u6765\u4ece\u753b\u5e03\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u8bfb\u53d6\u5f53\u524d\u53d8\u6362\u3002\u4f46\u662f\uff0c\u56fe\u5f62\u4e0a\u4e0b\u6587\u672c\u8eab\u4fdd\u7559\u4e86\u4e00\u5806\u53d8\u6362\uff0c\u5e76\u63d0\u4f9b\u4e86\u63a8\u9001\u548c\u5f39\u51fa\u5f53\u524d\u53d8\u6362\u7684\u65b9\u6cd5\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u4ec5\u4fdd\u5b58\u548c\u6062\u590d\u5f53\u524d\u53d8\u6362\uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u4fdd\u5b58\u548c\u6062\u590d\u4e86\u51e0\u4e4e\u6574\u4e2a\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u72b6\u6001\uff0c\u5305\u62ec\u5f53\u524d\u989c\u8272\u3001\u7ebf\u5bbd\u548c\u5b57\u4f53\u7b49\u5c5e\u6027\uff08\u4f46\u4e0d\u5305\u62ec\u5f53\u524d\u8def\u5f84\uff09\uff1a</p> <ul> <li><code>graphics.save()</code> \u2014 \u5c06\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u5f53\u524d\u72b6\u6001\u7684\u526f\u672c\uff08\u5305\u62ec\u5f53\u524d\u53d8\u6362\uff09\u63a8\u9001\u5230\u5806\u6808\u4e0a\u3002</li> <li><code>graphics.restore()</code> \u2014 \u4ece\u5806\u6808\u4e2d\u79fb\u9664\u9876\u90e8\u9879\u76ee\uff0c\u5176\u4e2d\u5305\u542b\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u5df2\u4fdd\u5b58\u72b6\u6001\uff0c\u5e76\u5c06\u56fe\u5f62\u4e0a\u4e0b\u6587\u6062\u590d\u4e3a\u8be5\u72b6\u6001\u3002</li> </ul> <p>\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u4f7f\u7528\u5efa\u6a21\u53d8\u6362\u7ed8\u5236\u5bf9\u8c61\u7684\u57fa\u672c\u8bbe\u7f6e\u53d8\u5f97\u5982\u4e0b\uff1a</p> <pre><code>graphics.save();          // \u4fdd\u5b58\u5f53\u524d\u72b6\u6001\u7684\u526f\u672c\ngraphics.translate(a,b);  // \u5e94\u7528\u5efa\u6a21\u53d8\u6362\ngraphics.rotate(r);     \ngraphics.scale(sx,sy);\n.\n.  // \u7ed8\u5236\u5bf9\u8c61\uff01\n.\ngraphics.restore();       // \u6062\u590d\u4fdd\u5b58\u7684\u72b6\u6001\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u7ed8\u5236\u5bf9\u8c61\u5305\u62ec\u5bf9\u7ed8\u5236\u989c\u8272\u7b49\u5c5e\u6027\u7684\u4efb\u4f55\u66f4\u6539\uff0c\u8fd9\u4e9b\u66f4\u6539\u4e5f\u5c06\u88ab<code>graphics.restore()</code>\u8c03\u7528\u64a4\u6d88\u3002\u5728\u5206\u5c42\u56fe\u5f62\u4e2d\uff0c\u8fd9\u901a\u5e38\u662f\u60a8\u60f3\u8981\u7684\uff0c\u8fd9\u6d88\u9664\u4e86\u4fdd\u5b58\u548c\u6062\u590d\u989c\u8272\u7b49\u5c5e\u6027\u7684\u989d\u5916\u8bed\u53e5\u7684\u9700\u8981\u3002</p> <p>\u8981\u7ed8\u5236\u4e00\u4e2a\u5206\u5c42\u6a21\u578b\uff0c\u60a8\u9700\u8981\u904d\u5386\u4e00\u4e2a\u573a\u666f\u56fe\uff0c\u53ef\u4ee5\u662f\u8fc7\u7a0b\u5316\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f5c\u4e3a\u6570\u636e\u7ed3\u6784\u7684\u3002\u8fd9\u4e0eJava\u51e0\u4e4e\u76f8\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u60a8\u5b66\u4e60\u7684\u6709\u5173\u53d8\u6362\u548c\u5efa\u6a21\u7684\u57fa\u672c\u6982\u5ff5\u5982\u4f55\u9002\u7528\u4e8e\u753b\u5e03\u56fe\u5f62API\u3002\u8fd9\u4e9b\u6982\u5ff5\u975e\u5e38\u666e\u904d\uff0c\u5e76\u4e14\u751a\u81f3\u9002\u7528\u4e8e3D\u56fe\u5f62API\uff0c\u53ea\u662f\u7a0d\u5fae\u589e\u52a0\u4e86\u4e00\u4e9b\u590d\u6742\u6027\u3002\u793a\u4f8b\u7f51\u9875canvas2d/HierarchicalModel2D.html\u4f7f\u75282D\u753b\u5e03API\u5b9e\u73b0\u4e86\u5206\u5c42\u5efa\u6a21\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u8fdb\u884c\u53d8\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u770b\u5982\u4f55\u4f7f\u7528\u753b\u5e03API\u7ed8\u5236\u4e00\u4e2a\u692d\u5706\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u4e2d\u5fc3\u4f4d\u4e8e(x,y)\uff0c\u6c34\u5e73\u534a\u5f84\u4e3ar1\uff0c\u5782\u76f4\u534a\u5f84\u4e3ar2\u7684\u692d\u5706\u3002\u60f3\u6cd5\u662f\u7ed8\u5236\u4e00\u4e2a\u534a\u5f84\u4e3a1\u7684\u5706\uff0c\u4e2d\u5fc3\u4f4d\u4e8e(0,0)\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u53d8\u6362\u3002\u5706\u9700\u8981\u5728\u6c34\u5e73\u65b9\u5411\u6309\u6bd4\u4f8br1\u7f29\u653e\uff0c\u5728\u5782\u76f4\u65b9\u5411\u6309\u6bd4\u4f8br2\u7f29\u653e\u3002\u7136\u540e\uff0c\u5b83\u5e94\u8be5\u88ab\u5e73\u79fb\u4ee5\u5c06\u5176\u4e2d\u5fc3\u4ece(0,0)\u79fb\u52a8\u5230(x,y)\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>graphics.save()</code>\u548c<code>graphics.restore()</code>\u786e\u4fdd\u53d8\u6362\u4ec5\u5f71\u54cd\u5706\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4ee3\u7801\u4e2d\u7684\u53d8\u6362\u987a\u5e8f\u4e0e\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u987a\u5e8f\u76f8\u53cd\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>graphics.save();\ngraphics.translate( x, y );\ngraphics.scale( r1, r2 );\ngraphics.beginPath();\ngraphics.arc( 0, 0, 1, 0, Math.PI );  // \u534a\u5f84\u4e3a1\u7684\u5706\ngraphics.restore();\ngraphics.stroke();\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5f53\u524d\u8def\u5f84\u4e0d\u53d7<code>graphics.save()</code>\u548c<code>graphics.restore()</code>\u7684\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5f53\u8c03\u7528<code>graphics.restore()</code>\u65f6\uff0c\u692d\u5706\u5f62\u72b6\u7684\u8def\u5f84\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002\u5f53\u5728\u6700\u540e\u8c03\u7528<code>graphics.stroke()</code>\u65f6\uff0c\u63cf\u8fb9\u7684\u662f\u692d\u5706\u5f62\u72b6\u7684\u8def\u5f84\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u7528\u4e8e\u63cf\u8fb9\u7684\u7ebf\u5bbd\u5e76\u4e0d\u53d7\u5e94\u7528\u4e8e\u692d\u5706\u7684\u7f29\u653e\u53d8\u6362\u7684\u5f71\u54cd\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6700\u540e\u4e24\u4e2a\u547d\u4ee4\u7684\u987a\u5e8f\u98a0\u5012\u4e86\uff0c\u90a3\u4e48\u7ebf\u5bbd\u5c06\u53d7\u5230\u7f29\u653e\u7684\u5f71\u54cd\u3002</p> <p>\u8fd9\u91cc\u5173\u4e8e\u53d8\u6362\u548c\u8def\u5f84\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u89c2\u70b9\u3002\u5728HTML\u753b\u5e03API\u4e2d\uff0c\u7528\u4e8e\u521b\u5efa\u8def\u5f84\u7684\u70b9\u5728\u4fdd\u5b58\u4e4b\u524d\u4f1a\u53d7\u5230\u5f53\u524d\u53d8\u6362\u7684\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u4ee5\u50cf\u7d20\u5750\u6807\u4fdd\u5b58\u3002\u7a0d\u540e\uff0c\u5f53\u8def\u5f84\u88ab\u63cf\u8fb9\u6216\u586b\u5145\u65f6\uff0c\u5f53\u524d\u53d8\u6362\u4e0d\u4f1a\u5f71\u54cd\u8def\u5f84\uff08\u5c3d\u7ba1\u5b83\u53ef\u4ee5\u5f71\u54cd\u4f8b\u5982\u63cf\u8fb9\u65f6\u7684\u7ebf\u5bbd\uff09\u3002\u7279\u522b\u5730\uff0c\u4f60\u4e0d\u80fd\u521b\u5efa\u4e00\u4e2a\u8def\u5f84\u7136\u540e\u5e94\u7528\u4e0d\u540c\u7684\u53d8\u6362\u3002\u4f8b\u5982\uff0c\u4f60\u4e0d\u80fd\u521b\u5efa\u4e00\u4e2a\u692d\u5706\u5f62\u72b6\u7684\u8def\u5f84\uff0c\u7136\u540e\u7528\u5b83\u6765\u7ed8\u5236\u4e0d\u540c\u4f4d\u7f6e\u7684\u591a\u4e2a\u692d\u5706\u3002\u6bcf\u6b21\u7ed8\u5236\u692d\u5706\u65f6\uff0c\u5b83\u90fd\u4f1a\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5373\u4f7f\u5bf9\u56fe\u5f62\u4e0a\u4e0b\u6587\u5e94\u7528\u4e86\u4e0d\u540c\u7684\u5e73\u79fb\u53d8\u6362\u3002</p> <p>\u5728Java\u4e2d\u60c5\u51b5\u4e0d\u540c\uff0c\u5728\u8def\u5f84\u4e2d\u5b58\u50a8\u7684\u5750\u6807\u662f\u6307\u5b9a\u8def\u5f84\u7684\u5b9e\u9645\u6570\u5b57\uff0c\u5373\u5bf9\u8c61\u5750\u6807\u3002\u5f53\u8def\u5f84\u88ab\u63cf\u8fb9\u6216\u586b\u5145\u65f6\uff0c\u4f1a\u5e94\u7528\u5f53\u524d\u6709\u6548\u7684\u53d8\u6362\u5230\u8def\u5f84\u4e0a\u3002\u8def\u5f84\u53ef\u4ee5\u591a\u6b21\u91cd\u7528\uff0c\u4ee5\u7528\u4e0d\u540c\u7684\u53d8\u6362\u7ed8\u5236\u526f\u672c\u3002\u8fd9\u4e2a\u8bc4\u8bba\u63d0\u4f9b\u4e86\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf4\u660e\u770b\u8d77\u6765\u975e\u5e38\u76f8\u4f3c\u7684API\u53ef\u80fd\u5b58\u5728\u5fae\u5999\u7684\u5dee\u5f02\u3002</p> <p>A graphics context has three basic functions for modifying the current transform by scaling, rotation, and translation. There are also functions that will compose the current transform with an arbitrary transform and for completely replacing the current transform:</p> <ul> <li><code>graphics.scale(sx,sy)</code> \u2014 scale by sx in the x-direction and sy in the y-direction.</li> <li><code>graphics.rotate(angle)</code> \u2014 rotate by angle radians about the origin. A positive rotation is clockwise in the default coordinate system.</li> <li><code>graphics.translate(tx,ty)</code> \u2014 translate by tx in the x-direction and ty in the y-direction.</li> <li><code>graphics.transform(a,b,c,d,e,f)</code> \u2014 apply the affine transform x1 = ax + cy + e, and y1 = bx + dy + f.</li> <li><code>graphics.setTransform(a,b,c,d,e,f)</code> \u2014 discard the current transformation, and set the current transformation to be x1 = ax + cy + e, and y1 = bx + dy + f.</li> </ul> <p>Note that there is no shear transform, but you can apply a shear as a general transform. For example, for a horizontal shear with shear factor 0.5, use</p> <pre><code>graphics.transform(1, 0, 0.5, 1, 0, 0)\n</code></pre> <p>To implement hierarchical modeling, as discussed in Section 2.4, you need to be able to save the current transformation so that you can restore it later. Unfortunately, no way is provided to read the current transformation from a canvas graphics context. However, the graphics context itself keeps a stack of transformations and provides methods for pushing and popping the current transformation. In fact, these methods do more than save and restore the current transformation. They actually save and restore almost the entire state of the graphics context, including properties such as current colors, line width, and font (but not the current path):</p> <ul> <li><code>graphics.save()</code> \u2014 push a copy of the current state of the graphics context, including the current transformation, onto the stack.</li> <li><code>graphics.restore()</code> \u2014 remove the top item from the stack, containing a saved state of the graphics context, and restore the graphics context to that state.</li> </ul> <p>Using these methods, the basic setup for drawing an object with a modeling transform becomes:</p> <pre><code>graphics.save();          // save a copy of the current state\ngraphics.translate(a,b);  // apply modeling transformations\ngraphics.rotate(r);     \ngraphics.scale(sx,sy);\n.\n.  // Draw the object!\n.\ngraphics.restore();       // restore the saved state\n</code></pre> <p>Note that if drawing the object includes any changes to attributes such as drawing color, those changes will be also undone by the call to graphics.restore(). In hierarchical graphics, this is usually what you want, and it eliminates the need to have extra statements for saving and restoring things like color.</p> <p>To draw a hierarchical model, you need to traverse a scene graph, either procedurally or as a data structure. It's pretty much the same as in Java. In fact, you should see that the basic concepts that you learned about transformations and modeling carry over to the canvas graphics API. Those concepts apply very widely and even carry over to 3D graphics APIs, with just a little added complexity. The sample web page canvas2d/HierarchicalModel2D.html implements hierarchical modeling using the 2D canvas API.</p> <p>Now that we know how to do transformations, we can see how to draw an oval using the canvas API. Suppose that we want an oval with center at (x,y), with horizontal radius r1 and with vertical radius r2. The idea is to draw a circle of radius 1 with center at (0,0), then transform it. The circle needs to be scaled by a factor of r1 horizontally and r2 vertically. It should then be translated to move its center from (0,0) to (x,y). We can use graphics.save() and graphics.restore() to make sure that the transformations only affect the circle. Recalling that the order of transforms in the code is the opposite of the order in which they are applied to objects, this becomes:</p> <pre><code>graphics.save();\ngraphics.translate( x, y );\ngraphics.scale( r1, r2 );\ngraphics.beginPath();\ngraphics.arc( 0, 0, 1, 0, Math.PI );  // a circle of radius 1\ngraphics.restore();\ngraphics.stroke();\n</code></pre> <p>Note that the current path is not affected by the calls to graphics.save() and graphics.restore(). So, in the example, the oval-shaped path is not discarded when graphics.restore() is called. When graphics.stroke() is called at the end, it is the oval-shaped path that is stroked. On the other hand, the line width that is used for the stroke is not affected by the scale transform that was applied to the oval. Note that if the order of the last two commands were reversed, then the line width would be subject to the scaling.</p> <p>There is an interesting point here about transforms and paths. In the HTML canvas API, the points that are used to create a path are transformed by the current transformation before they are saved. That is, they are saved in pixel coordinates. Later, when the path is stroked or filled, the current transform has no effect on the path (although it can affect, for example, the line width when the path is stroked). In particular, you can't make a path and then apply different transformations. For example, you can't make an oval-shaped path, and then use it to draw several ovals in different positions. Every time you draw the oval, it will be in the same place, even if different translation transforms are applied to the graphics context.</p> <p>The situation is different in Java, where the coordinates that are stored in the path are the actual numbers that are used to specify the path, that is, the object coordinates. When the path is stroked or filled, the transformation that is in effect at that time is applied to the path. The path can be reused many times to draw copies with different transformations. This comment is offered as an example of how APIs that look very similar can have subtle differences.</p>"},{"location":"cn/c2/s6/#265-\u753b\u5e03\u8f85\u52a9","title":"2.6.5  \u753b\u5e03\u8f85\u52a9","text":"<p>Auxiliary Canvases</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u7b2c2.5.5\u5c0f\u8282\u4e2d\uff0c\u6211\u4eec\u770b\u4e86\u4e00\u4e0b\u793a\u4f8b\u7a0b\u5e8fjava2d/JavaPixelManipulation.java\uff0c\u5b83\u4f7f\u7528\u4e86BufferedImage\u6765\u5b9e\u73b0\u79bb\u5c4f\u753b\u5e03\u5e76\u5141\u8bb8\u76f4\u63a5\u64cd\u4f5c\u5355\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u3002\u76f8\u540c\u7684\u601d\u60f3\u53ef\u4ee5\u5e94\u7528\u5728HTML\u753b\u5e03\u56fe\u5f62\u4e2d\uff0c\u5c3d\u7ba1\u5b9e\u73b0\u65b9\u5f0f\u6709\u4e9b\u4e0d\u540c\u3002\u793a\u4f8b\u7f51\u9875\u5e94\u7528\u7a0b\u5e8fcanvas2d/SimplePaintProgram.html\u57fa\u672c\u4e0a\u548cJava\u7a0b\u5e8f\u505a\u4e86\u76f8\u540c\u7684\u4e8b\u60c5\uff08\u9664\u4e86\u56fe\u50cf\u6ee4\u955c\uff09\u3002</p> <p>\u4e0b\u9762\u662f\u5177\u6709\u76f8\u540c\u529f\u80fd\u7684\u7a0b\u5e8f\u7684\u5b9e\u65f6\u6f14\u793a\u7248\u672c\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5b83\u6765\u770b\u770b\u5404\u79cd\u7ed8\u56fe\u5de5\u5177\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u522b\u5fd8\u4e86\u8bd5\u8bd5\u201cSmudge\u201d\u5de5\u5177\uff01\uff08\u5b83\u5fc5\u987b\u5e94\u7528\u5230\u4f60\u5df2\u7ecf\u7ed8\u5236\u7684\u5f62\u72b6\u4e0a\u3002\uff09</p> <p></p> <p>\u5bf9\u4e8eJavaScript\uff0c\u7f51\u9875\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7531\u4e00\u4e2a\u79f0\u4e3aDOM\uff08Document Object Model\uff09\u7684\u6807\u51c6\u5b9a\u4e49\u3002\u5bf9\u4e8e\u79bb\u5c4f\u753b\u5e03\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4e0d\u5c5e\u4e8e\u8be5\u6570\u636e\u7ed3\u6784\u7684\uff0c\u56e0\u6b64\u4e0d\u662f\u9875\u9762\u7684\u4e00\u90e8\u5206\u3002\u5728JavaScript\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u8c03\u7528document.createElement(\"canvas\")\u6765\u521b\u5efa\u3002\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u8fd9\u79cd\u52a8\u6001\u521b\u5efa\u7684\u753b\u5e03\u6dfb\u52a0\u5230DOM\u4e2d\u7684\u7f51\u9875\uff0c\u4f46\u662f\u5373\u4f7f\u4e0d\u8fd9\u6837\u505a\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u79bb\u5c4f\u753b\u5e03\u4f7f\u7528\u3002\u8981\u4f7f\u7528\u5b83\uff0c\u60a8\u5fc5\u987b\u8bbe\u7f6e\u5b83\u7684width\u548cheight\u5c5e\u6027\uff0c\u5e76\u4e14\u9700\u8981\u4e00\u4e2a\u7528\u4e8e\u7ed8\u5236\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u521b\u5efa640x480\u753b\u5e03\uff0c\u83b7\u53d6\u753b\u5e03\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\uff0c\u5e76\u7528\u767d\u8272\u586b\u5145\u6574\u4e2a\u753b\u5e03\u7684\u793a\u4f8b\u4ee3\u7801\uff1a <pre><code>OSC = document.createElement(\"canvas\");  // \u79bb\u5c4f\u753b\u5e03\n\nOSC.width = 640;    // \u5fc5\u987b\u660e\u786e\u8bbe\u7f6eOSC\u7684\u5927\u5c0f\u3002\nOSC.height = 480;\n\nOSG = OSC.getContext(\"2d\");  // \u7528\u4e8e\u5728OSC\u4e0a\u7ed8\u5236\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\n\nOSG.fillStyle = \"white\";  // \u4f7f\u7528\u4e0a\u4e0b\u6587\u5c06OSC\u586b\u5145\u4e3a\u767d\u8272\u3002\nOSG.fillRect(0,0,OSC.width,OSC.height);\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8f\u5141\u8bb8\u7528\u6237\u5728\u753b\u5e03\u4e0a\u62d6\u52a8\u9f20\u6807\u6765\u7ed8\u5236\u4e00\u4e9b\u5f62\u72b6\u3002\u79bb\u5c4f\u753b\u5e03\u4fdd\u5b58\u4e86\u56fe\u7247\u7684\u5b98\u65b9\u526f\u672c\uff0c\u4f46\u7528\u6237\u770b\u4e0d\u5230\u5b83\u3002\u8fd8\u6709\u4e00\u4e2a\u7528\u6237\u53ef\u4ee5\u770b\u5230\u7684\u5c4f\u5e55\u753b\u5e03\u3002\u6bcf\u5f53\u56fe\u7247\u88ab\u4fee\u6539\u65f6\uff0c\u79bb\u5c4f\u753b\u5e03\u88ab\u590d\u5236\u5230\u5c4f\u5e55\u753b\u5e03\u4e0a\u3002\u5f53\u7528\u6237\u62d6\u52a8\u9f20\u6807\u6765\u7ed8\u5236\u7ebf\u6761\u3001\u692d\u5706\u6216\u77e9\u5f62\u65f6\uff0c\u65b0\u5f62\u72b6\u5b9e\u9645\u4e0a\u662f\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u7684\uff0c\u8986\u76d6\u5728\u79bb\u5c4f\u753b\u5e03\u7684\u5185\u5bb9\u4e0a\u3002\u53ea\u6709\u5f53\u7528\u6237\u5b8c\u6210\u62d6\u52a8\u64cd\u4f5c\u65f6\uff0c\u624d\u4f1a\u5c06\u65b0\u5f62\u72b6\u6dfb\u52a0\u5230\u79bb\u5c4f\u753b\u5e03\u4e0a\u3002\u5bf9\u4e8e\u5176\u4ed6\u5de5\u5177\uff0c\u66f4\u6539\u76f4\u63a5\u5e94\u7528\u4e8e\u79bb\u5c4f\u753b\u5e03\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u3002\u8fd9\u662f\u5bf9Java\u7a0b\u5e8f\u7684\u7cbe\u786e\u6a21\u4eff\u3002</p> <p>\uff08\u4e0a\u9762\u663e\u793a\u7684\u6f14\u793a\u7248\u672c\u5b9e\u9645\u4e0a\u4f7f\u7528\u4e86\u4e00\u79cd\u7565\u6709\u4e0d\u540c\u7684\u6280\u672f\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\u3002\u5b83\u4f7f\u7528\u4e86\u4e24\u4e2a\u5c4f\u5e55\u753b\u5e03\uff0c\u4e00\u4e2a\u5b8c\u5168\u4f4d\u4e8e\u53e6\u4e00\u4e2a\u4e4b\u4e0a\u3002\u8f83\u4f4e\u7684\u753b\u5e03\u4fdd\u5b58\u4e86\u5b9e\u9645\u56fe\u50cf\u3002\u4e0a\u90e8\u7684\u753b\u5e03\u5b8c\u5168\u900f\u660e\uff0c\u9664\u975e\u7528\u6237\u6b63\u5728\u7ed8\u5236\u7ebf\u6761\u3001\u692d\u5706\u6216\u77e9\u5f62\u3002\u5f53\u7528\u6237\u62d6\u52a8\u9f20\u6807\u7ed8\u5236\u8fd9\u6837\u7684\u5f62\u72b6\u65f6\uff0c\u65b0\u5f62\u72b6\u662f\u5728\u4e0a\u90e8\u753b\u5e03\u4e0a\u7ed8\u5236\u7684\uff0c\u5b83\u9690\u85cf\u4e86\u4f4d\u4e8e\u5f62\u72b6\u4e0b\u65b9\u7684\u4e0b\u90e8\u753b\u5e03\u7684\u90e8\u5206\u3002\u5f53\u7528\u6237\u91ca\u653e\u9f20\u6807\u65f6\uff0c\u5f62\u72b6\u88ab\u6dfb\u52a0\u5230\u4e0b\u90e8\u753b\u5e03\u4e0a\uff0c\u4e0a\u90e8\u753b\u5e03\u88ab\u6e05\u9664\u4ee5\u518d\u6b21\u5b8c\u5168\u900f\u660e\u3002\u540c\u6837\uff0c\u5176\u4ed6\u5de5\u5177\u76f4\u63a5\u64cd\u4f5c\u4e0b\u90e8\u753b\u5e03\u3002\uff09</p> <p>In Subsection 2.5.5, we looked at the sample program java2d/JavaPixelManipulation.java, which uses a BufferedImage both to implement an off-screen canvas and to allow direct manipulation of the colors of individual pixels. The same ideas can be applied in HTML canvas graphics, although the way it's done is a little different. The sample web application canvas2d/SimplePaintProgram.html does pretty much the same thing as the Java program (except for the image filters).</p> <p>Here is a live demo version of the program that has the same functionality. You can try it out to see how the various drawing tools work. Don't forget to try the \"Smudge\" tool! (It has to be applied to shapes that you have already drawn.)</p> <p></p> <p>For JavaScript, a web page is represented as a data structure, defined by a standard called the DOM, or Document Object model. For an off-screen canvas, we can use a  that is not part of that data structure and therefore is not part of the page. In JavaScript, a  can be created with the function call document.createElement(\"canvas\"). There is a way to add this kind of dynamically created canvas to the DOM for the web page, but it can be used as an off-screen canvas without doing so. To use it, you have to set its width and height properties, and you need a graphics context for drawing on it. Here, for example, is some code that creates a 640-by-480 canvas, gets a graphics context for the canvas, and fills the whole canvas with white: <pre><code>OSC = document.createElement(\"canvas\");  // off-screen canvas\n\nOSC.width = 640;    // Size of OSC must be set explicitly.\nOSC.height = 480;\n\nOSG = OSC.getContext(\"2d\");  // Graphics context for drawing on OSC.\n\nOSG.fillStyle = \"white\";  // Use the context to fill OSC with white.\nOSG.fillRect(0,0,OSC.width,OSC.height);\n</code></pre> <p>The sample program lets the user drag the mouse on the canvas to draw some shapes. The off-screen canvas holds the official copy of the picture, but it is not seen by the user. There is also an on-screen canvas that the user sees. The off-screen canvas is copied to the on-screen canvas whenever the picture is modified. While the user is dragging the mouse to draw a line, oval, or rectangle, the new shape is actually drawn on-screen, over the contents of the off-screen canvas. It is only added to the off-screen canvas when the user finishes the drag operation. For the other tools, changes are made directly to the off-screen canvas, and the result is then copied to the screen. This is an exact imitation of the Java program.</p> <p>(The demo version shown above actually uses a somewhat different technique to accomplish the same thing. It uses two on-screen canvases, one located exactly on top of the other. The lower canvas holds the actual image. The upper canvas is completely transparent, except when the user is drawing a line, oval, or rectangle. While the user is dragging the mouse to draw such a shape, the new shape is drawn on the upper canvas, where it hides the part of the lower canvas that is beneath the shape. When the user releases the mouse, the shape is added to the lower canvas and the upper canvas is cleared to make it completely transparent again. Again, the other tools operate directly on the lower canvas.)</p>"},{"location":"cn/c2/s6/#266-\u50cf\u7d20\u64cd\u4f5c","title":"2.6.6  \u50cf\u7d20\u64cd\u4f5c","text":"<p>Pixel Manipulation</p> \u4e2d\u6587\u82f1\u6587 <p>\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u201cSmudge\u201d\u5de5\u5177\u662f\u901a\u8fc7\u5bf9\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u989c\u8272\u5206\u91cf\u503c\u8fdb\u884c\u8ba1\u7b97\u6765\u5b9e\u73b0\u7684\u3002\u8be5\u5b9e\u73b0\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u8bfb\u53d6\u753b\u5e03\u4e2d\u50cf\u7d20\u7684\u989c\u8272\u3002\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 graphics.getPixelData(x,y,w,h) \u6765\u5b8c\u6210\uff0c\u5176\u4e2d graphics \u662f\u753b\u5e03\u7684 2D \u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u8be5\u51fd\u6570\u8bfb\u53d6\u4e00\u4e2a\u50cf\u7d20\u77e9\u5f62\u7684\u989c\u8272\uff0c\u5176\u4e2d (x,y) \u662f\u77e9\u5f62\u7684\u5de6\u4e0a\u89d2\uff0cw \u662f\u5bbd\u5ea6\uff0ch \u662f\u9ad8\u5ea6\u3002\u8fd9\u4e9b\u53c2\u6570\u59cb\u7ec8\u4ee5\u50cf\u7d20\u5750\u6807\u8868\u793a\u3002\u4f8b\u5982\uff1a</p> <pre><code>colors = graphics.getImageData(0,0,20,10)\n</code></pre> <p>\u8fd9\u8fd4\u56de\u4e86\u753b\u5e03\u5de6\u4e0a\u89d2\u7684\u4e00\u4e2a 20x10 \u77e9\u5f62\u7684\u989c\u8272\u6570\u636e\u3002\u8fd4\u56de\u503c colors \u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5177\u6709\u5c5e\u6027 colors.width\u3001colors.height \u548c colors.data\u3002\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7ed9\u51fa\u4e86\u8fd4\u56de\u6570\u636e\u4e2d\u50cf\u7d20\u7684\u884c\u6570\u548c\u5217\u6570\uff08\u6839\u636e\u6587\u6863\uff0c\u5728\u9ad8\u5206\u8fa8\u7387\u5c4f\u5e55\u4e0a\uff0c\u5b83\u4eec\u53ef\u80fd\u4e0e\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4e0d\u540c\u3002\u6570\u636e\u53ef\u4ee5\u662f\u663e\u793a\u8bbe\u5907\u4e0a\u7684\u771f\u5b9e\u7269\u7406\u50cf\u7d20\uff0c\u800c\u4e0d\u662f\u753b\u5e03\u4e0a\u50cf\u7d20\u5750\u6807\u7cfb\u4e2d\u4f7f\u7528\u7684\u201c\u540d\u4e49\u201d\u50cf\u7d20\u3002\u6bcf\u4e2a\u540d\u4e49\u50cf\u7d20\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a\u8bbe\u5907\u50cf\u7d20\u3002\u6211\u4e0d\u786e\u5b9a\u8fd9\u5728\u5b9e\u8df5\u4e2d\u662f\u5426\u4f1a\u771f\u6b63\u53d1\u751f\uff09\u3002</p> <p>colors.data \u7684\u503c\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u50cf\u7d20\u6709\u56db\u4e2a\u6570\u7ec4\u5143\u7d20\u3002\u8fd9\u56db\u4e2a\u5143\u7d20\u5305\u542b\u4e86\u50cf\u7d20\u7684\u7ea2\u8272\u3001\u7eff\u8272\u3001\u84dd\u8272\u548c alpha \u989c\u8272\u5206\u91cf\uff0c\u4ee5\u6574\u6570\u5f62\u5f0f\u7ed9\u51fa\uff0c\u8303\u56f4\u4ece 0 \u5230 255\u3002\u5bf9\u4e8e\u4f4d\u4e8e\u753b\u5e03\u5916\u7684\u50cf\u7d20\uff0c\u56db\u4e2a\u7ec4\u4ef6\u503c\u90fd\u5c06\u4e3a\u96f6\u3002\u8be5\u6570\u7ec4\u662f Uint8ClampedArray \u7c7b\u578b\u7684\u503c\uff0c\u5176\u5143\u7d20\u662f\u9650\u5236\u5728 0 \u5230 255 \u8303\u56f4\u5185\u7684 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002\u8fd9\u662f JavaScript \u7684\u4e00\u79cd\u7c7b\u578b\u5316\u6570\u7ec4\u6570\u636e\u7c7b\u578b\uff0c\u53ea\u80fd\u4fdd\u5b58\u7279\u5b9a\u6570\u503c\u7c7b\u578b\u7684\u503c\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u53ea\u60f3\u8bfb\u53d6\u5750\u6807\u4e3a (x,y) \u5904\u7684\u4e00\u4e2a\u50cf\u7d20\u7684 RGB \u989c\u8272\u3002\u4f60\u53ef\u4ee5\u8bbe\u7f6e</p> <pre><code>pixel = graphics.getImageData(x,y,1,1);\n</code></pre> <p>\u7136\u540e\u50cf\u7d20\u7684 RGB \u989c\u8272\u5206\u91cf\u4e3a <code>R = pixel.data[0]</code>\u3001<code>G = pixel.data[1]</code> \u548c <code>B = pixel.data[2]</code>\u3002</p> <p>\u51fd\u6570 graphics.putImageData(imageData,x,y) \u7528\u4e8e\u5c06\u56fe\u50cf\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u989c\u8272\u590d\u5236\u5230\u753b\u5e03\u4e2d\uff0c\u5c06\u5176\u653e\u7f6e\u5230\u753b\u5e03\u4e2d\u7684\u77e9\u5f62\u4e2d\uff0c\u5176\u5de6\u4e0a\u89d2\u4f4d\u4e8e (x,y)\u3002imageData \u5bf9\u8c61\u53ef\u4ee5\u662f\u901a\u8fc7\u8c03\u7528 graphics.getImageData \u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u53ef\u80fd\u5df2\u7ecf\u4fee\u6539\u4e86\u5176\u989c\u8272\u6570\u636e\u3002\u6216\u8005\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 graphics.createImageData(w,h) \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u56fe\u50cf\u6570\u636e\u5bf9\u8c61\uff0c\u5e76\u586b\u5145\u6570\u636e\u3002</p> <p>\u8ba9\u6211\u4eec\u8003\u8651\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u201cSmudge\u201d\u5de5\u5177\u3002\u5f53\u7528\u6237\u4f7f\u7528\u6b64\u5de5\u5177\u70b9\u51fb\u9f20\u6807\u65f6\uff0c\u6211\u4f7f\u7528 OSG.getImageData \u6765\u83b7\u53d6\u56f4\u7ed5\u9f20\u6807\u4f4d\u7f6e\u7684 9x9 \u50cf\u7d20\u6b63\u65b9\u5f62\u7684\u989c\u8272\u6570\u636e\u3002OSG \u662f\u5305\u542b\u56fe\u50cf\u7684\u753b\u5e03\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u7531\u4e8e\u6211\u5e0c\u671b\u5bf9\u989c\u8272\u503c\u8fdb\u884c\u5b9e\u6570\u8fd0\u7b97\uff0c\u6240\u4ee5\u5c06\u989c\u8272\u5206\u91cf\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u7c7b\u578b\u5316\u6570\u7ec4\u4e2d\uff0c\u5373\u7c7b\u578b\u4e3a Float32Array \u7684\u6570\u7ec4\uff0c\u5b83\u53ef\u4ee5\u4fdd\u5b58 32 \u4f4d\u6d6e\u70b9\u6570\u3002\u4ee5\u4e0b\u662f\u6211\u8c03\u7528\u7684\u51fd\u6570\uff1a</p> <pre><code>function grabSmudgeData(x, y) {  // (x,y) \u8868\u793a\u9f20\u6807\u4f4d\u7f6e\n    let colors = OSG.getImageData(x-5,y-5,9,9);\n    if (smudgeColorArray == null) {\n        // \u7b2c\u4e00\u6b21\u8c03\u7528\u6b64\u51fd\u6570\u65f6\u521b\u5efa\u56fe\u50cf\u6570\u636e\u548c\u6570\u7ec4\u3002\n        smudgeImageData = OSG.createImageData(9,9);\n        smudgeColorArray = new Float32Array(colors.data.length);\n    }\n    for (let i = 0; i &lt; colors.data.length; i++) {\n        // \u5c06\u989c\u8272\u5206\u91cf\u6570\u636e\u590d\u5236\u5230 Float32Array \u4e2d\u3002\n        smudgeColorArray[i] = colors.data[i];\n    }\n}\n</code></pre> <p>\u6d6e\u70b9\u6570\u6570\u7ec4 smudgeColorArray \u5c06\u7528\u4e8e\u8ba1\u7b97\u9f20\u6807\u79fb\u52a8\u65f6\u56fe\u50cf\u7684\u65b0\u989c\u8272\u503c\u3002\u6765\u81ea\u8be5\u6570\u7ec4\u7684\u989c\u8272\u503c\u5c06\u88ab\u590d\u5236\u5230\u56fe\u50cf\u6570\u636e\u5bf9\u8c61 smudgeImageData \u4e2d\uff0c\u7136\u540e\u5c06\u7528\u4e8e\u5c06\u989c\u8272\u503c\u653e\u5165\u56fe\u50cf\u4e2d\u3002\u8fd9\u662f\u53e6\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b8c\u6210\u7684\uff0c\u8be5\u51fd\u6570\u5728\u7528\u6237\u5c06\u201cSmudge\u201d\u5de5\u5177\u62d6\u52a8\u5230\u753b\u5e03\u4e0a\u7684\u6bcf\u4e2a\u70b9\u65f6\u8c03\u7528\uff1a</p> <pre><code>function swapSmudgeData(x, y) { // (x,y) \u662f\u65b0\u7684\u9f20\u6807\u4f4d\u7f6e\n    let colors = OSG.getImageData(x-5,y-5,9,9);  // \u83b7\u53d6\u56fe\u50cf\u4e2d\u7684\u989c\u8272\u6570\u636e\n    for (let i = 0; i &lt; smudgeColorArray.length; i += 4) {\n        // \u4e00\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u6570\u636e\u5728\u4e0b\u9762\u56db\u4e2a\u6570\u7ec4\u4f4d\u7f6e\u4e2d\u3002\n        if (smudgeColorArray[i+3] &amp;&amp; colors.data[i+3]) {\n            // alpha \u5206\u91cf\u4e0d\u4e3a\u96f6\uff1b\u4e24\u4e2a\u50cf\u7d20\u90fd\u5728\u753b\u5e03\u4e2d\uff1b\n            // \uff08getImageData() \u5728\u5b9e\u9645\u4e0d\u5c5e\u4e8e\u753b\u5e03\u7684\u50cf\u7d20\u5750\u6807\u5904\u83b7\u53d6 alpha \u503c\u4e3a 0\uff09\u3002\n            for (let j = i; j &lt; i+3; j++) { // \u8ba1\u7b97\u65b0\u7684 RGB \u503c\n                let newSmudge = smudgeColorArray[j]*0.8 + colors.data[j]*0.2;\n                let newImage  = smudgeColorArray[j]*0.2 + colors.data[j]*0.8;\n                smudgeImageData.data[j] = newImage;\n                smudgeColorArray[j] = newSmudge;\n            }\n            smudgeImageData.data[i+3] = 255;  // alpha \u5206\u91cf\n        }\n        else {\n            // \u5176\u4e2d\u4e00\u4e2a alpha \u5206\u91cf\u4e3a\u96f6\uff1b\u5c06\u8f93\u51fa\u989c\u8272\u8bbe\u7f6e\u4e3a\u5168\u96f6\uff0c\u5373\u201c\u900f\u660e\u9ed1\u8272\u201d\uff0c\u8fd9\u4e0d\u4f1a\u5f71\u54cd\u753b\u5e03\u4e2d\u50cf\u7d20\u7684\u989c\u8272\u3002\n            for (let j = i; j &lt;= i+3; j++) {\n                smudgeImageData.data[j] = 0; \n            }\n        }\n    }\n    OSG.putImageData(smudgeImageData,x-5,y-5); // \u5c06\u65b0\u989c\u8272\u590d\u5236\u5230\u753b\u5e03\u4e2d\n}\n</code></pre> <p>\u5728\u6b64\u51fd\u6570\u4e2d\uff0c\u5bf9\u9f20\u6807\u4f4d\u7f6e\u5468\u56f4\u7684\u4e00\u4e2a 9x9 \u50cf\u7d20\u6b63\u65b9\u5f62\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u8ba1\u7b97\u4e86\u4e00\u4e2a\u65b0\u7684\u989c\u8272\u3002\u989c\u8272\u88ab\u5f53\u524d\u50cf\u7d20\u7684\u989c\u8272\u548csmudgeColorArray\u4e2d\u5bf9\u5e94\u50cf\u7d20\u7684\u989c\u8272\u7684\u52a0\u6743\u5e73\u5747\u503c\u6240\u66ff\u4ee3\u3002\u540c\u65f6\uff0csmudgeColorArray \u4e2d\u7684\u989c\u8272\u4e5f\u88ab\u7c7b\u4f3c\u7684\u52a0\u6743\u5e73\u5747\u503c\u66ff\u4ee3\u3002</p> <p>\u503c\u5f97\u5c1d\u8bd5\u7406\u89e3\u6b64\u793a\u4f8b\uff0c\u4ee5\u4e86\u89e3\u5982\u4f55\u8fdb\u884c\u989c\u8272\u6570\u636e\u7684\u9010\u50cf\u7d20\u5904\u7406\u3002\u6709\u5173\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b\u793a\u4f8b\u7684\u6e90\u4ee3\u7801\u3002</p> <p>The \"Smudge\" tool in the sample program and demo is implemented by computing with the color component values of pixels in the image. The implementation requires some way to read the colors of pixels in a canvas. That can be done with the function graphics.getPixelData(x,y,w,h), where graphics is a 2D graphics context for the canvas. The function reads the colors of a rectangle of pixels, where (x,y) is the upper left corner of the rectangle, w is its width, and h is its height. The parameters are always expressed in pixel coordinates. Consider, for example</p> <pre><code>colors = graphics.getImageData(0,0,20,10)\n</code></pre> <p>This returns the color data for a 20-by-10 rectangle in the upper left corner of the canvas. The return value, colors, is an object with properties colors.width, colors.height, and colors.data. The width and height give the number of rows and columns of pixels in the returned data. (According to the documentation, on a high-resolution screen, they might not be the same as the width and height in the function call. The data can be for real, physical pixels on the display device, not the \"nominal\" pixels that are used in the pixel coordinate system on the canvas. There might be several device pixels for each nominal pixel. I'm not sure whether this can really happen in practice.)</p> <p>The value of colors.data is an array, with four array elements for each pixel. The four elements contain the red, blue, green, and alpha color components of the pixel, given as integers in the range 0 to 255. For a pixel that lies outside the canvas, the four component values will all be zero. The array is a value of type Uint8ClampedArray whose elements are 8-bit unsigned integers limited to the range 0 to 255. This is one of JavaScript's typed array datatypes, which can only hold values of a specific numerical type. As an example, suppose that you just want to read the RGB color of one pixel, at coordinates (x,y). You can set</p> <pre><code>pixel = graphics.getImageData(x,y,1,1);\n</code></pre> <p>Then the RGB color components for the pixel are <code>R = pixel.data[0]</code>, <code>G = pixel.data[1]</code>, and <code>B = pixel.data[2]</code>.</p> <p>The function graphics.putImageData(imageData,x,y) is used to copy the colors from an image data object into a canvas, placing it into a rectangle in the canvas with upper left corner at (x,y). The imageData object can be one that was returned by a call to graphics.getImageData, possibly with its color data modified. Or you can create a blank image data object by calling graphics.createImageData(w,h) and fill it with data.</p> <p>Let's consider the \"Smudge\" tool in the sample program. When the user clicks the mouse with this tool, I use OSG.getImageData to get the color data from a 9-by-9 square of pixels surrounding the mouse location. OSG is the graphics context for the canvas that contains the image. Since I want to do real-number arithmetic with color values, I copy the color components into another typed array, one of type Float32Array, which can hold 32-bit floating point numbers. Here is the function that I call to do this:</p> <pre><code>function grabSmudgeData(x, y) {  // (x,y) gives mouse location\n    let colors = OSG.getImageData(x-5,y-5,9,9);\n    if (smudgeColorArray == null) {\n        // Make image data &amp; array the first time this function is called.\n        smudgeImageData = OSG.createImageData(9,9);\n        smudgeColorArray = new Float32Array(colors.data.length);\n    }\n    for (let i = 0; i &lt; colors.data.length; i++) {\n        // Copy the color component data into the Float32Array.\n        smudgeColorArray[i] = colors.data[i];\n    }\n}\n</code></pre> <p>The floating point array, smudgeColorArray, will be used for computing new color values for the image as the mouse moves. The color values from this array will be copied into the image data object, smudgeImageData, which will then be used to put the color values into the image. This is done in another function, which is called for each point that is visited as the user drags the Smudge tool over the canvas:</p> <pre><code>function swapSmudgeData(x, y) { // (x,y) is new mouse location\n    let colors = OSG.getImageData(x-5,y-5,9,9);  // get color data from image\n    for (let i = 0; i &lt; smudgeColorArray.length; i += 4) {\n        // The color data for one pixel is in the next four array locations.\n        if (smudgeColorArray[i+3] &amp;&amp; colors.data[i+3]) {\n            // alpha-components are non-zero; both pixels are in the canvas;\n            // (getImageData() gets 0 for the alpha value at pixel coordinates\n            // that are not actually part of the canvas).\n            for (let j = i; j &lt; i+3; j++) { // compute new RGB values\n                let newSmudge = smudgeColorArray[j]*0.8 + colors.data[j]*0.2;\n                let newImage  = smudgeColorArray[j]*0.2 + colors.data[j]*0.8;\n                smudgeImageData.data[j] = newImage;\n                smudgeColorArray[j] = newSmudge;\n            }\n            smudgeImageData.data[i+3] = 255;  // alpha component\n        }\n        else {\n            // one of the alpha components is zero; set the output\n            // color to all zeros, \"transparent black\", which will have\n            // no effect on the color of the pixel in the canvas.\n            for (let j = i; j &lt;= i+3; j++) {\n                smudgeImageData.data[j] = 0; \n            }\n        }\n    }\n    OSG.putImageData(smudgeImageData,x-5,y-5); // copy new colors into canvas\n}\n</code></pre> <p>In this function, a new color is computed for each pixel in a 9-by-9 square of pixels around the mouse location. The color is replaced by a weighted average of the current color of the pixel and the color of the corresponding pixel in the smudgeColorArray. At the same time, the color in smudgeColorArray is replaced by a similar weighted average.</p> <p>It would be worthwhile to try to understand this example to see how pixel-by-pixel processing of color data can be done. See the source code of the example for more details.</p>"},{"location":"cn/c2/s6/#267-\u56fe\u50cf","title":"2.6.7  \u56fe\u50cf","text":"<p>Images</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u50cf\u7d20\u64cd\u4f5c\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b\u56fe\u50cf\u6ee4\u955c\uff0c\u5b83\u901a\u8fc7\u5c06\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u66ff\u6362\u4e3a\u5176\u5468\u56f48\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u7684\u52a0\u6743\u5e73\u5747\u503c\u6765\u4fee\u6539\u56fe\u50cf\u3002\u6839\u636e\u4f7f\u7528\u7684\u52a0\u6743\u56e0\u5b50\uff0c\u7ed3\u679c\u53ef\u80fd\u662f\u56fe\u50cf\u7684\u8f7b\u5fae\u6a21\u7cca\u7248\u672c\uff0c\u6216\u8005\u53ef\u80fd\u662f\u66f4\u6709\u8da3\u7684\u4e1c\u897f\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u5b83\u5141\u8bb8\u60a8\u5c06\u51e0\u79cd\u4e0d\u540c\u7684\u56fe\u50cf\u6ee4\u955c\u5e94\u7528\u4e8e\u5404\u79cd\u56fe\u50cf\uff1a</p> <p></p> <p>\u6f14\u793a\u4e2d\u7684\u8fc7\u6ee4\u64cd\u4f5c\u4f7f\u7528\u4e86\u4e0a\u9762\u8ba8\u8bba\u8fc7\u7684\u56fe\u50cf\u6570\u636e\u51fd\u6570 getImageData\u3001createImageData \u548c putImageData\u3002\u901a\u8fc7\u8c03\u7528 getImageData \u83b7\u5f97\u6574\u4e2a\u56fe\u50cf\u7684\u989c\u8272\u6570\u636e\u3002\u52a0\u6743\u5e73\u5747\u8ba1\u7b97\u7684\u7ed3\u679c\u88ab\u653e\u7f6e\u5728\u4e00\u4e2a\u65b0\u7684\u56fe\u50cf\u6570\u636e\u5bf9\u8c61\u4e2d\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u56fe\u50cf\u6570\u636e\u590d\u5236\u56de\u56fe\u50cf\u4e2d\u4f7f\u7528 putImageData\u3002</p> <p>\u5269\u4e0b\u7684\u95ee\u9898\u662f\uff0c\u539f\u59cb\u56fe\u50cf\u4ece\u54ea\u91cc\u6765\uff0c\u5b83\u4eec\u5982\u4f55\u9996\u5148\u51fa\u73b0\u5728\u753b\u5e03\u4e0a\uff1f\u7f51\u9875\u4e2d\u7684\u56fe\u50cf\u7531\u7f51\u9875\u6e90\u4ee3\u7801\u4e2d\u7684\u5143\u7d20\u6307\u5b9a\uff0c\u4f8b\u5982</p> <pre><code>&lt;img src=\"pic.jpg\" width=\"400\" height=\"300\" id=\"mypic\"&gt;\n</code></pre> <p>src \u5c5e\u6027\u6307\u5b9a\u52a0\u8f7d\u56fe\u50cf\u7684 URL\u3002\u53ef\u9009\u7684 id \u53ef\u4ee5\u7528\u4e8e\u5728 JavaScript \u4e2d\u5f15\u7528\u56fe\u50cf\u3002\u5728\u811a\u672c\u4e2d\uff0c</p> <pre><code>image = document.getElementById(\"mypic\");\n</code></pre> <p>\u83b7\u53d6\u4e86\u8868\u793a\u6587\u6863\u7ed3\u6784\u4e2d\u56fe\u50cf\u7684\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u4e00\u65e6\u60a8\u62e5\u6709\u4e86\u8fd9\u6837\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u5c06\u56fe\u50cf\u7ed8\u5236\u5230\u753b\u5e03\u4e0a\u3002\u5982\u679c graphics \u662f\u753b\u5e03\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\uff0c\u5219</p> <pre><code>graphics.drawImage(image, x, y);\n</code></pre> <p>\u5c06\u56fe\u50cf\u7ed8\u5236\u5728\u5176\u5de6\u4e0a\u89d2\u4e3a (x,y) \u7684\u4f4d\u7f6e\u3002\u70b9 (x,y) \u548c\u56fe\u50cf\u672c\u8eab\u90fd\u4f1a\u53d7\u5230\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u7684\u4efb\u4f55\u53d8\u6362\u7684\u5f71\u54cd\u3002\u8fd9\u5c06\u4ee5\u5176\u81ea\u7136\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7ed8\u5236\u56fe\u50cf\uff08\u5982\u679c\u6709\u53d8\u6362\uff0c\u5219\u4f1a\u7f29\u653e\uff09\u3002\u60a8\u8fd8\u53ef\u4ee5\u6307\u5b9a\u7ed8\u5236\u56fe\u50cf\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff1a</p> <pre><code>graphics.drawImage(image, x, y, width, height);\n</code></pre> <p>\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u7684 drawImage\uff0c\u56fe\u50cf\u5c06\u88ab\u7f29\u653e\u4ee5\u9002\u5e94\u6307\u5b9a\u7684\u77e9\u5f62\u3002</p> <p>\u73b0\u5728\uff0c\u5047\u8bbe\u60a8\u8981\u7ed8\u5236\u5230\u753b\u5e03\u4e0a\u7684\u56fe\u50cf\u4e0d\u662f\u7f51\u9875\u7684\u4e00\u90e8\u5206\uff1f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u52a8\u6001\u52a0\u8f7d\u56fe\u50cf\u3002\u8fd9\u5f88\u50cf\u521b\u5efa\u4e00\u4e2a\u79bb\u5c4f\u753b\u5e03\uff0c\u4f46\u4f60\u5728\u521b\u5efa\u4e00\u4e2a\"\u79bb\u5c4f\u56fe\u50cf\"\u3002\u4f7f\u7528 document \u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a img \u5143\u7d20\uff1a</p> <pre><code>newImage = document.createElement(\"img\");\n</code></pre> <p>\u4e00\u4e2a img \u5143\u7d20\u9700\u8981\u4e00\u4e2a src \u5c5e\u6027\uff0c\u6307\u5b9a\u8981\u52a0\u8f7d\u7684 URL\u3002\u4f8b\u5982\uff0c</p> <pre><code>newImage.src = \"pic2.jpg\";\n</code></pre> <p>\u4e00\u65e6\u7ed9 src \u5c5e\u6027\u8d4b\u503c\uff0c\u6d4f\u89c8\u5668\u5c31\u5f00\u59cb\u52a0\u8f7d\u56fe\u50cf\u3002\u52a0\u8f7d\u662f\u5f02\u6b65\u8fdb\u884c\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u8ba1\u7b97\u673a\u7ee7\u7eed\u6267\u884c\u811a\u672c\u800c\u4e0d\u7b49\u5f85\u52a0\u8f7d\u5b8c\u6210\u3002\u8fd9\u610f\u5473\u7740\u60a8\u4e0d\u80fd\u7b80\u5355\u5730\u5728\u4e0a\u9762\u7684\u8d4b\u503c\u8bed\u53e5\u4e4b\u540e\u7684\u884c\u4e0a\u7ed8\u5236\u56fe\u50cf\uff1a\u6b64\u65f6\u56fe\u50cf\u5f88\u53ef\u80fd\u8fd8\u6ca1\u6709\u52a0\u8f7d\u5b8c\u6210\u3002\u60a8\u5e0c\u671b\u5728\u56fe\u50cf\u52a0\u8f7d\u5b8c\u6210\u540e\u7ed8\u5236\u56fe\u50cf\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u60a8\u9700\u8981\u5728\u8bbe\u7f6e src \u4e4b\u524d\u5c06\u4e00\u4e2a\u51fd\u6570\u5206\u914d\u7ed9\u56fe\u50cf\u7684 onload \u5c5e\u6027\u3002\u5f53\u56fe\u50cf\u52a0\u8f7d\u5b8c\u5168\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u3002\u5c06\u8fd9\u4e9b\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684 JavaScript \u51fd\u6570\uff0c\u7528\u4e8e\u4ece\u6307\u5b9a\u7684 URL \u52a0\u8f7d\u56fe\u50cf\uff0c\u5e76\u5728\u52a0\u8f7d\u5b8c\u6210\u540e\u5c06\u5176\u7ed8\u5236\u5230\u753b\u5e03\u4e0a\uff1a</p> <pre><code>function loadAndDraw( imageURL, x, y ) {\n    let image = document.createElement(\"img\");\n    image.onload = doneLoading;\n    image.src = imageURL;\n    function doneLoading() {\n        graphics.drawImage(image, x, y);\n    }\n}\n</code></pre> <p>\u5728\u6ee4\u955c\u6f14\u793a\u4e2d\u4e5f\u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u6280\u672f\u6765\u52a0\u8f7d\u56fe\u50cf\u3002</p> <p>\u6700\u540e\u8fd8\u6709\u4e00\u4e2a\u8c1c\u8981\u89e3\u51b3\u3002\u5728\u672c\u8282\u524d\u9762\u8ba8\u8bba SimplePaintProgram \u793a\u4f8b\u4e2d\u4f7f\u7528\u79bb\u5c4f\u753b\u5e03\u65f6\uff0c\u6211\u6307\u51fa\u4e86\u79bb\u5c4f\u753b\u5e03\u7684\u5185\u5bb9\u5fc5\u987b\u590d\u5236\u5230\u4e3b\u753b\u5e03\u4e0a\uff0c\u4f46\u6211\u6ca1\u6709\u8bf4\u660e\u5982\u4f55\u5b9e\u73b0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4f7f\u7528 drawImage \u5c31\u53ef\u4ee5\u505a\u5230\u3002\u9664\u4e86\u5c06\u56fe\u50cf\u7ed8\u5236\u5230\u753b\u5e03\u4e0a\uff0cdrawImage \u8fd8\u53ef\u4ee5\u7528\u6765\u5c06\u4e00\u4e2a\u753b\u5e03\u7684\u5185\u5bb9\u7ed8\u5236\u5230\u53e6\u4e00\u4e2a\u753b\u5e03\u4e0a\u3002\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u547d\u4ee4</p> <pre><code>graphics.drawImage( OSC, 0, 0 );\n</code></pre> <p>\u7528\u4e8e\u5c06\u79bb\u5c4f\u753b\u5e03\u7ed8\u5236\u5230\u4e3b\u753b\u5e03\u4e0a\u3002\u8fd9\u91cc\uff0cgraphics \u662f\u7528\u4e8e\u5728\u4e3b\u753b\u5e03\u4e0a\u7ed8\u5236\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\uff0c\u800c OSC \u662f\u8868\u793a\u79bb\u5c4f\u753b\u5e03\u7684\u5bf9\u8c61\u3002</p> <p>For another example of pixel manipulation, we can look at image filters that modify an image by replacing the color of each pixel with a weighted average of the color of that pixel and the 8 pixels that surround it. Depending on the weighting factors that are used, the result can be as simple as a slightly blurred version of the image, or it can be something more interesting.</p> <p>Here is an an interactive demo that lets you apply several different image filters to a variety of images:</p> <p></p> <p>The filtering operation in the demo uses the image data functions getImageData, createImageData, and putImageData that were discussed above. Color data from the entire image is obtained with a call to getImageData. The results of the averaging computation are placed in a new image data object, and the resulting image data is copied back to the image using putImageData.</p> <p>The remaining question is, where do the original images come from, and how do they get onto the canvas in the first place? An image on a web page is specified by an element in the web page source such as</p> <pre><code>&lt;img src=\"pic.jpg\" width=\"400\" height=\"300\" id=\"mypic\"&gt;\n</code></pre> <p>The src attribute specifies the URL from which the image is loaded. The optional id can be used to reference the image in JavaScript. In the script,</p> <p>The src attribute specifies the URL from which the image is loaded. The optional id can be used to reference the image in JavaScript. In the script,</p> <pre><code>image = document.getElementById(\"mypic\");\n</code></pre> <p>gets a reference to the object that represents the image in the document structure. Once you have such an object, you can use it to draw the image on a canvas. If graphics is a graphics context for the canvas, then</p> <pre><code>graphics.drawImage(image, x, y);\n</code></pre> <p>draws the image with its upper left corner at (x,y). Both the point (x,y) and the image itself are transformed by any transformation in effect in the graphics context. This will draw the image using its natural width and height (scaled by the transformation, if any). You can also specify the width and height of the rectangle in which the image is drawn:</p> <pre><code>graphics.drawImage(image, x, y, width, height);\n</code></pre> <p>With this version of drawImage, the image is scaled to fit the specified rectangle.</p> <p>Now, suppose that the image you want to draw onto the canvas is not part of the web page? In that case, it is possible to load the image dynamically. This is much like making an off-screen canvas, but you are making an \"off-screen image.\" Use the document object to create an img element:</p> <pre><code>newImage = document.createElement(\"img\");\n</code></pre> <p>An img element needs a src attribute that specifies the URL from which it is to be loaded. For example,</p> <pre><code>newImage.src = \"pic2.jpg\";\n</code></pre> <p>As soon as you assign a value to the src attribute, the browser starts loading the image. The loading is done asynchronously; that is, the computer continues to execute the script without waiting for the load to complete. This means that you can't simply draw the image on the line after the above assignment statement: The image is very likely not done loading at that time. You want to draw the image after it has finished loading. For that to happen, you need to assign a function to the image's onload property before setting the src. That function will be called when the image has been fully loaded. Putting this together, here is a simple JavaScript function for loading an image from a specified URL and drawing it on a canvas after it has loaded:</p> <pre><code>function loadAndDraw( imageURL, x, y ) {\n    let image = document.createElement(\"img\");\n    image.onload = doneLoading;\n    image.src = imageURL;\n    function doneLoading() {\n        graphics.drawImage(image, x, y);\n    }\n}\n</code></pre> <p>A similar technique is used to load the images in the filter demo.</p> <p>There is one last mystery to clear up. When discussing the use of an off-screen canvas in the SimplePaintProgram example earlier in this section, I noted that the contents of the off-screen canvas have to be copied to the main canvas, but I didn't say how that can be done. In fact, it is done using drawImage. In addition to drawing an image onto a canvas, drawImage can be used to draw the contents of one canvas into another canvas. In the sample program, the command</p> <pre><code>graphics.drawImage( OSC, 0, 0 );\n</code></pre> <p>is used to draw the off-screen canvas to the main canvas. Here, graphics is a graphics context for drawing on the main canvas, and OSC is the object that represents the off-screen canvas.</p>"},{"location":"cn/c2/s7/","title":"\u7b2c7\u8282: SVG\uff1a\u4e00\u79cd\u573a\u666f\u63cf\u8ff0\u8bed\u8a00","text":"<p>SVG: A Scene Description Language</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u7ed3\u675f\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\uff0c\u518d\u770b\u4e00\u770b\u53e6\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u5f62\u7cfb\u7edf\uff1aSVG\uff0c\u5373\u53ef\u7f29\u653e\u77e2\u91cf\u56fe\u5f62\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u8003\u8651\u56fe\u5f62\u7f16\u7a0b API\u3002\u800c SVG \u5219\u662f\u4e00\u79cd\u573a\u666f\u63cf\u8ff0\u8bed\u8a00\uff0c\u800c\u4e0d\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u3002\u7f16\u7a0b\u8bed\u8a00\u901a\u8fc7\u7a0b\u5e8f\u751f\u6210\u5176\u5185\u5bb9\u6765\u521b\u5efa\u573a\u666f\uff0c\u800c\u573a\u666f\u63cf\u8ff0\u8bed\u8a00\u901a\u8fc7\u5217\u51fa\u5176\u5185\u5bb9\u6765\u201c\u58f0\u660e\u6027\u5730\u201d\u6307\u5b9a\u573a\u666f\u3002\u7531\u4e8e SVG \u662f\u4e00\u79cd\u77e2\u91cf\u56fe\u5f62\u8bed\u8a00\uff0c\u573a\u666f\u7684\u5185\u5bb9\u5305\u62ec\u5f62\u72b6\u3001\u989c\u8272\u548c\u7ebf\u5bbd\u7b49\u5c5e\u6027\uff0c\u4ee5\u53ca\u51e0\u4f55\u53d8\u6362\u3002\u8fd9\u4e9b\u5927\u591a\u6570\u5bf9\u4f60\u6765\u8bf4\u5e94\u8be5\u5f88\u719f\u6089\uff0c\u4f46\u5728\u65b0\u7684\u4e0a\u4e0b\u6587\u4e2d\u770b\u5230\u5b83\u5e94\u8be5\u662f\u5f88\u6709\u8da3\u7684\u3002</p> <p>SVG \u662f\u4e00\u79cd XML \u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u6709\u7740\u975e\u5e38\u4e25\u683c\u4e14\u6709\u4e9b\u5197\u957f\u7684\u8bed\u6cd5\u3002\u8fd9\u53ef\u80fd\u4f7f\u5f97\u7f16\u5199\u5b83\u6709\u70b9\u70e6\u4eba\uff0c\u4f46\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u4f7f\u5f97\u5373\u4f7f\u4f60\u4e0d\u719f\u6089\u8bed\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u9605\u8bfb\u548c\u7406\u89e3 SVG \u6587\u6863\u3002SVG \u53ef\u80fd\u6700\u521d\u4ee3\u8868\u201c\u7b80\u5355\u201d\u77e2\u91cf\u56fe\u5f62\uff0c\u4f46\u76ee\u524d\u6765\u770b\u5b83\u7edd\u4e0d\u662f\u4e00\u79cd\u7b80\u5355\u7684\u8bed\u8a00\u3002\u6211\u8fd9\u91cc\u53ea\u4f1a\u6db5\u76d6\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u800c\u4e14\u8fd8\u6709\u5f88\u591a\u8bed\u8a00\u7684\u90e8\u5206\u548c\u9009\u9879\u6211\u4e0d\u4f1a\u63d0\u5230\u3002\u6211\u7684\u76ee\u6807\u662f\u4ecb\u7ecd\u573a\u666f\u63cf\u8ff0\u8bed\u8a00\u7684\u6982\u5ff5\uff0c\u5e76\u5c55\u793a\u8fd9\u79cd\u8bed\u8a00\u5982\u4f55\u4f7f\u7528\u672c\u7ae0\u5176\u4f59\u90e8\u5206\u6240\u4f7f\u7528\u7684\u76f8\u540c\u57fa\u672c\u601d\u60f3\u3002</p> <p>SVG \u53ef\u4ee5\u7528\u4f5c\u5b58\u50a8\u77e2\u91cf\u56fe\u5f62\u56fe\u50cf\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u65b9\u5f0f\u4e0e PNG \u548c JPEG \u7528\u4e8e\u5b58\u50a8\u50cf\u7d20\u56fe\u50cf\u7684\u6587\u4ef6\u683c\u5f0f\u7c7b\u4f3c\u3002\u8fd9\u610f\u5473\u7740\u4f60\u51e0\u4e4e\u53ef\u4ee5\u7528\u4efb\u4f55\u7f51\u7edc\u6d4f\u89c8\u5668\u6253\u5f00 SVG \u6587\u4ef6\u67e5\u770b\u56fe\u50cf\u3002\u901a\u8fc7\u5c06\u5176\u7528\u4f5c <code>&lt;img&gt;</code> \u5143\u7d20\u7684 src\uff0c\u53ef\u4ee5\u5728\u7f51\u9875\u4e2d\u5305\u542b SVG \u56fe\u50cf\u3002\u8fd9\u5c31\u662f\u672c\u9875\u9762\u4e0a\u663e\u793a\u7684 SVG \u793a\u4f8b\u7684\u65b9\u6cd5\u3002\u7531\u4e8e SVG \u6587\u6863\u662f\u7528\u7eaf\u6587\u672c\u7f16\u5199\u7684\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u6587\u672c\u7f16\u8f91\u5668\u521b\u5efa SVG \u56fe\u50cf\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u5728\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u6253\u5f00\u5b83\u6216\u5728\u7f51\u9875\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u56fe\u50cf\u65f6\u67e5\u770b\u56fe\u50cf\u7684\u6e90\u4ee3\u7801\u6765\u8bfb\u53d6 SVG \u56fe\u50cf\u7684\u6e90\u4ee3\u7801\u3002</p> <p>We finish this chapter with a look at one more 2D graphics system: SVG, or Scalable Vector Graphics. So far, we have been considering graphics programming APIs. SVG, on the other hand is a scene description language rather than a programming language. Where a programming language creates a scene by generating its contents procedurally, a scene description language specifies a scene \"declaratively,\" by listing its content. Since SVG is a vector graphics language, the content of a scene includes shapes, attributes such as color and line width, and geometric transforms. Most of this should be familiar to you, but it should be interesting to see it in a new context.</p> <p>SVG is an XML language, which means it has a very strict and somewhat verbose syntax. This can make it a little annoying to write, but on the other hand, it makes it possible to read and understand SVG documents even if you are not familiar with the syntax. It's possible that SVG originally stood for \"Simple\" Vector Graphics, but it is by no means a simple language at this point. I will cover only a part of it here, and there are many parts of the language and many options that I will not mention. My goal is to introduce the idea of a scene description language and to show how such a language can use the same basic ideas that are used in the rest of this chapter.</p> <p>SVG can be used as a file format for storing vector graphics images, in much the same way that PNG and JPEG are file formats for storing pixel-based images. That means that you can open an SVG file with almost any web browser to view the image. An SVG image can be included in a web page by using it as the src of an <code>&lt;img&gt;</code> element. That's how the SVG examples on this page are displayed. Since SVG documents are written in plain text, you can create SVG images using a regular text editor, and you can read the source for an SVG image by opening it in a text editor or by viewing the source of the image when it is displayed in a web browser.</p>"},{"location":"cn/c2/s7/#271-svg-document-structure","title":"2.7.1  SVG Document Structure","text":"<p>SVG Document Structure</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u4e2a SVG \u6587\u4ef6\uff0c\u5c31\u50cf\u4efb\u4f55 XML \u6587\u6863\u4e00\u6837\uff0c\u4ee5\u4e00\u4e9b\u51e0\u4e4e\u6ca1\u6709\u4eba\u8bb0\u4f4f\u7684\u6807\u51c6\u4ee3\u7801\u5f00\u5934\u3002\u5b83\u5e94\u8be5\u53ea\u662f\u88ab\u590d\u5236\u5230\u4e00\u4e2a\u65b0\u6587\u6863\u4e2d\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4ee3\u7801\uff0c\u53ef\u4f5c\u4e3a\u672c\u8282\u8ba8\u8bba\u7684 SVG \u6587\u6863\u7684\u8d77\u59cb\u70b9\u8fdb\u884c\u590d\u5236\uff08\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ea\u4f7f\u7528\u4e86\u5b8c\u6574 SVG \u89c4\u8303\u7684\u4e00\u4e2a\u5b50\u96c6\uff09\uff1a</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \n\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" \n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        width=\"4in\" height=\"4in\" \n        viewBox=\"0 0 400 400\"\n        preserveAspectRatio=\"xMidYMid\"&gt;\n\n    &lt;!-- \u8fd9\u91cc\u653e\u7f6e\u573a\u666f\u63cf\u8ff0\uff01  --&gt;   \n\n&lt;/svg&gt;\n</code></pre> <p>\u524d\u4e09\u884c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a XML SVG \u6587\u6863\u3002\u6587\u6863\u7684\u5176\u4f59\u90e8\u5206\u662f\u4e00\u4e2a <code>&lt;svg&gt;</code> \u5143\u7d20\uff0c\u5b83\u4f5c\u4e3a\u6574\u4e2a\u573a\u666f\u63cf\u8ff0\u7684\u5bb9\u5668\u3002\u4f60\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e XML \u8bed\u6cd5\u7684\u77e5\u8bc6\u3002\u9996\u5148\uff0cXML \u5143\u7d20\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>&lt;elementname attrib1=\"value1\" attrib2=\"value2\"&gt;\n    ...content... \n&lt;/elementname&gt;\n</code></pre> <p>\u5143\u7d20\u4ee5\u4e00\u4e2a\u201c\u5f00\u59cb\u6807\u7b7e\u201d\u5f00\u59cb\uff0c\u5b83\u4ee5\u4e00\u4e2a\u201c<code>&lt;</code>\u201d\u5f00\u5934\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u8be5\u6807\u8bc6\u7b26\u662f\u6807\u7b7e\u540d\u79f0\uff0c\u5e76\u4ee5\u201c<code>&gt;</code>\u201d\u7ed3\u5c3e\u3002\u5f00\u59cb\u6807\u7b7e\u53ef\u4ee5\u5305\u542b\u201c\u5c5e\u6027\u201d\uff0c\u5c5e\u6027\u7684\u5f62\u5f0f\u4e3a <code>name=\"value\"</code>\u3002\u540d\u79f0\u662f\u4e00\u4e2a\u6807\u8bc6\u7b26\uff1b\u503c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u503c\u5fc5\u987b\u7528\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u3002\u5143\u7d20\u4ee5\u4e00\u4e2a\u201c\u7ed3\u675f\u6807\u7b7e\u201d\u7ed3\u675f\uff0c\u7ed3\u675f\u6807\u7b7e\u7684\u5143\u7d20\u540d\u79f0\u4e0e\u5f00\u59cb\u6807\u7b7e\u4e2d\u7684\u5143\u7d20\u540d\u79f0\u5339\u914d\uff0c\u5e76\u4e14\u5f62\u5f0f\u4e3a <code>&lt;/elementname&gt;</code>\u3002\u5143\u7d20\u540d\u79f0\u548c\u5c5e\u6027\u540d\u79f0\u533a\u5206\u5927\u5c0f\u5199\u3002\u5f00\u59cb\u6807\u7b7e\u548c\u7ed3\u675f\u6807\u7b7e\u4e4b\u95f4\u662f\u5143\u7d20\u7684\u201c\u5185\u5bb9\u201d\u3002\u5185\u5bb9\u53ef\u4ee5\u5305\u542b\u6587\u672c\u548c\u5d4c\u5957\u5143\u7d20\u3002\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u6ca1\u6709\u5185\u5bb9\uff0c\u4f60\u53ef\u4ee5\u5c06\u5f00\u59cb\u6807\u7b7e\u672b\u5c3e\u7684\u201c<code>&gt;</code>\u201d\u66ff\u6362\u4e3a\u201c<code>/&gt;</code>\u201d\uff0c\u5e76\u7701\u7565\u7ed3\u675f\u6807\u7b7e\u3002\u8fd9\u88ab\u79f0\u4e3a\u201c\u81ea\u95ed\u5408\u6807\u7b7e\u201d\u3002\u4f8b\u5982\uff0c</p> <pre><code>&lt;circle cx=\"5\" cy=\"5\" r=\"4\" fill=\"red\"/&gt;\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a\u5b9e\u9645\u7684 SVG \u5143\u7d20\uff0c\u6307\u5b9a\u4e86\u4e00\u4e2a\u5706\u3002\u5f88\u5bb9\u6613\u5fd8\u8bb0\u81ea\u95ed\u5408\u6807\u7b7e\u672b\u5c3e\u7684\u201c/\u201d\uff0c\u4f46\u5b83\u5fc5\u987b\u5b58\u5728\u4ee5\u5f62\u6210\u5408\u6cd5\u7684 XML \u6587\u6863\u3002</p> <p>\u56de\u987e\u4e00\u4e0b SVG \u6587\u6863\uff0c\u4ee5 <code>&lt;svg</code> \u5f00\u5934\u7684\u4e94\u884c\u53ea\u662f\u4e00\u4e2a\u957f\u7684\u5f00\u59cb\u6807\u7b7e\u3002\u4f60\u53ef\u4ee5\u50cf\u793a\u4f8b\u4e2d\u90a3\u6837\u4f7f\u7528\u6807\u7b7e\uff0c\u5e76\u81ea\u5b9a\u4e49\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u3001viewBox \u548c preserveAspectRatio \u5c5e\u6027\u7684\u503c\u3002\u4e0b\u4e00\u884c\u662f\u4e00\u4e2a\u6ce8\u91ca\uff1bXML \u4e2d\u7684\u6ce8\u91ca\u4ee5\u201c<code>&lt;!--</code>\u201d\u5f00\u59cb\uff0c\u4ee5\u201c<code>--&gt;</code>\u201d\u7ed3\u675f\u3002</p> <p><code>&lt;svg&gt;</code> \u6807\u7b7e\u7684 width \u548c height \u5c5e\u6027\u6307\u5b9a\u4e86\u56fe\u50cf\u7684\u81ea\u7136\u6216\u9996\u9009\u5927\u5c0f\u3002\u5b83\u53ef\u4ee5\u88ab\u5f3a\u5236\u6539\u53d8\u5927\u5c0f\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u5b83\u88ab\u7528\u5728\u4e00\u4e2a\u7f51\u9875\u4e0a\u7684 <code>&lt;img&gt;</code> \u5143\u7d20\u4e2d\uff0c\u8be5\u5143\u7d20\u6307\u5b9a\u4e86\u4e0d\u540c\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u3002\u5927\u5c0f\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982 in\uff08\u82f1\u5bf8\uff09\u3001cm\uff08\u5398\u7c73\uff09\u548c px\uff08\u50cf\u7d20\uff09\u4e4b\u7c7b\u7684\u5355\u4f4d\u8fdb\u884c\u6307\u5b9a\uff0c\u6bcf\u82f1\u5bf8\u6709 90 \u50cf\u7d20\u3002\u5982\u679c\u672a\u6307\u5b9a\u5355\u4f4d\uff0c\u5219\u4f7f\u7528\u50cf\u7d20\u3002\u6570\u5b57\u548c\u5355\u4f4d\u4e4b\u95f4\u4e0d\u80fd\u6709\u4efb\u4f55\u7a7a\u683c\u3002</p> <p>viewBox \u5c5e\u6027\u8bbe\u7f6e\u4e86\u7528\u4e8e\u7ed8\u5236\u56fe\u50cf\u7684\u5750\u6807\u7cfb\u3002\u8fd9\u5c31\u662f\u6211\u5728 2.3.1 \u5c0f\u8282 \u4e2d\u79f0\u4e4b\u4e3a\u89c6\u7a97\u7684\u4e1c\u897f\u3002viewBox \u7684\u503c\u662f\u4e00\u4e2a\u5305\u542b\u56db\u4e2a\u6570\u5b57\u7684\u5217\u8868\uff0c\u5206\u522b\u7ed9\u51fa\u4e86\u89c6\u7a97\u7684\u6700\u5c0f x \u503c\u3001\u6700\u5c0f y \u503c\u3001\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u3002\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5fc5\u987b\u662f\u6b63\u503c\uff0c\u56e0\u6b64 x \u4ece\u5de6\u5230\u53f3\u589e\u52a0\uff0cy \u4ece\u4e0a\u5230\u4e0b\u589e\u52a0\u3002\u5217\u8868\u4e2d\u7684\u56db\u4e2a\u6570\u5b57\u53ef\u4ee5\u7528\u7a7a\u683c\u6216\u9017\u53f7\u5206\u9694\uff1b\u8fd9\u5728 SVG \u4e2d\u7684\u6570\u5b57\u5217\u8868\u4e2d\u662f\u5178\u578b\u7684\u3002</p> <p>\u6700\u540e\uff0cpreserveAspectRatio \u5c5e\u6027\u544a\u8bc9\u5f53 viewBox \u7684\u5bbd\u9ad8\u6bd4\u4e0e\u56fe\u50cf\u663e\u793a\u7684\u77e9\u5f62\u7684\u5bbd\u9ad8\u6bd4\u4e0d\u5339\u914d\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u9ed8\u8ba4\u503c\u201cxMidYMid\u201d\u4f1a\u6c34\u5e73\u6216\u5782\u76f4\u5730\u6269\u5c55 viewBox \u7684\u9650\u5236\u4ee5\u4fdd\u6301\u5bbd\u9ad8\u6bd4\uff0c\u5e76\u4e14 viewBox \u4f1a\u51fa\u73b0\u5728\u663e\u793a\u77e9\u5f62\u7684\u4e2d\u5fc3\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684\u56fe\u50cf\u62c9\u4f38\u4ee5\u586b\u6ee1\u663e\u793a\u77e9\u5f62\uff0c\u5ffd\u7565\u5bbd\u9ad8\u6bd4\uff0c\u5c06 preserveAspectRatio \u7684\u503c\u8bbe\u7f6e\u4e3a\u201cnone\u201d\u3002\uff08\u5bbd\u9ad8\u6bd4\u95ee\u9898\u5df2\u5728 2.3.7 \u5c0f\u8282 \u4e2d\u8ba8\u8bba\u8fc7\u3002\uff09</p> <p>\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7ed8\u5236\u51e0\u4e2a\u7b80\u5355\u5f62\u72b6\u7684\u5b8c\u6574 SVG \u6587\u6863\u3002\u4e0b\u9762\u662f\u6587\u6863\u3002\u5373\u4f7f\u4f60\u4e0d\u4e86\u89e3 SVG \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5927\u81f4\u731c\u51fa\u5b83\u7ed8\u5236\u4e86\u4ec0\u4e48\uff1a</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \n\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" \n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    width=\"300px\" height=\"200px\" \n    viewBox=\"0 0 3 2\"\n    preserveAspectRatio=\"xMidYMid\"&gt;\n\n&lt;rect x=\"0\" y=\"0\" width=\"3\" height=\"2\" \n                            stroke=\"blue\" fill=\"none\" stroke-width=\"0.05\"/&gt;\n&lt;text x=\"0.2\" y=\"0.5\" font-size=\"0.4\" fill=\"red\"&gt;Hello World!&lt;/text&gt;\n&lt;line x1=\"0.1\" y1=\"0.7\" x2=\"2.9\" y2=\"0.7\" stroke-width=\"0.05\n\n\" stroke=\"blue\"/&gt;\n&lt;ellipse cx=\"1.5\" cy=\"1.4\" rx=\".6\" ry=\".4\" fill=\"rgb(0,255,180)\"/&gt;\n&lt;circle cx=\"0.4\" cy=\"1.4\" r=\"0.3\" \n                    fill=\"magenta\" stroke=\"black\" stroke-width=\"0.03\"/&gt;\n&lt;polygon points=\"2.2,1.7 2.4,1 2.9,1.7\" \n                    fill=\"none\" stroke=\"green\" stroke-width=\"0.02\"/&gt;\n\n&lt;/svg&gt;\n</code></pre> <p>\u8fd9\u662f\u8be5\u793a\u4f8b\u751f\u6210\u7684\u56fe\u50cf\uff1a</p> <p> </p> <p>\u5bf9\u4e8e\u6b64\u793a\u4f8b\u7684\u7ed8\u56fe\u5750\u6807\u7cfb\uff0cx \u8303\u56f4\u4ece 0 \u5230 3\uff0cy \u8303\u56f4\u4ece 0 \u5230 2\u3002\u6240\u6709\u7528\u4e8e\u7ed8\u5236\u7684\u503c\uff0c\u5305\u62ec\u63cf\u8fb9\u5bbd\u5ea6\u548c\u5b57\u4f53\u5927\u5c0f\uff0c\u90fd\u662f\u4ee5\u8fd9\u4e2a\u5750\u6807\u7cfb\u6765\u7ed9\u51fa\u7684\u3002\u8bf7\u8bb0\u4f4f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4f60\u89c9\u5f97\u65b9\u4fbf\u7684\u5750\u6807\u7cfb\uff01\u987a\u4fbf\u63d0\u4e00\u4e0b\uff0c\u672a\u88ab\u7ed8\u5236\u5f62\u72b6\u8986\u76d6\u7684\u56fe\u50cf\u90e8\u5206\u5c06\u662f\u900f\u660e\u7684\u3002</p> <p>\u8fd9\u662f\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u5176\u4e2d\u5305\u542b\u591a\u79cd\u5f62\u72b6\u3002\u6b64\u793a\u4f8b\u7684\u6e90\u4ee3\u7801\u6709\u5f88\u591a\u6ce8\u91ca\u3002\u5b83\u4f7f\u7528\u4e86\u6211\u4eec\u5c06\u5728\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u4e2d\u8ba8\u8bba\u7684\u7279\u6027\u3002</p> <p> </p> <p>\u4f60\u53ef\u4ee5\u67e5\u770b\u6e90\u4ee3\u7801\uff0csvg/svg-starter.svg\u3002\uff08\u4f8b\u5982\uff0c\u5728\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u6253\u5f00\u5b83\uff0c\u6216\u8005\u5728\u7f51\u9875\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u5b83\u5e76\u4f7f\u7528\u6d4f\u89c8\u5668\u7684\u201c\u67e5\u770b\u6e90\u4ee3\u7801\u201d\u547d\u4ee4\u3002\uff09</p> <p>An SVG file, like any XML document, starts with some standard code that almost no one memorizes. It should just be copied into a new document. Here is some code that can be copied as a starting point for SVG documents of the type discussed in this section (which, remember use only a subset of the full SVG specification):</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \n\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" \n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        width=\"4in\" height=\"4in\" \n        viewBox=\"0 0 400 400\"\n        preserveAspectRatio=\"xMidYMid\"&gt;\n\n    &lt;!-- The scene description goes here!  --&gt;   \n\n&lt;/svg&gt;\n</code></pre> <p>The first three lines say that this is an XML SVG document. The rest of the document is an <code>&lt;svg&gt;</code> element that acts as a container for the entire scene description. You'll need to know a little about XML syntax. First, an XML \"element\" in its general form looks like this:</p> <pre><code>&lt;elementname attrib1=\"value1\" attrib2=\"value2\"&gt;\n    ...content... \n&lt;/elementname&gt;\n</code></pre> <p>The element starts with a \"start tag,\" which begins with a \"<code>&lt;</code>\" followed by an identifier that is the name of the tag, and ending with a \"<code>&gt;</code>\". The start tag can include \"attributes,\" which have the form <code>name=\"value\"</code>. The name is an identifier; the value is a string. The value must be enclosed in single or double quotation marks. The element ends with an \"end tag,\" which has an element name that matches the element name in the start tag and has the form <code>&lt;/elementname&gt;</code>. Element names and attribute names are case-sensitive. Between the start and end tags comes the \"content\" of the element. The content can consist of text and nested elements. If an element has no content, you can replace the \"<code>&gt;</code>\" at the end of the start tag with \"<code>/&gt;</code>\", and leave out the end tag. This is called a \"self-closing tag.\" For example,</p> <pre><code>&lt;circle cx=\"5\" cy=\"5\" r=\"4\" fill=\"red\"/&gt;\n</code></pre> <p>This is an actual SVG element that specifies a circle. It's easy to forget the \"/\" at the end of a self-closing tag, but it has to be there to have a legal XML document.</p> <p>Looking back at the SVG document, the five lines starting with <code>&lt;svg</code> are just a long start tag. You can use the tag as shown, and customize the values of the width, height, viewBox, and preserveAspectRatio attributes. The next line is a comment; comments in XML start with <code>\"&lt;!--\"</code> and end with <code>\"--&gt;\"</code>.</p> <p>The width and height attributes of the <code>&lt;svg&gt;</code> tag specify a natural or preferred size for the image. It can be forced into a different size, for example if it is used in an <code>&lt;img&gt;</code> element on a web page that specifies a different width and height. The size can be specified using units of measure such as in for inches, cm for centimeters, and px, for pixels, with 90 pixels to the inch. If no unit of measure is specified, pixels are used. There cannot be any space between the number and the unit of measure.</p> <p>The viewBox attribute sets up the coordinate system that will be used for drawing the image. It is what I called the view window in Subsection 2.3.1. The value for viewBox is a list of four numbers, giving the minimum x-value, the minimum y-value, the width, and the height of the view window. The width and the height must be positive, so x increases from left-to-right, and y increases from top-to-bottom. The four numbers in the list can be separated either by spaces or by commas; this is typical for lists of numbers in SVG.</p> <p>Finally, the preserveAspectRatio attribute tells what happens when the aspect ratio of the viewBox does not match the aspect ratio of the rectangle in which the image is displayed. The default value, \"xMidYMid\", will extend the limts on the viewBox either horizontally or vertically to preserve the aspect ratio, and the viewBox will appear in the center of the display rectangle. If you would like your image to stretch to fill the display rectangle, ignoring the aspect ratio, set the value of preserveAspectRatio to \"none\". (The aspect ratio issue was discussed in Subsection 2.3.7.)</p> <p>Let's look at a complete SVG document that draws a few simple shapes. Here's the document. You could probably figure out what it draws even without knowing any more about SVG:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \n\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" \n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    width=\"300px\" height=\"200px\" \n    viewBox=\"0 0 3 2\"\n    preserveAspectRatio=\"xMidYMid\"&gt;\n\n&lt;rect x=\"0\" y=\"0\" width=\"3\" height=\"2\" \n                            stroke=\"blue\" fill=\"none\" stroke-width=\"0.05\"/&gt;\n&lt;text x=\"0.2\" y=\"0.5\" font-size=\"0.4\" fill=\"red\"&gt;Hello World!&lt;/text&gt;\n&lt;line x1=\"0.1\" y1=\"0.7\" x2=\"2.9\" y2=\"0.7\" stroke-width=\"0.05\" stroke=\"blue\"/&gt;\n&lt;ellipse cx=\"1.5\" cy=\"1.4\" rx=\".6\" ry=\".4\" fill=\"rgb(0,255,180)\"/&gt;\n&lt;circle cx=\"0.4\" cy=\"1.4\" r=\"0.3\" \n                    fill=\"magenta\" stroke=\"black\" stroke-width=\"0.03\"/&gt;\n&lt;polygon points=\"2.2,1.7 2.4,1 2.9,1.7\" \n                    fill=\"none\" stroke=\"green\" stroke-width=\"0.02\"/&gt;\n\n&lt;/svg&gt;\n</code></pre> <p>and here's the image that is produced by this example:</p> <p> </p> <p>In the drawing coordinate system for this example, x ranges from 0 to 3, and y ranges from 0 to 2. All values used for drawing, including stroke width and font size, are given in terms of this coordinate system. Remember that you can use any coordinate system that you find convenient! Note, by the way, that parts of the image that are not covered by the shapes that are drawn will be transparent.</p> <p>Here's another example, with a larger variety of shapes. The source code for this example has a lot of comments. It uses features that we will discuss in the remainer of this section.</p> <p> </p> <p>You can take a look at the source code, svg/svg-starter.svg. (For example, open it in a text editor, or open it in a web browser and use the browser's \"view source\" command.)</p>"},{"location":"cn/c2/s7/#272-shapes-styles-and-transforms","title":"2.7.2  Shapes, Styles, and Transforms","text":"<p>Shapes, Styles, and Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 SVG \u4e2d\uff0c\u57fa\u672c\u5f62\u72b6\u7531\u4e00\u4e2a\u5143\u7d20\u6765\u6307\u5b9a\uff0c\u5176\u4e2d\u6807\u7b7e\u540d\u79f0\u7ed9\u51fa\u5f62\u72b6\uff0c\u5c5e\u6027\u7ed9\u51fa\u5f62\u72b6\u7684\u5c5e\u6027\u3002\u6709\u4e00\u4e9b\u5c5e\u6027\u7528\u4e8e\u6307\u5b9a\u51e0\u4f55\u5f62\u72b6\uff0c\u6bd4\u5982\u7ebf\u7684\u7aef\u70b9\u6216\u5706\u7684\u534a\u5f84\u3002\u5176\u4ed6\u5c5e\u6027\u6307\u5b9a\u6837\u5f0f\u5c5e\u6027\uff0c\u6bd4\u5982\u586b\u5145\u989c\u8272\u548c\u7ebf\u5bbd\u3002\uff08\u5728\u672c\u4e66\u7684\u5176\u4ed6\u5730\u65b9\uff0c\u6211\u79f0\u6837\u5f0f\u5c5e\u6027\u4e3a\u5c5e\u6027\uff1b\u5728\u672c\u8282\u4e2d\uff0c\u6211\u5728\u5176 XML \u610f\u4e49\u4e0a\u4f7f\u7528\u672f\u8bed\u201c\u5c5e\u6027\u201d\uff09\u3002\u8fd8\u6709\u4e00\u4e2a transform \u5c5e\u6027\uff0c\u53ef\u4ee5\u7528\u6765\u5bf9\u5f62\u72b6\u5e94\u7528\u51e0\u4f55\u53d8\u6362\u3002</p> <p>\u4e3e\u4e2a\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u8003\u8651 rect \u5143\u7d20\uff0c\u5b83\u6307\u5b9a\u4e86\u4e00\u4e2a\u77e9\u5f62\u3002\u77e9\u5f62\u7684\u51e0\u4f55\u5f62\u72b6\u901a\u5e38\u7531\u540d\u4e3a x\u3001y\u3001width \u548c height \u7684\u5c5e\u6027\u7ed9\u51fa\u3002x \u548c y \u7684\u9ed8\u8ba4\u503c\u662f\u96f6\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u662f\u53ef\u9009\u7684\uff0c\u5c06\u5b83\u4eec\u7701\u7565\u4e0e\u5c06\u5b83\u4eec\u7684\u503c\u8bbe\u7f6e\u4e3a\u96f6\u662f\u4e00\u6837\u7684\u3002width \u548c height \u662f\u5fc5\u9700\u7684\u5c5e\u6027\u3002\u5b83\u4eec\u7684\u503c\u5fc5\u987b\u662f\u975e\u8d1f\u7684\u3002\u4f8b\u5982\uff0c\u5143\u7d20</p> <pre><code>&lt;rect width=\"3\" height=\"2\"/&gt;\n</code></pre> <p>\u6307\u5b9a\u4e00\u4e2a\u5de6\u4e0a\u89d2\u4e3a (0,0)\uff0c\u5bbd\u4e3a 3\uff0c\u9ad8\u4e3a 2 \u7684\u77e9\u5f62\uff0c\u800c</p> <pre><code>&lt;rect x=\"100\" y=\"200\" height=\"480\" width=\"640\"/&gt;\n</code></pre> <p>\u7ed9\u51fa\u4e00\u4e2a\u5de6\u4e0a\u89d2\u4e3a (100,200)\uff0c\u5bbd\u4e3a 640\uff0c\u9ad8\u4e3a 480 \u7684\u77e9\u5f62\u3002\uff08\u987a\u4fbf\u63d0\u4e00\u4e0b\uff0cXML \u5143\u7d20\u4e2d\u7684\u5c5e\u6027\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u7ed9\u51fa\u3002\uff09rect \u5143\u7d20\u8fd8\u6709\u53ef\u9009\u5c5e\u6027 rx \u548c ry\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u201c\u5706\u89d2\u77e9\u5f62\u201d\uff0c\u5176\u89d2\u88ab\u692d\u5706\u5f27\u66ff\u6362\u3002rx \u548c ry \u7684\u503c\u7ed9\u51fa\u4e86\u692d\u5706\u5f27\u7684\u6c34\u5e73\u548c\u5782\u76f4\u534a\u5f84\u3002</p> <p>\u6837\u5f0f\u5c5e\u6027\u53ef\u4ee5\u6dfb\u52a0\u6765\u6307\u5b9a\u5f62\u72b6\u7684\u63cf\u8fb9\u548c\u586b\u5145\u65b9\u5f0f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9ed1\u8272\u586b\u5145\u548c\u65e0\u63cf\u8fb9\u3002\uff08\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u6b63\u5982\u6211\u4eec\u540e\u9762\u5c06\u770b\u5230\u7684\uff0c\u5f62\u72b6\u9ed8\u8ba4\u4ece\u5176\u73af\u5883\u4e2d\u7ee7\u627f\u6837\u5f0f\u5c5e\u6027\u7684\u503c\u3002\u9ed1\u8272\u586b\u5145\u548c\u65e0\u63cf\u8fb9\u662f\u521d\u59cb\u73af\u5883\u3002\uff09\u8fd9\u91cc\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u6837\u5f0f\u5c5e\u6027\uff1a</p> <ul> <li><code>fill</code> \u2014 \u6307\u5b9a\u5982\u4f55\u586b\u5145\u5f62\u72b6\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u201cnone\u201d\uff0c\u8868\u793a\u4e0d\u586b\u5145\u5f62\u72b6\u3002\u5b83\u53ef\u4ee5\u662f\u989c\u8272\uff0c\u683c\u5f0f\u4e0e HTML \u753b\u5e03 API \u4e2d\u4f7f\u7528\u7684 CSS \u989c\u8272\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u662f\u5e38\u89c1\u7684\u989c\u8272\u540d\u79f0\u5982\u201cblack\u201d\u6216\u201cred\u201d\uff0c\u6216\u8005\u662f RGB \u989c\u8272\u5982\u201crgb(255,200,180)\u201d \u3002\u8fd8\u6709\u6e10\u53d8\u548c\u56fe\u6848\u586b\u5145\uff0c\u4e0d\u8fc7\u6211\u8fd9\u91cc\u4e0d\u4f1a\u8ba8\u8bba\u5b83\u4eec\u3002</li> <li><code>stroke</code> \u2014 \u6307\u5b9a\u5982\u4f55\u63cf\u8fb9\u5f62\u72b6\uff0c\u53ef\u53d6\u4e0e\u201cfill\u201d\u76f8\u540c\u7684\u503c\u3002</li> <li><code>stroke-opacity</code> \u548c <code>fill-opacity</code> \u2014 \u662f\u4ecb\u4e8e 0.0 \u548c 1.0 \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u6307\u5b9a\u63cf\u8fb9\u548c\u586b\u5145\u7684\u4e0d\u900f\u660e\u5ea6\u3002\u5c0f\u4e8e 1.0 \u7684\u503c\u4f1a\u4ea7\u751f\u534a\u900f\u660e\u7684\u63cf\u8fb9\u6216\u586b\u5145\u3002\u9ed8\u8ba4\u503c\u4e3a 1.0\uff0c\u8868\u793a\u5b8c\u5168\u4e0d\u900f\u660e\u3002</li> <li><code>stroke-width</code> \u2014 \u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7528\u4e8e\u8bbe\u7f6e\u63cf\u8fb9\u7684\u7ebf\u5bbd\u3002\u8bf7\u6ce8\u610f\uff0c\u7ebf\u5bbd\u53d7\u5230\u53d8\u6362\u7684\u5f71\u54cd\u3002\u9ed8\u8ba4\u503c\u662f\u201c1\u201d\uff0c\u5982\u679c\u5750\u6807\u7cfb\u4f7f\u7528\u50cf\u7d20\u4f5c\u4e3a\u5355\u4f4d\uff0c\u5219\u8fd9\u4e2a\u503c\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u4f46\u5728\u81ea\u5b9a\u4e49\u5750\u6807\u7cfb\u4e2d\u901a\u5e38\u592a\u5bbd\u4e86\u3002</li> <li><code>stroke-linecap</code> \u2014 \u786e\u5b9a\u63cf\u8fb9\u7684\u7aef\u70b9\u5916\u89c2\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u201csquare\u201d\u3001\u201cround\u201d\u6216\u201cbutt\u201d\u3002\u9ed8\u8ba4\u503c\u662f\u201cbutt\u201d\u3002\uff08\u6709\u5173\u7ebf\u7aef\u70b9\u548c\u8fde\u63a5\u5904\u7684\u8ba8\u8bba\uff0c\u8bf7\u53c2\u89c1 2.2.1 \u5c0f\u8282\u3002\uff09</li> <li><code>stroke-linejoin</code> \u2014 \u786e\u5b9a\u63cf\u8fb9\u7684\u4e24\u4e2a\u7ebf\u6bb5\u76f8\u4ea4\u5904\u7684\u5916\u89c2\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u201cmiter\u201d\u3001\u201cround\u201d\u6216\u201cbevel\u201d\u3002\u9ed8\u8ba4\u503c\u662f\u201cmiter\u201d\u3002</li> </ul> <p>\u4f5c\u4e3a\u4e00\u4e2a\u4f7f\u7528\u4e86\u8bb8\u591a\u8fd9\u4e9b\u9009\u9879\u7684\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u5176\u89d2\u88ab\u5706\u5316\u800c\u4e0d\u662f\u5c16\u9510\u5316\uff0c\u5927\u5c0f\u4e3a 1\uff0c\u5c45\u4e2d\u4e8e\u539f\u70b9\uff0c\u5e76\u4f7f\u7528\u534a\u900f\u660e\u7684\u7ea2\u8272\u586b\u5145\u548c\u7070\u8272\u63cf\u8fb9\uff1a</p> <pre><code>&lt;rect x=\"-0.5\" y=\"-0.5\" width=\"1\" height=\"1\" \n        rx=\"0.1\" ry=\"0.1\"\n        fill=\"red\" fill-opacity=\"0.5\"\n        stroke=\"gray\" stroke-width=\"0.05\" stroke-linejoin=\"round\"/&gt;\n</code></pre> <p>\u4ee5\u53ca\u4e00\u4e2a\u7b80\u5355\u7684\u77e9\u5f62\u8f6e\u5ed3\uff0c\u6ca1\u6709\u586b\u5145\uff1a</p> <pre><code>&lt;rect width=\"200\" height=\"100\" stroke=\"black\" fill=\"none\"/&gt;\n</code></pre> <p>transform \u5c5e\u6027\u53ef\u4ee5\u7528\u6765\u5bf9\u5f62\u72b6\u5e94\u7528\u4e00\u4e2a\u6216\u4e00\u7cfb\u5217\u53d8\u6362\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u77e9\u5f62\u4e0e\u6c34\u5e73\u7ebf\u503e\u659c 30 \u5ea6\uff1a</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"rotate(30)\"/&gt;\n</code></pre> <p>\u503c\"rotate(30)\"\u8868\u793a\u56f4\u7ed5\u539f\u70b9 (0,0) \u65cb\u8f6c 30 \u5ea6\uff08\u4e0d\u662f\u5f27\u5ea6\uff01\uff09\u3002\u6b63\u65cb\u8f6c\u65b9\u5411\u901a\u5e38\u5c06\u6b63 x \u8f74\u65cb\u8f6c\u5230\u6b63 y \u8f74\u7684\u65b9\u5411\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e3a rotate \u6dfb\u52a0\u53c2\u6570\u6765\u6307\u5b9a\u4e0d\u540c\u7684\u65cb\u8f6c\u4e2d\u5fc3\u3002\u4f8b\u5982\uff0c\u8981\u56f4\u7ed5\u76f8\u540c\u7684\u77e9\u5f62\u4e2d\u5fc3\u65cb\u8f6c\uff1a</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"rotate(30,50,25)\"/&gt;\n</code></pre> <p>\u5e73\u79fb\u548c\u7f29\u653e\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u60a8\u53ef\u80fd\u671f\u671b\u7684\u4e00\u6837\uff0c\u4f7f\u7528\u5f62\u5f0f\u4e3a \"translate(dx,dy)\" \u548c \"scale(sx,sy)\" \u7684 transform \u503c\u3002\u8fd8\u6709\u526a\u5207\u53d8\u6362\uff0c\u4f46\u5b83\u4eec\u7684\u540d\u79f0\u4e3a skewX \u548c skewY\uff0c\u53c2\u6570\u662f\u503e\u659c\u89d2\u800c\u4e0d\u662f\u526a\u5207\u91cf\u3002\u4f8b\u5982\uff0ctransform \"skewX(45)\" \u5c06 y \u8f74\u503e\u659c 45 \u5ea6\uff0c\u7b49\u4ef7\u4e8e x \u65b9\u5411\u7684\u526a\u5207\uff0c\u526a\u5207\u56e0\u5b50\u4e3a 1\u3002\uff08\u5c06 y \u8f74\u503e\u659c\u7684\u51fd\u6570\u79f0\u4e3a skewX\uff0c\u56e0\u4e3a\u5b83\u4fee\u6539\u6216\u503e\u659c\u4e86\u70b9\u7684 x \u5750\u6807\uff0c\u800c\u4fdd\u6301\u5b83\u4eec\u7684 y \u5750\u6807\u4e0d\u53d8\u3002\uff09\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 skewX \u5c06\u4e00\u4e2a\u77e9\u5f62\u503e\u659c\uff0c\u5e76\u5c06\u5176\u53d8\u6210\u5e73\u884c\u56db\u8fb9\u5f62\uff1a</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"skewX(-30)\"/&gt;\n</code></pre> <p>\u6211\u4f7f\u7528\u4e86 -30 \u5ea6\u7684\u89d2\u5ea6\uff0c\u4ee5\u4fbf\u5728\u5e38\u89c4\u50cf\u7d20\u5750\u6807\u7cfb\u7edf\u4e2d\u4f7f\u77e9\u5f62\u5411\u53f3\u503e\u659c\u3002</p> <p>transform \u5c5e\u6027\u7684\u503c\u53ef\u4ee5\u662f\u4e00\u7cfb\u5217\u7528\u7a7a\u683c\u6216\u9017\u53f7\u5206\u9694\u7684\u53d8\u6362\u3002\u4e0e\u901a\u5e38\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u8fd9\u4e9b\u53d8\u6362\u5230\u5bf9\u8c61\u4e0a\uff0c\u4e0e\u5b83\u4eec\u88ab\u5217\u51fa\u7684\u987a\u5e8f\u76f8\u53cd\u3002\u6240\u4ee5\uff0c</p> <pre><code>&lt;rect width=\"100\" height=\"50\" \n        transform=\"translate(0,50) rotate(45) skewX(-30)\"/&gt;\n</code></pre> <p>\u9996\u5148\u5c06\u77e9\u5f62\u503e\u659c\u6210\u5e73\u884c\u56db\u8fb9\u5f62\uff0c\u7136\u540e\u56f4\u7ed5\u539f\u70b9\u65cb\u8f6c\u5e73\u884c\u56db\u8fb9\u5f62 45 \u5ea6\uff0c\u6700\u540e\u6cbf y \u65b9\u5411\u5e73\u79fb 50 \u4e2a\u5355\u4f4d\u3002</p> <p>\u9664\u4e86\u77e9\u5f62\u5916\uff0cSVG \u8fd8\u6709\u7ebf\u6761\u3001\u5706\u3001\u692d\u5706\u548c\u6587\u672c\u4f5c\u4e3a\u57fa\u672c\u5f62\u72b6\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u8be6\u7ec6\u4fe1\u606f\u3002\u4e00\u4e2a <code>&lt;line&gt;</code> \u5143\u7d20\u8868\u793a\u4e00\u6761\u7ebf\u6bb5\uff0c\u5177\u6709\u51e0\u4f55\u5c5e\u6027 x1\u3001y1\u3001x2 \u548c y2 \u6765\u6307\u5b9a\u7ebf\u6bb5\u7aef\u70b9\u7684\u5750\u6807\u3002\u8fd9\u56db\u4e2a\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u4e3a\u96f6\uff0c\u8fd9\u6837\u66f4\u5bb9\u6613\u6307\u5b9a\u6c34\u5e73\u548c\u5782\u76f4\u7ebf\u3002\u4f8b\u5982\uff0c</p> <pre><code>&lt;line x1=\"100\" x2=\"300\" stroke=\"black\"/&gt;\n</code></pre> <p>\u5982\u679c\u6ca1\u6709 stroke \u5c5e\u6027\uff0c\u4f60\u5c31\u770b\u4e0d\u5230\u8fd9\u6761\u7ebf\uff0c\u56e0\u4e3a stoke \u7684\u9ed8\u8ba4\u503c\u662f\u201cnone\u201d\u3002</p> <p>\u5bf9\u4e8e <code>&lt;circle&gt;</code> \u5143\u7d20\uff0c\u51e0\u4f55\u5c5e\u6027\u662f cx\u3001cy \u548c r\uff0c\u7ed9\u51fa\u5706\u7684\u4e2d\u5fc3\u5750\u6807\u548c\u534a\u5f84\u3002\u4e2d\u5fc3\u5750\u6807\u7684\u9ed8\u8ba4\u503c\u4e3a\u96f6\u3002\u5bf9\u4e8e <code>&lt;ellipse&gt;</code> \u5143\u7d20\uff0c\u5c5e\u6027\u662f cx\u3001cy\u3001rx \u548c ry\uff0c\u5176\u4e2d rx \u548c ry \u7ed9\u51fa\u692d\u5706\u5728 x \u548c y \u65b9\u5411\u7684\u534a\u5f84\u3002</p> <p>\u4e00\u4e2a <code>&lt;text&gt;</code> \u5143\u7d20\u7565\u6709\u4e0d\u540c\u3002\u5b83\u6709\u5c5e\u6027 x \u548c y\uff0c\u9ed8\u8ba4\u503c\u4e3a\u96f6\uff0c\u7528\u4e8e\u6307\u5b9a\u6587\u672c\u7684\u57fa\u70b9\u4f4d\u7f6e\u3002\u7136\u800c\uff0c\u6587\u672c\u672c\u8eab\u662f\u4f5c\u4e3a\u5143\u7d20\u7684\u5185\u5bb9\u800c\u4e0d\u662f\u5c5e\u6027\u7ed9\u51fa\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8be5\u5143\u7d20\u5206\u4e3a\u5f00\u59cb\u6807\u8bb0\u548c\u7ed3\u675f\u6807\u8bb0\uff0c\u6587\u672c\u51fa\u73b0\u5728\u5f00\u59cb\u548c\u7ed3\u675f\u6807\u8bb0\u4e4b\u95f4\u3002\u4f8b\u5982\uff0c</p> <pre><code>&lt;text x=\"10\" y=\"30\"&gt;\u8fd9\u6bb5\u6587\u672c\u5c06\u51fa\u73b0\u5728\u56fe\u50cf\u4e2d &lt;/text&gt;\n</code></pre> <p>\u901a\u5e38\u7684\u63cf\u8fb9\u548c\u586b\u5145\u5c5e\u6027\u9002\u7528\u4e8e\u6587\u672c\uff0c\u4f46\u6587\u672c\u6709\u989d\u5916\u7684\u6837\u5f0f\u5c5e\u6027\u3002font-family \u5c5e\u6027\u6307\u5b9a\u5b57\u4f53\u672c\u8eab\u3002\u5b83\u7684\u503c\u53ef\u4ee5\u662f\u4e00\u79cd\u901a\u7528\u5b57\u4f53\u540d\u79f0 \"serif\"\u3001\"sans-serif\"\u3001\"monospace\"\uff0c\u6216\u7cfb\u7edf\u4e2d\u53ef\u7528\u7684\u7279\u5b9a\u5b57\u4f53\u540d\u79f0\u3002font-size \u53ef\u4ee5\u662f\u4e00\u4e2a\u7ed9\u51fa\u5b57\u7b26\u5728\u5750\u6807\u7cfb\u4e2d\uff08\u8fd1\u4f3c\uff09\u9ad8\u5ea6\u7684\u6570\u5b57\u3002\uff08\u5b57\u4f53\u5927\u5c0f\u53d7\u5750\u6807\u548c\u5efa\u6a21\u53d8\u6362\u7684\u5f71\u54cd\uff0c\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6\u957f\u5ea6\u4e00\u6837\u3002\uff09\u901a\u8fc7\u5c06 font-weight \u8bbe\u7f6e\u4e3a \"bold\" \u548c font-style \u8bbe\u7f6e\u4e3a \"italic\"\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u7c97\u4f53\u548c\u659c\u4f53\u6587\u672c\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528\u4e86\u6240\u6709\u8fd9\u4e9b\u9009\u9879\uff0c\u5e76\u65bd\u52a0\u4e86\u4e00\u4e9b\u989d\u5916\u6837\u5f0f\u548c\u53d8\u6362\u7684\u793a\u4f8b\uff1a</p> <pre><code>&lt;text x=\"10\" y=\"30\" \n    font-family=\"sans-serif\" font-size=\"50\" \n    font-style=\"italic\" font-weight=\"bold\"\n    stroke=\"black\" stroke-width=\"1\" fill=\"rgb(255,200,0)\"\n    transform=\"rotate(20)\"&gt;Hello World&lt;/text&gt;\n</code></pre> <p>In SVG, a basic shape is specified by an element in which the tag name gives the shape, and attributes give the properties of the shape. There are attributes to specify the geometry, such as the endpoints of a line or the radius of a circle. Other attributes specify style properties, such as fill color and line width. (The style properties are what I call attributes elsewhere in this book; in this section, I am using the term \"attribute\" in its XML sense.) And there is a transform attribute that can be used to apply a geometric transform to the shape.</p> <p>For a detailed example, consider the rect element, which specifies a rectangle. The geometry of the rectangle is given by attributes named x, y, width and height in the usual way. The default value for x and y is zero; that is, they are optional, and leaving them out is the same as setting their value to zero. The width and the height are required attributes. Their values must be non-negative. For example, the element</p> <pre><code>&lt;rect width=\"3\" height=\"2\"/&gt;\n</code></pre> <p>specifies a rectangle with corner at (0,0), width 3, and height 2, while</p> <pre><code>&lt;rect x=\"100\" y=\"200\" height=\"480\" width=\"640\"/&gt;\n</code></pre> <p>gives a rectangle with corner at (100,200), width 640, and height 480. (Note, by the way, that the attributes in an XML element can be given in any order.) The rect element also has optional attributes rx and ry that can be used to make \"roundRects,\" with their corners replaced by elliptical arcs. The values of rx and ry give the horizontal and vertical radii of the elliptical arcs.</p> <p>Style attributes can be added to say how the shape should be stroked and filled. The default is to use a black fill and no stroke. (More precisely, as we will see later, the default is for a shape to inherit the values of style attributes from its environment. Black fill and no stroke is the initial environment.) Here are some common style attributes:</p> <ul> <li><code>fill</code> \u2014 specifies how to fill the shape. The value can be \"none\" to indicate that the shape is not filled. It can be a color, in the same format as the CSS colors that are used in the HTML canvas API. For example, it can be a common color name such as \"black\" or \"red\", or an RGB color such as \"rgb(255,200,180)\". There are also gradient and pattern fills, though I will not discuss them here.</li> <li><code>stroke</code> \u2014 specifies how to stroke the shape, with the same possible values as \"fill\". stroke-opacity and fill-opacity \u2014 are numbers between 0.0 and 1.0 that specify the opacity of the stroke and fill. Values less than 1.0 give a translucent stroke or fill. The default value, 1.0, means fully opaque.</li> <li><code>stroke-width</code> \u2014 is a number that sets the line width to use for the stroke. Note that the line width is subject to transforms. The default value is \"1\", which is fine if the coordinate system is using pixels as the unit of measure, but often too wide in custom coordinate systems.</li> <li><code>stroke-linecap</code> \u2014 determines the appearance of the endpoints of a stroke. The value can be \"square\", \"round\", or \"butt\". The default is \"butt\". (See Subsection 2.2.1 for a discussion of line caps and joins.)</li> <li><code>stroke-linejoin</code> \u2014 determines the appearance of points where two segments of a stroke meet. The values can be \"miter\", \"round\", or \"bevel\". The default is \"miter\".</li> </ul> <p>As an example that uses many of these options, let's make a square that is rounded rather than pointed at the corners, with size 1, centered at the origin, and using a translucent red fill and a gray stroke:</p> <pre><code>&lt;rect x=\"-0.5\" y=\"-0.5\" width=\"1\" height=\"1\" \n        rx=\"0.1\" ry=\"0.1\"\n        fill=\"red\" fill-opacity=\"0.5\"\n        stroke=\"gray\" stroke-width=\"0.05\" stroke-linejoin=\"round\"/&gt;\n</code></pre> <p>and a simple outline of a rectangle with no fill:</p> <pre><code>&lt;rect width=\"200\" height=\"100\" stroke=\"black\" fill=\"none\"/&gt;\n</code></pre> <p>The transform attribute can be used to apply a transform or a series of transforms to a shape. As an example, we can make a rectangle tilted 30 degrees from the horizontal:</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"rotate(30)\"/&gt;\n</code></pre> <p>The value \"rotate(30)\" represents a rotation of 30 degrees (not radians!) about the origin, (0,0). The positive direction of rotation, as usual, rotates the positive x-axis in the direction of the positive y-axis. You can specify a different center of rotation by adding arguments to rotate. For example, to rotate the same rectangle about its center</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"rotate(30,50,25)\"/&gt;\n</code></pre> <p>Translation and scaling work as you probably expect, with transform values of the form \"translate(dx,dy)\" and \"scale(sx,sy)\". There are also shear transforms, but they go by the names skewX and skewY, and the argument is a skew angle rather than a shear amount. For example, the transform \"skewX(45)\" tilts the y-axis by 45 degrees and is equivalent to an x-shear with shear factor 1. (The function that tilts the y-axis is called skewX because it modifies, or skews, the x-coordinates of points while leaving their y-coordinates unchanged.) For example, we can use skewX to tilt a rectangle and make it into a parallelogram:</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"skewX(-30)\"/&gt;\n</code></pre> <p>I used an angle of -30 degrees to make the rectangle tilt to the right in the usual pixel coordinate system.</p> <p>The value of the transform attribute can be a list of transforms, separated by spaces or commas. The transforms are applied to the object, as usual, in the opposite of the order in which they are listed. So,</p> <pre><code>&lt;rect width=\"100\" height=\"50\" \n        transform=\"translate(0,50) rotate(45) skewX(-30)\"/&gt;\n</code></pre> <p>would first skew the rectangle into a parallelogram, then rotate the parallelogram by 45 degrees about the origin, then translate it by 50 units in the y-direction.</p> <p>In addition to rectangles, SVG has lines, circles, ellipses, and text as basic shapes. Here are some details. A <code>&lt;line&gt;</code> element represents a line segement and has geometric attributes x1, y1, x2, and y2 to specify the coordinates of the endpoints of the line segment. These four attributes have zero as default value, which makes it easier to specify horizontal and vertical lines. For example,</p> <pre><code>&lt;line x1=\"100\" x2=\"300\" stroke=\"black\"/&gt;\n</code></pre> <p>Without the stroke attribute, you wouldn't see the line, since the default value for stoke is \"none\".</p> <p>For a <code>&lt;circle&gt;</code> element, the geometric attributes are cx, cy, and r giving the coordinates of the center of the circle and the radius. The center coordinates have default values equal to zero. For an <code>&lt;ellipse&gt;</code> element, the attributes are cx, cy, rx, and ry, where rx and ry give the radii of the ellipse in the x- and y-directions.</p> <p>A <code>&lt;text&gt;</code> element is a little different. It has attributes x and y, with default values zero, to specify the location of the basepoint of the text. However, the text itself is given as the content of the element rather than as an attribute. That is, the element is divided into a start tag and an end tag, and the text that will appear in the drawing comes between the start and end tags. For example,</p> <pre><code>&lt;text x=\"10\" y=\"30\"&gt;This text will appear in the image &lt;/text&gt;\n</code></pre> <p>The usual stroke and fill attributes apply to text, but text has additional style attributes. The font-family attribute specifies the font itself. Its value can be one of the generic font names \"serif\", \"sans-serif\", \"monospace\", or the name of a specific font that is available on the system. The font-size can be a number giving the (approximate) height of the characters in the coordinate system. (Font size is subject to coordinate and modeling transforms like any other length.) You can get bold and italic text by setting font-weight equal to \"bold\" and font-style equal to \"italic\". Here is an example that uses all of these options, and applies some additional styles and a transform for good measure:</p> <pre><code>&lt;text x=\"10\" y=\"30\" \n    font-family=\"sans-serif\" font-size=\"50\" \n    font-style=\"italic\" font-weight=\"bold\"\n    stroke=\"black\" stroke-width=\"1\" fill=\"rgb(255,200,0)\"\n    transform=\"rotate(20)\"&gt;Hello World&lt;/text&gt;\n</code></pre>"},{"location":"cn/c2/s7/#273-polygons-and-paths","title":"2.7.3  Polygons and Paths","text":"<p>Polygons and Paths</p> \u4e2d\u6587\u82f1\u6587 <p>SVG \u5177\u6709\u4e00\u4e9b\u5f88\u597d\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u5236\u4f5c\u66f4\u590d\u6742\u7684\u5f62\u72b6\u3002<code>&lt;polygon&gt;</code> \u5143\u7d20\u4f7f\u5f97\u4ece\u4e00\u7cfb\u5217\u5750\u6807\u5bf9\u521b\u5efa\u591a\u8fb9\u5f62\u53d8\u5f97\u5bb9\u6613\u3002\u4f8b\u5982\uff0c</p> <pre><code>&lt;polygon points=\"0,0 100,0 100,75 50,100 0,75\"/&gt;\n</code></pre> <p>\u521b\u5efa\u4e86\u4e00\u4e2a\u4e94\u8fb9\u5f62\uff0c\u9876\u70b9\u5206\u522b\u5728 (0,0)\u3001(100,0)\u3001(100,75)\u3001(50,100) \u548c (0,75) \u5904\u3002points \u5c5e\u6027\u4e2d\u7684\u6bcf\u4e00\u5bf9\u6570\u5b57\u6307\u5b9a\u4e00\u4e2a\u9876\u70b9\u3002\u6570\u5b57\u53ef\u4ee5\u7528\u7a7a\u683c\u6216\u9017\u53f7\u5206\u9694\u3002\u6211\u5728\u8fd9\u91cc\u4f7f\u7528\u4e86\u6df7\u5408\u7684\u7a7a\u683c\u548c\u9017\u53f7\uff0c\u4ee5\u6e05\u695a\u5730\u663e\u793a\u6570\u5b57\u7684\u914d\u5bf9\u3002\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u7ed9\u591a\u8fb9\u5f62\u5143\u7d20\u6dfb\u52a0\u901a\u5e38\u7684\u63cf\u8fb9\u548c\u586b\u5145\u6837\u5f0f\u5c5e\u6027\u3002<code>&lt;polyline&gt;</code> \u7c7b\u4f3c\u4e8e <code>&lt;polygon&gt;</code>\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u5c06\u6700\u540e\u4e00\u4e2a\u7ebf\u6bb5\u4ece\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u8fd4\u56de\u5230\u8d77\u59cb\u9876\u70b9\u7684\u90e8\u5206\u7701\u7565\u4e86\u3002\u8fd9\u79cd\u5dee\u5f02\u53ea\u5728\u63cf\u8fb9\u65f6\u624d\u4f1a\u663e\u793a\u51fa\u6765\uff1b\u586b\u5145\u591a\u8fb9\u5f62\u65f6\uff0c\u4f1a\u5c06\u7f3a\u5931\u7684\u8fb9\u6dfb\u52a0\u8fdb\u53bb\u3002</p> <p><code>&lt;path&gt;</code> \u5143\u7d20\u66f4\u52a0\u6709\u8da3\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9664\u4e86\u6587\u672c\u4e4b\u5916\uff0c\u6240\u6709\u5176\u4ed6\u57fa\u672c\u5f62\u72b6\u90fd\u53ef\u4ee5\u7528\u8def\u5f84\u5143\u7d20\u5236\u4f5c\u3002\u8def\u5f84\u53ef\u4ee5\u7531\u76f4\u7ebf\u6bb5\u3001\u8d1d\u585e\u5c14\u66f2\u7ebf\u548c\u692d\u5706\u5f27\u7ec4\u6210\uff08\u5c3d\u7ba1\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u692d\u5706\u5f27\uff09\u3002\u6307\u5b9a\u8def\u5f84\u7684\u8bed\u6cd5\u975e\u5e38\u7b80\u6d01\uff0c\u5b83\u5177\u6709\u4e00\u4e9b\u6211\u4eec\u4e4b\u524d\u672a\u89c1\u8fc7\u7684\u7279\u6027\u3002\u8def\u5f84\u5143\u7d20\u5177\u6709\u4e00\u4e2a\u540d\u4e3a d \u7684\u5c5e\u6027\uff0c\u5176\u4e2d\u5305\u542b\u8def\u5f84\u7684\u6570\u636e\u3002\u6570\u636e\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u547d\u4ee4\u7ec4\u6210\uff0c\u6bcf\u4e2a\u547d\u4ee4\u7531\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u6bcd\u540e\u8ddf\u547d\u4ee4\u6240\u9700\u7684\u4efb\u4f55\u6570\u636e\u7ec4\u6210\u3002\u4f60\u5df2\u7ecf\u719f\u6089\u7684 moveTo\u3001lineTo\u3001cubic Bezier \u548c quadratic Bezier \u547d\u4ee4\u7531\u5b57\u6bcd M\u3001L\u3001C \u548c Q \u7f16\u7801\u3002\u5173\u95ed\u8def\u5f84\u6bb5\u7684\u547d\u4ee4\u662f Z\uff0c\u5b83\u4e0d\u9700\u8981\u6570\u636e\u3002\u4f8b\u5982\uff0c\u8def\u5f84\u6570\u636e \"M 10 20 L 100 200\" \u5c06\u7ed8\u5236\u4e00\u6761\u7ebf\u6bb5\uff0c\u4ece\u70b9 (10,20) \u5230\u70b9 (100,200)\u3002\u4f60\u53ef\u4ee5\u5c06\u51e0\u4e2a\u8fde\u63a5\u7684\u7ebf\u6bb5\u7ec4\u5408\u6210\u4e00\u4e2a L \u547d\u4ee4\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u7ed9\u51fa\u7684 <code>&lt;polygon&gt;</code> \u793a\u4f8b\u53ef\u4ee5\u4f7f\u7528 <code>&lt;path&gt;</code> \u5143\u7d20\u521b\u5efa\uff1a</p> <pre><code>&lt;path d=\"M 0,0 L 100,0 100,75 50,100 0,75 Z\"/&gt;\n</code></pre> <p>\u6570\u636e\u672b\u5c3e\u7684 Z \u5173\u95ed\u4e86\u8def\u5f84\uff0c\u901a\u8fc7\u6dfb\u52a0\u6700\u540e\u4e00\u6761\u8fb9\uff0c\u5f62\u6210\u591a\u8fb9\u5f62\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u5728\u6570\u636e\u4e2d\u4f7f\u7528\u9017\u53f7\u6216\u7a7a\u683c\u3002\uff09</p> <p>C \u547d\u4ee4\u4f7f\u7528\u516d\u4e2a\u6570\u5b57\u4f5c\u4e3a\u6570\u636e\uff0c\u6765\u6307\u5b9a\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u7684\u4e24\u4e2a\u63a7\u5236\u70b9\u548c\u6700\u7ec8\u7aef\u70b9\u3002\u4f60\u4e5f\u53ef\u4ee5\u7ed9\u51fa\u591a\u4e2a\u516d\u4e2a\u503c\u6765\u83b7\u5f97\u4e00\u7cfb\u5217\u8fde\u63a5\u7684\u66f2\u7ebf\u6bb5\u3002\u7c7b\u4f3c\u5730\uff0cQ \u547d\u4ee4\u4f7f\u7528\u56db\u4e2a\u6570\u636e\u503c\u6765\u6307\u5b9a\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u7684\u63a7\u5236\u70b9\u548c\u6700\u7ec8\u7aef\u70b9\u3002\u524d\u9762\u5728\u672c\u8282\u56fe\u7247\u4e2d\u5c55\u793a\u7684\u5927\u3001\u5f2f\u66f2\u3001\u9ec4\u8272\u5f62\u72b6\u662f\u901a\u8fc7\u4e24\u4e2a\u7ebf\u6bb5\u548c\u4e24\u4e2a\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u521b\u5efa\u7684\u8def\u5f84\uff1a</p> <pre><code>&lt;path \nd=\"M 20,70 C 150,70 250,350 380,350 L 380,380 C 250,380 150,100 20,100 Z\"\nfill=\"yellow\" stroke-width=\"2\" stroke=\"black\"/&gt;\n</code></pre> <p>SVG \u8def\u5f84\u901a\u8fc7\u5b9a\u4e49\u8def\u5f84\u547d\u4ee4\u7684 \"\u76f8\u5bf9\" \u7248\u672c\u6765\u589e\u52a0\u4e86\u7075\u6d3b\u6027\uff0c\u5176\u4e2d\u547d\u4ee4\u7684\u6570\u636e\u76f8\u5bf9\u4e8e\u5f53\u524d\u4f4d\u7f6e\u7ed9\u51fa\u3002\u4f8b\u5982\uff0c\u76f8\u5bf9\u79fb\u52a8\u547d\u4ee4\u4e0d\u662f\u544a\u8bc9\u8981\u79fb\u52a8\u5230\u54ea\u91cc\uff0c\u800c\u662f\u544a\u8bc9\u4ece\u5f53\u524d\u4f4d\u7f6e\u79fb\u52a8\u591a\u8fdc\u3002\u8def\u5f84\u547d\u4ee4\u7684\u76f8\u5bf9\u7248\u672c\u7684\u540d\u79f0\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u800c\u4e0d\u662f\u5927\u5199\u5b57\u6bcd\u3002\"M 10,20\" \u610f\u5473\u7740\u79fb\u52a8\u5230\u5750\u6807 (10,20) \u7684\u70b9\uff0c\u800c \"m 10,20\" \u610f\u5473\u7740\u4ece\u5f53\u524d\u4f4d\u7f6e\u6c34\u5e73\u79fb\u52a8 10 \u4e2a\u5355\u4f4d\uff0c\u5782\u76f4\u79fb\u52a8 20 \u4e2a\u5355\u4f4d\u3002\u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f (x,y)\uff0c\u5219\u547d\u4ee4 \"l 3,5\"\uff08\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5c0f\u5199\u7684 L\uff09\u4f1a\u4ece (x,y) \u7ed8\u5236\u4e00\u6761\u7ebf\u5230 (x+3,y+5)\u3002</p> <p>SVG has some nice features for making more complex shapes. The <code>&lt;polygon&gt;</code> element makes it easy to create a polygon from a list of coordinate pairs. For example,</p> <pre><code>&lt;polygon points=\"0,0 100,0 100,75 50,100 0,75\"/&gt;\n</code></pre> <p>creates a five-sided polygon with vertices at (0,0), (100,0), (100,75), (50,100), and (0,75). Every pair of numbers in the points attribute specifies a vertex. The numbers can be separated by either spaces or commas. I've used a mixture of spaces and commas here to make it clear how the numbers pair up. Of course, you can add the usual style attributes for stroke and fill to the polygon element. A <code>&lt;polyline&gt;</code> is similar to a <code>&lt;polygon&gt;</code>, except that it leaves out the last line from the final vertex back to the starting vertex. The difference only shows up when a polyline is stroked; a polyline is filled as if the missing side were added.</p> <p>The <code>&lt;path&gt;</code> element is much more interesting. In fact, all of the other basic shapes, except text, could be made using path elements. A path can consist of line segments, Bezier curves, and elliptical arcs (although I won't discuss elliptical arcs here). The syntax for specifying a path is very succinct, and it has some features that we have not seen before. A path element has an attribute named d that contains the data for the path. The data consists of one or more commands, where each command consists of a single letter followed by any data necessary for the command. The moveTo, lineTo, cubic Bezier, and quadratic Bezier commands that you are already familiar with are coded by the letters M, L, C, and Q. The command for closing a path segment is Z, and it requires no data. For example the path data \"M 10 20 L 100 200\" would draw a line segment from the point (10,20) to the point (100,200). You can combine several connected line segments into one L command. For example, the <code>&lt;polygon&gt;</code> example given above could be created using the <code>&lt;path&gt;</code> element</p> <pre><code>&lt;path d=\"M 0,0 L 100,0 100,75 50,100 0,75 Z\"/&gt;\n</code></pre> <p>The Z at the end of the data closes the path by adding the final side to the polygon. (Note that, as usual, you can use either commas or spaces in the data.)</p> <p>The C command takes six numbers as data, to specify the two control points and the final endpoint of the cubic Bezier curve segment. You can also give a multiple of six values to get a connected sequence of curve segements. Similarly, the Q command uses four data values to specify the control point and final endpoint of the quadratic Bezier curve segment. The large, curvy, yellow shape shown in the picture earlier in this section was created as a path with two line segments and two Bezier curve segments:</p> <pre><code>&lt;path \nd=\"M 20,70 C 150,70 250,350 380,350 L 380,380 C 250,380 150,100 20,100 Z\"\nfill=\"yellow\" stroke-width=\"2\" stroke=\"black\"/&gt;\n</code></pre> <p>SVG paths add flexibility by defining \"relative\" versions of the path commands, where the data for the command is given relative to the current position. A relative move command, for example, instead of telling where to move, tells how far to move from the current position. The names of the relative versions of the path commands are lower case letters instead of upper case. \"M 10,20\" means to move to the point with coordinates (10,20), while \"m 10,20\" means to move 10 units horizontally and 20 units vertically from the current position. Similarly, if the current position is (x,y), then the command \"l 3,5\", where the first character is a lower case L, draws a line from (x,y) to (x+3,y+5).</p>"},{"location":"cn/c2/s7/#274-hierarchical-models","title":"2.7.4  Hierarchical Models","text":"<p>Hierarchical Models</p> \u4e2d\u6587\u82f1\u6587 <p>SVG \u5982\u679c\u53ea\u80fd\u5904\u7406\u5355\u4e2a\u7b80\u5355\u5f62\u72b6\uff0c\u90a3\u5c06\u4e0d\u662f\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u8bed\u8a00\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u573a\u666f\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u8fdb\u884c\u5206\u5c42\u5efa\u6a21\uff0c\u5176\u4e2d\u5bf9\u8c61\u53ef\u4ee5\u7531\u5b50\u5bf9\u8c61\u6784\u5efa\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u53d8\u6362\u5e94\u7528\u4e8e\u6574\u4e2a\u590d\u6742\u5bf9\u8c61\u3002\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u5bf9\u5bf9\u8c61\u8fdb\u884c\u5206\u7ec4\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5355\u5143\u8fdb\u884c\u5904\u7406\u3002\u4e3a\u6b64\uff0cSVG \u4f7f\u7528\u4e86 <code>&lt;g&gt;</code> \u5143\u7d20\u3002<code>&lt;g&gt;</code> \u5143\u7d20\u7684\u5185\u5bb9\u662f\u4e00\u7cfb\u5217\u5f62\u72b6\u5143\u7d20\uff0c\u53ef\u4ee5\u662f\u7b80\u5355\u5f62\u72b6\u6216\u5d4c\u5957\u7684 <code>&lt;g&gt;</code> \u5143\u7d20\u3002</p> <p>\u4f60\u53ef\u4ee5\u4e3a <code>&lt;g&gt;</code> \u5143\u7d20\u6dfb\u52a0\u6837\u5f0f\u548c\u53d8\u6362\u5c5e\u6027\u3002\u5206\u7ec4\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u5c06\u7ec4\u4f5c\u4e3a\u5355\u4e2a\u5bf9\u8c61\u5904\u7406\u3002\u5728 <code>&lt;g&gt;</code> \u4e2d\u7684\u53d8\u6362\u5c5e\u6027\u5c06\u6574\u4e2a\u7ec4\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u53d8\u6362\u3002\u5728 <code>&lt;g&gt;</code> \u5143\u7d20\u4e0a\u7684\u6837\u5f0f\u5c5e\u6027\uff0c\u5982 fill \u6216 font-family\uff0c\u5c06\u4e3a\u8be5\u7ec4\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u66ff\u6362\u5f53\u524d\u7684\u9ed8\u8ba4\u503c\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>&lt;g fill=\"none\" stroke=\"black\" stroke-width=\"2\" transform=\"scale(1,-1)\"&gt;\n    &lt;circle r=\"98\"/&gt;\n    &lt;ellipse cx=\"40\" cy=\"40\" rx=\"20\" ry=\"7\"/&gt;\n    &lt;ellipse cx=\"-40\" cy=\"40\" rx=\"20\" ry=\"7\"/&gt;\n    &lt;line y1=\"20\" y2=\"-10\"/&gt;\n    &lt;path d=\"M -40,-40 C -30,-50 30,-50 40,-40\" stroke-width=\"4\"/&gt;\n&lt;/g&gt;\n</code></pre> <p>\u5d4c\u5957\u7684\u5f62\u72b6\u4f7f\u7528 <code>fill=\"none\" stroke=\"black\" stroke-width=\"2\"</code> \u4f5c\u4e3a\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u3002\u53ef\u4ee5\u901a\u8fc7\u4e3a\u5143\u7d20\u6307\u5b9a\u4e0d\u540c\u7684\u503c\u6765\u8986\u76d6\u9ed8\u8ba4\u503c\uff0c\u5c31\u50cf\u5728\u6b64\u793a\u4f8b\u4e2d\u4e3a <code>&lt;path&gt;</code> \u5143\u7d20\u7684 <code>stroke-width</code> \u5c5e\u6027\u6240\u505a\u7684\u90a3\u6837\u3002\u5728\u7ec4\u4e2d\u8bbe\u7f6e <code>transform=\"scale(1,\u22121)\"</code> \u5c06\u6574\u4e2a\u56fe\u50cf\u5782\u76f4\u7ffb\u8f6c\u3002\u6211\u4e4b\u6240\u4ee5\u8fd9\u6837\u505a\uff0c\u4ec5\u56e0\u4e3a\u6211\u66f4\u559c\u6b22\u4f7f\u7528\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\uff0c\u5176\u4e2d y \u4ece\u4e0b\u5230\u4e0a\u589e\u52a0\uff0c\u800c\u4e0d\u662f\u4ece\u4e0a\u5230\u4e0b\u589e\u52a0\u3002\u4ee5\u4e0b\u662f\u6b64\u7ec4\u751f\u6210\u7684\u7b80\u5355\u7ebf\u63cf\u7ed8\u7684\u8138\u90e8\u56fe\u6848\uff1a</p> <p> </p> <p>\u73b0\u5728\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u5728\u573a\u666f\u4e2d\u5305\u542b\u591a\u4e2a\u5bf9\u8c61\u7684\u591a\u4e2a\u526f\u672c\u3002\u4e0d\u5e94\u8be5\u9700\u8981\u91cd\u590d\u7ed8\u5236\u5bf9\u8c61\u7684\u4ee3\u7801\u3002\u50cf\u53ef\u91cd\u7528\u5b50\u4f8b\u7a0b\u4e00\u6837\u4f1a\u5f88\u597d\u3002\u4e8b\u5b9e\u4e0a\uff0cSVG \u6709\u975e\u5e38\u76f8\u4f3c\u7684\u4e1c\u897f\uff1a\u4f60\u53ef\u4ee5\u5728 <code>&lt;defs&gt;</code> \u5143\u7d20\u5185\u5b9a\u4e49\u53ef\u91cd\u7528\u5bf9\u8c61\u3002\u5728 <code>&lt;defs&gt;</code> \u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e0d\u4f1a\u6dfb\u52a0\u5230\u573a\u666f\u4e2d\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u547d\u4ee4\u5c06\u5bf9\u8c61\u7684\u526f\u672c\u6dfb\u52a0\u5230\u573a\u666f\u4e2d\u3002\u4e3a\u4e86\u4f7f\u5176\u5de5\u4f5c\uff0c\u5bf9\u8c61\u5fc5\u987b\u5177\u6709\u7528\u4e8e\u6807\u8bc6\u5b83\u7684 id \u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u770b\u8d77\u6765\u50cf\u52a0\u53f7\u7684\u5bf9\u8c61\uff1a</p> <pre><code>&lt;defs&gt;\n&lt;g id=\"plus\" stroke=\"black\"&gt;\n    &lt;line x1=\"-20\" y1=\"0\" x2=\"20\" y2=\"0\"/&gt;\n    &lt;line x1=\"0\" y1=\"-20\" x2=\"0\" y2=\"20\"/&gt;\n&lt;/g&gt;\n&lt;/defs&gt;\n</code></pre> <p>\u7136\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>&lt;use&gt;</code> \u5143\u7d20\u5c06\u52a0\u53f7\u5bf9\u8c61\u7684\u526f\u672c\u6dfb\u52a0\u5230\u573a\u666f\u4e2d\u3002\u8bed\u6cd5\u662f\uff1a</p> <pre><code>&lt;use xlink:href=\"#plus\"/&gt;\n</code></pre> <p>xlink:href \u5c5e\u6027\u7684\u503c\u5fc5\u987b\u662f\u5bf9\u8c61\u7684 id\uff0c\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a \"#\" \u5b57\u7b26\u3002\uff08\u4e0d\u8981\u5fd8\u8bb0 #\u3002\u5982\u679c\u4f60\u6f0f\u6389\u5b83\uff0c<code>&lt;use&gt;</code> \u5143\u7d20\u5c06\u88ab\u7b80\u5355\u5730\u5ffd\u7565\u3002\uff09\u4f60\u53ef\u4ee5\u4e3a <code>&lt;use&gt;</code> \u5143\u7d20\u6dfb\u52a0 transform \u5c5e\u6027\uff0c\u4ee5\u5c06\u53d8\u6362\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u526f\u672c\u3002\u4f60\u8fd8\u53ef\u4ee5\u5e94\u7528\u6837\u5f0f\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5c06\u7528\u4f5c\u526f\u672c\u4e2d\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u53d8\u6362\u548c\u63cf\u8fb9\u5bbd\u5ea6\u7ed8\u5236\u51e0\u4e2a\u52a0\u53f7\uff1a</p> <pre><code>&lt;use xlink:href=\"#plus\" transform=\"translate(50,20)\" stroke-width=\"5\"/&gt;\n&lt;use xlink:href=\"#plus\" transform=\"translate(0,30) rotate(45)\"/&gt;\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u65e0\u6cd5\u66f4\u6539\u52a0\u53f7\u7684\u989c\u8272\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u6307\u5b9a\u4e86\u81ea\u5df1\u7684\u63cf\u8fb9\u989c\u8272\u3002</p> <p>\u5728 <code>&lt;defs&gt;</code> \u90e8\u5206\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u7528\u4f5c\u5176\u4ed6\u5bf9\u8c61\u5b9a\u4e49\u4e2d\u7684\u5b50\u5bf9\u8c61\u3002\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u521b\u5efa\u5177\u6709\u591a\u4e2a\u7ea7\u522b\u7684\u5c42\u6b21\u7ed3\u6784\u3002\u4ee5\u4e0b\u662f\u4ece svg/svg-hierarchy.svg \u4e2d\u7684\u793a\u4f8b\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a \"\u8f6e\u5b50\" \u5bf9\u8c61\uff0c\u7136\u540e\u5728 \"\u8f66\" \u5bf9\u8c61\u4e2d\u5c06\u4e24\u4e2a\u8f6e\u5b50\u7684\u526f\u672c\u7528\u4f5c\u5b50\u5bf9\u8c61\u7684\u793a\u4f8b\uff1a</p> <pre><code>&lt;defs&gt;\n\n&lt;!-- Define an object that represents a wheel centered at (0,0) and with\n    radius 1.  The wheel is made out of several filled circles, with\n    thin rectangles for the spokes. --&gt;\n\n&lt;g id=\"wheel\"&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"black\"/&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"0.8\" fill=\"lightGray\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\" \n                                            transform=\"rotate(120)\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\" \n                                            transform=\"rotate(240)\"/&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"0.2\" fill=\"black\"/&gt;\n&lt;/g&gt;\n\n&lt;!-- Define an object that represents a cart made out of two wheels,\n    with two rectangles for the body of the cart. --&gt;\n\n&lt;g id=\"cart\"&gt;\n&lt;use xlink:href=\"#wheel\" transform=\"translate(-1.5,-0.1) scale(0.8,0.8)\"/&gt;\n&lt;use xlink:href=\"#wheel\" transform=\"translate(1.5,-0.1) scale(0.8,0.8)\"/&gt;\n&lt;rect x=\"-3\" y=\"0\" width=\"6\" height=\"2\"/&gt;\n&lt;rect x=\"-2.3\" y=\"1.9\" width=\"2.6\" height=\"1\"/&gt;\n&lt;/g&gt;\n\n&lt;/defs&gt;\n</code></pre> <p>SVG \u6587\u4ef6\u7ee7\u7eed</p> <p>\u5411\u56fe\u50cf\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8f6e\u5b50\u7684\u526f\u672c\u548c\u56db\u4e2a\u8f66\u7684\u526f\u672c\u3002\u8fd9\u56db\u4e2a\u8f66\u5177\u6709\u4e0d\u540c\u7684\u989c\u8272\u548c\u53d8\u6362\u3002\u4ee5\u4e0b\u662f\u56fe\u50cf\uff1a</p> <p> </p> <p>SVG would not be a very interesting language if it could only work with individual simple shapes. For complex scenes, we want to be able to do hierarchical modeling, where objects can be constructed from sub-objects, and a transform can be applied to an entire complex object. We need a way to group objects so that they can be treated as a unit. For that, SVG has the <code>&lt;g&gt;</code> element. The content of a <code>&lt;g&gt;</code> element is a list of shape elements, which can be simple shapes or nested <code>&lt;g&gt;</code> elements.</p> <p>You can add style and transform attributes to a <code>&lt;g&gt;</code> element. The main point of grouping is that a group can be treated as a single object. A transform attribute in a <code>&lt;g&gt;</code> will transform the entire group as a whole. A style attribute, such as fill or font-family, on a <code>&lt;g&gt;</code> element will set a default value for the group, replacing the current default. Here is an example:</p> <pre><code>&lt;g fill=\"none\" stroke=\"black\" stroke-width=\"2\" transform=\"scale(1,-1)\"&gt;\n    &lt;circle r=\"98\"/&gt;\n    &lt;ellipse cx=\"40\" cy=\"40\" rx=\"20\" ry=\"7\"/&gt;\n    &lt;ellipse cx=\"-40\" cy=\"40\" rx=\"20\" ry=\"7\"/&gt;\n    &lt;line y1=\"20\" y2=\"-10\"/&gt;\n    &lt;path d=\"M -40,-40 C -30,-50 30,-50 40,-40\" stroke-width=\"4\"/&gt;\n&lt;/g&gt;\n\nThe nested shapes use fill=\"none\" stroke=\"black\" stroke-width=\"2\" for the default values of the attributes. The default can be overridden by specifying a different value for the element, as is done for the stroke-width of the &lt;path&gt; element in this example. Setting transform=\"scale(1,\u22121)\" for the group flips the entire image vertically. I do this only because I am more comfortable working in a coordinate system in which y increases from bottom-to-top rather than top-to-bottom. Here is the simple line drawing of a face that is produced by this group:\n\n&lt;figure markdown=\"span\"&gt;\n    ![pixel-coordinates](../../en/c2/svg-face.svg)\n&lt;/figure&gt;\n\nNow, suppose that we want to include multiple copies of an object in a scene. It shouldn't be necessary to repeat the code for drawing the object. It would be nice to have something like reusable subroutines. In fact, SVG has something very similar: You can define reusable objects inside a `&lt;defs&gt;` element. An object that is defined inside `&lt;defs&gt;` is not added to the scene, but copies of the object can be added to the scene with a single command. For this to work, the object must have an id attribute to identify it. For example, we could define an object that looks like a plus sign:\n\n```xml\n&lt;defs&gt;\n&lt;g id=\"plus\" stroke=\"black\"&gt;\n    &lt;line x1=\"-20\" y1=\"0\" x2=\"20\" y2=\"0\"/&gt;\n    &lt;line x1=\"0\" y1=\"-20\" x2=\"0\" y2=\"20\"/&gt;\n&lt;/g&gt;\n&lt;/defs&gt;\n</code></pre> <p>A <code>&lt;use&gt;</code> element can then be used to add a copy of the plus sign object to the scene. The syntax is</p> <pre><code>&lt;use xlink:href=\"#plus\"/&gt;\n</code></pre> <p>The value of the xlink:href attribute must be the id of the object, with a \"#\" character added at the beginning. (Don't forget the #. If you leave it out, the <code>&lt;use&gt;</code> element will simply be ignored.) You can add a transform attribute to the <code>&lt;use&gt;</code> element to apply a transformation to the copy of the object. You can also apply style attributes, which will be used as default values for the attributes in the copy. For example, we can draw several plus signs with different transforms and stroke widths:</p> <pre><code>&lt;use xlink:href=\"#plus\" transform=\"translate(50,20)\" stroke-width=\"5\"/&gt;\n&lt;use xlink:href=\"#plus\" transform=\"translate(0,30) rotate(45)\"/&gt;\n</code></pre> <p>Note that we can't change the color of the plus sign, since it already specifies its own stroke color.</p> <p>An object that has been defined in the <code>&lt;defs&gt;</code> section can also be used as a sub-object in other object definitions. This makes it possible to create a hierarchy with multiple levels. Here is an example from svg/svg-hierarchy.svg that defines a \"wheel\" object, then uses two copies of the wheel as sub-objects in a \"cart\" object:</p> <pre><code>&lt;defs&gt;\n\n&lt;!-- Define an object that represents a wheel centered at (0,0) and with\n    radius 1.  The wheel is made out of several filled circles, with\n    thin rectangles for the spokes. --&gt;\n\n&lt;g id=\"wheel\"&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"black\"/&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"0.8\" fill=\"lightGray\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\" \n                                            transform=\"rotate(120)\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\" \n                                            transform=\"rotate(240)\"/&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"0.2\" fill=\"black\"/&gt;\n&lt;/g&gt;\n\n&lt;!-- Define an object that represents a cart made out of two wheels,\n    with two rectangles for the body of the cart. --&gt;\n\n&lt;g id=\"cart\"&gt;\n&lt;use xlink:href=\"#wheel\" transform=\"translate(-1.5,-0.1) scale(0.8,0.8)\"/&gt;\n&lt;use xlink:href=\"#wheel\" transform=\"translate(1.5,-0.1) scale(0.8,0.8)\"/&gt;\n&lt;rect x=\"-3\" y=\"0\" width=\"6\" height=\"2\"/&gt;\n&lt;rect x=\"-2.3\" y=\"1.9\" width=\"2.6\" height=\"1\"/&gt;\n&lt;/g&gt;\n\n&lt;/defs&gt;\n</code></pre> <p>The SVG file goes on to add one copy of the wheel and four copies of the cart to the image. The four carts have different colors and transforms. Here is the image:</p> <p> </p>"},{"location":"cn/c2/s7/#275-animation","title":"2.7.5  Animation","text":"<p>Animation</p> \u4e2d\u6587\u82f1\u6587 <p>SVG \u6709\u8bb8\u591a\u9ad8\u7ea7\u529f\u80fd\uff0c\u6211\u8fd9\u91cc\u4e0d\u4f1a\u8ba8\u8bba\uff0c\u4f46\u6211\u60f3\u63d0\u4e00\u4e0b\u4e00\u4e2a\uff1a\u52a8\u753b\u3002\u51e0\u4e4e\u53ef\u4ee5\u5bf9 SVG \u5bf9\u8c61\u7684\u4efb\u4f55\u5c5e\u6027\u8fdb\u884c\u52a8\u753b\uff0c\u5305\u62ec\u51e0\u4f55\u5f62\u72b6\u3001\u6837\u5f0f\u548c\u53d8\u6362\u3002\u52a8\u753b\u7684\u8bed\u6cd5\u672c\u8eab\u76f8\u5f53\u590d\u6742\uff0c\u6211\u53ea\u4f1a\u505a\u4e00\u4e9b\u4f8b\u5b50\u3002\u4f46\u6211\u4f1a\u544a\u8bc9\u4f60\u8db3\u591f\u7684\u5185\u5bb9\u6765\u4ea7\u751f\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u5c42\u6b21\u52a8\u753b\uff0c\u5c31\u50cf\u5728 Subsection 2.4.1 \u4e2d\u8ba8\u8bba\u548c\u7528\u4f5c\u6f14\u793a\u7684 \"cart-and-windmills\" \u793a\u4f8b\u3002\u8be5\u52a8\u753b\u7684 SVG \u7248\u672c\u53ef\u4ee5\u5728 svg/cart-and-windmills.svg \u4e2d\u627e\u5230\u3002\u8fd9\u662f\u5b83\u7684\u6837\u5b50\uff0c\u5c3d\u7ba1\u67d0\u4e9b\u7f51\u7edc\u6d4f\u89c8\u5668\u53ef\u80fd\u4e0d\u4f1a\u663e\u793a\u52a8\u753b\uff0c\u56e0\u4e3a\u6709\u4e9b\u6d4f\u89c8\u5668\u6ca1\u6709\u6b63\u786e\u6216\u5b8c\u5168\u5b9e\u73b0 SVG \u52a8\u753b\uff1a</p> <p> </p> <p>\u5f62\u72b6\u5143\u7d20\u7684\u8bb8\u591a\u5c5e\u6027\u90fd\u53ef\u4ee5\u901a\u8fc7\u5728\u5f62\u72b6\u5143\u7d20\u7684\u5185\u5bb9\u4e2d\u6dfb\u52a0  \u5143\u7d20\u6765\u8fdb\u884c\u52a8\u753b\u5904\u7406\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u4f7f\u4e00\u4e2a\u77e9\u5f62\u4ece\u5de6\u5411\u53f3\u79fb\u52a8\u56fe\u50cf\uff1a <pre><code>&lt;rect x=\"0\" y=\"210\" width=\"40\" height=\"40\"&gt;\n    &lt;animate attributeName=\"x\"\n    from=\"0\" to=\"430\" dur=\"7s\"\n    repeatCount=\"indefinite\"/&gt;\n&lt;/rect&gt;\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c<code>&lt;animate&gt;</code> \u5d4c\u5957\u5728 <code>&lt;rect&gt;</code> \u5185\u90e8\u3002attributeName \u5c5e\u6027\u544a\u8bc9\u6211\u4eec\u6b63\u5728\u5bf9 <code>&lt;rect&gt;</code> \u7684\u54ea\u4e2a\u5c5e\u6027\u8fdb\u884c\u52a8\u753b\u5904\u7406\uff0c\u8fd9\u91cc\u662f x\u3002from \u548c to \u5c5e\u6027\u8868\u793a x \u5c06\u53d6\u503c\u4ece 0 \u5230 430\u3002dur \u5c5e\u6027\u662f \"\u6301\u7eed\u65f6\u95f4\"\uff0c\u5373\u52a8\u753b\u6301\u7eed\u7684\u65f6\u95f4\uff1b\u503c \"7s\" \u8868\u793a \"7 \u79d2\"\u3002repeatCount=\"indefinite\" \u5c5e\u6027\u8868\u793a\u52a8\u753b\u5b8c\u6210\u540e\uff0c\u5b83\u5c06\u91cd\u65b0\u5f00\u59cb\uff0c\u5e76\u4e14\u5c06\u65e0\u9650\u91cd\u590d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u56fe\u50cf\u663e\u793a\u51fa\u6765\u5c31\u4f1a\u4e00\u76f4\u91cd\u590d\u3002\u5982\u679c\u7701\u7565\u4e86 repeatCount \u5c5e\u6027\uff0c\u5219\u52a8\u753b\u8fd0\u884c\u4e00\u6b21\u540e\uff0c\u77e9\u5f62\u5c06\u8df3\u56de\u5230\u5176\u539f\u59cb\u4f4d\u7f6e\u5e76\u4fdd\u6301\u5728\u90a3\u91cc\u3002\u5982\u679c\u5c06 repeatCount \u66ff\u6362\u4e3a fill=\"freeze\"\uff0c\u5219\u5728\u52a8\u753b\u8fd0\u884c\u540e\uff0c\u77e9\u5f62\u5c06\u88ab\u51bb\u7ed3\u5728\u5176\u6700\u7ec8\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u8df3\u56de\u5230\u8d77\u59cb\u4f4d\u7f6e\u3002\u52a8\u753b\u5728\u56fe\u50cf\u9996\u6b21\u52a0\u8f7d\u65f6\u5f00\u59cb\u3002\u5982\u679c\u5e0c\u671b\u52a8\u753b\u5728\u7a0d\u540e\u7684\u65f6\u95f4\u5f00\u59cb\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a begin \u5c5e\u6027\uff0c\u5176\u503c\u7ed9\u51fa\u52a8\u753b\u5e94\u8be5\u5728\u56fe\u50cf\u52a0\u8f7d\u540e\u7684\u591a\u5c11\u79d2\u540e\u5f00\u59cb\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5e0c\u671b\u77e9\u5f62\u5728\u521d\u59cb\u548c\u6700\u7ec8\u4f4d\u7f6e\u4e4b\u95f4\u6765\u56de\u79fb\u52a8\u600e\u4e48\u529e\uff1f\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u79f0\u4e3a\u5173\u952e\u5e27\u52a8\u753b\u7684\u4e1c\u897f\uff0c\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u3002from \u548c to \u5c5e\u6027\u53ea\u5141\u8bb8\u4f60\u5728\u52a8\u753b\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u6307\u5b9a\u503c\u3002\u5728\u5173\u952e\u5e27\u52a8\u753b\u4e2d\uff0c\u5728\u52a8\u753b\u4e2d\u95f4\u7684\u5176\u4ed6\u65f6\u95f4\u70b9\u6307\u5b9a\u503c\u3002\u5bf9\u4e8e SVG \u4e2d\u7684\u5173\u952e\u5e27\u52a8\u753b\uff0cfrom \u548c to \u5c5e\u6027\u88ab keyTimes \u548c values \u66ff\u6362\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u7684\u79fb\u52a8\u77e9\u5f62\u793a\u4f8b\uff0c\u4fee\u6539\u4e3a\u4f7f\u7528\u5173\u952e\u5e27\uff1a </p> <pre><code>&lt;rect x=\"0\" y=\"210\" width=\"40\" height=\"40\"&gt;\n    &lt;animate attributeName=\"x\"\n    keyTimes=\"0;0.5;1\" values=\"0;430;0\" dur=\"7s\"\n    repeatCount=\"indefinite\"/&gt;\n&lt;/rect&gt;\n</code></pre> <p>keyTimes \u5c5e\u6027\u662f\u4e00\u4e2a\u7531\u5206\u53f7\u5206\u9694\u7684\u6570\u5b57\u5217\u8868\u3002\u8fd9\u4e9b\u6570\u5b57\u5728 0 \u5230 1 \u7684\u8303\u56f4\u5185\uff0c\u5e76\u4e14\u5e94\u6309\u5347\u5e8f\u6392\u5217\u3002\u7b2c\u4e00\u4e2a\u6570\u5b57\u5e94\u4e3a 0\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u5e94\u4e3a 1\u3002\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u52a8\u753b\u671f\u95f4\u7684\u65f6\u95f4\uff0c\u4f5c\u4e3a\u5b8c\u6574\u52a8\u753b\u7684\u4e00\u90e8\u5206\u7684\u5206\u6570\u3002\u4f8b\u5982\uff0c0.5 \u662f\u52a8\u753b\u8fdb\u884c\u5230\u4e00\u534a\u7684\u65f6\u95f4\u70b9\uff0c0.75 \u662f\u52a8\u753b\u8fdb\u884c\u5230\u56db\u5206\u4e4b\u4e09\u7684\u65f6\u95f4\u70b9\u3002values \u5c5e\u6027\u662f\u4e00\u4e2a\u503c\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5173\u952e\u65f6\u95f4\u70b9\u6709\u4e00\u4e2a\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cx \u7684\u503c\u5728\u52a8\u753b\u5f00\u59cb\u65f6\u4e3a 0\uff0c\u5728\u52a8\u753b\u8fdb\u884c\u5230\u4e00\u534a\u65f6\u4e3a 430\uff0c\u7136\u540e\u5728\u52a8\u753b\u7ed3\u675f\u65f6\u518d\u6b21\u4e3a 0\u3002\u5728\u5173\u952e\u65f6\u95f4\u70b9\u4e4b\u95f4\uff0c\u901a\u8fc7\u5bf9\u5173\u952e\u65f6\u95f4\u70b9\u6307\u5b9a\u7684\u503c\u8fdb\u884c\u63d2\u503c\u6765\u83b7\u53d6 x \u7684\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\uff0c\u5728\u52a8\u753b\u7684\u524d\u534a\u90e8\u5206\uff0c\u77e9\u5f62\u4ece\u5de6\u5411\u53f3\u79fb\u52a8\uff0c\u7136\u540e\u5728\u540e\u534a\u90e8\u5206\u4ece\u53f3\u5411\u5de6\u79fb\u52a8\u3002</p> <p>\u53d8\u6362\u4e5f\u53ef\u4ee5\u88ab\u52a8\u753b\u5316\uff0c\u4f46\u662f\u4f60\u9700\u8981\u4f7f\u7528 <code>&lt;animateTransform&gt;</code> \u6807\u7b7e\u800c\u4e0d\u662f <code>&lt;animate&gt;</code>\uff0c\u5e76\u4e14\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a type \u5c5e\u6027\u6765\u6307\u5b9a\u4f60\u6b63\u5728\u52a8\u753b\u5316\u7684\u53d8\u6362\uff0c\u6bd4\u5982 \"rotate\" \u6216 \"translate\"\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u5e94\u7528\u4e8e\u4e00\u4e2a\u7ec4\u7684\u53d8\u6362\u52a8\u753b\uff1a</p> <pre><code>&lt;g transform=\"scale(0,0)\"&gt;\n    &lt;animateTransform attributeName=\"transform\" type=\"scale\"\n        from=\"0,0\" to=\"0.4,0.7\"\n        begin=\"3s\" dur=\"15s\" fill=\"freeze\"/&gt;\n    &lt;rect x=\"-15\" y=\"0\" width=\"30\" height=\"40\" fill=\"rgb(150,100,0)\"/&gt;\n    &lt;polygon points=\"-60,40 60,40 0,200\" fill=\"green\"/&gt;\n&lt;/g&gt;\n</code></pre> <p>\u8be5\u52a8\u753b\u663e\u793a\u4e86\u4e00\u4e2a\u7531\u7eff\u8272\u4e09\u89d2\u5f62\u548c\u68d5\u8272\u77e9\u5f62\u7ec4\u6210\u7684\u4e0d\u65ad\u589e\u957f\u7684 \"\u6811\"\u3002\u5728\u52a8\u753b\u4e2d\uff0c\u53d8\u6362\u4ece scale(0,0) \u5230 scale(0.4,0.7)\u3002\u52a8\u753b\u5728\u56fe\u50cf\u52a0\u8f7d\u540e\u7684 3 \u79d2\u540e\u5f00\u59cb\uff0c\u6301\u7eed 15 \u79d2\u3002\u5728\u52a8\u753b\u7ed3\u675f\u65f6\uff0c\u6811\u4ee5\u6700\u7ec8\u7f29\u653e\u6bd4\u51bb\u7ed3\u3002<code>&lt;g&gt;</code> \u5143\u7d20\u4e0a\u7684 transform \u5c5e\u6027\u6307\u5b9a\u4e86\u76f4\u5230\u52a8\u753b\u5f00\u59cb\u65f6\u751f\u6548\u7684\u7f29\u653e\u3002\uff08\u7f29\u653e\u56e0\u5b50\u4e3a 0 \u4f1a\u5c06\u5bf9\u8c61\u6298\u53e0\u4e3a\u5927\u5c0f\u4e3a\u96f6\uff0c\u4f7f\u5176\u4e0d\u53ef\u89c1\u3002\uff09\u4f60\u53ef\u4ee5\u5728\u793a\u4f8b\u6587\u4ef6 svg/first-svg-animation.svg \u4e2d\u627e\u5230\u8fd9\u4e2a\u793a\u4f8b\uff0c\u4ee5\u53ca\u4e00\u4e2a\u79fb\u52a8\u7684\u77e9\u5f62\u548c\u4e00\u4e2a\u5173\u952e\u5e27\u52a8\u753b\u3002\u4ee5\u4e0b\u662f\u52a8\u753b\u672c\u8eab\u3002\u8981\u67e5\u770b\u4e0d\u65ad\u589e\u957f\u7684\u6811\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u52a0\u8f7d\u6b64\u9875\u9762\u6216\u5728\u5355\u72ec\u7684\u7a97\u53e3\u4e2d\u67e5\u770b\u56fe\u50cf\uff1a</p> <p> </p> <p>\u4f60\u53ef\u4ee5\u5728 SVG \u6587\u4ef6\u7684 <code>&lt;defs&gt;</code> \u90e8\u5206\u521b\u5efa\u52a8\u753b\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u52a8\u753b\u5e94\u7528\u4e8e <code>&lt;use&gt;</code> \u5143\u7d20\u3002\u8fd9\u4f7f\u5f97\u521b\u5efa\u5206\u5c42\u52a8\u753b\u6210\u4e3a\u53ef\u80fd\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a</p> <p> </p> <p>\u8fd9\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u65cb\u8f6c\u7684\u516d\u8fb9\u5f62\uff0c\u6bcf\u4e2a\u516d\u8fb9\u5f62\u9876\u70b9\u90fd\u6709\u4e00\u4e2a\u65cb\u8f6c\u7684\u6b63\u65b9\u5f62\u3002\u516d\u8fb9\u5f62\u662f\u7531\u4e00\u4e2a\u5bf9\u8c61\u7684\u516d\u4e2a\u526f\u672c\u6784\u6210\u7684\uff0c\u6bcf\u4e2a\u526f\u672c\u5e94\u7528\u4e86\u4e0d\u540c\u7684\u65cb\u8f6c\u3002\uff08\u516d\u8fb9\u5f62\u53f3\u4fa7\u7684\u56fe\u50cf\u663e\u793a\u4e86\u57fa\u672c\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c\u3002\uff09\u6b63\u65b9\u5f62\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5e26\u6709\u81ea\u5df1\u65cb\u8f6c\u7684\u52a8\u753b\u5bf9\u8c61\u3002\u5b83\u88ab\u7528\u4f5c\u516d\u8fb9\u5f62\u4e2d\u7684\u4e00\u4e2a\u5b50\u5bf9\u8c61\u3002\u65bd\u52a0\u5728\u516d\u8fb9\u5f62\u4e0a\u7684\u65cb\u8f6c\u4e5f\u9002\u7528\u4e8e\u6b63\u65b9\u5f62\uff0c\u8986\u76d6\u4e86\u5b83\u81ea\u5df1\u5185\u7f6e\u7684\u65cb\u8f6c\u3002\u8fd9\u5c31\u662f\u8fd9\u4e2a\u793a\u4f8b\u662f\u5206\u5c42\u52a8\u753b\u7684\u539f\u56e0\u3002</p> <p>\u73b0\u5728\u56de\u987e\u4e00\u4e0bcart-and-windmills\u7684\u793a\u4f8b\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u80fd\u591f\u770b\u51fa\u5982\u4f55\u505a\u52a8\u753b\u4e86\u3002\u522b\u5fd8\u4e86\u67e5\u770b\u6e90\u4ee3\u7801\uff0c\u5b83\u975e\u5e38\u7b80\u77ed\uff01</p> <p>SVG has a number of advanced features that I won't discuss here, but I do want to mention one: animation. It is possible to animate almost any property of an SVG object, including geometry, style, and transforms. The syntax for animation is itself fairly complex, and I will only do a few examples. But I will tell you enough to produce a fairly complex hierarchical animation like the \"cart-and-windmills\" example that was discussed and used as a demo in Subsection 2.4.1. An SVG version of that animation can be found in svg/cart-and-windmills.svg. Here is what it looks like, although some web browsers might not show the animation, since some browsers do not implement SVG animations correctly or at all:</p> <p> </p> <p>Many attributes of a shape element can be animated by adding an  element to the content of the shape element. Here is an example that makes a rectangle move across the image from left to right: <pre><code>&lt;rect x=\"0\" y=\"210\" wid th=\"40\" height=\"40\"&gt;\n    &lt;animate attributeName=\"x\"\n    from=\"0\" to=\"430\" dur=\"7s\"\n    repeatCount=\"indefinite\"/&gt;\n&lt;/rect&gt;\n</code></pre> <p>Note that the <code>&lt;animate&gt;</code> is nested inside the <code>&lt;rect&gt;</code>. The attributeName attribute tells which attribute of the <code>&lt;rect&gt;</code> is being animated, in this case, x. The from and to attributes say that x will take on values from 0 to 430. The dur attribute is the \"duration\", that is, how long the animation lasts; the value \"7s\" means \"7 seconds.\" The attribute repeatCount=\"indefinite\" means that after the animation completes, it will start over, and it will repeat indefinitely, that is, as long as the image is displayed. If the repeatCount attribute is omitted, then after the animation runs once, the rectangle will jump back to its original position and remain there. If repeatCount is replaced by fill=\"freeze\", then after the animation runs, the rectangle will be frozen in its final position, instead of jumping back to the starting position. The animation begins when the image first loads. If you want the animation to start at a later time, you can add a begin attribute whose value gives the time when the animation should start, as a number of seconds after the image loads.</p> <p>What if we want the rectangle to move back and forth between its initial and final position? For that, we need something called keyframe animation, which is an important idea in its own right. The from and to attributes allow you to specify values only for the beginning and end of the animation. In a keyframe animation, values are specified at additional times in the middle of the animation. For a keyframe animation in SVG, the from and to attributes are replaced by keyTimes and values. Here is our moving rectangle example, modified to use keyframes:</p> <pre><code>&lt;rect x=\"0\" y=\"210\" width=\"40\" height=\"40\"&gt;\n    &lt;animate attributeName=\"x\"\n    keyTimes=\"0;0.5;1\" values=\"0;430;0\" dur=\"7s\"\n    repeatCount=\"indefinite\"/&gt;\n&lt;/rect&gt;\n</code></pre> <p>The keyTimes attribute is a list of numbers, separated by semicolons. The numbers are in the range 0 to 1, and should be in increasing order. The first number should be 0 and the last number should be 1. A number specifies a time during the animation, as a fraction of the complete animation. For example, 0.5 is a point half-way through the animation, and 0.75 is three-quarters of the way. The values attribute is a list of values, with one value for each key time. In this case, the value for x is 0 at the start of the animation, 430 half-way through the animation, and 0 again at the end of the animation. Between the key times, the value for x is obtained by interpolating between the values specified for the key times. The result in this case is that the rectangle moves from left to right during the first half of the animation and then back from right to left in the second half.</p> <p>Transforms can also be animated, but you need to use the <code>&lt;animateTransform&gt;</code> tag instead of <code>&lt;animate&gt;</code>, and you need to add a type attribute to specify which transform you are animating, such as \"rotate\" or \"translate\". Here, for example, is a transform animation applied to a group:</p> <pre><code>&lt;g transform=\"scale(0,0)\"&gt;\n    &lt;animateTransform attributeName=\"transform\" type=\"scale\"\n        from=\"0,0\" to=\"0.4,0.7\"\n        begin=\"3s\" dur=\"15s\" fill=\"freeze\"/&gt;\n    &lt;rect x=\"-15\" y=\"0\" width=\"30\" height=\"40\" fill=\"rgb(150,100,0)\"/&gt;\n    &lt;polygon points=\"-60,40 60,40 0,200\" fill=\"green\"/&gt;\n&lt;/g&gt;\n</code></pre> <p>The animation shows a growing \"tree\" made from a green triangle and a brown rectangle. In the animation, the transform goes from scale(0,0) to scale(0.4,0.7). The animation starts 3 seconds after the image loads and lasts 15 seconds. At the end of the animation, the tree freezes at its final scale. The transform attribute on the <code>&lt;g&gt;</code> element specifies the scale that is in effect until the animation starts. (A scale factor of 0 collapses the object to size zero, so that it is invisible.) You can find this example, along with a moving rectangle and a keyframe animation, in the sample file svg/first-svg-animation.svg. Here is the animation itself. To see the growing trees, you might have to reload this page or view the image in a separate window:</p> <p> </p> <p>You can create animated objects in the <code>&lt;defs&gt;</code> section of an SVG file, and you can apply animation to <code>&lt;use&gt;</code> elements. This makes it possible to create hierarchical animations. Here is a simple example:</p> <p> </p> <p>The example shows a rotating hexagon with a rotating square at each vertex of the hexagon. The hexagon is constructed from six copies of one object, with a different rotation applied to each copy. (A copy of the basic object is shown in the image to the right of the hexagon.) The square is defined as an animated object with its own rotation. It is used as a sub-object in the hexagon. The rotation that is applied to the hexagon applies to the square, on top of its own built-in rotation. That's what makes this an example of hierarchical animation.</p> <p>If you look back at the cart-and-windmills example now, you can probably see how to do the animation. Don't forget to check out the source code, which is surprisingly short!</p>"},{"location":"cn/c3/","title":"OpenGL 1.1: \u51e0\u4f55","text":"<p>OpenGL 1.1: Geometry</p> \u4e2d\u6587\u82f1\u6587 <p>\u73b0\u5728\u662f\u65f6\u5019\u8f6c\u5411\u4e09\u7ef4\u8ba1\u7b97\u673a\u56fe\u5f62\u4e86\uff0c\u5c3d\u7ba1\u6211\u4eec\u771f\u6b63\u6d89\u8db3\u4e09\u7ef4\u7684\u90e8\u5206\u8981\u5230\u672c\u7ae0\u7684\u7b2c2\u8282\u624d\u5f00\u59cb\u3002\u4f60\u4f1a\u53d1\u73b0\uff0c\u8bb8\u591a\u4e8c\u7ef4\u56fe\u5f62\u7684\u6982\u5ff5\u90fd\u53ef\u4ee5\u5ef6\u7eed\u5230\u4e09\u7ef4\uff0c\u4f46\u8fdb\u5165\u7b2c\u4e09\u7ef4\u5ea6\u5e26\u6765\u4e86\u4e00\u4e9b\u65b0\u7684\u7279\u6027\uff0c\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u6765\u9002\u5e94\u3002</p> <p>\u6211\u4eec\u7684\u91cd\u70b9\u5c06\u653e\u5728OpenGL\u4e0a\uff0c\u8fd9\u662f\u4e00\u4e2a\u56fe\u5f62API\uff0c\u4e8e1992\u5e74\u63a8\u51fa\uff0c\u81ea\u90a3\u4ee5\u540e\u7ecf\u5386\u4e86\u8bb8\u591a\u7248\u672c\u548c\u8bb8\u591a\u53d8\u5316\u3002OpenGL\u662f\u4e00\u4e2a\u4f4e\u7ea7\u522b\u7684\u56fe\u5f62API\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u6240\u6db5\u76d6\u7684\u4e8c\u7ef4API\u3002\u5728\u67d0\u4e9b\u65b9\u9762\u751a\u81f3\u66f4\u52a0\u539f\u59cb\uff0c\u4f46\u5f53\u7136\u7531\u4e8e\u652f\u6301\u4e09\u7ef4\uff0c\u5b83\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002OpenGL\u662fWeb\u4e0a\u4e09\u7ef4\u5e94\u7528\u7a0b\u5e8f\u7684\u5f53\u524d\u6807\u51c6WebGL\u7684\u57fa\u7840\uff0c\u5728\u7b2c6\u7ae0\u548c\u7b2c7\u7ae0\u4e2d\u6709\u6240\u4ecb\u7ecd\u3002\u6709\u8bb8\u591a\u7ade\u4e89\u7684\u4f4e\u7ea7\u4e09\u7ef4\u56fe\u5f62\u6846\u67b6\uff0c\u5305\u62ec\u5fae\u8f6f\u7684Direct3D\u3001\u82f9\u679c\u7684Metal\u548cVulkan\uff0c\u540e\u8005\u662f\u7531OpenGL\u7684\u521b\u5efa\u8005\u8bbe\u8ba1\u7684\uff0c\u4f5c\u4e3a\u4e00\u79cd\u66f4\u73b0\u4ee3\u5316\u3001\u9ad8\u6548\u7684\u66ff\u4ee3\u54c1\u3002</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u4e24\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bbaOpenGL 1.1\u3002OpenGL 1.1\u662f\u4e00\u4e2a\u5e9e\u5927\u7684API\uff0c\u6211\u4eec\u53ea\u4f1a\u6db5\u76d6\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u4ecb\u7ecd\u4e09\u7ef4\u56fe\u5f62\u7684\u6982\u5ff5\uff0c\u800c\u4e0d\u662f\u5b8c\u5168\u6db5\u76d6API\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u6db5\u76d6\u7684\u90e8\u5206\u5728\u6700\u73b0\u4ee3\u5316\u7684OpenGL\u7248\u672c\uff0c\u5305\u62ecWebGL\u4e2d\u5df2\u88ab\u5220\u9664\u3002\u7136\u800c\uff0c\u66f4\u73b0\u4ee3\u7684\u56fe\u5f62API\u6709\u4e00\u4e2a\u975e\u5e38\u9661\u5ced\u7684\u521d\u59cb\u5b66\u4e60\u66f2\u7ebf\uff0c\u5bf9\u4e8e\u521d\u6b21\u63a5\u89e6\u4e09\u7ef4\u56fe\u5f62\u7684\u4eba\u6765\u8bf4\uff0c\u5e76\u4e0d\u662f\u6700\u597d\u7684\u8d77\u70b9\u3002\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u652f\u6301\u2014\u2014\u5982\u679c\u4e0d\u662fOpenGL 1.1\uff0c\u90a3\u4e48\u5c31\u662f\u7c7b\u4f3c\u7684\u6846\u67b6\u3002\u7531\u4e8eOpenGL 1.1\u81f3\u5c11\u5728\u6240\u6709\u684c\u9762OpenGL\u5b9e\u73b0\u4e2d\u4ecd\u7136\u53d7\u5230\u652f\u6301\uff0c\u56e0\u6b64\u5b83\u662f\u5b66\u4e60\u4e09\u7ef4\u56fe\u5f62\u7684\u4e00\u4e2a\u5408\u7406\u7684\u8d77\u70b9\u3002</p> <p>\u672c\u7ae0\u96c6\u4e2d\u8ba8\u8bba\u4e09\u7ef4\u56fe\u5f62\u7684\u51e0\u4f55\u65b9\u9762\uff0c\u5982\u5b9a\u4e49\u548c\u53d8\u6362\u5bf9\u8c61\u4ee5\u53ca\u5c06\u4e09\u7ef4\u573a\u666f\u6295\u5f71\u5230\u4e8c\u7ef4\u56fe\u50cf\u4e2d\u3002\u6211\u4eec\u751f\u6210\u7684\u56fe\u50cf\u770b\u8d77\u6765\u4f1a\u975e\u5e38\u4e0d\u771f\u5b9e\u3002\u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u901a\u8fc7\u6a21\u62df\u5149\u7167\u6548\u679c\u548c\u8868\u9762\u6750\u8d28\u5c5e\u6027\u6765\u589e\u52a0\u4e00\u4e9b\u771f\u5b9e\u611f\u3002</p> <p>It is time to move on to computer graphics in three dimensions, although it won't be until Section 2 of this chapter that we really get into 3D. You will find that many concepts from 2D graphics carry over to 3D, but the move into the third dimension brings with it some new features that take a while to get used to.</p> <p>Our focus will be OpenGL, a graphics API that was introduced in 1992 and has gone through many versions and many changes since then. OpenGL is a low-level graphics API, similar to the 2D APIs we have covered. It is even more primitive in some ways, but of course it is complicated by the fact that it supports 3D. OpenGL is the basis for WebGL, the current standard for 3D applications on the Web that is covered in Chapter 6 and Chapter 7. There are many competing frameworks for low-level 3D graphics, including Microsoft's Direct3D, Apple's Metal, and Vulkan, which was designed by the creators of OpenGL as a more modern and efficient replacement.</p> <p>For the next two chapters, the discussion is limited to OpenGL 1.1. OpenGL 1.1 is a large API, and we will only cover a part of it. The goal is to introduce 3D graphics concepts, not to fully cover the API. A significant part of what we cover here has been removed from the most modern versions of OpenGL, including WebGL. However, more modern graphics APIs have a very steep initial learning curve, and they are not really the best starting place for someone who is encountering 3D graphics for the first time. Some additional support is needed\u2014if not OpenGL 1.1 then some similar framework. Since OpenGL 1.1 is still supported, at least by all desktop implementations of OpenGL, it's a reasonable place to start learning about 3D graphics.</p> <p>This chapter concentrates on the geometric aspects of 3D graphics, such as defining and transforming objects and projecting 3D scenes into 2D images. The images that we produce will look very unrealistic. In the next chapter, we will see how to add some realism by simulating the effects of lighting and of the material properties of surfaces.</p>"},{"location":"cn/c3/s1/","title":"3.1 OpenGL 1.1 \u4e2d\u7684\u5f62\u72b6\u548c\u989c\u8272","text":"\u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u4ecb\u7ecd\u4e86OpenGL\u7684\u4e00\u4e9b\u6838\u5fc3\u7279\u6027\u3002\u672c\u8282\u8ba8\u8bba\u7684\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u9650\u4e8e\u4e8c\u7ef4\u3002\u76ee\u524d\uff0c\u4f60\u53ea\u9700\u8981\u77e5\u9053\u5173\u4e8e\u4e09\u7ef4\u7684\u662f\uff0c\u5b83\u5728\u4e8c\u7ef4\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u7b2c\u4e09\u4e2a\u65b9\u5411\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u7b2c\u4e09\u4e2a\u65b9\u5411\u88ab\u79f0\u4e3az\u3002\u5728\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\u4e2d\uff0cx\u548cy\u8f74\u4f4d\u4e8e\u56fe\u50cf\u5e73\u9762\u4e0a\uff0c\u800cz\u8f74\u7684\u6b63\u65b9\u5411\u6307\u5411\u4e0e\u56fe\u50cf\u5782\u76f4\u7684\u65b9\u5411\u3002</p> <p>\u5728OpenGL\u7684\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\u4e2d\uff0c\u56fe\u50cf\u663e\u793a\u4e86\u4e00\u4e2a\u4e09\u7ef4\u7a7a\u95f4\u7684\u533a\u57df\uff0c\u5176\u4e2dx\u3001y\u548cz\u7684\u53d6\u503c\u8303\u56f4\u90fd\u5728-1\u52301\u4e4b\u95f4\u3002\u8981\u663e\u793a\u4e0d\u540c\u7684\u533a\u57df\uff0c\u4f60\u5fc5\u987b\u5e94\u7528\u4e00\u4e2a\u53d8\u6362\u3002\u76ee\u524d\uff0c\u6211\u4eec\u53ea\u4f1a\u4f7f\u7528\u4f4d\u4e8e-1\u548c1\u4e4b\u95f4\u7684\u5750\u6807\u3002</p> <p>\u5173\u4e8e\u7f16\u7a0b\u7684\u4e00\u70b9\u8bf4\u660e\uff1aOpenGL\u53ef\u4ee5\u7528\u8bb8\u591a\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\uff0c\u4f46API\u89c4\u8303\u66f4\u591a\u5730\u5047\u8bbe\u4e86\u8bed\u8a00\u662fC\u3002\uff08\u53c2\u89c1\u7b2cA.2\u8282\u4e2d\u5bf9C\u7684\u7b80\u77ed\u4ecb\u7ecd\u3002\uff09\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0cC\u89c4\u8303\u76f4\u63a5\u8f6c\u6362\u4e3a\u5176\u4ed6\u8bed\u8a00\u3002\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8eC\u8bed\u8a00\u4e2d\u6570\u7ec4\u7684\u7279\u6b8a\u7279\u6027\u3002\u6211\u7684\u793a\u4f8b\u5c06\u9075\u5faaC\u8bed\u6cd5\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u4e0d\u540c\u4e4b\u5904\u3002\u7531\u4e8e\u6211\u9075\u5faa\u7684\u662fC API\uff0c\u6211\u4f1a\u5f15\u7528\u201c\u51fd\u6570\u201d\u800c\u4e0d\u662f\u201c\u5b50\u4f8b\u7a0b\u201d\u6216\u201c\u65b9\u6cd5\u201d\u3002\u7b2c3.6\u8282\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528C\u548cJava\u7f16\u5199OpenGL\u7a0b\u5e8f\u3002\u5728\u8fdb\u884c\u5b9e\u9645\u7f16\u7a0b\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u53c2\u8003\u8be5\u90e8\u5206\u3002\u672c\u4e66\u7684OpenGL 1.1\u5b9e\u65f6\u6f14\u793a\u662f\u4f7f\u7528\u4e00\u4e2aJavaScript\u6a21\u62df\u5668\u7f16\u5199\u7684\uff0c\u8be5\u6a21\u62df\u5668\u5b9e\u73b0\u4e86OpenGL 1.1\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u8be5\u6a21\u62df\u5668\u5728\u5c0f\u82823.6.3\u4e2d\u6709\u6240\u4ecb\u7ecd\u3002</p> <p>This section introduces some of the core features of OpenGL. Much of the discussion in this section is limited to 2D. For now, all you need to know about 3D is that it adds a third direction to the x and y directions that are used in 2D. By convention, the third direction is called z. In the default coordinate system, the x and y axes lie in the plane of the image, and the positive direction of the z-axis points in a direction perpendicular to the image.</p> <p>In the default coordinate system for OpenGL, the image shows a region of 3D space in which x, y, and z all range from minus one to one. To show a different region, you have to apply a transform. For now, we will just use coordinates that lie between -1 and 1.</p> <p>A note about programming: OpenGL can be implemented in many different programming languages, but the API specification more or less assumes that the language is C. (See Section A.2 for a short introduction to C.) For the most part, the C specification translates directly into other languages. The main differences are due to the special characteristics of arrays in the C language. My examples will follow the C syntax, with a few notes about how things can be different in other languages. Since I'm following the C API, I will refer to \"functions\" rather than \"subroutines\" or \"methods.\" Section 3.6 explains in detail how to write OpenGL programs in C and in Java. You will need to consult that section before you can do any actual programming. The live OpenGL 1.1 demos for this book are written using a JavaScript simulator that implements a subset of OpenGL 1.1. That simulator is discussed in Subsection 3.6.3.</p>"},{"location":"cn/c3/s1/#311-opengl\u57fa\u5143","title":"3.1.1  OpenGL\u57fa\u5143","text":"<p>OpenGL Primitives</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL\u53ea\u80fd\u7ed8\u5236\u4e00\u4e9b\u57fa\u672c\u7684\u5f62\u72b6\uff0c\u5305\u62ec\u70b9\u3001\u7ebf\u548c\u4e09\u89d2\u5f62\u3002\u5b83\u6ca1\u6709\u5185\u7f6e\u7684\u66f2\u7ebf\u6216\u66f2\u9762\u652f\u6301\uff1b\u5b83\u4eec\u5fc5\u987b\u7531\u7b80\u5355\u7684\u5f62\u72b6\u8fd1\u4f3c\u3002\u8fd9\u4e9b\u57fa\u672c\u5f62\u72b6\u88ab\u79f0\u4e3a\u539f\u59cb\u56fe\u5143\u3002\u5728OpenGL\u4e2d\uff0c\u539f\u59cb\u56fe\u5143\u7531\u5176\u9876\u70b9\u5b9a\u4e49\u3002\u9876\u70b9\u7b80\u5355\u5730\u662f3D\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u7531\u5176x\u3001y\u548cz\u5750\u6807\u7ed9\u51fa\u3002\u8ba9\u6211\u4eec\u76f4\u63a5\u5f00\u59cb\u770b\u5982\u4f55\u7ed8\u5236\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u8fd9\u9700\u8981\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <pre><code>glBegin(GL_TRIANGLES);\nglVertex2f(-0.7, -0.5);\nglVertex2f(0.7, -0.5);\nglVertex2f(0, 0.7);\nglEnd();\n</code></pre> <p>\u4e09\u89d2\u5f62\u7684\u6bcf\u4e2a\u9876\u70b9\u90fd\u7531\u5bf9glVertex2f\u51fd\u6570\u7684\u8c03\u7528\u6307\u5b9a\u3002\u9876\u70b9\u5fc5\u987b\u5728glBegin\u548cglEnd\u4e4b\u95f4\u6307\u5b9a\u3002glBegin\u7684\u53c2\u6570\u544a\u8bc9\u6b63\u5728\u7ed8\u5236\u54ea\u79cd\u7c7b\u578b\u7684\u539f\u59cb\u56fe\u5143\u3002GL_TRIANGLES\u539f\u59cb\u56fe\u5143\u5141\u8bb8\u60a8\u7ed8\u5236\u591a\u4e2a\u4e09\u89d2\u5f62\uff1a\u53ea\u9700\u4e3a\u8981\u7ed8\u5236\u7684\u6bcf\u4e2a\u4e09\u89d2\u5f62\u6307\u5b9a\u4e09\u4e2a\u9876\u70b9\u5373\u53ef\u3002\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u5728OpenGL 1.1\u4e2d\uff0c\u4f7f\u7528glBegin/glEnd\u4e5f\u4e0d\u662f\u6307\u5b9a\u539f\u59cb\u56fe\u5143\u7684\u9996\u9009\u65b9\u6cd5\u3002\u7136\u800c\uff0c\u66ff\u4ee3\u65b9\u6cd5\uff0c\u5373\u5728\u7b2c3.4.2\u5c0f\u8282\u4e2d\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u8d77\u6765\u66f4\u590d\u6742\u3002\u60a8\u5e94\u8be5\u8ba4\u4e3aglBegin/glEnd\u662f\u4e86\u89e3\u9876\u70b9\u53ca\u5176\u5c5e\u6027\u7684\u4fbf\u6377\u65b9\u6cd5\uff0c\u4f46\u4e0d\u662f\u60a8\u5728\u73b0\u4ee3\u56fe\u5f62API\u4e2d\u5b9e\u9645\u64cd\u4f5c\u7684\u65b9\u5f0f\u3002</p> <p>\uff08\u6211\u5e94\u8be5\u6307\u51fa\uff0cOpenGL\u51fd\u6570\u5b9e\u9645\u4e0a\u53ea\u662f\u5411GPU\u53d1\u9001\u547d\u4ee4\u3002OpenGL\u53ef\u4ee5\u4fdd\u5b58\u547d\u4ee4\u6279\u6b21\u4ee5\u4e00\u8d77\u4f20\u8f93\uff0c\u5e76\u4e14\u7ed8\u5236\u5b9e\u9645\u4e0a\u76f4\u5230\u547d\u4ee4\u88ab\u4f20\u8f93\u624d\u4f1a\u5b8c\u6210\u3002\u4e3a\u4e86\u786e\u4fdd\u8fd9\u4e00\u70b9\u53d1\u751f\uff0c\u5fc5\u987b\u8c03\u7528\u51fd\u6570glFlush()\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ef\u80fd\u4f1a\u88abOpenGL API\u81ea\u52a8\u8c03\u7528\uff0c\u4f46\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u9700\u8981\u81ea\u5df1\u8c03\u7528\u5b83\u7684\u60c5\u51b5\u3002\uff09</p> <p>\u5bf9\u4e8eOpenGL\uff0c\u9876\u70b9\u6709\u4e09\u4e2a\u5750\u6807\u3002\u51fd\u6570glVertex2f\u6307\u5b9a\u4e86\u9876\u70b9\u7684x\u548cy\u5750\u6807\uff0c\u800cz\u5750\u6807\u8bbe\u7f6e\u4e3a\u96f6\u3002\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570glVertex3f\uff0c\u5b83\u6307\u5b9a\u4e86\u6240\u6709\u4e09\u4e2a\u5750\u6807\u3002\u540d\u79f0\u4e2d\u7684\u201c2\u201d\u6216\u201c3\u201d\u544a\u8bc9\u51fd\u6570\u4f20\u9012\u4e86\u591a\u5c11\u4e2a\u53c2\u6570\u3002\u201cf\u201d\u5728\u540d\u79f0\u672b\u5c3e\u8868\u793a\u53c2\u6570\u7684\u7c7b\u578b\u4e3afloat\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd8\u6709\u5176\u4ed6\u7684\u201cglVertex\u201d\u51fd\u6570\uff0c\u5305\u62ec\u4ee5int\u6216double\u7c7b\u578b\u7684\u53c2\u6570\u4e3a\u53c2\u6570\u7684\u7248\u672c\uff0c\u540d\u79f0\u7c7b\u4f3cglVertex2i\u548cglVertex3d\u3002\u751a\u81f3\u6709\u4e00\u4e9b\u7248\u672c\u63a5\u53d7\u56db\u4e2a\u53c2\u6570\uff0c\u5c3d\u7ba1\u6682\u65f6\u8fd8\u4e0d\u6e05\u695a\u4e3a\u4ec0\u4e48\u5b83\u4eec\u5e94\u8be5\u5b58\u5728\u3002\u6b63\u5982\u6211\u4eec\u540e\u9762\u5c06\u770b\u5230\u7684\uff0c\u8fd8\u6709\u4e00\u4e9b\u7248\u672c\u63a5\u53d7\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\u800c\u4e0d\u662f\u5355\u72ec\u7684\u6570\u5b57\u4f5c\u4e3a\u53c2\u6570\u3002\u6574\u5957\u9876\u70b9\u51fd\u6570\u901a\u5e38\u88ab\u79f0\u4e3a\u201cglVertex\u201d\uff0c\u5176\u4e2d\u201c\u201d\u4ee3\u8868\u53c2\u6570\u89c4\u8303\u3002\uff08\u540d\u79f0\u7684\u589e\u591a\u662f\u7531\u4e8eC\u7f16\u7a0b\u8bed\u8a00\u4e0d\u652f\u6301\u51fd\u6570\u540d\u7684\u91cd\u8f7d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0cC\u53ea\u901a\u8fc7\u51fd\u6570\u540d\u800c\u4e0d\u662f\u901a\u8fc7\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53c2\u6570\u7684\u6570\u91cf\u548c\u7c7b\u578b\u6765\u533a\u5206\u51fd\u6570\u3002\uff09</p> <p>OpenGL 1.1\u6709\u5341\u79cd\u539f\u59cb\u56fe\u5143\u3002\u5176\u4e2d\u4e03\u79cd\u4ecd\u7136\u5b58\u5728\u4e8e\u73b0\u4ee3OpenGL\u4e2d\uff1b\u53e6\u5916\u4e09\u79cd\u5df2\u7ecf\u88ab\u79fb\u9664\u3002\u6700\u7b80\u5355\u7684\u539f\u59cb\u56fe\u5143\u662fGL_POINTS\uff0c\u5b83\u5728\u539f\u59cb\u56fe\u5143\u7684\u6bcf\u4e2a\u9876\u70b9\u5904\u7b80\u5355\u5730\u6e32\u67d3\u4e00\u4e2a\u70b9\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u70b9\u88ab\u6e32\u67d3\u4e3a\u5355\u4e2a\u50cf\u7d20\u3002\u70b9\u539f\u59cb\u56fe\u5143\u7684\u5927\u5c0f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528</p> <pre><code>glPointSize(size);\n</code></pre> <p>\u6765\u6539\u53d8\uff0c\u5176\u4e2d\u53c2\u6570size\u7684\u7c7b\u578b\u4e3afloat\uff0c\u6307\u5b9a\u4e86\u6e32\u67d3\u70b9\u7684\u76f4\u5f84\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u70b9\u662f\u6b63\u65b9\u5f62\u7684\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528</p> <pre><code>glEnable(GL_POINT_SMOOTH);\n</code></pre> <p>\u6765\u83b7\u53d6\u5706\u5f62\u7684\u70b9\u3002\u51fd\u6570glPointSize\u548cglEnable\u6539\u53d8\u4e86OpenGL\u7684\u201c\u72b6\u6001\u201d\u3002\u72b6\u6001\u5305\u62ec\u6240\u6709\u5f71\u54cd\u6e32\u67d3\u7684\u8bbe\u7f6e\u3002\u6211\u4eec\u5c06\u9047\u5230\u8bb8\u591a\u6539\u53d8\u72b6\u6001\u7684\u51fd\u6570\u3002\u51fd\u6570glEnable\u548cglDisable\u53ef\u4ee5\u7528\u6765\u6253\u5f00\u548c\u5173\u95ed\u8bb8\u591a\u529f\u80fd\u3002\u901a\u5e38\u7684\u89c4\u5219\u662f\uff0c\u4efb\u4f55\u9700\u8981\u989d\u5916\u8ba1\u7b97\u7684\u6e32\u67d3\u7279\u6027\u9ed8\u8ba4\u90fd\u662f\u5173\u95ed\u7684\u3002\u5982\u679c\u60a8\u60f3\u8981\u8be5\u529f\u80fd\uff0c\u5219\u5fc5\u987b\u901a\u8fc7\u4f7f\u7528\u9002\u5f53\u7684\u53c2\u6570\u8c03\u7528glEnable\u6765\u6253\u5f00\u5b83\u3002</p> <p>\u6709\u4e09\u79cd\u7528\u4e8e\u7ed8\u5236\u7ebf\u6bb5\u7684\u539f\u59cb\u56fe\u5143\uff1aGL_LINES\u3001GL_LINE_STRIP\u548cGL_LINE_LOOP\u3002GL_LINES\u7ed8\u5236\u4e0d\u8fde\u63a5\u7684\u7ebf\u6bb5\uff1b\u4e3a\u8981\u7ed8\u5236\u7684\u6bcf\u4e2a\u7ebf\u6bb5\u6307\u5b9a\u4e24\u4e2a\u9876\u70b9\u3002\u53e6\u5916\u4e24\u4e2a\u539f\u59cb\u56fe\u5143\u7ed8\u5236\u8fde\u63a5\u7684\u7ebf\u6bb5\u5e8f\u5217\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8eGL_LINE_LOOP\u5728\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u548c\u7b2c\u4e00\u4e2a\u9876\u70b9\u4e4b\u95f4\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u7ebf\u6bb5\u3002\u5982\u679c\u4f7f\u7528\u8fc4\u4eca\u4e3a\u6b62\u6211\u4eec\u770b\u5230\u7684\u56db\u79cd\u539f\u59cb\u56fe\u5143\u76f8\u540c\u7684\u516d\u4e2a\u9876\u70b9\uff0c\u5219\u4f1a\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\uff1a</p> <p></p> <p>\u8fd9\u4e9b\u70b9A\u3001B\u3001C\u3001D\u3001E\u548cF\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f\u88ab\u6307\u5b9a\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6240\u6709\u70b9\u90fd\u4f4d\u4e8e\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u70b9\u53ef\u4ee5\u4f4d\u4e8e3D\u7a7a\u95f4\u7684\u4efb\u4f55\u4f4d\u7f6e\u3002</p> <p>\u7ebf\u6bb5\u539f\u59cb\u56fe\u5143\u7684\u5bbd\u5ea6\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528glLineWidth(width)\u6765\u8bbe\u7f6e\u3002\u7ebf\u5bbd\u59cb\u7ec8\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u6307\u5b9a\u3002\u5b83\u4e0d\u53d7\u53d8\u6362\u7684\u7f29\u653e\u5f71\u54cd\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002OpenGL\u6ca1\u6709\u5706\u5f62\u539f\u59cb\u56fe\u5143\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed8\u5236\u4e00\u4e2a\u8fb9\u6570\u5f88\u591a\u7684\u591a\u8fb9\u5f62\u6765\u8fd1\u4f3c\u5706\u5f62\u3002\u4e3a\u4e86\u7ed8\u5236\u591a\u8fb9\u5f62\u7684\u8f6e\u5ed3\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528GL_LINE_LOOP\u539f\u59cb\u56fe\u5143\uff1a</p> <pre><code>glBegin(GL_LINE_LOOP);\nfor (i = 0; i &lt; 64; i++) {\n    angle = 6.2832 * i / 64;  // 6.2832\u4ee3\u88682*PI\n    x = 0.5 * cos(angle);\n    y = 0.5 * sin(angle);\n    glVertex2f(x, y);\n}\nglEnd();\n</code></pre> <p>\u8fd9\u6837\u5c31\u7ed8\u5236\u4e86\u4e00\u4e2a\u534a\u5f84\u4e3a0.5\u3001\u4e2d\u5fc3\u5728(0,0)\u7684\u5706\u7684\u8fd1\u4f3c\u8f6e\u5ed3\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8981\u4e86\u89e3\u5982\u4f55\u5728\u4e00\u4e2a\u5b8c\u6574\u3001\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u50cf\u8fd9\u6837\u7684\u793a\u4f8b\uff0c\u60a8\u5c06\u9700\u8981\u9605\u8bfb\u7b2c3.6\u8282\u3002\u6b64\u5916\uff0c\u6839\u636e\u60a8\u4f7f\u7528\u7684OpenGL\u5b9e\u73b0\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u3002</p> <p>\u4e0b\u4e00\u7ec4\u539f\u59cb\u56fe\u5143\u7528\u4e8e\u7ed8\u5236\u4e09\u89d2\u5f62\u3002\u5176\u4e2d\u6709\u4e09\u79cd\uff1aGL_TRIANGLES\u3001GL_TRIANGLE_STRIP\u548cGL_TRIANGLE_FAN\u3002</p> <p></p> <p>\u5de6\u4fa7\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u7ec4\u6210\u4e86\u4e00\u4e2aGL_TRIANGLES\u539f\u59cb\u56fe\u5143\uff0c\u5171\u6709\u4e5d\u4e2a\u9876\u70b9\u3002\u5bf9\u4e8e\u8be5\u539f\u59cb\u56fe\u5143\uff0c\u6bcf\u7ec4\u4e09\u4e2a\u9876\u70b9\u5f62\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u4e09\u89d2\u5f62\u3002\u5bf9\u4e8eGL_TRIANGLE_STRIP\u539f\u59cb\u56fe\u5143\uff0c\u524d\u4e09\u4e2a\u9876\u70b9\u751f\u6210\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u4e4b\u540e\uff0c\u6bcf\u4e2a\u65b0\u9876\u70b9\u90fd\u4f1a\u5411\u6761\u5e26\u6dfb\u52a0\u53e6\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u8fde\u63a5\u65b0\u9876\u70b9\u5230\u524d\u4e24\u4e2a\u9876\u70b9\u3002\u53f3\u4fa7\u663e\u793a\u4e86\u4e24\u4e2aGL_TRIANGLE_FAN\u539f\u59cb\u56fe\u5143\u3002\u540c\u6837\u5730\uff0c\u5bf9\u4e8eGL_TRIANGLE_FAN\uff0c\u524d\u4e09\u4e2a\u9876\u70b9\u5f62\u6210\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u4e4b\u540e\u7684\u6bcf\u4e2a\u9876\u70b9\u90fd\u6dfb\u52a0\u53e6\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u4e09\u89d2\u5f62\u662f\u901a\u8fc7\u5c06\u65b0\u9876\u70b9\u8fde\u63a5\u5230\u4e0a\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u521d\u6307\u5b9a\u7684\u7b2c\u4e00\u4e2a\u9876\u70b9\uff08\u56fe\u7247\u4e2d\u7684\u9876\u70b9\u201cA\u201d\uff09\u800c\u5f62\u6210\u7684\u3002\u8bf7\u6ce8\u610f\uff0cGL_TRIANGLE_FAN\u53ef\u7528\u4e8e\u7ed8\u5236\u586b\u5145\u591a\u8fb9\u5f62\u3002\u5728\u8fd9\u5f20\u56fe\u7247\u4e2d\uff0c\u70b9\u548c\u7ebf\u4e0d\u662f\u539f\u59cb\u56fe\u5143\u7684\u4e00\u90e8\u5206\uff1bOpenGL\u53ea\u4f1a\u7ed8\u5236\u56fe\u5f62\u7684\u586b\u5145\u90e8\u5206\uff0c\u5373\u7eff\u8272\u7684\u5185\u90e8\u3002</p> <p>\u5269\u4e0b\u7684\u4e09\u4e2a\u539f\u59cb\u56fe\u5143\u5df2\u7ecf\u4ece\u73b0\u4ee3OpenGL\u4e2d\u5220\u9664\uff0c\u5b83\u4eec\u5206\u522b\u662fGL_QUADS\u3001GL_QUAD_STRIP\u548cGL_POLYGON\u3002\u540d\u79f0\u201cquad\u201d\u662f\u56db\u8fb9\u5f62\u7684\u7b80\u79f0\uff0c\u5373\u56db\u8fb9\u5f62\u3002\u4e00\u4e2a\u56db\u8fb9\u5f62\u7531\u56db\u4e2a\u9876\u70b9\u786e\u5b9a\u3002\u4e3a\u4e86\u5728OpenGL\u4e2d\u6b63\u786e\u6e32\u67d3\u56db\u8fb9\u5f62\uff0c\u56db\u8fb9\u5f62\u7684\u6240\u6709\u9876\u70b9\u5fc5\u987b\u4f4d\u4e8e\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\u3002\u591a\u8fb9\u5f62\u539f\u59cb\u56fe\u5143\u4e5f\u662f\u5982\u6b64\u3002\u540c\u6837\u5730\uff0c\u4e3a\u4e86\u6b63\u786e\u6e32\u67d3\uff0c\u56db\u8fb9\u5f62\u548c\u591a\u8fb9\u5f62\u5fc5\u987b\u662f\u51f8\u7684\uff08\u53c2\u89c1\u7b2c2.2.3\u5c0f\u8282\uff09\u3002\u7531\u4e8eOpenGL\u4e0d\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\uff0c\u56e0\u6b64\u4f7f\u7528\u56db\u8fb9\u5f62\u548c\u591a\u8fb9\u5f62\u662f\u5bb9\u6613\u51fa\u9519\u7684\u3002\u7531\u4e8e\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528\u4e09\u89d2\u5f62\u539f\u59cb\u56fe\u5143\u751f\u6210\u76f8\u540c\u7684\u5f62\u72b6\uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u662f\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9b\u4f8b\u5b50\uff1a</p> <p></p> <p>\u8fd9\u4e9b\u539f\u59cb\u56fe\u5143\u7684\u9876\u70b9\u6309\u7167\u987a\u5e8fA\u3001B\u3001C\u3001...\u6307\u5b9a\u3002\u6ce8\u610f\u4e24\u4e2a\u56db\u8fb9\u5f62\u539f\u59cb\u56fe\u5143\u7684\u987a\u5e8f\u4e0d\u540c\uff1a\u5bf9\u4e8eGL_QUADS\uff0c\u6bcf\u4e2a\u5355\u72ec\u7684\u56db\u8fb9\u5f62\u7684\u9876\u70b9\u5e94\u6309\u7167\u56db\u8fb9\u5f62\u5468\u56f4\u7684\u9006\u65f6\u9488\u987a\u5e8f\u6307\u5b9a\uff1b\u5bf9\u4e8eGL_QUAD_STRIP\uff0c\u9876\u70b9\u5e94\u8be5\u4ece\u5e26\u7684\u4e00\u4fa7\u4ea4\u66ff\u5230\u53e6\u4e00\u4fa7\u3002</p> <p>OpenGL can draw only a few basic shapes, including points, lines, and triangles. There is no built-in support for curves or curved surfaces; they must be approximated by simpler shapes. The basic shapes are referred to as primitives. A primitive in OpenGL is defined by its vertices. A vertex is simply a point in 3D, given by its x, y, and z coordinates. Let's jump right in and see how to draw a triangle. It takes a few steps:</p> <pre><code>glBegin(GL_TRIANGLES);\nglVertex2f( -0.7, -0.5 );\nglVertex2f( 0.7, -0.5 );\nglVertex2f( 0, 0.7 );\nglEnd();\n</code></pre> <p>Each vertex of the triangle is specified by a call to the function glVertex2f. Vertices must be specified between calls to glBegin and glEnd. The parameter to glBegin tells which type of primitive is being drawn. The GL_TRIANGLES primitive allows you to draw more than one triangle: Just specify three vertices for each triangle that you want to draw. Note that using glBegin/glEnd is not the preferred way to specify primitives, even in OpenGL 1.1. However, the alternative, which is covered in Subsection 3.4.2, is more complicated to use. You should consider glBegin/glEnd to be a convenient way to learn about vertices and their properties, but not the way that you will actually do things in modern graphics APIs.</p> <p>(I should note that OpenGL functions actually just send commands to the GPU. OpenGL can save up batches of commands to transmit together, and the drawing won't actually be done until the commands are transmitted. To ensure that that happens, the function glFlush() must be called. In some cases, this function might be called automatically by an OpenGL API, but you might well run into times when you have to call it yourself.)</p> <p>For OpenGL, vertices have three coordinates. The function glVertex2f specifies the x and y coordinates of the vertex, and the z coordinate is set to zero. There is also a function glVertex3f that specifies all three coordinates. The \"2\" or \"3\" in the name tells how many parameters are passed to the function. The \"f\" at the end of the name indicates that the parameters are of type float. In fact, there are other \"glVertex\" functions, including versions that take parameters of type int or double, with named like glVertex2i and glVertex3d. There are even versions that take four parameters, although it won't be clear for a while why they should exist. And, as we will see later, there are versions that take an array of numbers instead of individual numbers as parameters. The entire set of vertex functions is often referred to as \"glVertex\", with the \"\" standing in for the parameter specification. (The proliferation of names is due to the fact that the C programming language doesn't support overloading of function names; that is, C distinguishes functions only by their names and not by the number and type of parameters that are passed to the function.)</p> <p>OpenGL 1.1 has ten kinds of primitive. Seven of them still exist in modern OpenGL; the other three have been dropped. The simplest primitive is GL_POINTS, which simply renders a point at each vertex of the primitive. By default, a point is rendered as a single pixel. The size of point primitives can be changed by calling</p> <pre><code>glPointSize(size);\n</code></pre> <p>where the parameter, size, is of type float and specifies the diameter of the rendered point, in pixels. By default, points are squares. You can get circular points by calling</p> <pre><code>glEnable(GL_POINT_SMOOTH);\n</code></pre> <p>The functions glPointSize and glEnable change the OpenGL \"state.\" The state includes all the settings that affect rendering. We will encounter many state-changing functions. The functions glEnable and glDisable can be used to turn many features on and off. In general, the rule is that any rendering feature that requires extra computation is turned off by default. If you want that feature, you have to turn it on by calling glEnable with the appropriate parameter.</p> <p>There are three primitives for drawing line segments: GL_LINES, GL_LINE_STRIP, and GL_LINE_LOOP. GL_LINES draws disconnected line segments; specify two vertices for each segment that you want to draw. The other two primitives draw connected sequences of line segments. The only difference is that GL_LINE_LOOP adds an extra line segment from the final vertex back to the first vertex. Here is what you get if use the same six vertices with the four primitives we have seen so far:</p> <p></p> <p>The points A, B, C, D, E, and F were specified in that order. In this illustration, all the points lie in the same plane, but keep in mind that in general, points can be anywhere in 3D space.</p> <p>The width for line primitives can be set by calling glLineWidth(width). The line width is always specified in pixels. It is not subject to scaling by transformations.</p> <p>Let's look at an example. OpenGL does not have a circle primitive, but we can approximate a circle by drawing a polygon with a large number of sides. To draw an outline of the polygon, we can use a GL_LINE_LOOP primitive:</p> <pre><code>glBegin( GL_LINE_LOOP );\nfor (i = 0; i &lt; 64; i++) {\n    angle = 6.2832 * i / 64;  // 6.2832 represents 2*PI\n    x = 0.5 * cos(angle);\n    y = 0.5 * sin(angle);\n    glVertex2f( x, y );\n}\nglEnd();\n</code></pre> <p>This draws an approximation for the circumference of a circle of radius 0.5 with center at (0,0). Remember that to learn how to use examples like this one in a complete, running program, you will have to read Section 3.6. Also, you might have to make some changes to the code, depending on which OpenGL implementation you are using.</p> <p>The next set of primitives is for drawing triangles. There are three of them: GL_TRIANGLES, GL_TRIANGLE_STRIP, and GL_TRIANGLE_FAN.</p> <p></p> <p>The three triangles on the left make up one GL_TRIANGLES primitive, with nine vertices. With that primitive, every set of three vertices makes a separate triangle. For a GL_TRIANGLE_STRIP primitive, the first three vertices produce a triangle. After that, every new vertex adds another triangle to the strip, connecting the new vertex to the two previous vertices. Two GL_TRIANGLE_FAN primitives are shown on the right. Again for a GL_TRIANGLE_FAN, the first three vertices make a triangle, and every vertex after that adds anther triangle, but in this case, the new triangle is made by connecting the new vertex to the previous vertex and to the very first vertex that was specified (vertex \"A\" in the picture). Note that Gl_TRIANGLE_FAN can be used for drawing filled-in polygons. In this picture, by the way, the dots and lines are not part of the primitive; OpenGL would only draw the filled-in, green interiors of the figures.</p> <p>The three remaining primitives, which have been removed from modern OpenGL, are GL_QUADS, GL_QUAD_STRIP, and GL_POLYGON. The name \"quad\" is short for quadrilateral, that is, a four-sided polygon. A quad is determined by four vertices. In order for a quad to be rendered correctly in OpenGL, all vertices of the quad must lie in the same plane. The same is true for polygon primitives. Similarly, to be rendered correctly, quads and polygons must be convex (see Subsection 2.2.3). Since OpenGL doesn't check whether these conditions are satisfied, the use of quads and polygons is error-prone. Since the same shapes can easily be produced with the triangle primitives, they are not really necessary, but here for the record are some examples:</p> <p></p> <p>The vertices for these primitives are specified in the order A, B, C, .... Note how the order differs for the two quad primitives: For GL_QUADS, the vertices for each individual quad should be specified in counterclockwise order around the quad; for GL_QUAD_STRIP, the vertices should alternate from one side of the strip to the other.</p>"},{"location":"cn/c3/s1/#312-opengl\u989c\u8272","title":"3.1.2  OpenGL\u989c\u8272","text":"<p>OpenGL Color</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL\u6709\u4e00\u5927\u5806\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u4e3a\u6211\u4eec\u7ed8\u5236\u7684\u51e0\u4f55\u56fe\u5f62\u6307\u5b9a\u989c\u8272\u3002\u8fd9\u4e9b\u51fd\u6570\u7684\u540d\u79f0\u5f62\u5f0f\u4e3aglColor\uff0c\u5176\u4e2d\u201c\u201d\u4ee3\u8868\u4e00\u4e2a\u540e\u7f00\uff0c\u7528\u4e8e\u6307\u5b9a\u53c2\u6570\u7684\u6570\u91cf\u548c\u7c7b\u578b\u3002\u6211\u73b0\u5728\u5e94\u8be5\u8b66\u544a\u4f60\uff0c\u5bf9\u4e8e\u903c\u771f\u76843D\u56fe\u5f62\uff0cOpenGL\u6709\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u989c\u8272\u6982\u5ff5\uff0c\u4f7f\u7528\u4e86\u4e00\u7ec4\u4e0d\u540c\u7684\u51fd\u6570\u3002\u4f60\u5c06\u5728\u4e0b\u4e00\u7ae0\u4e2d\u5b66\u4e60\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u5c06\u4e13\u6ce8\u4e8eglColor*\u3002</p> <p>\u4f8b\u5982\uff0c\u51fd\u6570glColor3f\u6709\u4e09\u4e2a\u7c7b\u578b\u4e3afloat\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u4ee50.0\u52301.0\u7684\u8303\u56f4\u5185\u7684\u6570\u5b57\u7ed9\u51fa\u4e86\u989c\u8272\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u5141\u8bb8\u8d85\u51fa\u8fd9\u4e2a\u8303\u56f4\u7684\u503c\uff0c\u751a\u81f3\u662f\u8d1f\u503c\u3002\u5f53\u989c\u8272\u503c\u7528\u4e8e\u8ba1\u7b97\u65f6\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u503c\u5c06\u88ab\u89c6\u4e3a\u7ed9\u5b9a\u503c\u3002\u5f53\u989c\u8272\u5b9e\u9645\u4e0a\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u65f6\uff0c\u5176\u5206\u91cf\u503c\u5c06\u88ab\u5939\u7d27\u52300\u52301\u7684\u8303\u56f4\u5185\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c0f\u4e8e\u96f6\u7684\u503c\u5c06\u88ab\u66f4\u6539\u4e3a\u96f6\uff0c\u5927\u4e8e\u4e00\u7684\u503c\u5c06\u88ab\u66f4\u6539\u4e3a\u4e00\u3002\uff09</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528glColor4f()\u6765\u6dfb\u52a0\u7b2c\u56db\u4e2a\u5206\u91cf\u5230\u989c\u8272\u4e2d\u3002\u7b2c\u56db\u4e2a\u5206\u91cf\uff0c\u79f0\u4e3aalpha\uff0c\u4e0d\u4f1a\u5728\u9ed8\u8ba4\u7ed8\u5236\u6a21\u5f0f\u4e0b\u4f7f\u7528\uff0c\u4f46\u53ef\u4ee5\u914d\u7f6eOpenGL\u5c06\u5176\u7528\u4f5c\u989c\u8272\u7684\u900f\u660e\u5ea6\u7a0b\u5ea6\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u6240\u770b\u5230\u76842D\u56fe\u5f62API\u4e2d\u7684alpha\u5206\u91cf\u7684\u4f7f\u7528\u3002\u4f60\u9700\u8981\u4e24\u6761\u547d\u4ee4\u6765\u542f\u7528\u900f\u660e\u5ea6\uff1a</p> <pre><code>glEnable(GL_BLEND);\nglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n</code></pre> <p>\u7b2c\u4e00\u6761\u547d\u4ee4\u542f\u7528\u4e86alpha\u5206\u91cf\u7684\u4f7f\u7528\u3002\u5b83\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528glDisable(GL_BLEND)\u6765\u7981\u7528\u3002\u5f53GL_BLEND\u9009\u9879\u88ab\u7981\u7528\u65f6\uff0calpha\u4f1a\u88ab\u7b80\u5355\u5730\u5ffd\u7565\u3002\u7b2c\u4e8c\u6761\u547d\u4ee4\u544a\u8bc9\u989c\u8272\u7684alpha\u5206\u91cf\u5c06\u5982\u4f55\u4f7f\u7528\u3002\u8fd9\u91cc\u663e\u793a\u7684\u53c2\u6570\u662f\u6700\u5e38\u89c1\u7684\uff1b\u5b83\u4eec\u4ee5\u901a\u5e38\u7684\u65b9\u5f0f\u5b9e\u73b0\u4e86\u900f\u660e\u5ea6\u3002\u6211\u5e94\u8be5\u6307\u51fa\u7684\u662f\uff0c\u867d\u7136\u57282D\u4e2d\u900f\u660e\u5ea6\u8fd0\u4f5c\u826f\u597d\uff0c\u4f46\u57283D\u4e2d\u6b63\u786e\u4f7f\u7528\u900f\u660e\u5ea6\u8981\u56f0\u96be\u5f97\u591a\u3002</p> <p>\u5982\u679c\u60a8\u60f3\u8981\u4f7f\u7528\u8303\u56f4\u57280\u5230255\u4e4b\u95f4\u7684\u6574\u6570\u989c\u8272\u503c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528glColor3ub()\u6216glColor4ub\u6765\u8bbe\u7f6e\u989c\u8272\u3002\u5728\u8fd9\u4e9b\u51fd\u6570\u540d\u79f0\u4e2d\uff0c\u201cub\u201d\u4ee3\u8868\u201c\u65e0\u7b26\u53f7\u5b57\u8282\u201d\u3002\u65e0\u7b26\u53f7\u5b57\u8282\u662f\u4e00\u4e2a\u516b\u4f4d\u6570\u636e\u7c7b\u578b\uff0c\u5176\u503c\u57280\u5230255\u8303\u56f4\u5185\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5728OpenGL\u4e2d\u8bbe\u7f6e\u7ed8\u56fe\u989c\u8272\u7684\u547d\u4ee4\u793a\u4f8b\uff1a</p> <pre><code>glColor3f(0,0,0);         // \u7ed8\u5236\u9ed1\u8272\u3002\n\nglColor3f(1,1,1);         // \u7ed8\u5236\u767d\u8272\u3002\n\nglColor3f(1,0,0);         // \u7ed8\u5236\u5168\u5f3a\u5ea6\u7684\u7ea2\u8272\u3002\n\nglColor3ub(1,0,0);        // \u7ed8\u5236\u4e00\u4e2a\u4e0e\u9ed1\u8272\u7565\u6709\u4e0d\u540c\u7684\u989c\u8272\u3002 \uff08\u540e\u7f00\u201cub\u201d\u6216\u201cf\u201d\u5f88\u91cd\u8981\uff01\uff09\n\nglColor3ub(255,0,0);      // \u7ed8\u5236\u5168\u5f3a\u5ea6\u7684\u7ea2\u8272\u3002\n\nglColor4f(1, 0, 0, 0.5);  // \u7ed8\u5236\u534a\u900f\u660e\u7684\u7ea2\u8272\uff0c\u4f46\u53ea\u6709\u5728OpenGL\u88ab\u914d\u7f6e\u4e3a\u652f\u6301\u900f\u660e\u5ea6\u65f6\u624d\u4f1a\u751f\u6548\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e0e\u7ed8\u5236\u7eaf\u7ea2\u8272\u76f8\u540c\u3002\n</code></pre> <p>\u4f7f\u7528\u4efb\u4f55\u8fd9\u4e9b\u51fd\u6570\u90fd\u4f1a\u8bbe\u7f6e\u201c\u5f53\u524d\u989c\u8272\u201d\u7684\u503c\uff0c\u8be5\u503c\u662fOpenGL\u72b6\u6001\u7684\u4e00\u90e8\u5206\u3002\u5f53\u60a8\u4f7f\u7528glVertex*\u51fd\u6570\u4e4b\u4e00\u751f\u6210\u9876\u70b9\u65f6\uff0c\u5f53\u524d\u989c\u8272\u5c06\u4e0e\u9876\u70b9\u5750\u6807\u4e00\u8d77\u4fdd\u5b58\uff0c\u4f5c\u4e3a\u9876\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027\u3002\u6211\u4eec\u5c06\u770b\u5230\uff0c\u9876\u70b9\u9664\u4e86\u989c\u8272\u4e4b\u5916\u8fd8\u53ef\u4ee5\u5177\u6709\u5176\u4ed6\u7c7b\u578b\u7684\u5c5e\u6027\u3002\u5173\u4e8eOpenGL\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u5730\u65b9\u662f\uff0c\u989c\u8272\u4e0e\u5355\u4e2a\u9876\u70b9\u76f8\u5173\u8054\uff0c\u800c\u4e0d\u662f\u4e0e\u5b8c\u6574\u7684\u5f62\u72b6\u76f8\u5173\u8054\u3002\u901a\u8fc7\u5728glBegin()\u548cglEnd()\u4e4b\u95f4\u8c03\u7528\u65f6\u66f4\u6539\u5f53\u524d\u989c\u8272\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u5177\u6709\u4e0d\u540c\u989c\u8272\u5c5e\u6027\u7684\u5f62\u72b6\uff0c\u4e0d\u540c\u7684\u9876\u70b9\u3002\u5f53\u60a8\u8fd9\u6837\u505a\u65f6\uff0cOpenGL\u5c06\u901a\u8fc7\u5bf9\u9876\u70b9\u989c\u8272\u8fdb\u884c\u63d2\u503c\u6765\u8ba1\u7b97\u5f62\u72b6\u5185\u90e8\u7684\u50cf\u7d20\u989c\u8272\u3002\uff08\u518d\u6b21\u8bf4\u660e\uff0c\u7531\u4e8eOpenGL\u975e\u5e38\u53ef\u914d\u7f6e\uff0c\u6211\u5fc5\u987b\u6307\u51fa\uff0c\u989c\u8272\u63d2\u503c\u53ea\u662f\u9ed8\u8ba4\u884c\u4e3a\u3002\uff09\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u5176\u4e2d\u4e09\u4e2a\u9876\u70b9\u5206\u522b\u88ab\u8d4b\u4e88\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\uff1a</p> <p></p> <p>\u8fd9\u4e2a\u56fe\u50cf\u7ecf\u5e38\u88ab\u7528\u4f5cOpenGL\u7684\u4e00\u79cd\u201cHello World\u201d\u793a\u4f8b\u3002\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u7ed8\u5236\u4e09\u89d2\u5f62\uff1a</p> <pre><code>glBegin(GL_TRIANGLES);\nglColor3f(1, 0, 0); // \u7ea2\u8272\nglVertex2f(-0.8, -0.8);\nglColor3f(0, 1, 0); // \u7eff\u8272\nglVertex2f(0.8, -0.8);\nglColor3f(0, 0, 1); // \u84dd\u8272\nglVertex2f(0, 0.9);\nglEnd();\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u7ed8\u5236\u539f\u59cb\u56fe\u5143\u65f6\uff0c\u4e0d\u9700\u8981\u50cf\u8fd9\u91cc\u90a3\u6837\u4e3a\u6bcf\u4e2a\u9876\u70b9\u663e\u5f0f\u8bbe\u7f6e\u989c\u8272\u3002\u5982\u679c\u60a8\u60f3\u8981\u4e00\u4e2a\u5b8c\u5168\u76f8\u540c\u989c\u8272\u7684\u5f62\u72b6\uff0c\u60a8\u53ea\u9700\u8981\u5728\u7ed8\u5236\u5f62\u72b6\u4e4b\u524d\uff08\u6216\u8005\u5728glBegin()\u8c03\u7528\u4e4b\u540e\uff09\u8bbe\u7f6e\u5f53\u524d\u989c\u8272\u4e00\u6b21\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u7ed8\u5236\u4e00\u4e2a\u5b9e\u5fc3\u7684\u9ec4\u8272\u4e09\u89d2\u5f62\uff1a</p> <pre><code>glColor3ub(255,255,0);  // \u9ec4\u8272\nglBegin(GL_TRIANGLES);\nglVertex2f(-0.5, -0.5);\nglVertex2f(0.5, -0.5);\nglVertex2f(0, 0.5);\nglEnd();\n</code></pre> <p>\u540c\u65f6\u8bf7\u8bb0\u4f4f\uff0c\u9876\u70b9\u7684\u989c\u8272\u5728\u751f\u6210\u9876\u70b9\u7684glVertex*\u8c03\u7528\u4e4b\u524d\u6307\u5b9a\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u7ed8\u5236\u4e86\u57fa\u672c\u7684OpenGL\u4e09\u89d2\u5f62\uff0c\u5177\u6709\u4e0d\u540c\u989c\u8272\u7684\u9876\u70b9\u3002\u60a8\u53ef\u4ee5\u63a7\u5236\u9876\u70b9\u7684\u989c\u8272\uff0c\u4ee5\u67e5\u770b\u4e09\u89d2\u5f62\u5185\u90e8\u7684\u63d2\u503c\u989c\u8272\u53d7\u5230\u7684\u5f71\u54cd\u3002\u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e00\u4e2aOpenGL\u793a\u4f8b\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u6f14\u793a\u4f7f\u7528\u4e86WebGL\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u6d4b\u8bd5\uff0c\u4ee5\u68c0\u67e5\u60a8\u7684Web\u6d4f\u89c8\u5668\u662f\u5426\u652f\u6301WebGL\u3002</p> <p></p> <p>\u793a\u4f8b\u7a0b\u5e8f jogl/FirstTriangle.java \u4f7f\u7528Java\u7ed8\u5236\u4e86\u57fa\u672c\u7684OpenGL\u4e09\u89d2\u5f62\u3002\u7a0b\u5e8f glut/first-triangle.c \u4f7f\u7528C\u8bed\u8a00\u5b8c\u6210\u4e86\u76f8\u540c\u7684\u4efb\u52a1\u3002\u800cglsim/first-triangle.html \u662f\u4e00\u4e2a\u4f7f\u7528\u4e86\u6211\u7684JavaScript\u6a21\u62df\u5668\u7684\u7248\u672c\uff0c\u8be5\u6a21\u62df\u5668\u4ec5\u5b9e\u73b0\u4e86\u672c\u4e66\u4e2d\u6db5\u76d6\u7684OpenGL 1.1\u7684\u90e8\u5206\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u4ee5\u7528\u6765\u5728OpenGL\u4e2d\u8fdb\u884c2D\u7ed8\u56fe\u7684\u5b9e\u9a8c\u3002\u60a8\u4e5f\u53ef\u4ee5\u7528\u5b83\u4eec\u6765\u6d4b\u8bd5\u60a8\u7684OpenGL\u7f16\u7a0b\u73af\u5883\u3002</p> <p>\u4e00\u4e2a\u5e38\u89c1\u7684\u64cd\u4f5c\u662f\u901a\u8fc7\u7528\u67d0\u79cd\u80cc\u666f\u989c\u8272\u586b\u5145\u6765\u6e05\u9664\u7ed8\u56fe\u533a\u57df\u3002\u53ef\u4ee5\u901a\u8fc7\u7ed8\u5236\u4e00\u4e2a\u5927\u7684\u5f69\u8272\u77e9\u5f62\u6765\u5b9e\u73b0\uff0c\u4f46\u662fOpenGL\u6709\u4e00\u79cd\u53ef\u80fd\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u3002\u8be5\u51fd\u6570</p> <pre><code>glClearColor(r,g,b,a);\n</code></pre> <p>\u8bbe\u7f6e\u8981\u7528\u4e8e\u6e05\u9664\u7ed8\u56fe\u533a\u57df\u7684\u989c\u8272\u3002\uff08\u8fd9\u53ea\u662f\u8bbe\u7f6e\u989c\u8272\uff1b\u989c\u8272\u76f4\u5230\u60a8\u5b9e\u9645\u7ed9\u51fa\u6e05\u9664\u7ed8\u56fe\u533a\u57df\u7684\u547d\u4ee4\u65f6\u624d\u4f1a\u88ab\u4f7f\u7528\u3002\uff09\u53c2\u6570\u662f\u8303\u56f4\u57280\u52301\u4e4b\u95f4\u7684\u6d6e\u70b9\u503c\u3002\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u53d8\u4f53\uff1b\u60a8\u5fc5\u987b\u63d0\u4f9b\u6240\u6709\u56db\u4e2a\u989c\u8272\u5206\u91cf\uff0c\u5b83\u4eec\u5fc5\u987b\u57280\u52301\u7684\u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u7684\u6e05\u9664\u989c\u8272\u662f\u5168\u96f6\uff0c\u5373\uff0c\u989c\u8272\u4e3a\u9ed1\u8272\uff0calpha\u5206\u91cf\u4e5f\u7b49\u4e8e\u96f6\u3002\u6267\u884c\u5b9e\u9645\u6e05\u9664\u7684\u547d\u4ee4\u662f\uff1a</p> <pre><code>glClear(GL_COLOR_BUFFER_BIT);\n</code></pre> <p>\u6211\u4e00\u76f4\u79f0\u4e4b\u4e3a\u7ed8\u56fe\u533a\u57df\u7684\u6b63\u786e\u672f\u8bed\u662f\u989c\u8272\u7f13\u51b2\u533a\uff0c\u5176\u4e2d\u201c\u7f13\u51b2\u533a\u201d\u662f\u6307\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\u7684\u901a\u7528\u672f\u8bed\u3002\u9664\u4e86\u989c\u8272\u7f13\u51b2\u533a\u4e4b\u5916\uff0cOpenGL\u8fd8\u4f7f\u7528\u4e86\u51e0\u4e2a\u7f13\u51b2\u533a\u3002\u6211\u4eec\u5c06\u5728\u7a0d\u540e\u9047\u5230\u201c\u6df1\u5ea6\u7f13\u51b2\u533a\u201d\u3002glClear\u547d\u4ee4\u53ef\u4ee5\u7528\u4e8e\u4e00\u6b21\u6e05\u9664\u591a\u4e2a\u4e0d\u540c\u7684\u7f13\u51b2\u533a\uff0c\u8fd9\u53ef\u80fd\u6bd4\u5206\u5f00\u6e05\u9664\u5b83\u4eec\u66f4\u6709\u6548\uff0c\u56e0\u4e3a\u6e05\u9664\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u3002glClear\u7684\u53c2\u6570\u544a\u8bc9\u5b83\u8981\u6e05\u9664\u54ea\u4e2a\u7f13\u51b2\u533a\u6216\u54ea\u4e9b\u7f13\u51b2\u533a\u3002\u8981\u4e00\u6b21\u6e05\u9664\u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u8bf7\u4f7f\u7528\u4ee3\u8868\u5b83\u4eec\u7684\u5e38\u91cf\u4e0e\u7b97\u672fOR\u64cd\u4f5c\u7ed3\u5408\u3002\u4f8b\u5982\uff0c</p> <pre><code>glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n</code></pre> <p>\u8fd9\u662f\u57283D\u56fe\u5f62\u4e2d\u901a\u5e38\u4f7f\u7528\u7684glClear\u5f62\u5f0f\uff0c\u5176\u4e2d\u6df1\u5ea6\u7f13\u51b2\u533a\u8d77\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\u3002\u5bf9\u4e8e2D\u56fe\u5f62\uff0c\u6df1\u5ea6\u7f13\u51b2\u533a\u901a\u5e38\u4e0d\u4f7f\u7528\uff0c\u56e0\u6b64glClear\u7684\u9002\u5f53\u53c2\u6570\u53ea\u662fGL_COLOR_BUFFER_BIT\u3002</p> <p>OpenGL has a large collection of functions that can be used to specify colors for the geometry that we draw. These functions have names of the form glColor, where the \"\" stands for a suffix that gives the number and type of the parameters. I should warn you now that for realistic 3D graphics, OpenGL has a more complicated notion of color that uses a different set of functions. You will learn about that in the next chapter, but for now we will stick to glColor*.</p> <p>For example, the function glColor3f has three parameters of type float. The parameters give the red, green, and blue components of the color as numbers in the range 0.0 to 1.0. (In fact, values outside this range are allowed, even negative values. When color values are used in computations, out-of-range values will be used as given. When a color actually appears on the screen, its component values are clamped to the range 0 to 1. That is, values less than zero are changed to zero, and values greater than one are changed to one.)</p> <p>You can add a fourth component to the color by using glColor4f(). The fourth component, known as alpha, is not used in the default drawing mode, but it is possible to configure OpenGL to use it as the degree of transparency of the color, similarly to the use of the alpha component in the 2D graphics APIs that we have looked at. You need two commands to turn on transparency:</p> <pre><code>glEnable(GL_BLEND);\nglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n</code></pre> <p>The first command enables use of the alpha component. It can be disabled by calling glDisable(GL_BLEND). When the GL_BLEND option is disabled, alpha is simply ignored. The second command tells how the alpha component of a color will be used. The parameters shown here are the most common; they implement transparency in the usual way. I should note that while transparency works fine in 2D, it is much more difficult to use transparency correctly in 3D.</p> <p>If you would like to use integer color values in the range 0 to 255, you can use glColor3ub() or glColor4ub to set the color. In these function names, \"ub\" stands for \"unsigned byte.\" Unsigned byte is an eight-bit data type with values in the range 0 to 255. Here are some examples of commands for setting drawing colors in OpenGL:</p> <pre><code>glColor3f(0,0,0);         // Draw in black.\n\nglColor3f(1,1,1);         // Draw in white.\n\nglColor3f(1,0,0);         // Draw in full-intensity red.\n\nglColor3ub(1,0,0);        // Draw in a color just a tiny bit different from\n                        // black.  (The suffix, \"ub\" or \"f\", is important!)\n\nglColor3ub(255,0,0);      // Draw in full-intensity red.\n\nglColor4f(1, 0, 0, 0.5);  // Draw in transparent red, but only if OpenGL\n                        // has been configured to do transparency.  By\n                        // default this is the same as drawing in plain red.\n</code></pre> <p>Using any of these functions sets the value of a \"current color,\" which is part of the OpenGL state. When you generate a vertex with one of the glVertex* functions, the current color is saved along with the vertex coordinates, as an attribute of the vertex. We will see that vertices can have other kinds of attribute as well as color. One interesting point about OpenGL is that colors are associated with individual vertices, not with complete shapes. By changing the current color between calls to glBegin() and glEnd(), you can get a shape in which different vertices have different color attributes. When you do this, OpenGL will compute the colors of pixels inside the shape by interpolating the colors of the vertices. (Again, since OpenGL is extremely configurable, I have to note that interpolation of colors is just the default behavior.) For example, here is a triangle in which the three vertices are assigned the colors red, green, and blue:</p> <p></p> <p>This image is often used as a kind of \"Hello World\" example for OpenGL. The triangle can be drawn with the commands</p> <pre><code>glBegin(GL_TRIANGLES);\nglColor3f( 1, 0, 0 ); // red\nglVertex2f( -0.8, -0.8 );\nglColor3f( 0, 1, 0 ); // green\nglVertex2f( 0.8, -0.8 );\nglColor3f( 0, 0, 1 ); // blue\nglVertex2f( 0, 0.9 );\nglEnd();\n</code></pre> <p>Note that when drawing a primitive, you do not need to explicitly set a color for each vertex, as was done here. If you want a shape that is all one color, you just have to set the current color once, before drawing the shape (or just after the call to glBegin(). For example, we can draw a solid yellow triangle with</p> <pre><code>glColor3ub(255,255,0);  // yellow\nglBegin(GL_TRIANGLES);\nglVertex2f( -0.5, -0.5 );\nglVertex2f( 0.5, -0.5 );\nglVertex2f( 0, 0.5 );\nglEnd();\n</code></pre> <p>Also remember that the color for a vertex is specified before the call to glVertex* that generates the vertex.</p> <p>Here is an interactive demo that draws the basic OpenGL triangle, with different colored vertices. You can control the colors of the vertices to see how the interpolated colors in the interior of the triangle are affected. This is our first OpenGL example. The demo actually uses WebGL, so you can use it as a test to check whether your web browser supports WebGL.</p> <p></p> <p>The sample program jogl/FirstTriangle.java draws the basic OpenGL triangle using Java. The program glut/first-triangle.c does the same using the C programming language. And glsim/first-triangle.html is a version that uses my JavaScript simulator, which implements just the parts of OpenGL 1.1 that are covered in this book. Any of those programs could be used to experiment with 2D drawing in OpenGL. And you can use them to test your OpenGL programming environment.</p> <p>A common operation is to clear the drawing area by filling it with some background color. It is be possible to do that by drawing a big colored rectangle, but OpenGL has a potentially more efficient way to do it. The function</p> <pre><code>glClearColor(r,g,b,a);\n</code></pre> <p>sets up a color to be used for clearing the drawing area. (This only sets the color; the color isn't used until you actually give the command to clear the drawing area.) The parameters are floating point values in the range 0 to 1. There are no variants of this function; you must provide all four color components, and they must be in the range 0 to 1. The default clear color is all zeros, that is, black with an alpha component also equal to zero. The command to do the actual clearing is:</p> <pre><code>glClear( GL_COLOR_BUFFER_BIT );\n</code></pre> <p>The correct term for what I have been calling the drawing area is the color buffer, where \"buffer\" is a general term referring to a region in memory. OpenGL uses several buffers in addition to the color buffer. We will encounter the \"depth buffer\" in just a moment. The glClear command can be used to clear several different buffers at the same time, which can be more efficient than clearing them separately since the clearing can be done in parallel. The parameter to glClear tells it which buffer or buffers to clear. To clear several buffers at once, combine the constants that represent them with an arithmetic OR operation. For example,</p> <pre><code>glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );\n</code></pre> <p>This is the form of glClear that is generally used in 3D graphics, where the depth buffer plays an essential role. For 2D graphics, the depth buffer is generally not used, and the appropriate parameter for glClear is just GL_COLOR_BUFFER_BIT.</p>"},{"location":"cn/c3/s1/#313-glcolor-\u548c-glvertex-\u4e0e\u6570\u7ec4","title":"3.1.3  glColor \u548c glVertex \u4e0e\u6570\u7ec4","text":"<p>glColor and glVertex with Arrays</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86glColor\u548cglVertex\u7684\u7248\u672c\uff0c\u5b83\u4eec\u63a5\u53d7\u4e0d\u540c\u6570\u91cf\u548c\u7c7b\u578b\u7684\u53c2\u6570\u3002\u8fd8\u6709\u4e00\u4e9b\u7248\u672c\uff0c\u8ba9\u60a8\u5c06\u547d\u4ee4\u7684\u6240\u6709\u6570\u636e\u653e\u5728\u5355\u4e2a\u6570\u7ec4\u53c2\u6570\u4e2d\u3002\u8fd9\u4e9b\u7248\u672c\u7684\u540d\u79f0\u4ee5\u201cv\u201d\u7ed3\u5c3e\u3002\u4f8b\u5982\uff1aglColor3fv\u3001glVertex2iv\u3001glColor4ubv\u548cglVertex3dv\u3002\u5b9e\u9645\u4e0a\uff0c\u201cv\u201d\u4ee3\u8868\u201c\u5411\u91cf\u201d\uff0c\u57fa\u672c\u4e0a\u610f\u5473\u7740\u4e00\u7ef4\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5728\u51fd\u6570\u8c03\u7528glVertex3fv(coords)\u4e2d\uff0ccoords\u5c06\u662f\u4e00\u4e2a\u5305\u542b\u81f3\u5c11\u4e09\u4e2a\u6d6e\u70b9\u6570\u7684\u6570\u7ec4\u3002</p> <p>\u5728OpenGL\u4e2d\u5b58\u5728\u6570\u7ec4\u53c2\u6570\u5f3a\u5236\u8981\u6c42\u5728\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u7684OpenGL\u5b9e\u73b0\u4e4b\u95f4\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\u3002Java\u4e2d\u7684\u6570\u7ec4\u4e0eC\u4e2d\u7684\u6570\u7ec4\u4e0d\u540c\uff0cJavaScript\u4e2d\u7684\u6570\u7ec4\u4e5f\u4e0e\u4e24\u8005\u90fd\u4e0d\u540c\u3002\u8ba9\u6211\u4eec\u9996\u5148\u770b\u770bC\u8bed\u8a00\u4e2d\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u90a3\u662f\u539f\u59cbOpenGL API\u7684\u8bed\u8a00\u3002</p> <p>\u5728C\u8bed\u8a00\u4e2d\uff0c\u6570\u7ec4\u53d8\u91cf\u662f\u6307\u9488\u53d8\u91cf\u7684\u4e00\u79cd\u53d8\u4f53\uff0c\u6570\u7ec4\u548c\u6307\u9488\u53ef\u4ee5\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u4e92\u6362\u4f7f\u7528\u3002\u5b9e\u9645\u4e0a\uff0c\u5728C API\u4e2d\uff0c\u6570\u7ec4\u53c2\u6570\u5b9e\u9645\u4e0a\u88ab\u6307\u5b9a\u4e3a\u6307\u9488\u3002\u4f8b\u5982\uff0cglVertex3fv\u7684\u53c2\u6570\u7684\u7c7b\u578b\u662f\u201c\u6307\u5411\u6d6e\u70b9\u6570\u7684\u6307\u9488\u201d\u3002\u5728\u5bf9glVertex3fv\u7684\u8c03\u7528\u4e2d\u7684\u5b9e\u9645\u53c2\u6570\u53ef\u4ee5\u662f\u6570\u7ec4\u53d8\u91cf\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u6307\u5411\u4e09\u4e2a\u6d6e\u70b9\u6570\u5e8f\u5217\u5f00\u5934\u7684\u4efb\u4f55\u6307\u9488\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u7ed8\u5236\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002\u6211\u4eec\u9700\u8981\u6bcf\u4e2a\u9876\u70b9\u7684\u4e24\u4e2a\u5750\u6807\u3002\u5728C\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u67098\u4e2a\u5750\u6807\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u5e76\u4f7f\u7528glVertex2fv\u6765\u63d0\u53d6\u6211\u4eec\u9700\u8981\u7684\u5750\u6807\uff1a</p> <pre><code>float coords[] = { -0.5, -0.5,  0.5, -0.5,  0.5, 0.5,  -0.5, 0.5 };\n\nglBegin(GL_TRIANGLE_FAN);\nglVertex2fv(coords);      // \u4f7f\u7528 coords[0] \u548c coords[1]\u3002\nglVertex2fv(coords + 2);  // \u4f7f\u7528 coords[2] \u548c coords[3]\u3002\nglVertex2fv(coords + 4);  // \u4f7f\u7528 coords[4] \u548c coords[5]\u3002\nglVertex2fv(coords + 6);  // \u4f7f\u7528 coords[6] \u548c coords[7]\u3002\nglEnd();\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528\u4e86\u201c\u6307\u9488\u7b97\u672f\u201d\uff0c\u5176\u4e2d coords + N \u8868\u793a\u6570\u7ec4\u7684\u7b2cN\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002\u53e6\u4e00\u79cd\u8868\u793a\u6cd5\u662f &amp;coords[N]\uff0c\u5176\u4e2d\u201c&amp;\u201d\u662f\u5730\u5740\u8fd0\u7b97\u7b26\uff0c&amp;coords[N]\u8868\u793a\u201c\u6307\u5411coords[N]\u7684\u6307\u9488\u201d\u3002\u8fd9\u5bf9\u4e8e\u53ea\u719f\u6089Java\u6216JavaScript\u7684\u4eba\u6765\u8bf4\u53ef\u80fd\u4f1a\u611f\u5230\u975e\u5e38\u964c\u751f\u3002\u5728\u6211\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u5c06\u907f\u514d\u4f7f\u7528\u6307\u9488\u7b97\u672f\uff0c\u4f46\u5076\u5c14\u4f1a\u4f7f\u7528\u5730\u5740\u8fd0\u7b97\u7b26\u3002</p> <p>\u81f3\u4e8eJava\uff0c\u8bbe\u8ba1JOGL\u7684\u4eba\u60f3\u8981\u4fdd\u7559\u4ece\u6570\u7ec4\u4e2d\u63d0\u53d6\u6570\u636e\u7684\u80fd\u529b\u3002\u4f46\u662f\uff0c\u5728Java\u4e2d\u65e0\u6cd5\u4f7f\u7528\u6307\u9488\u3002\u89e3\u51b3\u65b9\u6848\u662f\u5728JOGL API\u4e2d\u7528\u4e00\u5bf9\u53c2\u6570\u66ff\u6362C API\u4e2d\u7684\u6307\u9488\u53c2\u6570\u2014\u2014\u4e00\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u5305\u542b\u6570\u636e\u7684\u6570\u7ec4\uff0c\u53e6\u4e00\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u8d77\u59cb\u7d22\u5f15\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u6b63\u65b9\u5f62\u7ed8\u5236\u4ee3\u7801\u5982\u4f55\u8f6c\u6362\u4e3aJava\uff1a</p> <pre><code>float[] coords = { -0.5F, -0.5F,  0.5F, -0.5F,  0.5F, 0.5F,  -0.5F, 0.5F };\n\ngl2.glBegin(GL2.GL_TRIANGLES);\ngl2.glVertex2fv(coords, 0);  // \u4f7f\u7528 coords[0] \u548c coords[1]\u3002\ngl2.glVertex2fv(coords, 2);  // \u4f7f\u7528 coords[2] \u548c coords[3]\u3002\ngl2.glVertex2fv(coords, 4);  // \u4f7f\u7528 coords[4] \u548c coords[5]\u3002\ngl2.glVertex2fv(coords, 6);  // \u4f7f\u7528 coords[6] \u548c coords[7]\u3002\ngl2.glEnd();\n</code></pre> <p>\u53c2\u6570\u65b9\u9762\u771f\u7684\u6ca1\u6709\u592a\u5927\u7684\u533a\u522b\uff0c\u5c3d\u7ba1\u7b2c\u4e00\u4e2aglVertex2fv\u4e2d\u7684\u96f6\u6709\u70b9\u8ba9\u4eba\u8ba8\u538c\u3002\u4e3b\u8981\u533a\u522b\u662f\u524d\u7f00\u201cgl2\u201d\u548c\u201cGL2\u201d\uff0c\u8fd9\u662f\u7531JOGL API\u7684\u9762\u5411\u5bf9\u8c61\u7279\u6027\u6240\u8981\u6c42\u7684\u3002\u5728\u8fd9\u91cc\u6211\u4e0d\u4f1a\u518d\u591a\u8bf4JOGL\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5982\u679c\u60a8\u9700\u8981\u5c06\u6211\u7684\u793a\u4f8b\u8f6c\u6362\u4e3aJOGL\uff0c\u60a8\u5e94\u8be5\u8bb0\u4f4f\u5728\u5904\u7406\u6570\u7ec4\u65f6\u9700\u8981\u7684\u989d\u5916\u53c2\u6570\u3002</p> <p>\u4f5c\u4e3a\u8bb0\u5f55\uff0c\u8fd9\u91cc\u662f\u6211\u5728\u672c\u4e66\u4e2d\u5c06\u8981\u4f7f\u7528\u7684glVertex*\u548cglColor*\u51fd\u6570\u3002\u8fd9\u4e0d\u662fOpenGL\u4e2d\u53ef\u7528\u7684\u5b8c\u6574\u96c6\u5408\uff1a</p> <pre><code>glVertex2f( x, y );             glVertex2fv( xyArray );\nglVertex2d( x, y );             glVertex2dv( xyArray );\nglVertex2i( x, y );             glVertex2iv( xyArray );\nglVertex3f( x, y, z );          glVertex3fv( xyzArray );\nglVertex3d( x, y, z );          glVertex3dv( xyzArray );\nglVertex3i( x, y, z );          glVertex3iv( xyzArray );\n\nglColor3f( r, g, b );           glColor3f( rgbArray );\nglColor3d( r, g, b );           glColor3d( rgbArray );\nglColor3ub( r, g, b );          glColor3ub( rgbArray );\nglColor4f( r, g, b, a);         glColor4f( rgbaArray );\nglColor4d( r, g, b, a);         glColor4d( rgbaArray );\nglColor4ub( r, g, b, a);        glColor4ub( rgbaArray );\n</code></pre> <p>\u5bf9\u4e8eglColor*\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u201cub\u201d\u53d8\u4f53\u9700\u8981\u57280\u5230255\u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u800c\u201cf\u201d\u548c\u201cd\u201d\u53d8\u4f53\u9700\u8981\u57280.0\u52301.0\u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\u3002</p> <p>We have see that there are versions of glColor and glVertex that take different numbers and types of parameters. There are also versions that let you place all the data for the command in a single array parameter. The names for such versions end with \"v\". For example: glColor3fv, glVertex2iv, glColor4ubv, and glVertex3dv. The \"v\" actually stands for \"vector,\" meaning essentially a one-dimensional array of numbers. For example, in the function call glVertex3fv(coords), coords would be an array containing at least three floating point numbers.</p> <p>The existence of array parameters in OpenGL forces some differences between OpenGL implementations in different programming languages. Arrays in Java are different from arrays in C, and arrays in JavaScript are different from both. Let's look at the situation in C first, since that's the language of the original OpenGL API.</p> <p>In C, array variables are a sort of variation on pointer variables, and arrays and pointers can be used interchangeably in many circumstances. In fact, in the C API, array parameters are actually specified as pointers. For example, the parameter for glVertex3fv is of type \"pointer to float.\" The actual parameter in a call to glVertex3fv can be an array variable, but it can also be any pointer that points to the beginning of a sequence of three floats. As an example, suppose that we want to draw a square. We need two coordinates for each vertex of the square. In C, we can put all 8 coordinates into one array and use glVertex2fv to pull out the coordinates that we need:</p> <pre><code>float coords[] = { -0.5, -0.5,  0.5, -0.5,  0.5, 0.5,  -0.5, 0.5 };\n\nglBegin(GL_TRIANGLE_FAN);\nglVertex2fv(coords);      // Uses coords[0] and coords[1].\nglVertex2fv(coords + 2);  // Uses coords[2] and coords[3].\nglVertex2fv(coords + 4);  // Uses coords[4] and coords[5].\nglVertex2fv(coords + 6);  // Uses coords[6] and coords[7].\nglEnd();\n</code></pre> <p>This example uses \"pointer arithmetic,\" in which coords + N represents a pointer to the N-th element of the array. An alternative notation would be &amp;coords[N], where \"&amp;\" is the address operator, and &amp;coords[N] means \"a pointer to coords[N]\". This will all seem very alien to people who are only familiar with Java or JavaScript. In my examples, I will avoid using pointer arithmetic, but I will occasionally use address operators.</p> <p>As for Java, the people who designed JOGL wanted to preserve the ability to pull data out of the middle of an array. However, it's not possible to work with pointers in Java. The solution was to replace a pointer parameter in the C API with a pair of parameters in the JOGL API\u2014one parameter to specify the array that contains the data and one to specify the starting index of the data in the array. For example, here is how the square-drawing code translates into Java:</p> <pre><code>float[] coords = { -0.5F, -0.5F,  0.5F, -0.5F,  0.5F, 0.5F,  -0.5F, 0.5F };\n\ngl2.glBegin(GL2.GL_TRIANGLES);\ngl2.glVertex2fv(coords, 0);  // Uses coords[0] and coords[1].\ngl2.glVertex2fv(coords, 2);  // Uses coords[2] and coords[3].\ngl2.glVertex2fv(coords, 4);  // Uses coords[4] and coords[5].\ngl2.glVertex2fv(coords, 6);  // Uses coords[6] and coords[7].\ngl2.glEnd();\n</code></pre> <p>There is really not much difference in the parameters, although the zero in the first glVertex2fv is a little annoying. The main difference is the prefixes \"gl2\" and \"GL2\", which are required by the object-oriented nature of the JOGL API. I won't say more about JOGL here, but if you need to translate my examples into JOGL, you should keep in mind the extra parameter that is required when working with arrays.</p> <p>For the record, here are the glVertex* and glColor* functions that I will use in this book. This is not the complete set that is available in OpenGL:</p> <pre><code>glVertex2f( x, y );             glVertex2fv( xyArray );\nglVertex2d( x, y );             glVertex2dv( xyArray );\nglVertex2i( x, y );             glVertex2iv( xyArray );\nglVertex3f( x, y, z );          glVertex3fv( xyzArray );\nglVertex3d( x, y, z );          glVertex3dv( xyzArray );\nglVertex3i( x, y, z );          glVertex3iv( xyzArray );\n\nglColor3f( r, g, b );           glColor3f( rgbArray );\nglColor3d( r, g, b );           glColor3d( rgbArray );\nglColor3ub( r, g, b );          glColor3ub( rgbArray );\nglColor4f( r, g, b, a);         glColor4f( rgbaArray );\nglColor4d( r, g, b, a);         glColor4d( rgbaArray );\nglColor4ub( r, g, b, a);        glColor4ub( rgbaArray );\n</code></pre> <p>For glColor*, keep in mind that the \"ub\" variations require integers in the range 0 to 255, while the \"f\" and \"d\" variations require floating-point numbers in the range 0.0 to 1.0.</p>"},{"location":"cn/c3/s1/#314-\u6df1\u5ea6\u6d4b\u8bd5","title":"3.1.4  \u6df1\u5ea6\u6d4b\u8bd5","text":"<p>The Depth Test</p> \u4e2d\u6587\u82f1\u6587 <p>\u57283D\u89c6\u56fe\u4e2d\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u95ee\u9898\u662f\uff0c\u4e00\u4e2a\u7269\u4f53\u53ef\u4ee5\u4f4d\u4e8e\u53e6\u4e00\u4e2a\u7269\u4f53\u7684\u540e\u9762\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u80cc\u540e\u7684\u7269\u4f53\u4f1a\u88ab\u524d\u9762\u7684\u7269\u4f53\u906e\u6321\uff0c\u4ece\u800c\u5bf9\u89c2\u5bdf\u8005\u9690\u85cf\u3002\u5f53\u6211\u4eec\u521b\u5efa\u4e00\u4e2a3D\u4e16\u754c\u7684\u56fe\u50cf\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u88ab\u5176\u4ed6\u7269\u4f53\u906e\u6321\u7684\u7269\u4f53\u5b9e\u9645\u4e0a\u5728\u56fe\u50cf\u4e2d\u4e0d\u53ef\u89c1\u3002\u8fd9\u5c31\u662f\u9690\u85cf\u8868\u9762\u95ee\u9898\u3002</p> <p>\u89e3\u51b3\u65b9\u6848\u4f3c\u4e4e\u5f88\u7b80\u5355\uff1a\u53ea\u9700\u6309\u4ece\u540e\u5230\u524d\u7684\u987a\u5e8f\u7ed8\u5236\u7269\u4f53\u3002\u5982\u679c\u4e00\u4e2a\u7269\u4f53\u5728\u53e6\u4e00\u4e2a\u7269\u4f53\u7684\u540e\u9762\uff0c\u90a3\u4e48\u5f53\u7ed8\u5236\u524d\u9762\u7684\u7269\u4f53\u65f6\uff0c\u540e\u9762\u7684\u7269\u4f53\u5c06\u4f1a\u88ab\u906e\u76d6\u3002\u8fd9\u88ab\u79f0\u4e3a\u753b\u5bb6\u7b97\u6cd5\u3002\u8fd9\u672c\u8d28\u4e0a\u5c31\u662f\u60a8\u57282D\u4e2d\u6240\u4e60\u60ef\u505a\u7684\u4e8b\u60c5\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b9e\u73b0\u8d77\u6765\u5e76\u4e0d\u90a3\u4e48\u5bb9\u6613\u3002\u9996\u5148\uff0c\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u76f8\u4ea4\u7684\u7269\u4f53\uff0c\u8fd9\u6837\u6bcf\u4e2a\u7269\u4f53\u7684\u4e00\u90e8\u5206\u5c31\u4f1a\u88ab\u53e6\u4e00\u4e2a\u7269\u4f53\u906e\u6321\u3002\u65e0\u8bba\u60a8\u4ee5\u4ec0\u4e48\u987a\u5e8f\u7ed8\u5236\u8fd9\u4e9b\u7269\u4f53\uff0c\u90fd\u4f1a\u6709\u4e00\u4e9b\u70b9\u663e\u793a\u51fa\u9519\u8bef\u7684\u7269\u4f53\u3002\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u60a8\u9700\u8981\u6cbf\u7740\u4ea4\u53c9\u70b9\u5c06\u7269\u4f53\u5207\u5272\u6210\u7247\uff0c\u5e76\u5c06\u8fd9\u4e9b\u7247\u6bb5\u89c6\u4e3a\u5355\u72ec\u7684\u7269\u4f53\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u6ca1\u6709\u76f8\u4ea4\u7684\u7269\u4f53\uff0c\u4e5f\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a\u53ef\u80fd\u4f1a\u6709\u4e09\u4e2a\u4e0d\u76f8\u4ea4\u7684\u7269\u4f53\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u7269\u4f53\u906e\u6321\u4e86\u7b2c\u4e8c\u4e2a\u7684\u4e00\u90e8\u5206\uff0c\u7b2c\u4e8c\u4e2a\u7269\u4f53\u906e\u6321\u4e86\u7b2c\u4e09\u4e2a\u7684\u4e00\u90e8\u5206\uff0c\u7b2c\u4e09\u4e2a\u7269\u4f53\u53c8\u906e\u6321\u4e86\u7b2c\u4e00\u4e2a\u7684\u4e00\u90e8\u5206\u3002\u65e0\u8bba\u4ee5\u54ea\u79cd\u987a\u5e8f\u7ed8\u5236\u8fd9\u4e09\u4e2a\u7269\u4f53\uff0c\u753b\u5bb6\u7b97\u6cd5\u90fd\u4f1a\u5931\u8d25\u3002\u89e3\u51b3\u65b9\u6848\u662f\u518d\u6b21\u5c06\u7269\u4f53\u5207\u5272\u6210\u7247\uff0c\u4f46\u662f\u73b0\u5728\u4e0d\u90a3\u4e48\u660e\u663e\u5728\u54ea\u91cc\u5207\u5272\u3002</p> <p>\u5c3d\u7ba1\u8fd9\u4e9b\u95ee\u9898\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f46\u8fd8\u6709\u53e6\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u6539\u53d8\u89c6\u70b9\u6216\u5e94\u7528\u51e0\u4f55\u53d8\u6362\u65f6\uff0c\u6b63\u786e\u7684\u7ed8\u5236\u987a\u5e8f\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u6b21\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u65f6\u90fd\u5fc5\u987b\u91cd\u65b0\u8ba1\u7b97\u6b63\u786e\u7684\u7ed8\u5236\u987a\u5e8f\u3002\u5728\u52a8\u753b\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u6bcf\u4e00\u5e27\u90fd\u8981\u8fd9\u6837\u505a\u3002</p> <p>\u56e0\u6b64\uff0cOpenGL \u4e0d\u4f7f\u7528\u753b\u5bb6\u7b97\u6cd5\u3002\u76f8\u53cd\uff0c\u5b83\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u6df1\u5ea6\u6d4b\u8bd5\u7684\u6280\u672f\u3002\u6df1\u5ea6\u6d4b\u8bd5\u89e3\u51b3\u4e86\u9690\u85cf\u8868\u9762\u95ee\u9898\uff0c\u65e0\u8bba\u4ee5\u4f55\u79cd\u987a\u5e8f\u7ed8\u5236\u7269\u4f53\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u7ed8\u5236\u5b83\u4eec\uff01\u8fd9\u91cc\u7684\u201c\u6df1\u5ea6\u201d\u4e00\u8bcd\u4e0e\u89c2\u5bdf\u8005\u5230\u7269\u4f53\u7684\u8ddd\u79bb\u6709\u5173\u3002\u6df1\u5ea6\u8f83\u5927\u7684\u5bf9\u8c61\u8ddd\u79bb\u89c2\u5bdf\u8005\u66f4\u8fdc\u3002\u5177\u6709\u8f83\u5c0f\u6df1\u5ea6\u7684\u5bf9\u8c61\u5c06\u9690\u85cf\u5177\u6709\u8f83\u5927\u6df1\u5ea6\u7684\u5bf9\u8c61\u3002\u4e3a\u4e86\u5b9e\u73b0\u6df1\u5ea6\u6d4b\u8bd5\u7b97\u6cd5\uff0cOpenGL \u5728\u56fe\u50cf\u7684\u6bcf\u4e2a\u50cf\u7d20\u4e2d\u5b58\u50a8\u4e00\u4e2a\u6df1\u5ea6\u503c\u3002\u7528\u4e8e\u5b58\u50a8\u8fd9\u4e9b\u6df1\u5ea6\u503c\u7684\u989d\u5916\u5185\u5b58\u7ec4\u6210\u4e86\u6211\u4e4b\u524d\u63d0\u5230\u7684\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u5728\u7ed8\u5236\u8fc7\u7a0b\u4e2d\uff0c\u6df1\u5ea6\u7f13\u51b2\u533a\u7528\u4e8e\u8ddf\u8e2a\u6bcf\u4e2a\u50cf\u7d20\u5f53\u524d\u53ef\u89c1\u7684\u5185\u5bb9\u3002\u5f53\u7b2c\u4e8c\u4e2a\u7269\u4f53\u7ed8\u5236\u5728\u8be5\u50cf\u7d20\u65f6\uff0c\u6df1\u5ea6\u7f13\u51b2\u533a\u4e2d\u7684\u4fe1\u606f\u53ef\u7528\u4e8e\u51b3\u5b9a\u65b0\u7269\u4f53\u662f\u5728\u5f53\u524d\u53ef\u89c1\u7684\u7269\u4f53\u524d\u9762\u8fd8\u662f\u540e\u9762\u3002\u5982\u679c\u65b0\u7269\u4f53\u5728\u524d\u9762\uff0c\u5219\u50cf\u7d20\u7684\u989c\u8272\u5c06\u88ab\u66f4\u6539\u4ee5\u663e\u793a\u65b0\u7269\u4f53\uff0c\u5e76\u4e14\u6df1\u5ea6\u7f13\u51b2\u533a\u4e5f\u5c06\u88ab\u66f4\u65b0\u3002\u5982\u679c\u65b0\u7269\u4f53\u5728\u5f53\u524d\u7269\u4f53\u540e\u9762\uff0c\u5219\u65b0\u7269\u4f53\u7684\u6570\u636e\u5c06\u88ab\u4e22\u5f03\uff0c\u5e76\u4e14\u989c\u8272\u548c\u6df1\u5ea6\u7f13\u51b2\u533a\u4fdd\u6301\u4e0d\u53d8\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6df1\u5ea6\u6d4b\u8bd5\u662f\u5173\u95ed\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u57283D\u7ed8\u5236\u65f6\u51fa\u73b0\u975e\u5e38\u7cdf\u7cd5\u7684\u7ed3\u679c\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\uff1a</p> <pre><code>glEnable( GL_DEPTH_TEST );\n</code></pre> <p>\u5b83\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 glDisable(GL_DEPTH_TEST) \u6765\u5173\u95ed\u3002\u5982\u679c\u5728\u7ed8\u52363D\u65f6\u5fd8\u8bb0\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\uff0c\u5219\u5f97\u5230\u7684\u56fe\u50cf\u53ef\u80fd\u4f1a\u4ee4\u4eba\u56f0\u60d1\uff0c\u5e76\u4e14\u5728\u7269\u7406\u4e0a\u6beb\u65e0\u610f\u4e49\u3002\u5982\u679c\u5728\u6e05\u9664\u989c\u8272\u7f13\u51b2\u533a\u7684\u540c\u65f6\u5fd8\u8bb0\u6e05\u9664\u6df1\u5ea6\u7f13\u51b2\u533a\uff0c\u4e5f\u4f1a\u4ea7\u751f\u6df7\u4e71\uff0c\u8fd9\u4f7f\u7528\u4e86\u672c\u8282\u4e2d\u65e9\u671f\u663e\u793a\u7684 glClear \u547d\u4ee4\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u6f14\u793a\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u6df1\u5ea6\u6d4b\u8bd5\u3002\u5b83\u8fd8\u8ba9\u60a8\u770b\u5230\u5f53\u60a8\u7684\u51e0\u4f55\u56fe\u5f62\u7684\u4e00\u90e8\u5206\u8d85\u51fa\u4e86\u53ef\u89c1\u7684 z \u503c\u8303\u56f4\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002</p> <p></p> <p>\u4ee5\u4e0b\u662f\u6709\u5173\u6df1\u5ea6\u6d4b\u8bd5\u5b9e\u73b0\u7684\u4e00\u4e9b\u7ec6\u8282\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u50cf\u7d20\uff0c\u6df1\u5ea6\u7f13\u51b2\u533a\u5b58\u50a8\u4e86\u4ece\u89c2\u5bdf\u8005\u5230\u5f53\u524d\u5728\u8be5\u50cf\u7d20\u5904\u53ef\u89c1\u70b9\u7684\u8ddd\u79bb\u8868\u793a\u3002\u8fd9\u4e2a\u503c\u672c\u8d28\u4e0a\u662f\u8be5\u70b9\u7684 z \u5750\u6807\uff0c\u5728\u5e94\u7528\u4efb\u4f55\u53d8\u6362\u540e\u3002 \uff08\u4e8b\u5b9e\u4e0a\uff0c\u6df1\u5ea6\u7f13\u51b2\u533a\u901a\u5e38\u79f0\u4e3a\u201cz \u7f13\u51b2\u533a\u201d\u3002\uff09\u53ef\u80fd z-\u5750\u6807\u7684\u8303\u56f4\u88ab\u7f29\u653e\u5230 0 \u5230 1 \u7684\u8303\u56f4\u3002\u6df1\u5ea6\u7f13\u51b2\u533a\u503c\u7684\u6709\u9650\u8303\u56f4\u610f\u5473\u7740 OpenGL \u53ea\u80fd\u5728\u6709\u9650\u7684\u8ddd\u79bb\u8303\u56f4\u5185\u663e\u793a\u5bf9\u8c61\u3002\u6df1\u5ea6\u503c 0 \u5bf9\u5e94\u4e8e\u6700\u5c0f\u8ddd\u79bb\uff1b\u6df1\u5ea6\u503c 1 \u5bf9\u5e94\u4e8e\u6700\u5927\u8ddd\u79bb\u3002\u5f53\u60a8\u6e05\u9664\u6df1\u5ea6\u7f13\u51b2\u533a\u65f6\uff0c\u6bcf\u4e2a\u6df1\u5ea6\u503c\u90fd\u8bbe\u7f6e\u4e3a 1\uff0c\u8fd9\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u8868\u793a\u56fe\u50cf\u7684\u80cc\u666f\u3002</p> <p>\u901a\u8fc7\u5e94\u7528\u7684\u53d8\u6362\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u56fe\u50cf\u4e2d\u53ef\u89c1\u7684 z-\u503c\u8303\u56f4\u3002\u5728\u6ca1\u6709\u4efb\u4f55\u53d8\u6362\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u8303\u56f4\u662f -1 \u5230 1\u3002z-\u503c\u8d85\u51fa\u8303\u56f4\u7684\u70b9\u5728\u56fe\u50cf\u4e2d\u4e0d\u53ef\u89c1\u3002\u4f7f\u7528\u8fc7\u5c0f\u7684 z-\u503c\u8303\u56f4\u662f\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\uff0c\u56e0\u6b64\u7269\u4f53\u4f1a\u5728\u573a\u666f\u4e2d\u6d88\u5931\uff0c\u6216\u8005\u7531\u4e8e\u4f4d\u4e8e\u53ef\u89c1\u8303\u56f4\u4e4b\u5916\u800c\u4f7f\u5176\u524d\u7aef\u6216\u540e\u7aef\u88ab\u622a\u65ad\u3002\u60a8\u53ef\u80fd\u4f1a\u88ab\u8bf1\u60d1\u4f7f\u7528\u4e00\u4e2a\u5de8\u5927\u7684\u8303\u56f4\uff0c\u4ee5\u786e\u4fdd\u60a8\u5e0c\u671b\u5305\u542b\u5728\u56fe\u50cf\u4e2d\u7684\u5bf9\u8c61\u5305\u542b\u5728\u8303\u56f4\u5185\u3002\u4f46\u662f\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff1a\u6df1\u5ea6\u7f13\u51b2\u533a\u6bcf\u4e2a\u50cf\u7d20\u7684\u4f4d\u6570\u6709\u9650\uff0c\u56e0\u6b64\u7cbe\u5ea6\u6709\u9650\u3002\u5b83\u5fc5\u987b\u8868\u793a\u7684\u503c\u8303\u56f4\u8d8a\u5927\uff0c\u533a\u5206\u51e0\u4e4e\u76f8\u540c\u6df1\u5ea6\u7684\u5bf9\u8c61\u5c31\u8d8a\u56f0\u96be\u3002\uff08\u60f3\u8c61\u4e00\u4e0b\u5982\u679c\u60a8\u573a\u666f\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u6df1\u5ea6\u503c\u4ecb\u4e8e 0.499999 \u548c 0.500001 \u4e4b\u95f4\u4f1a\u53d1\u751f\u4ec0\u4e48\u2014\u6df1\u5ea6\u7f13\u51b2\u533a\u53ef\u80fd\u5c06\u5b83\u4eec\u5168\u90e8\u89c6\u4e3a\u5b8c\u5168\u76f8\u540c\u7684\u6df1\u5ea6\uff01\uff09</p> <p>\u6df1\u5ea6\u7f13\u51b2\u533a\u7b97\u6cd5\u8fd8\u5b58\u5728\u53e6\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u4e24\u4e2a\u5bf9\u8c61\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u6df1\u5ea6\u503c\u65f6\uff0c\u5b83\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u5947\u602a\u7684\u7ed3\u679c\u3002\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u751a\u81f3\u4e0d\u6e05\u695a\u54ea\u4e2a\u5bf9\u8c61\u5e94\u8be5\u662f\u53ef\u89c1\u7684\uff0c\u4f46\u6df1\u5ea6\u6d4b\u8bd5\u7684\u771f\u6b63\u95ee\u9898\u5728\u4e8e\uff0c\u5b83\u53ef\u80fd\u5728\u67d0\u4e9b\u70b9\u663e\u793a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5728\u5176\u4ed6\u4e00\u4e9b\u70b9\u663e\u793a\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u3002\u8fd9\u662f\u56e0\u4e3a\u6570\u503c\u8ba1\u7b97\u5e76\u4e0d\u5b8c\u5168\u51c6\u786e\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\uff1a</p> <p></p> <p>\u5728\u8fd9\u91cc\u663e\u793a\u7684\u4e24\u5e45\u56fe\u7247\u4e2d\uff0c\u5148\u7ed8\u5236\u4e86\u4e00\u4e2a\u7070\u8272\u7684\u6b63\u65b9\u5f62\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u767d\u8272\u7684\u6b63\u65b9\u5f62\uff0c\u6700\u540e\u662f\u4e00\u4e2a\u9ed1\u8272\u7684\u6b63\u65b9\u5f62\u3002\u8fd9\u4e9b\u6b63\u65b9\u5f62\u90fd\u4f4d\u4e8e\u540c\u4e00\u5e73\u9762\u4e0a\u3002\u5728\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d\u65bd\u52a0\u4e86\u975e\u5e38\u5c0f\u7684\u65cb\u8f6c\uff0c\u4ee5\u4fbf\u8ba9\u8ba1\u7b97\u673a\u5728\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\u3002\u5de6\u8fb9\u7684\u56fe\u7247\u662f\u5728\u7981\u7528\u6df1\u5ea6\u6d4b\u8bd5\u7684\u60c5\u51b5\u4e0b\u7ed8\u5236\u7684\uff0c\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u5f53\u7ed8\u5236\u767d\u8272\u6b63\u65b9\u5f62\u7684\u50cf\u7d20\u65f6\uff0c\u8ba1\u7b97\u673a\u4e0d\u4f1a\u5c1d\u8bd5\u786e\u5b9a\u5b83\u662f\u5728\u7070\u8272\u6b63\u65b9\u5f62\u7684\u524d\u9762\u8fd8\u662f\u540e\u9762\uff1b\u5b83\u53ea\u662f\u5c06\u50cf\u7d20\u7740\u8272\u4e3a\u767d\u8272\u3002\u53f3\u8fb9\uff0c\u5219\u542f\u7528\u4e86\u6df1\u5ea6\u6d4b\u8bd5\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u5947\u602a\u7684\u7ed3\u679c\u3002</p> <p>\u6700\u540e\uff0c\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u8ba8\u8bba\u5047\u8bbe\u6ca1\u6709\u900f\u660e\u7684\u5bf9\u8c61\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6df1\u5ea6\u6d4b\u8bd5\u4e0d\u80fd\u6b63\u786e\u5904\u7406\u900f\u660e\u5ea6\uff0c\u56e0\u4e3a\u900f\u660e\u5ea6\u610f\u5473\u7740\u4e24\u4e2a\u6216\u591a\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5bf9\u50cf\u7d20\u7684\u989c\u8272\u4ea7\u751f\u8d21\u732e\uff0c\u4f46\u6df1\u5ea6\u6d4b\u8bd5\u5047\u8bbe\u50cf\u7d20\u7684\u989c\u8272\u662f\u5728\u8be5\u70b9\u6700\u9760\u8fd1\u89c2\u5bdf\u8005\u7684\u5bf9\u8c61\u7684\u989c\u8272\u3002\u8981\u5728OpenGL\u4e2d\u6b63\u786e\u5904\u7406 3D \u900f\u660e\u5ea6\uff0c\u60a8\u51e0\u4e4e\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0\u753b\u5bb6\u7b97\u6cd5\uff0c\u81f3\u5c11\u5bf9\u4e8e\u573a\u666f\u4e2d\u7684\u900f\u660e\u5bf9\u8c61\u662f\u8fd9\u6837\u3002</p> <p>An obvious point about viewing in 3D is that one object can be behind another object. When this happens, the back object is hidden from the viewer by the front object. When we create an image of a 3D world, we have to make sure that objects that are supposed to be hidden behind other objects are in fact not visible in the image. This is the hidden surface problem.</p> <p>The solution might seem simple enough: Just draw the objects in order from back to front. If one object is behind another, the back object will be covered up later when the front object is drawn. This is called the painter's algorithm. It's essentially what you are used to doing in 2D. Unfortunately, it's not so easy to implement. First of all, you can have objects that intersect, so that part of each object is hidden by the other. Whatever order you draw the objects in, there will be some points where the wrong object is visible. To fix this, you would have to cut the objects into pieces, along the intersection, and treat the pieces as separate objects. In fact, there can be problems even if there are no intersecting objects: It's possible to have three non-intersecting objects where the first object hides part of the second, the second hides part of the third, and the third hides part of the first. The painter's algorithm will fail regardless of the order in which the three objects are drawn. The solution again is to cut the objects into pieces, but now it's not so obvious where to cut.</p> <p>Even though these problems can be solved, there is another issue. The correct drawing order can change when the point of view is changed or when a geometric transformation is applied, which means that the correct drawing order has to be recomputed every time that happens. In an animation, that would mean for every frame.</p> <p>So, OpenGL does not use the painter's algorithm. Instead, it uses a technique called the depth test. The depth test solves the hidden surface problem no matter what order the objects are drawn in, so you can draw them in any order you want! The term \"depth\" here has to do with the distance from the viewer to the object. Objects at greater depth are farther from the viewer. An object with smaller depth will hide an object with greater depth. To implement the depth test algorithm, OpenGL stores a depth value for each pixel in the image. The extra memory that is used to store these depth values makes up the depth buffer that I mentioned earlier. During the drawing process, the depth buffer is used to keep track of what is currently visible at each pixel. When a second object is drawn at that pixel, the information in the depth buffer can be used to decide whether the new object is in front of or behind the object that is currently visible there. If the new object is in front, then the color of the pixel is changed to show the new object, and the depth buffer is also updated. If the new object is behind the current object, then the data for the new object is discarded and the color and depth buffers are left unchanged.</p> <p>By default, the depth test is not turned on, which can lead to very bad results when drawing in 3D. You can enable the depth test by calling</p> <pre><code>glEnable( GL_DEPTH_TEST );\n</code></pre> <p>It can be turned off by calling glDisable(GL_DEPTH_TEST). If you forget to enable the depth test when drawing in 3D, the image that you get will likely be confusing and will make no sense physically. You can also get quite a mess if you forget to clear the depth buffer, using the glClear command shown earlier in this section, at the same time that you clear the color buffer.</p> <p>Here is a demo that lets you experiment with the depth test. It also lets you see what happens when part of your geometry extends outside the visible range of z-values.</p> <p></p> <p>Here are a few details about the implementation of the depth test: For each pixel, the depth buffer stores a representation of the distance from the viewer to the point that is currently visible at that pixel. This value is essentially the z-coordinate of the point, after any transformations have been applied. (In fact, the depth buffer is often called the \"z-buffer\".) The range of possible z-coordinates is scaled to the range 0 to 1. The fact that there is only a limited range of depth buffer values means that OpenGL can only display objects in a limited range of distances from the viewer. A depth value of 0 corresponds to the minimal distance; a depth value of 1 corresponds to the maximal distance. When you clear the depth buffer, every depth value is set to 1, which can be thought of as representing the background of the image.</p> <p>You get to choose the range of z-values that is visible in the image, by the transformations that you apply. The default range, in the absence of any transformations, is -1 to 1. Points with z-values outside the range are not visible in the image. It is a common problem to use too small a range of z-values, so that objects are missing from the scene, or have their fronts or backs cut off, because they lie outside of the visible range. You might be tempted to use a huge range, to make sure that the objects that you want to include in the image are included within the range. However, that's not a good idea: The depth buffer has a limited number of bits per pixel and therefore a limited amount of accuracy. The larger the range of values that it must represent, the harder it is to distinguish between objects that are almost at the same depth. (Think about what would happen if all objects in your scene have depth values between 0.499999 and 0.500001\u2014the depth buffer might see them all as being at exactly the same depth!)</p> <p>There is another issue with the depth buffer algorithm. It can give some strange results when two objects have exactly the same depth value. Logically, it's not even clear which object should be visible, but the real problem with the depth test is that it might show one object at some points and the second object at some other points. This is possible because numerical calculations are not perfectly accurate. Here an actual example:</p> <p></p> <p>In the two pictures shown here, a gray square was drawn, followed by a white square, followed by a black square. The squares all lie in the same plane. A very small rotation was applied, to force the computer do some calculations before drawing the objects. The picture on the left was drawn with the depth test disabled, so that, for example, when a pixel of the white square was drawn, the computer didn't try to figure out whether it lies in front of or behind the gray square; it simply colored the pixel white. On the right, the depth test was enabled, and you can see the strange result.</p> <p>Finally, by the way, note that the discussion here assumes that there are no transparent objects. Unfortunately, the depth test does not handle transparency correctly, since transparency means that two or more objects can contribute to the color of the pixel, but the depth test assumes that the pixel color is the color of the object nearest to the viewer at that point. To handle 3D transparency correctly in OpenGL, you pretty much have to resort to implementing the painter's algorithm by hand, at least for the transparent objects in the scene.</p>"},{"location":"cn/c3/s2/","title":"3.2 3D \u5750\u6807\u548c\u53d8\u6362","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5728\u7b2c\u4e8c\u7ae0\u4e2d\uff0c\u6211\u4eec\u6bd4\u8f83\u8be6\u7ec6\u5730\u8ba8\u8bba\u4e86\u4e8c\u7ef4\u8ba1\u7b97\u673a\u56fe\u5f62\u4e2d\u7684\u5750\u6807\u7cfb\u548c\u53d8\u6362\u3002\u5728\u672c\u8282\u548c\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u628a\u8fd9\u4e2a\u8ba8\u8bba\u6269\u5c55\u5230\u4e09\u7ef4\u7a7a\u95f4\u3002\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u590d\u6742\uff0c\u4f46\u8bb8\u591a\u57fa\u672c\u6982\u5ff5\u4ecd\u7136\u76f8\u540c\u3002</p> <p>In Chapter 2, we looked fairly closely at coordinate systems and transforms in two-dimensional computer graphics. In this section and the next, we will move that discussion into 3D. Things are more complicated in three dimensions, but a lot of the basic concepts remain the same.</p>"},{"location":"cn/c3/s2/#321-3d\u5750\u6807","title":"3.2.1 3D\u5750\u6807","text":"<p>3D Coordinates</p> \u4e2d\u6587\u82f1\u6587 <p>\u5750\u6807\u7cfb\u662f\u4e00\u79cd\u5c06\u6570\u5b57\u5206\u914d\u7ed9\u70b9\u7684\u65b9\u5f0f\u3002\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u60a8\u9700\u8981\u4e00\u5bf9\u6570\u5b57\u6765\u6307\u5b9a\u4e00\u4e2a\u70b9\u3002\u5750\u6807\u901a\u5e38\u88ab\u79f0\u4e3ax\u548cy\uff0c\u5c3d\u7ba1\u540d\u79f0\u662f\u4efb\u610f\u7684\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5c06\u4e00\u5bf9\u6570\u5b57\u5206\u914d\u7ed9\u70b9\u672c\u8eab\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4efb\u610f\u7684\u3002\u70b9\u548c\u7269\u4f53\u662f\u771f\u5b9e\u5b58\u5728\u7684\u4e1c\u897f\uff0c\u4f46\u5750\u6807\u53ea\u662f\u6211\u4eec\u5206\u914d\u7ed9\u5b83\u4eec\u7684\u6570\u5b57\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5f15\u7528\u5b83\u4eec\u5e76\u8fdb\u884c\u6570\u5b66\u64cd\u4f5c\u3002\u5f53\u6211\u4eec\u8ba8\u8bba\u53d8\u6362\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u8fd9\u79cd\u529b\u91cf\uff0c\u53d8\u6362\u5728\u6570\u5b66\u4e0a\u662f\u7528\u5750\u6807\u6765\u5b9a\u4e49\u7684\uff0c\u4f46\u5b83\u4eec\u5177\u6709\u771f\u5b9e\u800c\u6709\u7528\u7684\u7269\u7406\u542b\u4e49\u3002</p> <p>\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u60a8\u9700\u8981\u4e09\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\u4e00\u4e2a\u70b9\u3002\uff08\u8fd9\u57fa\u672c\u4e0a\u5c31\u662f\u4e09\u7ef4\u7684\u610f\u601d\u3002\uff09\u7b2c\u4e09\u4e2a\u5750\u6807\u901a\u5e38\u79f0\u4e3az\u3002z\u8f74\u5782\u76f4\u4e8ex\u8f74\u548cy\u8f74\u3002</p> <p>\u8fd9\u4e2a\u6f14\u793a\u5c55\u793a\u4e86\u4e00\u4e2a\u4e09\u7ef4\u5750\u6807\u7cfb\u3002x\u3001y\u548cz\u8f74\u7684\u6b63\u65b9\u5411\u663e\u793a\u4e3a\u5927\u7bad\u5934\u3002x\u8f74\u4e3a\u7eff\u8272\uff0cy\u8f74\u4e3a\u84dd\u8272\uff0cz\u8f74\u4e3a\u7ea2\u8272\u3002\u60a8\u53ef\u4ee5\u5728\u8f74\u4e0a\u62d6\u52a8\u4ee5\u65cb\u8f6c\u56fe\u50cf\u3002</p> <p></p> <p>\u8fd9\u4e2a\u793a\u4f8b\u662f\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u50cf\uff0c\u4f46\u5b83\u770b\u8d77\u6765\u5177\u6709\u4e09\u7ef4\u5916\u89c2\u3002\uff08\u5982\u679c\u60a8\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u79cd\u5e7b\u89c9\u4f1a\u66f4\u5f3a\u70c8\u3002\uff09\u6709\u51e0\u4e2a\u56e0\u7d20\u5171\u540c\u4fc3\u6210\u4e86\u8fd9\u79cd\u6548\u679c\u3002\u9996\u5148\uff0c\u8fdc\u79bb\u89c2\u5bdf\u8005\u7684\u4e09\u7ef4\u7269\u4f53\u5728\u4e8c\u7ef4\u56fe\u50cf\u4e2d\u770b\u8d77\u6765\u66f4\u5c0f\u3002\u8fd9\u662f\u7531\u4e8e\u5c06\u4e09\u7ef4\u573a\u666f\u201c\u6295\u5f71\u201d\u5230\u4e8c\u7ef4\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u8ba8\u8bba\u6295\u5f71\u3002\u53e6\u4e00\u4e2a\u56e0\u7d20\u662f\u7269\u4f53\u7684\u201c\u9634\u5f71\u201d\u3002\u7269\u4f53\u88ab\u9634\u5f71\u7740\uff0c\u4ee5\u6a21\u62df\u7269\u4f53\u4e0e\u7167\u4eae\u5b83\u4eec\u7684\u5149\u7684\u76f8\u4e92\u4f5c\u7528\u3002\u6211\u4eec\u5c06\u5ef6\u8fdf\u8ba8\u8bba\u5149\u7167\u76f4\u5230\u7b2c\u56db\u7ae0\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u96c6\u4e2d\u8ba8\u8bba\u5982\u4f55\u5728\u4e09\u7ef4\u4e2d\u6784\u5efa\u573a\u666f\u2014\u2014\u6211\u4eec\u6240\u8bf4\u7684\u5efa\u6a21\u3002</p> <p>OpenGL\u7a0b\u5e8f\u5458\u901a\u5e38\u4f7f\u7528\u4e00\u79cd\u5750\u6807\u7cfb\u601d\u7ef4\u65b9\u5f0f\uff0c\u5176\u4e2dx\u8f74\u548cy\u8f74\u4f4d\u4e8e\u5c4f\u5e55\u7684\u5e73\u9762\u4e0a\uff0c\u800cz\u8f74\u5782\u76f4\u4e8e\u5c4f\u5e55\uff0cz\u8f74\u7684\u6b63\u65b9\u5411\u6307\u5411\u5c4f\u5e55\u7684\u5916\u4fa7\uff0c\u671d\u5411\u89c2\u5bdf\u8005\u3002\u73b0\u5728\uff0c\u5728OpenGL\u4e2d\uff0c\u9ed8\u8ba4\u7684\u5750\u6807\u7cfb\u7edf\uff08\u5982\u679c\u4e0d\u5e94\u7528\u4efb\u4f55\u53d8\u6362\uff09\u7c7b\u4f3c\uff0c\u4f46z\u8f74\u7684\u6b63\u65b9\u5411\u6307\u5411\u5c4f\u5e55\u7684\u5185\u4fa7\u3002\u8fd9\u5e76\u4e0d\u77db\u76fe\uff1a\u5b9e\u9645\u4f7f\u7528\u7684\u5750\u6807\u7cfb\u7edf\u662f\u4efb\u610f\u7684\u3002\u5b83\u662f\u901a\u8fc7\u4e00\u79cd\u53d8\u6362\u8bbe\u7f6e\u7684\u3002OpenGL\u4e2d\u7684\u7ea6\u5b9a\u662f\u4f7f\u7528\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\uff0c\u5176\u4e2d\u6b63z\u65b9\u5411\u6307\u5411\u89c2\u5bdf\u8005\uff0c\u8d1fz\u65b9\u5411\u6307\u5411\u8fdc\u79bb\u89c2\u5bdf\u8005\u3002\u8fdb\u5165\u9ed8\u8ba4\u5750\u6807\u7684\u53d8\u6362\u4f1a\u53cd\u8f6cz\u8f74\u7684\u65b9\u5411\u3002</p> <p>\u8fd9\u79cd\u8f74\u7684\u5e38\u89c4\u6392\u5217\u4ea7\u751f\u4e86\u4e00\u4e2a\u53f3\u624b\u5750\u6807\u7cfb\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u4f60\u7528\u53f3\u624b\u7684\u62c7\u6307\u6307\u5411\u6b63z\u8f74\u7684\u65b9\u5411\uff0c\u90a3\u4e48\u5f53\u4f60\u5f2f\u66f2\u624b\u7684\u624b\u6307\u65f6\uff0c\u5b83\u4eec\u4f1a\u6cbf\u7740\u4ece\u6b63x\u8f74\u5230\u6b63y\u8f74\u7684\u65b9\u5411\u5f2f\u66f2\u3002\u5982\u679c\u4f60\u770b\u7740\u4f60\u7684\u62c7\u6307\u5c16\uff0c\u5f2f\u66f2\u5c06\u662f\u9006\u65f6\u9488\u65b9\u5411\u7684\u3002\u53e6\u4e00\u79cd\u601d\u8003\u65b9\u5f0f\u662f\uff0c\u5982\u679c\u4f60\u7528\u53f3\u624b\u7684\u624b\u6307\u4ece\u6b63x\u8f74\u5230\u6b63y\u8f74\u65b9\u5411\u5f2f\u66f2\uff0c\u90a3\u4e48\u4f60\u7684\u62c7\u6307\u5c06\u6307\u5411\u6b63z\u8f74\u7684\u65b9\u5411\u3002\u9ed8\u8ba4\u7684OpenGL\u5750\u6807\u7cfb\u7edf\uff08\u518d\u6b21\u5f3a\u8c03\uff0c\u51e0\u4e4e\u4e0d\u4f1a\u88ab\u4f7f\u7528\uff09\u662f\u4e00\u4e2a\u5de6\u624b\u5750\u6807\u7cfb\u3002\u4f60\u5e94\u8be5\u82b1\u4e00\u4e9b\u65f6\u95f4\u6765\u5c1d\u8bd5\u53ef\u89c6\u5316\u53f3\u624b\u548c\u5de6\u624b\u5750\u6807\u7cfb\u3002\u52a8\u52a8\u4f60\u7684\u624b\uff01</p> <p>\u6240\u6709\u8fd9\u4e9b\u90fd\u63cf\u8ff0\u4e86\u4ece\u89c2\u5bdf\u8005\u7684\u89d2\u5ea6\u6765\u770b\u7684\u81ea\u7136\u5750\u6807\u7cfb\u7edf\uff0c\u5373\u6240\u8c13\u7684\u201c\u773c\u775b\u201d\u6216\u201c\u89c2\u5bdf\u201d\u5750\u6807\u7cfb\u7edf\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u773c\u5750\u6807\u7cfb\u4e0d\u4e00\u5b9a\u662f\u4e16\u754c\u4e0a\u7684\u81ea\u7136\u5750\u6807\u3002\u4e16\u754c\u4e0a\u7684\u5750\u6807\u7cfb\u7edf\u2014\u2014\u5373\u573a\u666f\u88ab\u7ec4\u88c5\u7684\u5750\u6807\u7cfb\u7edf\u2014\u2014\u88ab\u79f0\u4e3a\u4e16\u754c\u5750\u6807\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u5bf9\u8c61\u901a\u5e38\u4e0d\u76f4\u63a5\u5728\u4e16\u754c\u5750\u6807\u4e2d\u6307\u5b9a\u3002\u76f8\u53cd\uff0c\u5bf9\u8c61\u5728\u5b83\u4eec\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u6307\u5b9a\uff0c\u79f0\u4e3a\u5bf9\u8c61\u5750\u6807\uff0c\u7136\u540e\u5e94\u7528\u5efa\u6a21\u53d8\u6362\u5c06\u5bf9\u8c61\u653e\u7f6e\u5230\u4e16\u754c\u4e2d\uff0c\u6216\u8005\u653e\u7f6e\u5230\u66f4\u590d\u6742\u7684\u5bf9\u8c61\u4e2d\u3002\u5728OpenGL\u4e2d\uff0c\u5bf9\u8c61\u5750\u6807\u662f\u5728glVertex*\u51fd\u6570\u4e2d\u7528\u6765\u6307\u5b9a\u5bf9\u8c61\u9876\u70b9\u7684\u6570\u5b57\u3002\u7136\u800c\uff0c\u5728\u5bf9\u8c61\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u4e4b\u524d\uff0c\u5b83\u4eec\u901a\u5e38\u4f1a\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u53d8\u6362\uff0c\u4ece\u5efa\u6a21\u53d8\u6362\u5f00\u59cb\u3002</p> <p>A coordinate system is a way of assigning numbers to points. In two dimensions, you need a pair of numbers to specify a point. The coordinates are often referred to as x and y, although of course, the names are arbitrary. More than that, the assignment of pairs of numbers to points is itself arbitrary to a large extent. Points and objects are real things, but coordinates are just numbers that we assign to them so that we can refer to them easily and work with them mathematically. We have seen the power of this when we discussed transforms, which are defined mathematically in terms of coordinates but which have real, useful physical meanings.</p> <p>In three dimensions, you need three numbers to specify a point. (That's essentially what it means to be three dimensional.) The third coordinate is often called z. The z-axis is perpendicular to both the x-axis and the y-axis.</p> <p>This demo illustrates a 3D coordinate system. The positive directions of the x, y, and z axes are shown as big arrows. The x-axis is green, the y-axis is blue, and the z-axis is red. You can drag on the axes to rotate the image.</p> <p></p> <p>This example is a 2D image, but it has a 3D look. (The illusion is much stronger if you rotate the image.) Several things contribute to the effect. For one thing, objects that are farther away from the viewer in 3D look smaller in the 2D image. This is due to the way that the 3D scene is \"projected\" onto 2D. We will discuss projection in the next section. Another factor is the \"shading\" of the objects. The objects are shaded in a way that imitates the interaction of objects with the light that illuminates them. We will put off a discussion of lighting until Chapter 4. In this section, we will concentrate on how to construct a scene in 3D\u2014what we have referred to as modeling.</p> <p>OpenGL programmers usually think in terms of a coordinate system in which the x- and y-axes lie in the plane of the screen, and the z-axis is perpendicular to the screen with the positive direction of the z-axis pointing out of the screen towards the viewer. Now, the default coordinate system in OpenGL, the one that you are using if you apply no transformations at all, is similar but has the positive direction of the z-axis pointing into the screen. This is not a contradiction: The coordinate system that is actually used is arbitrary. It is set up by a transformation. The convention in OpenGL is to work with a coordinate system in which the positive z-direction points toward the viewer and the negative z-direction points away from the viewer. The transformation into default coordinates reverses the direction of the z-axis.</p> <p>This conventional arrangement of the axes produces a right-handed coordinate system. This means that if you point the thumb of your right hand in the direction of the positive z-axis, then when you curl the fingers of that hand, they will curl in the direction from the positive x-axis towards the positive y-axis. If you are looking at the tip of your thumb, the curl will be in the counterclockwise direction. Another way to think about it is that if you curl the figures of your right hand from the positive x to the positive y-axis, then your thumb will point in the direction of the positive z-axis. The default OpenGL coordinate system (which, again, is hardly ever used) is a left-handed system. You should spend some time trying to visualize right- and left-handed coordinates systems. Use your hands!</p> <p>All of that describes the natural coordinate system from the viewer's point of view, the so-called \"eye\" or \"viewing\" coordinate system. However, these eye coordinates are not necessarily the natural coordinates on the world. The coordinate system on the world\u2014the coordinate system in which the scene is assembled\u2014is referred to as world coordinates.</p> <p>Recall that objects are not usually specified directly in world coordinates. Instead, objects are specified in their own coordinate system, known as object coordinates, and then modeling transforms are applied to place the objects into the world, or into more complex objects. In OpenGL, object coordinates are the numbers that are used in the glVertex* function to specify the vertices of the object. However, before the objects appear on the screen, they are usually subject to a sequence of transformations, starting with a modeling transform.</p>"},{"location":"cn/c3/s2/#322-\u57fa\u672c-3d-\u53d8\u6362","title":"3.2.2 \u57fa\u672c 3D \u53d8\u6362","text":"<p>Basic 3D Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>\u57283D\u4e2d\u7684\u57fa\u672c\u53d8\u6362\u662f\u4f60\u5df2\u7ecf\u719f\u6089\u7684\u6765\u81ea2D\u7684\u57fa\u672c\u53d8\u6362\u7684\u6269\u5c55\uff1a\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u5e73\u79fb\u3002\u6211\u4eec\u5c06\u770b\u4e00\u4e0b3D\u4e2d\u7684\u7b49\u6548\u53d8\u6362\uff0c\u5e76\u4e86\u89e3\u5b83\u4eec\u5728\u4f5c\u4e3a\u5efa\u6a21\u53d8\u6362\u65f6\u5982\u4f55\u5f71\u54cd\u5bf9\u8c61\u3002\u6211\u4eec\u8fd8\u5c06\u8ba8\u8bba\u5982\u4f55\u5728OpenGL\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u53d8\u6362\u3002</p> <p>\u5e73\u79fb\u662f\u6700\u7b80\u5355\u7684\u3002\u57282D\u4e2d\uff0c\u5e73\u79fb\u4f1a\u5c06\u4e00\u4e9b\u6570\u5b57\u6dfb\u52a0\u5230\u6bcf\u4e2a\u5750\u6807\u4e0a\u3002\u57283D\u4e2d\u4e5f\u662f\u5982\u6b64\uff1b\u6211\u4eec\u53ea\u9700\u8981\u4e09\u4e2a\u6570\u5b57\uff0c\u6765\u6307\u5b9a\u6cbf\u7740\u6bcf\u4e2a\u5750\u6807\u8f74\u7684\u8fd0\u52a8\u91cf\u3002\u901a\u8fc7(dx, dy, dz)\u8fdb\u884c\u7684\u5e73\u79fb\u5c06\u70b9(x, y, z)\u53d8\u6362\u4e3a\u70b9(x+dx, y+dy, z+dz)\u3002\u5728OpenGL\u4e2d\uff0c\u8fd9\u4e2a\u5e73\u79fb\u5c06\u7531\u4ee5\u4e0b\u547d\u4ee4\u6307\u5b9a\uff1a</p> <pre><code>glTranslatef( dx, dy, dz );\n</code></pre> <p>\u6216\u8005\u7531\u4ee5\u4e0b\u547d\u4ee4\u6307\u5b9a\uff1a</p> <pre><code>glTranslated( dx, dy, dz );\n</code></pre> <p>\u8fd9\u4e2a\u5e73\u79fb\u4f1a\u5f71\u54cd\u5728\u547d\u4ee4\u4e4b\u540e\u8fdb\u884c\u7684\u4efb\u4f55\u7ed8\u5236\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u547d\u4ee4\u6709\u4e24\u4e2a\u7248\u672c\u3002\u540d\u79f0\u4ee5\"f\"\u7ed3\u5c3e\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\uff0c\u5c06\u4e09\u4e2afloat\u503c\u4f5c\u4e3a\u53c2\u6570\u3002\u540d\u79f0\u4ee5\"d\"\u7ed3\u5c3e\u7684\u7b2c\u4e8c\u4e2a\u7248\u672c\uff0c\u5c06double\u7c7b\u578b\u7684\u53c2\u6570\u3002\u4f8b\u5982\uff0c</p> <pre><code>glTranslatef( 0, 0, 1 );\n</code></pre> <p>\u4f1a\u5c06\u5bf9\u8c61\u6cbfz\u65b9\u5411\u5e73\u79fb\u4e00\u4e2a\u5355\u4f4d\u3002</p> <p>\u7f29\u653e\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\uff1a\u4f60\u9700\u8981\u4e09\u4e2a\u7f29\u653e\u56e0\u5b50\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u3002\u7f29\u653e\u7684OpenGL\u547d\u4ee4\u662fglScale*\uff0c\u5176\u4e2d\"*\"\u53ef\u4ee5\u662f\"f\"\u6216\"d\"\u3002\u547d\u4ee4</p> <pre><code>glScalef( sx, sy, sz );\n</code></pre> <p>\u5c06\u70b9(x, y, z)\u53d8\u6362\u4e3a(xsx, ysy, z*sz)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5728x\u65b9\u5411\u7f29\u653esx\u500d\uff0c\u5728y\u65b9\u5411\u7f29\u653esy\u500d\uff0c\u5728z\u65b9\u5411\u7f29\u653esz\u500d\u3002\u7f29\u653e\u662f\u5173\u4e8e\u539f\u70b9\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5c06\u70b9\u79fb\u52a8\u5230\u539f\u70b9(0,0,0)\u66f4\u8fdc\u6216\u66f4\u8fd1\u7684\u5730\u65b9\u3002\u5bf9\u4e8e\u5747\u5300\u7f29\u653e\uff0c\u4e09\u4e2a\u56e0\u5b50\u5c06\u662f\u76f8\u540c\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u7f29\u653e\u56e0\u5b50\u4e3a\u8d1f\u4e00\u6765\u5e94\u7528\u53cd\u5c04\u3002\u4f8b\u5982\uff0c</p> <pre><code>glScalef( 1, 1, -1 );\n</code></pre> <p>\u901a\u8fc7\u53cd\u8f6cz\u5750\u6807\u7684\u7b26\u53f7\uff0c\u5c06\u5bf9\u8c61\u53cd\u5c04\u901a\u8fc7xy\u5e73\u9762\u3002\u8bf7\u6ce8\u610f\uff0c\u53cd\u5c04\u4f1a\u5c06\u53f3\u624b\u5750\u6807\u7cfb\u8f6c\u6362\u4e3a\u5de6\u624b\u5750\u6807\u7cfb\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5de6\u624b/\u53f3\u624b\u7684\u533a\u522b\u4e0d\u662f\u4e16\u754c\u7684\u5c5e\u6027\uff0c\u800c\u662f\u4f60\u9009\u62e9\u5728\u4e16\u754c\u4e0a\u5e03\u7f6e\u5750\u6807\u7684\u65b9\u5f0f\u3002</p> <p>\u57283D\u4e2d\uff0c\u65cb\u8f6c\u66f4\u52a0\u590d\u6742\u3002\u57282D\u4e2d\uff0c\u65cb\u8f6c\u662f\u56f4\u7ed5\u4e00\u4e2a\u70b9\u65cb\u8f6c\uff0c\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u539f\u70b9\u3002\u57283D\u4e2d\uff0c\u65cb\u8f6c\u662f\u56f4\u7ed5\u4e00\u6761\u7ebf\u65cb\u8f6c\uff0c\u8fd9\u6761\u7ebf\u88ab\u79f0\u4e3a\u65cb\u8f6c\u8f74\u3002\u60f3\u8c61\u5730\u7403\u56f4\u7ed5\u5176\u8f74\u65cb\u8f6c\u3002\u65cb\u8f6c\u8f74\u662f\u901a\u8fc7\u5317\u6781\u548c\u5357\u6781\u7684\u7ebf\u3002\u968f\u7740\u5730\u7403\u56f4\u7ed5\u5b83\u65cb\u8f6c\uff0c\u8f74\u4fdd\u6301\u4e0d\u53d8\uff0c\u4e0d\u5728\u8f74\u4e0a\u7684\u70b9\u56f4\u7ed5\u8f74\u8fd0\u52a8\u6210\u5706\u3002\u4efb\u4f55\u7ebf\u90fd\u53ef\u4ee5\u662f\u65cb\u8f6c\u8f74\uff0c\u4f46\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u901a\u8fc7\u539f\u70b9\u7684\u8f74\u3002\u65cb\u8f6c\u8f74\u7684\u6700\u5e38\u89c1\u9009\u62e9\u662f\u5750\u6807\u8f74\uff0c\u5373x\u8f74\u3001y\u8f74\u6216z\u8f74\u3002\u7136\u800c\uff0c\u6709\u65f6\u5019\u4f7f\u7528\u4e0d\u540c\u7684\u7ebf\u4f5c\u4e3a\u8f74\u4f1a\u66f4\u52a0\u65b9\u4fbf\u3002</p> <p>\u6709\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u901a\u8fc7\u539f\u70b9\u7684\u7ebf\uff1a\u53ea\u9700\u6307\u5b9a\u53e6\u4e00\u4e2a\u5728\u8be5\u7ebf\u4e0a\u7684\u70b9\uff0c\u9664\u4e86\u539f\u70b9\u3002\u8fd9\u5c31\u662fOpenGL\u4e2d\u7684\u505a\u6cd5\uff1a\u4e00\u4e2a\u65cb\u8f6c\u8f74\u7531\u4e09\u4e2a\u6570\u5b57(ax,ay,az)\u6307\u5b9a\uff0c\u8fd9\u4e09\u4e2a\u6570\u5b57\u4e0d\u90fd\u4e3a\u96f6\u3002\u8be5\u8f74\u662f\u901a\u8fc7(0,0,0)\u548c(ax,ay,az)\u786e\u5b9a\u7684\u7ebf\u3002\u8981\u57283D\u4e2d\u6307\u5b9a\u65cb\u8f6c\u53d8\u6362\uff0c\u4f60\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a\u8f74\u548c\u56f4\u7ed5\u8be5\u8f74\u7684\u65cb\u8f6c\u89d2\u5ea6\u3002</p> <p>\u6211\u4eec\u4ecd\u7136\u5fc5\u987b\u8003\u8651\u6b63\u89d2\u5ea6\u548c\u8d1f\u89d2\u5ea6\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u8bf4\u987a\u65f6\u9488\u6216\u9006\u65f6\u9488\u3002\u5982\u679c\u4f60\u4ece\u5317\u6781\u4e0a\u65b9\u5411\u4e0b\u770b\u65cb\u8f6c\u7684\u5730\u7403\uff0c\u4f60\u4f1a\u770b\u5230\u9006\u65f6\u9488\u65cb\u8f6c\uff1b\u5982\u679c\u4f60\u4ece\u5357\u6781\u4e0a\u65b9\u5411\u4e0b\u770b\uff0c\u4f60\u4f1a\u770b\u5230\u987a\u65f6\u9488\u65cb\u8f6c\u3002\u56e0\u6b64\uff0c\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u5dee\u5f02\u5e76\u4e0d\u660e\u786e\u3002\u4e3a\u4e86\u5b9a\u4e493D\u4e2d\u7684\u65cb\u8f6c\u65b9\u5411\uff0c\u6211\u4eec\u4f7f\u7528\u53f3\u624b\u5b9a\u5219\uff0c\u5b83\u8bf4\uff1a\u7528\u4f60\u7684\u53f3\u624b\u62c7\u6307\u6307\u5411\u8f74\u7684\u65b9\u5411\u2014\u2014\u4ece\u70b9(0,0,0)\u6307\u5411\u786e\u5b9a\u8f74\u7684\u70b9(ax,ay,az)\u3002\u7136\u540e\u65cb\u8f6c\u7684\u65b9\u5411\u5bf9\u4e8e\u6b63\u89d2\u5ea6\u662f\u7531\u4f60\u7684\u624b\u6307\u5f2f\u66f2\u7684\u65b9\u5411\u51b3\u5b9a\u7684\u3002\u6211\u5e94\u8be5\u5f3a\u8c03\uff0c\u53f3\u624b\u5b9a\u5219\u53ea\u6709\u5728\u4f60\u5728\u53f3\u624b\u5750\u6807\u7cfb\u4e2d\u5de5\u4f5c\u65f6\u624d\u6709\u6548\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u5207\u6362\u5230\u5de6\u624b\u5750\u6807\u7cfb\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u4f7f\u7528\u5de6\u624b\u5b9a\u5219\u6765\u786e\u5b9a\u65cb\u8f6c\u7684\u6b63\u65b9\u5411\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u6f14\u793a\u6765\u5e2e\u52a9\u4f60\u7406\u89e3\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u56f4\u7ed5\u8f74\u7684\u65cb\u8f6c\u3002\u4f7f\u7528\u6807\u6709\u201c+X\u201d\uff0c\u201c-X\u201d\u7b49\u6309\u94ae\u4f7f\u7acb\u65b9\u4f53\u56f4\u7ed5\u5750\u6807\u8f74\u65cb\u8f6c\uff0c\u6216\u8f93\u5165\u4efb\u4f55(x,y,z)\u70b9\u5e76\u70b9\u51fb\u201cSet\u201d\u3002\u5728\u56fe\u50cf\u4e0a\u62d6\u52a8\u9f20\u6807\u6765\u65cb\u8f6c\u573a\u666f\u3002</p> <pre><code>&lt;iframe src=\"../../../en/demos/c3/rotation-axis.html\" width=\"600\" height=\"375\"&gt;&lt;/iframe&gt;\n</code></pre> <p>OpenGL\u4e2d\u7684\u65cb\u8f6c\u51fd\u6570\u662fglRotatef(r,ax,ay,az)\u3002\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528glRotated\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u65cb\u8f6c\u89d2\u5ea6\uff0c\u4ee5\u5ea6\u4e3a\u5355\u4f4d\u3002\u5176\u4ed6\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u65cb\u8f6c\u8f74\uff0c\u5b83\u662f\u4ece(0,0,0)\u5230(ax,ay,az)\u7684\u7ebf\u3002</p> <p>\u4ee5\u4e0b\u662f\u5728OpenGL\u4e2d\u7f29\u653e\u3001\u5e73\u79fb\u548c\u65cb\u8f6c\u7684\u51e0\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>glScalef(2,2,2);        // \u4ee52\u4e3a\u56e0\u5b50\u8fdb\u884c\u5747\u5300\u7f29\u653e\u3002\n\nglScalef(0.5,1,1);      // \u53ea\u5728x\u65b9\u5411\u4e0a\u7f29\u5c0f\u4e00\u534a\u3002\n\nglScalef(-1,1,1);       // \u901a\u8fc7yz\u5e73\u9762\u53cd\u5c04\u3002\n                        // \u5c06\u6b63x\u8f74\u53cd\u5c04\u5230\u8d1fx\u8f74\u4e0a\u3002\n\nglTranslatef(5,0,0);    // \u5728\u6b63x\u65b9\u5411\u79fb\u52a85\u4e2a\u5355\u4f4d\u3002\n\nglTranslatef(3,5,-7.5); // \u5c06\u6bcf\u4e2a\u70b9(x,y,z)\u79fb\u52a8\u5230(x+3, y+5, z-7.5)\u3002\n\nglRotatef(90,1,0,0);    // \u56f4\u7ed5x\u8f74\u65cb\u8f6c90\u5ea6\u3002\n                        // \u5c06+y\u8f74\u79fb\u52a8\u5230+z\u8f74\u4e0a\n                        //    \u548c+z\u8f74\u79fb\u52a8\u5230-y\u8f74\u4e0a\u3002\n\nglRotatef(-90,-1,0,0);  // \u4e0e\u4e0a\u4e00\u4e2a\u65cb\u8f6c\u5177\u6709\n\n\u76f8\u540c\u7684\u6548\u679c\u3002\n\nglRotatef(90,0,1,0);    // \u56f4\u7ed5y\u8f74\u65cb\u8f6c90\u5ea6\u3002\n                        // \u5c06+z\u8f74\u79fb\u52a8\u5230+x\u8f74\u4e0a\n                        //    \u548c+x\u8f74\u79fb\u52a8\u5230-z\u8f74\u4e0a\u3002\n\nglRotatef(90,0,0,1);    // \u56f4\u7ed5z\u8f74\u65cb\u8f6c90\u5ea6\u3002\n                        // \u5c06+x\u8f74\u79fb\u52a8\u5230+y\u8f74\u4e0a\n                        //    \u548c+y\u8f74\u79fb\u52a8\u5230-x\u8f74\u4e0a\u3002\n\nglRotatef(30,1.5,2,-3); // \u56f4\u7ed5\u901a\u8fc7\u70b9(0,0,0)\u548c(1.5,2,-3)\u7684\u7ebf\u65cb\u8f6c30\u5ea6\u3002\n</code></pre> <p>\u8bb0\u4f4f\uff0c\u53d8\u6362\u5e94\u7528\u4e8e\u5728\u53d8\u6362\u51fd\u6570\u8c03\u7528\u4e4b\u540e\u7ed8\u5236\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u53d8\u6362\u6309\u7167\u5b83\u4eec\u5728\u4ee3\u7801\u4e2d\u51fa\u73b0\u7684\u76f8\u53cd\u987a\u5e8f\u5e94\u7528\u4e8e\u5bf9\u8c61\u3002</p> <p>\u5f53\u7136\uff0cOpenGL \u65e2\u53ef\u4ee5\u5728\u4e8c\u7ef4\u4e2d\u7ed8\u5236\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e09\u7ef4\u4e2d\u7ed8\u5236\u3002\u5728OpenGL\u4e2d\u8fdb\u884c\u4e8c\u7ef4\u7ed8\u5236\u65f6\uff0c\u4f60\u53ef\u4ee5\u5728xy\u5e73\u9762\u4e0a\u7ed8\u5236\uff0c\u5c06 z \u5750\u6807\u8bbe\u4e3a\u96f6\u3002\u5728\u8fdb\u884c\u4e8c\u7ef4\u7ed8\u5236\u65f6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5e94\u7528\u4e8c\u7ef4\u7248\u672c\u7684\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u5e73\u79fb\u3002OpenGL \u6ca1\u6709\u4e8c\u7ef4\u53d8\u6362\u51fd\u6570\uff0c\u4f46\u4f60\u53ef\u4ee5\u4f7f\u7528\u5e26\u6709\u9002\u5f53\u53c2\u6570\u7684\u4e09\u7ef4\u7248\u672c\uff1a</p> <ul> <li>\u5bf9\u4e8e\u4e8c\u7ef4\u4e2d\u7684\u5e73\u79fb (dx, dy)\uff0c\u4f7f\u7528 glTranslatef(dx, dy, 0)\u3002\u5728 z \u65b9\u5411\u4e0a\u7684\u96f6\u5e73\u79fb\u610f\u5473\u7740\u53d8\u6362\u4e0d\u6539\u53d8 z \u5750\u6807\uff0c\u56e0\u6b64\u5b83\u5c06 xy \u5e73\u9762\u6620\u5c04\u5230\u81ea\u8eab\u3002\uff08\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 glTranslated \u4ee3\u66ff glTranslatef\u3002\uff09</li> <li>\u5bf9\u4e8e\u4e8c\u7ef4\u4e2d\u7684\u7f29\u653e (sx, sy)\uff0c\u4f7f\u7528 glScalef(sx, sy, 1)\uff0c\u8fd9\u6837\u53ea\u5728 x \u548c y \u65b9\u5411\u4e0a\u8fdb\u884c\u7f29\u653e\uff0c\u4e0d\u6539\u53d8 z \u5750\u6807\u3002</li> <li>\u5bf9\u4e8e\u56f4\u7ed5\u539f\u70b9\u7684\u89d2\u5ea6\u4e3a r \u7684\u4e8c\u7ef4\u65cb\u8f6c\uff0c\u4f7f\u7528 glRotatef(r, 0, 0, 1)\u3002\u8fd9\u662f\u56f4\u7ed5 z \u8f74\u7684\u65cb\u8f6c\uff0c\u5b83\u5c06 xy \u5e73\u9762\u65cb\u8f6c\u5230\u81ea\u8eab\u3002\u5728\u901a\u5e38\u7684OpenGL\u5750\u6807\u7cfb\u7edf\u4e2d\uff0cz \u8f74\u6307\u5411\u5c4f\u5e55\u5916\uff0c\u53f3\u624b\u5b9a\u5219\u8868\u793a\u6b63\u89d2\u5ea6\u7684\u65cb\u8f6c\u5c06\u987a\u65f6\u9488\u65b9\u5411\u5728 xy \u5e73\u9762\u4e0a\u8fdb\u884c\u3002\u7531\u4e8e x \u8f74\u6307\u5411\u53f3\u4fa7\uff0cy \u8f74\u6307\u5411\u4e0a\u65b9\uff0c\u987a\u65f6\u9488\u65cb\u8f6c\u5c06\u6b63 x \u8f74\u65cb\u8f6c\u5230\u6b63 y \u8f74\u65b9\u5411\u3002\u8fd9\u4e0e\u6211\u4eec\u4e4b\u524d\u7528\u4e8e\u65cb\u8f6c\u6b63\u65b9\u5411\u7684\u7ea6\u5b9a\u76f8\u540c\u3002</li> </ul> <p>The basic transforms in 3D are extensions of the basic transforms that you are already familiar with from 2D: rotation, scaling, and translation. We will look at the 3D equivalents and see how they affect objects when applied as modeling transforms. We will also discuss how to use the transforms in OpenGL.</p> <p>Translation is easiest. In 2D, a translation adds some number onto each coordinate. The same is true in 3D; we just need three numbers, to specify the amount of motion in the direction of each of the coordinate axes. A translation by (dx,dy,dz) transforms a point (x,y,z) to the point (x+dx, y+dy, z+dz). In OpenGL, this translation would be specified by the command</p> <pre><code>glTranslatef( dx, dy, dz );\n</code></pre> <p>or by the command</p> <pre><code>glTranslated( dx, dy, dz );\n</code></pre> <p>The translation will affect any drawing that is done after the command is given. Note that there are two versions of the command. The first, with a name ending in \"f\", takes three float values as parameters. The second, with a name ending in \"d\", takes parameters of type double. As an example,</p> <pre><code>glTranslatef( 0, 0, 1 );\n</code></pre> <p>would translate objects by one unit in the z direction.</p> <p>Scaling works in a similar way: Instead of one scaling factor, you need three. The OpenGL command for scaling is glScale*, where the \"*\" can be either \"f\" or \"d\". The command</p> <pre><code>glScalef( sx, sy, sz );\n</code></pre> <p>transforms a point (x,y,z) to (xsx, ysy, z*sz). That is, it scales by a factor of sx in the x direction, sy in the y direction, and sz in the z direction. Scaling is about the origin; that is, it moves points farther from or closer to the origin, (0,0,0). For uniform scaling, all three factors would be the same. You can use scaling by a factor of minus one to apply a reflection. For example,</p> <pre><code>glScalef( 1, 1, -1 );\n</code></pre> <p>reflects objects through the xy-plane by reversing the sign of the z coordinate. Note that a reflection will convert a right-handed coordinate system into a left-handed coordinate system, and vice versa. Remember that the left/right handed distinction is not a property of the world, just of the way that one chooses to lay out coordinates on the world.</p> <p>Rotation in 3D is harder. In 2D, rotation is rotation about a point, which is usually taken to be the origin. In 3D, rotation is rotation about a line, which is called the axis of rotation. Think of the Earth rotating about its axis. The axis of rotation is the line that passes through the North Pole and the South Pole. The axis stays fixed as the Earth rotates around it, and points that are not on the axis move in circles about the axis. Any line can be an axis of rotation, but we generally use an axis that passes through the origin. The most common choices for axis of rotation are the coordinates axes, that is, the x-axis, the y-axis, or the z-axis. Sometimes, however, it's convenient to be able to use a different line as the axis.</p> <p>There is an easy way to specify a line that passes through the origin: Just specify one other point that is on the line, in addition to the origin. That's how things are done in OpenGL: An axis of rotation is specified by three numbers, (ax,ay,az), which are not all zero. The axis is the line through (0,0,0) and (ax,ay,az). To specify a rotation transformation in 3D, you have to specify an axis and the angle of rotation about that axis.</p> <p>We still have to account for the difference between positive and negative angles. We can't just say clockwise or counterclockwise. If you look down on the rotating Earth from above the North pole, you see a counterclockwise rotation; if you look down on it from above the South pole, you see a clockwise rotation. So, the difference between the two is not well-defined. To define the direction of rotation in 3D, we use the right-hand rule, which says: Point the thumb of your right hand in the direction of the axis \u2014 from the point (0,0,0) towards the point (ax,ay,az) that determines the axis. Then the direction of rotation for positive angles is given by the direction in which your fingers curl. I should emphasize that the right-hand rule only works if you are working in a right-handed coordinate system. If you have switched to a left-handed coordinate system, then you need to use a left-hand rule to determine the positive direction of rotation.</p> <p>You can use the following demo to help you understand rotation about an axis in three-dimensional space. Use the buttons labeled \"+X\", \"-X\", and so on to make the cube rotate about the coordinate axes, or enter any (x,y,z) point and click \"Set\". Drag your mouse on the image to rotate the scene.</p> <p></p> <p>The rotation function in OpenGL is glRotatef(r,ax,ay,az). You can also use glRotated. The first parameter specifies the angle of rotation, measured in degrees. The other three parameters specify the axis of rotation, which is the line from (0,0,0) to (ax,ay,az).</p> <p>Here are a few examples of scaling, translation, and scaling in OpenGL:</p> <pre><code>glScalef(2,2,2);        // Uniform scaling by a factor of 2.\n\nglScalef(0.5,1,1);      // Shrink by half in the x-direction only.\n\nglScalef(-1,1,1);       // Reflect through the yz-plane.\n                        // Reflects the positive x-axis onto negative x.\n\nglTranslatef(5,0,0);    // Move 5 units in the positive x-direction.\n\nglTranslatef(3,5,-7.5); // Move each point (x,y,z) to (x+3, y+5, z-7.5).\n\nglRotatef(90,1,0,0);    // Rotate 90 degrees about the x-axis.\n                        // Moves the +y axis onto the +z axis\n                        //    and the +z axis onto the -y axis.\n\nglRotatef(-90,-1,0,0);  // Has the same effect as the previous rotation.\n\nglRotatef(90,0,1,0);    // Rotate 90 degrees about the y-axis.\n                        // Moves the +z axis onto the +x axis\n                        //    and the +x axis onto the -z axis.\n\nglRotatef(90,0,0,1);    // Rotate 90 degrees about the z-axis.\n                        // Moves the +x axis onto the +y axis\n                        //    and the +y axis onto the -x axis.\n\nglRotatef(30,1.5,2,-3); // Rotate 30 degrees about the line through\n                        //    the points (0,0,0) and (1.5,2,-3).\n</code></pre> <p>Remember that transforms are applied to objects that are drawn after the transformation function is called, and that transformations apply to objects in the opposite order of the order in which they appear in the code.</p> <p>Of course, OpenGL can draw in 2D as well as in 3D. For 2D drawing in OpenGL, you can draw on the xy-plane, using zero for the z coordinate. When drawing in 2D, you will probably want to apply 2D versions of rotation, scaling, and translation. OpenGL does not have 2D transform functions, but you can just use the 3D versions with appropriate parameters:</p> <ul> <li>For translation by (dx,dy) in 2D, use glTranslatef(dx, dy, 0). The zero translation in the z direction means that the transform doesn't change the z coordinate, so it maps the xy-plane to itself. (Of course, you could use glTranslated instead of glTranslatef.)</li> <li>For scaling by (sx,sy) in 2D, use glScalef(sx, sy, 1), which scales only in the x and y directions, leaving the z coordinate unchanged.</li> <li>For rotation through an angle r about the origin in 2D, use glRotatef(r, 0, 0, 1). This is rotation about the z-axis, which rotates the xy-plane into itself. In the usual OpenGL coordinate system, the z-axis points out of the screen, and the right-hand rule says that rotation by a positive angle will be in the counterclockwise direction in the xy-plane. Since the x-axis points to the right and the y-axis points upwards, a counterclockwise rotation rotates the positive x-axis in the direction of the positive y-axis. This is the same convention that we have used previously for the positive direction of rotation.</li> </ul>"},{"location":"cn/c3/s2/#323-\u5c42\u6b21\u5efa\u6a21","title":"3.2.3 \u5c42\u6b21\u5efa\u6a21","text":"<p>Hierarchical Modeling</p> \u4e2d\u6587\u82f1\u6587 <p>\u5efa\u6a21\u53d8\u6362\u7ecf\u5e38\u7528\u4e8e\u5206\u5c42\u5efa\u6a21\uff0c\u5141\u8bb8\u5c06\u590d\u6742\u5bf9\u8c61\u7531\u7b80\u5355\u5bf9\u8c61\u7ec4\u5408\u800c\u6210\u3002\u53c2\u89c1\u7b2c 2.4 \u8282\u3002\u7b80\u8981\u56de\u987e\u4e00\u4e0b\uff1a\u5728\u5206\u5c42\u5efa\u6a21\u4e2d\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5728\u5176\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u5b9a\u4e49\uff0c\u901a\u5e38\u4f7f\u7528 (0,0,0) \u4f5c\u4e3a\u53c2\u8003\u70b9\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u5bf9\u8be5\u5bf9\u8c61\u8fdb\u884c\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\uff0c\u4ee5\u5c06\u5176\u653e\u7f6e\u5230\u4e16\u754c\u5750\u6807\u6216\u66f4\u590d\u6742\u7684\u5bf9\u8c61\u4e2d\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u5c06\u5efa\u6a21\u53d8\u6362\u7684\u6548\u679c\u9650\u5236\u5728\u4e00\u4e2a\u5bf9\u8c61\u6216\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\u4e0a\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u53d8\u6362\u5806\u6808\u6765\u5b9e\u73b0\u3002\u5728\u7ed8\u5236\u4e00\u4e2a\u5bf9\u8c61\u4e4b\u524d\uff0c\u5c06\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\u63a8\u9001\u5230\u5806\u6808\u4e0a\u3002\u5728\u7ed8\u5236\u5bf9\u8c61\u53ca\u5176\u5b50\u5bf9\u8c61\u4e4b\u540e\uff0c\u4f7f\u7528\u4efb\u4f55\u5fc5\u8981\u7684\u4e34\u65f6\u53d8\u6362\uff0c\u901a\u8fc7\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u6765\u6062\u590d\u5148\u524d\u7684\u53d8\u6362\u3002</p> <p>OpenGL 1.1 \u7ef4\u62a4\u4e00\u4e2a\u53d8\u6362\u5806\u6808\uff0c\u5e76\u63d0\u4f9b\u4e86\u64cd\u4f5c\u8be5\u5806\u6808\u7684\u51fd\u6570\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u5b83\u6709\u51e0\u4e2a\u7528\u4e8e\u4e0d\u540c\u76ee\u7684\u7684\u53d8\u6362\u5806\u6808\uff0c\u8fd9\u5f15\u5165\u4e86\u4e00\u4e9b\u590d\u6742\u6027\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u63a8\u8fdf\u8ba8\u8bba\u3002\uff09\u7531\u4e8e\u53d8\u6362\u88ab\u8868\u793a\u4e3a\u77e9\u9635\uff0c\u6240\u4ee5\u5806\u6808\u5b9e\u9645\u4e0a\u662f\u77e9\u9635\u7684\u5806\u6808\u3002\u5728OpenGL\u4e2d\uff0c\u64cd\u4f5c\u5806\u6808\u7684\u51fd\u6570\u547d\u540d\u4e3a glPushMatrix() \u548c glPopMatrix()\u3002</p> <p>\u8fd9\u4e9b\u51fd\u6570\u4e0d\u63a5\u53d7\u53c2\u6570\uff0c\u4e5f\u4e0d\u8fd4\u56de\u503c\u3002OpenGL \u4f1a\u8ddf\u8e2a\u4e00\u4e2a\u5f53\u524d\u77e9\u9635\uff0c\u5b83\u662f\u6240\u6709\u5df2\u5e94\u7528\u7684\u53d8\u6362\u7684\u7ec4\u5408\u3002\u8c03\u7528\u8bf8\u5982 glScalef \u7684\u51fd\u6570\u53ea\u662f\u4fee\u6539\u5f53\u524d\u77e9\u9635\u3002\u5f53\u7ed8\u5236\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f7f\u7528 glVertex* \u51fd\u6570\u6307\u5b9a\u7684\u5750\u6807\u5c06\u88ab\u5f53\u524d\u77e9\u9635\u8fdb\u884c\u53d8\u6362\u3002\u8fd8\u6709\u53e6\u4e00\u4e2a\u5f71\u54cd\u5f53\u524d\u77e9\u9635\u7684\u51fd\u6570\uff1aglLoadIdentity()\u3002\u8c03\u7528 glLoadIdentity \u5c06\u5f53\u524d\u77e9\u9635\u8bbe\u7f6e\u4e3a\u5355\u4f4d\u53d8\u6362\uff0c\u8868\u793a\u5750\u6807\u6ca1\u6709\u4efb\u4f55\u53d8\u5316\uff0c\u8fd9\u662f\u4e00\u7cfb\u5217\u53d8\u6362\u7684\u5e38\u89c1\u8d77\u70b9\u3002</p> <p>\u5f53\u8c03\u7528 glPushMatrix() \u51fd\u6570\u65f6\uff0c\u5f53\u524d\u77e9\u9635\u7684\u526f\u672c\u5c06\u88ab\u63a8\u9001\u5230\u5806\u6808\u4e0a\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0d\u4f1a\u66f4\u6539\u5f53\u524d\u77e9\u9635\uff1b\u5b83\u53ea\u662f\u5728\u5806\u6808\u4e0a\u4fdd\u5b58\u4e86\u4e00\u4e2a\u526f\u672c\u3002\u5f53\u8c03\u7528 glPopMatrix() \u65f6\uff0c\u5806\u6808\u9876\u90e8\u7684\u77e9\u9635\u5c06\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\uff0c\u5e76\u66ff\u6362\u5f53\u524d\u77e9\u9635\u3002\u8bf7\u6ce8\u610f\uff0cglPushMatrix \u548c glPopMatrix \u5fc5\u987b\u59cb\u7ec8\u6210\u5bf9\u51fa\u73b0\uff1bglPushMatrix \u4fdd\u5b58\u5f53\u524d\u77e9\u9635\u7684\u526f\u672c\uff0c\u76f8\u5e94\u7684 glPopMatrix \u8c03\u7528\u6062\u590d\u8be5\u526f\u672c\u3002\u5728\u8c03\u7528 glPushMatrix \u548c\u76f8\u5e94\u7684 glPopMatrix \u4e4b\u95f4\uff0c\u53ef\u4ee5\u989d\u5916\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u7684\u6210\u5bf9\u8c03\u7528\uff0c\u53ea\u8981\u5b83\u4eec\u88ab\u6b63\u786e\u5730\u914d\u5bf9\u5373\u53ef\u3002\u901a\u5e38\uff0c\u4f60\u4f1a\u5728\u7ed8\u5236\u4e00\u4e2a\u5bf9\u8c61\u4e4b\u524d\u8c03\u7528 glPushMatrix\uff0c\u5e76\u5728\u5b8c\u6210\u8be5\u5bf9\u8c61\u4e4b\u540e\u8c03\u7528 glPopMatrix\u3002\u5728\u6b64\u671f\u95f4\uff0c\u7ed8\u5236\u5b50\u5bf9\u8c61\u53ef\u80fd\u9700\u8981\u989d\u5916\u7684\u8fd9\u4e9b\u51fd\u6570\u7684\u6210\u5bf9\u8c03\u7528\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u7ed8\u5236\u4e00\u4e2a\u7acb\u65b9\u4f53\u3002\u4f7f\u7528 glBegin/glEnd \u6765\u7ed8\u5236\u6bcf\u4e2a\u9762\u5e76\u4e0d\u96be\uff0c\u4f46\u8ba9\u6211\u4eec\u4f7f\u7528\u53d8\u6362\u6765\u5b9e\u73b0\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2a\u7ed8\u5236\u6b63\u9762\u7684\u6b63\u65b9\u5f62\u7684\u51fd\u6570\u5f00\u59cb\u3002\u5bf9\u4e8e\u5927\u5c0f\u4e3a 1 \u7684\u7acb\u65b9\u4f53\uff0c\u6b63\u9762\u5c06\u4f4d\u4e8e\u5c4f\u5e55\u524d\u534a\u4e2a\u5355\u4f4d\u5904\uff0c\u5728 z = 0.5 \u5e73\u9762\u4e0a\uff0c\u5e76\u4e14\u5176\u9876\u70b9\u5206\u522b\u4e3a (-0.5, -0.5, 0.5)\u3001(0.5, -0.5, 0.5)\u3001(0.5, 0.5, 0.5) \u548c (-0.5, 0.5, 0.5)\u3002\u4ee5\u4e0b\u662f\u7ed8\u5236\u6b63\u65b9\u5f62\u7684\u51fd\u6570\u3002\u51fd\u6570\u7684\u53c2\u6570\u662f\u5728\u8303\u56f4 0.0 \u5230 1.0 \u5185\u7684\u6d6e\u70b9\u6570\uff0c\u8868\u793a\u6b63\u65b9\u5f62\u7684 RGB \u989c\u8272\uff1a</p> <pre><code>void square(float r, float g, float b) {\n    glColor3f(r, g, b);  // \u8bbe\u7f6e\u6b63\u65b9\u5f62\u7684\u989c\u8272\u3002\n    glBegin(GL_TRIANGLE_FAN);\n    glVertex3f(-0.5, -0.5, 0.5);\n    glVertex3f(0.5, -0.5, 0.5);\n    glVertex3f(0.5, 0.5, 0.5);\n    glVertex3f(-0.5, 0.5, 0.5);\n    glEnd();\n}\n</code></pre> <p>\u8981\u521b\u5efa\u4e00\u4e2a\u7ea2\u8272\u7684\u7acb\u65b9\u4f53\u6b63\u9762\uff0c\u6211\u4eec\u53ea\u9700\u8c03\u7528 square(1,0,0)\u3002\u73b0\u5728\uff0c\u8003\u8651\u53f3\u4fa7\u9762\uff0c\u5b83\u5782\u76f4\u4e8e x \u8f74\uff0c\u5728 x = 0.5 \u5e73\u9762\u4e0a\u3002\u8981\u521b\u5efa\u4e00\u4e2a\u53f3\u4fa7\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6b63\u9762\u5f00\u59cb\uff0c\u7136\u540e\u7ed5\u7740 y \u8f74\u65cb\u8f6c 90 \u5ea6\u3002\u8003\u8651\u5c06\u6b63\u9762\uff08\u7ea2\u8272\uff09\u7ed5\u7740 y \u8f74\u65cb\u8f6c\u5230\u53f3\u4fa7\u9762\uff08\u7eff\u8272\uff09\u4f4d\u7f6e\u7684\u64cd\u4f5c\uff1a</p> <p></p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u7ed8\u5236\u4e00\u4e2a\u7eff\u8272\u7684\u7acb\u65b9\u4f53\u53f3\u4fa7\u9762\uff1a</p> <pre><code>glPushMatrix();\nglRotatef(90, 0, 1, 0);\nsquare(0, 1, 0);\nglPopMatrix();\n</code></pre> <p>\u8c03\u7528 glPushMatrix \u548c glPopMatrix \u786e\u4fdd\u5bf9\u6b63\u65b9\u5f62\u5e94\u7528\u7684\u65cb\u8f6c\u4e0d\u4f1a\u5ef6\u7eed\u5230\u7a0d\u540e\u7ed8\u5236\u7684\u5bf9\u8c61\u4e0a\u3002\u5176\u4ed6\u56db\u4e2a\u9762\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5236\u4f5c\uff0c\u65b9\u6cd5\u662f\u56f4\u7ed5\u5750\u6807\u8f74\u65cb\u8f6c\u6b63\u9762\u3002\u60a8\u5e94\u8be5\u5c1d\u8bd5\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\u53ef\u89c6\u5316\u6240\u9700\u7684\u65cb\u8f6c\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u8fd9\u4e9b\u7ec4\u5408\u5230\u4e00\u4e2a\u7ed8\u5236\u7acb\u65b9\u4f53\u7684\u51fd\u6570\u4e2d\u3002\u4e3a\u4e86\u589e\u52a0\u8da3\u5473\u6027\uff0c\u7acb\u65b9\u4f53\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u53c2\u6570\uff1a</p> <pre><code>void cube(float size) {  // \u7ed8\u5236\u8fb9\u957f\u4e3a size \u7684\u7acb\u65b9\u4f53\u3002\n\n    glPushMatrix();  // \u4fdd\u5b58\u5f53\u524d\u77e9\u9635\u7684\u526f\u672c\u3002\n    glScalef(size, size, size); // \u5c06\u5355\u4f4d\u7acb\u65b9\u4f53\u7f29\u653e\u5230\u6240\u9700\u5927\u5c0f\u3002\n\n    square(1, 0, 0); // \u7ea2\u8272\u6b63\u9762\n\n    glPushMatrix();\n    glRotatef(90, 0, 1, 0);\n    square(0, 1, 0); // \u7eff\u8272\u53f3\u4fa7\u9762\n    glPopMatrix();\n\n    glPushMatrix();\n    glRotatef(-90, 1, 0, 0);\n    square(0, 0, 1); // \u84dd\u8272\u9876\u90e8\u9762\n    glPopMatrix();\n\n    glPushMatrix();\n    glRotatef(180, 0, 1, 0);\n    square(0, 1, 1); // \u9752\u8272\u80cc\u9762\n    glPopMatrix();\n\n    glPushMatrix();\n    glRotatef(-90, 0, 1, 0);\n    square(1, 0, 1); // \u54c1\u7ea2\u8272\u5de6\u4fa7\u9762\n    glPopMatrix();\n\n    glPushMatrix();\n    glRotatef(90, 1, 0, 0);\n    square(1, 1, 0); // \u9ec4\u8272\u5e95\u90e8\u9762\n    glPopMatrix();\n\n    glPopMatrix(); // \u5c06\u77e9\u9635\u6062\u590d\u5230\u8c03\u7528 cube() \u4e4b\u524d\u7684\u72b6\u6001\u3002\n\n}\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8f glut/unlit-cube.c \u4f7f\u7528\u6b64\u51fd\u6570\u7ed8\u5236\u7acb\u65b9\u4f53\uff0c\u5e76\u5141\u8bb8\u60a8\u901a\u8fc7\u6309\u7bad\u5934\u952e\u6765\u65cb\u8f6c\u7acb\u65b9\u4f53\u3002Java \u7248\u672c\u662f jogl/UnlitCube.java\uff0cWeb \u7248\u672c\u662f glsim/unlit-cube.html\u3002\u4e0b\u9762\u662f\u7acb\u65b9\u4f53\u7684\u56fe\u50cf\uff0c\u7ed5 x \u8f74\u65cb\u8f6c\u4e86 15 \u5ea6\uff0c\u7ed5 y \u8f74\u65cb\u8f6c\u4e86 -15 \u5ea6\uff0c\u4ee5\u663e\u793a\u9876\u90e8\u548c\u53f3\u4fa7\uff1a</p> <p></p> <p>\u5bf9\u4e8e\u5177\u6709 glPushMatrix \u548c glPopMatrix \u7684\u5c42\u6b21\u5efa\u6a21\u7684\u66f4\u590d\u6742\u793a\u4f8b\uff0c\u8bf7\u67e5\u770b\u5b50\u8282 2.4.1\u4e2d\u4f5c\u4e3a\u793a\u4f8b\u4f7f\u7528\u7684\u201c\u5c0f\u8f66\u548c\u98ce\u8f66\u201d\u52a8\u753b\u7684 OpenGL \u7b49\u6548\u7248\u672c\u3002\u8be5\u793a\u4f8b\u7684\u4e09\u4e2a\u7248\u672c\u5206\u522b\u662f\uff1aglut/opengl-cart-and-windmill-2d.c\u3001jogl/CartAndWindmillJogl2D.java \u548c glsim/opengl-cart-and-windmill.html\u3002\u6b64\u7a0b\u5e8f\u662f OpenGL \u4e2d\u5c42\u6b21 2D \u56fe\u5f62\u7684\u793a\u4f8b\u3002</p> <p>\u8bf7\u8bb0\u4f4f\uff0c\u50cf glRotated() \u548c glPushMatrix() \u8fd9\u6837\u7684\u53d8\u6362\u548c\u77e9\u9635\u51fd\u6570\u662f\u8001\u5f0f\u7684 OpenGL\u3002\u5728 WebGL \u548c\u5176\u4ed6\u73b0\u4ee3\u56fe\u5f62 API \u4e2d\uff0c\u60a8\u5c06\u8d1f\u8d23\u81ea\u884c\u7ba1\u7406\u53d8\u6362\u548c\u77e9\u9635\u3002\u60a8\u5f88\u53ef\u80fd\u4f1a\u4f7f\u7528\u8f6f\u4ef6\u5e93\u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u8be5\u5e93\u63d0\u4f9b\u4e86\u4e0e OpenGL 1.1 \u5185\u7f6e\u51fd\u6570\u975e\u5e38\u76f8\u4f3c\u7684\u51fd\u6570\u3002</p> <p>Modeling transformations are often used in hierarchical modeling, which allows complex objects to be built up out of simpler objects. See Section 2.4. To review briefly: In hierarchical modeling, an object can be defined in its own natural coordinate system, usually using (0,0,0) as a reference point. The object can then be scaled, rotated, and translated to place it into world coordinates or into a more complex object. To implement this, we need a way of limiting the effect of a modeling transformation to one object or to part of an object. That can be done using a stack of transforms. Before drawing an object, push a copy of the current transform onto the stack. After drawing the object and its sub-objects, using any necessary temporary transformations, restore the previous transform by popping it from the stack.</p> <p>OpenGL 1.1 maintains a stack of transforms and provides functions for manipulating that stack. (In fact it has several transform stacks, for different purposes, which introduces some complications that we will postpone to the next section.) Since transforms are represented as matrices, the stack is actually a stack of matrices. In OpenGL, the functions for operating on the stack are named glPushMatrix() and glPopMatrix().</p> <p>These functions do not take parameters or return a value. OpenGL keeps track of a current matrix, which is the composition of all transforms that have been applied. Calling a function such as glScalef simply modifies the current matrix. When an object is drawn, using the glVertex* functions, the coordinates that were specified for the object are transformed by the current matrix. There is another function that affects the current matrix: glLoadIdentity(). Calling glLoadIdentity sets the current matrix to be the identity transform, which represents no change of coordinates at all and is the usual starting point for a series of transformations.</p> <p>When the function glPushMatrix() is called, a copy of the current matrix is pushed onto the stack. Note that this does not change the current matrix; it just saves a copy on the stack. When glPopMatrix() is called, the matrix on the top of the stack is popped from the stack, and that matrix replaces the current matrix. Note that glPushMatrix and glPopMatrix must always occur in corresponding pairs; glPushMatrix saves a copy of the current matrix, and a corresponding call to glPopMatrix restores that copy. Between a call to glPushMatrix and the corresponding call to glPopMatrix, there can be additional calls of these functions, as long as they are properly paired. Usually, you will call glPushMatrix before drawing an object and glPopMatrix after finishing that object. In between, drawing sub-objects might require additional pairs of calls to those functions.</p> <p>As an example, suppose that we want to draw a cube. It's not hard to draw each face using glBegin/glEnd, but let's do it with transformations. We can start with a function that draws a square in the position of the front face of the cube. For a cube of size 1, the front face would sit one-half unit in front of the screen, in the plane z = 0.5, and it would have vertices at (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (0.5, 0.5, 0.5), and (-0.5, 0.5, 0.5). Here is a function that draws the square. The function's parameters are floating point numbers in the range 0.0 to 1.0 that give the RGB color of the square:</p> <pre><code>void square( float r, float g, float b ) {\n    glColor3f(r,g,b);  // Set the color for the square.\n    glBegin(GL_TRIANGLE_FAN);\n    glVertex3f(-0.5, -0.5, 0.5);\n    glVertex3f(0.5, -0.5, 0.5);\n    glVertex3f(0.5, 0.5, 0.5);\n    glVertex3f(-0.5, 0.5, 0.5);\n    glEnd();\n}\n</code></pre> <p>To make a red front face for the cube, we just need to call square(1,0,0). Now, consider the right face, which is perpendicular to the x-axis, in the plane x = 0.5. To make a right face, we can start with a front face and rotate it 90 degrees about the y-axis. Think about rotating the front face (red) to the position of the right face (green) in this illustration by rotating the red square about the y-axis:</p> <p></p> <p>So, we can draw a green right face for the cube with</p> <pre><code>glPushMatrix();\nglRotatef(90, 0, 1, 0);\nsquare(0, 1, 0);\nglPopMatrix();\n</code></pre> <p>The calls to glPushMatrix and glPopMatrix ensure that the rotation that is applied to the square will not carry over to objects that are drawn later. The other four faces can be made in a similar way, by rotating the front face about the coordinate axes. You should try to visualize the rotation that you need in each case. We can combine it all into a function that draws a cube. To make it more interesting, the size of the cube is a parameter:</p> <pre><code>void cube(float size) {  // Draws a cube with side length = size.\n\n    glPushMatrix();  // Save a copy of the current matrix.\n    glScalef(size,size,size); // Scale unit cube to desired size.\n\n    square(1, 0, 0); // red front face\n\n    glPushMatrix();\n    glRotatef(90, 0, 1, 0);\n    square(0, 1, 0); // green right face\n    glPopMatrix();\n\n    glPushMatrix();\n    glRotatef(-90, 1, 0, 0);\n    square(0, 0, 1); // blue top face\n    glPopMatrix();\n\n    glPushMatrix();\n    glRotatef(180, 0, 1, 0);\n    square(0, 1, 1); // cyan back face\n    glPopMatrix();\n\n    glPushMatrix();\n    glRotatef(-90, 0, 1, 0);\n    square(1, 0, 1); // magenta left face\n    glPopMatrix();\n\n    glPushMatrix();\n    glRotatef(90, 1, 0, 0);\n    square(1, 1, 0); // yellow bottom face\n    glPopMatrix();\n\n    glPopMatrix(); // Restore matrix to its state before cube() was called.\n\n}\n</code></pre> <p>The sample program glut/unlit-cube.c uses this function to draw a cube, and lets you rotate the cube by pressing the arrow keys. A Java version is jogl/UnlitCube.java, and a web version is glsim/unlit-cube.html. Here is an image of the cube, rotated by 15 degrees about the x-axis and -15 degrees about the y-axis to make the top and right sides visible:</p> <p></p> <p>For a more complex example of hierarchical modeling with glPushMatrix and glPopMatrix, you can check out an OpenGL equivalent of the \"cart and windmills\" animation that was used as an example in Subsection 2.4.1. The three versions of the example are: glut/opengl-cart-and-windmill-2d.c, jogl/CartAndWindmillJogl2D.java, and glsim/opengl-cart-and-windmill.html. This program is an example of hierarchical 2D graphics in OpenGL.</p> <p>Keep in mind that transformation and matrix functions such as glRotated() and glPushMatrix() are old-fashioned OpenGL. In WebGL and other modern graphics APIs, you will be responsible for managing transforms and matrices on your own. You are quite likely to do that using a software library that provides functions very similar to those that are built into OpenGL 1.1.</p>"},{"location":"cn/c3/s3/","title":"3.3 \u6295\u5f71\u4e0e\u89c2\u770b","text":"<p>Projection and Viewing</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u524d\u9762\u7684\u90e8\u5206\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u5efa\u6a21\u53d8\u6362\uff0c\u5b83\u5c06\u5bf9\u8c61\u5750\u6807\u8f6c\u6362\u4e3a\u4e16\u754c\u5750\u6807\u3002\u7136\u800c\uff0c\u5bf9\u4e8e3D\u8ba1\u7b97\u673a\u56fe\u5f62\uff0c\u4f60\u9700\u8981\u4e86\u89e3\u5176\u4ed6\u51e0\u79cd\u5750\u6807\u7cfb\u53ca\u5176\u4e4b\u95f4\u7684\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u5728\u672c\u8282\u4e2d\u8ba8\u8bba\u5b83\u4eec\u3002</p> <p>\u6211\u4eec\u9996\u5148\u6982\u8ff0\u5404\u79cd\u5750\u6807\u7cfb\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u590d\u4e60\u5185\u5bb9\uff0c\u800c\u53e6\u4e00\u4e9b\u662f\u65b0\u5185\u5bb9\u3002</p> <p>In the previous section, we looked at the modeling transformation, which transforms from object coordinates to world coordinates. However, for 3D computer graphics, you need to know about several other coordinate systems and the transforms between them. We discuss them in this section.</p> <p>We start with an overview of the various coordinate systems. Some of this is review, and some of it is new.</p>"},{"location":"cn/c3/s3/#331-\u591a\u79cd\u5750\u6807\u7cfb","title":"3.3.1 \u591a\u79cd\u5750\u6807\u7cfb","text":"<p>Many Coordinate Systems</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u5b9e\u9645\u7528\u4e8e\u7ed8\u5236\u5bf9\u8c61\u7684\u5750\u6807\u79f0\u4e3a\u5bf9\u8c61\u5750\u6807\u3002\u5bf9\u8c61\u5750\u6807\u7cfb\u88ab\u9009\u62e9\u4e3a\u6b63\u5728\u7ed8\u5236\u7684\u5bf9\u8c61\u65b9\u4fbf\u4f7f\u7528\u7684\u5750\u6807\u7cfb\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u5e94\u7528\u5efa\u6a21\u53d8\u6362\u6765\u8bbe\u7f6e\u5bf9\u8c61\u5728\u6574\u4f53\u573a\u666f\u4e2d\u7684\u5927\u5c0f\u3001\u65b9\u5411\u548c\u4f4d\u7f6e\uff08\u6216\u8005\uff0c\u5728\u5206\u5c42\u5efa\u6a21\u7684\u60c5\u51b5\u4e0b\uff0c\u8bbe\u7f6e\u5728\u66f4\u5927\u3001\u66f4\u590d\u6742\u5bf9\u8c61\u7684\u5bf9\u8c61\u5750\u6807\u7cfb\u4e2d\uff09\u3002\u5efa\u6a21\u53d8\u6362\u662f\u5e94\u7528\u4e8e\u5bf9\u8c61\u9876\u70b9\u7684\u7b2c\u4e00\u4e2a\u53d8\u6362\u3002</p> <p>\u4f60\u7528\u4e8e\u6784\u5efa\u5b8c\u6574\u573a\u666f\u7684\u5750\u6807\u88ab\u79f0\u4e3a\u4e16\u754c\u5750\u6807\u3002\u8fd9\u4e9b\u662f\u6574\u4e2a\u573a\u666f\u7684\u5750\u6807\uff0c\u4f60\u6b63\u5728\u521b\u5efa\u7684\u865a\u62df3D\u4e16\u754c\u7684\u5750\u6807\u3002\u5efa\u6a21\u53d8\u6362\u4ece\u5bf9\u8c61\u5750\u6807\u5230\u4e16\u754c\u5750\u6807\u7684\u6620\u5c04\u3002</p> <p>\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u4f60\u6240\u770b\u5230\u7684\u53d6\u51b3\u4e8e\u4f60\u7ad9\u7acb\u7684\u4f4d\u7f6e\u548c\u4f60\u89c2\u5bdf\u7684\u65b9\u5411\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4f60\u77e5\u9053\u201c\u89c2\u5bdf\u8005\u201d\u7684\u4f4d\u7f6e\u4ee5\u53ca\u89c2\u5bdf\u8005\u5728\u54ea\u91cc\u770b\u5411\u4e4b\u524d\uff0c\u4f60\u65e0\u6cd5\u5236\u4f5c\u51fa\u573a\u666f\u7684\u56fe\u7247\uff0c\u800c\u4e14\u5982\u679c\u4f60\u8003\u8651\u5230\uff0c\u89c2\u5bdf\u8005\u7684\u5934\u662f\u5982\u4f55\u503e\u659c\u7684\u3002\u4e3a\u4e86OpenGL\u7684\u76ee\u7684\uff0c\u6211\u4eec\u60f3\u8c61\u89c2\u5bdf\u8005\u8fde\u63a5\u5230\u4ed6\u4eec\u81ea\u5df1\u7684\u4e2a\u4f53\u5750\u6807\u7cfb\uff0c\u8fd9\u88ab\u79f0\u4e3a\u773c\u775b\u5750\u6807\u3002\u5728\u8fd9\u4e2a\u5750\u6807\u7cfb\u4e2d\uff0c\u89c2\u5bdf\u8005\u4f4d\u4e8e\u539f\u70b9\uff080,0,0\uff09\uff0c\u671d\u7740\u8d1fz\u8f74\u7684\u65b9\u5411\u770b\uff1b\u6b63y\u8f74\u7684\u65b9\u5411\u6307\u5411\u4e0a\u65b9\uff1bx\u8f74\u6307\u5411\u53f3\u8fb9\u3002\u8fd9\u662f\u4e00\u4e2a\u4ee5\u89c2\u5bdf\u8005\u4e3a\u4e2d\u5fc3\u7684\u5750\u6807\u7cfb\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u773c\u775b\u5750\u6807\uff08\u51e0\u4e4e\uff09\u662f\u4f60\u5b9e\u9645\u8981\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u65f6\u8981\u4f7f\u7528\u7684\u5750\u6807\u3002\u4ece\u4e16\u754c\u5750\u6807\u5230\u773c\u775b\u5750\u6807\u7684\u8f6c\u6362\u79f0\u4e3a\u89c2\u5bdf\u53d8\u6362\u3002</p> <p>\u5982\u679c\u8fd9\u5f88\u4ee4\u4eba\u56f0\u60d1\uff0c\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1a\u6211\u4eec\u53ef\u4ee5\u5728\u4e16\u754c\u4e0a\u4f7f\u7528\u4efb\u4f55\u6211\u4eec\u60f3\u8981\u7684\u5750\u6807\u7cfb\u3002\u773c\u775b\u5750\u6807\u662f\u5236\u4f5c\u4e00\u4e2a\u7531\u89c2\u5bdf\u8005\u89c2\u5bdf\u7684\u4e16\u754c\u56fe\u7247\u7684\u81ea\u7136\u5750\u6807\u7cfb\u3002\u5982\u679c\u6211\u4eec\u5728\u6784\u5efa\u4e16\u754c\u65f6\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u5750\u6807\u7cfb\uff08\u4e16\u754c\u5750\u6807\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u5c06\u8fd9\u4e9b\u5750\u6807\u8f6c\u6362\u4e3a\u773c\u775b\u5750\u6807\u4ee5\u4e86\u89e3\u89c2\u5bdf\u8005\u5b9e\u9645\u770b\u5230\u4e86\u4ec0\u4e48\u3002\u8fd9\u4e2a\u8f6c\u6362\u5c31\u662f\u89c2\u5bdf\u53d8\u6362\u3002</p> <p>\u987a\u4fbf\u63d0\u4e00\u4e0b\uff0cOpenGL\u4e0d\u8ddf\u8e2a\u5355\u72ec\u7684\u5efa\u6a21\u548c\u89c2\u5bdf\u53d8\u6362\u3002\u5b83\u4eec\u88ab\u5408\u5e76\u6210\u4e00\u4e2a\u5355\u4e00\u7684\u53d8\u6362\uff0c\u79f0\u4e3a\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5c3d\u7ba1\u4e16\u754c\u5750\u6807\u53ef\u80fd\u770b\u8d77\u6765\u662f\u6700\u91cd\u8981\u548c\u6700\u81ea\u7136\u7684\u5750\u6807\u7cfb\uff0c\u4f46OpenGL\u6ca1\u6709\u4efb\u4f55\u5bf9\u5b83\u4eec\u7684\u8868\u793a\uff0c\u4e5f\u4e0d\u5728\u5185\u90e8\u4f7f\u7528\u5b83\u4eec\u3002\u5bf9\u4e8eOpenGL\u6765\u8bf4\uff0c\u53ea\u6709\u5bf9\u8c61\u5750\u6807\u548c\u773c\u775b\u5750\u6807\u6709\u610f\u4e49\u3002OpenGL\u901a\u8fc7\u5e94\u7528\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u76f4\u63a5\u4ece\u5bf9\u8c61\u5750\u6807\u5230\u773c\u775b\u5750\u6807\u3002</p> <p>\u6211\u4eec\u8fd8\u6ca1\u6709\u5b8c\u6210\u3002\u89c2\u5bdf\u8005\u4e0d\u80fd\u770b\u5230\u6574\u4e2a3D\u4e16\u754c\uff0c\u53ea\u80fd\u770b\u5230\u9002\u5408\u89c6\u53e3\u7684\u90e8\u5206\uff0c\u89c6\u53e3\u662f\u5c4f\u5e55\u6216\u5176\u4ed6\u663e\u793a\u8bbe\u5907\u4e0a\u5c06\u7ed8\u5236\u56fe\u50cf\u7684\u77e9\u5f62\u533a\u57df\u3002\u6211\u4eec\u8bf4\uff0c\u573a\u666f\u88ab\u89c6\u53e3\u7684\u8fb9\u7f18\u201c\u88c1\u526a\u201d\u3002\u6b64\u5916\uff0c\u5728OpenGL\u4e2d\uff0c\u89c2\u5bdf\u8005\u53ea\u80fd\u770b\u5230\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u6709\u9650\u8303\u56f4\u7684z\u503c\u3002\u5177\u6709\u8f83\u5927\u6216\u8f83\u5c0fz\u503c\u7684\u70b9\u5c06\u88ab\u88c1\u526a\u6389\uff0c\u4e0d\u4f1a\u88ab\u6e32\u67d3\u5230\u56fe\u50cf\u4e2d\u3002\uff08\u5f53\u7136\uff0c\u8fd9\u4e0d\u662f\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u89c2\u5bdf\u65b9\u5f0f\uff0c\u4f46\u8fd9\u662f\u7531OpenGL\u4e2d\u6df1\u5ea6\u6d4b\u8bd5\u7684\u4f7f\u7528\u6240\u8981\u6c42\u7684\u3002\u8bf7\u53c2\u9605\u5b50\u82823.1.4\u3002\uff09\u5b9e\u9645\u6e32\u67d3\u5230\u56fe\u50cf\u4e2d\u7684\u7a7a\u95f4\u4f53\u79ef\u79f0\u4e3a\u89c6\u4f53\u79ef\u3002\u89c6\u4f53\u79ef\u5185\u7684\u7269\u4f53\u4f1a\u51fa\u73b0\u5728\u56fe\u50cf\u4e2d\uff1b\u4e0d\u5728\u89c6\u4f53\u79ef\u5185\u7684\u7269\u4f53\u5c06\u88ab\u88c1\u526a\u6389\uff0c\u770b\u4e0d\u5230\u3002\u4e3a\u4e86\u7ed8\u5236\u7684\u76ee\u7684\uff0cOpenGL\u5e94\u7528\u4e00\u4e2a\u5750\u6807\u53d8\u6362\uff0c\u5c06\u89c6\u4f53\u79ef\u6620\u5c04\u5230\u4e00\u4e2a\u7acb\u65b9\u4f53\u4e0a\u3002\u8be5\u7acb\u65b9\u4f53\u4f4d\u4e8e\u539f\u70b9\u5904\uff0cx\u65b9\u5411\u3001y\u65b9\u5411\u548cz\u65b9\u5411\u5206\u522b\u4ece-1\u52301\u5ef6\u4f38\u3002\u5728\u8fd9\u4e2a\u7acb\u65b9\u4f53\u4e0a\u7684\u5750\u6807\u7cfb\u88ab\u79f0\u4e3a\u88c1\u526a\u5750\u6807\u3002\u4ece\u773c\u775b\u5750\u6807\u5230\u88c1\u526a\u5750\u6807\u7684\u53d8\u6362\u79f0\u4e3a\u6295\u5f71\u53d8\u6362\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5c063D\u573a\u666f\u6295\u5f71\u52302D\u8868\u9762\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e22\u5f03z\u5750\u6807\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\uff08\u7136\u800c\uff0c\u4ecd\u7136\u9700\u8981z\u5750\u6807\u6765\u63d0\u4f9b\u6df1\u5ea6\u6d4b\u8bd5\u6240\u9700\u7684\u6df1\u5ea6\u4fe1\u606f\u3002\uff09</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u6839\u672c\u4e0d\u5e94\u7528\u4efb\u4f55\u53d8\u6362\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6a21\u578b\u89c6\u56fe\u548c\u6295\u5f71\u53d8\u6362\u90fd\u662f\u5355\u4f4d\u77e9\u9635\uff0c\u90a3\u4e48\u88c1\u526a\u5750\u6807\u5c31\u662f\u5c06\u8981\u4f7f\u7528\u7684\u5750\u6807\u3002\u5b83\u662f\u4e00\u4e2a\u5de6\u624b\u5750\u6807\u7cfb\uff0c\u5176\u4e2dz\u8f74\u7684\u6b63\u65b9\u5411\u6307\u5411\u5c4f\u5e55\u5185\u90e8\u3002</p> <p>\u6211\u4eec\u8fd8\u6ca1\u6709\u7ed3\u675f\u3002\u6700\u7ec8\uff0c\u5f53\u5b9e\u9645\u7ed8\u5236\u65f6\uff0c\u5b58\u5728\u8bbe\u5907\u5750\u6807\uff0c\u5373\u5728\u7269\u7406\u663e\u793a\u8bbe\u5907\uff08\u5982\u8ba1\u7b97\u673a\u5c4f\u5e55\uff09\u4e0a\u8fdb\u884c\u5b9e\u9645\u7ed8\u5236\u76842D\u5750\u6807\u7cfb\u3002\u901a\u5e38\uff0c\u5728\u8bbe\u5907\u5750\u6807\u4e2d\uff0c\u50cf\u7d20\u662f\u5ea6\u91cf\u5355\u4f4d\u3002\u7ed8\u5236\u533a\u57df\u662f\u4e00\u4e2a\u50cf\u7d20\u7684\u77e9\u5f62\u3002\u8fd9\u4e2a\u77e9\u5f62\u79f0\u4e3a\u89c6\u53e3\u3002\u89c6\u53e3\u53d8\u6362\u5c06\u88c1\u526a\u5750\u6807\u4e2d\u7684x\u548cy\u8fdb\u884c\u7f29\u653e\uff0c\u4ee5\u9002\u5e94\u89c6\u53e3\u3002</p> <p>\u8ba9\u6211\u4eec\u518d\u6b21\u6d4f\u89c8\u53d8\u6362\u5e8f\u5217\u3002\u60f3\u8c61\u4e00\u4e2a\u57fa\u672c\u5143\u7d20\uff0c\u6bd4\u5982\u573a</p> <p>\u666f\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u80fd\u51fa\u73b0\u5728\u6211\u4eec\u60f3\u8981\u5236\u4f5c\u7684\u573a\u666f\u56fe\u7247\u4e2d\u3002\u8be5\u57fa\u672c\u5143\u7d20\u7ecf\u5386\u4ee5\u4e0b\u4e00\u7cfb\u5217\u64cd\u4f5c\uff1a</p> <p></p> <ol> <li>\u5b9a\u4e49\u57fa\u672c\u5143\u7d20\u7684\u70b9\u4f7f\u7528\u5bf9\u8c61\u5750\u6807\uff0c\u4f7f\u7528\u8bf8\u5982glVertex3f\u4e4b\u7c7b\u7684\u65b9\u6cd5\u3002</li> <li>\u70b9\u9996\u5148\u7ecf\u8fc7\u6a21\u578b\u89c6\u56fe\u53d8\u6362\uff0c\u8fd9\u662f\u5c06\u57fa\u672c\u5143\u7d20\u653e\u7f6e\u5230\u4e16\u754c\u4e2d\u5e76\u5c06\u57fa\u672c\u5143\u7d20\u6620\u5c04\u5230\u773c\u775b\u5750\u6807\u7684\u5efa\u6a21\u53d8\u6362\u7684\u7ec4\u5408\u3002</li> <li>\u7136\u540e\u5e94\u7528\u6295\u5f71\u53d8\u6362\uff0c\u5c06\u5bf9\u89c2\u5bdf\u8005\u53ef\u89c1\u7684\u89c6\u4f53\u79ef\u6620\u5c04\u5230\u88c1\u526a\u5750\u6807\u7acb\u65b9\u4f53\u4e0a\u3002\u5982\u679c\u53d8\u6362\u540e\u7684\u57fa\u672c\u5143\u7d20\u4f4d\u4e8e\u8be5\u7acb\u65b9\u4f53\u4e4b\u5916\uff0c\u5b83\u5c06\u4e0d\u4f1a\u6210\u4e3a\u56fe\u50cf\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u5904\u7406\u505c\u6b62\u3002\u5982\u679c\u57fa\u672c\u5143\u7d20\u7684\u4e00\u90e8\u5206\u4f4d\u4e8e\u5185\u90e8\uff0c\u53e6\u4e00\u90e8\u5206\u4f4d\u4e8e\u5916\u90e8\uff0c\u5219\u4f4d\u4e8e\u5916\u90e8\u7684\u90e8\u5206\u5c06\u88ab\u88c1\u526a\u5e76\u4e22\u5f03\uff0c\u53ea\u6709\u5269\u4f59\u7684\u90e8\u5206\u4f1a\u8fdb\u4e00\u6b65\u5904\u7406\u3002</li> <li>\u6700\u540e\uff0c\u5e94\u7528\u89c6\u53e3\u53d8\u6362\u4ee5\u4ea7\u751f\u5b9e\u9645\u7528\u4e8e\u5728\u663e\u793a\u8bbe\u5907\u4e0a\u7ed8\u5236\u57fa\u672c\u5143\u7d20\u7684\u8bbe\u5907\u5750\u6807\u3002\u4e4b\u540e\uff0c\u53ea\u9700\u51b3\u5b9a\u5982\u4f55\u7ed9\u57fa\u672c\u5143\u7d20\u7684\u5404\u4e2a\u50cf\u7d20\u7740\u8272\u3002</li> </ol> <p>\u6211\u4eec\u9700\u8981\u66f4\u8be6\u7ec6\u5730\u8003\u8651\u8fd9\u4e9b\u53d8\u6362\uff0c\u5e76\u4e86\u89e3\u5982\u4f55\u5728OpenGL 1.1\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>The coordinates that you actually use for drawing an object are called object coordinates. The object coordinate system is chosen to be convenient for the object that is being drawn. A modeling transformation can then be applied to set the size, orientation, and position of the object in the overall scene (or, in the case of hierarchical modeling, in the object coordinate system of a larger, more complex object). The modeling transformation is the first that is applied to the vertices of an object.</p> <p>The coordinates in which you build the complete scene are called world coordinates. These are the coordinates for the overall scene, the imaginary 3D world that you are creating. The modeling transformation maps from object coordinates to world coordinates.</p> <p>In the real world, what you see depends on where you are standing and the direction in which you are looking. That is, you can't make a picture of the scene until you know the position of the \"viewer\" and where the viewer is looking\u2014and, if you think about it, how the viewer's head is tilted. For the purposes of OpenGL, we imagine that the viewer is attached to their own individual coordinate system, which is known as eye coordinates. In this coordinate system, the viewer is at the origin, (0,0,0), looking in the direction of the negative z-axis; the positive direction of the y-axis is pointing straight up; and the x-axis is pointing to the right. This is a viewer-centric coordinate system. In other words, eye coordinates are (almost) the coordinates that you actually want to use for drawing on the screen. The transform from world coordinates to eye coordinates is called the viewing transformation.</p> <p>If this is confusing, think of it this way: We are free to use any coordinate system that we want on the world. Eye coordinates are the natural coordinate system for making a picture of the world as seen by a viewer. If we used a different coordinate system (world coordinates) when building the world, then we have to transform those coordinates to eye coordinates to find out what the viewer actually sees. That transformation is the viewing transform.</p> <p>Note, by the way, that OpenGL doesn't keep track of separate modeling and viewing transforms. They are combined into a single transform, which is known as the modelview transformation. In fact, even though world coordinates might seem to be the most important and natural coordinate system, OpenGL doesn't have any representation for them and doesn't use them internally. For OpenGL, only object and eye coordinates have meaning. OpenGL goes directly from object coordinates to eye coordinates by applying the modelview transformation.</p> <p>We are not done. The viewer can't see the entire 3D world, only the part that fits into the viewport, which is the rectangular region of the screen or other display device where the image will be drawn. We say that the scene is \"clipped\" by the edges of the viewport. Furthermore, in OpenGL, the viewer can see only a limited range of z-values in the eye coordinate system. Points with larger or smaller z-values are clipped away and are not rendered into the image. (This is not, of course, the way that viewing works in the real world, but it's required by the use of the depth test in OpenGL. See Subsection 3.1.4.) The volume of space that is actually rendered into the image is called the view volume. Things inside the view volume make it into the image; things that are not in the view volume are clipped and cannot be seen. For purposes of drawing, OpenGL applies a coordinate transform that maps the view volume onto a cube. The cube is centered at the origin and extends from -1 to 1 in the x-direction, in the y-direction, and in the z-direction. The coordinate system on this cube is referred to as clip coordinates. The transformation from eye coordinates to clip coordinates is called the projection transformation. At this point, we haven't quite projected the 3D scene onto a 2D surface, but we can now do so simply by discarding the z-coordinate. (The z-coordinate, however, is still needed to provide the depth information that is needed for the depth test.)</p> <p>Note that clip coordinates are the coordinates will be used if you apply no transformation at all, that is if both the modelview and the projection transforms are the identity. It is a left-handed coordinate system, with the positive direction of the z-axis pointing into the screen.</p> <p>We still aren't done. In the end, when things are actually drawn, there are device coordinates, the 2D coordinate system in which the actual drawing takes place on a physical display device such as the computer screen. Ordinarily, in device coordinates, the pixel is the unit of measure. The drawing region is a rectangle of pixels. This is the rectangle that is called the viewport. The viewport transformation takes x and y from the clip coordinates and scales them to fit the viewport.</p> <p>Let's go through the sequence of transformations one more time. Think of a primitive, such as a line or triangle, that is part of the scene and that might appear in the image that we want to make of the scene. The primitive goes through the following sequence of operations:</p> <p></p> <ol> <li>The points that define the primitive are specified in object coordinates, using methods such as glVertex3f.</li> <li>The points are first subjected to the modelview transformation, which is a combination of the modeling transform that places the primitive into the world and the viewing transform that maps the primitive into eye coordinates.</li> <li>The projection transformation is then applied to map the view volume that is visible to the viewer onto the clip coordinate cube. If the transformed primitive lies outside that cube, it will not be part of the image, and the processing stops. If part of the primitive lies inside and part outside, the part that lies outside is clipped away and discarded, and only the part that remains is processed further.</li> <li>Finally, the viewport transform is applied to produce the device coordinates that will actually be used to draw the primitive on the display device. After that, it's just a matter of deciding how to color the individual pixels that are part of the primitive.</li> </ol> <p>We need to consider these transforms in more detail and see how to use them in OpenGL 1.1.</p>"},{"location":"cn/c3/s3/#332-\u89c6\u53e3\u53d8\u6362","title":"3.3.2 \u89c6\u53e3\u53d8\u6362","text":"<p>The Viewport Transformation</p> \u4e2d\u6587\u82f1\u6587 <p>\u6700\u7b80\u5355\u7684\u53d8\u6362\u4e4b\u4e00\u662f\u89c6\u53e3\u53d8\u6362\u3002\u5b83\u5c06\u88c1\u526a\u5750\u6807\u7684x\u548cy\u8f6c\u6362\u4e3a\u5728\u663e\u793a\u8bbe\u5907\u4e0a\u4f7f\u7528\u7684\u5750\u6807\u3002\u8981\u6307\u5b9a\u89c6\u53e3\u53d8\u6362\uff0c\u53ea\u9700\u8981\u6307\u5b9a\u573a\u666f\u5c06\u88ab\u6e32\u67d3\u5230\u7684\u8bbe\u5907\u4e0a\u7684\u77e9\u5f62\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528glViewport\u51fd\u6570\u6765\u5b9e\u73b0\u3002</p> <p>OpenGL\u5fc5\u987b\u7531\u5176\u8fd0\u884c\u73af\u5883\u63d0\u4f9b\u4e00\u4e2a\u7ed8\u5236\u8868\u9762\uff0c\u6bd4\u5982Java\u4e2d\u7684JOGL\u6216C\u4e2d\u7684GLUT\u5e93\u3002\u8be5\u7ed8\u5236\u8868\u9762\u662f\u7531\u50cf\u7d20\u7ec4\u6210\u7684\u77e9\u5f62\u7f51\u683c\uff0c\u5177\u6709\u6c34\u5e73\u5927\u5c0f\u548c\u5782\u76f4\u5927\u5c0f\u3002OpenGL\u5728\u7ed8\u5236\u8868\u9762\u4e0a\u4f7f\u7528\u4e00\u4e2a\u5750\u6807\u7cfb\uff0c\u5c06(0,0)\u653e\u5728\u5de6\u4e0b\u89d2\uff0cy\u4ece\u5e95\u90e8\u5411\u9876\u90e8\u589e\u52a0\uff0cx\u4ece\u5de6\u5411\u53f3\u589e\u52a0\u3002\u5f53\u7ed8\u5236\u8868\u9762\u9996\u6b21\u4ea4\u7ed9OpenGL\u65f6\uff0c\u89c6\u53e3\u88ab\u8bbe\u7f6e\u4e3a\u6574\u4e2a\u7ed8\u5236\u8868\u9762\u3002\u4f46\u662f\uff0c\u901a\u8fc7\u8c03\u7528</p> <pre><code>glViewport( x, y, width, height );\n</code></pre> <p>\u5176\u4e2d(x, y)\u662f\u89c6\u53e3\u7684\u5de6\u4e0b\u89d2\uff0c\u4ee5\u7ed8\u5236\u8868\u9762\u5750\u6807\u7cfb\u8868\u793a\uff0cwidth\u548cheight\u662f\u89c6\u53e3\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u5c06\u88c1\u526a\u5750\u6807\u4ece-1\u52301\u6620\u5c04\u5230\u6307\u5b9a\u7684\u89c6\u53e3\u3002\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740\u7ed8\u5236\u4ec5\u9650\u4e8e\u89c6\u53e3\u3002\u89c6\u53e3\u6269\u5c55\u5230\u7ed8\u5236\u8868\u9762\u4e4b\u5916\u5e76\u4e0d\u662f\u9519\u8bef\uff0c\u5c3d\u7ba1\u6545\u610f\u8bbe\u7f6e\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u4e0d\u592a\u5e38\u89c1\u3002</p> <p>\u5f53\u7ed8\u5236\u8868\u9762\u7684\u5927\u5c0f\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6bd4\u5982\u7528\u6237\u8c03\u6574\u5305\u542b\u7ed8\u5236\u8868\u9762\u7684\u7a97\u53e3\u7684\u5927\u5c0f\u65f6\uff0cOpenGL\u4e0d\u4f1a\u81ea\u52a8\u66f4\u6539\u89c6\u53e3\u4ee5\u5339\u914d\u65b0\u7684\u5927\u5c0f\u3002\u4f46\u662f\uff0cOpenGL\u8fd0\u884c\u73af\u5883\u53ef\u80fd\u4f1a\u4e3a\u60a8\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002 \uff08\u6709\u5173JOGL\u548cGLUT\u5982\u4f55\u5904\u7406\u6b64\u95ee\u9898\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u7b2c3.6\u8282\u3002\uff09</p> <p>glViewport\u7ecf\u5e38\u7528\u4e8e\u5728\u540c\u4e00\u7ed8\u5236\u8868\u9762\u4e0a\u7ed8\u5236\u591a\u4e2a\u4e0d\u540c\u7684\u573a\u666f\uff0c\u6216\u8005\u540c\u4e00\u573a\u666f\u7684\u591a\u4e2a\u89c6\u56fe\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5728\u540c\u4e00\u7ed8\u5236\u8868\u9762\u7684\u4e24\u4fa7\u7ed8\u5236\u4e24\u4e2a\u573a\u666f\uff0c\u5e76\u4e14\u7ed8\u5236\u8868\u9762\u7684\u5927\u5c0f\u662f600x400\u50cf\u7d20\u3002\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u6982\u8981\u975e\u5e38\u7b80\u5355\uff1a</p> <pre><code>glViewport(0,0,300,400);  // \u7ed8\u5236\u5230\u7ed8\u5236\u8868\u9762\u7684\u5de6\u534a\u90e8\u5206\u3002\n    .\n    .   // \u7ed8\u5236\u7b2c\u4e00\u4e2a\u573a\u666f\u3002\n    .\n\nglViewport(300,0,300,400);  // \u7ed8\u5236\u5230\u7ed8\u5236\u8868\u9762\u7684\u53f3\u534a\u90e8\u5206\u3002\n    .\n    .   // \u7ed8\u5236\u7b2c\u4e8c\u4e2a\u573a\u666f\u3002\n    .\n</code></pre> <p>\u7b2c\u4e00\u4e2aglViewport\u547d\u4ee4\u5efa\u7acb\u4e86\u4e00\u4e2a300x400\u50cf\u7d20\u7684\u89c6\u53e3\uff0c\u5176\u5de6\u4e0b\u89d2\u4f4d\u4e8e(0,0)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u89c6\u53e3\u7684\u5de6\u4e0b\u89d2\u4f4d\u4e8e\u7ed8\u5236\u8868\u9762\u7684\u5de6\u4e0b\u89d2\u3002\u8fd9\u4e2a\u89c6\u53e3\u586b\u5145\u4e86\u7ed8\u5236\u8868\u9762\u7684\u5de6\u534a\u90e8\u5206\u3002\u7c7b\u4f3c\u5730\uff0c\u7b2c\u4e8c\u4e2a\u89c6\u53e3\uff0c\u5176\u5de6\u4e0b\u89d2\u4f4d\u4e8e(300,0)\uff0c\u586b\u5145\u4e86\u7ed8\u5236\u8868\u9762\u7684\u53f3\u534a\u90e8\u5206\u3002</p> <p>The simplest of the transforms is the viewport transform. It transforms x and y clip coordinates to the coordinates that are used on the display device. To specify the viewport transform, it is only necessary to specify the rectangle on the device where the scene will be rendered. This is done using the glViewport function.</p> <p>OpenGL must be provided with a drawing surface by the environment in which it is running, such as JOGL for Java or the GLUT library for C. That drawing surface is a rectangular grid of pixels, with a horizontal size and a vertical size. OpenGL uses a coordinate system on the drawing surface that puts (0,0) at the lower left, with y increasing from bottom to top and x increasing from left to right. When the drawing surface is first given to OpenGL, the viewport is set to be the entire drawing surface. However, it is possible for OpenGL to draw to a different rectangle by calling</p> <pre><code>glViewport( x, y, width, height );\n</code></pre> <p>where (x,y) is the lower left corner of the viewport, in the drawing surface coordinate system, and width and height are the size of the viewport. Clip coordinates from -1 to 1 will then be mapped to the specified viewport. Note that this means in particular that drawing is limited to the viewport. It is not an error for the viewport to extend outside of the drawing surface, though it would be unusual to set up that situation deliberately.</p> <p>When the size of the drawing surface changes, such as when the user resizes a window that contains the drawing surface, OpenGL does not automatically change the viewport to match the new size. However, the environment in which OpenGL is running might do that for you. (See Section 3.6 for information about how this is handled by JOGL and GLUT.)</p> <p>glViewport is often used to draw several different scenes, or several views of the same scene, on the same drawing surface. Suppose, for example, that we want to draw two scenes, side-by-side, and that the drawing surface is 600-by-400 pixels. An outline for how to do that is very simple:</p> <pre><code>glViewport(0,0,300,400);  // Draw to left half of the drawing surface.\n    .\n    .   // Draw the first scene.\n    .\n\nglViewport(300,0,300,400);  // Draw to right half of the drawing surface.\n    .\n    .   // Draw the second scene.\n    .\n</code></pre> <p>The first glViewport command establishes a 300-by-400 pixel viewport with its lower left corner at (0,0). That is, the lower left corner of the viewport is at the lower left corner of the drawing surface. This viewport fills the left half of the drawing surface. Similarly, the second viewport, with its lower left corner at (300,0), fills the right half of the drawing surface.</p>"},{"location":"cn/c3/s3/#333-\u6295\u5f71\u53d8\u6362","title":"3.3.3 \u6295\u5f71\u53d8\u6362","text":"<p>The Projection Transformation</p> \u4e2d\u6587\u82f1\u6587 <p>\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u8ba8\u8bba\u6295\u5f71\u53d8\u6362\u3002\u548c\u4efb\u4f55\u53d8\u6362\u4e00\u6837\uff0c\u6295\u5f71\u5728OpenGL\u4e2d\u4ee5\u77e9\u9635\u7684\u5f62\u5f0f\u8868\u793a\u3002OpenGL\u4f1a\u5c06\u6295\u5f71\u77e9\u9635\u4e0e\u8868\u793a\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u7684\u77e9\u9635\u5206\u5f00\u8fdb\u884c\u8ddf\u8e2a\u3002\u76f8\u540c\u7684\u53d8\u6362\u51fd\u6570\uff0c\u6bd4\u5982glRotatef\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u8fd9\u4e24\u4e2a\u77e9\u9635\uff0c\u6240\u4ee5OpenGL\u9700\u8981\u4e00\u79cd\u65b9\u5f0f\u6765\u77e5\u9053\u8fd9\u4e9b\u51fd\u6570\u5e94\u7528\u4e8e\u54ea\u4e2a\u77e9\u9635\u3002\u8fd9\u7531\u4e00\u4e2a\u540d\u4e3a\u77e9\u9635\u6a21\u5f0f\u7684OpenGL\u72b6\u6001\u5c5e\u6027\u51b3\u5b9a\u3002\u77e9\u9635\u6a21\u5f0f\u7684\u503c\u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u6bd4\u5982GL_PROJECTION\u6216GL_MODELVIEW\u3002\u5f53\u8c03\u7528\u8bf8\u5982glRotatef\u4e4b\u7c7b\u7684\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u4fee\u6539\u4e00\u4e2a\u77e9\u9635\uff1b\u54ea\u4e2a\u77e9\u9635\u88ab\u4fee\u6539\u53d6\u51b3\u4e8e\u5f53\u524d\u77e9\u9635\u6a21\u5f0f\u7684\u503c\u3002\u901a\u8fc7\u8c03\u7528\u51fd\u6570glMatrixMode\u6765\u8bbe\u7f6e\u503c\u3002\u521d\u59cb\u503c\u662fGL_MODELVIEW\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u4f60\u60f3\u8981\u64cd\u4f5c\u6295\u5f71\u77e9\u9635\uff0c\u4f60\u5fc5\u987b\u9996\u5148\u8c03\u7528</p> <pre><code>glMatrixMode(GL_PROJECTION);\n</code></pre> <p>\u5982\u679c\u4f60\u60f3\u8981\u56de\u5230\u5de5\u4f5c\u5728\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u4e0a\uff0c\u4f60\u5fc5\u987b\u8c03\u7528</p> <pre><code>glMatrixMode(GL_MODELVIEW);\n</code></pre> <p>\u5728\u6211\u7684\u7a0b\u5e8f\u4e2d\uff0c\u6211\u901a\u5e38\u5c06\u77e9\u9635\u6a21\u5f0f\u8bbe\u7f6e\u4e3aGL_PROJECTION\uff0c\u8bbe\u7f6e\u6295\u5f71\u53d8\u6362\uff0c\u7136\u540e\u7acb\u5373\u5c06\u77e9\u9635\u6a21\u5f0f\u8bbe\u7f6e\u56deGL_MODELVIEW\u3002\u8fd9\u610f\u5473\u7740\u5728\u7a0b\u5e8f\u7684\u5176\u4ed6\u5730\u65b9\uff0c\u6211\u53ef\u4ee5\u786e\u4fe1\u77e9\u9635\u6a21\u5f0f\u662fGL_MODELVIEW\u3002</p> <p>\u4e3a\u4e86\u5e2e\u52a9\u4f60\u7406\u89e3\u6295\u5f71\uff0c\u8bb0\u4f4f3D\u56fe\u50cf\u53ea\u80fd\u663e\u793a\u65e0\u96503D\u4e16\u754c\u7684\u4e00\u90e8\u5206\u3002\u89c6\u4f53\u79ef\u662f\u56fe\u50cf\u4e2d\u53ef\u89c1\u7684\u4e16\u754c\u7684\u90e8\u5206\u3002\u89c6\u4f53\u79ef\u7531\u89c2\u5bdf\u53d8\u6362\u548c\u6295\u5f71\u53d8\u6362\u7684\u7ec4\u5408\u786e\u5b9a\u3002\u89c2\u5bdf\u53d8\u6362\u786e\u5b9a\u89c2\u5bdf\u8005\u7684\u4f4d\u7f6e\u548c\u671d\u5411\uff0c\u4f46\u5b83\u4e0d\u6307\u5b9a\u89c2\u5bdf\u8005\u80fd\u770b\u5230\u4e16\u754c\u7684\u591a\u5c11\u3002\u6295\u5f71\u53d8\u6362\u5b8c\u6210\u4e86\u8fd9\u4e00\u70b9\uff1a\u5b83\u6307\u5b9a\u4e86\u89c6\u56fe\u4e2d\u53ef\u89c1\u533a\u57df\u7684\u5f62\u72b6\u548c\u8303\u56f4\u3002\u5c06\u89c2\u5bdf\u8005\u60f3\u8c61\u6210\u4e00\u4e2a\u76f8\u673a\uff0c\u5e26\u7740\u4e00\u4e2a\u5927\u7684\u65e0\u5f62\u76d2\u5b50\u9644\u7740\u5728\u76f8\u673a\u524d\u9762\uff0c\u56f4\u7ed5\u7740\u76f8\u673a\u6709\u89c6\u7ebf\u7684\u90e8\u5206\u3002\u76d2\u5b50\u5185\u90e8\u5c31\u662f\u89c6\u4f53\u79ef\u3002\u5f53\u76f8\u673a\u5728\u4e16\u754c\u4e2d\u79fb\u52a8\u65f6\uff0c\u76d2\u5b50\u4e5f\u8ddf\u7740\u79fb\u52a8\uff0c\u89c6\u4f53\u79ef\u4e5f\u4f1a\u6539\u53d8\u3002\u4f46\u662f\u76d2\u5b50\u7684\u5f62\u72b6\u548c\u5927\u5c0f\u4e0d\u4f1a\u6539\u53d8\u3002\u76d2\u5b50\u7684\u5f62\u72b6\u548c\u5927\u5c0f\u5bf9\u5e94\u4e8e\u6295\u5f71\u53d8\u6362\u3002\u76f8\u673a\u7684\u4f4d\u7f6e\u548c\u671d\u5411\u5bf9\u5e94\u4e8e\u89c2\u5bdf\u53d8\u6362\u3002</p> <p>\u8fd9\u53ea\u662f\u53e6\u4e00\u79cd\u8bf4\u6cd5\uff0c\u6570\u5b66\u4e0a\uff0cOpenGL\u6295\u5f71\u53d8\u6362\u5c06\u773c\u775b\u5750\u6807\u53d8\u6362\u4e3a\u88c1\u526a\u5750\u6807\uff0c\u5c06\u89c6\u4f53\u79ef\u6620\u5c04\u52302\u00d72\u00d72\u7684\u88c1\u526a\u7acb\u65b9\u4f53\u4e0a\uff0c\u8be5\u7acb\u65b9\u4f53\u5305\u542b\u56fe\u50cf\u4e2d\u53ef\u89c1\u7684\u6240\u6709\u5185\u5bb9\u3002\u6307\u5b9a\u6295\u5f71\u53ea\u662f\u6307\u5b9a\u89c6\u4f53\u79ef\u7684\u5927\u5c0f\u548c\u5f62\u72b6\uff0c\u76f8\u5bf9\u4e8e\u89c2\u5bdf\u8005\u3002</p> <p>\u6295\u5f71\u6709\u4e24\u79cd\u4e00\u822c\u7c7b\u578b\uff0c\u900f\u89c6\u6295\u5f71\u548c\u6b63\u4ea4\u6295\u5f71\u3002\u900f\u89c6\u6295\u5f71\u66f4\u52a0\u7269\u7406\u4e0a\u5b9e\u9645\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u663e\u793a\u4e86\u5982\u679cOpenGL\u5c4f\u5e55\u4e0a\u7684\u663e\u793a\u77e9\u5f62\u662f\u4e00\u4e2a\u7a97\u53e3\uff0c\u5b83\u662f\u4e00\u4e2a\u771f\u5b9e\u76843D\u4e16\u754c\uff08\u53ef\u4ee5\u5ef6\u4f38\u5230\u5c4f\u5e55\u524d\u9762\u548c\u540e\u9762\uff09\uff0c\u90a3\u4e48\u4f60\u4f1a\u770b\u5230\u4ec0\u4e48\u3002\u5b83\u663e\u793a\u4e86\u4f60\u7528\u666e\u901a\u76f8\u673a\u62cd\u64443D\u4e16\u754c\u65f6\u4f1a\u770b\u5230\u7684\u89c6\u56fe\u3002\u5728\u900f\u89c6\u89c6\u56fe\u4e2d\uff0c\u5bf9\u8c61\u7684\u89c6\u89c9\u5927\u5c0f\u53d6\u51b3\u4e8e\u5b83\u8ddd\u79bb\u89c2\u5bdf\u8005\u7684\u8ddd\u79bb\u3002\u53ea\u6709\u4f4d\u4e8e\u89c2\u5bdf\u8005\u524d\u9762\u7684\u4e1c\u897f\u624d\u80fd\u88ab\u770b\u5230\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6682\u65f6\u5ffd\u7565z\u65b9\u5411\u4e0a\u7684\u88c1\u526a\uff0c\u53ef\u89c1\u7684\u4e16\u754c\u90e8\u5206\u662f\u4e00\u4e2a\u65e0\u9650\u91d1\u5b57\u5854\uff0c\u89c2\u5bdf\u8005\u4f4d\u4e8e\u91d1\u5b57\u5854\u7684\u9876\u70b9\uff0c\u91d1\u5b57\u5854\u7684\u4fa7\u9762\u7a7f\u8fc7\u89c6\u53e3\u77e9\u5f62\u7684\u4fa7\u9762\u3002</p> <p>\u7136\u800c\uff0c\u7531\u4e8eOpenGL\u4f7f\u7528\u6df1\u5ea6\u6d4b\u8bd5\u6765\u89e3\u51b3\u9690\u85cf\u8868\u9762\u95ee\u9898\uff0c\u5b83\u5b9e\u9645\u4e0a\u65e0\u6cd5\u663e\u793a\u8fd9\u4e2a\u91d1\u5b57\u5854\u4e2d\u7684\u6240\u6709\u4e1c\u897f\u3002\u7531\u4e8e\u6df1\u5ea6\u7f13\u51b2\u533a\u53ea\u80fd\u5b58\u50a8\u6709\u9650\u8303\u56f4\u7684\u6df1\u5ea6\u503c\uff0c\u5b83\u4e0d\u80fd\u8868\u793a\u7406\u8bba\u4e0a\u53ef\u89c1\u7684\u65e0\u9650\u91d1\u5b57\u5854\u7684\u6574\u4e2a\u6df1\u5ea6\u503c\u8303\u56f4\u3002\u53ea\u6709\u4f4d\u4e8e\u89c2\u5bdf\u8005\u4e00\u5b9a\u8ddd\u79bb\u8303\u56f4\u5185\u7684\u5bf9\u8c61\u624d\u80fd\u6210\u4e3a\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e2a\u8ddd\u79bb\u8303\u56f4\u7531\u4e24\u4e2a\u503c\uff0c\u8fd1\u88c1\u526a\u9762\u548c\u8fdc\u88c1\u526a\u9762\u786e\u5b9a\u3002\u5bf9\u4e8e\u900f\u89c6\u53d8\u6362\uff0c\u8fd9\u4e24\u4e2a\u503c\u5fc5\u987b\u662f\u6b63\u6570\uff0c\u800c\u4e14\u8fdc\u88c1\u526a\u9762\u5fc5\u987b\u5927\u4e8e\u8fd1\u88c1\u526a\u9762\u3002\u8ddd\u79bb\u89c2\u5bdf\u8005\u66f4\u8fd1\u6216\u66f4\u8fdc\u7684\u4efb\u4f55\u4e1c\u897f\u90fd\u4f1a\u88ab\u4e22\u5f03\uff0c\u5e76\u4e14\u4e0d\u4f1a\u51fa\u73b0\u5728\u6e32\u67d3\u7684\u56fe\u50cf\u4e2d\u3002\u56e0\u6b64\uff0c\u5728\u56fe\u50cf\u4e2d\u8868\u793a\u7684\u7a7a\u95f4\u4f53\u79ef\u662f\u4e00\u4e2a\u201c\u622a\u65ad\u91d1\u5b57\u5854\u201d\u3002\u8fd9\u4e2a\u91d1\u5b57\u5854\u662f\u900f\u89c6\u6295\u5f71\u7684\u89c6\u4f53\u79ef\uff1a</p> <p></p> <p>\u89c6\u4f53\u79ef\u7531\u516d\u4e2a\u5e73\u9762\u9650\u5b9a\u2014\u2014\u56db\u4e2a\u4fa7\u9762\u52a0\u4e0a\u622a\u65ad\u91d1\u5b57\u5854\u7684\u9876\u90e8\u548c\u5e95\u90e8\u3002\u8fd9\u4e9b\u5e73\u9762\u88ab\u79f0\u4e3a\u88c1\u526a\u5e73\u9762\uff0c\u56e0\u4e3a\u4efb\u4f55\u4f4d\u4e8e\u6bcf\u4e2a\u5e73\u9762\u9519\u8bef\u4e00\u4fa7\u7684\u4e1c\u897f\u90fd\u4f1a\u88ab\u88c1\u526a\u6389\u3002\u6295\u5f71\u53d8\u6362\u5c06\u773c\u775b\u5750\u6807\u4e2d\u622a\u65ad\u91d1\u5b57\u5854\u7684\u516d\u4e2a\u4fa7\u9762\u6620\u5c04\u5230\u88c1\u526a\u5750\u6807\u4e2d\u88c1\u526a\u7acb\u65b9\u4f53\u7684\u516d\u4e2a\u4fa7\u9762\u3002</p> <p>\u5728OpenGL\u4e2d\uff0c\u8bbe\u7f6e\u6295\u5f71\u53d8\u6362\u7b49\u540c\u4e8e\u5b9a\u4e49\u89c6\u4f53\u79ef\u3002\u5bf9\u4e8e\u900f\u89c6\u53d8\u6362\uff0c\u4f60\u5fc5</p> <p>\u987b\u8bbe\u7f6e\u4e00\u4e2a\u622a\u65ad\u91d1\u5b57\u5854\u5f62\u72b6\u7684\u89c6\u4f53\u79ef\u3002\u8fd9\u79cd\u5f62\u72b6\u7684\u4e00\u4e2a\u76f8\u5f53\u751f\u50fb\u7684\u672f\u8bed\u662f\u89c6\u9525\u4f53\u3002\u900f\u89c6\u53d8\u6362\u53ef\u4ee5\u901a\u8fc7glFrustum\u547d\u4ee4\u8bbe\u7f6e\uff1a</p> <pre><code>glFrustum( xmin, xmax, ymin, ymax, near, far );\n</code></pre> <p>\u6700\u540e\u4e24\u4e2a\u53c2\u6570\u6307\u5b9a\u89c2\u5bdf\u8005\u7684\u8fd1\u88c1\u526a\u8ddd\u79bb\u548c\u8fdc\u88c1\u526a\u8ddd\u79bb\uff0c\u5982\u524d\u6240\u8ff0\u3002\u5047\u8bbe\u89c2\u5bdf\u8005\u4f4d\u4e8e\u539f\u70b9(0,0,0)\uff0c\u671d\u5411\u8d1fz\u8f74\u65b9\u5411\u3002\uff08\u8fd9\u662f\u773c\u5750\u6807\u7cfb\u3002\uff09\u56e0\u6b64\uff0c\u8fd1\u88c1\u526a\u5e73\u9762\u4f4d\u4e8e<code>z = \u2212near</code>\uff0c\u8fdc\u88c1\u526a\u5e73\u9762\u4f4d\u4e8e<code>z = \u2212far</code>\u3002\uff08\u6ce8\u610f\u8d1f\u53f7\uff01\uff09\u524d\u56db\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86\u91d1\u5b57\u5854\u7684\u56db\u4e2a\u4fa7\u9762\uff1axmin\u3001xmax\u3001ymin\u548cymax\u6307\u5b9a\u4e86\u5728\u8fd1\u88c1\u526a\u5e73\u9762\u89c6\u4f53\u79ef\u7684\u6c34\u5e73\u548c\u5782\u76f4\u9650\u5236\u3002\u4f8b\u5982\uff0c\u91d1\u5b57\u5854\u5c0f\u7aef\u7684\u5de6\u4e0a\u89d2\u7684\u5750\u6807\u662f\uff08xmin\uff0cymax\uff0c-near\uff09\u3002\u5728\u8fdc\u88c1\u526a\u5e73\u9762\u7684x\u548cy\u9650\u5236\u6bd4glFrustum\u547d\u4ee4\u4e2d\u6307\u5b9a\u7684\u9650\u5236\u5927\u5f97\u591a\uff0c\u901a\u5e38\u662f\u8fdc\u5927\u4e8e\u8fd1\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cglFrustum\u4e2d\u7684x\u548cy\u9650\u5236\u901a\u5e38\u5173\u4e8e\u96f6\u5bf9\u79f0\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cxmin\u901a\u5e38\u7b49\u4e8exmax\u7684\u8d1f\u503c\uff0cymin\u901a\u5e38\u7b49\u4e8eymax\u7684\u8d1f\u503c\u3002\u4f46\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u53ef\u4ee5\u6709\u4e0d\u5bf9\u79f0\u7684\u89c6\u4f53\u79ef\uff0c\u5176\u4e2dz\u8f74\u4e0d\u76f4\u63a5\u6307\u5411\u89c6\u91ce\u7684\u4e2d\u5fc3\u3002</p> <p>\u7531\u4e8e\u77e9\u9635\u6a21\u5f0f\u5fc5\u987b\u8bbe\u7f6e\u4e3aGL_PROJECTION\u624d\u80fd\u5de5\u4f5c\u5728\u6295\u5f71\u53d8\u6362\u4e0a\uff0cglFrustum\u901a\u5e38\u5728\u4ee5\u4e0b\u5f62\u5f0f\u7684\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528</p> <pre><code>glMatrixMode(GL_PROJECTION);\nglLoadIdentity();\nglFrustum( xmin, xmax, ymin, ymax, near, far );\nglMatrixMode(GL_MODELVIEW);\n</code></pre> <p>\u8c03\u7528glLoadIdentity\u786e\u4fdd\u4e86\u8d77\u59cb\u70b9\u662f\u5355\u4f4d\u53d8\u6362\u3002\u8fd9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3aglFrustum\u4fee\u6539\u4e86\u73b0\u6709\u7684\u6295\u5f71\u77e9\u9635\u800c\u4e0d\u662f\u66ff\u6362\u5b83\uff0c\u5e76\u4e14\u5c3d\u7ba1\u5728\u7406\u8bba\u4e0a\u53ef\u80fd\uff0c\u4f60\u6839\u672c\u4e0d\u60f3\u5c1d\u8bd5\u5c06\u591a\u4e2a\u6295\u5f71\u53d8\u6362\u7ec4\u5408\u6210\u4e00\u4e2a\u3002</p> <p>\u4e0e\u900f\u89c6\u6295\u5f71\u76f8\u6bd4\uff0c\u6b63\u4ea4\u6295\u5f71\u66f4\u5bb9\u6613\u7406\u89e3\uff1a\u5728\u6b63\u4ea4\u6295\u5f71\u4e2d\uff0c\u5c06\u773c\u5750\u6807\u7cfb\u7684z\u5750\u6807\u820d\u5f03\uff0c\u5c063D\u4e16\u754c\u6295\u5f71\u52302D\u56fe\u50cf\u4e0a\u3002\u8fd9\u79cd\u6295\u5f71\u7c7b\u578b\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f\u89c2\u5bdf\u8005\u4f1a\u770b\u5230\u7684\u3002\u4f8b\u5982\uff0c\u7269\u4f53\u7684\u89c6\u89c9\u5927\u5c0f\u4e0d\u53d6\u51b3\u4e8e\u5b83\u8ddd\u79bb\u89c2\u5bdf\u8005\u7684\u8ddd\u79bb\u3002\u5728\u56fe\u50cf\u4e2d\uff0c\u89c2\u5bdf\u8005\u540e\u9762\u4ee5\u53ca\u524d\u9762\u7684\u7269\u4f53\u90fd\u53ef\u4ee5\u88ab\u770b\u5230\u3002\u7136\u800c\uff0c\u6b63\u4ea4\u6295\u5f71\u4ecd\u7136\u5f88\u6709\u7528\uff0c\u7279\u522b\u662f\u5728\u4ea4\u4e92\u5f0f\u5efa\u6a21\u7a0b\u5e8f\u4e2d\uff0c\u5176\u4e2d\u770b\u5230\u771f\u5b9e\u5927\u5c0f\u548c\u89d2\u5ea6\u5bf9\u900f\u89c6\u89c6\u56fe\u7684\u7578\u53d8\u975e\u5e38\u6709\u7528\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u5728\u6b63\u4ea4\u6295\u5f71\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf4\u6709\u4e00\u4e2a\u89c2\u5bdf\u8005\u5e76\u4e0d\u662f\u5f88\u6e05\u695a\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5728OpenGL\u4e2d\uff0c\u6b63\u4ea4\u6295\u5f71\u88ab\u8ba4\u4e3a\u6709\u4e00\u4e2a\u89c2\u5bdf\u8005\u3002\u89c2\u5bdf\u8005\u4f4d\u4e8e\u773c\u5750\u6807\u539f\u70b9\uff0c\u9762\u5411\u8d1fz\u8f74\u65b9\u5411\u3002\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u4e00\u4e2a\u77e9\u5f62\u8d70\u5eca\u65e0\u9650\u5ef6\u4f38\u5230\u89c2\u5bdf\u8005\u524d\u9762\u548c\u540e\u9762\u90fd\u80fd\u88ab\u89c2\u5bdf\u5230\u3002\u7136\u800c\uff0c\u5c31\u50cf\u900f\u89c6\u6295\u5f71\u4e00\u6837\uff0c\u5728OpenGL\u56fe\u50cf\u4e2d\u5b9e\u9645\u4e0a\u53ea\u80fd\u663e\u793a\u8fd9\u4e2a\u65e0\u9650\u8d70\u5eca\u7684\u4e00\u4e2a\u6709\u9650\u6bb5\u3002\u8fd9\u4e2a\u6709\u9650\u7684\u89c6\u4f53\u79ef\u662f\u4e00\u4e2a\u5e73\u884c\u516d\u9762\u4f53\u2014\u2014\u4e00\u4e2a\u957f\u65b9\u4f53\u2014\u2014\u5b83\u88ab\u8fd1\u88c1\u526a\u5e73\u9762\u548c\u8fdc\u88c1\u526a\u5e73\u9762\u524a\u53bb\u4e86\u65e0\u9650\u8d70\u5eca\u7684\u90e8\u5206\u3002\u8fdc\u8ddd\u79bb\u5fc5\u987b\u5927\u4e8e\u8fd1\u8ddd\u79bb\uff0c\u4f46\u5bf9\u4e8e\u6b63\u4ea4\u6295\u5f71\uff0c\u8fd1\u8ddd\u79bb\u7684\u503c\u5141\u8bb8\u4e3a\u8d1f\u6570\uff0c\u5c06\u201c\u8fd1\u201d\u88c1\u526a\u5e73\u9762\u7f6e\u4e8e\u89c2\u5bdf\u8005\u7684\u540e\u9762\uff0c\u5982\u4e0b\u56fe\u7684\u4e0b\u90e8\u5206\u6240\u793a\uff1a</p> <p></p> <p>\u6ce8\u610f\uff0c\u8fd1\u88c1\u526a\u5e73\u9762\u7684\u8d1f\u503c\u5c06\u8fd1\u88c1\u526a\u5e73\u9762\u653e\u5728\u4e86\u6b63z\u8f74\u4e0a\uff0c\u5373\u89c2\u5bdf\u8005\u7684\u540e\u9762\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528glOrtho\u65b9\u6cd5\u5728OpenGL\u4e2d\u8bbe\u7f6e\u6b63\u4ea4\u6295\u5f71\uff0c\u8be5\u65b9\u6cd5\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>glOrtho( xmin, xmax, ymin, ymax, near, far );\n</code></pre> <p>\u524d\u56db\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86\u89c6\u4f53\u79ef\u5de6\u3001\u53f3\u3001\u4e0b\u548c\u4e0a\u7684x\u548cy\u5750\u6807\u3002\u8bf7\u6ce8\u610f\uff0c\u6700\u540e\u4e24\u4e2a\u53c2\u6570\u662fnear\u548cfar\uff0c\u800c\u4e0d\u662fzmin\u548czmax\u3002\u5b9e\u9645\u4e0a\uff0c\u89c6\u4f53\u79ef\u7684\u6700\u5c0fz\u503c\u4e3a\u2212far\uff0c\u6700\u5927z\u503c\u4e3a\u2212near\u3002\u7136\u800c\uff0c\u901a\u5e38\u60c5\u51b5\u4e0bnear = \u2212far\uff0c\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5219\u6700\u5c0f\u548c\u6700\u5927z\u503c\u6700\u7ec8\u4ecd\u7136\u662fnear\u548cfar\uff01</p> <p>\u4e0eglFrustum\u4e00\u6837\uff0c\u5f53\u77e9\u9635\u6a21\u5f0f\u4e3aGL_PROJECTION\u65f6\u5e94\u8c03\u7528glOrtho\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u89c6\u4f53\u79ef\u662f\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u7684\u7bb1\u5b50\uff0c\u5176x\u3001y\u548cz\u503c\u7684\u8303\u56f4\u4e3a-10\u523010\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\uff1a</p> <pre><code>glMatrixMode(GL_PROJECTION);\nglLoadIdentity();\nglOrtho( -10, 10, -10, 10, -10, 10 );\nglMatrixMode(GL_MODELVIEW);\n</code></pre> <p>\u73b0\u5728\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u8fd9\u79cd\u7b80\u5355\u60c5\u51b5\u4e0b\uff0cglOrtho\u7684\u6548\u679c\u4e0eglScalef(0.1, 0.1, -0.1)\u7684\u6548\u679c\u5b8c\u5168\u76f8\u540c\uff0c\u56e0\u4e3a\u6295\u5f71\u53ea\u662f\u5c06\u7bb1\u5b50\u6309\u6bd4\u4f8b\u7f29\u5c0f\u4e8610\u500d\u3002\u4f46\u901a\u5e38\u66f4\u597d\u5730\u5c06\u6295\u5f71\u770b\u4f5c\u4e0e\u7f29\u653e\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u7269\u3002\uff08z\u7f29\u653e\u56e0\u5b50\u4e0a\u7684\u8d1f\u53f7\u662f\u56e0\u4e3a\u6295\u5f71\u98a0\u5012\u4e86z\u8f74\u7684\u65b9\u5411\uff0c\u5c06\u4f20\u7edf\u7684\u53f3\u624b\u5750\u6807\u7cfb\u8f6c\u6362\u4e3aOpenGL\u7684\u5de6\u624b\u9ed8\u8ba4\u5750\u6807\u7cfb\u3002\uff09</p> <p>glFrustum\u65b9\u6cd5\u5e76\u4e0d\u7279\u522b\u6613\u4e8e\u4f7f\u7528\u3002\u6709\u4e00\u4e2a\u79f0\u4e3aGLU\u7684\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u7528\u4e8eOpenGL\u7684\u5b9e\u7528\u51fd\u6570\u3002GLU\u5e93\u5305\u62ecgluPerspective\u65b9\u6cd5\uff0c\u4f5c\u4e3a\u8bbe\u7f6e\u900f\u89c6\u6295\u5f71\u7684\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u3002\u547d\u4ee4</p> <pre><code>gluPerspective( fieldOfViewAngle, aspect, near, far );\n</code></pre> <p>\u53ef\u4ee5\u7528\u6765\u4ee3\u66ffglFrustum\u3002fieldOfViewAngle\u662f\u5782\u76f4\u89d2\u5ea6\uff0c\u4ee5\u5ea6\u4e3a\u5355\u4f4d\uff0c\u6307\u7684\u662f\u89c6\u4f53\u79ef\u91d1\u5b57\u5854\u7684\u4e0a\u4fa7\u548c\u4e0b\u4fa7\u4e4b\u95f4\u7684\u5939\u89d2\u3002\u5178\u578b\u503c\u572830\u523060\u5ea6\u4e4b\u95f4\u3002aspect\u53c2\u6570\u662f\u89c6\u56fe\u7684\u7eb5\u6a2a\u6bd4\uff0c\u5373\u91d1\u5b57\u5854\u6a2a\u622a\u9762\u7684\u5bbd\u5ea6\u9664\u4ee5\u9ad8\u5ea6\u3002aspect\u7684\u503c\u901a\u5e38\u5e94\u8bbe\u7f6e\u4e3a\u89c6\u53e3\u7684\u7eb5\u6a2a\u6bd4\u3002gluPerspective\u4e2d\u7684near\u548cfar\u53c2\u6570\u7684\u542b\u4e49\u4e0eglFrustum\u4e2d\u7684\u76f8\u540c\u3002</p> <p>We turn next to the projection transformation. Like any transform, the projection is represented in OpenGL as a matrix. OpenGL keeps track of the projection matrix separately from the matrix that represents the modelview transformation. The same transform functions, such as glRotatef, can be applied to both matrices, so OpenGL needs some way to know which matrix those functions apply to. This is determined by an OpenGL state property called the matrix mode. The value of the matrix mode is a constant such as GL_PROJECTION or GL_MODELVIEW. When a function such as glRotatef is called, it modifies a matrix; which matrix is modified depends on the current value of the matrix mode. The value is set by calling the function glMatrixMode. The initial value is GL_MODELVIEW. This means that if you want to work on the projection matrix, you must first call</p> <pre><code>glMatrixMode(GL_PROJECTION);\n</code></pre> <p>If you want to go back to working on the modelview matrix, you must call</p> <pre><code>glMatrixMode(GL_MODELVIEW);\n</code></pre> <p>In my programs, I generally set the matrix mode to GL_PROJECTION, set up the projection transformation, and then immediately set the matrix mode back to GL_MODELVIEW. This means that anywhere else in the program, I can be sure that the matrix mode is GL_MODELVIEW.</p> <p>To help you to understand projection, remember that a 3D image can show only a part of the infinite 3D world. The view volume is the part of the world that is visible in the image. The view volume is determined by a combination of the viewing transformation and the projection transformation. The viewing transform determines where the viewer is located and what direction the viewer is facing, but it doesn't say how much of the world the viewer can see. The projection transform does that: It specifies the shape and extent of the region that is in view. Think of the viewer as a camera, with a big invisible box attached to the front of the camera that encloses the part of the world that that camera has in view. The inside of the box is the view volume. As the camera moves around in the world, the box moves with it, and the view volume changes. But the shape and size of the box don't change. The shape and size of the box correspond to the projection transform. The position and orientation of the camera correspond to the viewing transform.</p> <p>This is all just another way of saying that, mathematically, the OpenGL projection transformation transforms eye coordinates to clip coordinates, mapping the view volume onto the 2-by-2-by-2 clipping cube that contains everything that will be visible in the image. To specify a projection just means specifying the size and shape of the view volume, relative to the viewer.</p> <p>There are two general types of projection, perspective projection and orthographic projection. Perspective projection is more physically realistic. That is, it shows what you would see if the OpenGL display rectangle on your computer screen were a window into an actual 3D world (one that could extend in front of the screen as well as behind it). It shows a view that you could get by taking a picture of a 3D world with an ordinary camera. In a perspective view, the apparent size of an object depends on how far it is away from the viewer. Only things that are in front of the viewer can be seen. In fact, ignoring clipping in the z-direction for the moment, the part of the world that is in view is an infinite pyramid, with the viewer at the apex of the pyramid, and with the sides of the pyramid passing through the sides of the viewport rectangle.</p> <p>However, OpenGL can't actually show everything in this pyramid, because of its use of the depth test to solve the hidden surface problem. Since the depth buffer can only store a finite range of depth values, it can't represent the entire range of depth values for the infinite pyramid that is theoretically in view. Only objects in a certain range of distances from the viewer can be part of the image. That range of distances is specified by two values, near and far. For a perspective transformation, both of these values must be positive numbers, and far must be greater than near. Anything that is closer to the viewer than the near distance or farther away than the far distance is discarded and does not appear in the rendered image. The volume of space that is represented in the image is thus a \"truncated pyramid.\" This pyramid is the view volume for a perspective projection:</p> <p></p> <p>The view volume is bounded by six planes\u2014the four sides plus the top and bottom of the truncated pyramid. These planes are called clipping planes because anything that lies on the wrong side of each plane is clipped away. The projection transformation maps the six sides of the truncated pyramid in eye coordinates to the six sides of the clipping cube in clip coordinates.</p> <p>In OpenGL, setting up the projection transformation is equivalent to defining the view volume. For a perspective transformation, you have to set up a view volume that is a truncated pyramid. A rather obscure term for this shape is a frustum. A perspective transformation can be set up with the glFrustum command:</p> <pre><code>glFrustum( xmin, xmax, ymin, ymax, near, far );\n</code></pre> <p>The last two parameters specify the near and far distances from the viewer, as already discussed. The viewer is assumed to be at the origin, (0,0,0), facing in the direction of the negative z-axis. (This is the eye coordinate system.) So, the near clipping plane is at <code>z = \u2212near</code>, and the far clipping plane is at <code>z = \u2212far</code>. (Notice the minus signs!) The first four parameters specify the sides of the pyramid: xmin, xmax, ymin, and ymax specify the horizontal and vertical limits of the view volume at the near clipping plane. For example, the coordinates of the upper-left corner of the small end of the pyramid are (xmin, ymax, -near). The x and y limits at the far clipping plane are larger, usually much larger, than the limits specified in the glFrustum command.</p> <p>Note that x and y limits in glFrustum are usually symmetrical about zero. That is, xmin is usually equal to the negative of xmax and ymin is usually equal to the negative of ymax. However, this is not required. It is possible to have asymmetrical view volumes where the z-axis does not point directly down the center of the view.</p> <p>Since the matrix mode must be set to GL_PROJECTION to work on the projection transformation, glFrustum is often used in a code segment of the form</p> <pre><code>glMatrixMode(GL_PROJECTION);\nglLoadIdentity();\nglFrustum( xmin, xmax, ymin, ymax, near, far );\nglMatrixMode(GL_MODELVIEW);\n</code></pre> <p>The call to glLoadIdentity ensures that the starting point is the identity transform. This is important since glFrustum modifies the existing projection matrix rather than replacing it, and although it is theoretically possible, you don't even want to try to think about what would happen if you combine several projection transformations into one.</p> <p>Compared to perspective projections, orthographic projections are easier to understand: In an orthographic projection, the 3D world is projected onto a 2D image by discarding the z-coordinate of the eye-coordinate system. This type of projection is unrealistic in that it is not what a viewer would see. For example, the apparent size of an object does not depend on its distance from the viewer. Objects in back of the viewer as well as in front of the viewer can be visible in the image. Orthographic projections are still useful, however, especially in interactive modeling programs where it is useful to see true sizes and angles, undistorted by perspective.</p> <p>In fact, it's not really clear what it means to say that there is a viewer in the case of orthographic projection. Nevertheless, for orthographic projection in OpenGL, there is considered to be a viewer. The viewer is located at the eye-coordinate origin, facing in the direction of the negative z-axis. Theoretically, a rectangular corridor extending infinitely in both directions, in front of the viewer and in back, would be in view. However, as with perspective projection, only a finite segment of this infinite corridor can actually be shown in an OpenGL image. This finite view volume is a parallelepiped\u2014a rectangular solid\u2014that is cut out of the infinite corridor by a near clipping plane and a far clipping plane. The value of far must be greater than near, but for an orthographic projection, the value of near is allowed to be negative, putting the \"near\" clipping plane behind the viewer, as shown in the lower section of this illustration:</p> <p></p> <p>Note that a negative value for near puts the near clipping plane on the positive z-axis, which is behind the viewer.</p> <p>An orthographic projection can be set up in OpenGL using the glOrtho method, which is has the following form:</p> <pre><code>glOrtho( xmin, xmax, ymin, ymax, near, far );\n</code></pre> <p>The first four parameters specify the x- and y-coordinates of the left, right, bottom, and top of the view volume. Note that the last two parameters are near and far, not zmin and zmax. In fact, the minimum z-value for the view volume is \u2212far and the maximum z-value is \u2212near. However, it is often the case that near = \u2212far, and if that is true then the minimum and maximum z-values turn out to be near and far after all!</p> <p>As with glFrustum, glOrtho should be called when the matrix mode is GL_PROJECTION. As an example, suppose that we want the view volume to be the box centered at the origin containing x, y, and z values in the range from -10 to 10. This can be accomplished with</p> <pre><code>glMatrixMode(GL_PROJECTION);\nglLoadIdentity();\nglOrtho( -10, 10, -10, 10, -10, 10 );\nglMatrixMode(GL_MODELVIEW);\n</code></pre> <p>Now, as it turns out, the effect of glOrtho in this simple case is exactly the same as the effect of glScalef(0.1, 0.1, -0.1), since the projection just scales the box down by a factor of 10. But it's usually better to think of projection as a different sort of thing from scaling. (The minus sign on the z scaling factor is there because projection reverses the direction of the z-axis, transforming the conventionally right-handed eye coordinate system into OpenGL's left-handed default coordinate system.)</p> <p>The glFrustum method is not particularly easy to use. There is a library known as GLU that contains some utility functions for use with OpenGL. The GLU library includes the method gluPerspective as an easier way to set up a perspective projection. The command</p> <pre><code>gluPerspective( fieldOfViewAngle, aspect, near, far );\n</code></pre> <p>can be used instead of glFrustum. The fieldOfViewAngle is the vertical angle, measured in degrees, between the upper side of the view volume pyramid and the lower side. Typical values are in the range 30 to 60 degrees. The aspect parameter is the aspect ratio of the view, that is, the width of a cross-section of the pyramid divided by its height. The value of aspect should generally be set to the aspect ratio of the viewport. The near and far parameters in gluPerspective have the same meaning as for glFrustum.</p>"},{"location":"cn/c3/s3/#334-\u6a21\u578b\u89c6\u56fe\u8f6c\u6362","title":"3.3.4 \u6a21\u578b\u89c6\u56fe\u8f6c\u6362","text":"<p>The Modelview Transformation</p> \u4e2d\u6587\u82f1\u6587 <p>\u201c\u5efa\u6a21\u201d\u548c\u201c\u89c6\u56fe\u201d\u5728\u6982\u5ff5\u4e0a\u4f3c\u4e4e\u662f\u975e\u5e38\u4e0d\u540c\u7684\u4e8b\u7269\uff0c\u4f46\u5728OpenGL\u4e2d\u5c06\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u5355\u4e00\u7684\u53d8\u6362\u3002\u8fd9\u662f\u56e0\u4e3a\u4ece\u539f\u5219\u4e0a\u8bb2\u65e0\u6cd5\u533a\u5206\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\uff1b\u533a\u522b\u4ec5\u5728\u6982\u5ff5\u4e0a\u5b58\u5728\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed9\u5b9a\u7684\u53d8\u6362\u53ef\u4ee5\u88ab\u89c6\u4e3a\u662f\u5efa\u6a21\u53d8\u6362\u6216\u89c6\u56fe\u53d8\u6362\uff0c\u8fd9\u53d6\u51b3\u4e8e\u60a8\u5bf9\u5176\u7684\u7406\u89e3\u65b9\u5f0f\u3002\uff08\u5728\u6982\u5ff5\u4e0a\u7684\u4e00\u4e2a\u663e\u7740\u5dee\u5f02\u662f\uff0c\u76f8\u540c\u7684\u89c6\u56fe\u53d8\u6362\u901a\u5e38\u9002\u7528\u4e8e3D\u573a\u666f\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\uff0c\u800c\u6bcf\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u5efa\u6a21\u53d8\u6362\u3002\u4f46\u8fd9\u4e0d\u662f\u539f\u5219\u4e0a\u7684\u5dee\u5f02\u3002\uff09\u6211\u4eec\u57282D\u56fe\u5f62\u4e2d\u5df2\u7ecf\u770b\u5230\u4e86\u7c7b\u4f3c\u7684\u60c5\u51b5(Subsection 2.3.1)\uff0c\u4f46\u8ba9\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u5b83\u57283D\u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u5728\u539f\u70b9\u6709\u4e00\u4e2a\u623f\u5b50\u6a21\u578b\uff0c\u671d\u5411\u6b63z\u8f74\u65b9\u5411\u3002\u5047\u8bbe\u89c2\u5bdf\u8005\u5728\u6b63z\u8f74\u4e0a\uff0c\u671d\u5411\u539f\u70b9\u56de\u671b\u3002\u89c2\u5bdf\u8005\u76f4\u63a5\u671d\u5411\u623f\u5b50\u7684\u524d\u9762\u3002\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5bf9\u623f\u5b50\u5e94\u7528\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362\uff0c\u5c06\u5176\u56f4\u7ed5y\u8f74\u65cb\u8f6c90\u5ea6\u3002\u5728\u6b64\u53d8\u6362\u4e4b\u540e\uff0c\u623f\u5b50\u671d\u5411\u6b63x\u8f74\u7684\u65b9\u5411\uff0c\u89c2\u5bdf\u8005\u76f4\u63a5\u671d\u5411\u623f\u5b50\u7684\u5de6\u4fa7\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u60a8\u53ef\u4ee5\u5c06\u89c2\u5bdf\u8005\u7ed5y\u8f74\u8d1f\u65b9\u5411\u65cb\u8f6c90\u5ea6\u3002\u8fd9\u4f1a\u5c06\u89c2\u5bdf\u8005\u7f6e\u4e8e\u8d1fx\u8f74\u4e0a\uff0c\u4ece\u800c\u4f7f\u5176\u80fd\u591f\u770b\u5230\u623f\u5b50\u7684\u5de6\u4fa7\u3002\u65e0\u8bba\u54ea\u79cd\u53d8\u6362\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u89c2\u5bdf\u8005\u5bf9\u623f\u5b50\u7684\u89c6\u56fe\u5b8c\u5168\u76f8\u540c\u3002\u5728OpenGL\u4e2d\uff0c\u8fd9\u4e24\u79cd\u53d8\u6362\u90fd\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u5b9e\u73b0\uff1a</p> <pre><code>glRotatef(90,0,1,0);\n</code></pre> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6b64\u547d\u4ee4\u8868\u793a\u65e2\u662f\u5c06\u5bf9\u8c61\u65cb\u8f6c90\u5ea6\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u4e5f\u662f\u5c06\u89c2\u5bdf\u8005\u7ed5y\u8f74\u65cb\u8f6c-90\u5ea6\u7684\u89c6\u56fe\u53d8\u6362\u3002\u8bf7\u6ce8\u610f\uff0c\u5bf9\u89c2\u5bdf\u8005\u7684\u5f71\u54cd\u4e0e\u5bf9\u5bf9\u8c61\u7684\u5f71\u54cd\u662f\u76f8\u53cd\u7684\u3002\u5efa\u6a21\u548c\u89c6\u56fe\u53d8\u6362\u603b\u662f\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u76f8\u5173\u8054\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6b63\u5728\u89c2\u5bdf\u4e00\u4e2a\u5bf9\u8c61\uff0c\u60a8\u53ef\u4ee5\u5c06\u81ea\u5df1\u5411\u5de6\u79fb\u52a85\u82f1\u5c3a\uff08\u89c6\u56fe\u53d8\u6362\uff09\uff0c\u6216\u8005\u5c06\u5bf9\u8c61\u5411\u53f3\u79fb\u52a85\u82f1\u5c3a\uff08\u5efa\u6a21\u53d8\u6362\uff09\u3002\u65e0\u8bba\u54ea\u79cd\u60c5\u51b5\uff0c\u60a8\u6700\u7ec8\u90fd\u4f1a\u5f97\u5230\u76f8\u540c\u7684\u5bf9\u8c61\u89c6\u56fe\u3002\u5728OpenGL\u4e2d\uff0c\u8fd9\u4e24\u79cd\u53d8\u6362\u90fd\u8868\u793a\u4e3a</p> <pre><code>glTranslatef(5,0,0);\n</code></pre> <p>\u8fd9\u751a\u81f3\u9002\u7528\u4e8e\u7f29\u653e\uff1a\u5982\u679c\u89c2\u5bdf\u8005\u7f29\u5c0f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u89c2\u5bdf\u8005\u6765\u8bf4\uff0c\u4e16\u754c\u770b\u8d77\u6765\u4e0e\u6269\u5c55\u7684\u60c5\u51b5\u5b8c\u5168\u76f8\u540c\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002</p> <p>\u5c3d\u7ba1\u5efa\u6a21\u548c\u89c6\u56fe\u53d8\u6362\u5728\u539f\u7406\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b83\u4eec\u5728\u6982\u5ff5\u4e0a\u4ecd\u7136\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u5e76\u4e14\u901a\u5e38\u5728\u4ee3\u7801\u4e2d\u7684\u4e0d\u540c\u70b9\u5e94\u7528\u5b83\u4eec\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728\u7ed8\u5236\u573a\u666f\u65f6\uff0c\u60a8\u5c06\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a(1)\u52a0\u8f7d\u5355\u4f4d\u77e9\u9635\uff0c\u4f5c\u4e3a\u660e\u786e\u5b9a\u4e49\u7684\u8d77\u59cb\u70b9\uff1b(2)\u5e94\u7528\u89c6\u56fe\u53d8\u6362\uff1b(3)\u7ed8\u5236\u573a\u666f\u4e2d\u7684\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u7684\u5efa\u6a21\u53d8\u6362\u3002\u8bf7\u8bb0\u4f4f\uff0cOpenGL\u4f1a\u8ddf\u8e2a\u591a\u4e2a\u53d8\u6362\uff0c\u5e76\u4e14\u6240\u6709\u8fd9\u4e9b\u90fd\u5fc5\u987b\u5728\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u5f53\u524d\u65f6\u5b8c\u6210\uff1b\u5982\u679c\u60a8\u4e0d\u786e\u5b9a\u8fd9\u4e00\u70b9\uff0c\u90a3\u4e48\u5728\u6b65\u9aa4(1)\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u8c03\u7528glMatrixMode(GL_MODELVIEW)\u3002\u5728\u6b65\u9aa4(3)\u4e2d\uff0c\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528glPushMatrix()\u548cglPopMatrix()\u5c06\u6bcf\u4e2a\u5efa\u6a21\u53d8\u6362\u9650\u5236\u4e3a\u7279\u5b9a\u7684\u5bf9\u8c61\u3002</p> <p>\u5728\u52a0\u8f7d\u5355\u4f4d\u77e9\u9635\u540e\uff0c\u89c2\u5bdf\u8005\u4f4d\u4e8e\u9ed8\u8ba4\u4f4d\u7f6e\uff0c\u5373\u539f\u70b9\uff0c\u6cbf\u8d1fz\u8f74\u5411\u4e0b\u770b\uff0c\u89c6\u56fe\u4e2d\u7684\u6b63y\u8f74\u5411\u4e0a\u6307\u5411\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u5c06\u89c2\u5bdf\u8005\u4ece\u5176\u9ed8\u8ba4\u4f4d\u7f6e\u5728\u539f\u70b9\u6cbf\u6b63z\u8f74\u65b9\u5411\u79fb\u52a8\u5230\u70b9(0,0,20)\u3002\u8fd9\u4e2a\u64cd\u4f5c\u4e0e\u79fb\u52a8\u4e16\u754c\u53ca\u5176\u5305\u542b\u7684\u5bf9\u8c61\uff0c\u4f7f\u5176\u6cbf\u7740z\u8f74\u7684\u8d1f\u65b9\u5411\u79fb\u52a820\u4e2a\u5355\u4f4d\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u6548\u679c\u3002\u65e0\u8bba\u6267\u884c\u54ea\u79cd\u64cd\u4f5c\uff0c\u89c2\u5bdf\u8005\u6700\u7ec8\u4e0e\u5bf9\u8c61\u7684\u4f4d\u7f6e\u5b8c\u5168\u76f8\u540c\u3002\u8fd9\u4e24\u79cd\u64cd\u4f5c\u90fd\u7531\u76f8\u540c\u7684OpenGL\u547d\u4ee4\u5b9e\u73b0\uff0c\u5373glTranslatef(0,0,-20)\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u547d\u4ee4</p> <pre><code>glRotatef(90,0,1,0);\nglTranslatef(10,0,0);\n</code></pre> <p>\u6765\u5efa\u7acb\u89c6\u56fe\u53d8\u6362\u3002\u4f5c\u4e3a\u5efa\u6a21\u53d8\u6362\uff0c\u8fd9\u4e9b\u547d\u4ee4\u9996\u5148\u5c06\u4e00\u4e2a\u5bf9\u8c61\u6cbf\u7740\u6b63x\u65b9\u5411\u5e73\u79fb10\u4e2a\u5355\u4f4d\uff0c\u7136\u540e\u56f4\u7ed5y\u8f74\u65cb\u8f6c90\u5ea6\u3002\u8fd9\u5c06\u4f7f\u539f\u672c\u4f4d\u4e8e(0,0,0)\u7684\u5bf9\u8c61\u79fb\u52a8\u5230(0,0,-10)\uff0c\u5c06\u5bf9\u8c61\u76f4\u63a5\u653e\u7f6e\u5728\u89c2\u5bdf\u8005\u524d\u65b910\u4e2a\u5355\u4f4d\u5904\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5efa\u6a21\u53d8\u6362\u662f\u6309\u7167\u4e0e\u4ee3\u7801\u4e2d\u51fa\u73b0\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u3002\uff08\u60a8\u5e94\u8be5\u601d\u8003\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u89e3\u91ca\u5982\u4f55\u5f71\u54cd\u4e00\u4e2a\u4ece(0,0,0)\u5f00\u59cb\u7684\u623f\u5c4b\u7684\u89c6\u56fe\u3002\u8be5\u53d8\u6362\u4f1a\u5f71\u54cd\u89c2\u5bdf\u8005\u770b\u5230\u623f\u5c4b\u7684\u54ea\u4e00\u4fa7\uff0c\u4ee5\u53ca\u89c2\u5bdf\u8005\u4f4d\u4e8e\u623f\u5c4b\u591a\u8fdc\u7684\u4f4d\u7f6e\u3002\uff09</p> <p>\u987a\u4fbf\u63d0\u4e00\u4e0b\uff0c\u5e94\u7528\u89c6\u56fe\u53d8\u6362\u7684\u987a\u5e8f\u4e0e\u5b83\u4eec\u5728\u4ee3\u7801\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u76f8\u540c\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6f14\u793a\uff0c\u8bf4\u660e\u4e86\u5efa\u6a21\u548c\u89c6\u56fe\u4e4b\u95f4\u7684\u7b49\u4ef7\u6027\u3002\u4e0b\u56fe\u4e2d\u7684\u534a\u900f\u660e\u7070\u8272\u6846\u8868\u793a\u7528\u4e8e\u521b\u5efa\u663e\u793a\u5728\u5de6\u4e0a\u65b9\u7684\u56fe\u50cf\u7684\u89c6\u56fe\u4f53\u79ef\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6295\u5f71\u662f\u900f\u89c6\u6295\u5f71\uff0c\u89c6\u56fe\u4f53\u79ef\u662f\u4e00\u4e2a\u68f1\u53f0\u3002\u9605\u8bfb\u6f14\u793a\u4e2d\u7684\u5e2e\u52a9\u6587\u672c\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002</p> <p></p> <p>\u901a\u8fc7\u7ec4\u5408\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u5e73\u79fb\u6765\u8bbe\u7f6e\u89c6\u56fe\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\uff0c\u56e0\u6b64OpenGL\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u5bb9\u6613\u8bbe\u7f6e\u5178\u578b\u89c6\u56fe\u7684\u65b9\u6cd5\u3002\u8fd9\u4e2a\u547d\u4ee4\u4e0d\u662fOpenGL\u672c\u8eab\u7684\u4e00\u90e8\u5206\uff0c\u800c\u662fGLU\u5e93\u7684\u4e00\u90e8\u5206\u3002</p> <p>GLU\u5e93\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u65b9\u4fbf\u7684\u65b9\u6cd5\u6765\u8bbe\u7f6e\u89c6\u56fe\u53d8\u6362\uff1a</p> <pre><code>gluLookAt( eyeX,eyeY,eyeZ, refX,refY,refZ, upX,upY,upZ );\n</code></pre> <p>\u8be5\u65b9\u6cd5\u5c06\u89c2\u5bdf\u8005\u653e\u7f6e\u5728\u70b9(eyeX,eyeY,eyeZ)\uff0c\u671d\u5411\u70b9(refX,refY,refZ)\u3002\u89c2\u5bdf\u8005\u7684\u65b9\u5411\u662f\u4f7f\u5411\u91cf(upX,upY,upZ)\u6307\u5411\u89c2\u5bdf\u8005\u89c6\u56fe\u4e2d\u7684\u4e0a\u65b9\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u89c2\u5bdf\u8005\u5b9a\u4f4d\u5728\u8d1fx\u8f74\u4e0a\uff0c\u8ddd\u79bb\u539f\u70b910\u4e2a\u5355\u4f4d\uff0c\u5411\u540e\u770b\u539f\u70b9\uff0c\u4f7f\u6b63\u65b9\u5411\u7684y\u8f74\u5411\u4e0a\uff0c\u901a\u5e38\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>gluLookAt( -10,0,0,  0,0,0,  0,1,0 );\n</code></pre> <p>\u6709\u4e86\u6240\u6709\u8fd9\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u4f7f\u7528OpenGL 1.1\u7ed8\u52363D\u573a\u666f\u56fe\u50cf\u7684\u5178\u578b\u663e\u793a\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u5927\u81f4\u7684\u6982\u8ff0\uff1a</p> <pre><code>// \u53ef\u80fd\u5728\u6b64\u5904\u8bbe\u7f6e\u6e05\u9664\u989c\u8272\uff0c\u5982\u679c\u5728\u5176\u4ed6\u5730\u65b9\u672a\u8bbe\u7f6e\n\nglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n// \u53ef\u80fd\u5728\u6b64\u5904\u8bbe\u7f6e\u6295\u5f71\uff0c\u5982\u679c\u5728\u5176\u4ed6\u5730\u65b9\u672a\u8bbe\u7f6e\n\nglMatrixMode(GL_MODELVIEW);\n\nglLoadIdentity();\n\ngluLookAt(eyeX, eyeY, eyeZ, refX, refY, refZ, upX, upY, upZ);  // \u89c6\u56fe\u53d8\u6362\n\nglPushMatrix();\n.\n.   // \u5e94\u7528\u5efa\u6a21\u53d8\u6362\u5e76\u7ed8\u5236\u4e00\u4e2a\u5bf9\u8c61\n.\nglPopMatrix();\n\nglPushMatrix();\n.\n.   // \u5e94\u7528\u53e6\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362\u5e76\u7ed8\u5236\u53e6\u4e00\u4e2a\u5bf9\u8c61\n.\nglPopMatrix();\n\n.\n.\n.\n</code></pre> <p>\"Modeling\" and \"viewing\" might seem like very different things, conceptually, but OpenGL combines them into a single transformation. This is because there is no way to distinguish between them in principle; the difference is purely conceptual. That is, a given transformation can be considered to be either a modeling transformation or a viewing transformation, depending on how you think about it. (One significant difference, conceptually, is that the same viewing transformation usually applies to every object in the 3D scene, while each object can have its own modeling transformation. But this is not a difference in principle.) We have already seen something similar in 2D graphics (Subsection 2.3.1), but let's think about how it works in 3D.</p> <p>For example, suppose that there is a model of a house at the origin, facing towards the direction of the positive z-axis. Suppose the viewer is on the positive z-axis, looking back towards the origin. The viewer is looking directly at the front of the house. Now, you might apply a modeling transformation to the house, to rotate it by 90 degrees about the y-axis. After this transformation, the house is facing in the positive direction of the x-axis, and the viewer is looking directly at the left side of the house. On the other hand, you might rotate the viewer by minus 90 degrees about the y-axis. This would put the viewer on the negative x-axis, which would give it a view of the left side of the house. The net result after either transformation is that the viewer ends up with exactly the same view of the house. Either transformation can be implemented in OpenGL with the command</p> <pre><code>glRotatef(90,0,1,0);\n</code></pre> <p>That is, this command represents either a modeling transformation that rotates an object by 90 degrees or a viewing transformation that rotates the viewer by -90 degrees about the y-axis. Note that the effect on the viewer is the inverse of the effect on the object. Modeling and viewing transforms are always related in this way. For example, if you are looking at an object, you can move yourself 5 feet to the left (viewing transform), or you can move the object 5 feet to the right (modeling transform). In either case, you end up with the same view of the object. Both transformations would be represented in OpenGL as</p> <pre><code>glTranslatef(5,0,0);\n</code></pre> <p>This even works for scaling: If the viewer shrinks, it will look to the viewer exactly the same as if the world is expanding, and vice-versa.</p> <p>Although modeling and viewing transformations are the same in principle, they remain very different conceptually, and they are typically applied at different points in the code. In general when drawing a scene, you will do the following: (1) Load the identity matrix, for a well-defined starting point; (2) apply the viewing transformation; and (3) draw the objects in the scene, each with its own modeling transformation. Remember that OpenGL keeps track of several transformations, and that this must all be done while the modelview transform is current; if you are not sure of that then before step (1), you should call glMatrixMode(GL_MODELVIEW). During step (3), you will probably use glPushMatrix() and glPopMatrix() to limit each modeling transform to a particular object.</p> <p>After loading the identity matrix, the viewer is in the default position, at the origin, looking down the negative z-axis, with the positive y-axis pointing upwards in the view. Suppose, for example, that we would like to move the viewer from its default location at the origin back along the positive z-axis to the point (0,0,20). This operation has exactly the same effect as moving the world, and the objects that it contains, 20 units in the negative direction along the z-axis. Whichever operation is performed, the viewer ends up in exactly the same position relative to the objects. Both operations are implemented by the same OpenGL command, glTranslatef(0,0,-20). For another example, suppose that we use two commands</p> <pre><code>glRotatef(90,0,1,0);\nglTranslatef(10,0,0);\n</code></pre> <p>to establish the viewing transformation. As a modeling transform, these commands would first translate an object 10 units in the positive x-direction, then rotate the object 90 degrees about the y-axis. This would move an object originally at (0,0,0) to (0,0,-10), placing the object 10 units directly in front of the viewer. (Remember that modeling transformations are applied to objects in the order opposite to their order in the code.) What do these commands do as a viewing transformation? The effect on the view is the inverse of the effect on objects. The inverse of \"translate 90 then rotate 10\" is \"rotate -10 then translate -90.\" That is, to do the inverse, you have to undo the rotation before you undo the translation. The effect as a viewing transformation is first to rotate the view by -90 degrees about the y-axis (which would leave the viewer at the origin, but now looking along the positive x-axis), then to translate the viewer by -10 along the x-axis (backing up the viewer to the point (-10,0,0)). An object at the point (0,0,0) would thus be 10 units directly in front of the viewer. (You should think about how the two interpretations affect the view of a house that starts out at (0,0,0). The transformation affects which side of the house the viewer is looking at, as well as how far away from the house the viewer is located).</p> <p>Note, by the way, that the order in which viewing transformations are applied is the same as the order in which they occur in the code.</p> <p>Here is a demo that illustrates the equivalence between modeling and viewing. The translucent gray box in the lower images represents the view volume that is used to create the image that is shown in the upper left. In this case, the projection is a perspective projection, and the view volume is a frustum. Read the help text in the demo for more information.</p> <p></p> <p>It can be difficult to set up a view by combining rotations, scalings, and translations, so OpenGL provides an easier way to set up a typical view. The command is not part of OpenGL itself but is part of the GLU library.</p> <p>The GLU library provides the following convenient method for setting up a viewing transformation:</p> <pre><code>gluLookAt( eyeX,eyeY,eyeZ, refX,refY,refZ, upX,upY,upZ );\n</code></pre> <p>This method places the viewer at the point (eyeX,eyeY,eyeZ), looking towards the point (refX,refY,refZ). The viewer is oriented so that the vector (upX,upY,upZ) points upwards in the viewer's view. For example, to position the viewer on the negative x-axis, 10 units from the origin, looking back at the origin, with the positive direction of the y-axis pointing up as usual, use</p> <pre><code>gluLookAt( -10,0,0,  0,0,0,  0,1,0 );\n</code></pre> <p>With all this, we can give an outline for a typical display routine for drawing an image of a 3D scene with OpenGL 1.1:</p> <pre><code>// possibly set clear color here, if not set elsewhere\n\nglClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );\n\n// possibly set up the projection here, if not done elsewhere\n\nglMatrixMode( GL_MODELVIEW );\n\nglLoadIdentity();\n\ngluLookAt( eyeX,eyeY,eyeZ, refX,refY,refZ, upX,upY,upZ );  // Viewing transform\n\nglPushMatrix();\n.\n.   // apply modeling transform and draw an object\n.\nglPopMatrix();\n\nglPushMatrix();\n.\n.   // apply another modeling transform and draw another object\n.\nglPopMatrix();\n\n.\n.\n.\n</code></pre>"},{"location":"cn/c3/s3/#335-\u76f8\u673a\u62bd\u8c61","title":"3.3.5 \u76f8\u673a\u62bd\u8c61","text":"<p>A Camera Abstraction</p> \u4e2d\u6587\u82f1\u6587 <p>\u5c06\u6295\u5f71\u548c\u89c6\u56fe\u8ba8\u8bba\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u201c\u76f8\u673a\u201d\u7c7b\u6bd4\u3002\u5b9e\u9645\u76f8\u673a\u7528\u4e8e\u62cd\u64443D\u4e16\u754c\u7684\u7167\u7247\u3002\u5bf9\u4e8e3D\u56fe\u5f62\uff0c\u60f3\u8c61\u4f7f\u7528\u865a\u62df\u76f8\u673a\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u662f\u5f88\u6709\u7528\u7684\u3002\u8bbe\u7f6e\u89c6\u56fe\u53d8\u6362\u5c31\u50cf\u5b9a\u4f4d\u548c\u6307\u5411\u76f8\u673a\u4e00\u6837\u3002\u6295\u5f71\u53d8\u6362\u786e\u5b9a\u76f8\u673a\u7684\u5c5e\u6027\uff1a\u5b83\u7684\u89c6\u573a\u662f\u591a\u5c11\uff0c\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u955c\u5934\uff1f\uff08\u5f53\u7136\uff0c\u81f3\u5c11\u5728\u4e00\u4e2a\u65b9\u9762\uff0cOpenGL\u4e2d\u7684\u8fd9\u4e2a\u6bd4\u55bb\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b9e\u9645\u76f8\u673a\u5728\u5176z\u65b9\u5411\u4e0a\u4e0d\u4f1a\u8fdb\u884c\u88c1\u526a\u3002\uff09</p> <p>\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u76f8\u673a\u5de5\u5177\u6765\u5b9e\u73b0\u8fd9\u4e2a\u60f3\u6cd5\u3002\u76f8\u673a\u65e8\u5728\u63a5\u7ba1\u8bbe\u7f6e\u6295\u5f71\u548c\u89c6\u56fe\u7684\u5de5\u4f5c\u3002\u4e0e\u624b\u52a8\u8bbe\u7f6e\u76f8\u6bd4\uff0c\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u76f8\u673a\u7684\u5c5e\u6027\u3002API\u9002\u7528\u4e8eC\u548cJava\u3002\u4e24\u4e2a\u7248\u672c\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3aJava\u7248\u672c\u662f\u9762\u5411\u5bf9\u8c61\u7684\u3002\u6211\u5c06\u9996\u5148\u8ba8\u8bbaC\u5b9e\u73b0\u3002\uff08\u6709\u5173\u4f7f\u7528C\u548cJava\u4e2dOpenGL\u7f16\u7a0b\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7b2c3.6\u8282\u3002\u6709\u5173\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u76f8\u673a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u4e0b\u4e00\u8282\u7684\u591a\u9762\u4f53\u67e5\u770b\u5668\u793a\u4f8b\u3002\u8fd8\u8981\u6ce8\u610f\uff0c\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u6211\u7684OpenGL JavaScript\u6a21\u62df\u5668\u7684\u76f8\u673a\u7248\u672c\uff1b\u5b83\u662f\u6a21\u62df\u5668\u5e93glsim/glsim.js\u7684\u4e00\u90e8\u5206\uff0c\u5176API\u51e0\u4e4e\u4e0eJava API\u76f8\u540c\u3002\uff09</p> <p>\u5728C\u4e2d\uff0c\u76f8\u673a\u7531\u6837\u4f8b.c\u6587\u4ef6glut/camera.c\u548c\u76f8\u5e94\u7684\u5934\u6587\u4ef6glut/camera.h\u5b9a\u4e49\u3002API\u7684\u5b8c\u6574\u6587\u6863\u53ef\u4ee5\u5728\u5934\u6587\u4ef6\u4e2d\u627e\u5230\u3002\u8981\u4f7f\u7528\u76f8\u673a\uff0c\u60a8\u5e94\u8be5\u5728\u7a0b\u5e8f\u5f00\u5934\u5305\u542b<code>#include \"camera.h\"</code>\uff0c\u5e76\u4e14\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\uff0c\u5e94\u8be5\u5728\u8981\u7f16\u8bd1\u7684\u6587\u4ef6\u5217\u8868\u4e2d\u5305\u542bcamera.c\u3002\u76f8\u673a\u4f9d\u8d56\u4e8eGLU\u5e93\u548cC\u7684\u6807\u51c6\u6570\u5b66\u5e93\uff0c\u56e0\u6b64\u5728\u7f16\u8bd1\u65f6\u5fc5\u987b\u786e\u4fdd\u8fd9\u4e9b\u5e93\u53ef\u7528\u3002\u8981\u4f7f\u7528\u76f8\u673a\uff0c\u60a8\u5e94\u8be5\u8c03\u7528</p> <pre><code>    cameraApply();\n</code></pre> <p>\u5728\u7ed8\u5236\u573a\u666f\u4e4b\u524d\u8bbe\u7f6e\u6295\u5f71\u548c\u89c6\u56fe\u53d8\u6362\u3002\u8c03\u7528\u6b64\u51fd\u6570\u4f1a\u66ff\u6362\u8bbe\u7f6e\u6295\u5f71\u548c\u89c6\u56fe\u53d8\u6362\u7684\u5e38\u89c4\u4ee3\u7801\u3002\u5b83\u4f1a\u5c06\u77e9\u9635\u6a21\u5f0f\u8bbe\u7f6e\u4e3aGL_MODELVIEW\u3002</p> <p>API\u4e2d\u7684\u5176\u4f59\u51fd\u6570\u7528\u4e8e\u914d\u7f6e\u76f8\u673a\u3002\u8fd9\u901a\u5e38\u4f5c\u4e3a\u521d\u59cb\u5316\u7684\u4e00\u90e8\u5206\u5b8c\u6210\uff0c\u4f46\u53ef\u4ee5\u968f\u65f6\u66f4\u6539\u914d\u7f6e\u3002\u4f46\u662f\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u53ea\u6709\u5728\u8c03\u7528<code>cameraApply()</code>\u4e4b\u540e\uff0c\u8bbe\u7f6e\u624d\u4f1a\u751f\u6548\u3002\u53ef\u7528\u7684\u51fd\u6570\u5305\u62ec\uff1a</p> <pre><code>    cameraLookAt(eyeX, eyeY, eyeZ, refX, refY, refZ, upX, upY, upZ);\n        // \u786e\u5b9a\u89c6\u56fe\u53d8\u6362\uff0c\u5c31\u50cfgluLookAt\u4e00\u6837\n        // \u9ed8\u8ba4\u4e3a cameraLookAt(0,0,30, 0,0,0, 0,1,0);\n\n    cameraSetLimits(xmin, xmax, ymin, ymax, zmin, zmax);\n        // \u8bbe\u7f6e\u89c6\u56fe\u4f53\u79ef\u7684\u9650\u5236\uff0c\u5176\u4e2d zmin \u548c zmax \u662f\u76f8\u5bf9\u4e8e\u89c6\u56fe\u53c2\u8003\u70b9\u7ed9\u51fa\u7684\uff0c\n        // \u800c xy \u9650\u5236\u662f\u5728\u89c6\u56fe\u53c2\u8003\u70b9\u7684\u8ddd\u79bb\u4e0a\u6d4b\u91cf\u7684\uff0c\u800c\u4e0d\u662f\u5728\u8fd1\u8ddd\u79bb\u5904\u3002\n        // \u9ed8\u8ba4\u4e3a cameraSetLimits(-5,5, -5,5, -10,10);\n\n    cameraSetScale(limit);\n        // \u4e00\u4e2a\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u4e0e\u8c03\u7528\n        // cameraSetLimits(-limit,limit, -limit,limit, -2*limit, 2*limit);\n        // \u76f8\u540c\n\n    cameraSetOrthographic(ortho);\n        // \u5728\u6b63\u4ea4\u548c\u900f\u89c6\u6295\u5f71\u4e4b\u95f4\u5207\u6362\u3002\n        // \u53c2\u6570\u5e94\u4e3a 0 \u8868\u793a\u900f\u89c6\uff0c1 \u8868\u793a\u6b63\u4ea4\u3002\u9ed8\u8ba4\u662f\u900f\u89c6\u3002\n\n    cameraSetPreserveAspect(preserve);\n        // \u786e\u5b9a\u662f\u5426\u5e94\u8be5\u4fdd\u6301\u89c6\u53e3\u7684\u5bbd\u9ad8\u6bd4\u3002\n        // \u53c2\u6570\u5e94\u4e3a 0 \u8868\u793a\u5ffd\u7565\uff0c1 \u8868\u793a\u4fdd\u6301\u89c6\u53e3\u7684\u5bbd\u9ad8\u6bd4\u3002\u9ed8\u8ba4\u662f\u4fdd\u6301\u5bbd\u9ad8\u6bd4\u3002\n</code></pre> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u5c31\u8db3\u591f\u4e86\u3002\u7279\u522b\u6ce8\u610f<code>cameraLookAt</code>\u548c<code>cameraSetLimits</code>\u5982\u4f55\u4e00\u8d77\u8bbe\u7f6e\u89c6\u56fe\u548c\u6295\u5f71\u3002<code>cameraLookAt</code>\u7684\u53c2\u6570\u8868\u793a\u4e16\u754c\u5750\u6807\u4e2d\u7684\u4e09\u4e2a\u70b9\u3002\u89c6\u56fe\u53c2\u8003\u70b9<code>(refX, refY, refZ)</code>\u5e94\u8be5\u4f4d\u4e8e\u60a8\u60f3\u8981\u6e32\u67d3\u7684\u573a\u666f\u4e2d\u95f4\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002<code>cameraSetLimits</code>\u7684\u53c2\u6570\u5b9a\u4e49\u4e86\u4e00\u4e2a\u56f4\u7ed5\u89c6\u56fe\u53c2\u8003\u70b9\u7684\u76d2\u5b50\uff0c\u8be5\u76d2\u5b50\u5e94\u8be5\u5305\u542b\u60a8\u60f3\u8981\u51fa\u73b0\u5728\u56fe\u50cf\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u3002</p> <p>\u5bf9\u4e8eJava\u4e2d\u7684JOGL\uff0c\u76f8\u673aAPI\u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u540d\u4e3aCamera\u7684\u7c7b\uff0c\u5b9a\u4e49\u5728\u6587\u4ef6jogl/Camera.java\u4e2d\u3002\u76f8\u673a\u9002\u7528\u4e8e\u4f5c\u4e3aOpenGL\u7ed8\u56fe\u8868\u9762\u4f7f\u7528\u7684GLPanel\u6216GLCanvas\u3002\u8981\u4f7f\u7528\u76f8\u673a\uff0c\u8bf7\u5c06Camera\u5bf9\u8c61\u521b\u5efa\u4e3a\u5b9e\u4f8b\u53d8\u91cf\uff1a</p> <pre><code>    camera = new Camera();\n</code></pre> <p>\u5728\u7ed8\u5236\u573a\u666f\u4e4b\u524d\uff0c\u8c03\u7528</p> <pre><code>    camera.apply(gl2);\n</code></pre> <p>\u5176\u4e2d<code>gl2</code>\u662f\u7c7b\u578b\u4e3aGL2\u7684OpenGL\u7ed8\u56fe\u4e0a\u4e0b\u6587\u3002\uff08\u6ce8\u610f\u53c2\u6570<code>gl2</code>\u7684\u5b58\u5728\uff0c\u5728C\u4e2d\u4e0d\u662f\u5fc5\u9700\u7684\uff1b\u5b83\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u5728JOGL\u4e2d\uff0cOpenGL\u7ed8\u56fe\u4e0a\u4e0b\u6587\u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u3002\uff09\u4e0eC\u7248\u672c\u7c7b\u4f3c\uff0c\u8fd9\u4f1a\u8bbe\u7f6e\u89c6\u56fe\u548c\u6295\u5f71\u53d8\u6362\uff0c\u5e76\u53ef\u4ee5\u66ff\u6362\u60a8\u4e3a\u6b64\u76ee\u7684\u4f7f\u7528\u7684\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u3002\u7528\u4e8e\u914d\u7f6e\u76f8\u673a\u7684\u51fd\u6570\u5728Java\u4e2d\u4e0eC\u4e2d\u76f8\u540c\uff0c\u9664\u4e86\u5b83\u4eec\u6210\u4e3a\u76f8\u673a\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5\uff0c\u800c\u771f/\u5047\u53c2\u6570</p> <p>\u662f\u5e03\u5c14\u578b\u800c\u4e0d\u662f\u6574\u6570\u578b\uff1a</p> <pre><code>    camera.lookAt(eyeX, eyeY, eyeZ, refX, refY, refZ, upX, upY, upZ);\n    camera.setLimits(xmin, xmax, ymin, ymax, zmin, zmax);\n    camera.setScale(limit);\n    camera.setOrthographic(ortho);    // ortho\u7684\u7c7b\u578b\u4e3a\u5e03\u5c14\u578b\n    camera.setPreserveAspect(preserve); // preserve\u7684\u7c7b\u578b\u4e3a\u5e03\u5c14\u578b\n</code></pre> <p>\u76f8\u673a\u9644\u5e26\u4e86\u4e00\u4e2a\u6a21\u62df\u7684\u201c\u8f68\u8ff9\u7403\u201d\u3002\u8f68\u8ff9\u7403\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u5728\u663e\u793a\u5c4f\u4e0a\u5355\u51fb\u5e76\u62d6\u52a8\u9f20\u6807\u6765\u65cb\u8f6c\u89c6\u56fe\u3002\u8981\u5728C\u4e2d\u4f7f\u7528GLUT\u4f7f\u7528\u5b83\uff0c\u53ea\u9700\u901a\u8fc7\u8c03\u7528\u5b89\u88c5\u9f20\u6807\u51fd\u6570\u548c\u9f20\u6807\u79fb\u52a8\u51fd\u6570\uff1a</p> <pre><code>    glutMouseFunc(trackballMouseFunction);\n    glutMotionFunc(trackballMotionFunction);\n</code></pre> <p>\u51fd\u6570<code>trackballMouseFunction</code>\u548c<code>trackballMotionFunction</code>\u4f5c\u4e3a\u76f8\u673aAPI\u7684\u4e00\u90e8\u5206\u5b9a\u4e49\uff0c\u5e76\u5728<code>camera.h</code>\u4e2d\u58f0\u660e\u548c\u8bb0\u5f55\u3002\u8f68\u8ff9\u7403\u901a\u8fc7\u4fee\u6539\u4e0e\u76f8\u673a\u76f8\u5173\u8054\u7684\u89c6\u56fe\u53d8\u6362\u6765\u5de5\u4f5c\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u8c03\u7528<code>cameraApply()</code>\u5728\u663e\u793a\u51fd\u6570\u7684\u5f00\u5934\u8bbe\u7f6e\u89c6\u56fe\u548c\u6295\u5f71\u53d8\u6362\u65f6\u624d\u6709\u6548\u3002\u8981\u5728Java\u4e2d\u4e3aCamera\u5bf9\u8c61\u5b89\u88c5\u8f68\u8ff9\u7403\uff0c\u8c03\u7528</p> <pre><code>    camera.installTrackball(drawSurface);\n</code></pre> <p>\u5176\u4e2ddrawSurface\u662f\u4f7f\u7528\u76f8\u673a\u7684\u7ec4\u4ef6\u3002</p> <p>Projection and viewing are often discussed using the analogy of a camera. A real camera is used to take a picture of a 3D world. For 3D graphics, it useful to imagine using a virtual camera to do the same thing. Setting up the viewing transformation is like positioning and pointing the camera. The projection transformation determines the properties of the camera: What is its field of view, what sort of lens does it use? (Of course, the analogy breaks for OpenGL in at least one respect, since a real camera doesn't do clipping in its z-direction.)</p> <p>I have written a camera utility to implement this idea. The camera is meant to take over the job of setting the projection and view. Instead of doing that by hand, you set properties of the camera. The API is available for both C and Java. The two versions are somewhat different because the Java version is object-oriented. I will discuss the C implementation first. (See Section 3.6 for basic information about programming OpenGL in C and Java. For an example of using a camera in a program, see the polyhedron viewer example in the next section. Note also that there is a version of the camera for use with my JavaScript simulator for OpenGL; it is part of the simulator library glsim/glsim.js and has an API almost identical to the Java API.)</p> <p>In C, the camera is defined by the sample .c file, glut/camera.c and a corresponding header file, glut/camera.h. Full documentation for the API can be found in the header file. To use the camera, you should #include \"camera.h\" at the start of your program, and when you compile the program, you should include camera.c in the list of files that you want to compile. The camera depends on the GLU library and on C's standard math library, so you have to make sure that those libraries are available when it is compiled. To use the camera, you should call</p> <pre><code>cameraApply();\n</code></pre> <p>to set up the projection and viewing transform before drawing the scene. Calling this function replaces the usual code for setting up the projection and viewing transformations. It leaves the matrix mode set to GL_MODELVIEW.</p> <p>The remaining functions in the API are used to configure the camera. This would usually be done as part of initialization, but it is possible to change the configuration at any time. However, remember that the settings are not used until you call cameraApply(). Available functions include:</p> <pre><code>cameraLookAt( eyeX,eyeY,eyeZ, refX,refY,refZ, upX,upY,upZ );\n    // Determines the viewing transform, just like gluLookAt\n    // Default is cameraLookAt( 0,0,30, 0,0,0, 0,1,0 );\n\ncameraSetLimits( xmin, xmax, ymin, ymax, zmin, zmax );\n    // Sets the limits on the view volume, where zmin and zmax are\n    // given with respect to the view reference point, NOT the eye,\n    // and the xy limits are measured at the distance of the\n    // view reference point, NOT the near distance.\n    // Default is cameraSetLimits( -5,5, -5,5, -10,10 );\n\ncameraSetScale( limit );\n    // a convenience method, which is the same as calling\n    // cameraSetLimits( -limit,limit, -limit,limit, -2*limit, 2*limit );\n\ncameraSetOrthographic( ortho );\n    // Switch between orthographic and perspective projection.\n    // The parameter should be 0 for perspective, 1 for\n    // orthographic.  The default is perspective.\n\ncameraSetPreserveAspect( preserve );\n    // Determine whether the aspect ratio of the viewport should\n    // be respected.  The parameter should be 0 to ignore and\n    // 1 to respect the viewport aspect ratio.  The default\n    // is to preserve the aspect ratio.\n</code></pre> <p>In many cases, the default settings are sufficient. Note in particular how cameraLookAt and cameraSetLimits work together to set up the view and projection. The parameters to cameraLookAt represent three points in world coordinates. The view reference point, (refX,refY,refZ), should be somewhere in the middle of the scene that you want to render. The parameters to cameraSetLimits define a box about that view reference point that should contain everything that you want to appear in the image.</p> <p>For use with JOGL in Java, the camera API is implemented as a class named Camera, defined in the file jogl/Camera.java. The camera is meant for use with a GLPanel or GLCanvas that is being used as an OpenGL drawing surface. To use a camera, create an object of type Camera as an instance variable:</p> <p>camera = new Camera(); Before drawing the scene, call</p> <pre><code>camera.apply(gl2);\n</code></pre> <p>where gl2 is the OpenGL drawing context of type GL2. (Note the presence of the parameter gl2, which was not necessary in C; it is required because the OpenGL drawing context in JOGL is implemented as an object.) As in the C version, this sets the viewing and projection transformations and can replace any other code that you would use for that purpose. The functions for configuring the camera are the same in Java as in C, except that they become methods in the camera object, and true/false parameters are boolean instead of int:</p> <pre><code>camera.lookAt( eyeX,eyeY,eyeZ, refX,refY,refZ, upX,upY,upZ );\ncamera.setLimits( xmin,xmax, ymin,ymax, zmin,zmax );\ncamera.setScale( limit );\ncamera.setOrthographic( ortho );    // ortho is of type boolean\ncamera.setPreserveAspect( preserve ); // preserve is of type boolean\n</code></pre> <p>The camera comes with a simulated \"trackball.\" The trackball allows the user to rotate the view by clicking and dragging the mouse on the display. To use it with GLUT in C, you just need to install a mouse function and a mouse motion function by calling</p> <pre><code>glutMouseFunc( trackballMouseFunction );\nglutMotionFunc( trackballMotionFunction );\n</code></pre> <p>The functions trackballMouseFunction and trackballMotionFunction are defined as part of the camera API and are declared and documented in camera.h. The trackball works by modifying the viewing transformation associated with the camera, and it only works if cameraApply() is called at the beginning of the display function to set the viewing and projection transformations. To install a trackball for use with a Camera object in JOGL, call</p> <pre><code>camera.installTrackball(drawSurface);\n</code></pre> <p>where drawSurface is the component on which the camera is used.</p>"},{"location":"cn/c3/s4/","title":"3.4 \u591a\u8fb9\u5f62\u7f51\u683c\u548c glDrawArrays","text":"<p>Polygonal Meshes and glDrawArrays</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ea\u7528OpenGL\u7ed8\u5236\u4e86\u975e\u5e38\u7b80\u5355\u7684\u5f62\u72b6\u3002\u5728\u8fd9\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u4ee5OpenGL\u6e32\u67d3\u4e3a\u65b9\u4fbf\u7684\u65b9\u5f0f\u6765\u8868\u793a\u66f4\u590d\u6742\u7684\u5f62\u72b6\uff0c\u5e76\u4ecb\u7ecd\u4e00\u79cd\u65b0\u7684\u3001\u66f4\u9ad8\u6548\u7684\u7ed8\u5236OpenGL\u57fa\u5143\u7684\u65b9\u6cd5\u3002</p> <p>OpenGL\u53ea\u80fd\u76f4\u63a5\u6e32\u67d3\u70b9\u3001\u7ebf\u548c\u591a\u8fb9\u5f62\u3002\uff08\u4e8b\u5b9e\u4e0a\uff0c\u5728\u73b0\u4ee3OpenGL\u4e2d\uff0c\u4f7f\u7528\u7684\u552f\u4e00\u591a\u8fb9\u5f62\u662f\u4e09\u89d2\u5f62\u3002\uff09\u591a\u9762\u4f53\uff0c\u591a\u8fb9\u5f62\u7684\u4e09\u7ef4\u6a21\u62df\uff0c\u53ef\u4ee5\u88ab\u7cbe\u786e\u5730\u8868\u793a\uff0c\u56e0\u4e3a\u591a\u9762\u4f53\u7684\u9762\u662f\u591a\u8fb9\u5f62\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u53ea\u6709\u591a\u8fb9\u5f62\u53ef\u7528\uff0c\u90a3\u4e48\u66f2\u9762\uff0c\u6bd4\u5982\u7403\u9762\u7684\u8868\u9762\uff0c\u53ea\u80fd\u88ab\u8fd1\u4f3c\u3002\u4e00\u4e2a\u591a\u9762\u4f53\u53ef\u4ee5\u88ab\u8868\u793a\uff0c\u6216\u8005\u4e00\u4e2a\u66f2\u9762\u53ef\u4ee5\u88ab\u8fd1\u4f3c\uff0c\u4f5c\u4e3a\u591a\u8fb9\u5f62\u7f51\u683c\uff0c\u5373\u4e00\u7ec4\u6cbf\u5176\u8fb9\u8fde\u63a5\u7684\u591a\u8fb9\u5f62\u3002\u5982\u679c\u591a\u8fb9\u5f62\u5f88\u5c0f\uff0c\u8fd9\u4e2a\u8fd1\u4f3c\u770b\u8d77\u6765\u5c31\u50cf\u662f\u4e00\u4e2a\u66f2\u9762\u3002\uff08\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u7ae0\u8282\u4e2d\u770b\u5230\uff0c\u5982\u4f55\u4f7f\u7528\u5149\u7167\u6548\u679c\u4f7f\u591a\u8fb9\u5f62\u7f51\u683c\u66f4\u50cf\u66f2\u9762\uff0c\u800c\u4e0d\u50cf\u591a\u9762\u4f53\u3002\uff09</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u95ee\u9898\u662f\u5982\u4f55\u8868\u793a\u4e00\u7ec4\u591a\u8fb9\u5f62\u2014\u2014\u901a\u5e38\u662f\u4e00\u7ec4\u4e09\u89d2\u5f62\u3002\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u5f0f\u6765\u5c06\u8fd9\u6837\u7684\u4e00\u7ec4\u591a\u8fb9\u5f62\u8868\u793a\u4e3a\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002</p> <p>We have drawn only very simple shapes with OpenGL. In this section, we look at how more complex shapes can be represented in a way that is convenient for rendering in OpenGL, and we introduce a new, more efficient way to draw OpenGL primitives.</p> <p>OpenGL can only directly render points, lines, and polygons. (In fact, in modern OpenGL, the only polygons that are used are triangles.) A polyhedron, the 3D analog of a polygon, can be represented exactly, since a polyhedron has faces that are polygons. On the other hand, if only polygons are available, then a curved surface, such as the surface of a sphere, can only be approximated. A polyhedron can be represented, or a curved surface can be approximated, as a polygonal mesh, that is, a set of polygons that are connected along their edges. If the polygons are small, the approximation can look like a curved surface. (We will see in the next chapter how lighting effects can be used to make a polygonal mesh look more like a curved surface and less like a polyhedron.)</p> <p>So, our problem is to represent a set of polygons\u2014most often a set of triangles. We start by defining a convenient way to represent such a set as a data structure.</p>"},{"location":"cn/c3/s4/#341-\u7d22\u5f15\u9762\u96c6","title":"3.4.1 \u7d22\u5f15\u9762\u96c6","text":"<p>Indexed Face Sets</p> \u4e2d\u6587\u82f1\u6587 <p>\u591a\u8fb9\u5f62\u7f51\u683c\u4e2d\u7684\u591a\u8fb9\u5f62\u4e5f\u88ab\u79f0\u4e3a \"\u9762\"\uff08\u5982\u591a\u9762\u4f53\u7684\u9762\uff09\uff0c\u8868\u793a\u591a\u8fb9\u5f62\u7f51\u683c\u7684\u4e3b\u8981\u624b\u6bb5\u4e4b\u4e00\u662f\u7d22\u5f15\u9762\u96c6\u6216IFS\u3002</p> <p>IFS \u7684\u6570\u636e\u5305\u62ec\u51fa\u73b0\u5728\u7f51\u683c\u4e2d\u7684\u6240\u6709\u9876\u70b9\u7684\u5217\u8868\uff0c\u7ed9\u51fa\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5176\u7d22\u5f15\u6216\u4f4d\u7f6e\u5728\u5217\u8868\u4e2d\u7684\u6574\u6570\u6765\u6807\u8bc6\u9876\u70b9\u3002\u4f8b\u5982\uff0c\u8003\u8651\u8fd9\u4e2a \"\u623f\u5b50\"\uff0c\u4e00\u4e2a\u670910\u4e2a\u9876\u70b9\u548c9\u4e2a\u9762\u7684\u591a\u9762\u4f53\uff1a</p> <pre><code>Vertex #0.  (2, -1, 2)\nVertex #1.  (2, -1, -2)\nVertex #2.  (2, 1, -2)\nVertex #3.  (2, 1, 2)\nVertex #4.  (1.5, 1.5, 0)\nVertex #5.  (-1.5, 1.5, 0)\nVertex #6.  (-2, -1, 2)\nVertex #7.  (-2, 1, 2)\nVertex #8.  (-2, 1, -2)\nVertex #9.  (-2, -1, -2)\n</code></pre> <p>\u9876\u70b9\u7684\u987a\u5e8f\u662f\u5b8c\u5168\u4efb\u610f\u7684\u3002\u76ee\u7684\u53ea\u662f\u4e3a\u4e86\u8ba9\u6bcf\u4e2a\u9876\u70b9\u80fd\u591f\u901a\u8fc7\u4e00\u4e2a\u6574\u6570\u8fdb\u884c\u6807\u8bc6\u3002</p> <p>\u8981\u63cf\u8ff0\u7f51\u683c\u7684\u4e00\u4e2a\u591a\u8fb9\u5f62\u9762\uff0c\u6211\u4eec\u53ea\u9700\u5217\u51fa\u5176\u9876\u70b9\uff0c\u6309\u7167\u591a\u8fb9\u5f62\u5468\u56f4\u7684\u987a\u5e8f\u3002\u5bf9\u4e8e\u4e00\u4e2a IFS\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u5176\u5728\u5217\u8868\u4e2d\u7684\u7d22\u5f15\u6765\u6307\u5b9a\u4e00\u4e2a\u9876\u70b9\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u4e00\u4e2a\u91d1\u5b57\u5854\u7684\u4e09\u89d2\u5f62\u9762\u4e4b\u4e00\u662f\u7531\u9876\u70b9 #3\u3001\u9876\u70b9 #2 \u548c\u9876\u70b9 #4 \u7ec4\u6210\u7684\u591a\u8fb9\u5f62\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u6bcf\u4e2a\u9762\u7684\u9876\u70b9\u7d22\u5f15\u5217\u8868\u6765\u5b8c\u6574\u5730\u63cf\u8ff0\u7f51\u683c\u7684\u6570\u636e\u3002\u8fd9\u662f\u623f\u5b50\u7684\u9762\u6570\u636e\u3002\u8bf7\u8bb0\u4f4f\uff0c\u62ec\u53f7\u4e2d\u7684\u6570\u5b57\u662f\u9876\u70b9\u5217\u8868\u4e2d\u7684\u7d22\u5f15\uff1a</p> <pre><code>Face #0:  (0, 1, 2, 3)\nFace #1:  (3, 2, 4)\nFace #2:  (7, 3, 4, 5)\nFace #3:  (2, 8, 5, 4)\nFace #4:  (5, 8, 7)\nFace #5:  (0, 3, 7, 6)\nFace #6:  (0, 6, 9, 1)\nFace #7:  (2, 1, 9, 8)\nFace #8:  (6, 7, 8, 9)\n</code></pre> <p>\u540c\u6837\uff0c\u9762\u88ab\u5217\u51fa\u7684\u987a\u5e8f\u662f\u4efb\u610f\u7684\u3002\u5bf9\u4e8e\u4e00\u4e2a\u9762\u7684\u9876\u70b9\u5982\u4f55\u88ab\u5217\u51fa\uff0c\u4e5f\u6709\u4e00\u5b9a\u7684\u81ea\u7531\u5ea6\u3002\u4f60\u53ef\u4ee5\u4ece\u4efb\u610f\u9876\u70b9\u5f00\u59cb\u3002\u4e00\u65e6\u9009\u62e9\u4e86\u4e00\u4e2a\u8d77\u59cb\u9876\u70b9\uff0c\u5c31\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u987a\u5e8f\uff0c\u5bf9\u5e94\u4e8e\u4f60\u53ef\u4ee5\u6cbf\u7740\u591a\u8fb9\u5f62\u7684\u5468\u957f\u4ee5\u4e24\u79cd\u53ef\u80fd\u7684\u65b9\u5411\u524d\u8fdb\u3002\u4f8b\u5982\uff0c\u4ee5\u9876\u70b9 0 \u5f00\u59cb\uff0c\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u9762\u53ef\u4ee5\u88ab\u6307\u5b9a\u4e3a (0,1,2,3) \u6216 (0,3,2,1) \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u6b63\u786e\u7684\uff0c\u539f\u56e0\u5982\u4e0b\u3002\u4e00\u4e2a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u591a\u8fb9\u5f62\u53ef\u4ee5\u4ece\u4e24\u4e2a\u65b9\u5411\u89c2\u5bdf\uff1b\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u6709\u7740\u4e24\u4e2a\u9762\uff0c\u671d\u5411\u76f8\u53cd\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u901a\u5e38\u65b9\u4fbf\u7684\u505a\u6cd5\u662f\u8ba4\u4e3a\u5176\u4e2d\u4e00\u4e2a\u9762\u662f\u591a\u8fb9\u5f62\u7684 \"\u524d\u9762\"\uff0c\u53e6\u4e00\u4e2a\u662f \"\u540e\u9762\"\u3002\u5bf9\u4e8e\u50cf\u623f\u5b50\u8fd9\u6837\u7684\u591a\u9762\u4f53\uff0c\u524d\u9762\u662f\u671d\u5411\u591a\u9762\u4f53\u5916\u90e8\u7684\u90a3\u4e00\u9762\u3002\u901a\u5e38\u7684\u89c4\u5219\u662f\uff0c\u5f53\u67e5\u770b\u591a\u8fb9\u5f62\u7684\u524d\u9762\u65f6\uff0c\u5e94\u4ee5\u9006\u65f6\u9488\u987a\u5e8f\u5217\u51fa\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u3002\u5f53\u67e5\u770b\u80cc\u9762\u65f6\uff0c\u9876\u70b9\u5c06\u4ee5\u987a\u65f6\u9488\u987a\u5e8f\u5217\u51fa\u3002\u8fd9\u662fOpenGL\u4f7f\u7528\u7684\u9ed8\u8ba4\u89c4\u5219\u3002</p> <p>\u9876\u70b9\u548c\u9762\u6570\u636e\u7684\u7d22\u5f15\u9762\u96c6\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u5bf9\u4e8c\u7ef4\u6570\u7ec4\u3002\u5bf9\u4e8e\u623f\u5b50\uff0c\u5728Java\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528</p> <pre><code>double[][] vertexList =\n        {  {2,-1,2}, {2,-1,-2}, {2,1,-2}, {2,1,2}, {1.5,1.5,0},\n            {-1.5,1.5,0}, {-2,-1,2}, {-2,1,2}, {-2,1,-2}, {-2,-1,-2}  };\n\nint[][] faceList =\n        {  {0,1,2,3}, {3,2,4}, {7,3,4,5}, {2,8,5,4}, {5,8,7},\n            {0,3,7,6}, {0,6,9,1}, {2,1,9,8}, {6,7,8,9}  };\n</code></pre> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cIFS \u8fd8\u4f1a\u6709\u989d\u5916\u7684\u6570\u636e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u7ed9\u591a\u9762\u4f53\u7684\u9762\u7740\u8272\uff0c\u6bcf\u4e2a\u9762\u7528\u4e0d\u540c\u7684\u989c\u8272\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u53e6\u4e00\u4e2a\u6570\u7ec4 faceColors \u6765\u4fdd\u5b58\u989c\u8272\u6570\u636e\u3002faceColors \u7684\u6bcf\u4e2a\u5143\u7d20\u5c06\u662f\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u53d6\u503c\u8303\u56f4\u4e3a 0.0 \u5230 1.0 \u7684\u53cc\u7cbe\u5ea6\u503c\u7684\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u4e00\u4e2a\u9762\u7684 RGB \u989c\u8272\u5206\u91cf\u3002\u6709\u4e86\u8fd9\u4e2a\u8bbe\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u4f7f\u7528Java\u548cJOGL\u6765\u7ed8\u5236\u591a\u9762\u4f53\uff1a</p> <pre><code>for (int i = 0; i &lt; faceList.length; i++) {\n    gl2.glColor3dv( faceColors[i], 0 );  // \u8bbe\u7f6e\u7b2ci\u4e2a\u9762\u7684\u989c\u8272\u3002\n    gl2.glBegin(GL2.GL_TRIANGLE_FAN);\n    for (int j = 0; j &lt; faceList[i].length; j++) {\n        int vertexNum = faceList[i][j];  // \u9762i\u7684\u9876\u70b9j\u7684\u7d22\u5f15\u3002\n        double[] vertexCoords = vertexList[vertexNum];  // \u9876\u70b9\u672c\u8eab\u3002\n        gl2.glVertex3dv( vertexCoords, 0\n\n----\n\n\u6709\u5176\u4ed6\u5b58\u50a8 IFS \u6570\u636e\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5728 C \u4e2d\uff0c\u4e8c\u7ef4\u6570\u7ec4\u66f4\u52a0\u9ebb\u70e6\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u6765\u5b58\u50a8\u6570\u636e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u628a\u6240\u6709\u7684\u9876\u70b9\u5750\u6807\u5b58\u50a8\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u7ec4\u4e2d\u3002\u9876\u70b9\u6570\u7ec4\u7684\u957f\u5ea6\u5c06\u662f\u9876\u70b9\u6570\u7684\u4e09\u500d\uff0c\u9876\u70b9\u53f7\u4e3a N \u7684\u6570\u636e\u5c06\u4ece\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 3*N \u5f00\u59cb\u3002\u5bf9\u4e8e\u9762\u5217\u8868\uff0c\u6211\u4eec\u5fc5\u987b\u5904\u7406\u4e0d\u662f\u6240\u6709\u7684\u9762\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684\u9876\u70b9\u8fd9\u4e00\u4e8b\u5b9e\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5728\u6bcf\u4e2a\u9762\u7684\u6570\u636e\u4e4b\u540e\u5728\u6570\u7ec4\u4e2d\u6dfb\u52a0\u4e00\u4e2a -1\u3002\u5728 C \u4e2d\uff0c\u7531\u4e8e\u65e0\u6cd5\u786e\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53d8\u91cf\u6765\u5b58\u50a8\u9876\u70b9\u6570\u548c\u9762\u6570\u3002\u4f7f\u7528\u8fd9\u79cd\u8868\u793a\uff0c\u623f\u5b50\u7684\u6570\u636e\u5982\u4e0b\uff1a\n\n```c\nint vertexCount = 10;  // \u9876\u70b9\u6570\u3002\ndouble vertexData[] =\n        {  2,-1,2, 2,-1,-2, 2,1,-2, 2,1,2, 1.5,1.5,0,\n                -1.5,1.5,0, -2,-1,2, -2,1,2, -2,1,-2, -2,-1,-2  };\n\nint faceCount = 9;  // \u9762\u6570\u3002       \nint[][] faceData =\n        {  0,1,2,3,-1, 3,2,4,-1, 7,3,4,5,-1, 2,8,5,4,-1, 5,8,7,-1,\n            0,3,7,6,-1, 0,6,9,1,-1, 2,1,9,8,-1, 6,7,8,9,-1  };\n</code></pre> <p>\u5728\u6dfb\u52a0\u4e86\u4e00\u4e2a faceColors \u6570\u7ec4\u6765\u4fdd\u5b58\u9762\u7684\u989c\u8272\u6570\u636e\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b C \u4ee3\u7801\u6765\u7ed8\u5236\u623f\u5b50\uff1a</p> <pre><code>int i,j;\nj = 0; // faceData \u6570\u7ec4\u7684\u7d22\u5f15\nfor (i = 0; i &lt; faceCount; i++) {\n    glColor3dv( &amp;faceColors[ i*3 ] );  // \u8bbe\u7f6e\u7b2ci\u4e2a\u9762\u7684\u989c\u8272\u3002\n    glBegin(GL_TRIANGLE_FAN);\n    while ( faceData[j] != -1) { // \u4e3a\u7b2ci\u4e2a\u9762\u751f\u6210\u9876\u70b9\u3002\n        int vertexNum = faceData[j]; // \u5728 vertexData \u6570\u7ec4\u4e2d\u7684\u9876\u70b9\u7f16\u53f7\u3002\n        glVertex3dv( &amp;vertexData[ vertexNum*3 ] );\n        j++;\n    }\n    j++;  // \u5c06 j \u9012\u589e\u5230\u7ed3\u675f\u6b64\u9762\u6570\u636e\u7684 -1 \u7684\u4f4d\u7f6e\u3002\n    glEnd();\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\u4f7f\u7528\u4e86 C \u7684\u5730\u5740\u64cd\u4f5c\u7b26 &amp;\u3002\u4f8b\u5982\uff0c&amp;faceColors[i3] \u662f faceColors \u6570\u7ec4\u4e2d\u7b2c i3 \u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002\u8fd9\u4e2a\u5143\u7d20\u662f\u9762\u7f16\u53f7\u4e3a i \u7684\u4e09\u4e2a\u989c\u8272\u5206\u91cf\u503c\u4e2d\u7684\u7b2c\u4e00\u4e2a\u3002\u8fd9\u4e0e C \u4e2d glColor3dv \u7684\u53c2\u6570\u7c7b\u578b\u5339\u914d\uff0c\u56e0\u4e3a\u53c2\u6570\u662f\u6307\u9488\u7c7b\u578b\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7ed8\u5236\u591a\u9762\u4f53\u7684\u8fb9\u800c\u4e0d\u662f\u9762\uff0c\u53ea\u9700\u5728\u7ed8\u5236\u4ee3\u7801\u4e2d\u4f7f\u7528 GL_LINE_LOOP \u800c\u4e0d\u662f GL_TRIANGLE_FAN\uff08\u5e76\u4e14\u53ef\u80fd\u7701\u7565\u989c\u8272\u66f4\u6539\uff09\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u540c\u65f6\u7ed8\u5236\u9762\u548c\u8fb9\uff0c\u5c31\u4f1a\u9047\u5230\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6548\u679c\uff0c\u4f46\u6211\u4eec\u4f1a\u5728\u6df1\u5ea6\u6d4b\u8bd5\u4e2d\u9047\u5230\u4e00\u4e2a\u95ee\u9898\uff1a\u6cbf\u7740\u8fb9\u7f18\u7684\u50cf\u7d20\u4e0e\u9762\u4e0a\u7684\u50cf\u7d20\u5904\u4e8e\u76f8\u540c\u7684\u6df1\u5ea6\u3002\u5982 3.1.4\u5c0f\u8282 \u6240\u8ba8\u8bba\u7684\uff0c\u6df1\u5ea6\u6d4b\u8bd5\u65e0\u6cd5\u5f88\u597d\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002\u7136\u800c\uff0cOpenGL \u6709\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff1a\u4e00\u4e2a\u79f0\u4e3a \"\u591a\u8fb9\u5f62\u504f\u79fb\" \u7684\u7279\u6027\u3002\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u8c03\u6574\u591a\u8fb9\u5f62\u5728\u88c1\u526a\u5750\u6807\u4e2d\u7684\u6df1\u5ea6\uff0c\u4ee5\u907f\u514d\u4e24\u4e2a\u5bf9\u8c61\u7684\u6df1\u5ea6\u5b8c\u5168\u76f8\u540c\u3002\u8981\u5e94\u7528\u591a\u8fb9\u5f62\u504f\u79fb\uff0c\u60a8\u9700\u8981\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6765\u8bbe\u7f6e\u504f\u79fb\u91cf\u7684\u6570\u91cf\uff1a</p> <pre><code>glPolygonOffset(1,1);\n</code></pre> <p>\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed9\u51fa\u4e86\u504f\u79fb\u91cf\u7684\u6570\u91cf\uff0c\u5355\u4f4d\u7531\u7b2c\u4e00\u4e2a\u53c2\u6570\u786e\u5b9a\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u6709\u4e9b\u6a21\u7cca\uff1b\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u503c\u4e3a 1 \u4f3c\u4e4e\u90fd\u6709\u6548\u3002\u60a8\u8fd8\u9700\u8981\u5728\u7ed8\u5236\u9762\u65f6\u542f\u7528 GL_POLYGON_OFFSET_FILL \u529f\u80fd\u3002\u6d41\u7a0b\u7684\u5927\u7eb2\u5982\u4e0b\uff1a</p> <pre><code>glPolygonOffset(1,1);\nglEnable( GL_POLYGON_OFFSET_FILL );\n.\n.   // \u7ed8\u5236\u9762\u3002\n.\nglDisable( GL_POLYGON_OFFSET_FILL );\n.\n.   // \u7ed8\u5236\u8fb9\u3002\n.\n</code></pre> <p>\u6709\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u7ed8\u5236\u623f\u5b50\u548c\u5176\u4ed6\u4e00\u4e9b\u591a\u9762\u4f53\u3002\u5b83\u4f7f\u7528\u7684\u7ed8\u5236\u4ee3\u7801\u4e0e\u6211\u4eec\u5728\u8fd9\u91cc\u770b\u5230\u7684\u975e\u5e38\u76f8\u4f3c\uff0c\u5305\u62ec\u591a\u8fb9\u5f62\u504f\u79fb\u3002\u8be5\u7a0b\u5e8f\u8fd8\u662f\u4f7f\u7528\u76f8\u673a\u548c\u8f68\u8ff9\u7403 API \u7684\u793a\u4f8b\uff0c\u8fd9\u4e2a API \u5728 3.3.5\u5c0f\u8282 \u4e2d\u6709\u6240\u8ba8\u8bba\uff0c\u56e0\u6b64\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9f20\u6807\u62d6\u52a8\u591a\u9762\u4f53\u6765\u65cb\u8f6c\u5b83\u3002\u8be5\u7a0b\u5e8f\u5177\u6709\u83dc\u5355\uff0c\u5141\u8bb8\u7528\u6237\u6253\u5f00\u548c\u5173\u95ed\u8fb9\u7f18\u548c\u9762\u7684\u6e32\u67d3\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5176\u4ed6\u9009\u9879\u3002\u8be5\u7a0b\u5e8f\u7684Java\u7248\u672c\u662f jogl/IFSPolyhedronViewer.java\uff0cC \u7248\u672c\u662f glut/ifs-polyhedron-viewer.c\u3002\u5728 C \u7248\u672c\u4e2d\uff0c\u8981\u8bbf\u95ee\u83dc\u5355\uff0c\u8bf7\u53f3\u952e\u5355\u51fb\u663e\u793a\u533a\u57df\u3002\u591a\u9762\u4f53\u7684\u6570\u636e\u662f\u5728 jogl/Polyhedron.java \u548c glut/polyhedron.c \u4e2d\u521b\u5efa\u7684\u3002\u4ee5\u4e0b\u662f\u7a0b\u5e8f\u7684\u5b9e\u65f6\u6f14\u793a\u7248\u672c\u4f9b\u60a8\u5c1d\u8bd5\uff1a</p> <p></p> <p>The polygons in a polygonal mesh are also referred to as \"faces\" (as in the faces of a polyhedron), and one of the primary means for representing a polygonal mesh is as an indexed face set, or IFS.</p> <p>The data for an IFS includes a list of all the vertices that appear in the mesh, giving the coordinates of each vertex. A vertex can then be identified by an integer that specifies its index, or position, in the list. As an example, consider this \"house,\" a polyhedron with 10 vertices and 9 faces:</p> <p></p> <p>The vertex list for this polyhedron has the form</p> <pre><code>Vertex #0.  (2, -1, 2)\nVertex #1.  (2, -1, -2)\nVertex #2.  (2, 1, -2)\nVertex #3.  (2, 1, 2)\nVertex #4.  (1.5, 1.5, 0)\nVertex #5.  (-1.5, 1.5, 0)\nVertex #6.  (-2, -1, 2)\nVertex #7.  (-2, 1, 2)\nVertex #8.  (-2, 1, -2)\nVertex #9.  (-2, -1, -2)\n</code></pre> <p>The order of the vertices is completely arbitrary. The purpose is simply to allow each vertex to be identified by an integer.</p> <p>To describe one of the polygonal faces of a mesh, we just have to list its vertices, in order going around the polygon. For an IFS, we can specify a vertex by giving its index in the list. For example, we can say that one of the triangular faces of the pyramid is the polygon formed by vertex #3, vertex #2, and vertex #4. So, we can complete our data for the mesh by giving a list of vertex indices for each face. Here is the face data for the house. Remember that the numbers in parentheses are indices into the vertex list:</p> <pre><code>Face #0:  (0, 1, 2, 3)\nFace #1:  (3, 2, 4)\nFace #2:  (7, 3, 4, 5)\nFace #3:  (2, 8, 5, 4)\nFace #4:  (5, 8, 7)\nFace #5:  (0, 3, 7, 6)\nFace #6:  (0, 6, 9, 1)\nFace #7:  (2, 1, 9, 8)\nFace #8:  (6, 7, 8, 9)\n</code></pre> <p>Again, the order in which the faces are listed in arbitrary. There is also some freedom in how the vertices for a face are listed. You can start with any vertex. Once you've picked a starting vertex, there are two possible orderings, corresponding to the two possible directions in which you can go around the circumference of the polygon. For example, starting with vertex 0, the first face in the list could be specified either as (0,1,2,3) or as (0,3,2,1). However, the first possibility is the right one in this case, for the following reason. A polygon in 3D can be viewed from either side; we can think of it as having two faces, facing in opposite directions. It turns out that it is often convenient to consider one of those faces to be the \"front face\" of the polygon and one to be the \"back face.\" For a polyhedron like the house, the front face is the one that faces the outside of the polyhedron. The usual rule is that the vertices of a polygon should be listed in counterclockwise order when looking at the front face of the polygon. When looking at the back face, the vertices will be listed in clockwise order. This is the default rule used by OpenGL.</p> <p></p> <p>The vertex and face data for an indexed face set can be represented as a pair of two-dimensional arrays. For the house, in a version for Java, we could use</p> <pre><code>double[][] vertexList =\n        {  {2,-1,2}, {2,-1,-2}, {2,1,-2}, {2,1,2}, {1.5,1.5,0},\n            {-1.5,1.5,0}, {-2,-1,2}, {-2,1,2}, {-2,1,-2}, {-2,-1,-2}  };\n\nint[][] faceList =\n        {  {0,1,2,3}, {3,2,4}, {7,3,4,5}, {2,8,5,4}, {5,8,7},\n            {0,3,7,6}, {0,6,9,1}, {2,1,9,8}, {6,7,8,9}  };\n</code></pre> <p>In most cases, there will be additional data for the IFS. For example, if we want to color the faces of the polyhedron, with a different color for each face, then we could add another array, faceColors, to hold the color data. Each element of faceColors would be an array of three double values in the range 0.0 to 1.0, giving the RGB color components for one of the faces. With this setup, we could use the following code to draw the polyhedron, using Java and JOGL:</p> <pre><code>for (int i = 0; i &lt; faceList.length; i++) {\n    gl2.glColor3dv( faceColors[i], 0 );  // Set color for face number i.\n    gl2.glBegin(GL2.GL_TRIANGLE_FAN);\n    for (int j = 0; j &lt; faceList[i].length; j++) {\n        int vertexNum = faceList[i][j];  // Index for vertex j of face i.\n        double[] vertexCoords = vertexList[vertexNum];  // The vertex itself.\n        gl2.glVertex3dv( vertexCoords, 0 );\n    }\n    gl2.glEnd();\n}\n</code></pre> <p>Note that every vertex index is used three or four times in the face data. With the IFS representation, a vertex is represented in the face list by a single integer. This representation uses less memory space than the alternative, which would be to write out the vertex in full each time it occurs in the face data. For the house example, the IFS representation uses 64 numbers to represent the vertices and faces of the polygonal mesh, as opposed to 102 numbers for the alternative representation.</p> <p>Indexed face sets have another advantage. Suppose that we want to modify the shape of the polygon mesh by moving its vertices. We might do this in each frame of an animation, as a way of \"morphing\" the shape from one form to another. Since only the positions of the vertices are changing, and not the way that they are connected together, it will only be necessary to update the 30 numbers in the vertex list. The values in the face list will remain unchanged.</p> <p>There are other ways to store the data for an IFS. In C, for example, where two-dimensional arrays are more problematic, we might use one dimensional arrays for the data. In that case, we would store all the vertex coordinates in a single array. The length of the vertex array would be three times the number of vertices, and the data for vertex number N will begin at index 3*N in the array. For the face list, we have to deal with the fact that not all faces have the same number of vertices. A common solution is to add a -1 to the array after the data for each face. In C, where it is not possible to determine the length of an array, we also need variables to store the number of vertices and the number of faces. Using this representation, the data for the house becomes:</p> <pre><code>int vertexCount = 10;  // Number of vertices.\ndouble vertexData[] =\n        {  2,-1,2, 2,-1,-2, 2,1,-2, 2,1,2, 1.5,1.5,0,\n                -1.5,1.5,0, -2,-1,2, -2,1,2, -2,1,-2, -2,-1,-2  };\n\nint faceCount = 9;  // Number of faces.       \nint[][] faceData =\n        {  0,1,2,3,-1, 3,2,4,-1, 7,3,4,5,-1, 2,8,5,4,-1, 5,8,7,-1,\n            0,3,7,6,-1, 0,6,9,1,-1, 2,1,9,8,-1, 6,7,8,9,-1  };\n</code></pre> <p>After adding a faceColors array to hold color data for the faces, we can use the following C code to draw the house:</p> <pre><code>int i,j;\nj = 0; // index into the faceData array\nfor (i = 0; i &lt; faceCount; i++) {\n    glColor3dv( &amp;faceColors[ i*3 ] );  // Color for face number i.\n    glBegin(GL_TRIANGLE_FAN);\n    while ( faceData[j] != -1) { // Generate vertices for face number i.\n        int vertexNum = faceData[j]; // Vertex number in vertexData array.\n        glVertex3dv( &amp;vertexData[ vertexNum*3 ] );\n        j++;\n    }\n    j++;  // increment j past the -1 that ended the data for this face.\n    glEnd();\n}\n</code></pre> <p>Note the use of the C address operator, &amp;. For example, &amp;faceColors[i3] is a pointer to element number i3 in the faceColors array. That element is the first of the three color component values for face number i. This matches the parameter type for glColor3dv in C, since the parameter is a pointer type.</p> <p>We could easily draw the edges of the polyhedron instead of the faces simply by using GL_LINE_LOOP instead of GL_TRIANGLE_FAN in the drawing code (and probably leaving out the color changes). An interesting issue comes up if we want to draw both the faces and the edges. This can be a nice effect, but we run into a problem with the depth test: Pixels along the edges lie at the same depth as pixels on the faces. As discussed in Subsection 3.1.4, the depth test cannot handle this situation well. However, OpenGL has a solution: a feature called \"polygon offset.\" This feature can adjust the depth, in clip coordinates, of a polygon, in order to avoid having two objects exactly at the same depth. To apply polygon offset, you need to set the amount of offset by calling</p> <pre><code>glPolygonOffset(1,1);\n</code></pre> <p>The second parameter gives the amount of offset, in units determined by the first parameter. The meaning of the first parameter is somewhat obscure; a value of 1 seems to work in all cases. You also have to enable the GL_POLYGON_OFFSET_FILL feature while drawing the faces. An outline for the procedure is</p> <pre><code>glPolygonOffset(1,1);\nglEnable( GL_POLYGON_OFFSET_FILL );\n.\n.   // Draw the faces.\n.\nglDisable( GL_POLYGON_OFFSET_FILL );\n.\n.   // Draw the edges.\n.\n</code></pre> <p>There is a sample program that can draw the house and a number of other polyhedra. It uses drawing code very similar to what we have looked at here, including polygon offset. The program is also an example of using the camera and trackball API that was discussed in Subsection 3.3.5, so that the user can rotate a polyhedron by dragging it with the mouse. The program has menus that allow the user to turn rendering of edges and faces on and off, plus some other options. The Java version of the program is jogl/IFSPolyhedronViewer.java, and the C version is glut/ifs-polyhedron-viewer.c. To get at the menu in the C version, right-click on the display. The data for the polyhedra are created in jogl/Polyhedron.java and glut/polyhedron.c. And here is a live demo version of the program for you to try:</p> <p></p>"},{"location":"cn/c3/s4/#342-gldrawarrays\u548cgldrawelements","title":"3.4.2 glDrawArrays\u548cglDrawElements","text":"<p>glDrawArrays and glDrawElements</p> \u4e2d\u6587\u82f1\u6587 <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u6240\u89c1\u5230\u7684\u6240\u6709 OpenGL \u547d\u4ee4\u90fd\u662f\u539f\u59cb OpenGL 1.0 \u7684\u4e00\u90e8\u5206\u3002OpenGL 1.1 \u6dfb\u52a0\u4e86\u4e00\u4e9b\u529f\u80fd\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u5173\u4e8e\u539f\u59cb OpenGL \u7684\u4e00\u4e2a\u62b1\u6028\u662f\u7ed8\u5236\u57fa\u5143\u6240\u9700\u7684\u51fd\u6570\u8c03\u7528\u592a\u591a\uff0c\u4f7f\u7528\u8bf8\u5982 glBegin/glEnd \u4e0e glVertex2d \u548c glColor3fv \u8fd9\u6837\u7684\u51fd\u6570\u6765\u7ed8\u5236\u57fa\u5143\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cOpenGL 1.1 \u5f15\u5165\u4e86\u51fd\u6570 glDrawArrays \u548c glDrawElements\u3002\u8fd9\u4e9b\u51fd\u6570\u5728\u73b0\u4ee3 OpenGL \u4e2d\u4ecd\u5728\u4f7f\u7528\uff0c\u5305\u62ec WebGL\u3002\u6211\u4eec\u9996\u5148\u6765\u770b\u770b glDrawArrays\u3002C \u7248\u672c\u548c Java \u7248\u672c\u7684 API \u4e4b\u95f4\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\u3002\u6211\u4eec\u5148\u8003\u8651 C \u7248\u672c\uff0c\u63a5\u4e0b\u6765\u4f1a\u5904\u7406 Java \u7248\u672c\u6240\u9700\u7684\u66f4\u6539\u3002</p> <p>\u4f7f\u7528 glDrawArrays\uff0c\u7ed8\u5236\u4e00\u4e2a\u57fa\u5143\u6240\u9700\u7684\u6240\u6709\u6570\u636e\uff0c\u5305\u62ec\u9876\u70b9\u5750\u6807\u3001\u989c\u8272\u548c\u5176\u4ed6\u9876\u70b9\u5c5e\u6027\uff0c\u53ef\u4ee5\u6253\u5305\u5230\u6570\u7ec4\u4e2d\u3002\u4e00\u65e6\u5b8c\u6210\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u5355\u4e2a\u8c03\u7528 glDrawArrays \u6765\u7ed8\u5236\u57fa\u5143\u3002\u8bf7\u8bb0\u4f4f\uff0c\u4e00\u4e2a\u57fa\u5143\uff0c\u6bd4\u5982 GL_LINE_LOOP \u6216 GL_TRIANGLES\uff0c\u53ef\u80fd\u5305\u542b\u5927\u91cf\u9876\u70b9\uff0c\u56e0\u6b64\u51cf\u5c11\u51fd\u6570\u8c03\u7528\u7684\u6570\u91cf\u662f\u76f8\u5f53\u53ef\u89c2\u7684\u3002</p> <p>\u8981\u4f7f\u7528 glDrawArrays\uff0c\u5fc5\u987b\u5c06\u4e00\u4e2a\u57fa\u5143\u7684\u6240\u6709\u9876\u70b9\u5750\u6807\u5b58\u50a8\u5728\u4e00\u4e2a\u5355\u4e00\u7684\u4e00\u7ef4\u6570\u7ec4\u4e2d\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 int\u3001float \u6216 double \u6570\u7ec4\uff0c\u5e76\u4e14\u6bcf\u4e2a\u9876\u70b9\u53ef\u4ee5\u6709 2\u30013 \u6216 4 \u4e2a\u5750\u6807\u3002\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u4e0e\u60a8\u4f1a\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u8bf8\u5982 glVertex3f \u7684\u51fd\u6570\u7684\u76f8\u540c\u6570\u5b57\u76f8\u540c\u3002\u60a8\u9700\u8981\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\u544a\u8bc9 OpenGL \u5728\u54ea\u91cc\u627e\u5230\u6570\u636e\uff1a</p> <pre><code>void glVertexPointer(int size, int type, int stride, void* array)\n</code></pre> <p>size \u53c2\u6570\u662f\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\u6570\u3002\uff08\u60a8\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u9876\u70b9\u63d0\u4f9b\u76f8\u540c\u6570\u91cf\u7684\u5750\u6807\u3002\uff09\u7c7b\u578b\u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u544a\u8bc9\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u6570\u636e\u7c7b\u578b\u3002\u53ef\u80fd\u7684\u503c\u6709 GL_FLOAT\u3001GL_INT \u548c GL_DOUBLE\u3002\u8fd9\u91cc\u63d0\u4f9b\u7684\u5e38\u6570\u5fc5\u987b\u4e0e\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u6570\u636e\u7c7b\u578b\u76f8\u5339\u914d\u3002stride \u901a\u5e38\u662f 0\uff0c\u610f\u5473\u7740\u6570\u636e\u503c\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\u8fde\u7eed\u7684\u4f4d\u7f6e\uff1b\u5982\u679c\u60c5\u51b5\u4e0d\u662f\u8fd9\u6837\uff0c\u5219 stride \u7ed9\u51fa\u4e86\u4e00\u4e2a\u9876\u70b9\u7684\u6570\u636e\u4e0e\u4e0b\u4e00\u4e2a\u9876\u70b9\u7684\u6570\u636e\u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\uff08\u8fd9\u6837\u53ef\u4ee5\u8ba9\u60a8\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u5b58\u50a8\u9876\u70b9\u5750\u6807\u4ee5\u53ca\u5176\u4ed6\u6570\u636e\u3002\uff09\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u5305\u542b\u6570\u636e\u7684\u6570\u7ec4\u3002\u5b83\u88ab\u5217\u4e3a\u7c7b\u578b\u4e3a \"void*\" \u7684\u6570\u636e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6307\u5411\u4efb\u4f55\u7c7b\u578b\u6570\u636e\u7684\u6307\u9488\u7684 C \u6570\u636e\u7c7b\u578b\u3002\uff08\u56de\u60f3\u4e00\u4e0b\uff0cC \u4e2d\u7684\u6570\u7ec4\u53d8\u91cf\u662f\u6307\u9488\u7684\u4e00\u79cd\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5c06\u6570\u7ec4\u53d8\u91cf\u4f5c\u4e3a\u7b2c\u56db\u4e2a\u53c2\u6570\u76f4\u63a5\u4f20\u9012\u3002\uff09\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u5728 xy \u5e73\u9762\u4e0a\u7ed8\u5236\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8bbe\u7f6e\u9876\u70b9\u6570\u7ec4\uff1a</p> <pre><code>float coords[8] = { -0.5,-0.5, 0.5,-0.5, 0.5,0.5, -0.5,0.5 };\n\nglVertexPointer( 2, GL_FLOAT, 0, coords );\n</code></pre> <p>\u9664\u4e86\u8bbe\u7f6e\u9876\u70b9\u5750\u6807\u7684\u4f4d\u7f6e\u4e4b\u5916\uff0c\u60a8\u8fd8\u9700\u8981\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\u542f\u7528\u6570\u7ec4\u7684\u4f7f\u7528\uff1a</p> <pre><code>glEnableClientState(GL_VERTEX_ARRAY);\n</code></pre> <p>\u9664\u975e\u542f\u7528\u4e86\u8be5\u72b6\u6001\uff0c\u5426\u5219 OpenGL \u5c06\u5ffd\u7565\u9876\u70b9\u6307\u9488\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 glDisableClientState \u6765\u7981\u7528\u9876\u70b9\u6570\u7ec4\u7684\u4f7f\u7528\u3002\u6700\u540e\uff0c\u4e3a\u4e86\u5b9e\u9645\u7ed8\u5236\u57fa\u5143\uff0c\u60a8\u5c06\u8c03\u7528\u4ee5\u4e0b\u51fd\u6570\uff1a</p> <pre><code>void glDrawArrays( int primitiveType, int firstVertex, int vertexCount)\n</code></pre> <p>\u6b64\u51fd\u6570\u8c03\u7528\u5bf9\u5e94\u4e8e\u4e00\u6b21 glBegin/glEnd \u7684\u4f7f\u7528\u3002primitiveType \u544a\u8bc9\u6b63\u5728\u7ed8\u5236\u7684\u662f\u54ea\u79cd\u57fa\u5143\u7c7b\u578b\uff0c\u4f8b\u5982 GL_QUADS \u6216 GL_TRIANGLE_STRIP\u3002\u53ef\u4ee5\u4f7f\u7528\u4e0e glBegin \u76f8\u540c\u7684\u5341\u79cd\u57fa\u5143\u7c7b\u578b\u4e4b\u4e00\u3002firstVertex \u53c2\u6570\u662f\u8981\u7528\u4e8e\u7ed8\u5236\u57fa\u5143\u7684\u7b2c\u4e00\u4e2a\u9876\u70b9\u7684\u7f16\u53f7\u3002\u6ce8\u610f\uff0c\u4f4d\u7f6e\u4ee5\u9876\u70b9\u7f16\u53f7\u8868\u793a\uff1b\u76f8\u5e94\u7684\u6570\u7ec4\u7d22\u5f15\u5c06\u662f\u9876\u70b9\u7f16\u53f7\u4e58\u4ee5\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\u6570\uff0c\u8fd9\u662f\u5728\u8c03\u7528 glVertexPointer \u65f6\u8bbe\u7f6e\u7684\u3002vertexCount \u53c2\u6570\u662f\u8981\u4f7f\u7528\u7684\u9876\u70b9\u6570\uff0c\u5c31\u50cf\u8c03\u7528 glVertex* \u4e00\u6837\u3002\u901a\u5e38\uff0cfirstVertex \u5c06\u4e3a\u96f6\uff0cvertexCount \u5c06\u4e3a\u6570\u7ec4\u4e2d\u9876\u70b9\u7684\u603b\u6570\u3002\u6211\u4eec\u793a\u4f8b\u4e2d\u7ed8\u5236\u6b63\u65b9\u5f62\u7684\u547d\u4ee4\u5982\u4e0b\uff1a</p> <pre><code>glDrawArrays( GL_TRIANGLE_FAN, 0, 4 );\n</code></pre> <p>\u901a\u5e38\uff0c\u9664\u4e86\u9876\u70b9\u5750\u6807\u4e4b\u5916\uff0c\u6bcf\u4e2a\u9876\u70b9\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u6570\u636e\u5173\u8054\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u60f3\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u4e0d\u540c\u7684\u989c\u8272\u3002\u9876\u70b9\u7684\u989c\u8272\u53ef\u4ee5\u653e\u5165\u53e6\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u60a8\u5fc5\u987b\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6307\u5b9a\u6570\u636e\u7684\u4f4d\u7f6e\uff1a</p> <pre><code>void glColorPointer(int size, int type, int stride, void* array)\n</code></pre> <p>\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u4e0e gVertexPointer \u76f8\u540c\u3002\u60a8\u9700\u8981\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\u542f\u7528\u989c\u8272\u6570\u7ec4\uff1a</p> <pre><code>glEnableClientState(GL_COLOR_ARRAY);\n</code></pre> <p>\u4f7f\u7528\u6b64\u8bbe\u7f6e\uff0c\u5f53\u60a8\u8c03\u7528 glDrawArrays \u65f6\uff0cOpenGL \u5c06\u4ece\u989c\u8272\u6570\u7ec4\u4e2d\u540c\u65f6\u83b7\u53d6\u6bcf\u4e2a\u9876\u70b9\u7684\u989c\u8272\u548c\u9876\u70b9\u5750\u6807\u3002\u7a0d\u540e\uff0c\u6211\u4eec\u5c06\u9047\u5230\u9664\u5750\u6807\u548c\u989c\u8272\u4e4b\u5916\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u9876\u70b9\u6570\u636e\uff0c\u5904\u7406\u65b9\u5f0f\u57fa\u672c\u76f8\u540c\u3002</p> <p>\u8ba9\u6211\u4eec\u5c06\u8fd9\u4e9b\u5185\u5bb9\u6574\u5408\u8d77\u6765\uff0c\u4ee5\u7ed8\u5236\u6807\u51c6\u7684 OpenGL \u7ea2/\u7eff/\u84dd\u4e09\u89d2\u5f62\uff0c\u6211\u4eec\u5728 3.1.2\u5c0f\u8282 \u4e2d\u4f7f\u7528 glBegin/glEnd \u7ed8\u5236\u8fc7\u3002\u7531\u4e8e\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u5177\u6709\u4e0d\u540c\u7684\u989c\u8272\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u989c\u8272\u6570\u7ec4\u4ee5\u53ca\u9876\u70b9\u6570\u7ec4\u3002</p> <pre><code>float coords[6] = { -0.9,-0.9,  0.9,-0.9,  0,0.7 }; // \u6bcf\u4e2a\u9876\u70b9\u4e24\u4e2a\u5750\u6807\u3002\nfloat colors[9] = { 1,0,0,  0,1,0,  1,0,0 };  // \u6bcf\u4e2a\u9876\u70b9\u4e09\u4e2a RGB \u503c\u3002\n\nglVertexPointer( 2, GL_FLOAT, 0, coords );  // \u8bbe\u7f6e\u6570\u636e\u7c7b\u578b\u548c\u4f4d\u7f6e\u3002\nglColorPointer( 3, GL_FLOAT, 0, colors );\n\nglEnableClientState( GL_VERTEX_ARRAY );  // \u542f\u7528\u6570\u7ec4\u4f7f\u7528\u3002\nglEnableClientState( GL_COLOR_ARRAY );\n\nglDrawArrays( GL_TRIANGLES, 0, 3 ); // \u4f7f\u7528 3 \u4e2a\u9876\u70b9\uff0c\u4ece\u9876\u70b9 0 \u5f00\u59cb\u3002\n</code></pre> <p>\u5b9e\u9645\u4e0a\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u4ee3\u7801\u90fd\u5fc5\u987b\u4f4d\u4e8e\u540c\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5b9e\u9645\u8fdb\u884c\u7ed8\u5236\u7684\u51fd\u6570 glDrawArrays \u5fc5\u987b\u4f4d\u4e8e\u7ed8\u5236\u56fe\u50cf\u7684\u663e\u793a\u4f8b\u7a0b\u4e2d\u3002\u5176\u4f59\u7684\u90e8\u5206\u53ef\u4ee5\u653e\u5728\u663e\u793a\u4f8b\u7a0b\u4e2d\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u4f8b\u7a0b\u4e2d\u5b8c\u6210\uff0c\u4f8b\u5982\u3002</p> <p>\u51fd\u6570 glDrawElements \u7c7b\u4f3c\u4e8e glDrawArrays\uff0c\u4f46\u8bbe\u8ba1\u7528\u4e8e\u4e0e\u7d22\u5f15\u9762\u96c6\u7c7b\u4f3c\u7684\u683c\u5f0f\u7684\u6570\u636e\u3002\u4f7f\u7528 glDrawArrays\uff0cOpenGL \u6309\u987a\u5e8f\u4ece\u542f\u7528\u7684\u6570\u7ec4\u4e2d\u63d0\u53d6\u6570\u636e\uff0c\u5148\u662f\u9876\u70b9 0\uff0c\u7136\u540e\u662f\u9876\u70b9 1\uff0c\u7136\u540e\u662f\u9876\u70b9 2\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u800c\u4f7f\u7528 glDrawElements\uff0c\u60a8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9876\u70b9\u7f16\u53f7\u5217\u8868\u3002OpenGL \u5c06\u904d\u5386\u9876\u70b9\u7f16\u53f7\u5217\u8868\uff0c\u4ece\u6570\u7ec4\u4e2d\u83b7\u53d6\u6307\u5b9a\u9876\u70b9\u7684\u6570\u636e\u3002\u4e0e\u7d22\u5f15\u9762\u96c6\u4e00\u6837\uff0c\u8fd9\u6837\u505a\u7684\u4f18\u70b9\u5728\u4e8e\u53ef\u4ee5\u591a\u6b21\u91cd\u7528\u540c\u4e00\u9876\u70b9\u3002</p> <p>\u8981\u4f7f\u7528 glDrawElements \u7ed8\u5236\u4e00\u4e2a\u57fa\u5143\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8\u9876\u70b9\u7f16\u53f7\u3002\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u662f 8\u300116 \u6216 32 \u4f4d\u6574\u6570\u3002\uff08\u5b83\u4eec\u5e94\u8be5\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u4f46\u5e38\u89c4\u6b63\u6574\u6570\u7684\u6570\u7ec4\u4e5f\u53ef\u4ee5\u5de5\u4f5c\u3002\uff09\u60a8\u8fd8\u9700\u8981\u6570\u7ec4\u6765\u5b58\u50a8\u9876\u70b9\u5750\u6807\u548c\u5176\u4ed6\u9876\u70b9\u6570\u636e\uff0c\u5e76\u4e14\u5fc5\u987b\u4ee5\u4e0e glDrawArrays \u76f8\u540c\u7684\u65b9\u5f0f\u542f\u7528\u8fd9\u4e9b\u6570\u7ec4\uff0c\u4f7f\u7528\u8bf8\u5982 glVertexArray \u548c glEnableClientState \u4e4b\u7c7b\u7684\u51fd\u6570\u3002\u8981\u5b9e\u9645\u7ed8\u5236\u57fa\u5143\uff0c\u8c03\u7528\u4ee5\u4e0b\u51fd\u6570\uff1a</p> <pre><code>void glDrawElements( int primitiveType, vertexCount, dataType, void *array)\n</code></pre> <p>\u8fd9\u91cc\uff0cprimitiveType \u662f\u5341\u79cd\u57fa\u5143\u7c7b\u578b\u4e4b\u4e00\uff0c\u5982 GL_LINES\uff0cvertexCount \u662f\u8981\u7ed8\u5236\u7684\u9876\u70b9\u6570\uff0cdataType \u6307\u5b9a\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0carray \u662f\u4fdd\u5b58\u9876\u70b9\u7f16\u53f7\u5217\u8868\u7684\u6570\u7ec4\u3002dataType \u5fc5\u987b\u4f5c\u4e3a\u5e38\u91cf GL_UNSIGNED_BYTE\u3001GL_UNSIGNED_SHORT \u6216 GL_UNSIGNED_INT \u4e4b\u4e00\u7ed9\u51fa\uff0c\u4ee5\u5206\u522b\u6307\u5b9a 8\u300116 \u6216 32 \u4f4d\u6574\u6570\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed8\u5236\u4e00\u4e2a\u7acb\u65b9\u4f53\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u7acb\u65b9\u4f53\u7684\u6240\u6709\u516d\u4e2a\u9762\u4f5c\u4e3a\u4e00\u4e2a GL_QUADS \u7c7b\u578b\u7684\u57fa\u5143\u7ed8\u5236\u3002\u6211\u4eec\u9700\u8981\u5c06\u9876\u70b9\u5750\u6807\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u5e76\u5c06\u9762\u7684\u9876\u70b9\u7f16\u53f7\u5b58\u50a8\u5728\u53e6\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u6211\u8fd8\u5c06\u4f7f\u7528\u4e00\u4e2a\u989c\u8272\u6570\u7ec4\u6765\u5b58\u50a8\u9876\u70b9\u989c\u8272\u3002\u9876\u70b9\u989c\u8272\u5c06\u88ab\u63d2\u503c\u5230\u9762\u4e0a\u7684\u50cf\u7d20\u4e0a\uff0c\u5c31\u50cf\u7ea2/\u7eff/\u84dd\u4e09\u89d2\u5f62\u4e00\u6837\u3002\u4ee5\u4e0b\u4ee3\u7801\u53ef\u4ee5\u7528\u6765\u7ed8\u5236\u7acb\u65b9\u4f53\u3002\u518d\u6b21\u8bf4\u660e\uff0c\u8fd9\u4e9b\u4ee3\u7801\u4e0d\u4e00\u5b9a\u8981\u5728\u7a0b\u5e8f\u7684\u540c\u4e00\u90e8\u5206\uff1a</p> <pre><code>float vertexCoords[24] = {  // \u7acb\u65b9\u4f53\u9876\u70b9\u7684\u5750\u6807\u3002\n        1,1,1,   1,1,-1,   1,-1,-1,   1,-1,1,\n        -1,1,1,  -1,1,-1,  -1,-1,-1,  -1,-1,1  };\n\nfloat vertexColors[24] = {  // \u6bcf\u4e2a\u9876\u70b9\u7684 RGB \u989c\u8272\u503c\n        1,1,1,   1,0,0,   1,1,0,   0,1,0,\n        0,0,1,   1,0,1,   0,0,0,   0,1,1  };\n\nint elementArray[24] = {  // \u516d\u4e2a\u9762\u7684\u9876\u70b9\u7f16\u53f7\u3002\n        0,1,2,3, 0,3,7,4, 0,4,5,1,\n        6,2,1,5, 6,5,4,7, 6,7,3,2  };\n\nglVertexPointer( 3, GL_FLOAT, 0, vertexCoords );\nglColorPointer( 3, GL_FLOAT, 0, vertexColors );\n\nglEnableClientState( GL_VERTEX_ARRAY );\nglEnableClientState( GL_COLOR_ARRAY );\n\nglDrawElements( GL_QUADS, 24, GL_UNSIGNED_INT, elementArray );\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u9876\u70b9\u7684\u6570\u91cf\uff0c\u800c\u4e0d\u662f\u56db\u8fb9\u5f62\u7684\u6570\u91cf\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f glut/cubes-with-vertex-arrays.c \u4f7f\u7528\u6b64\u4ee3\u7801\u7ed8\u5236\u4e86\u4e00\u4e2a\u7acb\u65b9\u4f53\u3002\u5b83\u4f7f\u7528 glDrawArrays \u7ed8\u5236\u4e86\u7b2c\u4e8c\u4e2a\u7acb\u65b9\u4f53\u3002Java \u7248\u672c\u662f jogl/CubesWithVertexArrays.java\uff0c\u4f46\u60a8\u9700\u8981\u5728\u7406\u89e3\u4e4b\u524d\u9605\u8bfb\u4e0b\u4e00\u5c0f\u8282\u3002\u8fd8\u6709\u4e00\u4e2a JavaScript \u7248\u672c\uff0cglsim/cubes-with-vertex-arrays.html\u3002</p> <p>All of the OpenGL commands that we have seen so far were part of the original OpenGL 1.0. OpenGL 1.1 added some features to increase performance. One complaint about the original OpenGL was the large number of function calls needed to draw a primitive using functions such as glVertex2d and glColor3fv with glBegin/glEnd. To address this issue, OpenGL 1.1 introduced the functions glDrawArrays and glDrawElements. These functions are still used in modern OpenGL, including WebGL. We will look at glDrawArrays first. There are some differences between the C and the Java versions of the API. We consider the C version first and will deal with the changes necessary for the Java version in the next subsection.</p> <p>When using glDrawArrays, all of the data that is needed to draw a primitive, including vertex coordinates, colors, and other vertex attributes, can be packed into arrays. Once that is done, the primitive can be drawn with a single call to glDrawArrays. Recall that a primitive such as a GL_LINE_LOOP or a GL_TRIANGLES can include a large number of vertices, so that the reduction in the number of function calls can be substantial.</p> <p>To use glDrawArrays, you must store all of the vertex coordinates for a primitive in a single one-dimensional array. You can use an array of int, float, or double, and you can have 2, 3, or 4 coordinates for each vertex. The data in the array are the same numbers that you would pass as parameters to a function such as glVertex3f, in the same order. You need to tell OpenGL where to find the data by calling</p> <pre><code>void glVertexPointer(int size, int type, int stride, void* array)\n</code></pre> <p>The size parameter is the number of coordinates per vertex. (You have to provide the same number of coordinates for each vertex.) The type is a constant that tells the data type of each of the numbers in the array. The possible values are GL_FLOAT, GL_INT, and GL_DOUBLE. The constant that you provide here must match the data type of the numbers in the array. The stride is usually 0, meaning that the data values are stored in consecutive locations in the array; if that is not the case, then stride gives the distance in bytes between the location of the data for one vertex and location for the next vertex. (This would allow you to store other data, along with the vertex coordinates, in the same array.) The final parameter is the array that contains the data. It is listed as being of type \"void*\", which is a C data type for a pointer that can point to any type of data. (Recall that an array variable in C is a kind of pointer, so you can just pass an array variable as the fourth parameter.) For example, suppose that we want to draw a square in the xy-plane. We can set up the vertex array with</p> <pre><code>float coords[8] = { -0.5,-0.5, 0.5,-0.5, 0.5,0.5, -0.5,0.5 };\n\nglVertexPointer( 2, GL_FLOAT, 0, coords );\n</code></pre> <p>In addition to setting the location of the vertex coordinates, you have to enable use of the array by calling</p> <pre><code>glEnableClientState(GL_VERTEX_ARRAY);\n</code></pre> <p>OpenGL ignores the vertex pointer except when this state is enabled. You can use glDisableClientState to disable use of the vertex array. Finally, in order to actually draw the primitive, you would call the function</p> <pre><code>void glDrawArrays( int primitiveType, int firstVertex, int vertexCount)\n</code></pre> <p>This function call corresponds to one use of glBegin/glEnd. The primitiveType tells which primitive type is being drawn, such as GL_QUADS or GL_TRIANGLE_STRIP. The same ten primitive types that can be used with glBegin can be used here. The parameter firstVertex is the number of the first vertex that is to be used for drawing the primitive. Note that the position is given in terms of vertex number; the corresponding array index would be the vertex number times the number of coordinates per vertex, which was set in the call to glVertexPointer. The vertexCount parameter is the number of vertices to be used, just as if glVertex* were called vertexCount times. Often, firstVertex will be zero, and vertexCount will be the total number of vertices in the array. The command for drawing the square in our example would be</p> <pre><code>glDrawArrays( GL_TRIANGLE_FAN, 0, 4 );\n</code></pre> <p>Often there is other data associated with each vertex in addition to the vertex coordinates. For example, you might want to specify a different color for each vertex. The colors for the vertices can be put into another array. You have to specify the location of the data by calling</p> <pre><code>void glColorPointer(int size, int type, int stride, void* array)\n</code></pre> <p>which works just like gVertexPointer. And you need to enable the color array by calling</p> <pre><code>glEnableClientState(GL_COLOR_ARRAY);\n</code></pre> <p>With this setup, when you call glDrawArrays, OpenGL will pull a color from the color array for each vertex at the same time that it pulls the vertex coordinates from the vertex array. Later, we will encounter other kinds of vertex data besides coordinates and color that can be dealt with in much the same way.</p> <p>Let's put this together to draw the standard OpenGL red/green/blue triangle, which we drew using glBegin/glEnd in Subsection 3.1.2. Since the vertices of the triangle have different colors, we will use a color array in addition to the vertex array.</p> <pre><code>float coords[6] = { -0.9,-0.9,  0.9,-0.9,  0,0.7 }; // two coords per vertex.\nfloat colors[9] = { 1,0,0,  0,1,0,  1,0,0 };  // three RGB values per vertex.\n\nglVertexPointer( 2, GL_FLOAT, 0, coords );  // Set data type and location.\nglColorPointer( 3, GL_FLOAT, 0, colors );\n\nglEnableClientState( GL_VERTEX_ARRAY );  // Enable use of arrays.\nglEnableClientState( GL_COLOR_ARRAY );\n\nglDrawArrays( GL_TRIANGLES, 0, 3 ); // Use 3 vertices, starting with vertex 0.\n</code></pre> <p>In practice, not all of this code has to be in the same place. The function that does the actual drawing, glDrawArrays, must be in the display routine that draws the image. The rest could be in the display routine, but could also be done, for example, in an initialization routine.</p> <p>The function glDrawElements is similar to glDrawArrays, but it is designed for use with data in a format similar to an indexed face set. With glDrawArrays, OpenGL pulls data from the enabled arrays in order, vertex 0, then vertex 1, then vertex 2, and so on. With glDrawElements, you provide a list of vertex numbers. OpenGL will go through the list of vertex numbers, pulling data for the specified vertices from the arrays. The advantage of this comes, as with indexed face sets, from the fact that the same vertex can be reused several times.</p> <p>To use glDrawElements to draw a primitive, you need an array to store the vertex numbers. The numbers in the array can be 8, 16, or 32 bit integers. (They are supposed to be unsigned integers, but arrays of regular positive integers will also work.) You also need arrays to store the vertex coordinates and other vertex data, and you must enable those arrays in the same way as for glDrawArrays, using functions such as glVertexArray and glEnableClientState. To actually draw the primitive, call the function</p> <pre><code>void glDrawElements( int primitiveType, vertexCount, dataType, void *array)\n</code></pre> <p>Here, primitiveType is one of the ten primitive types such as GL_LINES, vertexCount is the number of vertices to be drawn, dataType specifies the type of data in the array, and array is the array that holds the list of vertex numbers. The dataType must be given as one of the constants GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT to specify 8, 16, or 32 bit integers respectively.</p> <p>As an example, we can draw a cube. We can draw all six faces of the cube as one primitive of type GL_QUADS. We need the vertex coordinates in one array and the vertex numbers for the faces in another array. I will also use a color array for vertex colors. The vertex colors will be interpolated to pixels on the faces, just like the red/green/blue triangle. Here is code that could be used to draw the cube. Again, all this would not necessarily be in the same part of a program:</p> <pre><code>float vertexCoords[24] = {  // Coordinates for the vertices of a cube.\n        1,1,1,   1,1,-1,   1,-1,-1,   1,-1,1,\n        -1,1,1,  -1,1,-1,  -1,-1,-1,  -1,-1,1  };\n\nfloat vertexColors[24] = {  // An RGB color value for each vertex\n        1,1,1,   1,0,0,   1,1,0,   0,1,0,\n        0,0,1,   1,0,1,   0,0,0,   0,1,1  };\n\nint elementArray[24] = {  // Vertex numbers for the six faces.\n        0,1,2,3, 0,3,7,4, 0,4,5,1,\n        6,2,1,5, 6,5,4,7, 6,7,3,2  };\n\nglVertexPointer( 3, GL_FLOAT, 0, vertexCoords );\nglColorPointer( 3, GL_FLOAT, 0, vertexColors );\n\nglEnableClientState( GL_VERTEX_ARRAY );\nglEnableClientState( GL_COLOR_ARRAY );\n\nglDrawElements( GL_QUADS, 24, GL_UNSIGNED_INT, elementArray );\n</code></pre> <p>Note that the second parameter is the number of vertices, not the number of quads.</p> <p>The sample program glut/cubes-with-vertex-arrays.c uses this code to draw a cube. It draws a second cube using glDrawArrays. The Java version is jogl/CubesWithVertexArrays.java, but you need to read the next subsection before you can understand it. There is also a JavaScript version, glsim/cubes-with-vertex-arrays.html.</p>"},{"location":"cn/c3/s4/#343-java-\u4e2d\u7684\u6570\u636e\u7f13\u51b2\u533a","title":"3.4.3 Java \u4e2d\u7684\u6570\u636e\u7f13\u51b2\u533a","text":"<p>Data Buffers in Java</p> \u4e2d\u6587\u82f1\u6587 <p>\u666e\u901a\u7684 Java \u6570\u7ec4\u4e0d\u9002\u5408\u4e0e glDrawElements \u548c glDrawArrays \u4e00\u8d77\u4f7f\u7528\uff0c\u90e8\u5206\u539f\u56e0\u662f\u5b83\u4eec\u5b58\u50a8\u6570\u636e\u7684\u683c\u5f0f\uff0c\u90e8\u5206\u539f\u56e0\u662f\u5728 Java \u6570\u7ec4\u4e0e\u56fe\u5f62\u5904\u7406\u5355\u5143\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\u7684\u4f4e\u6548\u6027\u3002\u8fd9\u4e9b\u95ee\u9898\u901a\u8fc7\u4f7f\u7528\u76f4\u63a5 NIO \u7f13\u51b2\u533a\u6765\u89e3\u51b3\u3002\u8fd9\u91cc\u7684\u672f\u8bed \"nio\" \u6307\u7684\u662f\u5305 java.nio\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u7528\u4e8e\u8f93\u5165/\u8f93\u51fa\u7684\u7c7b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\"\u7f13\u51b2\u533a\" \u662f java.nio.Buffer \u7c7b\u6216\u5176\u5b50\u7c7b\u4e4b\u4e00\uff08\u5982 FloatBuffer \u6216 IntBuffer\uff09\u7684\u5bf9\u8c61\u3002\u6700\u540e\uff0c\"\u76f4\u63a5\" \u610f\u5473\u7740\u7f13\u51b2\u533a\u88ab\u4f18\u5316\uff0c\u4ee5\u4fbf\u5728\u5185\u5b58\u548c GPU \u7b49\u5176\u4ed6\u8bbe\u5907\u4e4b\u95f4\u76f4\u63a5\u4f20\u8f93\u6570\u636e\u3002\u4e0e\u6570\u7ec4\u7c7b\u4f3c\uff0cnio \u7f13\u51b2\u533a\u662f\u76f8\u540c\u7c7b\u578b\u7684\u5143\u7d20\u7684\u7f16\u53f7\u5e8f\u5217\u3002\u4f8b\u5982\uff0cFloatBuffer \u5305\u542b\u7c7b\u578b\u4e3a float \u7684\u503c\u7684\u7f16\u53f7\u5e8f\u5217\u3002\u9664\u4e86 boolean \u4e4b\u5916\uff0cJava \u7684\u6240\u6709\u539f\u59cb\u6570\u636e\u7c7b\u578b\u90fd\u6709 Buffer \u7684\u5b50\u7c7b\u3002</p> <p>\u5728 JOGL \u4e2d\uff0cnio \u7f13\u51b2\u533a\u5728\u591a\u4e2a\u4f7f\u7528\u6570\u7ec4\u7684\u5730\u65b9\u4f7f\u7528\uff0c\u5c31\u50cf\u5728 C API \u4e2d\u4f7f\u7528\u6570\u7ec4\u4e00\u6837\u3002\u4f8b\u5982\uff0cJOGL \u4e2d\u7684 GL2 \u7c7b\u6709\u4ee5\u4e0b glVertexPointer \u65b9\u6cd5\uff1a</p> <pre><code>public void glVertexPointer(int size, int type, int stride, Buffer buffer)\n</code></pre> <p>\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e0e C \u7248\u672c\u4e0d\u540c\u3002\u7f13\u51b2\u533a\u53ef\u4ee5\u662f FloatBuffer\u3001IntBuffer \u6216 DoubleBuffer \u7c7b\u578b\u3002\u7f13\u51b2\u533a\u7684\u7c7b\u578b\u5fc5\u987b\u4e0e\u65b9\u6cd5\u4e2d\u7684 type \u53c2\u6570\u5339\u914d\u3002\u4f8b\u5982 glColorPointer \u7b49\u51fd\u6570\u5de5\u4f5c\u65b9\u5f0f\u76f8\u540c\uff0cglDrawElements \u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f</p> <pre><code>public void glDrawElements( int primitiveType, vertexCount, \n                                        dataType, Buffer buffer)\n</code></pre> <p>\u5176\u4e2d\u7f13\u51b2\u533a\u53ef\u4ee5\u662f IntBuffer\u3001ShortBuffer \u6216 ByteBuffer \u7c7b\u578b\uff0c\u4ee5\u5339\u914d dataType UNSIGNED_INT\u3001UNSIGNED_SHORT \u6216 UNSIGNED_BYTE\u3002</p> <p>\u7c7b com.jogamp.common.nio.Buffers \u5305\u542b\u7528\u4e8e\u5904\u7406\u76f4\u63a5 nio \u7f13\u51b2\u533a\u7684\u9759\u6001\u5b9e\u7528\u65b9\u6cd5\u3002\u6700\u5bb9\u6613\u4f7f\u7528\u7684\u65b9\u6cd5\u662f\u4ece Java \u6570\u7ec4\u521b\u5efa\u7f13\u51b2\u533a\u3002\u4f8b\u5982\uff0c\u65b9\u6cd5 Buffers.newDirectFloatBuffer(array) \u5c06\u4e00\u4e2a\u6d6e\u70b9\u6570\u7ec4\u4f5c\u4e3a\u5176\u53c2\u6570\uff0c\u5e76\u521b\u5efa\u4e0e\u6570\u7ec4\u957f\u5ea6\u76f8\u540c\u4e14\u5305\u542b\u4e0e\u6570\u7ec4\u76f8\u540c\u6570\u636e\u7684 FloatBuffer\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7528\u4e8e\u5728\u793a\u4f8b\u7a0b\u5e8f jogl/CubesWithVertexArrays.java \u4e2d\u521b\u5efa\u7f13\u51b2\u533a\u3002\u4f8b\u5982\uff0c</p> <pre><code>float[] vertexCoords = {  // \u7acb\u65b9\u4f53\u9876\u70b9\u7684\u5750\u6807\u3002\n            1,1,1,   1,1,-1,   1,-1,-1,   1,-1,1,\n            -1,1,1,  -1,1,-1,  -1,-1,-1,  -1,-1,1  };\n\nint[] elementArray = {  // \u516d\u4e2a\u9762\u7684\u9876\u70b9\u7f16\u53f7\u3002\n            0,1,2,3, 0,3,7,4, 0,4,5,1,\n            6,2,1,5, 6,5,4,7, 6,7,3,2  };\n\n// \u7528\u4e8e glVertexPointer \u548c glDrawElements \u7684\u7f13\u51b2\u533a\uff1a            \nFloatBuffer vertexCoordBuffer = Buffers.newDirectFloatBuffer(vertexCoords);\nIntBuffer elementBuffer = Buffers.newDirectIntBuffer(elementArray);\n</code></pre> <p>\u7136\u540e\uff0c\u5728\u7ed8\u5236\u7acb\u65b9\u4f53\u65f6\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u7f13\u51b2\u533a\uff1a</p> <pre><code>gl2.glVertexPointer( 3, GL2.GL_FLOAT, 0, vertexCoordBuffer );\n\ngl2.glDrawElements( GL2.GL_QUADS, 24, GL2.GL_UNSIGNED_INT, elementBuffer );\n</code></pre> <p>\u8fd8\u6709\u50cf Buffers.newDirectFloatBuffer(n) \u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5b83\u521b\u5efa\u957f\u5ea6\u4e3a n \u7684 FloatBuffer\u3002\u8bf7\u8bb0\u4f4f\uff0cnio Buffer\uff0c\u5c31\u50cf\u6570\u7ec4\u4e00\u6837\uff0c\u53ea\u662f\u7ed9\u5b9a\u7c7b\u578b\u7684\u5143\u7d20\u7684\u7ebf\u6027\u5e8f\u5217\u3002\u5b9e\u9645\u4e0a\uff0c\u5c31\u50cf\u5bf9\u6570\u7ec4\u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7\u5176\u5728\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15\u6216\u4f4d\u7f6e\u5f15\u7528\u7f13\u51b2\u533a\u4e2d\u7684\u9879\u3002\u5047\u8bbe buffer \u662f\u7c7b\u578b\u4e3a FloatBuffer \u7684\u53d8\u91cf\uff0ci \u662f int\uff0cx \u662f float\u3002\u90a3\u4e48</p> <pre><code>buffer.put(i,x);\n</code></pre> <p>\u5c06 x \u7684\u503c\u590d\u5236\u5230\u7f13\u51b2\u533a\u4e2d\u7f16\u53f7\u4e3a i \u7684\u4f4d\u7f6e\u3002\u7c7b\u4f3c\u5730\uff0cbuffer.get(i) \u53ef\u4ee5\u7528\u4e8e\u68c0\u7d22\u7f13\u51b2\u533a\u4e2d\u7d22\u5f15\u4e3a i \u7684\u503c\u3002\u8fd9\u4e9b\u65b9\u6cd5\u4f7f\u5f97\u53ef\u4ee5\u4ee5\u4e0e\u6570\u7ec4\u7c7b\u4f3c\u7684\u65b9\u5f0f\u4f7f\u7528\u7f13\u51b2\u533a\u3002</p> <p>Ordinary Java arrays are not suitable for use with glDrawElements and glDrawArrays, partly because of the format in which data is stored in them and partly because of inefficiency in transfer of data between Java arrays and the Graphics Processing Unit. These problems are solved by using direct nio buffers. The term \"nio\" here refers to the package java.nio, which contains classes for input/output. A \"buffer\" in this case is an object of the class java.nio.Buffer or one of its subclasses, such as FloatBuffer or IntBuffer. Finally, \"direct\" means that the buffer is optimized for direct transfer of data between memory and other devices such as the GPU. Like an array, an nio buffer is a numbered sequence of elements, all of the same type. A FloatBuffer, for example, contains a numbered sequence of values of type float. There are subclasses of Buffer for all of Java's primitive data types except boolean.</p> <p>Nio buffers are used in JOGL in several places where arrays are used in the C API. For example, JOGL has the following glVertexPointer method in the GL2 class:</p> <pre><code>public void glVertexPointer(int size, int type, int stride, Buffer buffer)\n</code></pre> <p>Only the last parameter differs from the C version. The buffer can be of type FloatBuffer, IntBuffer, or DoubleBuffer. The type of buffer must match the type parameter in the method. Functions such as glColorPointer work the same way, and glDrawElements takes the form</p> <pre><code>public void glDrawElements( int primitiveType, vertexCount, \n                                        dataType, Buffer buffer)\n</code></pre> <p>where the buffer can be of type IntBuffer, ShortBuffer, or ByteBuffer to match the dataType UNSIGNED_INT, UNSIGNED_SHORT, or UNSIGNED_BYTE.</p> <p>The class com.jogamp.common.nio.Buffers contains static utility methods for working with direct nio buffers. The easiest to use are methods that create a buffer from a Java array. For example, the method Buffers.newDirectFloatBuffer(array) takes a float array as its parameter and creates a FloatBuffer of the same length and containing the same data as the array. These methods are used to create the buffers in the sample program jogl/CubesWithVertexArrays.java. For example,</p> <pre><code>float[] vertexCoords = {  // Coordinates for the vertices of a cube.\n            1,1,1,   1,1,-1,   1,-1,-1,   1,-1,1,\n            -1,1,1,  -1,1,-1,  -1,-1,-1,  -1,-1,1  };\n\nint[] elementArray = {  // Vertex numbers for the six faces.\n            0,1,2,3, 0,3,7,4, 0,4,5,1,\n            6,2,1,5, 6,5,4,7, 6,7,3,2  };\n\n// Buffers for use with glVertexPointer and glDrawElements:            \nFloatBuffer vertexCoordBuffer = Buffers.newDirectFloatBuffer(vertexCoords);\nIntBuffer elementBuffer = Buffers.newDirectIntBuffer(elementArray);\n</code></pre> <p>The buffers can then be used when drawing the cube:</p> <pre><code>gl2.glVertexPointer( 3, GL2.GL_FLOAT, 0, vertexCoordBuffer );\n\ngl2.glDrawElements( GL2.GL_QUADS, 24, GL2.GL_UNSIGNED_INT, elementBuffer );\n</code></pre> <p>There are also methods such as Buffers.newDirectFloatBuffer(n), which creates a FloatBuffer of length n. Remember that an nio Buffer, like an array, is simply a linear sequence of elements of a given type. In fact, just as for an array, it is possible to refer to items in a buffer by their index or position in that sequence. Suppose that buffer is a variable of type FloatBuffer, i is an int and x is a float. Then</p> <pre><code>buffer.put(i,x);\n</code></pre> <p>copies the value of x into position number i in the buffer. Similarly, buffer.get(i) can be used to retrieve the value at index i in the buffer. These methods make it possible to work with buffers in much the same way that you can work with arrays.</p>"},{"location":"cn/c3/s4/#344-\u663e\u793a\u5217\u8868\u548cvbo","title":"3.4.4 \u663e\u793a\u5217\u8868\u548cVBO","text":"<p>Display Lists and VBOs</p> \u4e2d\u6587\u82f1\u6587 <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u8003\u8651\u7684\u6240\u6709 OpenGL \u7ed8\u56fe\u547d\u4ee4\u5728\u540c\u4e00\u5bf9\u8c61\u88ab\u7ed8\u5236\u591a\u6b21\u65f6\u5b58\u5728\u4e00\u4e2a\u4e0d\u5e78\u7684\u6548\u7387\u95ee\u9898\uff1a\u6bcf\u6b21\u7ed8\u5236\u5bf9\u8c61\u65f6\uff0c\u7ed8\u56fe\u547d\u4ee4\u548c\u6570\u636e\u90fd\u5fc5\u987b\u4f20\u8f93\u5230 GPU\u3002\u5e94\u8be5\u53ef\u4ee5\u5c06\u4fe1\u606f\u5b58\u50a8\u5728 GPU \u4e0a\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u800c\u65e0\u9700\u91cd\u65b0\u4f20\u8f93\u3002\u6211\u4eec\u5c06\u8ba8\u8bba\u4e24\u79cd\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u6280\u672f\uff1a\u663e\u793a\u5217\u8868 \u548c \u9876\u70b9\u7f13\u51b2\u5bf9\u8c61\uff08VBO\uff09\u3002\u663e\u793a\u5217\u8868\u662f\u539f\u59cb\u7684 OpenGL 1.0 \u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5b83\u4eec\u4e0d\u662f\u73b0\u4ee3 OpenGL API \u7684\u4e00\u90e8\u5206\u3002VBO \u5728 OpenGL 1.5 \u4e2d\u5f15\u5165\uff0c\u5e76\u4e14\u5728\u73b0\u4ee3 OpenGL \u4e2d\u4ecd\u7136\u5f88\u91cd\u8981\uff1b\u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u4f1a\u7b80\u8981\u8ba8\u8bba\u5b83\u4eec\uff0c\u5e76\u4e14\u5728\u4ecb\u7ecd WebGL \u65f6\u4f1a\u66f4\u8be6\u7ec6\u5730\u8003\u8651\u5b83\u4eec\u3002</p> <p>\u5f53\u540c\u4e00\u5e8f\u5217\u7684 OpenGL \u547d\u4ee4\u5c06\u88ab\u591a\u6b21\u4f7f\u7528\u65f6\uff0c\u663e\u793a\u5217\u8868\u662f\u5f88\u6709\u7528\u7684\u3002\u663e\u793a\u5217\u8868\u662f\u4e00\u7cfb\u5217\u56fe\u5f62\u547d\u4ee4\u53ca\u5176\u4f7f\u7528\u7684\u6570\u636e\u3002\u663e\u793a\u5217\u8868\u53ef\u4ee5\u5b58\u50a8\u5728 GPU \u4e0a\u3002\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9\u53ea\u9700\u8981\u4e00\u6b21\u4f20\u8f93\u5230 GPU\u3002\u4e00\u65e6\u521b\u5efa\u4e86\u5217\u8868\uff0c\u5c31\u53ef\u4ee5 \"\u8c03\u7528\" \u5b83\u3002\u5173\u952e\u70b9\u5728\u4e8e\uff0c\u8c03\u7528\u5217\u8868\u53ea\u9700\u8981\u4e00\u4e2a OpenGL \u547d\u4ee4\u3002\u867d\u7136\u76f8\u540c\u7684\u547d\u4ee4\u5217\u8868\u4ecd\u7136\u5fc5\u987b\u88ab\u6267\u884c\uff0c\u4f46\u53ea\u9700\u4ece CPU \u4f20\u8f93\u4e00\u4e2a\u547d\u4ee4\u5230\u56fe\u5f62\u5361\uff0c\u7136\u540e\u53ef\u4ee5\u5229\u7528\u786c\u4ef6\u52a0\u901f\u7684\u5168\u90e8\u6027\u80fd\u4ee5\u5c3d\u53ef\u80fd\u9ad8\u7684\u901f\u5ea6\u6267\u884c\u547d\u4ee4\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u8c03\u7528\u663e\u793a\u5217\u8868\u4e24\u6b21\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e24\u79cd\u4e0d\u540c\u7684\u6548\u679c\uff0c\u56e0\u4e3a\u6548\u679c\u53ef\u80fd\u53d6\u51b3\u4e8e\u8c03\u7528\u663e\u793a\u5217\u8868\u65f6\u7684 OpenGL \u72b6\u6001\u3002\u4f8b\u5982\uff0c\u751f\u6210\u7403\u4f53\u51e0\u4f55\u4f53\u7684\u663e\u793a\u5217\u8868\u53ef\u4ee5\u5728\u4e0d\u540c\u4f4d\u7f6e\u7ed8\u5236\u7403\u4f53\uff0c\u53ea\u8981\u6bcf\u6b21\u8c03\u7528\u5217\u8868\u65f6\u90fd\u5e94\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u3002\u8be5\u5217\u8868\u8fd8\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u989c\u8272\u7684\u7403\u4f53\uff0c\u53ea\u8981\u5728\u8c03\u7528\u5217\u8868\u4e4b\u95f4\u66f4\u6539\u7ed8\u5236\u989c\u8272\u5373\u53ef\u3002</p> <p>\u5982\u679c\u8981\u4f7f\u7528\u663e\u793a\u5217\u8868\uff0c\u9996\u5148\u5fc5\u987b\u8bf7\u6c42\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u5c06\u8be5\u5217\u8868\u6807\u8bc6\u7ed9 GPU\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u6765\u5b8c\u6210\uff0c\u4f8b\u5982</p> <pre><code>listID = glGenLists(1);\n</code></pre> <p>\u8fd4\u56de\u503c\u662f\u4e00\u4e2a int\uff0c\u5b83\u5c06\u662f\u5217\u8868\u7684\u6807\u8bc6\u7b26\u3002glGenLists \u7684\u53c2\u6570\u4e5f\u662f\u4e00\u4e2a int\uff0c\u901a\u5e38\u4e3a 1\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u4ee5\u4e00\u6b21\u8bf7\u6c42\u591a\u4e2a\u5217\u8868 ID\uff1b\u8be5\u53c2\u6570\u544a\u8bc9\u60a8\u8981\u8bf7\u6c42\u591a\u5c11\u4e2a\u3002\u5217\u8868 ID \u5c06\u662f\u8fde\u7eed\u7684\u6574\u6570\uff0c\u56e0\u6b64\u5982\u679c listA \u662f glGenLists(3) \u7684\u8fd4\u56de\u503c\uff0c\u5219\u4e09\u4e2a\u5217\u8868\u7684\u6807\u8bc6\u7b26\u5c06\u662f listA\u3001listA + 1 \u548c listA + 2\u3002\uff09</p> <p>\u4e00\u65e6\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5206\u914d\u4e86\u4e00\u4e2a\u5217\u8868\uff0c\u5c31\u53ef\u4ee5\u5c06\u547d\u4ee4\u5b58\u50a8\u5230\u5176\u4e2d\u3002\u5982\u679c listID \u662f\u5217\u8868\u7684 ID\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684\u4ee3\u7801\u6267\u884c\u6b64\u64cd\u4f5c\uff1a</p> <pre><code>glNewList(listID, GL_COMPILE);\n...  // \u8981\u5b58\u50a8\u5728\u5217\u8868\u4e2d\u7684 OpenGL \u547d\u4ee4\u3002\nglEndList();\n</code></pre> <p>\u53c2\u6570 GL_COMPILE \u8868\u793a\u60a8\u53ea\u60f3\u5c06\u547d\u4ee4\u5b58\u50a8\u5230\u5217\u8868\u4e2d\uff0c\u800c\u4e0d\u6267\u884c\u5b83\u4eec\u3002\u5982\u679c\u4f7f\u7528\u66ff\u4ee3\u53c2\u6570 GL_COMPILE_AND_EXECUTE\uff0c\u90a3\u4e48\u547d\u4ee4\u5c06\u7acb\u5373\u6267\u884c\u5e76\u5b58\u50a8\u5728\u5217\u8868\u4e2d\u4ee5\u4f9b\u4ee5\u540e\u91cd\u7528\u3002</p> <p>\u521b\u5efa\u4e86\u8fd9\u6837\u7684\u663e\u793a\u5217\u8868\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8c03\u7528\u5217\u8868\uff1a</p> <pre><code>glCallList(listID);\n</code></pre> <p>\u6b64\u547d\u4ee4\u7684\u6548\u679c\u662f\u544a\u8bc9 GPU \u6267\u884c\u5b83\u5df2\u7ecf\u5b58\u50a8\u7684\u5217\u8868\u3002\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u547d\u4ee4\u544a\u8bc9\u663e\u5361\u4e0d\u518d\u9700\u8981\u5217\u8868\uff1a</p> <pre><code>gl.glDeleteLists(listID, 1);\n</code></pre> <p>\u6b64\u65b9\u6cd5\u8c03\u7528\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8d77\u5230\u4e0e glGenLists \u4e2d\u7684\u53c2\u6570\u76f8\u540c\u7684\u4f5c\u7528\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5141\u8bb8\u5220\u9664\u51e0\u4e2a\u8fde\u7eed\u7f16\u53f7\u7684\u5217\u8868\u3002\u5f53\u60a8\u4f7f\u7528\u5b8c\u5217\u8868\u540e\u5220\u9664\u5217\u8868\u53ef\u4ee5\u4f7f GPU \u91cd\u65b0\u4f7f\u7528\u8be5\u5217\u8868\u4f7f\u7528\u7684\u5185\u5b58\u3002</p> <p>\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61\u91c7\u7528\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u91cd\u7528\u4fe1\u606f\u7684\u65b9\u6cd5\u3002\u5b83\u4eec\u53ea\u5b58\u50a8\u6570\u636e\uff0c\u800c\u4e0d\u662f\u547d\u4ee4\u3002VBO \u7c7b\u4f3c\u4e8e\u6570\u7ec4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u53ef\u4ee5\u5b58\u50a8\u5728 GPU \u4e0a\u4ee5\u4fbf\u4e8e\u6709\u6548\u5730\u91cd\u7528\u3002\u6709 OpenGL \u547d\u4ee4\u7528\u4e8e\u521b\u5efa\u548c\u5220\u9664 VBO\uff0c\u5e76\u5c06\u6570\u636e\u4ece CPU \u4e00\u4fa7\u7684\u6570\u7ec4\u4f20\u8f93\u5230 GPU \u4e0a\u7684 VBO\u3002\u60a8\u53ef\u4ee5\u914d\u7f6e glDrawArrays() \u548c glDrawElements() \u6765\u4ece VBO \u800c\u4e0d\u662f\u4ece\u666e\u901a\u6570\u7ec4\uff08\u5728 C \u4e2d\uff09\u6216 nio \u7f13\u51b2\u533a\uff08\u5728 JOGL \u4e2d\uff09\u4e2d\u83b7\u53d6\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5c06\u6570\u636e\u4e00\u6b21\u6027\u53d1\u9001\u5230 GPU\uff0c\u7136\u540e\u4efb\u610f\u6b21\u6570\u5730\u4f7f\u7528\u5b83\u3002</p> <p>\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u5982\u4f55\u4f7f\u7528 VBO\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f OpenGL 1.1 \u7684\u4e00\u90e8\u5206\u3002\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u8ba9\u60a8\u6bd4\u8f83\u4e0d\u540c\u7684\u6e32\u67d3\u590d\u6742\u56fe\u50cf\u7684\u6280\u672f\u3002\u8be5\u7a0b\u5e8f\u7684 C \u7248\u672c\u662f glut/color-cube-of-spheres.c\uff0cJava \u7248\u672c\u662f jogl/ColorCubeOfSpheres.java\u3002\u8be5\u7a0b\u5e8f\u7ed8\u5236\u4e86 1331 \u4e2a\u7403\uff0c\u6392\u5217\u6210\u4e00\u4e2a 11x11x11 \u7684\u7acb\u65b9\u4f53\u3002\u7403\u4f53\u7684\u989c\u8272\u4e0d\u540c\uff0c\u5176\u4e2d\u6cbf\u4e00\u4e2a\u8f74\u7684\u989c\u8272\u4e2d\u6709\u7ea2\u8272\u7684\u6570\u91cf\u53d8\u5316\uff0c\u6cbf\u7b2c\u4e8c\u4e2a\u8f74\u7684\u989c\u8272\u4e2d\u6709\u7eff\u8272\u7684\u6570\u91cf\u53d8\u5316\uff0c\u6cbf\u7b2c\u4e09\u4e2a\u8f74\u7684\u989c\u8272\u4e2d\u6709\u84dd\u8272\u7684\u6570\u91cf\u53d8\u5316\u3002\u6bcf\u4e2a\u7403\u6709 66 \u4e2a\u9876\u70b9\uff0c\u5176\u5750\u6807\u53ef\u4ee5\u4f7f\u7528\u6570\u5b66\u51fd\u6570 sin \u548c cos \u8ba1\u7b97\u5f97\u5230\u3002\u8be5\u7a0b\u5e8f\u5141\u8bb8\u60a8\u4ece\u4e94\u79cd\u4e0d\u540c\u7684\u6e32\u67d3\u65b9\u6cd5\u4e2d\u9009\u62e9\uff0c\u5e76\u663e\u793a\u4f7f\u7528\u6240\u9009\u65b9\u6cd5\u6e32\u67d3\u7403\u4f53\u6240\u9700\u7684\u65f6\u95f4\u3002\uff08Java \u7248\u672c\u6709\u4e00\u4e2a\u4e0b\u62c9\u83dc\u5355\u7528\u4e8e\u9009\u62e9\u65b9\u6cd5\uff1b\u5728 C \u7248\u672c\u4e2d\uff0c\u53f3\u952e\u5355\u51fb\u56fe\u50cf\u5373\u53ef\u83b7\u5f97\u83dc\u5355\u3002\uff09\u60a8\u53ef\u4ee5\u4f7f\u7528\u9f20\u6807\u65cb\u8f6c\u7403\u4f53\u7684\u7acb\u65b9\u4f53\uff0c\u4ee5\u83b7\u53d6\u66f4\u597d\u7684\u89c6\u56fe\u5e76\u751f\u6210\u66f4\u591a\u6570\u636e\u4ee5\u8ba1\u7b97\u5e73\u5747\u6e32\u67d3\u65f6\u95f4\u3002\u4e94\u79cd\u6e32\u67d3\u6280\u672f\u662f\uff1a</p> <ul> <li>\u76f4\u63a5\u7ed8\u5236\uff0c\u91cd\u65b0\u8ba1\u7b97\u9876\u70b9\u6570\u636e \u2014\u2014 \u901a\u8fc7\u6bcf\u6b21\u7ed8\u5236\u7403\u4f53\u65f6\u91cd\u65b0\u8ba1\u7b97\u6240\u6709\u9876\u70b9\u5750\u6807\u7684\u65b9\u5f0f\uff0c\u4ee5\u975e\u5e38\u611a\u8822\u7684\u65b9\u5f0f\u7ed8\u5236 1331 \u4e2a\u7403\u3002</li> <li>\u76f4\u63a5\u7ed8\u5236\uff0c\u9884\u8ba1\u7b97\u6570\u636e \u2014\u2014 \u9876\u70b9\u5750\u6807\u53ea\u8ba1\u7b97\u4e00\u6b21\u5e76\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u7403\u4f53\u4f7f\u7528 glBegin/glEnd \u8fdb\u884c\u7ed8\u5236\uff0c\u4f46\u5728\u8c03\u7528 glVertex* \u65f6\u4f7f\u7528\u7684\u6570\u636e\u662f\u4ece\u6570\u7ec4\u4e2d\u83b7\u53d6\u7684\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u9700\u8981\u65f6\u91cd\u65b0\u8ba1\u7b97\u3002</li> <li>\u663e\u793a\u5217\u8868 \u2014\u2014 \u521b\u5efa\u5305\u542b\u7ed8\u5236\u7403\u4f53\u6240\u9700\u7684\u6240\u6709\u547d\u4ee4\u548c\u6570\u636e\u7684\u663e\u793a\u5217\u8868\u3002\u7136\u540e\u6bcf\u4e2a\u7403\u4f53\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8be5\u663e\u793a\u5217\u8868\u4e00\u6b21\u6765\u7ed8\u5236\u3002</li> <li>\u4f7f\u7528\u6570\u7ec4\u8fdb\u884c DrawArrays \u2014\u2014 \u7403\u4f53\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u9876\u70b9\u6570\u7ec4\u4e2d\uff08\u6216\u8005\uff0c\u5728 Java \u4e2d\uff0c\u5b58\u50a8\u5728 nio \u7f13\u51b2\u533a\u4e2d\uff09\uff0c\u5e76\u4f7f\u7528 glDrawArrays \u8c03\u7528\u6765\u7ed8\u5236\u6bcf\u4e2a\u7403\u4f53\uff0c\u4f7f\u7528\u4e86\u672c\u8282\u65e9\u4e9b\u65f6\u5019\u8ba8\u8bba\u7684\u6280\u672f\u3002\u6bcf\u6b21\u7ed8\u5236\u7403\u4f53\u65f6\u90fd\u5fc5\u987b\u5c06\u6570\u636e\u53d1\u9001\u5230 GPU \u4e0a\u3002</li> <li>\u4f7f\u7528 VBO \u8fdb\u884c DrawArrays \u2014\u2014 \u518d\u6b21\u4f7f\u7528 glDrawArrays \u6765\u7ed8\u5236\u7403\u4f53\uff0c\u4f46\u8fd9\u6b21\u6570\u636e\u5b58\u50a8\u5728 VBO \u4e2d\u800c\u4e0d\u662f\u6570\u7ec4\u4e2d\uff0c\u56e0\u6b64\u6570\u636e\u53ea\u9700\u8981\u4f20\u8f93\u5230 GPU \u4e00\u6b21\u3002</li> </ul> <p>\u5728\u6211\u7684\u5b9e\u9a8c\u4e2d\uff0c\u6211\u53d1\u73b0\uff0c\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u663e\u793a\u5217\u8868\u548c VBO \u7ed9\u51fa\u4e86\u6700\u77ed\u7684\u6e32\u67d3\u65f6\u95f4\uff0c\u4e24\u8005\u4e4b\u95f4\u51e0\u4e4e\u6ca1\u6709\u533a\u522b\u3002\u5728 C \u7248\u672c\u7684\u7ed3\u679c\u548c Java \u7248\u672c\u7684\u7ed3\u679c\u4e4b\u95f4\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u5dee\u5f02\uff0c\u8fd9\u4f3c\u4e4e\u662f\u56e0\u4e3a C \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u6bd4 Java \u4e2d\u7684\u65b9\u6cd5\u8c03\u7528\u66f4\u6709\u6548\u7387\u3002\u60a8\u5e94\u8be5\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u5c1d\u8bd5\u8be5\u7a0b\u5e8f\uff0c\u5e76\u6bd4\u8f83\u5404\u79cd\u6e32\u67d3\u65b9\u6cd5\u7684\u6e32\u67d3\u65f6\u95f4\u3002</p> <p>All of the OpenGL drawing commands that we have considered so far have an unfortunate inefficiency when the same object is going be drawn more than once: The commands and data for drawing that object must be transmitted to the GPU each time the object is drawn. It should be possible to store information on the GPU, so that it can be reused without retransmitting it. We will look at two techniques for doing this: display lists and vertex buffer objects (VBOs). Display lists were part of the original OpenGL 1.0, but they are not part of the modern OpenGL API. VBOs were introduced in OpenGL 1.5 and are still important in modern OpenGL; we will discuss them only briefly here and will consider them more fully when we get to WebGL.</p> <p>Display lists are useful when the same sequence of OpenGL commands will be used several times. A display list is a list of graphics commands and the data used by those commands. A display list can be stored in a GPU. The contents of the display list only have to be transmitted once to the GPU. Once a list has been created, it can be \"called.\" The key point is that calling a list requires only one OpenGL command. Although the same list of commands still has to be executed, only one command has to be transmitted from the CPU to the graphics card, and then the full power of hardware acceleration can be used to execute the commands at the highest possible speed.</p> <p>Note that calling a display list twice can result in two different effects, since the effect can depend on the OpenGL state at the time the display list is called. For example, a display list that generates the geometry for a sphere can draw spheres in different locations, as long as different modeling transforms are in effect each time the list is called. The list can also produce spheres of different colors, as long as the drawing color is changed between calls to the list.</p> <p>If you want to use a display list, you first have to ask for an integer that will identify that list to the GPU. This is done with a command such as</p> <pre><code>listID = glGenLists(1);\n</code></pre> <p>The return value is an int which will be the identifier for the list. The parameter to glGenLists is also an int, which is usually 1. (You can actually ask for several list IDs at once; the parameter tells how many you want. The list IDs will be consecutive integers, so that if listA is the return value from glGenLists(3), then the identifiers for the three lists will be listA, listA + 1, and listA + 2.)</p> <p>Once you've allocated a list in this way, you can store commands into it. If listID is the ID for the list, you would do this with code of the form:</p> <pre><code>glNewList(listID, GL_COMPILE);\n...  // OpenGL commands to be stored in the list.\nglEndList();\n</code></pre> <p>The parameter GL_COMPILE means that you only want to store commands into the list, not execute them. If you use the alternative parameter GL_COMPILE_AND_EXECUTE, then the commands will be executed immediately as well as stored in the list for later reuse.</p> <p>Once you have created a display list in this way, you can call the list with the command</p> <pre><code>glCallList(listID);\n</code></pre> <p>The effect of this command is to tell the GPU to execute a list that it has already stored. You can tell the graphics card that a list is no longer needed by calling</p> <pre><code>gl.glDeleteLists(listID, 1);\n</code></pre> <p>The second parameter in this method call plays the same role as the parameter in glGenLists; that is, it allows you delete several sequentially numbered lists. Deleting a list when you are through with it allows the GPU to reuse the memory that was used by that list.</p> <p>Vertex buffer objects take a different approach to reusing information. They only store data, not commands. A VBO is similar to an array. In fact, it is essentially an array that can be stored on the GPU for efficiency of reuse. There are OpenGL commands to create and delete VBOs and to transfer data from an array on the CPU side into a VBO on the GPU. You can configure glDrawArrays() and glDrawElements() to take the data from a VBO instead of from an ordinary array (in C) or from an nio Buffer (in JOGL). This means that you can send the data once to the GPU and use it any number of times.</p> <p>I will not discuss how to use VBOs here, since it was not a part of OpenGL 1.1. However, there is a sample program that lets you compare different techniques for rendering a complex image. The C version of the program is glut/color-cube-of-spheres.c, and the Java version is jogl/ColorCubeOfSpheres.java. The program draws 1331 spheres, arranged in an 11-by-11-by-11 cube. The spheres are different colors, with the amount of red in the color varying along one axis, the amount of green along a second axis, and the amount of blue along the third. Each sphere has 66 vertices, whose coordinates can be computed using the math functions sin and cos. The program allows you to select from five different rendering methods, and it shows the time that it takes to render the spheres using the selected method. (The Java version has a drop-down menu for selecting the method; in the C version, right-click the image to get the menu.) You can use your mouse to rotate the cube of spheres, both to get a better view and to generate more data for computing the average render time. The five rendering techniques are:</p> <ul> <li>Direct Draw, Recomputing Vertex Data \u2014 A remarkably foolish way to draw 1331 spheres, by recomputing all of the vertex coordinates every time a sphere is drawn.</li> <li>Direct Draw, Precomputed Data \u2014 The vertex coordinates are computed once and stored in an array. The spheres are drawn using glBegin/glEnd, but the data used in the calls to glVertex* are taken from the array rather than recomputed each time they are needed.</li> <li>Display List \u2014 A display list is created containing all of the commands and data needed to draw a sphere. Each sphere can then be drawn by a single call of that display list.</li> <li>DrawArrays with Arrays \u2014 The data for the sphere is stored in a vertex array (or, for Java, in an nio buffer), and each sphere is drawn using a call to glDrawArrays, using the techniques discussed earlier in this section. The data has to be sent to the GPU every time a sphere is drawn.</li> <li>DrawArrays with VBOs \u2014 Again, glDrawArrays is used to draw the spheres, but this time the data is stored in a VBO instead of in an array, so the data only has to be transmitted to the GPU once.</li> </ul> <p>In my own experiments, I found, as expected, that display lists and VBOs gave the shortest rendering times, with little difference between the two. There were some interesting differences between the results for the C version and the results for the Java version, which seem to be due to the fact that function calls in C are more efficient than method calls in Java. You should try the program on your own computer, and compare the rendering times for the various rendering methods.</p>"},{"location":"cn/c3/s5/","title":"3.5 \u90e8\u5206\u7ebf\u6027\u4ee3\u6570\u57fa\u7840","text":"<p>Some Linear Algebra</p> \u4e2d\u6587\u82f1\u6587 <p>\u7ebf\u6027\u4ee3\u6570\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u7684\u4e00\u4e2a\u57fa\u672c\u5206\u652f\uff0c\u5b83\u7814\u7a76\u5411\u91cf\u3001\u7ebf\u6027\u53d8\u6362\u548c\u77e9\u9635\u3002\u6211\u4eec\u5df2\u7ecf\u5728\u7b2c2.3.8\u5c0f\u8282\u4e2d\u4ee5\u4e8c\u7ef4\u7684\u60c5\u5883\u9047\u5230\u4e86\u8fd9\u4e9b\u4e3b\u9898\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u52a0\u6df1\u5165\u5730\u7814\u7a76\u5b83\u4eec\uff0c\u5e76\u5c06\u8ba8\u8bba\u6269\u5c55\u5230\u4e09\u7ef4\u3002</p> <p>\u867d\u7136\u5728\u8fd9\u4e00\u8282\u6d89\u53ca\u7684\u6570\u5b66\u7ec6\u8282\u5bf9\u4f60\u6765\u8bf4\u5e76\u975e\u5fc5\u8981\u4e86\u89e3\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u7531OpenGL\u5185\u90e8\u5904\u7406\u6216\u7531\u8f6f\u4ef6\u5e93\u5904\u7406\u3002\u7136\u800c\uff0c\u4f60\u9700\u8981\u719f\u6089\u8fd9\u4e9b\u6982\u5ff5\u548c\u672f\u8bed\u3002\u5bf9\u4e8e\u73b0\u4ee3OpenGL\u6765\u8bf4\u5c24\u5176\u5982\u6b64\uff0c\u56e0\u4e3a\u5b83\u628a\u8bb8\u591a\u7ec6\u8282\u7559\u7ed9\u4e86\u4f60\u7684\u7a0b\u5e8f\u3002\u5373\u4f7f\u4f60\u6709\u4e00\u4e2a\u8f6f\u4ef6\u5e93\u6765\u5904\u7406\u7ec6\u8282\uff0c\u4f60\u4ecd\u7136\u9700\u8981\u4e86\u89e3\u8db3\u591f\u7684\u77e5\u8bc6\u6765\u4f7f\u7528\u8be5\u5e93\u3002\u4f60\u53ef\u80fd\u60f3\u7565\u8bfb\u672c\u8282\uff0c\u5e76\u5728\u4ee5\u540e\u4f5c\u4e3a\u53c2\u8003\u4f7f\u7528\u3002</p> <p>Linear algebra is a branch of mathematics that is fundamental to computer graphics. It studies vectors, linear transformations, and matrices. We have already encountered these topics in Subsection 2.3.8 in a two-dimensional context. In this section, we look at them more closely and extend the discussion to three dimensions.</p> <p>It is not essential that you know the mathematical details that are covered in this section, since they can be handled internally in OpenGL or by software libraries. However, you will need to be familiar with the concepts and the terminology. This is especially true for modern OpenGL, which leaves many of the details up to your programs. Even when you have a software library to handle the details, you still need to know enough to use the library. You might want to skim this section and use it later for reference.</p>"},{"location":"cn/c3/s5/#351-\u5411\u91cf\u548c\u5411\u91cf\u6570\u5b66","title":"3.5.1 \u5411\u91cf\u548c\u5411\u91cf\u6570\u5b66","text":"<p>Vectors and Vector Math</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u4e2a\u5411\u91cf\u662f\u5177\u6709\u957f\u5ea6\u548c\u65b9\u5411\u7684\u91cf\u3002\u4e00\u4e2a\u5411\u91cf\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4e2a\u7bad\u5934\uff0c\u53ea\u8981\u4f60\u8bb0\u5f97\u91cd\u8981\u7684\u662f\u7bad\u5934\u7684\u957f\u5ea6\u548c\u65b9\u5411\uff0c\u800c\u5176\u5177\u4f53\u4f4d\u7f6e\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\uff0c\u5411\u91cf\u7ecf\u5e38\u88ab\u7528\u6765\u8868\u793a\u65b9\u5411\uff0c\u6bd4\u5982\u4ece\u4e00\u4e2a\u7269\u4f53\u5230\u5149\u6e90\u7684\u65b9\u5411\uff0c\u6216\u8005\u8868\u9762\u671d\u5411\u7684\u65b9\u5411\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u66f4\u5173\u5fc3\u5411\u91cf\u7684\u65b9\u5411\u800c\u4e0d\u662f\u5b83\u7684\u957f\u5ea6\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5c06\u4e00\u4e2a\u4e09\u7ef4\u5411\u91cfV\u53ef\u89c6\u5316\u4e3a\u4ece\u539f\u70b9(0,0,0)\u5f00\u59cb\u7684\u7bad\u5934\uff0c\u7ed3\u675f\u4e8e\u4e00\u4e2a\u70b9P\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5c06V\u4e0eP\u7b49\u540c\u8d77\u6765\u2014\u2014\u81f3\u5c11\u53ea\u8981\u6211\u4eec\u8bb0\u5f97\u4ece\u4efb\u4f55\u5176\u4ed6\u70b9\u5f00\u59cb\u7684\u7bad\u5934\u4e5f\u53ef\u4ee5\u7528\u6765\u8868\u793aV\u3002\u5982\u679cP\u7684\u5750\u6807\u662f(a,b,c)\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u5750\u6807\u6765\u8868\u793aV\u3002\u5f53\u6211\u4eec\u5c06(a,b,c)\u89c6\u4e3a\u4e00\u4e2a\u5411\u91cf\u65f6\uff0ca\u7684\u503c\u8868\u793a\u7bad\u5934\u8d77\u70b9\u5230\u7ec8\u70b9\u4e4b\u95f4\u7684x\u5750\u6807\u7684\u53d8\u5316\uff0cb\u662fy\u5750\u6807\u7684\u53d8\u5316\uff0cc\u662fz\u5750\u6807\u7684\u53d8\u5316\u3002\u4f8b\u5982\uff0c3D\u70b9(x,y,z) = (3,4,5)\u5177\u6709\u4e0e\u5411\u91cf(dx,dy,dz) = (3,4,5)\u76f8\u540c\u7684\u5750\u6807\u3002\u5bf9\u4e8e\u70b9\u6765\u8bf4\uff0c\u5750\u6807(3,4,5)\u6307\u5b9a\u4e86\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\u5728xyz\u5750\u6807\u7cfb\u4e2d\u3002\u5bf9\u4e8e\u5411\u91cf\u6765\u8bf4\uff0c\u5750\u6807(3,4,5)\u6307\u5b9a\u4e86\u6cbf\u7740\u8be5\u5411\u91cf\u7684x\u3001y\u548cz\u5750\u6807\u7684\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u7528\u4e00\u4e2a\u4ece\u539f\u70b9(0,0,0)\u5f00\u59cb\u7684\u7bad\u5934\u6765\u8868\u793a\u5411\u91cf\uff0c\u90a3\u4e48\u7bad\u5934\u7684\u5934\u90e8\u5c06\u5728\u70b9(3,4,5)\u5904\u3002\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5411\u91cf\u89c6\u4e3a\u4e00\u4e2a\u4ece\u70b9(1,1,1)\u5f00\u59cb\u7684\u7bad\u5934\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7bad\u5934\u7684\u5934\u90e8\u5c06\u5728\u70b9(4,5,6)\u5904\u3002</p> <p>\u70b9\u4e0e\u5411\u91cf\u4e4b\u95f4\u7684\u533a\u522b\u662f\u5fae\u5999\u7684\u3002\u5bf9\u4e8e\u67d0\u4e9b\u76ee\u7684\uff0c\u53ef\u4ee5\u5ffd\u7565\u8fd9\u79cd\u533a\u522b\uff1b\u5bf9\u4e8e\u5176\u4ed6\u76ee\u7684\uff0c\u5b83\u662f\u91cd\u8981\u7684\u3002\u901a\u5e38\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u7cfb\u5217\u6570\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u770b\u4f5c\u662f\u4e00\u4e2a\u5411\u91cf\u6216\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\u4e2d\u54ea\u4e2a\u66f4\u5408\u9002\u3002</p> <p>\u4e00\u4e2a\u5411\u91cf\u7684\u57fa\u672c\u6027\u8d28\u4e4b\u4e00\u662f\u5b83\u7684\u957f\u5ea6\u3002\u7528\u5b83\u7684\u5750\u6807\u6765\u8868\u8fbe\uff0c\u4e00\u4e2a\u4e09\u7ef4\u5411\u91cf(x,y,z)\u7684\u957f\u5ea6\u7531<code>sqrt(x2+y2+z2)</code>\u7ed9\u51fa\u3002\uff08\u8fd9\u53ea\u662f\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u6bd5\u8fbe\u54e5\u62c9\u65af\u5b9a\u7406\u3002\uff09\u5982\u679cv\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u5b83\u7684\u957f\u5ea6\u7528|v|\u8868\u793a\u3002\u4e00\u4e2a\u5411\u91cf\u7684\u957f\u5ea6\u4e5f\u79f0\u4e3a\u5b83\u7684\u8303\u6570\u3002\uff08\u5728\u8fd9\u91cc\u6211\u4eec\u8003\u8651\u7684\u662f\u4e09\u7ef4\u5411\u91cf\uff0c\u4f46\u662f\u5176\u4ed6\u7ef4\u5ea6\u7684\u6982\u5ff5\u548c\u516c\u5f0f\u7c7b\u4f3c\u3002\uff09</p> <p>\u957f\u5ea6\u4e3a1\u7684\u5411\u91cf\u5c24\u5176\u91cd\u8981\u3002\u5b83\u4eec\u88ab\u79f0\u4e3a\u5355\u4f4d\u5411\u91cf\u3002\u5982\u679cv = (x,y,z)\u662f\u4efb\u610f\u4e00\u4e2a\u4e0d\u662f(0,0,0)\u7684\u5411\u91cf\uff0c\u90a3\u4e48\u5c31\u6709\u4e00\u4e2a\u4e0ev\u6307\u5411\u76f8\u540c\u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\u3002\u8be5\u5411\u91cf\u7531\u4e0b\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>( x/length, y/length, z/length )\n</code></pre> <p>\u5176\u4e2d length \u662fv\u7684\u957f\u5ea6\u3002\u5c06\u4e00\u4e2a\u5411\u91cf\u9664\u4ee5\u5b83\u7684\u957f\u5ea6\u88ab\u79f0\u4e3a\u5f52\u4e00\u5316\u8be5\u5411\u91cf\uff1a\u7ed3\u679c\u662f\u4e00\u4e2a\u4e0e\u539f\u59cb\u5411\u91cf\u6307\u5411\u76f8\u540c\u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\u3002</p> <p>\u4e24\u4e2a\u5411\u91cf\u53ef\u4ee5\u76f8\u52a0\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5411\u91cf <code>v1 = (x1,y1,z1)</code> \u548c <code>v2 = (x2,y2,z2)</code>\uff0c\u5b83\u4eec\u7684\u548c\u5b9a\u4e49\u4e3a</p> <pre><code>v1 + v2  =  ( x1+x2, y1+y2, z1+z2 );\n</code></pre> <p>\u8be5\u548c\u6709\u4e00\u4e2a\u51e0\u4f55\u610f\u4e49\uff1a</p> <p></p> <p>\u4e58\u6cd5\u66f4\u52a0\u590d\u6742\u3002\u7c7b\u4f3c\u4e8e\u548c\u7684\u5b9a\u4e49\uff0c\u4e24\u4e2a\u5411\u91cf\u7684\u4e58\u79ef\u7684\u660e\u663e\u5b9a\u4e49\u6ca1\u6709\u51e0\u4f55\u610f\u4e49\uff0c\u5e76\u4e14\u5f88\u5c11\u88ab\u4f7f\u7528\u3002\u7136\u800c\uff0c\u6709\u4e09\u79cd\u5411\u91cf\u4e58\u6cd5\u88ab\u4f7f\u7528\uff1a\u6807\u91cf\u4e58\u79ef\uff0c\u70b9\u79ef\u548c\u53c9\u79ef\u3002</p> <p>\u5982\u679c <code>v = (x,y,z)</code> \u662f\u4e00\u4e2a\u5411\u91cf\uff0ca\u662f\u4e00\u4e2a\u6570\uff0c\u5219a\u548cv\u7684\u6807\u91cf\u4e58\u79ef\u5b9a\u4e49\u4e3a</p> <pre><code>av  =  ( a*x, a*y, a*z );\n</code></pre> <p>\u5047\u8bbea\u662f\u6b63\u6570\u4e14v\u4e0d\u4e3a\u96f6\uff0c\u90a3\u4e48av\u662f\u4e00\u4e2a\u6307\u5411\u4e0ev\u76f8\u540c\u65b9\u5411\u7684\u5411\u91cf\uff0c\u5176\u957f\u5ea6\u662fv\u7684\u957f\u5ea6\u4e58\u4ee5a\u3002\u5982\u679ca\u662f\u8d1f\u6570\uff0c\u5219av\u6307\u5411\u4e0ev\u76f8\u53cd\u7684\u65b9\u5411\uff0c\u5e76\u4e14\u5176\u957f\u5ea6\u662f|a|\u4e58\u4ee5v\u7684\u957f\u5ea6\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u4e58\u79ef\u88ab\u79f0\u4e3a\u6807\u91cf\u4e58\u79ef\uff0c\u56e0\u4e3a\u50cfa\u8fd9\u6837\u7684\u6570\u5b57\u4e5f\u88ab\u79f0\u4e3a\u201c\u6807\u91cf\u201d\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4e58\u4ee5a\u5c06v\u7f29\u653e\u5230\u4e00\u4e2a\u65b0\u7684\u957f\u5ea6\u3002</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5411\u91cf <code>v1 = (x1,y1,z1)</code> \u548c <code>v2 = (x2,y2,z2)</code>\uff0cv1 \u548c v2 \u7684\u70b9\u79ef\u7531 v1\u00b7v2 \u8868\u793a\uff0c\u5e76\u7531\u4ee5\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a</p> <pre><code>v1\u00b7v2  =  x1*x2 + y1*y2 + z1*z2\n</code></pre> <p>\u6ce8\u610f\uff0c\u70b9\u79ef\u662f\u4e00\u4e2a\u6570\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5411\u91cf\u3002\u70b9\u79ef\u6709\u51e0\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u51e0\u4f55\u610f\u4e49\u3002\u9996\u5148\uff0c\u6ce8\u610f\u5411\u91cf v \u7684\u957f\u5ea6\u5c31\u662f v\u00b7v \u7684\u5e73\u65b9\u6839\u3002\u6b64\u5916\uff0c\u4e24\u4e2a\u975e\u96f6\u5411\u91cf v1 \u548c v2 \u7684\u70b9\u79ef\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a</p> <pre><code>cos(\u89d2\u5ea6)  =  v1\u00b7v2 / (|v1|*|v2|)\n</code></pre> <p>\u5176\u4e2d\u89d2\u5ea6\u662f v1 \u548c v2 \u4e4b\u95f4\u7684\u89d2\u5ea6\u7684\u5ea6\u91cf\u3002\u7279\u522b\u5730\uff0c\u5728\u4e24\u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u5355\u4f4d\u5411\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u7684\u70b9\u79ef\u7b80\u5355\u5730\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u5939\u89d2\u7684\u4f59\u5f26\u3002\u6b64\u5916\uff0c\u7531\u4e8e 90 \u5ea6\u89d2\u7684\u4f59\u5f26\u662f\u96f6\uff0c\u5982\u679c\u4e24\u4e2a\u975e\u96f6\u5411\u91cf\u7684\u70b9\u79ef\u4e3a\u96f6\uff0c\u5219\u5b83\u4eec\u5782\u76f4\u3002\u7531\u4e8e\u8fd9\u4e9b\u6027\u8d28\uff0c\u70b9\u79ef\u5728\u5149\u7167\u8ba1\u7b97\u4e2d\u7279\u522b\u91cd\u8981\uff0c\u5176\u4e2d\u5149\u7167\u5bf9\u8868\u9762\u7684\u5f71\u54cd\u53d6\u51b3\u4e8e\u5149\u7ebf\u4e0e\u8868\u9762\u7684\u5939\u89d2\u3002</p> <p>\u6807\u91cf\u4e58\u79ef\u548c\u70b9\u79ef\u5728\u4efb\u4f55\u7ef4\u5ea6\u4e2d\u90fd\u6709\u5b9a\u4e49\u3002\u5bf9\u4e8e\u4e09\u7ef4\u5411\u91cf\uff0c\u8fd8\u6709\u53e6\u4e00\u79cd\u79f0\u4e3a\u53c9\u79ef\u7684\u4e58\u79ef\u7c7b\u578b\uff0c\u5b83\u4e5f\u5177\u6709\u91cd\u8981\u7684\u51e0\u4f55\u610f\u4e49\u3002\u5bf9\u4e8e\u5411\u91cf <code>v1 = (x1,y1,z1)</code> \u548c <code>v2 = (x2,y2,z2)</code>\uff0cv1 \u548c v2 \u7684\u53c9\u79ef\u8bb0\u4e3a v1\u00d7v2\uff0c\u5e76\u7531\u4ee5\u4e0b\u5411\u91cf\u5b9a\u4e49\uff1a</p> <pre><code>v1\u00d7v2 = ( y1*z2 - z1*y2, z1*x2 - x1*z2, x1*y2 - y1*x2 )\n</code></pre> <p>\u5982\u679c v1 \u548c v2 \u662f\u975e\u96f6\u5411\u91cf\uff0c\u5219\u5f53\u4e14\u4ec5\u5f53 v1 \u548c v2 \u6307\u5411\u76f8\u540c\u65b9\u5411\u6216\u5b8c\u5168\u76f8\u53cd\u65b9\u5411\u65f6\uff0cv1\u00d7v2 \u4e3a\u96f6\u3002\u5047\u8bbe v1\u00d7v2 \u662f\u975e\u96f6\u7684\uff0c\u90a3\u4e48\u5b83\u540c\u65f6\u5782\u76f4\u4e8e v1 \u548c v2\uff1b\u6b64\u5916\uff0c\u5411\u91cf v1\u3001v2 \u548c v1\u00d7v2 \u7b26\u5408\u53f3\u624b\u6cd5\u5219\uff08\u5728\u53f3\u624b\u5750\u6807\u7cfb\u4e2d\uff09\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u7528\u53f3\u624b\u7684\u624b\u6307\u4ece v1 \u5377\u66f2\u5230 v2\uff0c\u90a3\u4e48\u4f60\u7684\u62c7\u6307\u6307\u5411 v1\u00d7v2 \u7684\u65b9\u5411\u3002\u5982\u679c v1 \u548c v2 \u662f\u5782\u76f4\u5355\u4f4d\u5411\u91cf\uff0c\u90a3\u4e48\u53c9\u79ef v1\u00d7v2 \u4e5f\u662f\u4e00\u4e2a\u5355\u4f4d\u5411\u91cf\uff0c\u5b83\u540c\u65f6\u5782\u76f4\u4e8e v1 \u548c v2\u3002</p> <p>\u6700\u540e\uff0c\u6211\u8981\u6307\u51fa\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u70b9 <code>P1 = (x1,y1,z1)</code> \u548c <code>P2 = (x2,y2,z2)</code>\uff0c\u5b83\u4eec\u7684\u5dee P2\u2212P1 \u53ef\u4ee5\u7531\u4ee5\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a</p> <pre><code>P2 \u2212 P1  =  ( x2 \u2212 x1, y2 \u2212 y1, z2 \u2212 z1 )\n</code></pre> <p>\u8fd9\u4e2a\u5dee\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u6761\u4ece P1 \u5f00\u59cb\u3001\u6307\u5411 P2 \u7ed3\u675f\u7684\u7bad\u5934\u3002</p> <p>\u73b0\u5728\uff0c\u5047\u8bbe P1\u3001P2 \u548c P3 \u662f\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u3002\u90a3\u4e48\u5411\u91cf P1\u2212P2 \u548c P3\u2212P2 \u4f4d\u4e8e\u591a\u8fb9\u5f62\u7684\u5e73\u9762\u5185\uff0c\u56e0\u6b64\u53c9\u79ef</p> <pre><code>(P3\u2212P2) \u00d7 (P1\u2212P2)\n</code></pre> <p>\u662f\u4e00\u4e2a\u5782\u76f4\u4e8e\u591a\u8fb9\u5f62\u7684\u5411\u91cf\u3002</p> <p></p> <p>\u8fd9\u4e2a\u5411\u91cf\u88ab\u79f0\u4e3a\u591a\u8fb9\u5f62\u7684\u6cd5\u5411\u91cf\u3002\u957f\u5ea6\u4e3a\u4e00\u7684\u6cd5\u5411\u91cf\u79f0\u4e3a\u5355\u4f4d\u6cd5\u5411\u91cf\u3002\u5355\u4f4d\u6cd5\u5411\u91cf\u5728\u5149\u7167\u8ba1\u7b97\u4e2d\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u6b64\u80fd\u591f\u6839\u636e\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u8ba1\u7b97\u51fa\u5355\u4f4d\u6cd5\u5411\u91cf\u5c06\u4f1a\u975e\u5e38\u6709\u7528\u3002</p> <p>A vector is a quantity that has a length and a direction. A vector can be visualized as an arrow, as long as you remember that it is the length and direction of the arrow that are relevant, and that its specific location is irrelevant. Vectors are often used in computer graphics to represent directions, such as the direction from an object to a light source or the direction in which a surface faces. In those cases, we are more interested in the direction of a vector than in its length.</p> <p>If we visualize a 3D vector V as an arrow starting at the origin, (0,0,0), and ending at a point P, then we can, to a certain extent, identify V with P\u2014at least as long as we remember that an arrow starting at any other point could also be used to represent V. If P has coordinates (a,b,c), we can use the same coordinates for V. When we think of (a,b,c) as a vector, the value of a represents the change in the x-coordinate between the starting point of the arrow and its ending point, b is the change in the y-coordinate, and c is the change in the z-coordinate. For example, the 3D point (x,y,z) = (3,4,5) has the same coordinates as the vector (dx,dy,dz) = (3,4,5). For the point, the coordinates (3,4,5) specify a position in space in the xyz coordinate system. For the vector, the coordinates (3,4,5) specify the change in the x, y, and z coordinates along the vector. If we represent the vector with an arrow that starts at the origin (0,0,0), then the head of the arrow will be at (3,4,5). But we could just as well visualize the vector as an arrow that starts at the point (1,1,1), and in that case the head of the arrow would be at the point (4,5,6).</p> <p>The distinction between a point and a vector is subtle. For some purposes, the distinction can be ignored; for other purposes, it is important. Often, all that we have is a sequence of numbers, which we can treat as the coordinates of either a vector or a point, whichever is more appropriate in the context.</p> <p>One of the basic properties of a vector is its length. In terms of its coordinates, the length of a 3D vector (x,y,z) is given by <code>sqrt(x2+y2+z2)</code>. (This is just the Pythagorean theorem in three dimensions.) If v is a vector, its length is denoted by |v|. The length of a vector is also called its norm. (We are considering 3D vectors here, but concepts and formulas are similar for other dimensions.)</p> <p>Vectors of length 1 are particularly important. They are called unit vectors. If v = (x,y,z) is any vector other than (0,0,0), then there is exactly one unit vector that points in the same direction as v. That vector is given by</p> <pre><code>( x/length, y/length, z/length )\n</code></pre> <p>where length is the length of v. Dividing a vector by its length is said to normalize the vector: The result is a unit vector that points in the same direction as the original vector.</p> <p>Two vectors can be added. Given two vectors <code>v1 = (x1,y1,z1)</code> and <code>v2 = (x2,y2,z2)</code>, their sum is defined as</p> <pre><code>v1 + v2  =  ( x1+x2, y1+y2, z1+z2 );\n</code></pre> <p>The sum has a geometric meaning:</p> <p></p> <p>Multiplication is more complicated. The obvious definition of the product of two vectors, similar to the definition of the sum, does not have geometric meaning and is rarely used. However, there are three kinds of vector multiplication that are used: the scalar product, the dot product, and the cross product.</p> <p>If <code>v = (x,y,z)</code> is a vector and a is a number, then the scalar product of a and v is defined as</p> <pre><code>av  =  ( a*x, a*y, a*z );\n</code></pre> <p>Assuming that a is positive and v is not zero, av is a vector that points in the same direction as v, whose length is a times the length of v. If a is negative, av points in the opposite direction from v, and its length is |a| times the length of v. This type of product is called a scalar product because a number like a is also referred to as a \"scalar,\" perhaps because multiplication by a scales v to a new length.</p> <p>Given two vectors <code>v1 = (x1,y1,z1)</code> and <code>v2 = (x2,y2,z2)</code>, the dot product of v1 and v2 is denoted by v1\u00b7v2 and is defined by</p> <pre><code>v1\u00b7v2  =  x1*x2 + y1*y2 + z1*z2\n</code></pre> <p>Note that the dot product is a number, not a vector. The dot product has several very important geometric meanings. First of all, note that the length of a vector v is just the square root of v\u00b7v. Furthermore, the dot product of two non-zero vectors v1 and v2 has the property that</p> <pre><code>cos(angle)  =  v1\u00b7v2 / (|v1|*|v2|)\n</code></pre> <p>where angle is the measure of the angle between v1 and v2. In particular, in the case of two unit vectors, whose lengths are 1, the dot product of two unit vectors is simply the cosine of the angle between them. Furthermore, since the cosine of a 90-degree angle is zero, two non-zero vectors are perpendicular if and only if their dot product is zero. Because of these properties, the dot product is particularly important in lighting calculations, where the effect of light shining on a surface depends on the angle that the light makes with the surface.</p> <p>The scalar product and dot product are defined in any dimension. For vectors in 3D, there is another type of product called the cross product, which also has an important geometric meaning. For vectors <code>v1 = (x1,y1,z1)</code> and <code>v2 = (x2,y2,z2)</code>, the cross product of v1 and v2 is denoted v1\u00d7v2 and is the vector defined by</p> <pre><code>v1\u00d7v2 = ( y1*z2 - z1*y2, z1*x2 - x1*z2, x1*y2 - y1*x2 )\n</code></pre> <p>If v1 and v2 are non-zero vectors, then v1\u00d7v2 is zero if and only if v1 and v2 point in the same direction or in exactly opposite directions. Assuming v1\u00d7v2 is non-zero, then it is perpendicular both to v1 and to v2; furthermore, the vectors v1, v2, v1\u00d7v2 follow the right-hand rule (in a right-handed coordinate system); that is, if you curl the fingers of your right hand from v1 to v2, then your thumb points in the direction of v1\u00d7v2. If v1 and v2 are perpendicular unit vectors, then the cross product v1\u00d7v2 is also a unit vector, which is perpendicular both to v1 and to v2.</p> <p>Finally, I will note that given two points <code>P1 = (x1,y1,z1)</code> and <code>P2 = (x2,y2,z2)</code>, the difference P2\u2212P1 is defined by</p> <pre><code>P2 \u2212 P1  =  ( x2 \u2212 x1, y2 \u2212 y1, z2 \u2212 z1 )\n</code></pre> <p>This difference is a vector that can be visualized as an arrow that starts at P1 and ends at P2.</p> <p>Now, suppose that P1, P2, and P3 are vertices of a polygon. Then the vectors P1\u2212P2 and P3\u2212P2 lie in the plane of the polygon, and so the cross product</p> <pre><code>(P3\u2212P2) \u00d7 (P1\u2212P2)\n</code></pre> <p>is a vector that is perpendicular to the polygon.</p> <p></p> <p>This vector is said to be a normal vector for the polygon. A normal vector of length one is called a unit normal. Unit normals will be important in lighting calculations, and it will be useful to be able to calculate a unit normal for a polygon from its vertices.</p>"},{"location":"cn/c3/s5/#352-\u77e9\u9635\u548c\u53d8\u6362","title":"3.5.2 \u77e9\u9635\u548c\u53d8\u6362","text":"<p>Matrices and Transformations</p> \u4e2d\u6587\u82f1\u6587 <p>\u77e9\u9635\u53ea\u662f\u4e00\u7ec4\u6570\u5b57\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002\u4e00\u4e2a\u5177\u6709 r \u884c\u548c c \u5217\u7684\u77e9\u9635\u79f0\u4e3a r \u884c c \u5217\u7684\u77e9\u9635\u3002\u5982\u679c A \u548c B \u662f\u77e9\u9635\uff0c\u5e76\u4e14 A \u7684\u5217\u6570\u7b49\u4e8e B \u7684\u884c\u6570\uff0c\u5219\u53ef\u4ee5\u5c06 A \u548c B \u76f8\u4e58\u5f97\u5230\u77e9\u9635\u79ef AB\u3002\u5982\u679c A \u662f\u4e00\u4e2a n \u884c m \u5217\u7684\u77e9\u9635\uff0c\u800c B \u662f\u4e00\u4e2a m \u884c k \u5217\u7684\u77e9\u9635\uff0c\u5219 AB \u662f\u4e00\u4e2a n \u884c k \u5217\u7684\u77e9\u9635\u3002\u7279\u522b\u5730\uff0c\u4e24\u4e2a n \u884c n \u5217\u7684\u77e9\u9635\u53ef\u4ee5\u76f8\u4e58\u5f97\u5230\u53e6\u4e00\u4e2a n \u884c n \u5217\u7684\u77e9\u9635\u3002</p> <p>\u4e00\u4e2a n \u7ef4\u5411\u91cf\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4e2a n \u884c 1 \u5217\u7684\u77e9\u9635\u3002\u5982\u679c A \u662f\u4e00\u4e2a n \u884c n \u5217\u7684\u77e9\u9635\uff0c\u800c v \u662f\u4e00\u4e2a n \u7ef4\u5411\u91cf\uff0c\u88ab\u89c6\u4e3a\u4e00\u4e2a n \u884c 1 \u5217\u7684\u77e9\u9635\uff0c\u90a3\u4e48\u4e58\u79ef Av \u518d\u6b21\u662f\u4e00\u4e2a n \u7ef4\u5411\u91cf\u3002\u4e00\u4e2a 3 \u884c 3 \u5217\u77e9\u9635 A \u548c\u4e00\u4e2a 3 \u7ef4\u5411\u91cf <code>v = (x,y,z)</code> \u7684\u4e58\u79ef\u901a\u5e38\u663e\u793a\u5982\u4e0b\uff1a</p> <p></p> <p>\u6ce8\u610f\uff0c\u4e58\u79ef Av \u4e2d\u7684\u7b2c i \u4e2a\u5750\u6807\u7b80\u5355\u5730\u662f\u77e9\u9635 A \u7684\u7b2c i \u884c\u4e0e\u5411\u91cf v \u7684\u70b9\u79ef\u3002</p> <p>\u5229\u7528\u5411\u91cf\u4e58\u4ee5\u77e9\u9635\u7684\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u77e9\u9635\u5b9a\u4e49\u4e86\u4e00\u79cd\u53d8\u6362\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u4e00\u4e2a\u5411\u91cf\u4ee5\u4ea7\u751f\u53e6\u4e00\u4e2a\u5411\u91cf\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u5b9a\u4e49\u7684\u53d8\u6362\u79f0\u4e3a\u7ebf\u6027\u53d8\u6362\uff0c\u5b83\u4eec\u662f\u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u4e3b\u8981\u7814\u7a76\u5bf9\u8c61\u3002\u7ebf\u6027\u53d8\u6362 L \u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a\u5bf9\u4e8e\u4e24\u4e2a\u5411\u91cf v \u548c w\uff0c<code>L(v+w) = L(v) + L(w)</code>\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570 s\uff0c<code>L(sv) = sL(v)</code>\u3002</p> <p>\u65cb\u8f6c\u548c\u7f29\u653e\u662f\u7ebf\u6027\u53d8\u6362\uff0c\u4f46\u5e73\u79fb\u4e0d\u662f\u7ebf\u6027\u53d8\u6362\u3002\u4e3a\u4e86\u5305\u542b\u5e73\u79fb\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u6211\u4eec\u7684\u53d8\u6362\u89c6\u91ce\u6269\u5c55\u5230\u5305\u62ec\u4eff\u5c04\u53d8\u6362\u3002\u7c97\u7565\u5730\u8bf4\uff0c\u4eff\u5c04\u53d8\u6362\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u5148\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\uff0c\u7136\u540e\u8fdb\u884c\u5e73\u79fb\u3002\u51e0\u4f55\u4e0a\uff0c\u4eff\u5c04\u53d8\u6362\u662f\u4e00\u79cd\u4fdd\u6301\u5e73\u884c\u7ebf\u7684\u53d8\u6362\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e24\u6761\u7ebf\u662f\u5e73\u884c\u7684\uff0c\u90a3\u4e48\u5b83\u4eec\u5728\u4eff\u5c04\u53d8\u6362\u4e0b\u7684\u56fe\u50cf\u4e5f\u5c06\u662f\u5e73\u884c\u7ebf\u3002\u5bf9\u4e8e\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\uff0c\u6211\u4eec\u5bf9\u4e09\u7ef4\u4eff\u5c04\u53d8\u6362\u611f\u5174\u8da3\u3002\u7136\u800c\u2014\u2014\u901a\u8fc7\u4e00\u4e2a\u4e4d\u770b\u8d77\u6765\u975e\u5e38\u5947\u602a\u7684\u6280\u5de7\u2014\u2014\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fdb\u5165\u7b2c\u56db\u7ef4\u5ea6\u5c06\u6211\u4eec\u7684\u89c6\u91ce\u91cd\u65b0\u805a\u7126\u5230\u7ebf\u6027\u53d8\u6362\u4e0a\u3002</p> <p>\u9996\u5148\u6ce8\u610f\uff0c\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4eff\u5c04\u53d8\u6362\u5c06\u4e00\u4e2a\u5411\u91cf (x1,y1,z1) \u8f6c\u6362\u4e3a\u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\u7684\u5411\u91cf (x2,y2,z2)\uff1a</p> <pre><code>x2 = a1*x1 + a2*y1 + a3*z1 + t1\ny2 = b1*x1 + b2*y1 + b3*z1 + t2\nz2 = c1*x1 + c2*y1 + c3*z1 + t3\n</code></pre> <p>\u8fd9\u4e9b\u516c\u5f0f\u8868\u8fbe\u4e86\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u7531\u4e00\u4e2a 3 \u884c 3 \u5217\u7684\u77e9\u9635\u4e58\u6cd5\u7ed9\u51fa</p> <p></p> <p>\u7136\u540e\u5728 x \u65b9\u5411\u5e73\u79fb t1\uff0cy \u65b9\u5411\u5e73\u79fb t2\uff0cz \u65b9\u5411\u5e73\u79fb t3\u3002\u5173\u952e\u5728\u4e8e\u7528\u56db\u7ef4\u5411\u91cf (x,y,z,1) \u66ff\u6362\u6bcf\u4e2a\u4e09\u7ef4\u5411\u91cf (x,y,z)\uff0c\u5728\u4f5c\u4e3a\u7b2c\u56db\u4e2a\u5750\u6807\u52a0\u5165\u4e00\u4e2a \"1\"\u3002\u800c\u4e0d\u662f\u4f7f\u7528 3 \u884c 3 \u5217\u7684\u77e9\u9635\uff0c\u6211\u4eec\u4f7f\u7528 4 \u884c 4 \u5217\u7684\u77e9\u9635</p> <p></p> <p>\u5982\u679c\u5c06\u5411\u91cf (x1,y1,z1,1) \u4e58\u4ee5\u8fd9\u4e2a 4 \u884c 4 \u5217\u7684\u77e9\u9635\uff0c\u7ed3\u679c\u6b63\u597d\u662f\u5411\u91cf (x2,y2,z2,1)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u662f\u5bf9 3D \u5411\u91cf (x1,y1,z1) \u5e94\u7528\u4eff\u5c04\u53d8\u6362\uff0c\u800c\u662f\u5bf9 4D \u5411\u91cf (x1,y1,z1,1) \u5e94\u7528\u7ebf\u6027\u53d8\u6362\u3002</p> <p>\u8fd9\u53ef\u80fd\u5bf9\u4f60\u6765\u8bf4\u4f3c\u4e4e\u6beb\u65e0\u610f\u4e49\uff0c\u4f46\u5c3d\u7ba1\u5982\u6b64\uff0c\u5728 OpenGL \u548c\u5176\u4ed6 3D \u8ba1\u7b97\u673a\u56fe\u5f62\u7cfb\u7edf\u4e2d\u5c31\u662f\u8fd9\u6837\u505a\u7684\uff1a\u4e00\u4e2a\u4eff\u5c04\u53d8\u6362\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a 4 \u884c 4 \u5217\u7684\u77e9\u9635\uff0c\u5e95\u90e8\u884c\u4e3a (0,0,0,1)\uff0c\u5e76\u4e14\u901a\u8fc7\u5728\u6700\u540e\u52a0\u5165\u4e00\u4e2a 1\uff0c\u5c06\u4e09\u7ef4\u5411\u91cf\u6539\u4e3a\u56db\u7ef4\u5411\u91cf\u3002\u7ed3\u679c\u662f\uff0c\u6240\u6709\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u4e2d\u5982\u6b64\u91cd\u8981\u7684\u4eff\u5c04\u53d8\u6362\u90fd\u53ef\u4ee5\u901a\u8fc7\u77e9\u9635\u5bf9\u5411\u91cf\u7684\u4e58\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u5c06\u5411\u91cf\u4fdd\u6301\u4e0d\u53d8\u7684\u5355\u4f4d\u53d8\u6362\u5bf9\u5e94\u4e8e\u4e58\u4ee5\u5355\u4f4d\u77e9\u9635\uff0c\u5355\u4f4d\u77e9\u9635\u5728\u5176\u5bf9\u89d2\u7ebf\u4e0a\u67091\uff0c\u5176\u4ed6\u4f4d\u7f6e\u90fd\u662f0\u3002OpenGL \u51fd\u6570 <code>glLoadIdentity()</code> \u5c06\u5f53\u524d\u77e9\u9635\u8bbe\u7f6e\u4e3a 4 \u884c 4 \u5217\u7684\u5355\u4f4d\u77e9\u9635\u3002OpenGL \u7684\u53d8\u6362\u51fd\u6570\uff0c\u6bd4\u5982 <code>glTranslatef(tx, ty, tz)</code>\uff0c\u5176\u6548\u679c\u662f\u5c06\u5f53\u524d\u77e9\u9635\u4e58\u4ee5\u4ee3\u8868\u8be5\u53d8\u6362\u7684 4 \u884c 4 \u5217\u77e9\u9635\u3002\u4e58\u6cd5\u662f\u53f3\u4e58\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c M \u662f\u5f53\u524d\u77e9\u9635\uff0cT \u662f\u4ee3\u8868\u53d8\u6362\u7684\u77e9\u9635\uff0c\u90a3\u4e48\u5f53\u524d\u77e9\u9635\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u4e58\u79ef\u77e9\u9635 MT\u3002\u4e3a\u8bb0\u5f55\uff0c\u4e0b\u56fe\u663e\u793a\u4e86\u5355\u4f4d\u77e9\u9635\u4ee5\u53ca\u4e0e\u5404\u79cd OpenGL \u53d8\u6362\u51fd\u6570\u5bf9\u5e94\u7684\u77e9\u9635\uff1a</p> <p></p> <p>\u5728 OpenGL \u4e2d\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7684\u53d8\u6362\u77e9\u9635\uff0c\u4f7f\u7528\u51fd\u6570 <code>glMultMatrixf(T)</code> \u6216 <code>glMultMatrixd(T)</code>\u3002\u53c2\u6570 T \u662f\u4e00\u4e2a\u7531\u7c7b\u578b\u4e3a float \u6216 double \u7684\u6570\u5b57\u6570\u7ec4\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u4ee3\u8868\u4e00\u4e2a\u53d8\u6362\u77e9\u9635\u3002\u8be5\u6570\u7ec4\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 16 \u7684\u4e00\u7ef4\u6570\u7ec4\u3002\u6570\u7ec4\u4e2d\u7684\u9879\u662f\u53d8\u6362\u77e9\u9635\u4e2d\u7684\u6570\u5b57\uff0c\u6309\u5217\u4e3b\u5e8f\u5b58\u50a8\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u9996\u5148\u662f\u7b2c\u4e00\u5217\u7684\u6570\u5b57\uff0c\u7136\u540e\u662f\u7b2c\u4e8c\u5217\u7684\u6570\u5b57\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8fd9\u4e9b\u51fd\u6570\u5c06\u5f53\u524d\u77e9\u9635\u53f3\u4e58\u4ee5\u77e9\u9635 T\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u526a\u5207\u53d8\u6362\uff0c\u8fd9\u4e0d\u5bb9\u6613\u8868\u793a\u4e3a\u4e00\u7cfb\u5217\u7684\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u3002</p> <p>A matrix is just a two-dimensional array of numbers. A matrix with r rows and c columns is said to be an r-by-c matrix. If A and B are matrices, and if the number of columns in A is equal to the number of rows in B, then A and B can be multiplied to give the matrix product AB. If A is an n-by-m matrix and B is an m-by-k matrix, then AB is an n-by-k matrix. In particular, two n-by-n matrices can be multiplied to give another n-by-n matrix.</p> <p>An n-dimensional vector can be thought of an n-by-1 matrix. If A is an n-by-n matrix and v is a vector in n dimensions, thought of as an n-by-1 matrix, then the product Av is again an n-dimensional vector. The product of a 3-by-3 matrix A and a 3D vector <code>v = (x,y,z)</code> is often displayed like this:</p> <p></p> <p>Note that the i-th coordinate in the product Av is simply the dot product of the i-th row of the matrix A and the vector v.</p> <p>Using this definition of the multiplication of a vector by a matrix, a matrix defines a transformation that can be applied to one vector to yield another vector. Transformations that are defined in this way are linear transformations, and they are the main object of study in linear algebra. A linear transformation L has the properties that for two vectors v and w, <code>L(v+w) = L(v) + L(w)</code>, and for a number s, <code>L(sv) = sL(v)</code>.</p> <p>Rotation and scaling are linear transformations, but translation is not a linear transformation. To include translations, we have to widen our view of transformation to include affine transformations. An affine transformation can be defined, roughly, as a linear transformation followed by a translation. Geometrically, an affine transformation is a transformation that preserves parallel lines; that is, if two lines are parallel, then their images under an affine transformation will also be parallel lines. For computer graphics, we are interested in affine transformations in three dimensions. However\u2014by what seems at first to be a very odd trick\u2014we can narrow our view back to the linear by moving into the fourth dimension.</p> <p>Note first of all that an affine transformation in three dimensions transforms a vector (x1,y1,z1) into a vector (x2,y2,z2) given by formulas</p> <pre><code>x2 = a1*x1 + a2*y1 + a3*z1 + t1\ny2 = b1*x1 + b2*y1 + b3*z1 + t2\nz2 = c1*x1 + c2*y1 + c3*z1 + t3\n</code></pre> <p>These formulas express a linear transformation given by multiplication by the 3-by-3 matrix</p> <p></p> <p>followed by translation by t1 in the x direction, t2 in the y direction and t3 in the z direction. The trick is to replace each three-dimensional vector (x,y,z) with the four-dimensional vector (x,y,z,1), adding a \"1\" as the fourth coordinate. And instead of the 3-by-3 matrix, we use the 4-by-4 matrix</p> <p></p> <p>If the vector (x1,y1,z1,1) is multiplied by this 4-by-4 matrix, the result is precisely the vector (x2,y2,z2,1). That is, instead of applying an affine transformation to the 3D vector (x1,y1,z1), we can apply a linear transformation to the 4D vector (x1,y1,z1,1).</p> <p>This might seem pointless to you, but nevertheless, that is what is done in OpenGL and other 3D computer graphics systems: An affine transformation is represented as a 4-by-4 matrix in which the bottom row is (0,0,0,1), and a three-dimensional vector is changed into a four dimensional vector by adding a 1 as the final coordinate. The result is that all the affine transformations that are so important in computer graphics can be implemented as multiplication of vectors by matrices.</p> <p>The identity transformation, which leaves vectors unchanged, corresponds to multiplication by the identity matrix, which has ones along its descending diagonal and zeros elsewhere. The OpenGL function glLoadIdentity() sets the current matrix to be the 4-by-4 identity matrix. An OpenGL transformation function, such as glTranslatef(tx,ty,tz), has the effect of multiplying the current matrix by the 4-by-4 matrix that represents the transformation. Multiplication is on the right; that is, if M is the current matrix and T is the matrix that represents the transformation, then the current matrix will be set to the product matrix MT. For the record, the following illustration shows the identity matrix and the matrices corresponding to various OpenGL transformation functions:</p> <p></p> <p>It is even possible to use an arbitrary transformation matrix in OpenGL, using the function glMultMatrixf(T) or glMultMatrixd(T). The parameter, T, is an array of numbers of type float or double, representing a transformation matrix. The array is a one-dimensional array of length 16. The items in the array are the numbers from the transformation matrix, stored in column-major order, that is, the numbers in the fist column, followed by the numbers in the second column, and so on. These functions multiply the current matrix by the matrix T, on the right. You could use them, for example, to implement a shear transform, which is not easy to represent as a sequence of scales, rotations, and translations.</p>"},{"location":"cn/c3/s5/#353-\u9f50\u6b21\u5750\u6807","title":"3.5.3 \u9f50\u6b21\u5750\u6807","text":"<p>Homogeneous Coordinates</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5728\u672c\u8282\u4e2d\u4ee5\u4e00\u70b9\u6709\u5173\u53d8\u6362\u5b9e\u73b0\u7684\u6570\u5b66\u7ec6\u8282\u7ed3\u675f\u3002\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u6709\u4e00\u4e2a\u5e38\u89c1\u7684\u53d8\u6362\u4e0d\u662f\u4eff\u5c04\u53d8\u6362\uff1a\u5728\u900f\u89c6\u6295\u5f71\u7684\u60c5\u51b5\u4e0b\uff0c\u6295\u5f71\u53d8\u6362\u4e0d\u662f\u4eff\u5c04\u7684\u3002\u5728\u900f\u89c6\u6295\u5f71\u4e2d\uff0c\u7269\u4f53\u770b\u8d77\u6765\u4f1a\u968f\u7740\u79bb\u89c2\u5bdf\u8005\u7684\u8ddd\u79bb\u589e\u52a0\u800c\u53d8\u5c0f\uff0c\u8fd9\u662f\u4efb\u4f55\u4eff\u5c04\u53d8\u6362\u90fd\u65e0\u6cd5\u8868\u8fbe\u7684\u5c5e\u6027\uff0c\u56e0\u4e3a\u4eff\u5c04\u53d8\u6362\u4fdd\u6301\u5e73\u884c\u7ebf\uff0c\u800c\u5728\u900f\u89c6\u6295\u5f71\u4e2d\uff0c\u5e73\u884c\u7ebf\u4f1a\u5728\u8fdc\u5904\u6c47\u805a\u3002</p> <p>\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u5c06\u900f\u89c6\u6295\u5f71\u8868\u793a\u4e3a\u4e00\u4e2a 4 \u884c 4 \u5217\u7684\u77e9\u9635\uff0c\u53ea\u8981\u6211\u4eec\u613f\u610f\u5c06\u5750\u6807\u7684\u4f7f\u7528\u63a8\u5e7f\u5230\u66f4\u8fdc\u7684\u7a0b\u5ea6\u3002\u6211\u4eec\u5df2\u7ecf\u7528\u7b2c\u56db\u4e2a\u5750\u6807\u4e3a 1 \u7684\u56db\u7ef4\u5411\u91cf\u6765\u8868\u793a\u4e09\u7ef4\u5411\u91cf\u3002\u73b0\u5728\uff0c\u6211\u4eec\u5141\u8bb8\u7b2c\u56db\u4e2a\u5750\u6807\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u9664\u4e86\u8981\u6c42\u56db\u4e2a\u5750\u6807\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u975e\u96f6\u3002\u5f53\u7b2c\u56db\u4e2a\u5750\u6807 w \u975e\u96f6\u65f6\uff0c\u6211\u4eec\u5c06\u5750\u6807 (x,y,z,w) \u89c6\u4e3a\u8868\u793a\u4e09\u7ef4\u5411\u91cf (x/w,y/w,z/w)\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0e\u6211\u4eec\u5148\u524d\u7684\u7528\u6cd5\u662f\u4e00\u81f4\u7684\uff0c\u56e0\u4e3a\u5b83\u5c06 (x,y,z,1) \u89c6\u4e3a (x,y,z)\uff0c\u4e0e\u4ee5\u524d\u4e00\u6837\u3002\u5f53\u7b2c\u56db\u4e2a\u5750\u6807\u4e3a\u96f6\u65f6\uff0c\u6ca1\u6709\u5bf9\u5e94\u7684\u4e09\u7ef4\u5411\u91cf\uff0c\u4f46\u662f\u53ef\u4ee5\u5c06 (x,y,z,0) \u89c6\u4e3a\u8868\u793a\u6cbf\u7740 (x,y,z) \u65b9\u5411\u7684\u4e09\u7ef4\u201c\u65e0\u7a77\u8fdc\u70b9\u201d\u3002</p> <p>\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u7684\u5750\u6807 (x,y,z,w) \u79f0\u4e3a\u9f50\u6b21\u5750\u6807\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u9f50\u6b21\u5750\u6807\uff0c\u90a3\u4e48\u4efb\u4f55 4 \u884c 4 \u5217\u7684\u77e9\u9635\u90fd\u53ef\u4ee5\u7528\u4e8e\u53d8\u6362\u4e09\u7ef4\u5411\u91cf\uff0c\u5305\u62ec\u5176\u5e95\u90e8\u884c\u4e0d\u662f (0,0,0,1) \u7684\u77e9\u9635\u3002\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u8868\u793a\u7684\u53d8\u6362\u4e4b\u4e00\u662f\u900f\u89c6\u6295\u5f71\u7684\u6295\u5f71\u53d8\u6362\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u6b63\u662f OpenGL \u5185\u90e8\u6240\u505a\u7684\u3002\u5b83\u4f7f\u7528\u9f50\u6b21\u5750\u6807\u6765\u8868\u793a\u6240\u6709\u4e09\u7ef4\u70b9\u548c\u5411\u91cf\uff0c\u5e76\u5c06\u6240\u6709\u53d8\u6362\u8868\u793a\u4e3a 4 \u884c 4 \u5217\u7684\u77e9\u9635\u3002\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u9f50\u6b21\u5750\u6807\u6307\u5b9a\u9876\u70b9\u3002\u4f8b\u5982\uff0c\u547d\u4ee4</p> <pre><code>glVertex4f(x, y, z, w);\n</code></pre> <p>\u5176\u4e2d w \u7684\u503c\u975e\u96f6\uff0c\u751f\u6210 3D \u70b9 (x/w, y/w, z/w)\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4f60\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u5fc5\u76f4\u63a5\u5904\u7406\u9f50\u6b21\u5750\u6807\u3002\u552f\u4e00\u7684\u771f\u6b63\u4f8b\u5916\u662f\uff0c\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5728\u914d\u7f6e OpenGL \u7167\u660e\u65f6\u4f7f\u7528\u4e86\u9f50\u6b21\u5750\u6807\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u7ae0\u4e2d\u770b\u5230\u3002</p> <p>We finish this section with a bit of mathematical detail about the implementation of transformations. There is one common transformation in computer graphics that is not an affine transformation: In the case of a perspective projection, the projection transformation is not affine. In a perspective projection, an object will appear to get smaller as it moves farther away from the viewer, and that is a property that no affine transformation can express, since affine transforms preserve parallel lines and parallel lines will seem to converge in the distance in a perspective projection.</p> <p>Surprisingly, we can still represent a perspective projection as a 4-by-4 matrix, provided we are willing to stretch our use of coordinates even further than we have already. We have already represented 3D vectors by 4D vectors in which the fourth coordinate is 1. We now allow the fourth coordinate to be anything at all, except for requiring that at least one of the four coordinates is non-zero. When the fourth coordinate, w, is non-zero, we consider the coordinates (x,y,z,w) to represent the three-dimensional vector (x/w,y/w,z/w). Note that this is consistent with our previous usage, since it considers (x,y,z,1) to represent (x,y,z), as before. When the fourth coordinate is zero, there is no corresponding 3D vector, but it is possible to think of (x,y,z,0) as representing a 3D \"point at infinity\" in the direction of (x,y,z).</p> <p>Coordinates (x,y,z,w) used in this way are referred to as homogeneous coordinates. If we use homogeneous coordinates, then any 4-by-4 matrix can be used to transform three-dimensional vectors, including matrices whose bottom row is not (0,0,0,1). Among the transformations that can be represented in this way is the projection transformation for a perspective projection. And in fact, this is what OpenGL does internally. It represents all three-dimensional points and vectors using homogeneous coordinates, and it represents all transformations as 4-by-4 matrices. You can even specify vertices using homogeneous coordinates. For example, the command</p> <pre><code>glVertex4f(x,y,z,w);\n</code></pre> <p>with a non-zero value for w, generates the 3D point (x/w,y/w,z/w). Fortunately, you will almost never have to deal with homogeneous coordinates directly. The only real exception to this is that homogeneous coordinates are used, surprisingly, when configuring OpenGL lighting, as we'll see in the next chapter.</p>"},{"location":"cn/c3/s6/","title":"3.6 \u4f7f\u7528 GLUT \u548c JOGL","text":"<p>Using GLUT and JOGL</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL\u662f\u4e00\u4e2a\u4ec5\u7528\u4e8e\u56fe\u5f62\u7684API\uff0c\u4e0d\u652f\u6301\u8bf8\u5982\u7a97\u53e3\u6216\u4e8b\u4ef6\u4e4b\u7c7b\u7684\u529f\u80fd\u3002OpenGL\u4f9d\u8d56\u5916\u90e8\u673a\u5236\u6765\u521b\u5efa\u7ed8\u56fe\u8868\u9762\uff0c\u7136\u540e\u5728\u5176\u4e0a\u8fdb\u884c\u7ed8\u5236\u3002\u652f\u6301OpenGL\u7684\u7a97\u53e3API\u901a\u5e38\u4f5c\u4e3a\u8bb8\u591a\u5176\u4ed6\u5e93\u4e4b\u4e00\uff0c\u7528\u4e8e\u751f\u6210\u5b8c\u6574\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u3002\u6211\u4eec\u5c06\u770b\u4e24\u4e2a\u8de8\u5e73\u53f0API\uff0c\u4f7f\u5f97\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528OpenGL\u6210\u4e3a\u53ef\u80fd\uff0c\u4e00\u4e2a\u662f\u7528\u4e8eC/C++\u7684\uff0c\u53e6\u4e00\u4e2a\u662f\u7528\u4e8eJava\u7684\u3002</p> <p>\u5bf9\u4e8e\u7528C\u6216C++\u7f16\u5199\u7684\u7b80\u5355\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u53ef\u80fd\u7684\u7a97\u53e3API\u662fGLUT\uff08OpenGL\u5b9e\u7528\u5de5\u5177\u5305\uff09\u3002 GLUT\u662f\u4e00\u4e2a\u5c0f\u578bAPI\u3002\u5b83\u7528\u4e8e\u521b\u5efa\u4f5c\u4e3aOpenGL\u7ed8\u56fe\u8868\u9762\u7b80\u5355\u6846\u67b6\u7684\u7a97\u53e3\u3002\u5b83\u652f\u6301\u5904\u7406\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fdb\u884c\u57fa\u672c\u52a8\u753b\u3002\u5b83\u4e0d\u652f\u6301\u6309\u94ae\u6216\u8f93\u5165\u5b57\u6bb5\u7b49\u63a7\u4ef6\uff0c\u4f46\u5141\u8bb8\u54cd\u5e94\u9f20\u6807\u64cd\u4f5c\u800c\u5f39\u51fa\u83dc\u5355\u3002\u539f\u59cb\u7248\u672c\u7684GLUT\u5df2\u4e0d\u518d\u5f97\u5230\u79ef\u6781\u652f\u6301\uff0c\u63a8\u8350\u4f7f\u7528\u540d\u4e3afreeglut\u7684\u7248\u672c\uff08http://freeglut.sourceforge.net/\uff09\u3002\u4f8b\u5982\uff0cLinux\u4e2d\u5305\u542b\u7684\u7248\u672c\u5b9e\u9645\u4e0a\u662ffreeglut\u3002\u6709\u5173freeglut API\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605http://freeglut.sourceforge.net/docs/api.php\u3002</p> <p>** JOGL\uff08Java OpenGL\uff09\u662f\u4e00\u7ec4\u7c7b\uff0c\u4f7f\u5f97\u5728Java\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528OpenGL\u6210\u4e3a\u53ef\u80fd\u3002JOGL\u5df2\u96c6\u6210\u5230Swing\u548cAWT\u4e2d\uff0c\u8fd9\u662f\u6807\u51c6\u7684Java\u56fe\u5f62\u7528\u6237\u754c\u9762API\u3002\u4f7f\u7528JOGL\uff0c\u60a8\u53ef\u4ee5\u521b\u5efaJava GUI\u7ec4\u4ef6\uff0c\u5e76\u4f7f\u7528OpenGL\u8fdb\u884c\u7ed8\u5236\u3002\u8fd9\u4e9bOpenGL\u7ec4\u4ef6\u53ef\u4ee5\u5728\u4efb\u4f55Java\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u7c7b\u4f3c\u4e8e\u60a8\u4f7f\u7528Canvas\u6216JPanel**\u4f5c\u4e3a\u7ed8\u56fe\u8868\u9762\u7684\u65b9\u5f0f\u3002\u50cf\u8bb8\u591aJava\u7684\u4e1c\u897f\u4e00\u6837\uff0cJOGL\u975e\u5e38\u590d\u6742\u3002\u6211\u4eec\u53ea\u4f1a\u5728\u76f8\u5f53\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u3002JOGL\u4e0d\u662fJava\u7684\u6807\u51c6\u90e8\u5206\u3002\u5b83\u7684\u5b98\u65b9\u7f51\u7ad9\u662fhttp://jogamp.org/jogl/www/\u3002</p> <p>\u672c\u8282\u5305\u542b\u4e86\u4f7f\u7528GLUT\u548cJOGL\u7684\u5165\u95e8\u4fe1\u606f\uff0c\u5047\u8bbe\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u4f7f\u7528C\u548cJava\u8fdb\u884c\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u5b83\u8fd8\u7b80\u8981\u8ba8\u8bba\u4e86glsim.js\uff0c\u8fd9\u662f\u6211\u7f16\u5199\u7684\u4e00\u4e2aJavaScript\u5e93\uff0c\u7528\u4e8e\u6a21\u62df\u672c\u4e66\u4e2d\u4f7f\u7528\u7684OpenGL 1.1\u7684\u5b50\u96c6\u3002</p> <p>OpenGL is an API for graphics only, with no support for things like windows or events. OpenGL depends on external mechanisms to create the drawing surfaces on which it will draw. Windowing APIs that support OpenGL often do so as one library among many others that are used to produce a complete application. We will look at two cross-platform APIs that make it possible to use OpenGL in applications, one for C/C++ and one for Java.</p> <p>For simple applications written in C or C++, one possible windowing API is GLUT (OpenGL Utility Toolkit). GLUT is a small API. It is used to create windows that serve as simple frames for OpenGL drawing surfaces. It has support for handling mouse and keyboard events, and it can do basic animation. It does not support controls such as buttons or input fields, but it does allow for a menu that pops up in response to a mouse action. The original version of GLUT is no longer actively supported, and a version called freeglut (http://freeglut.sourceforge.net/) is recommended instead. For example, the version included in Linux is actually freeglut. For details of the freeglut API, see</p> <p>http://freeglut.sourceforge.net/docs/api.php</p> <p>JOGL (Java OpenGL) is a collection of classes that make it possible to use OpenGL in Java applications. JOGL is integrated into Swing and AWT, the standard Java graphical user interface APIs. With JOGL, you can create Java GUI components on which you can draw using OpenGL. These OpenGL components can be used in any Java application, in much the same way that you would use a Canvas or JPanel as a drawing surface. Like many things Java, JOGL is immensely complicated. We will use it only in fairly simple applications. JOGL is not a standard part of Java. It's home web site is</p> <p>http://jogamp.org/jogl/www/</p> <p>This section contains information to get you started using GLUT and JOGL, assuming that you already know the basics of programming with C and Java. It also briefly discusses glsim.js, a JavaScript library that I have written to simulate the subset of OpenGL 1.1 that is used in this book.</p>"},{"location":"cn/c3/s6/#361-\u4f7f\u7528glut","title":"3.6.1 \u4f7f\u7528GLUT","text":"\u4e2d\u6587\u82f1\u6587 <p>\u8981\u4f7f\u7528GLUT\uff0c\u60a8\u9700\u8981\u4e00\u4e2aC\u7f16\u8bd1\u5668\u4ee5\u53caOpenGL\u548cGLUT\uff08\u6216freeglut\uff09\u5f00\u53d1\u5e93\u7684\u526f\u672c\u3002\u6211\u65e0\u6cd5\u544a\u8bc9\u60a8\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u5177\u4f53\u662f\u4ec0\u4e48\u610f\u601d\u3002\u4f8b\u5982\uff0c\u5728\u6211\u8fd0\u884cLinux Mint\u7684\u8ba1\u7b97\u673a\u4e0a\uff0c\u514d\u8d39\u7684C\u7f16\u8bd1\u5668gcc\u5df2\u7ecf\u53ef\u7528\u3002\u4e3a\u4e86\u8fdb\u884cOpenGL\u5f00\u53d1\uff0c\u6211\u5b89\u88c5\u4e86\u51e0\u4e2a\u5305\uff0c\u5305\u62ecfreeglut3-dev\u548clibgl1-mesa-dev\u3002\uff08Mesa\u662fOpenGL\u7684Linux\u5b9e\u73b0\u3002\uff09\u5982\u679cglutprog.c\u5305\u542b\u4e00\u4e2a\u5b8c\u6574\u7684\u4f7f\u7528GLUT\u7684C\u7a0b\u5e8f\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u7f16\u8bd1\u5b83\uff1a</p> <pre><code>gcc -o glutprog glutprog.c -lGL -lglut\n</code></pre> <p>\u201c-o glutprog\u201d\u544a\u8bc9\u7f16\u8bd1\u5668\u5c06\u201cglutprog\u201d\u7528\u4f5c\u5176\u8f93\u51fa\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u7136\u540e\u53ef\u4ee5\u50cf\u6b63\u5e38\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e00\u6837\u8fd0\u884c\u5b83\uff1b\u5982\u679c\u6ca1\u6709\u6b64\u9009\u9879\uff0c\u5219\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u5c06\u4e3a\u201ca.out\u201d\u3002\u201c-lglut\u201d\u548c\u201c-lGL\u201d\u9009\u9879\u544a\u8bc9\u7f16\u8bd1\u5668\u5c06\u7a0b\u5e8f\u4e0eGLUT\u548cOpenGL\u5e93\u94fe\u63a5\u5728\u4e00\u8d77\u3002\uff08\u201c-\u201d\u540e\u7684\u5b57\u7b26\u662f\u5c0f\u5199\u7684\u201cL\u201d\u3002\uff09\u5982\u679c\u6ca1\u6709\u8fd9\u4e9b\u9009\u9879\uff0c\u94fe\u63a5\u5668\u5c06\u4e0d\u4f1a\u8bc6\u522b\u4efb\u4f55GLUT\u6216OpenGL\u51fd\u6570\u3002\u5982\u679c\u7a0b\u5e8f\u8fd8\u4f7f\u7528\u4e86GLU\u5e93\uff0c\u7f16\u8bd1\u5b83\u5c06\u9700\u8981\u9009\u9879\u201c-lGLU\u201d\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u6570\u5b66\u5e93\uff0c\u8fd8\u9700\u8981\u9009\u9879\u201c-lm\u201d\u3002\u5982\u679c\u7a0b\u5e8f\u9700\u8981\u5176\u4ed6.c\u6587\u4ef6\uff0c\u4e5f\u5e94\u8be5\u5305\u62ec\u5728\u5185\u3002\u4f8b\u5982\uff0c\u793a\u4f8b\u7a0b\u5e8fglut/color-cube-of-spheres.c\u4f9d\u8d56\u4e8ecamera.c\uff0c\u53ef\u4ee5\u4f7f\u7528Linux\u7684gcc\u7f16\u8bd1\u5668\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\uff1a</p> <pre><code>gcc -o cubes color-cube-of-spheres.c camera.c -lGL -lglut -lGLU -lm\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8fglut/glut-starter.c\u53ef\u7528\u4f5c\u7f16\u5199\u4f7f\u7528GLUT\u7684\u7a0b\u5e8f\u7684\u8d77\u70b9\u3002\u867d\u7136\u5b83\u9664\u4e86\u6253\u5f00\u4e00\u4e2a\u7a97\u53e3\u5916\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u4f46\u7a0b\u5e8f\u5305\u542b\u8fdb\u884cOpenGL\u7ed8\u5236\u6240\u9700\u7684\u6846\u67b6\uff0c\u5305\u62ec\u6267\u884c\u52a8\u753b\u3001\u54cd\u5e94\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\u4ee5\u53ca\u8bbe\u7f6e\u83dc\u5355\u3002\u6e90\u4ee3\u7801\u5305\u542b\u4e86\u544a\u8bc9\u60a8\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u6ce8\u91ca\u3002</p> <p>\u5728Windows\u4e0a\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u5b89\u88c5WSL\uff0c\u5373Windows\u5b50\u7cfb\u7edfLinux\uff08https://docs.microsoft.com/zh-cn/windows/wsl/\uff09\uff0c\u6839\u636e\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u95f4\uff0c\u5b83\u5e94\u8be5\u5f88\u5feb\u5c06\u5305\u62ec\u4f7f\u7528\u56fe\u5f62\u754c\u9762\u7a0b\u5e8f\u7684\u529f\u80fd\u3002WSL\u662f\u5fae\u8f6f\u7684\u5b98\u65b9\u7cfb\u7edf\uff0c\u5141\u8bb8\u60a8\u5728Windows\u5185\u90e8\u5b89\u88c5Linux\u7684\u4e00\u4e2a\u7248\u672c\u3002\u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u8f83\u65e7\u7684\u5f00\u6e90\u9879\u76eeCygwin\uff08https://cygwin.com/\uff09\u3002\uff08\u4f7f\u7528Cygwin\uff0c\u6211\u5b89\u88c5\u4e86gcc-core\u3001xinit\u3001xorg-server\u3001libglut-devel\u3001libGLU-devel\u548clibGL-devel\u7b49\u8f6f\u4ef6\u5305\u3002\u4f7f\u7528startxwin\u547d\u4ee4\u542f\u52a8X11\u7a97\u53e3\u7cfb\u7edf\u540e\uff0c\u6211\u80fd\u591f\u5728Cygwin\u7ec8\u7aef\u7a97\u53e3\u4e2d\u4f7f\u7528\u4e0e\u5728Linux\u4e2d\u76f8\u540c\u7684\u547d\u4ee4\u7f16\u8bd1\u548c\u8fd0\u884c\u6765\u81ea\u672c\u6559\u6750\u7684OpenGL\u793a\u4f8b\u3002\uff09</p> <p>\u5bf9\u4e8eMacOS\uff0c\u60c5\u51b5\u66f4\u4e3a\u590d\u6742\uff0c\u56e0\u4e3aOpenGL\u5df2\u88ab\u82f9\u679c\u81ea\u5bb6\u7684\u4e13\u6709API Metal\u6240\u53d6\u4ee3\u3002\u7136\u800c\uff0c\u6839\u636e\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u95f4\uff0c\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u82f9\u679c\u7684XCode\u5f00\u53d1\u5de5\u5177\u5728MacOS\u4e0a\u4f7f\u7528OpenGL\u3002\u672c\u6559\u6750\u7684\u793a\u4f8b\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\uff0c\u4ee5\u4fbf\u4e0eXCode\u5de5\u5177\u4e00\u8d77\u4f7f\u7528\uff0c\u56e0\u4e3a\u5728Mac\u4e0a\uff0cOpenGL\u548cGLUT\u5e93\u7684\u52a0\u8f7d\u65b9\u5f0f\u4e0e\u5728Linux\u4e0a\u4e0d\u540c\u3002\u7528\u4e8e\u5728MacOS\u4e0a\u4f7f\u7528\u7684\u4fee\u6539\u8fc7\u7684\u7a0b\u5e8f\u53ef\u4ee5\u5728\u6e90\u6587\u4ef6\u5939glut/glut-mac\u4e2d\u627e\u5230\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8be5\u6587\u4ef6\u5939\u4e2d\u7684README.txt\u6587\u4ef6\u3002</p> <p>GLUT\u5e93\u4f7f\u5f97\u5728C\u8bed\u8a00\u4e2d\u7f16\u5199\u57fa\u672c\u7684OpenGL\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u7b80\u5355\u3002GLUT\u4f7f\u7528\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u3002\u60a8\u9700\u8981\u7f16\u5199\u5904\u7406\u4e8b\u4ef6\u7684\u51fd\u6570\uff0c\u4ee5\u5904\u7406\u663e\u793a\u9700\u8981\u91cd\u65b0\u7ed8\u5236\u65f6\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6216\u8005\u5f53\u7528\u6237\u70b9\u51fb\u9f20\u6807\u6216\u6309\u952e\u76d8\u4e0a\u7684\u952e\u65f6\u53d1\u751f\u7684\u4e8b\u4ef6\u3002</p> <p>\u8981\u4f7f\u7528GLUT\uff0c\u60a8\u9700\u8981\u5728\u4efb\u4f55\u4f7f\u7528\u5b83\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u5f00\u5934\u5305\u542b\u5934\u6587\u4ef6glut.h\uff08\u6216freeglut.h\uff09\uff0c\u4ee5\u53ca\u901a\u7528\u7684OpenGL\u5934\u6587\u4ef6gl.h\u3002\u5934\u6587\u4ef6\u5e94\u5b89\u88c5\u5728\u6807\u51c6\u4f4d\u7f6e\uff0c\u5373\u540d\u4e3aGL\u7684\u6587\u4ef6\u5939\u4e2d\u3002\uff08\u4f46\u8bf7\u6ce8\u610f\uff0c\u6587\u4ef6\u5939\u540d\u79f0\u53ef\u80fd\u4e0d\u540c\uff0c\u6216\u8005\u5b8c\u5168\u7701\u7565\u3002\uff09\u56e0\u6b64\uff0c\u7a0b\u5e8f\u901a\u5e38\u4ee5\u4ee5\u4e0b\u65b9\u5f0f\u5f00\u59cb\uff1a</p> <pre><code>#include &lt;GL/gl.h&gt;\n#include &lt;GL/glut.h&gt;\n</code></pre> <p>\u5728\u6211\u7684\u8ba1\u7b97\u673a\u4e0a\uff0c\u5199 <code>#include &lt;GL/glut.h&gt;</code> \u5b9e\u9645\u4e0a\u5305\u542b\u4e86\u5bf9\u5e94\u4e8eGLUT\u7684FreeGLUT\u7684\u5b50\u96c6\u3002\u8981\u8bbf\u95ee\u6240\u6709FreeGLUT\uff0c\u6211\u4f1a\u66ff\u6362\u4e3a <code>#include &lt;GL/freeglut.h&gt;</code>\u3002\u6839\u636e\u7a0b\u5e8f\u4f7f\u7528\u7684\u529f\u80fd\uff0c\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u5176\u4ed6\u5934\u6587\u4ef6\uff0c\u5982 <code>#include &lt;GL/glu.h&gt;</code> \u548c <code>#include &lt;math.h&gt;</code>\u3002</p> <p>\u7a0b\u5e8f\u7684<code>main()</code>\u51fd\u6570\u5fc5\u987b\u5305\u542b\u4e00\u4e9b\u4ee3\u7801\u6765\u521d\u59cb\u5316GLUT\uff0c\u521b\u5efa\u548c\u6253\u5f00\u4e00\u4e2a\u7a97\u53e3\uff0c\u5e76\u901a\u8fc7\u6ce8\u518c\u5e94\u8be5\u5728\u5404\u79cd\u4e8b\u4ef6\u53d1\u751f\u65f6\u8c03\u7528\u7684\u51fd\u6570\u6765\u8bbe\u7f6e\u4e8b\u4ef6\u5904\u7406\u3002\u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u5b83\u5fc5\u987b\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u8fd0\u884cGLUT\u4e8b\u4ef6\u5904\u7406\u5faa\u73af\u3002\u8be5\u51fd\u6570\u7b49\u5f85\u4e8b\u4ef6\u5e76\u901a\u8fc7\u8c03\u7528\u5df2\u6ce8\u518c\u7684\u51fd\u6570\u6765\u5904\u7406\u5b83\u4eec\u3002\u4e8b\u4ef6\u5faa\u73af\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c\u8fd9\u53d1\u751f\u5728\u7528\u6237\u5173\u95ed\u7a97\u53e3\u6216\u7a0b\u5e8f\u8c03\u7528\u6807\u51c6\u7684<code>exit()</code>\u51fd\u6570\u65f6\u3002</p> <p>\u4e3a\u4e86\u8bbe\u7f6e\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\uff0cGLUT\u5229\u7528\u4e86\u5728C\u8bed\u8a00\u4e2d\u5c06\u51fd\u6570\u540d\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u4e8b\u5b9e\u3002\u4f8b\u5982\uff0c\u5982\u679c<code>display()</code>\u662f\u5e94\u8be5\u88ab\u8c03\u7528\u6765\u7ed8\u5236\u7a97\u53e3\u5185\u5bb9\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u4f7f\u7528\u547d\u4ee4</p> <pre><code>glutDisplayFunc(display);\n</code></pre> <p>\u5c06\u6b64\u51fd\u6570\u5b89\u88c5\u4e3a\u663e\u793a\u4e8b\u4ef6\u7684\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002\u663e\u793a\u4e8b\u4ef6\u53d1\u751f\u5728\u9700\u8981\u91cd\u65b0\u7ed8\u5236\u7a97\u53e3\u7684\u5185\u5bb9\u65f6\uff0c\u5305\u62ec\u7a97\u53e3\u9996\u6b21\u6253\u5f00\u65f6\u3002\u8bf7\u6ce8\u610f\uff0cdisplay \u5fc5\u987b\u4e8b\u5148\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u51fd\u6570\uff1a</p> <pre><code>void display() {\n.\n.  // OpenGL\u7ed8\u56fe\u4ee3\u7801\u5728\u8fd9\u91cc\uff01\n.\n}\n</code></pre> <p>\u8bf7\u8bb0\u4f4f\uff0c\u5b83\u5e76\u4e0d\u662f\u51fd\u6570\u7684\u540d\u79f0\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2aOpenGL\u663e\u793a\u51fd\u6570\u3002\u5b83\u5fc5\u987b\u901a\u8fc7\u8c03\u7528glutDisplayFunc(display)\u8bbe\u7f6e\u4e3a\u663e\u793a\u51fd\u6570\u3002\u6240\u6709\u7684GLUT\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u90fd\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5de5\u4f5c\uff08\u9664\u4e86\u5176\u4e2d\u8bb8\u591a\u786e\u5b9e\u9700\u8981\u53c2\u6570\uff09\u3002</p> <p>\u6709\u8bb8\u591a\u53ef\u80fd\u7684\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\uff0c\u5728\u8fd9\u91cc\u6211\u53ea\u6db5\u76d6\u4e86\u5176\u4e2d\u7684\u4e00\u4e9b\u3002\u8ba9\u6211\u4eec\u76f4\u63a5\u8df3\u5165\uff0c\u770b\u4e00\u4e2a\u4f7f\u7528\u5927\u591a\u6570\u5e38\u89c1\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u7684GLUT\u7a0b\u5e8f\u53ef\u80fd\u7684<code>main()</code>\u51fd\u6570\u4f8b\u7a0b\uff1a</p> <pre><code>int main(int argc, char** argv) {\n    glutInit(&amp;argc, argv);  // \u5fc5\u8981\u7684\u521d\u59cb\u5316\uff01\n    glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);\n    glutInitWindowSize(500,500);        // \u663e\u793a\u533a\u57df\u7684\u5927\u5c0f\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\n    glutInitWindowPosition(100,100);    // \u5c4f\u5e55\u5750\u6807\u4e2d\u7684\u4f4d\u7f6e\n    glutCreateWindow(\"OpenGL\u7a0b\u5e8f\"); // \u53c2\u6570\u662f\u7a97\u53e3\u6807\u9898  \n\n    glutDisplayFunc(display);       // \u5f53\u7a97\u53e3\u9700\u8981\u91cd\u65b0\u7ed8\u5236\u65f6\u8c03\u7528\n    glutReshapeFunc(reshape);       // \u5f53\u7a97\u53e3\u5927\u5c0f\u53d8\u5316\u65f6\u8c03\u7528\n    glutKeyboardFunc(keyFunc);      // \u5f53\u7528\u6237\u952e\u5165\u5b57\u7b26\u65f6\u8c03\u7528\n    glutSpecialFunc(specialKeyFunc);// \u5f53\u7528\u6237\u6309\u4e0b\u7279\u6b8a\u952e\u65f6\u8c03\u7528\n    glutMouseFunc(mouseFunc);       // \u9f20\u6807\u6309\u4e0b\u548c\u62ac\u8d77\u4e8b\u4ef6\u8c03\u7528\n    glutMotionFunc(mouseDragFunc);  // \u5f53\u9f20\u6807\u62d6\u52a8\u65f6\u8c03\u7528\n    glutIdleFunc(idleFun);          // \u5f53\u6ca1\u6709\u5176\u4ed6\u4e8b\u4ef6\u65f6\u8c03\u7528\n\n    glutMainLoop(); // \u8fd0\u884c\u4e8b\u4ef6\u5faa\u73af\uff01\u8fd9\u4e2a\u51fd\u6570\u6c38\u8fdc\u4e0d\u4f1a\u8fd4\u56de\u3002\n    return 0;  // \uff08\u8fd9\u4e00\u884c\u5b9e\u9645\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c\u3002\uff09\n}\n</code></pre> <p>\u524d\u4e94\u884c\u8fdb\u884c\u4e86\u4e00\u4e9b\u5fc5\u8981\u7684\u521d\u59cb\u5316\uff0c\u63a5\u4e0b\u6765\u7684\u4e03\u884c\u5b89\u88c5\u4e86\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u800c\u8c03\u7528glutMainLoop()\u5219\u8fd0\u884c\u4e86GLUT\u4e8b\u4ef6\u5faa\u73af\u3002\u6211\u5c06\u8ba8\u8bba\u6b64\u5904\u4f7f\u7528\u7684\u6240\u6709\u51fd\u6570\u3002\u7b2c\u4e00\u4e2aGLUT\u51fd\u6570\u8c03\u7528\u5fc5\u987b\u662fglutInit\uff0c\u53c2\u6570\u5982\u6240\u793a\u3002\uff08\u8bf7\u6ce8\u610f\uff0cargc\u548cargv\u8868\u793a\u7a0b\u5e8f\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9glutInit\u5141\u8bb8\u5b83\u5904\u7406GLUT\u8bc6\u522b\u7684\u67d0\u4e9b\u547d\u4ee4\u884c\u53c2\u6570\u3002\u6211\u5728\u8fd9\u91cc\u4e0d\u8ba8\u8bba\u8fd9\u4e9b\u53c2\u6570\u3002\uff09\u51fd\u6570glutInitWindowSize\u548cglutInitWindowPosition\u5206\u522b\u505a\u4e86\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\uff1b\u5927\u5c0f\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7ed9\u51fa\uff0c\u7a97\u53e3\u4f4d\u7f6e\u4ee5\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u7684\u50cf\u7d20\u5750\u6807\u8868\u793a\uff0c\u5de6\u4e0a\u89d2\u4e3a(0,0)\u3002\u51fd\u6570glutCreateWindow\u521b\u5efa\u7a97\u53e3\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5728\u8c03\u7528glutMainLoop\u4e4b\u524d\uff0c\u8be5\u7a97\u53e3\u4e2d\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u4e8b\u60c5\u3002\u901a\u5e38\uff0c\u5728main()\u4e2d\u8c03\u7528\u4e00\u4e2a\u989d\u5916\u7684\u7528\u6237\u5b9a\u4e49\u51fd\u6570\u6765\u8fdb\u884c\u6240\u9700\u7684\u5168\u5c40\u53d8\u91cf\u548cOpenGL\u72b6\u6001\u7684\u521d\u59cb\u5316\u3002OpenGL\u521d\u59cb\u5316\u53ef\u4ee5\u5728\u8c03\u7528glutCreateWindow\u4e4b\u540e\u548c\u8c03\u7528glutMainLoop\u4e4b\u524d\u8fdb\u884c\u3002\u8f6c\u5411main()\u4e2d\u4f7f\u7528\u7684\u5176\u4ed6\u51fd\u6570\uff0c</p> <p><code>glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH)</code> \u2014 \u5fc5\u987b\u8c03\u7528\u4ee5\u5b9a\u4e49OpenGL\u7ed8\u56fe\u4e0a\u4e0b\u6587\u7684\u4e00\u4e9b\u7279\u5f81\u3002\u53c2\u6570\u6307\u5b9a\u60a8\u5e0c\u671bOpenGL\u4e0a\u4e0b\u6587\u5177\u6709\u7684\u7279\u5f81\u3002\u8fd9\u4e9b\u7279\u5f81\u7531\u5728\u53c2\u6570\u4e2dOR\u5728\u4e00\u8d77\u7684\u5e38\u91cf\u8868\u793a\u3002GLUT_DEPTH\u8868\u793a\u5e94\u521b\u5efa\u6df1\u5ea6\u7f13\u51b2\u533a\uff1b\u5982\u679c\u6ca1\u6709\u5b83\uff0c\u6df1\u5ea6\u6d4b\u8bd5\u5c06\u65e0\u6cd5\u5de5\u4f5c\u3002\u5982\u679c\u60a8\u6b63\u5728\u8fdb\u884c2D\u56fe\u5f62\u7ed8\u5236\uff0c\u60a8\u4e0d\u4f1a\u5305\u542b\u6b64\u9009\u9879\u3002GLUT_DOUBLE\u8bf7\u6c42\u53cc\u7f13\u51b2\uff0c\u8fd9\u610f\u5473\u7740\u7ed8\u56fe\u5b9e\u9645\u4e0a\u662f\u5728\u5c4f\u5e55\u5916\u8fdb\u884c\u7684\uff0c\u5e76\u4e14\u5fc5\u987b\u5c06\u5c4f\u5e55\u5916\u7684\u526f\u672c\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u624d\u80fd\u770b\u5230\u3002\u590d\u5236\u7531<code>glutSwapBuffers()</code>\u6267\u884c\uff0c\u5728\u663e\u793a\u51fd\u6570\u7684\u672b\u5c3e\u5fc5\u987b\u8c03\u7528\u5b83\u3002\uff08\u60a8\u53ef\u4ee5\u4f7f\u7528GLUT_SINGLE\u4ee3\u66ffGLUT_DOUBLE\u4ee5\u83b7\u5f97\u5355\u7f13\u51b2\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5fc5\u987b\u5728\u663e\u793a\u51fd\u6570\u7684\u672b\u5c3e\u8c03\u7528glFlush()\u800c\u4e0d\u662f<code>glutSwapBuffers()</code>\u3002\u7136\u800c\uff0c\u672c\u4e66\u4e2d\u7684\u6240\u6709\u793a\u4f8b\u90fd\u4f7f\u7528GLUT_DOUBLE\u3002\uff09</p> <p><code>glutDisplayFunc(display)</code> \u2014 \u663e\u793a\u51fd\u6570\u5e94\u5305\u542b\u80fd\u591f\u5b8c\u5168\u91cd\u7ed8\u573a\u666f\u7684OpenGL\u7ed8\u5236\u4ee3\u7801\u3002\u8fd9\u7c7b\u4f3c\u4e8eJava Swing API\u4e2d\u7684paintComponent()\u3002\u663e\u793a\u51fd\u6570\u53ef\u4ee5\u5177\u6709\u4efb\u4f55\u540d\u79f0\uff0c\u4f46\u5b83\u5fc5\u987b\u58f0\u660e\u4e3a\u65e0\u53c2\u6570\u7684void\u51fd\u6570\uff1avoid display()\u3002</p> <p><code>glutReshapeFunc(reshape)</code> \u2014 \u5f53\u7528\u6237\u6539\u53d8\u7a97\u53e3\u7684\u5927\u5c0f\u65f6\uff0c\u4f1a\u8c03\u7528\u91cd\u5851\u51fd\u6570\u3002\u5b83\u7684\u53c2\u6570\u544a\u8bc9\u4e86\u7ed8\u56fe\u533a\u57df\u7684\u65b0\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff1a</p> <pre><code>void reshape( int width, int height )\n</code></pre> <p>\u4f8b\u5982\uff0c\u5982\u679c\u6295\u5f71\u53ea\u53d6\u51b3\u4e8e\u7a97\u53e3\u5927\u5c0f\uff0c\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528\u6b64\u65b9\u6cd5\u6765\u8bbe\u7f6e\u6295\u5f71\u53d8\u6362\u3002\u4e0d\u9700\u8981\u91cd\u5851\u51fd\u6570\uff0c\u4f46\u5982\u679c\u63d0\u4f9b\u4e86\u4e00\u4e2a\uff0c\u5b83\u5e94\u8be5\u59cb\u7ec8\u8bbe\u7f6eOpenGL\u89c6\u53e3\uff0c\u8fd9\u662f\u7528\u4e8e\u7ed8\u5236\u7684\u7a97\u53e3\u7684\u4e00\u90e8\u5206\u3002\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a</p> <pre><code>glViewport(0,0,width,height);\n</code></pre> <p>\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u91cd\u5851\u51fd\u6570\uff0c\u5219\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u89c6\u53e3\u3002</p> <p><code>glutKeyboardFunc(keyFunc)</code> \u2014 \u952e\u76d8\u51fd\u6570\u5728\u7528\u6237\u952e\u5165\u5b57\u7b26\uff08\u5982'b'\u3001'A'\u6216\u7a7a\u683c\uff09\u65f6\u8c03\u7528\u3002\u5f53\u6309\u4e0b\u4e0d\u4ea7\u751f\u5b57\u7b26\u7684\u7279\u6b8a\u952e\uff08\u5982\u7bad\u5934\u952e\uff09\u65f6\uff0c\u4e0d\u4f1a\u8c03\u7528\u952e\u76d8\u51fd\u6570\u3002\u952e\u76d8\u51fd\u6570\u6709\u4e00\u4e2aunsigned char\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8868\u793a\u952e\u5165\u7684\u5b57\u7b26\u3002\u5b83\u8fd8\u6709\u4e24\u4e2aint\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8868\u793a\u6309\u4e0b\u952e\u65f6\u9f20\u6807\u7684\u4f4d\u7f6e\uff0c\u4ee5\u50cf\u7d20\u5750\u6807\u8868\u793a\uff0c\u5de6\u4e0a\u89d2\u4e3a\u7ed8\u56fe\u533a\u57df\u7684(0,0)\u3002\u56e0\u6b64\uff0c\u952e\u51fd\u6570\u7684\u5b9a\u4e49\u5fc5\u987b\u5177\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>void keyFunc( unsigned char ch, int x, int y )\n</code></pre> <p>\u6bcf\u5f53\u60a8\u5bf9\u7a0b\u5e8f\u7684\u6570\u636e\u8fdb\u884c\u66f4\u6539\u9700\u8981\u91cd\u65b0\u7ed8\u5236\u65f6\uff0c\u60a8\u5e94\u8be5\u8c03\u7528glutPostRedisplay()\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u5728Java\u4e2d\u8c03\u7528repaint()\u3002\u6700\u597d\u8c03\u7528glutPostRedisplay()\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528\u663e\u793a\u51fd\u6570\u3002 \uff08\u6211\u8fd8\u6ce8\u610f\u5230\uff0c\u53ef\u4ee5\u5728\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u4e2d\u76f4\u63a5\u8c03\u7528OpenGL\u7ed8\u56fe\u547d\u4ee4\uff0c\u4f46\u8fd9\u53ef\u80fd\u53ea\u6709\u5728\u4f7f\u7528\u5355\u7f13\u51b2\u65f6\u624d\u6709\u610f\u4e49\uff1b\u5982\u679c\u8fd9\u6837\u505a\uff0c\u8c03\u7528glFlush()\u786e\u4fdd\u7ed8\u56fe\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002\uff09</p> <p><code>glutSpecialFunc(specialKeyFunc)</code> \u2014 \u5f53\u7528\u6237\u6309\u4e0b\u67d0\u4e9b\u7279\u6b8a\u952e\uff0c\u5982\u7bad\u5934\u952e\u6216Home\u952e\u65f6\uff0c\u4f1a\u8c03\u7528\u201c\u7279\u6b8a\u201d\u51fd\u6570\u3002\u53c2\u6570\u662f\u6309\u4e0b\u7684\u952e\u7684\u6574\u6570\u4ee3\u7801\uff0c\u4ee5\u53ca\u6309\u4e0b\u952e\u65f6\u7684\u9f20\u6807\u4f4d\u7f6e\uff1a</p> <pre><code>void specialKeyFunc( int key, int x, int y )\n</code></pre> <p>GLUT\u6709\u5e38\u91cf\u6765\u8868\u793a\u53ef\u80fd\u7684\u952e\u4ee3\u7801\uff0c\u5305\u62ecGLUT_KEY_LEFT\u3001GLUT_KEY_RIGHT\u3001GLUT_KEY_UP\u548cGLUT_KEY_DOWN\u8868\u793a\u7bad\u5934\u952e\uff0c\u4ee5\u53caGLUT_KEY_HOME\u8868\u793aHome\u952e\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\u662f\u5426(key == GLUT_KEY_LEFT)\u6765\u68c0\u67e5\u7528\u6237\u662f\u5426\u6309\u4e0b\u4e86\u5de6\u7bad\u5934\u952e\u3002</p> <p><code>glutMouseFunc(mouseFunc)</code> \u2014 \u5f53\u7528\u6237\u6309\u4e0b\u9f20\u6807\u6309\u94ae\u548c\u91ca\u653e\u9f20\u6807\u6309\u94ae\u65f6\uff0c\u90fd\u4f1a\u8c03\u7528\u9f20\u6807\u51fd\u6570\uff0c\u53c2\u6570\u544a\u8bc9\u53d1\u751f\u4e86\u54ea\u79cd\u60c5\u51b5\u3002\u8be5\u51fd\u6570\u901a\u5e38\u4f1a\u50cf\u8fd9\u6837\uff1a</p> <pre><code>void mouseFunc(int button, int buttonState, int x, int y) {\n    if (buttonState == GLUT_DOWN) {\n        // \u5904\u7406\u9f20\u6807\u6309\u4e0b\u4e8b\u4ef6\n    }\n    else { // buttonState is GLUT_UP\n        // \u5904\u7406\u9f20\u6807\u91ca\u653e\u4e8b\u4ef6\n    }\n}\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u544a\u8bc9\u4e86\u662f\u54ea\u4e2a\u9f20\u6807\u6309\u94ae\u88ab\u6309\u4e0b\u6216\u91ca\u653e\uff1b\u5b83\u7684\u503c\u4e3a\u5e38\u91cfGLUT_LEFT_BUTTON\u8868\u793a\u5de6\u952e\uff0cGLUT_MIDDLE_BUTTON\u8868\u793a\u4e2d\u952e\uff0cGLUT_RIGHT_BUTTON\u8868\u793a\u53f3\u952e\u3002\u53e6\u5916\u4e24\u4e2a\u53c2\u6570\u544a\u8bc9\u4e86\u9f20\u6807\u7684\u4f4d\u7f6e\u3002\u9f20\u6807\u4f4d\u7f6e\u4ee5\u50cf\u7d20\u5750\u6807\u7ed9\u51fa\uff0c\u5de6\u4e0a\u89d2\u4e3a(0,0)\uff0cy\u5750\u6807\u4ece\u4e0a\u5230\u4e0b\u589e\u52a0\u3002</p> <p><code>glutMotionFunc(mouseDragFunc)</code> \u2014 \u5f53\u7528\u6237\u62d6\u52a8\u9f20\u6807\u65f6\u8c03\u7528\u8fd0\u52a8\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u9f20\u6807\u6309\u94ae\u6309\u4e0b\u65f6\u3002\u5728\u7528\u6237\u5728OpenGL\u7a97\u53e3\u4e2d\u6309\u4e0b\u9f20\u6807\u4e4b\u540e\uff0c\u5373\u4f7f\u9f20\u6807\u79fb\u51fa\u7a97\u53e3\uff0c\u6b64\u51fd\u6570\u4e5f\u5c06\u7ee7\u7eed\u88ab\u8c03\u7528\uff0c\u5e76\u4e14\u9f20\u6807\u91ca\u653e\u4e8b\u4ef6\u4e5f\u5c06\u53d1\u9001\u5230\u540c\u4e00\u7a97\u53e3\u3002\u8be5\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\u6765\u6307\u5b9a\u65b0\u7684\u9f20\u6807\u4f4d\u7f6e\uff1a</p> <pre><code>void mouseDragFunc(int x, int y)\n</code></pre> <p><code>glutIdleFunc(idleFunction)</code> \u2014 \u6bcf\u5f53\u6ca1\u6709\u4e8b\u4ef6\u7b49\u5f85\u5904\u7406\u65f6\uff0cGLUT\u4e8b\u4ef6\u5faa\u73af\u5c06\u8c03\u7528\u7a7a\u95f2\u51fd\u6570\u3002\u7a7a\u95f2\u51fd\u6570\u6ca1\u6709\u53c2\u6570\u3002\u5b83\u5c3d\u53ef\u80fd\u9891\u7e41\u5730\u88ab\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u4ee5\u5468\u671f\u6027\u95f4\u9694\u3002GLUT\u8fd8\u6709\u4e00\u4e2a\u5b9a\u65f6\u5668\u51fd\u6570\uff0c\u5b83\u5b89\u6392\u5728\u6307\u5b9a\u5ef6\u8fdf\u540e\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\u4e00\u6b21\u3002\u8981\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff0c\u8c03\u7528</p> <pre><code>glutTimerFunc(delayInMilliseconds, timerFunction, userSelectedID)\n</code></pre> <p>\u5e76\u5c06timerFunction\u5b9a\u4e49\u4e3a</p> <pre><code>void timerFunction(int timerID) { ...\n</code></pre> <p>\u5f53\u8c03\u7528timerFunction\u65f6\uff0c\u4f20\u9012\u7ed9\u5b83\u7684\u53c2\u6570\u5c06\u662f\u4e0eglutTimerFunc\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u76f8\u540c\u7684\u6574\u6570\u3002\u5982\u679c\u60a8\u60f3\u8981\u4f7f\u7528glutTimerFunc\u8fdb\u884c\u52a8\u753b\uff0c\u5219timerFunction\u5e94\u8be5\u4ee5\u53e6\u4e00\u4e2a\u5bf9glutTimerFunc\u7684\u8c03\u7528\u7ed3\u675f\u3002</p> <p>\u4e00\u4e2aGLUT\u7a97\u53e3\u6ca1\u6709\u83dc\u5355\u680f\uff0c\u4f46\u53ef\u4ee5\u5411\u7a97\u53e3\u6dfb\u52a0\u4e00\u4e2a\u9690\u85cf\u7684\u5f39\u51fa\u83dc\u5355\u3002\u8be5\u83dc\u5355\u5c06\u5728\u9f20\u6807\u5355\u51fb\u663e\u793a\u533a\u57df\u65f6\u51fa\u73b0\u3002\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u662f\u7531\u5de6\u3001\u4e2d\u8fd8\u662f\u53f3\u9f20\u6807\u6309\u94ae\u89e6\u53d1\u83dc\u5355\u3002</p> <p>\u4f7f\u7528\u51fd\u6570glutCreateMenu(menuHandler)\u521b\u5efa\u83dc\u5355\uff0c\u5176\u4e2d\u53c2\u6570\u662f\u7528\u6237\u4ece\u83dc\u5355\u4e2d\u9009\u62e9\u547d\u4ee4\u65f6\u5c06\u8c03\u7528\u7684\u51fd\u6570\u7684\u540d\u79f0\u3002\u8be5\u51fd\u6570\u5fc5\u987b\u4f7f\u7528int\u7c7b\u578b\u7684\u53c2\u6570\u5b9a\u4e49\uff0c\u8be5\u53c2\u6570\u6807\u8bc6\u7528\u6237\u9009\u62e9\u7684\u547d\u4ee4\uff1a</p> <pre><code>void menuHandler( int commandID ) { ...\n</code></pre> <p>\u83dc\u5355\u521b\u5efa\u540e\uff0c\u901a\u8fc7\u8c03\u7528\u51fd\u6570glutAddMenuEntry(name,commandID)\u5411\u83dc\u5355\u6dfb\u52a0\u547d\u4ee4\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u83dc\u5355\u4e2d\u663e\u793a\u7684\u5b57\u7b26\u4e32\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2aint\uff0c\u8868\u793a\u547d\u4ee4\u7684\u6807\u8bc6\u7b26\uff1b\u5f53\u7528\u6237\u4ece\u83dc\u5355\u4e2d\u9009\u62e9\u547d\u4ee4\u65f6\uff0c\u8be5\u6574\u6570\u5c06\u4f20\u9012\u7ed9\u83dc\u5355\u5904\u7406\u51fd\u6570\u3002</p> <p>\u6700\u540e\uff0c\u51fd\u6570glutAttachMenu(button)\u5c06\u83dc\u5355\u9644\u52a0\u5230\u7a97\u53e3\u3002\u53c2\u6570\u6307\u5b9a\u54ea\u4e2a\u9f20\u6807\u6309\u94ae\u5c06\u89e6\u53d1\u83dc\u5355\u3002\u53ef\u80fd\u7684\u503c\u5305\u62ecGLUT_LEFT_BUTTON\u3001GLUT_MIDDLE_BUTTON\u548cGLUT_RIGHT_BUTTON\u3002\u636e\u6211\u6240\u77e5\uff0c\u5982\u679c\u4f7f\u7528\u9f20\u6807\u5355\u51fb\u89e6\u53d1\u5f39\u51fa\u83dc\u5355\uff0c\u5219\u76f8\u540c\u7684\u9f20\u6807\u5355\u51fb\u4e0d\u4f1a\u4ea7\u751f\u5bf9\u9f20\u6807\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\u7684\u8c03\u7528\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u8c03\u7528glutAddMenuEntry\u4e0d\u63d0\u53ca\u83dc\u5355\uff0c\u8c03\u7528glutAttachMenu\u4e5f\u4e0d\u63d0\u53ca\u83dc\u5355\u6216\u7a97\u53e3\u3002\u5f53\u8c03\u7528glutCreateMenu\u65f6\uff0c\u521b\u5efa\u7684\u83dc\u5355\u6210\u4e3aGLUT\u72b6\u6001\u4e2d\u7684\u201c\u5f53\u524d\u83dc\u5355\u201d\u3002\u8c03\u7528glutAddMenuEntry\u65f6\uff0c\u5b83\u4f1a\u5411\u5f53\u524d\u83dc\u5355\u6dfb\u52a0\u4e00\u4e2a\u547d\u4ee4\u3002\u5f53\u8c03\u7528glutAttachMenu\u65f6\uff0c\u5b83\u5c06\u5f53\u524d\u83dc\u5355\u9644\u52a0\u5230\u5f53\u524d\u7a97\u53e3\uff0c\u8fd9\u662f\u901a\u8fc7\u8c03\u7528glutCreateWindow\u8bbe\u7f6e\u7684\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4e0eOpenGL\u201c\u72b6\u6001\u673a\u201d\u54f2\u5b66\u4e00\u81f4\uff0c\u5176\u4e2d\u51fd\u6570\u901a\u8fc7\u4fee\u6539\u5f53\u524d\u72b6\u6001\u6765\u6267\u884c\u64cd\u4f5c\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8ba9\u7528\u6237\u8bbe\u7f6e\u663e\u793a\u7684\u80cc\u666f\u989c\u8272\u3002\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u6765\u6267\u884c\u6211\u4eec\u5c06\u6dfb\u52a0\u5230\u83dc\u5355\u4e2d\u7684\u547d\u4ee4\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49</p> <pre><code>void doMenu( int commandID ) {\n    if ( commandID == 1)\n        glClearColor(0,0,0,1);  // \u9ed1\u8272\n    else if ( commandID == 2)\n        glClearColor(1,1,1,1);  // \u767d\u8272\n    else if ( commandID == 3)\n        glClearColor(0,0,0.5,1);  // \u6df1\u84dd\u8272\n    else if (commandID == 10)\n        exit(0);  // \u7ed3\u675f\u7a0b\u5e8f\n    glutPostRedisplay();  // \u4f7f\u7528\u65b0\u7684\u80cc\u666f\u989c\u8272\u91cd\u65b0\u7ed8\u5236\u663e\u793a\u533a\u57df\n}\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u6709\u53e6\u4e00\u4e2a\u51fd\u6570\u6765\u521b\u5efa\u83dc\u5355\u3002\u6b64\u51fd\u6570\u5c06\u5728main()\u4e2d\u8c03\u7528\uff0c\u5728\u8c03\u7528glutCreateWindow\u540e\u8c03\u7528\uff1a</p> <pre><code>void createMenu() {\n    glutCreateMenu( doMenu );  // \u5bf9\u83dc\u5355\u547d\u4ee4\u8c03\u7528doMenu()\u3002\n    glutAddMenuEntry( \"\u9ed1\u8272\u80cc\u666f\", 1 );\n    glutAddMenuEntry( \"\u767d\u8272\u80cc\u666f\", 2 );\n    glutAddMenuEntry( \"\u84dd\u8272\u80cc\u666f\", 3 );\n    glutAddMenuEntry( \"\u9000\u51fa\", 10 );\n    glutAttachMenu(GLUT_RIGHT_BUTTON); // \u53f3\u952e\u5355\u51fb\u663e\u793a\u83dc\u5355\u3002\n}\n</code></pre> <p>\u83dc\u5355\u4e2d\u8fd8\u53ef\u4ee5\u6709\u5b50\u83dc\u5355\u3002\u6211\u4e0d\u4f1a\u5728\u6b64\u5904\u8ba8\u8bba\u8be5\u8fc7\u7a0b\uff0c\u4f46\u60a8\u53ef\u4ee5\u67e5\u770b\u6837\u4f8b\u7a0b\u5e8fglut/ifs-polyhedron-viewer.c\uff0c\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u5b50\u83dc\u5355\u7684\u793a\u4f8b\u3002</p> <p>\u9664\u4e86\u7a97\u53e3\u548c\u4e8b\u4ef6\u5904\u7406\u4e4b\u5916\uff0cGLUT\u8fd8\u5305\u62ec\u4e00\u4e9b\u7528\u4e8e\u7ed8\u5236\u57fa\u672c\u4e09\u7ef4\u5f62\u72b6\u7684\u51fd\u6570\uff0c\u4f8b\u5982\u7403\u4f53\u3001\u5706\u9525\u4f53\u548c\u5e38\u89c4\u591a\u9762\u4f53\u3002\u6bcf\u79cd\u5f62\u72b6\u90fd\u6709\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u662f\u201c\u5b9e\u5fc3\u201d\u7248\u672c\uff0c\u7ed8\u5236\u5b9e\u5fc3\u5bf9\u8c61\uff0c\u53e6\u4e00\u4e2a\u662f\u7ebf\u6846\u7248\u672c\uff0c\u7ed8\u5236\u770b\u8d77\u6765\u50cf\u662f\u7531\u7ebf\u7f51\u6784\u6210\u7684\u4e1c\u897f\u3002\uff08\u7ebf\u6846\u662f\u901a\u8fc7\u4ec5\u7ed8\u5236\u6784\u6210\u5bf9\u8c61\u7684\u591a\u8fb9\u5f62\u7684\u8f6e\u5ed3\u6765\u751f\u6210\u7684\u3002\uff09\u4f8b\u5982\uff0c\u51fd\u6570</p> <pre><code>void glutSolidSphere(double radius, int slices, int stacks)\n</code></pre> <p>\u7ed8\u5236\u5177\u6709\u7ed9\u5b9a\u534a\u5f84\u7684\u5b9e\u5fc3\u7403\u4f53\uff0c\u5176\u4e2d\u5fc3\u4f4d\u4e8e\u539f\u70b9\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u53ea\u662f\u7403\u4f53\u7684\u8fd1\u4f3c\u8868\u793a\uff0c\u7531\u591a\u8fb9\u5f62\u7ec4\u6210\u3002\u4e3a\u4e86\u8fdb\u884c\u8fd1\u4f3c\uff0c\u7403\u4f53\u88ab\u7ecf\u7ebf\u5206\u9694\uff0c\u5c31\u50cf\u6a58\u5b50\u7684\u5207\u7247\u4e00\u6837\uff0c\u4ee5\u53ca\u7eac\u7ebf\uff0c\u5c31\u50cf\u4e00\u53e0\u5706\u76d8\u4e00\u6837\u3002\u53c2\u6570slices\u548cstacks\u6307\u5b9a\u8981\u4f7f\u7528\u7684\u5b50\u5206\u5272\u6570\u91cf\u3002\u5178\u578b\u503c\u4e3a32\u548c16\uff0c\u4f46\u4e3a\u4e86\u5f97\u5230\u7403\u4f53\u7684\u826f\u597d\u8fd1\u4f3c\uff0c\u60a8\u9700\u8981\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u5c4f\u5e55\u4e0a\u7403\u4f53\u7684\u5927\u5c0f\u3002\u51fd\u6570glutWireframeSphere\u5177\u6709\u76f8\u540c\u7684\u53c2\u6570\uff0c\u4f46\u4ec5\u7ed8\u5236\u7eac\u7ebf\u548c\u7ecf\u7ebf\u3002\u5706\u9525\u4f53\u3001\u5706\u67f1\u4f53\u548c\u5706\u73af\u4f53\uff08\u751c\u751c\u5708\uff09\u7684\u51fd\u6570\u7c7b\u4f3c\uff1a</p> <pre><code>void glutSolidCone(double base, double height,\n                                    int slices, int stacks)\n\nvoid glutSolidTorus(double innerRadius, double outerRadius,\n                                    int slices, int rings)\n\nvoid glutSolidCylinder(double radius, double height,\n                                    int slices, int stacks)\n// \u6ce8\u610f\uff1a\u5706\u67f1\u4f53\u5728FreeGLUT\u548cJava\u4e2d\u90fd\u53ef\u7528\uff0c\u4f46\u5728\u539f\u59cb\u7684GLUT\u5e93\u4e2d\u4e0d\u53ef\u7528\u3002\n</code></pre> <p>\u5bf9\u4e8e\u5706\u73af\u4f53\uff0cinnerRadius\u662f\u751c\u751c\u5708\u5b54\u7684\u5927\u5c0f\u3002\u51fd\u6570</p> <pre><code>void glutSolidCube(double size)\n</code></pre> <p>\u7ed8\u5236\u6307\u5b9a\u5927\u5c0f\u7684\u7acb\u65b9\u4f53\u3002\u8fd8\u6709\u4e00\u4e9b\u6ca1\u6709\u53c2\u6570\u7684\u5176\u4ed6\u5e38\u89c4\u591a\u9762\u4f53\u7684\u51fd\u6570\uff0c\u5b83\u4eec\u4ee5\u4e00\u5b9a\u7684\u56fa\u5b9a\u5927\u5c0f\u7ed8\u5236\u5bf9\u8c61\uff1aglutSolidTetrahedron(), glutSolidOctahedron(), glutSolidDodecahedron(), \u548c glutSolidIcosahedron()\u3002\u8fd8\u6709\u4e00\u4e2aglutSolidTeapot(size)\uff0c\u7ed8\u5236\u4e00\u4e2a\u7ecf\u5e38\u7528\u4f5c\u793a\u4f8b\u7684\u8457\u540d\u5bf9\u8c61\u3002\u8fd9\u5c31\u662f\u8336\u58f6\u7684\u6837\u5b50\uff1a</p> <p></p> <p>\u6240\u6709\u5f62\u72b6\u90fd\u6709\u7ebf\u6846\u7248\u672c\u3002\u4f8b\u5982\uff0cglutWireTeapot(size)\u7ed8\u5236\u4e00\u4e2a\u7ebf\u6846\u8336\u58f6\u3002\u8bf7\u6ce8\u610f\uff0cGLUT\u5f62\u72b6\u5e26\u6709\u7528\u4e8e\u5149\u7167\u8ba1\u7b97\u7684\u6cd5\u5411\u91cf\u3002\u7136\u800c\uff0c\u9664\u4e86\u8336\u58f6\u5916\uff0c\u5b83\u4eec\u4e0d\u5e26\u6709\u7eb9\u7406\u5750\u6807\uff0c\u7eb9\u7406\u5750\u6807\u7528\u4e8e\u5c06\u7eb9\u7406\u5e94\u7528\u4e8e\u5bf9\u8c61\u3002</p> <p>GLUT\u8fd8\u5305\u62ec\u5bf9\u5728OpenGL\u7ed8\u56fe\u73af\u5883\u4e2d\u7ed8\u5236\u6587\u672c\u7684\u4e00\u4e9b\u6709\u9650\u652f\u6301\u3002\u6211\u4e0d\u4f1a\u5728\u6b64\u5904\u8ba8\u8bba\u8fd9\u79cd\u53ef\u80fd\u6027\u3002\u5982\u679c\u60a8\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u67e5\u9605API\u6587\u6863\uff0c\u5e76\u5728\u793a\u4f8b\u7a0b\u5e8fglut/color-cube-of-spheres.c\u4e2d\u627e\u5230\u4e00\u4e2a\u793a\u4f8b\u3002</p> <p>To work with GLUT, you will need a C compiler and copies of the OpenGL and GLUT (or freeglut) development libraries. I can't tell you exactly that means on your own computer. On my computer, which runs Linux Mint, for example, the free C compiler gcc is already available. To do OpenGL development, I installed several packages, including freeglut3-dev and libgl1-mesa-dev. (Mesa is a Linux implementation of OpenGL.) If glutprog.c contains a complete C program that uses GLUT, I can compile it using a command such as</p> <pre><code>gcc -o glutprog glutprog.c -lGL -lglut\n</code></pre> <p>The \"-o glutprog\" tells the compiler to use \"glutprog\" as the name of its output file, which can then be run as a normal executable file; without this option, the executable file would be named \"a.out\". The \"-lglut\" and \"-lGL\" options tell the compiler to link the program with the GLUT and OpenGL libraries. (The character after the \"-\" is a lower case \"L\".) Without these options, the linker won't recognize any GLUT or OpenGL functions. If the program also uses the GLU library, compiling it would require the option \"-lGLU, and if it uses the math library, it would need the option \"-lm\". If a program requires additional .c files, they should be included as well. For example, the sample program glut/color-cube-of-spheres.c depends on camera.c, and it can be compiled with the Linux gcc compiler using the command:</p> <pre><code>gcc -o cubes color-cube-of-spheres.c camera.c -lGL -lglut -lGLU -lm\n</code></pre> <p>The sample program glut/glut-starter.c can be used as a starting point for writing programs that use GLUT. While it doesn't do anything except open a window, the program contains the framework needed to do OpenGL drawing, including doing animation, responding to mouse and keyboard events, and setting up a menu. The source code contains comments that tell you how to use it.</p> <p>On Windows, you might consider installing the WSL, or Windows Subsystem for Linux, (https://docs.microsoft.com/en-us/windows/wsl/), which as I write this should soon include the ability to work with GUI programs. WSL is an official Microsoft system lets you install a version of Linux inside Windows. Another option is the older open source project, Cygwin (https://cygwin.com/). (Using Cygwin, I installed the packages gcc-core, xinit, xorg-server, libglut-devel, libGLU-devel, and libGL-devel. After starting the X11 window system with the startxwin command, I was able to compile and run OpenGL examples from this textbook in a Cygwin terminal window using the same commands that I would use in Linux.)</p> <p>For MacOS, the situation is more complicated, because OpenGL has been deprecated in favor of Metal, Apple's own proprietary API. However, as I write this, OpenGL can still be used on MacOS with Apple's XCode developer tools. The examples from this textbook require some modification to work with XCode tools, since the OpenGL and GLUT libraries are not loaded in the same way on Mac as they are on Linux. Modified programs for use on MacOS can be found in the source folder glut/glut-mac. See the README.txt file in that folder for more information.</p> <p>The GLUT library makes it easy to write basic OpenGL applications in C. GLUT uses event-handling functions. You write functions to handle events that occur when the display needs to be redrawn or when the user clicks the mouse or presses a key on the keyboard.</p> <p>To use GLUT, you need to include the header file glut.h (or freeglut.h) at the start of any source code file that uses it, along with the general OpenGL header file, gl.h. The header files should be installed in a standard location, in a folder named GL. (But note that the folder name could be different, or omitted entirely.) So, the program usually begins with something like</p> <pre><code>#include &lt;GL/gl.h&gt;\n#include &lt;GL/glut.h&gt;\n</code></pre> <p>On my computer, saying <code>#include &lt;GL/glut.h&gt;</code> actually includes the subset of FreeGLUT that corresponds to GLUT. To get access to all of FreeGLUT, I would substitute <code>#include &lt;GL/freeglut.h&gt;</code>. Depending on the features that it uses, a program might need other header files, such as <code>#include &lt;GL/glu.h&gt;</code> and <code>#include &lt;math.h&gt;</code>.</p> <p>The program's <code>main()</code> function must contain some code to initialize GLUT, to create and open a window, and to set up event handling by registering the functions that should be called in response to various events. After this setup, it must call a function that runs the GLUT event-handling loop. That function waits for events and processes them by calling the functions that have been registered to handle them. The event loop runs until the program ends, which happens when the user closes the window or when the program calls the standard <code>exit()</code> function.</p> <p>To set up the event-handling functions, GLUT uses the fact that in C, it is possible to pass a function name as a parameter to another function. For example, if <code>display()</code> is the function that should be called to draw the content of the window, then the program would use the command</p> <pre><code>glutDisplayFunc(display);\n</code></pre> <p>to install this function as an event handler for display events. A display event occurs when the contents of the window need to be redrawn, including when the window is first opened. Note that display must have been previously defined, as a function with no parameters:</p> <pre><code>void display() {\n.\n.  // OpenGL drawing code goes here!\n.\n}\n</code></pre> <p>Keep in mind that it's not the name of this function that makes it an OpenGL display function. It has to be set as the display function by calling glutDisplayFunc(display). All of the GLUT event-handling functions work in a similar way (except many of them do need to have parameters).</p> <p>There are a lot of possible event-handling functions, and I will only cover some of them here. Let's jump right in and look at a possible <code>main()</code> routine for a GLUT program that uses most of the common event handlers:</p> <pre><code>int main(int argc, char** argv) {\n    glutInit(&amp;argc, argv);  // Required initialization!\n    glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);\n    glutInitWindowSize(500,500);        // size of display area, in pixels\n    glutInitWindowPosition(100,100);    // location in screen coordinates\n    glutCreateWindow(\"OpenGL Program\"); // the parameter is the window title  \n\n    glutDisplayFunc(display);       // called when window needs to be redrawn\n    glutReshapeFunc(reshape);       // called when size of the window changes\n    glutKeyboardFunc(keyFunc);      // called when user types a character\n    glutSpecialFunc(specialKeyFunc);// called when user presses a special key\n    glutMouseFunc(mouseFunc);       // called for mousedown and mouseup events\n    glutMotionFunc(mouseDragFunc);  // called when mouse is dragged\n    glutIdleFunc(idleFun);          // called when there are no other events\n\n    glutMainLoop(); // Run the event loop!  This function never returns.\n    return 0;  // (This line will never actually be reached.)\n}\n</code></pre> <p>The first five lines do some necessary initialization, the next seven lines install event handlers, and the call to glutMainLoop() runs the GLUT event loop. I will discuss all of the functions that are used here. The first GLUT function call must be glutInit, with the parameters as shown. (Note that argc and argv represent command-line arguments for the program. Passing them to glutInit allows it to process certain command-line arguments that are recognized by GLUT. I won't discuss those arguments here.) The functions glutInitWindowSize and glutInitWindowPosition do the obvious things; size is given in pixels, and window position is given in terms of pixel coordinates on the computer screen, with (0,0) at the upper left corner of the screen. The function glutCreateWindow creates the window, but note that nothing can happen in that window until glutMainLoop is called. Often, an additional, user-defined function is called in main() to do whatever initialization of global variables and OpenGL state is required by the program. OpenGL initialization can be done after calling glutCreateWindow and before calling glutMainLoop. Turning to the other functions used in main(),</p> <p><code>glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH)</code> \u2014 Must be called to define some characteristics of the OpenGL drawing context. The parameter specifies features that you would like the OpenGL context to have. The features are represented by constants that are OR'ed together in the parameter. GLUT_DEPTH says that a depth buffer should be created; without it, the depth test won't work. If you are doing 2D graphics, you wouldn't include this option. GLUT_DOUBLE asks for double buffering, which means that drawing is actually done off-screen, and the off-screen copy has to copied to the screen to be seen. The copying is done by <code>glutSwapBuffers()</code>, which must be called at the end of the display function. (You can use GLUT_SINGLE instead of GLUT_DOUBLE to get single buffering; in that case, you have to call glFlush() at the end of the display function instead of <code>glutSwapBuffers()</code>. However, all of the examples in this book use GLUT_DOUBLE.)</p> <p><code>glutDisplayFunc(display)</code> \u2014 The display function should contain OpenGL drawing code that can completely redraw the scene. This is similar to paintComponent() in the Java Swing API. The display function can have any name, but it must be declared as a void function with no parameters: void display().</p> <p><code>glutReshapeFunc(reshape)</code> \u2014 The reshape function is called when the user changes the size of the window. Its parameters tell the new width and height of the drawing area:</p> <pre><code>void reshape( int width, int height )\n</code></pre> <p>For example, you might use this method to set up the projection transform, if the projection depends only on the window size. A reshape function is not required, but if one is provided, it should always set the OpenGL viewport, which is the part of the window that is used for drawing. Do this by calling</p> <pre><code>glViewport(0,0,width,height);\n</code></pre> <p>The viewport is set automatically if no reshape function is specified.</p> <p><code>glutKeyboardFunc(keyFunc)</code> \u2014 The keyboard function is called when the user types a character such as 'b' or 'A' or a space. It is not called for special keys such as arrow keys that do not produce characters when pressed. The keyboard function has a parameter of type unsigned char which represents the character that was typed. It also has two int parameters that give the location of the mouse when the key was pressed, in pixel coordinates with (0,0) at the upper left corner of the display area. So, the definition of the key function must have the form:</p> <pre><code>void keyFunc( unsigned char ch, int x, int y )\n</code></pre> <p>Whenever you make any changes to the program's data that require the display to be redrawn, you should call glutPostRedisplay(). This is similar to calling repaint() in Java. It is better to call glutPostRedisplay() than to call the display function directly. (I also note that it's possible to call OpenGL drawing commands directly in the event-handling functions, but it probably only makes sense if you are using single buffering; if you do this, call glFlush() to make sure that the drawing appears on the screen.)</p> <p><code>glutSpecialFunc(specialKeyFunc)</code> \u2014 The \"special\" function is called when the user presses certain special keys, such as an arrow key or the Home key. The parameters are an integer code for the key that was pressed, plus the mouse position when the key was pressed:</p> <pre><code>void specialKeyFunc( int key, int x, int y )\n</code></pre> <p>GLUT has constants to represent the possible key codes, including GLUT_KEY_LEFT, GLUT_KEY_RIGHT, GLUT_KEY_UP, and GLUT_KEY_DOWN for the arrow keys and GLUT_KEY_HOME for the Home key. For example, you can check whether the user pressed the left arrow key by testing if (key == GLUT_KEY_LEFT).</p> <p><code>glutMouseFunc(mouseFunc)</code> \u2014 The mouse function is called both when the user presses and when the user releases a button on the mouse, with a parameter to tell which of these occurred. The function will generally look like this:</p> <pre><code>void mouseFunc(int button, int buttonState, int x, int y) {\nif (buttonState == GLUT_DOWN) {\n        // handle mousePressed event\n}\nelse { // buttonState is GLUT_UP\n        // handle mouseReleased event\n}\n}\n</code></pre> <p>The first parameter tells which mouse button was pressed or released; its value is the constant GLUT_LEFT_BUTTON for the left, GLUT_MIDDLE_BUTTON for the middle, and GLUT_RIGHT_BUTTON for the right mouse button. The other two parameters tell the position of the mouse. The mouse position is given in pixel coordinates with (0,0) in the top left corner of the display area and with y increasing from top to bottom.</p> <p><code>glutMotionFunc(mouseDragFunc)</code> \u2014 The motion function is called when the user moves the mouse while dragging, that is, while a mouse button is pressed. After the user presses the mouse in the OpenGL window, this function will continue to be called even if the mouse moves outside the window, and the mouse release event will also be sent to the same window. The function has two parameters to specify the new mouse position:</p> <pre><code>void mouseDragFunc(int x, int y)\n</code></pre> <p><code>glutIdleFunc(idleFunction)</code> \u2014 The idle function is called by the GLUT event loop whenever there are no events waiting to be processed. The idle function has no parameters. It is called as often as possible, not at periodic intervals. GLUT also has a timer function, which schedules some function to be called once, after a specified delay. To set a timer, call</p> <pre><code>glutTimerFunc(delayInMilliseconds, timerFunction, userSelectedID)\n</code></pre> <p>and define timerFunction as</p> <pre><code>void timerFunction(int timerID) { ...\n</code></pre> <p>The parameter to timerFunction when it is called will be the same integer that was passed as the third parameter to glutTimerFunc. If you want to use glutTimerFunc for animation, then timerFunction should end with another call to glutTimerFunc.</p> <p>A GLUT window does not have a menu bar, but it is possible to add a hidden popup menu to the window. The menu will appear in response to a mouse click on the display. You can set whether it is triggered by the left, middle, or right mouse button.</p> <p>A menu is created using the function glutCreateMenu(menuHandler), where the parameter is the name of a function that will be called when the user selects a command from the menu. The function must be defined with a parameter of type int that identifies the command that was selected:</p> <pre><code>void menuHandler( int commandID ) { ...\n</code></pre> <p>Once the menu has been created, commands are added to the menu by calling the function glutAddMenuEntry(name,commandID). The first parameter is the string that will appear in the menu. The second is an int that identifies the command; it is the integer that will be passed to the menu-handling function when the user selects the command from the menu.</p> <p>Finally, the function glutAttachMenu(button) attaches the menu to the window. The parameter specifies which mouse button will trigger the menu. Possible values are GLUT_LEFT_BUTTON, GLUT_MIDDLE_BUTTON, and GLUT_RIGHT_BUTTON. As far as I can tell, if a mouse click is used to trigger the popup menu, than the same mouse click will not also produce a call to the mouse-handler function.</p> <p>Note that a call to glutAddMenuEntry doesn't mention the menu, and a call to glutAttachMenu doesn't mention either the menu or the window. When you call glutCreateMenu, the menu that is created becomes the \"current menu\" in the GLUT state. When glutAddMenuEntry is called, it adds a command to the current menu. When glutAttachMenu is called, it attaches the current menu to the current window, which was set by a call to glutCreateWindow. All this is consistent with the OpenGL \"state machine\" philosophy, where functions act by modifying the current state.</p> <p>As an example, suppose that we want to let the user set the background color for the display. We need a function to carry out commands that we will add to the menu. For example, we might define</p> <pre><code>function doMenu( int commandID ) {\n    if ( commandID == 1)\n        glClearColor(0,0,0,1);  // BLACK\n    else if ( commandID == 2)\n        glClearColor(1,1,1,1);  // WHITE\n    else if ( commandID == 3)\n        glClearColor(0,0,0.5,1);  // DARK BLUE\n    else if (commandID == 10)\n        exit(0);  // END THE PROGRAM\n    glutPostRedisplay();  // redraw the display, with the new background color\n}\n</code></pre> <p>We might have another function to create the menu. This function would be called in main(), after calling glutCreateWindow:</p> <pre><code>function createMenu() {\n    glutCreateMenu( doMenu );  // Call doMenu() in response to menu commands.\n    glutAddMenuEntry( \"Black Background\", 1 );\n    glutAddMenuEntry( \"White Background\", 2 );\n    glutAddMenuEntry( \"Blue Background\", 3 );\n    glutAddMenuEntry( \"EXIT\", 10 );\n    glutAttachMenu(GLUT_RIGHT_BUTTON); // Show menu on right-click.\n}\n</code></pre> <p>It's possible to have submenus in a menu. I won't discuss the procedure here, but you can look at the sample program glut/ifs-polyhedron-viewer.c for an example of using submenus.</p> <p>In addition to window and event handling, GLUT includes some functions for drawing basic 3D shapes such as spheres, cones, and regular polyhedra. It has two functions for each shape, a \"solid\" version that draws the shape as a solid object, and a wireframe version that draws something that looks like it's made of wire mesh. (The wireframe is produced by drawing just the outlines of the polygons that make up the object.) For example, the function</p> <pre><code>void glutSolidSphere(double radius, int slices, int stacks)\n</code></pre> <p>draws a solid sphere with the given radius, centered at the origin. Remember that this is just an approximation of a sphere, made up of polygons. For the approximation, the sphere is divided by lines of longitude, like the slices of an orange, and by lines of latitude, like a stack of disks. The parameters slices and stacks tell how many subdivisions to use. Typical values are 32 and 16, but the number that you need to get a good approximation for a sphere depends on the size of the sphere on the screen. The function glutWireframeSphere has the same parameters but draws only the lines of latitude and longitude. Functions for a cone, a cylinder, and a torus (doughnut) are similar:</p> <pre><code>void glutSolidCone(double base, double height,\n                                    int slices, int stacks)\n\nvoid glutSolidTorus(double innerRadius, double outerRadius,\n                                    int slices, int rings)\n\nvoid glutSolidCylinder(double radius, double height,\n                                    int slices, int stacks)\n// NOTE: Cylinders are available in FreeGLUT and in Java,\n// but not in the original GLUT library.\n</code></pre> <p>For a torus, the innerRadius is the size of the doughnut hole. The function</p> <pre><code>void glutSolidCube(double size)\n</code></pre> <p>draws a cube of a specified size. There are functions for the other regular polyhedra that have no parameters and draw the object at some fixed size: glutSolidTetrahedron(), glutSolidOctahedron(), glutSolidDodecahedron(), and glutSolidIcosahedron(). There is also glutSolidTeapot(size) that draws a famous object that is often used as an example. Here's what the teapot looks like:</p> <p></p> <p>Wireframe versions of all of the shapes are also available. For example, glutWireTeapot(size) draws a wireframe teapot. Note that GLUT shapes come with normal vectors that are required for lighting calculations. However, except for the teapot, they do not come with texture coordinates, which are required for applying textures to objects.</p> <p>GLUT also includes some limited support for drawing text in an OpenGL drawing context. I won't discuss that possibility here. You can check the API documentation if you are interested, and you can find an example in the sample program glut/color-cube-of-spheres.c.</p>"},{"location":"cn/c3/s6/#362-\u4f7f\u7528jogl","title":"3.6.2 \u4f7f\u7528JOGL","text":"\u4e2d\u6587\u82f1\u6587 <p>JOGL\u662f\u5728Java\u7a0b\u5e8f\u4e2d\u4f7f\u7528OpenGL\u7684\u6846\u67b6\u3002\u5b83\u662f\u4e00\u4e2a\u5e9e\u5927\u4e14\u590d\u6742\u7684API\uff0c\u652f\u6301\u6240\u6709\u7248\u672c\u7684OpenGL\uff0c\u4f46\u5bf9\u4e8e\u57fa\u672c\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u4f7f\u7528\u8d77\u6765\u76f8\u5f53\u5bb9\u6613\u3002\u60a8\u5e94\u8be5\u4f7f\u7528JOGL 2.4\u6216\u66f4\u9ad8\u7248\u672c\u3002\u672c\u4e66\u4e2d\u7684\u7a0b\u5e8f\u5df2\u7ecf\u5728\u7248\u672c2.4.0\u4e2d\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fjogl/JoglStarter.java\u53ef\u7528\u4f5c\u4f7f\u7528JOGL\u7f16\u5199OpenGL\u7a0b\u5e8f\u7684\u8d77\u70b9\u3002\u867d\u7136\u5b83\u9664\u4e86\u6253\u5f00\u4e00\u4e2a\u7a97\u53e3\u5916\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u4f46\u8be5\u7a0b\u5e8f\u5305\u542b\u4e86\u8fdb\u884cOpenGL\u7ed8\u56fe\u6240\u9700\u7684\u6846\u67b6\uff0c\u5305\u62ec\u8fdb\u884c\u52a8\u753b\u3001\u54cd\u5e94\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\u4ee5\u53ca\u8bbe\u7f6e\u83dc\u5355\u3002\u6e90\u4ee3\u7801\u4e2d\u5305\u542b\u4e86\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u6ce8\u91ca\u3002</p> <p>\u8981\u4f7f\u7528JOGL\uff0c\u60a8\u9700\u8981\u4e24\u4e2a\u5305\u542bJOGL Java\u7c7b\u7684.jar\u6587\u4ef6\uff1ajogl-all.jar\u548cgluegen-rt.jar\u3002\u6b64\u5916\uff0c\u60a8\u8fd8\u9700\u8981\u4e24\u4e2a\u672c\u5730\u5e93\u6587\u4ef6\u3002\u672c\u5730\u5e93\u662f\u4e00\u7ec4\u53ef\u4ee5\u4eceJava\u8c03\u7528\u4f46\u4e0d\u662f\u7528Java\u7f16\u5199\u7684\u4f8b\u7a0b\u3002\u672c\u5730\u5e93\u4e2d\u7684\u4f8b\u7a0b\u53ea\u80fd\u5728\u4e00\u79cd\u7c7b\u578b\u7684\u8ba1\u7b97\u673a\u4e0a\u5de5\u4f5c\uff1b\u60a8\u9700\u8981\u4e3a\u8981\u4f7f\u7528\u7a0b\u5e8f\u7684\u6bcf\u79cd\u8ba1\u7b97\u673a\u7c7b\u578b\u83b7\u53d6\u4e0d\u540c\u7684\u672c\u5730\u5e93\u3002JOGL\u7684\u672c\u5730\u5e93\u5b58\u50a8\u5728\u989d\u5916\u7684.jar\u6587\u4ef6\u4e2d\uff0c\u9488\u5bf9\u4e0d\u540c\u8ba1\u7b97\u673a\u63d0\u4f9b\u4e86\u51e0\u4e2a\u7248\u672c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8eIntel\u6216AMD CPU\u4e0a\u768464\u4f4dLinux\uff0c\u60a8\u9700\u8981jogl-all-natives-linux-amd64.jar\u548cgluegen-rt-natives-linux-amd64.jar\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5bf9\u4e8e\u4e0d\u540c\u5e73\u53f0\u6709\u4e0d\u540c\u7248\u672c\uff0c\u56e0\u4e3a\u8bb8\u591a\u4eba\u4e0d\u786e\u5b9a\u81ea\u5df1\u4f7f\u7528\u7684\u662f\u54ea\u4e2a\u7248\u672c\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u6709\u7591\u95ee\uff0c\u53ef\u4ee5\u83b7\u53d6\u591a\u4e2a\u7248\u672c\uff1bJOGL\u5c06\u786e\u5b9a\u8981\u4f7f\u7528\u54ea\u4e00\u4e2a\u7248\u672c\u3002</p> <p>JOGL\u8f6f\u4ef6\u53ef\u4ee5\u5728https://jogamp.org/\u627e\u5230\u3002\u60a8\u53ef\u4ee5\u4ece\u6700\u65b0\u7248\u672c\u4e2d\u4e0b\u8f7d.jar\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u53ef\u4ee5\u5728\u4ee5\u4e0b\u5217\u8868\u7684\u672b\u5c3e\u9644\u8fd1\u627e\u5230\uff1a</p> <p>https://jogamp.org/deployment/archive/rc/</p> <p>\u70b9\u51fb\u53d1\u5e03\u540d\u79f0\uff0c\u7136\u540e\u70b9\u51fb<code>jar/</code>\u94fe\u63a5\u4ee5\u67e5\u770b\u6240\u6709.jar\u6587\u4ef6\u7684\u5b8c\u6574\u5217\u8868\u3002\u627e\u5230\u5e76\u4e0b\u8f7djogl-all.jar\u548cgluegen-rt.jar\u4ee5\u53ca\u76f8\u5e94\u7684\u672c\u5730\u5e93\u6587\u4ef6\u3002\u6211\u8fd8\u5728\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u63d0\u4f9b\u4e86jogl-all.jar\u548cgluegen-rt.jar\uff0c\u4ee5\u53ca\u4e00\u4e9b\u6700\u5e38\u89c1\u5e73\u53f0\u7684\u672c\u5730\u5e93\u6587\u4ef6\uff0c\u7f51\u5740\u662f\uff1a</p> <p>http://math.hws.edu/eck/cs424/jogl_2_4_support/</p> <p>JOGL\u662f\u5f00\u6e90\u7684\uff0c\u6839\u636e\u5176\u8bb8\u53ef\u8bc1\uff0c\u6587\u4ef6\u53ef\u4ee5\u81ea\u7531\u91cd\u65b0\u5206\u53d1\u3002</p> <p>\u8981\u8fdb\u884cJOGL\u5f00\u53d1\uff0c\u60a8\u5e94\u8be5\u5728\u8ba1\u7b97\u673a\u4e0a\u7684\u67d0\u4e2a\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u6765\u4fdd\u5b58.jar\u6587\u4ef6\u3002\u5c06\u4e24\u4e2aJOGL jar\u6587\u4ef6\u653e\u5165\u8be5\u76ee\u5f55\u4e2d\uff0c\u4ee5\u53ca\u60a8\u5e73\u53f0\u7684\u4e24\u4e2a\u672c\u5730\u5e93jar\u6587\u4ef6\u3002 \uff08\u62e5\u6709\u989d\u5916\u7684\u672c\u5730\u5e93jar\u6587\u4ef6\u5e76\u4e0d\u4f1a\u6709\u4ec0\u4e48\u635f\u5bb3\uff0c\u53ea\u8981\u60a8\u62e5\u6709\u6240\u9700\u7684\u90a3\u4e9b\u3002\uff09</p> <p>\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e0a\u8fdb\u884cJOGL\u5f00\u53d1\u3002\u60a8\u5fc5\u987b\u544a\u8bc9javac\u547d\u4ee4\u5728\u54ea\u91cc\u627e\u5230\u8fd9\u4e24\u4e2aJOGL jar\u6587\u4ef6\u3002\u60a8\u53ef\u4ee5\u5728javac\u547d\u4ee4\u7684\u7c7b\u8def\u5f84\uff08\"-cp\"\uff09\u9009\u9879\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5728Linux\u6216MacOS\u4e2d\u5de5\u4f5c\uff0c\u5e76\u4e14\u5982\u679cjar\u6587\u4ef6\u78b0\u5de7\u4f4d\u4e8e\u60a8\u6b63\u5728\u5de5\u4f5c\u7684\u76ee\u5f55\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u8bf4\uff1a</p> <pre><code>javac  -cp  jogl-all.jar:gluegen-rt.jar:.  MyOpenGLProg.java\n</code></pre> <p>\u5bf9\u4e8eWindows\uff0c\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u53ea\u662f\u7c7b\u8def\u5f84\u4f7f\u7528 \";\" \u800c\u4e0d\u662f \":\" \u6765\u5206\u9694\u5217\u8868\u4e2d\u7684\u9879\u76ee\uff1a</p> <pre><code>javac  -cp  jogl-all.jar;gluegen-rt.jar;.  MyOpenGLProg.java\n</code></pre> <p>\u7c7b\u8def\u5f84\u7684\u672b\u5c3e\u6709\u4e00\u4e2a\u5fc5\u8981\u7684\u53e5\u53f7\uff0c\u4f7fJava\u80fd\u591f\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u627e\u5230 .java \u6587\u4ef6\u3002\u5982\u679cjar\u6587\u4ef6\u4e0d\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b8c\u6574\u8def\u5f84\u540d\u6216\u76f8\u5bf9\u8def\u5f84\u540d\u6765\u5f15\u7528\u6587\u4ef6\u3002\u4f8b\u5982\uff0c</p> <pre><code>javac  -cp  ../jogl/jogl-all.jar:../jogl/gluegen-rt.jar:.  MyOpenGLProg.java\n</code></pre> <p>\u4f7f\u7528java\u547d\u4ee4\u8fd0\u884c\u7a0b\u5e8f\u5b8c\u5168\u76f8\u540c\u3002\u4f8b\u5982\uff1a</p> <pre><code>java  -cp  jogl-all.jar:gluegen-rt.jar:.  MyOpenGLProg\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u60a8\u4e0d\u5fc5\u663e\u5f0f\u5f15\u7528\u672c\u5730\u5e93jar\u6587\u4ef6\u3002\u5b83\u4eec\u53ea\u9700\u8981\u4e0eJOGL jar\u6587\u4ef6\u4f4d\u4e8e\u540c\u4e00\u4e2a\u76ee\u5f55\u4e2d\u5373\u53ef\u3002</p> <p>\u6211\u5927\u90e8\u5206\u7684Java\u5f00\u53d1\u90fd\u662f\u4f7f\u7528Eclipse IDE\uff08http://eclipse.org\uff09\u3002\u8981\u5728Eclipse\u4e2d\u4f7f\u7528JOGL\u8fdb\u884c\u5f00\u53d1\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u5173\u4e8ejar\u6587\u4ef6\u7684\u4fe1\u606f\u914d\u7f6eEclipse\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u542f\u52a8Eclipse\u3002\u60a8\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\u201c\u7528\u6237\u5e93\u201d\u6765\u5305\u542bjar\u6587\u4ef6\uff1a\u6253\u5f00Eclipse\u9996\u9009\u9879\u7a97\u53e3\uff0c\u5728\u5de6\u4fa7\u9009\u62e9\u201cJava\u201d / \u201c\u6784\u5efa\u8def\u5f84\u201d / \u201c\u7528\u6237\u5e93\u201d\u3002\u5728\u53f3\u4fa7\u5355\u51fb\u201c\u65b0\u5efa\u201d\u6309\u94ae\u3002\u5c06\u201cJOGL\u201d\uff08\u6216\u60a8\u559c\u6b22\u7684\u4efb\u4f55\u540d\u79f0\uff09\u8f93\u5165\u4e3a\u7528\u6237\u5e93\u7684\u540d\u79f0\u3002\u786e\u4fdd\u5728\u5e93\u5217\u8868\u4e2d\u9009\u62e9\u4e86\u65b0\u521b\u5efa\u7684\u7528\u6237\u5e93\uff0c\u7136\u540e\u5355\u51fb\u201c\u6dfb\u52a0\u5916\u90e8Jars\u201d\u6309\u94ae\u3002\u5728\u6587\u4ef6\u9009\u62e9\u6846\u4e2d\uff0c\u5bfc\u822a\u5230\u5305\u542bJOGL jar\u6587\u4ef6\u7684\u76ee\u5f55\uff0c\u5e76\u9009\u62e9JOGL\u6240\u9700\u7684\u4e24\u4e2ajar\u6587\u4ef6\uff0c\u5373jogl-all.jar\u548cgluegen-rt.jar\u3002\uff08\u518d\u6b21\u5f3a\u8c03\uff0c\u60a8\u4e0d\u9700\u8981\u6dfb\u52a0\u672c\u5730\u5e93\uff1b\u5b83\u4eec\u53ea\u9700\u8981\u4e0eJOGL jar\u6587\u4ef6\u4f4d\u4e8e\u540c\u4e00\u4e2a\u76ee\u5f55\u4e2d\u3002\uff09\u5355\u51fb\u201c\u6253\u5f00\u201d\u3002\u6240\u9009\u7684jar\u6587\u4ef6\u5c06\u6dfb\u52a0\u5230\u7528\u6237\u5e93\u4e2d\u3002\uff08\u5982\u679c\u60a8\u4e0d\u77e5\u9053\u5982\u4f55\u9009\u62e9\u591a\u4e2a\u6587\u4ef6\uff0c\u60a8\u4e5f\u53ef\u4ee5\u9010\u4e2a\u6dfb\u52a0\u3002\uff09\u5b83\u5e94\u8be5\u7c7b\u4f3c\u4e8e\u8fd9\u6837\uff1a</p> <p></p> <p>\u5355\u51fb\u201c\u786e\u5b9a\u201d\u3002\u7528\u6237\u5e93\u5df2\u521b\u5efa\u3002\u60a8\u53ea\u9700\u8981\u6267\u884c\u6b64\u64cd\u4f5c\u4e00\u6b21\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u6240\u6709JOGL\u9879\u76ee\u4e2d\u4f7f\u7528\u5b83\u3002</p> <p>\u73b0\u5728\uff0c\u8981\u5728\u9879\u76ee\u4e2d\u4f7f\u7528OpenGL\uff0c\u8bf7\u50cf\u901a\u5e38\u5728Eclipse\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Java\u9879\u76ee\u3002\uff08\u5982\u679c\u8be2\u95ee\u662f\u5426\u8981\u4e3a\u9879\u76ee\u521b\u5efamodule-info.java\u6587\u4ef6\uff0c\u8bf7\u9009\u62e9\u201c\u4e0d\u521b\u5efa\u201d\u3002\u672c\u6559\u6750\u7684\u793a\u4f8b\u7a0b\u5e8f\u4e0d\u4f7f\u7528Java\u6a21\u5757\u3002\uff09\u53f3\u952e\u5355\u51fbProject Explorer\u89c6\u56fe\u4e2d\u7684\u65b0\u9879\u76ee\uff0c\u5e76\u4ece\u83dc\u5355\u4e2d\u9009\u62e9\u201cBuild Path\u201d / \u201cConfigure Build Path\u201d\u3002\u60a8\u5c06\u770b\u5230\u9879\u76ee\u5c5e\u6027\u5bf9\u8bdd\u6846\uff0c\u5de6\u4fa7\u9009\u62e9\u201cJava\u6784\u5efa\u8def\u5f84\u201d\u3002\uff08\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u201c\u9879\u76ee\u201d\u83dc\u5355\u4e2d\u7684\u201c\u5c5e\u6027\u201d\u547d\u4ee4\u8bbf\u95ee\u6b64\u5bf9\u8bdd\u6846\u3002\uff09\u5728\u7a97\u53e3\u9876\u90e8\u9009\u62e9\u201c\u5e93\u201d\u9009\u9879\u5361\uff0c\u7136\u540e\u70b9\u51fb\u201c\u5e93\u201d\u9009\u9879\u5361\u4e2d\u7684\u201c\u7c7b\u8def\u5f84\u201d\u4ee5\u9009\u62e9\u5b83\u3002\u70b9\u51fb\u53f3\u4fa7\u7684\u201c\u6dfb\u52a0\u5e93\u201d\u6309\u94ae\u3002\u5728\u5f39\u51fa\u7a97\u53e3\u4e2d\uff0c\u9009\u62e9\u201c\u7528\u6237\u5e93\u201d\u5e76\u70b9\u51fb\u201c\u4e0b\u4e00\u6b65\u201d\u3002\u5728\u4e0b\u4e00\u4e2a\u7a97\u53e3\u4e2d\uff0c\u9009\u62e9\u60a8\u7684JOGL\u7528\u6237\u5e93\u5e76\u70b9\u51fb\u201c\u5b8c\u6210\u201d\u3002\u6700\u540e\uff0c\u5728\u4e3b\u8981\u5c5e\u6027\u7a97\u53e3\u4e2d\u70b9\u51fb\u201c\u5e94\u7528\u5e76\u5173\u95ed\u201d\u3002\u60a8\u7684\u9879\u76ee\u73b0\u5728\u5e94\u8be5\u5df2\u7ecf\u8bbe\u7f6e\u597d\u8fdb\u884cJOGL\u5f00\u53d1\u4e86\u3002\u60a8\u5e94\u8be5\u5728Project Explorer\u4e2d\u7684\u9879\u76ee\u90e8\u5206\u4e2d\u770b\u5230JOGL\u7528\u6237\u5e93\u4f5c\u4e3a\u9879\u76ee\u7684\u4e00\u90e8\u5206\u5217\u51fa\u3002\u6bcf\u5f53\u60a8\u60f3\u8981\u542f\u52a8\u4e00\u4e2a\u65b0\u7684JOGL\u9879\u76ee\u65f6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u76f8\u540c\u7684\u8bbe\u7f6e\u6b65\u9aa4\u5c06JOGL\u7528\u6237\u5e93\u6dfb\u52a0\u5230\u9879\u76ee\u7684\u6784\u5efa\u8def\u5f84\u4e2d\u3002</p> <p>\u5b8c\u6210\u4e86\u6240\u6709\u8bbe\u7f6e\uff0c\u73b0\u5728\u662f\u65f6\u5019\u8ba8\u8bba\u5982\u4f55\u4f7f\u7528Java\u7f16\u5199OpenGL\u7a0b\u5e8f\u4e86\u3002\u4f7f\u7528JOGL\uff0c\u6211\u4eec\u4e0d\u5fc5\u8c08\u8bba\u9f20\u6807\u548c\u952e\u76d8\u5904\u7406\u6216\u52a8\u753b\uff0c\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u50cf\u5728\u4efb\u4f55Java Swing\u7a0b\u5e8f\u4e2d\u4e00\u6837\u5b8c\u6210\u3002\u60a8\u53ea\u9700\u8981\u4e86\u89e3JOGL API\u4e2d\u7684\u51e0\u4e2a\u7c7b\u3002</p> <p>\u9996\u5148\uff0c\u60a8\u9700\u8981\u4e00\u4e2aGUI\u7ec4\u4ef6\uff0c\u7528\u4e8e\u4f7f\u7528OpenGL\u8fdb\u884c\u7ed8\u5236\u3002\u4e3a\u6b64\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528GLJPanel\uff0c\u5b83\u662fJPanel\u7684\u5b50\u7c7b\u3002\uff08GLJPanel\u7528\u4e8e\u57fa\u4e8eSwing API\u7684\u7a0b\u5e8f\uff1b\u53e6\u4e00\u79cd\u9009\u62e9\u662fGLCanvas\uff0c\u5b83\u662f\u8f83\u65e7\u7684AWT\u7c7bCanvas\u7684\u5b50\u7c7b\u3002\uff09\u8be5\u7c7b\u5b9a\u4e49\u5728\u5305com.jogamp.opengl.awt\u4e2d\u3002\u6211\u4eec\u9700\u8981\u7528\u4e8e\u57fa\u672cOpenGL\u7f16\u7a0b\u7684\u6240\u6709\u5176\u4ed6\u7c7b\u90fd\u5728\u5305com.jogamp.opengl\u4e2d\u3002</p> <p>JOGL\u4f7f\u7528Java\u7684\u4e8b\u4ef6\u6846\u67b6\u6765\u7ba1\u7406OpenGL\u7ed8\u56fe\u4e0a\u4e0b\u6587\uff0c\u5e76\u5b9a\u4e49\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u4e8b\u4ef6\u76d1\u542c\u5668\u63a5\u53e3GLEventListener\u6765\u7ba1\u7406OpenGL\u4e8b\u4ef6\u3002\u8981\u4f7f\u7528OpenGL\u5728GLJPanel\u4e0a\u7ed8\u5236\uff0c\u60a8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5b9e\u73b0GLEventListener\u63a5\u53e3\u7684\u5bf9\u8c61\uff0c\u5e76\u5c06\u8be5\u76d1\u542c\u5668\u6ce8\u518c\u5230\u60a8\u7684GLJPanel\u4e0a\u3002GLEventListener\u63a5\u53e3\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u65b9\u6cd5\uff1a</p> <pre><code>public void init(GLAutoDrawable drawable)\n\npublic void display(GLAutoDrawable drawable)\n\npublic void dispose(GLAutoDrawable drawable)\n\npublic void reshape(GLAutoDrawable drawable,\n                        int x, int y, int width, int height)\n</code></pre> <p>\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u7684drawable\u53c2\u6570\u544a\u8bc9\u60a8\u6d89\u53ca\u54ea\u4e2aOpenGL\u7ed8\u56fe\u8868\u9762\u3002\u5b83\u5c06\u662f\u5bf9GLJPanel\u7684\u5f15\u7528\u3002\uff08GLAutoDrawable\u662f\u7531GLJPanel\u548c\u5176\u4ed6OpenGL\u7ed8\u56fe\u8868\u9762\u5b9e\u73b0\u7684\u63a5\u53e3\u3002\uff09init()\u65b9\u6cd5\u662f\u8fdb\u884cOpenGL\u521d\u59cb\u5316\u7684\u5730\u65b9\u3002\uff08\u6839\u636e\u6587\u6863\uff0c\u5b83\u5b9e\u9645\u4e0a\u53ef\u4ee5\u88ab\u8c03\u7528\u591a\u6b21\uff0c\u5982\u679c\u9700\u8981\u91cd\u65b0\u521b\u5efaOpenGL\u4e0a\u4e0b\u6587\u7684\u8bdd\u3002\u56e0\u6b64\uff0cinit()\u4e0d\u5e94\u7528\u4e8e\u53ea\u5e94\u8be5\u6267\u884c\u4e00\u6b21\u7684\u521d\u59cb\u5316\u3002\uff09dispose()\u65b9\u6cd5\u5c06\u5728\u9500\u6bc1OpenGL\u7ed8\u56fe\u4e0a\u4e0b\u6587\u4e4b\u524d\u8c03\u7528\uff0c\u4ee5\u4fbf\u60a8\u6709\u673a\u4f1a\u5728\u5176\u9500\u6bc1\u4e4b\u524d\u8fdb\u884c\u4efb\u4f55\u6e05\u7406\u3002\u5f53\u7a97\u53e3\u9996\u6b21\u6253\u5f00\u6216GLJPanel\u7684\u5927\u5c0f\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5c06\u8c03\u7528reshape()\u65b9\u6cd5\u3002OpenGL\u7684glViewport()\u51fd\u6570\u5728\u8c03\u7528reshape()\u4e4b\u524d\u81ea\u52a8\u8c03\u7528\uff0c\u56e0\u6b64\u60a8\u4e0d\u9700\u8981\u81ea\u5df1\u8c03\u7528\u5b83\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u9700\u8981\u5728dispose()\u6216reshape()\u4e2d\u7f16\u5199\u4efb\u4f55\u4ee3\u7801\uff0c\u4f46\u5b83\u4eec\u5fc5\u987b\u5b58\u5728\u4ee5\u6ee1\u8db3GLEventListener\u63a5\u53e3\u7684\u5b9a\u4e49\u3002</p> <p>display()\u65b9\u6cd5\u662f\u5b9e\u9645\u7ed8\u5236\u548c\u5927\u90e8\u5206\u5de5\u4f5c\u7684\u5730\u65b9\u3002\u5b83\u901a\u5e38\u5e94\u6e05\u9664\u7ed8\u56fe\u533a\u57df\u5e76\u5b8c\u5168\u91cd\u7ed8\u573a\u666f\u3002\u82b1\u4e00\u5206\u949f\u65f6\u95f4\u67e5\u770b\u4e00\u4e2a\u6700\u5c0f\u7684JOGL\u7a0b\u5e8f\u5927\u7eb2\u3002\u5b83\u521b\u5efa\u4e86\u4e00\u4e2aGLJPanel\uff0c\u5b83\u4e5f\u5145\u5f53\u4e86GLEventListener\uff1a</p> <pre><code>import com.jogamp.opengl.*;\nimport com.jogamp.opengl.awt.GLJPanel;\n\nimport java.awt.Dimension;\nimport javax.swing.JFrame;\n\npublic class JOGLProgram extends GLJPanel implements GLEventListener {\n\n    public static void main(String[] args) {\n        JFrame window = new JFrame(\"JOGL Program\");\n        JOGLProgram panel = new JOGLProgram();\n        window.setContentPane(panel);\n        window.pack();\n        window.setLocation(50,50);\n        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        window.setVisible(true);\n    }\n\n    public JOGLProgram() {\n        setPreferredSize( new Dimension(500,500) );\n        addGLEventListener(this);\n    }\n\n    // ---------------  Methods of the GLEventListener interface -----------\n\n    public void init(GLAutoDrawable drawable) {\n            // called when the panel is created\n        GL2 gl = drawable.getGL().getGL2();\n        // Add initialization code here!\n    }\n\n    public void display(GLAutoDrawable drawable) {    \n            // called when the panel needs to be drawn\n        GL2 gl = drawable.getGL().getGL2();\n        // Add drawing code here!\n    }\n\n    public void reshape(GLAutoDrawable drawable,\n                            int x, int y, int width, int height) {\n        // called when user resizes the window\n    }\n\n    public void dispose(GLAutoDrawable drawable) {\n        // called when the panel is being disposed\n    }\n\n}\n</code></pre> <p>\u6b64\u65f6\uff0c\u60a8\u9700\u8981\u4e86\u89e3\u7684\u53e6\u4e00\u4ef6\u4e8b\u5c31\u662f\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528OpenGL\u51fd\u6570\u3002\u5728JOGL\u4e2d\uff0cOpenGL 1.1\u51fd\u6570\u88ab\u6536\u96c6\u5230GL2\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u3002\uff08\u4e0d\u540c\u7248\u672c\u7684OpenGL\u6709\u4e0d\u540c\u7684\u7c7b\uff1bGL2\u5305\u542b\u4e0e1.1\u517c\u5bb9\u7684OpenGL 1.1\u529f\u80fd\u4ee5\u53ca\u540e\u6765\u7684\u7248\u672c\u3002\uff09GL2\u7c7b\u578b\u7684\u5bf9\u8c61\u662f\u4e00\u4e2aOpenGL\u56fe\u5f62\u4e0a\u4e0b\u6587\uff0c\u5c31\u50cfGraphics2D\u7c7b\u578b\u7684\u5bf9\u8c61\u662f\u666e\u901aJava 2D\u7ed8\u56fe\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e00\u6837\u3002\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c</p> <pre><code>GL2 gl = drawable.getGL().getGL2();\n</code></pre> <p>\u83b7\u53d6\u4e86GLAutoDrawable\u7684\u7ed8\u56fe\u4e0a\u4e0b\u6587\uff0c\u4e5f\u5c31\u662f\u5728\u8be5\u7a0b\u5e8f\u4e2d\u7684GLJPanel\u7684\u7ed8\u56fe\u4e0a\u4e0b\u6587\u3002\u53d8\u91cf\u7684\u540d\u79f0\u5f53\u7136\u53ef\u4ee5\u662f\u4efb\u4f55\u540d\u79f0\uff0c\u4f46gl\u6216gl2\u662f\u5e38\u89c4\u7684\u547d\u540d\u3002</p> <p>\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u5728JOGL\u4e2d\u4f7f\u7528OpenGL\u51fd\u6570\u4e0e\u5728C\u4e2d\u76f8\u540c\uff0c\u53ea\u662f\u8fd9\u4e9b\u51fd\u6570\u73b0\u5728\u662f\u5bf9\u8c61gl\u4e2d\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u8c03\u7528glClearColor(r,g,b,a)\u53d8\u6210\u4e86</p> <pre><code>gl.glClearColor(r,g,b,a);\n</code></pre> <p>\u5197\u4f59\u7684\u201cgl.gl\u201d\u6709\u70b9\u607c\u4eba\uff0c\u4f46\u60a8\u4f1a\u4e60\u60ef\u7684\u3002OpenGL\u5e38\u91cf\uff0c\u5982GL_TRIANGLES\uff0c\u662fGL2\u7684\u9759\u6001\u6210\u5458\uff0c\u56e0\u6b64\uff0c\u5728JOGL\u4e2d\uff0c\u4f8b\u5982\uff0cGL_TRIANGLES\u53d8\u6210\u4e86GL2.GL_TRIANGLES\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cOpenGL\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u4e0eC API\u4e2d\u7684\u53c2\u6570\u5217\u8868\u76f8\u540c\u3002\u4e00\u4e2a\u4f8b\u5916\u662f\u5bf9\u4e8e\u51fd\u6570\uff08\u5982glVertex3fv()\uff09\u5728C\u4e2d\u91c7\u7528\u6570\u7ec4/\u6307\u9488\u53c2\u6570\u7684\u51fd\u6570\u3002\u5728JOGL\u4e2d\uff0c\u8be5\u53c2\u6570\u53d8\u6210\u4e86\u666e\u901a\u7684Java\u6570\u7ec4\uff0c\u5e76\u4e14\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u6574\u6570\u53c2\u6570\u6765\u6307\u5b9a\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u5982\u4f55\u5728JOGL\u4e2d\u7ed8\u5236\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u5176\u4e2d\u6240\u6709\u9876\u70b9\u5750\u6807\u90fd\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff1a</p> <pre><code>float[] coords = { 0,0.5F, -0.5F,-0.5F, 0.5F,-0.5F };\n\ngl.glBegin(GL2.GL_TRIANGLES);\ngl.glVertex2fv(coords, 0);     // \u7b2c\u4e00\u4e2a\u9876\u70b9\u6570\u636e\u4ece\u7d22\u5f150\u5f00\u59cb\ngl.glVertex2fv(coords, 2);     // \u7b2c\u4e8c\u4e2a\u9876\u70b9\u6570\u636e\u4ece\u7d22\u5f152\u5f00\u59cb\ngl.glVertex2fv(coords, 4);     // \u7b2c\u4e09\u4e2a\u9876\u70b9\u6570\u636e\u4ece\u7d22\u5f154\u5f00\u59cb\ngl.glEnd();\n</code></pre> <p>JOGL API\u4e2d\u6700\u5927\u7684\u53d8\u5316\u662f\u5728\u8bf8\u5982glVertexPointer\u4e4b\u7c7b\u7684\u51fd\u6570\u4e2d\u4f7f\u7528nio\u7f13\u51b2\u533a\u800c\u4e0d\u662f\u6570\u7ec4\u3002\u8fd9\u57283.4.3\u5c0f\u8282\u4e2d\u6709\u6240\u8ba8\u8bba\u3002\u57284.3.9\u5c0f\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u7eb9\u7406\u56fe\u50cf\u5728JOGL\u4e2d\u4e5f\u6709\u7279\u6b8a\u5904\u7406\u3002</p> <p>JOGL API\u5305\u62ec\u4e00\u4e2a\u540d\u4e3aGLUT\u7684\u7c7b\uff0c\u8be5\u7c7b\u4f7f\u5f97GLUT\u7684\u5f62\u72b6\u7ed8\u5236\u51fd\u6570\u5728Java\u4e2d\u53ef\u7528\u3002\uff08\u56e0\u4e3a\u60a8\u4e0d\u9700\u8981\u5728Java\u4e2d\u4f7f\u7528GLUT\u7684\u7a97\u53e3\u6216\u4e8b\u4ef6\u529f\u80fd\uff0c\u6240\u4ee5\u53ea\u5305\u62ec\u4e86\u5f62\u72b6\u51fd\u6570\u3002\uff09GLUT\u7c7b\u5b9a\u4e49\u5728\u5305com.jogamp.opengl.util.gl2\u4e2d\u3002\u8981\u4f7f\u7528\u6b64\u7c7b\u7ed8\u5236\u5f62\u72b6\uff0c\u60a8\u9700\u8981\u521b\u5efa\u4e00\u4e2aGLUT\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u5728\u7a0b\u5e8f\u4e2d\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\uff1a</p> <pre><code>GLUT glut = new GLUT();\n</code></pre> <p>\u8be5\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5\u5305\u62ec\u6240\u6709\u6765\u81eaGLUT C API\u7684\u5f62\u72b6\u7ed8\u5236\u51fd\u6570\uff0c\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u53c2\u6570\u3002\u4f8b\u5982\uff1a</p> <pre><code>glut.glutSolidSphere( 2, 32, 16 );\nglut.glutWireTeapot( 5 );\nglut.glutSolidIcosahedron();\n</code></pre> <p>\uff08\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u662f\u5bf9\u8c61\u4e2d\u7684\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u7c7b\u4e2d\u7684\u9759\u6001\u65b9\u6cd5\uff1b\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u5bf9\u8c61\u662f\u4e0d\u9700\u8981\u7684\u3002\uff09</p> <p>GLU\u5e93\u53ef\u901a\u8fc7\u7c7bcom.jogamp.opengl.glu.GLU\u4f7f\u7528\uff0c\u5e76\u4e14\u4e0eGLUT\u7c7b\u4f3c\u5730\u5de5\u4f5c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u5fc5\u987b\u521b\u5efa\u4e00\u4e2aGLU\u7c7b\u578b\u7684\u5bf9\u8c61\uff0cGLU\u51fd\u6570\u5c06\u4f5c\u4e3a\u8be5\u5bf9\u8c61\u7684\u65b9\u6cd5\u53ef\u7528\u3002\u6211\u4eec\u4ec5\u5728\u51fd\u6570gluLookAt\u548cgluPerspective\u4e2d\u9047\u5230\u8fc7GLU\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u7b2c3.3\u8282\u4e2d\u8fdb\u884c\u4e86\u8ba8\u8bba\u3002\u4f8b\u5982\uff0c</p> <pre><code>GLU glu = new GLU();\n\nglu.gluLookAt( 5,15,7, 0,0,0, 0,1,0 );\n</code></pre> <p>JOGL is a framework for using OpenGL in Java programs. It is a large and complex API that supports all versions of OpenGL, but it is fairly easy to use for basic applications. You should use JOGL 2.4 or later. The programs in this book were tested with version 2.4.0.</p> <p>The sample program jogl/JoglStarter.java can be used as a starting point for writing OpenGL programs using JOGL. While it doesn't do anything except open a window, the program contains the framework needed to do OpenGL drawing, including doing animation, responding to mouse and keyboard events, and setting up a menu. The source code contains comments that tell you how to use it.</p> <p>To use JOGL, you will need two .jar files containing the Java classes for JOGL: jogl-all.jar and gluegen-rt.jar. In addition, you will need two native library files. A native library is a collection of routines that can be called from Java but are not written in Java. Routines in a native library will work on only one kind of computer; you need a different native library for each type of computer on which your program is to be used. The native libraries for JOGL are stored in additional .jar files, which are available in several versions for different computers. For example, for 64-bit Linux on Intel or AMD CPUs, you need jogl-all-natives-linux-amd64.jar and gluegen-rt-natives-linux-amd64.jar. It is unfortunate that there are different versions for different platforms, since many people don't know exactly which one they are using. However, if you are in doubt, you can get more than one version; JOGL will figure out which one to use.</p> <p>JOGL software can be found at https://jogamp.org/. You can download the jar files from the most recent release, which can be found near the end of the list at</p> <p>https://jogamp.org/deployment/archive/rc/</p> <p>Click on the release name, then click on the <code>jar/</code> link to see the full list of jar files. Find and download jogl-all.jar and gluegen-rt.jar and the corresponding native library files. I have also made jogl-all.jar and gluegen-rt.jar available on my own web site, along with the native libraries for some of the most common platforms, at</p> <p>http://math.hws.edu/eck/cs424/jogl_2_4_support/</p> <p>JOGL is open-source, and the files are freely redistributable, according to their license.</p> <p>To do JOGL development, you should create a directory somewhere on your computer to hold the jar files. Place the two JOGL jar files in that directory, along with the two native library jar files for your platform. (Having extra native library jar files doesn't hurt, as long as you have the ones that you need.)</p> <p>It is possible to do JOGL development on the command line. You have to tell the javac command where to find the two JOGL jar files. You do that in the classpath (\"-cp\") option to the javac command. For example, if you are working in Linux or MacOS, and if the jar files happen to be in the same directory where you are working, you might say:</p> <pre><code>javac  -cp  jogl-all.jar:gluegen-rt.jar:.  MyOpenGLProg.java\n</code></pre> <p>It's similar for Windows, except that the classpath uses a \";\" instead of a \":\" to separate the items in the list:</p> <pre><code>javac  -cp  jogl-all.jar;gluegen-rt.jar;.  MyOpenGLProg.java\n</code></pre> <p>There is an essential period at the end of the classpath, which makes it possible for Java to find .java files in the current directory. If the jar files are not in the current directory, you can use full path names or relative path names to the files. For example,</p> <pre><code>javac  -cp  ../jogl/jogl-all.jar:../jogl/gluegen-rt.jar:.  MyOpenGLProg.java\n</code></pre> <p>Running a program with the java command is exactly similar. For example:</p> <pre><code>java  -cp  jogl-all.jar:gluegen-rt.jar:.  MyOpenGLProg\n</code></pre> <p>Note that you don't have to explicitly reference the native library jar files. They just have to be in the same directory with the JOGL jar files.</p> <p>I do most of my Java development using the Eclipse IDE (http://eclipse.org). To do development with JOGL in Eclipse, you will have to configure Eclipse with information about the jar files. To do that, start up Eclipse. You want to create a \"User Library\" to contain the jar files: Open the Eclipse Preferences window, and select \"Java\" / \"Build Path\" / \"User Libraries\" on the left. Click the \"New\" button on the right. Enter \"JOGL\" (or any name you like) as the name of the user library. Make sure that the new user library is selected in the list of libraries, then click the \"Add External Jars\" button. In the file selection box, navigate to the directory that contains the JOGL jar files, and select the two jar files that are needed for JOGL, jogl-all.jar and gluegen-rt.jar. (Again, you do not need to add the native libraries; they just need to be in the same directory as the JOGL jar files.) Click \"Open\". The selected jars will be added to the user library. (You could also add them one at a time, if you don't know how to select multiple files.) It should look something like this:</p> <p></p> <p>Click \"OK.\" The user library has been created. You will only have to do this once, and then you can use it in all of your JOGL projects.</p> <p>Now, to use OpenGL in a project, create a new Java project as usual in Eclipse. (If you are asked whether you want to create a module-info.java file for the project, say \"Don't Create\". Sample programs for this textbook do not use Java modules.) Right-click the new project in the Project Explorer view, and select \"Build Path\" / \"Configure Build Path\" from the menu. You will see the project Properties dialog, with \"Java Build Path\" selected on the left. (You can also access this through the \"Properties\" command in the \"Project\" menu.) Select the \"Libraries\" tab at the top of the window, and then click on \"Class Path\" in the \"Libraries\" tab to select it. Click the \"Add Library\" button, on the right. In the popup window, select \"User Library\" and click \"Next.\" In the next window, select your JOGL User Library and click \"Finish.\" Finally, click \"Apply and Close\" in the main Properties window. Your project should now be set up to do JOGL development. You should see the JOGL User Library listed as part of the project in the Project Explorer. Any time you want to start a new JOGL project, you can go through the same setup to add the JOGL User Library to the build path in the project.</p> <p>With all that setup out of the way, it's time to talk about actually writing OpenGL programs with Java. With JOGL, we don't have to talk about mouse and keyboard handling or animation, since that can be done in the same way as in any Java Swing program. You will only need to know about a few classes from the JOGL API.</p> <p>First, you need a GUI component on which you can draw using OpenGL. For that, you can use GLJPanel, which is a subclass of JPanel. (GLJPanel is for use in programs based on the Swing API; an alternative is GLCanvas, which is a subclass of the older AWT class Canvas.) The class is defined in the package com.jogamp.opengl.awt. All of the other classes that we will need for basic OpenGL programming are in the package com.jogamp.opengl.</p> <p>JOGL uses Java's event framework to manage OpenGL drawing contexts, and it defines a custom event listener interface, GLEventListener, to manage OpenGL events. To draw on a GLJPanel with OpenGL, you need to create an object that implements the GLEventListener interface, and register that listener with your GLJPanel. The GLEventListener interface defines the following methods:</p> <pre><code>public void init(GLAutoDrawable drawable)\n\npublic void display(GLAutoDrawable drawable)\n\npublic void dispose(GLAutoDrawable drawable)\n\npublic void reshape(GLAutoDrawable drawable,\n                        int x, int y, int width, int height)\n</code></pre> <p>The drawable parameter in these methods tells which OpenGL drawing surface is involved. It will be a reference to the GLJPanel. (GLAutoDrawable is an interface that is implemented by GLJPanel and other OpenGL drawing surfaces.) The init() method is a place to do OpenGL initialization. (According to the documentation, it can actually be called several times, if the OpenGL context needs to be recreated for some reason. So init() should not be used to do initialization that shouldn't be done more than once.) The dispose() method will be called to give you a chance to do any cleanup before the OpenGL drawing context is destroyed. The reshape() method is called when the window first opens and whenever the size of the GLJPanel changes. OpenGL's glViewport() function is called automatically before reshape() is called, so you won't need to do it yourself. Usually, you won't need to write any code in dispose() or reshape(), but they have to be there to satisfy the definition of the GLEventListener interface.</p> <p>The display() method is where the actual drawing is done and where you will do most of your work. It should ordinarily clear the drawing area and completely redraw the scene. Take a minute to study an outline for a minimal JOGL program. It creates a GLJPanel which also serves as the GLEventListener:</p> <pre><code>import com.jogamp.opengl.*;\nimport com.jogamp.opengl.awt.GLJPanel;\n\nimport java.awt.Dimension;\nimport javax.swing.JFrame;\n\npublic class JOGLProgram extends GLJPanel implements GLEventListener {\n\n    public static void main(String[] args) {\n        JFrame window = new JFrame(\"JOGL Program\");\n        JOGLProgram panel = new JOGLProgram();\n        window.setContentPane(panel);\n        window.pack();\n        window.setLocation(50,50);\n        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        window.setVisible(true);\n    }\n\n    public JOGLProgram() {\n        setPreferredSize( new Dimension(500,500) );\n        addGLEventListener(this);\n    }\n\n    // ---------------  Methods of the GLEventListener interface -----------\n\n    public void init(GLAutoDrawable drawable) {\n            // called when the panel is created\n        GL2 gl = drawable.getGL().getGL2();\n        // Add initialization code here!\n    }\n\n    public void display(GLAutoDrawable drawable) {    \n            // called when the panel needs to be drawn\n        GL2 gl = drawable.getGL().getGL2();\n        // Add drawing code here!\n    }\n\n    public void reshape(GLAutoDrawable drawable,\n                            int x, int y, int width, int height) {\n        // called when user resizes the window\n    }\n\n    public void dispose(GLAutoDrawable drawable) {\n        // called when the panel is being disposed\n    }\n\n}\n</code></pre> <p>At this point, the only other thing you need to know is how to use OpenGL functions in the program. In JOGL, the OpenGL 1.1 functions are collected into an object of type GL2. (There are different classes for different versions of OpenGL; GL2 contains OpenGL 1.1 functionality, along with later versions that are compatible with 1.1.) An object of type GL2 is an OpenGL graphics context, in the same way that an object of type Graphics2D is a graphics context for ordinary Java 2D drawing. The statement</p> <pre><code>GL2 gl = drawable.getGL().getGL2();\n</code></pre> <p>in the above program obtains the drawing context for the GLAutoDrawable, that is, for the GLJPanel in that program. The name of the variable could, of course, be anything, but gl or gl2 is conventional.</p> <p>For the most part, using OpenGL functions in JOGL is the same as in C, except that the functions are now methods in the object gl. For example, a call to glClearColor(r,g,b,a) becomes</p> <pre><code>gl.glClearColor(r,g,b,a);\n</code></pre> <p>The redundant \"gl.gl\" is a little annoying, but you get used to it. OpenGL constants such as GL_TRIANGLES are static members of GL2, so that, for example, GL_TRIANGLES becomes GL2.GL_TRIANGLES in JOGL. Parameter lists for OpenGL functions are the same as in the C API in most cases. One exception is for functions such as glVertex3fv() that take an array/pointer parameter in C. In JOGL, the parameter becomes an ordinary Java array, and an extra integer parameter is added to give the position of the data in the array. Here, for example, is how one might draw a triangle in JOGL, with all the vertex coordinates in one array:</p> <pre><code>float[] coords = { 0,0.5F, -0.5F,-0.5F, 0.5F,-0.5F };\n\ngl.glBegin(GL2.GL_TRIANGLES);\ngl.glVertex2fv(coords, 0);     // first vertex data starts at index 0\ngl.glVertex2fv(coords, 2);     // second vertex data starts at index 2\ngl.glVertex2fv(coords, 4);     // third vertex data starts at index 4\ngl.glEnd();\n</code></pre> <p>The biggest change in the JOGL API is the use of nio buffers instead of arrays in functions such as glVertexPointer. This is discussed in Subsection 3.4.3. We will see in Subsection 4.3.9 that texture images also get special treatment in JOGL.</p> <p>The JOGL API includes a class named GLUT that makes GLUT's shape-drawing functions available in Java. (Since you don't need GLUT's window or event functions in Java, only the shape functions are included.) Class GLUT is defined in the package com.jogamp.opengl.util.gl2. To draw shapes using this class, you need to create an object of type GLUT. It's only necessary to make one of these for use in a program:</p> <pre><code>GLUT glut = new GLUT();\n</code></pre> <p>The methods in this object include all the shape-drawing functions from the GLUT C API, with the same names and parameters. For example:</p> <pre><code>glut.glutSolidSphere( 2, 32, 16 );\nglut.glutWireTeapot( 5 );\nglut.glutSolidIcosahedron();\n</code></pre> <p>(I don't know why these are instance methods in an object rather than static methods in a class; logically, there is no need for the object.)</p> <p>The GLU library is available through the class com.jogamp.opengl.glu.GLU, and it works similarly to GLUT. That is, you have to create an object of type GLU, and the GLU functions will be available as methods in that object. We have encountered GLU only for the functions gluLookAt and gluPerspective, which are discussed in Section 3.3. For example,</p> <pre><code>GLU glu = new GLU();\n\nglu.gluLookAt( 5,15,7, 0,0,0, 0,1,0 );\n</code></pre>"},{"location":"cn/c3/s6/#363-\u5173\u4e8e-glsimjs","title":"3.6.3 \u5173\u4e8e glsim.js","text":"\u4e2d\u6587\u82f1\u6587 <p>JavaScript\u5e93glsim.js\u662f\u4e3a\u4e86\u914d\u5408\u548c\u652f\u6301\u672c\u6559\u6750\u800c\u7f16\u5199\u7684\u3002\u5b83\u5b9e\u73b0\u4e86\u7b2c3\u7ae0\u548c\u7b2c4\u7ae0\u8ba8\u8bba\u7684OpenGL 1.1\u7684\u5b50\u96c6\uff0c\u4f46\u4e0d\u5305\u62ec\u663e\u793a\u5217\u8868(\u5c0f\u82823.4.4)\u3002\u5b83\u5728\u8fd9\u4e9b\u7ae0\u8282\u4e2d\u51fa\u73b0\u7684\u6f14\u793a\u4e2d\u4f7f\u7528\u3002\u5728\u8fd9\u4e9b\u7ae0\u8282\u4e2d\u8ba8\u8bba\u7684\u8bb8\u591a\u793a\u4f8b\u7a0b\u5e8f\u90fd\u4ee5\u4f7f\u7528glsim.js\u7684JavaScript\u7248\u672c\u63d0\u4f9b\u3002</p> <p>\u5982\u679c\u60a8\u60f3\u8981\u5c1d\u8bd5OpenGL 1.1\uff0c\u4f46\u4e0d\u60f3\u8d39\u529b\u8bbe\u7f6e\u652f\u6301OpenGL\u7f16\u7a0b\u7684C\u6216Java\u73af\u5883\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u7f16\u5199\u4f7f\u7528glsim.js\u7684\u7f51\u9875\u7a0b\u5e8f\u3002\u8bf7\u6ce8\u610f\uff0cglsim\u4ec5\u7528\u4e8e\u5b9e\u9a8c\u548c\u7ec3\u4e60\uff0c\u4e0d\u9002\u7528\u4e8e\u4e25\u8083\u7684\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>glsim.js\u5b9e\u73b0\u7684OpenGL API\u57fa\u672c\u4e0a\u4e0eC API\u76f8\u540c\uff0c\u5c3d\u7ba1\u4e00\u4e9b\u8bed\u4e49\u7ec6\u8282\u6709\u6240\u4e0d\u540c\u3002\u5f53\u7136\uff0c\u521b\u5efa\u7ed8\u56fe\u8868\u9762\u548cOpenGL\u7ed8\u56fe\u4e0a\u4e0b\u6587\u7684\u6280\u672f\u662f\u7279\u5b9a\u4e8eJavaScript\u7684\uff0c\u5e76\u4e14\u4e0eGLUT\u6216JOGL\u4e2d\u4f7f\u7528\u7684\u6280\u672f\u4e0d\u540c\u3002</p> <p>\u8981\u4f7f\u7528glsim.js\uff0c\u60a8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5305\u542b<code>&lt;canvas&gt;</code>\u5143\u7d20\u4f5c\u4e3a\u7ed8\u56fe\u8868\u9762\u7684HTML\u6587\u6863\u3002HTML\u6587\u4ef6\u5fc5\u987b\u5bfc\u5165\u8be5\u811a\u672c\uff1b\u5982\u679cglsim.js\u4e0eHTML\u6587\u4ef6\u4f4d\u4e8e\u540c\u4e00\u76ee\u5f55\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u5bfc\u5165\uff1a</p> <pre><code>&lt;script src=\"glsim.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\u8981\u521b\u5efaOpenGL\u7ed8\u56fe\u4e0a\u4e0b\u6587\uff0c\u8bf7\u4f7f\u7528JavaScript\u547d\u4ee4</p> <pre><code>glsimUse(canvas);\n</code></pre> <p>\u5176\u4e2dcanvas\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ed9\u51fa\u4e86<code>&lt;canvas&gt;</code>\u5143\u7d20\u7684id\uff0c\u6216\u8005\u662f\u4e0e<code>&lt;canvas&gt;</code>\u5143\u7d20\u5bf9\u5e94\u7684JavaScript DOM\u5bf9\u8c61\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7ed8\u56fe\u4e0a\u4e0b\u6587\u540e\uff0c\u60a8\u7ed9\u51fa\u7684\u4efb\u4f55OpenGL\u547d\u4ee4\u90fd\u5c06\u5e94\u7528\u4e8ecanvas\u3002\u8981\u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ea\u9700\u5728\u652f\u6301WebGL 1.0\u7684Web\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00HTML\u6587\u6863\u3002</p> <p>\u5f00\u59cb\u7f16\u7a0b\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4fee\u6539\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u7a0b\u5e8f\u3002\u6765\u81ea\u5c0f\u82823.1.2\u7684\u793a\u4f8b\u7a0b\u5e8fglsim/first-triangle.html\u662f\u4f7f\u7528glsim.js\u7684\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\u3002\u793a\u4f8b\u7f51\u9875glsim/glsim-starter.html\u53ef\u4ee5\u7528\u4f5c\u7f16\u5199\u4f7f\u7528glsim.js\u7684\u8f83\u957f\u7a0b\u5e8f\u7684\u8d77\u70b9\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7528\u4e8e\u8fdb\u884cOpenGL\u7ed8\u56fe\u7684\u6846\u67b6\uff0c\u652f\u6301\u52a8\u753b\u4ee5\u53ca\u9f20\u6807\u548c\u952e\u76d8\u4e8b\u4ef6\u3002\u4ee3\u7801\u4e2d\u5305\u542b\u4e86\u544a\u8bc9\u60a8\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u6ce8\u91ca\u3002glsim.js\u5e93\u7684\u4e00\u4e9b\u6587\u6863\u53ef\u4ee5\u5728glsim/glsim-doc.html\u4e2d\u627e\u5230\u3002</p> <p>The JavaScript library glsim.js was written to accompany and support this textbook. It implements the subset of OpenGL 1.1 that is discussed in Chapter 3 and Chapter 4, except for display lists (Subsection 3.4.4). It is used in the demos that appear in those chapters. Many of the sample programs that are discussed in those chapters are available in JavaScript versions that use glsim.js.</p> <p>If you would like to experiment with OpenGL 1.1, but don't want to go through the trouble of setting up a C or Java environment that supports OpenGL programming, you can consider writing your programs as web pages using glsim.js. Note that glsim is meant for experimentation and practice only, not for serious applications.</p> <p>The OpenGL API that is implemented by glsim.js is essentially the same as the C API, although some of the details of semantics are different. Of course the techniques for creating a drawing surface and an OpenGL drawing context are specific to JavaScript and differ from those used in GLUT or JOGL.</p> <p>To use glsim.js, you need to create an HTML document with a <code>&lt;canvas&gt;</code> element to serve as the drawing surface. The HTML file has to import the script; if glsim.js is in the same directory as the HTML file, you can do that with</p> <pre><code>&lt;script src=\"glsim.js\"&gt;&lt;/script&gt;\n</code></pre> <p>To create the OpenGL drawing context, use the JavaScript command</p> <pre><code>glsimUse(canvas);\n</code></pre> <p>where canvas is either a string giving the id of the <code>&lt;canvas&gt;</code> element or is the JavaScript DOM object corresponding to the <code>&lt;canvas&gt;</code> element. Once you have created the drawing context in this way, any OpenGL commands that you give will apply to the canvas. To run the program, you just need to open the HTML document in a web browser that supports WebGL 1.0.</p> <p>The easiest way to get started programming is to modify a program that already exists. The sample program glsim/first-triangle.html, from Subsection 3.1.2 is a very minimal example of using glsim.js. The sample web page glsim/glsim-starter.html can be used as a starting point for writing longer programs that use glsim.js. It provides a framework for doing OpenGL drawing, with support for animation and mouse and keyboard events. The code contains comments that tell you how to use it. Some documentation for the glsim.js library can be found in glsim/glsim-doc.html.</p>"},{"location":"cn/c4/","title":"\u7b2c 4 \u7ae0\uff1a OpenGL 1.1\uff1a\u706f\u5149\u548c\u6750\u8d28","text":"<p>OpenGL 1.1: Light and Material</p> \u4e2d\u6587\u82f1\u6587 <p>\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u4e00\u4e2a\u76ee\u6807\u662f\u7269\u7406\u771f\u5b9e\u6027\uff0c\u5373\u5236\u4f5c\u770b\u8d77\u6765\u50cf\u662f\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u7167\u7247\u7684\u56fe\u50cf\u3002\u8fd9\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u76ee\u6807\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u79d1\u5b66\u53ef\u89c6\u5316\uff0c\u76ee\u6807\u662f\u4f7f\u7528\u8ba1\u7b97\u673a\u56fe\u5f62\u4ee5\u51c6\u786e\u6e05\u6670\u7684\u65b9\u5f0f\u5448\u73b0\u4fe1\u606f\u3002\u827a\u672f\u5bb6\u53ef\u4ee5\u5229\u7528\u8ba1\u7b97\u673a\u56fe\u5f62\u6765\u521b\u9020\u62bd\u8c61\u800c\u4e0d\u662f\u903c\u771f\u7684\u827a\u672f\u4f5c\u54c1\u3002\u7136\u800c\uff0c\u771f\u5b9e\u6027\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u6700\u660e\u663e\u7684\u7528\u9014\u4e4b\u4e00\u7684\u4e3b\u8981\u76ee\u6807\uff0c\u6bd4\u5982\u89c6\u9891\u6e38\u620f\u3001\u7535\u5f71\u548c\u5e7f\u544a\u3002</p> <p>\u7269\u7406\u771f\u5b9e\u6027\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\u662f\u5149\u7167\uff1a\u5149\u5f71\u7684\u53d8\u5316\u3001\u5149\u7ebf\u4ece\u4e0d\u540c\u6750\u6599\u53cd\u5c04\u7684\u65b9\u5f0f\uff0c\u4ee5\u53ca\u900f\u660e\u7269\u4f53\u901a\u8fc7\u65f6\u5149\u7ebf\u5f2f\u66f2\u6216\u884d\u5c04\u7684\u65b9\u5f0f\u3002\u7528\u4e8e\u4ea7\u751f\u6700\u771f\u5b9e\u56fe\u5f62\u7684\u6280\u672f\u53ef\u4ee5\u8003\u8651\u6240\u6709\u8fd9\u4e9b\u56e0\u7d20\u4ee5\u53ca\u66f4\u591a\u3002</p> <p>\u7136\u800c\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u53e6\u4e00\u4e2a\u76ee\u6807\u662f\u901f\u5ea6\u3002OpenGL\uff0c\u7279\u522b\u662f\u4e3a\u5b9e\u65f6\u56fe\u5f62\u8bbe\u8ba1\u7684\uff0c\u5176\u4e2d\u53ef\u7528\u4e8e\u6e32\u67d3\u56fe\u50cf\u7684\u65f6\u95f4\u662f\u79d2\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u5bf9\u4e8e\u52a8\u753b\u7535\u5f71\uff0c\u5982\u679c\u6bcf\u5e27\u6e32\u67d3\u82b1\u8d39\u51e0\u4e2a\u5c0f\u65f6\u4e5f\u6ca1\u5173\u7cfb\u3002\u4f46\u662f\uff0c\u89c6\u9891\u6e38\u620f\u9884\u671f\u6bcf\u79d2\u6e32\u67d3\u516d\u5341\u5e27\u3002\u5373\u4f7f\u4f7f\u7528\u73b0\u4ee3\u8ba1\u7b97\u673a\u56fe\u5f62\u786c\u4ef6\u7684\u60ca\u4eba\u901f\u5ea6\uff0c\u4e5f\u9700\u8981\u8fdb\u884c\u59a5\u534f\u6765\u83b7\u5f97\u8fd9\u79cd\u901f\u5ea6\u3002\u4e09\u5341\u5e74\u524d\uff0c\u5f53OpenGL\u8fd8\u5f88\u65b0\u65f6\uff0c\u8fd9\u79cd\u59a5\u534f\u8981\u5927\u5f97\u591a\u3002</p> <p>\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60OpenGL 1.1\u4e2d\u7684\u5149\u7167\u548c\u6750\u8d28\u3002\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u914d\u7f6e\u5149\u6e90\u4ee5\u53ca\u5982\u4f55\u5c06\u6750\u8d28\u5c5e\u6027\u5206\u914d\u7ed9\u5bf9\u8c61\u3002\u6750\u8d28\u5c5e\u6027\u786e\u5b9a\u5bf9\u8c61\u4e0e\u5149\u7684\u76f8\u4e92\u4f5c\u7528\u65b9\u5f0f\u3002\u60a8\u8fd8\u5c06\u5b66\u4e60\u5982\u4f55\u5c06\u56fe\u50cf\u5e94\u7528\u5230\u8868\u9762\u4f5c\u4e3a\u7eb9\u7406\u3002\u5728\u4eca\u5929\u7684\u6807\u51c6\u4e0b\uff0cOpenGL 1.1\u4e2d\u7684\u5149\u3001\u6750\u8d28\u548c\u7eb9\u7406\u7684\u652f\u6301\u76f8\u5bf9\u7b80\u5355\u548c\u4e0d\u5b8c\u6574\u3002\u4f46\u662f\uff0c\u5b83\u4f7f\u7528\u7684\u6982\u5ff5\u4ecd\u7136\u662f\u73b0\u4ee3\u5b9e\u65f6\u56fe\u5f62\u751a\u81f3\u6700\u771f\u5b9e\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u57fa\u7840\u3002</p> <p>One of the goals of computer graphics is physical realism, that is, making images that look like they could be photographs of reality. This is not the only goal. For example, for scientific visualization, the goal is to use computer graphics to present information accurately and clearly. Artists can use computer graphics to create abstract rather than realistic art. However, realism is a major goal of some of the most visible uses of computer graphics, such as video games, movies, and advertising.</p> <p>One important aspect of physical realism is lighting: the play of light and shadow, the way that light reflects from different materials, the way it can bend or be diffracted as it passes through translucent objects. The techniques that are used to produce the most realistic graphics can take all these factors and more into account.</p> <p>However, another goal of computer graphics is speed. OpenGL, in particular, was designed for real-time graphics, where the time that is available for rendering an image is a fraction of a second. For an animated movie, it's OK if it takes hours to render each frame. But a video game is expected to render sixty frames every second. Even with the incredible speed of modern computer graphics hardware, compromises are necessary to get that speed. And thirty years ago, when OpenGL was still new, the compromises were a lot bigger</p> <p>In this chapter, we look at light and material in OpenGL 1.1. You will learn how to configure light sources and how to assign material properties to objects. Material properties determine how the objects interact with light. And you will learn how to apply an image to a surface as a texture. The support for light, material, and texture in OpenGL 1.1 is relatively crude and incomplete, by today's standards. But the concepts that it uses still serve as the foundation for modern real-time graphics and, to a significant extent, even for the most realistic computer graphics.</p>"},{"location":"cn/c4/s1/","title":"4.1 \u7167\u660e\u7b80\u4ecb","text":"<p>Introduction to Lighting</p> \u4e2d\u6587\u82f1\u6587 <p>\u7167\u660e\u662f\u5b9e\u73b0\u903c\u771f3D\u56fe\u5f62\u6700\u91cd\u8981\u7684\u8003\u8651\u56e0\u7d20\u4e4b\u4e00\u3002\u76ee\u6807\u662f\u6a21\u62df\u5149\u6e90\u4ee5\u53ca\u5b83\u4eec\u53d1\u51fa\u7684\u5149\u4e0e\u573a\u666f\u4e2d\u7269\u4f53\u7684\u4e92\u52a8\u65b9\u5f0f\u3002OpenGL \u9ed8\u8ba4\u7981\u7528\u7167\u660e\u8ba1\u7b97\u3002\u8fd9\u610f\u5473\u7740\u5f53 OpenGL \u5e94\u7528\u989c\u8272\u5230\u9876\u70b9\u65f6\uff0c\u5b83\u7b80\u5355\u5730\u4f7f\u7528\u7531 glColor* \u51fd\u6570\u8bbe\u7f6e\u7684\u5f53\u524d\u989c\u8272\u503c\u3002\u4e3a\u4e86\u8ba9 OpenGL \u8fdb\u884c\u7167\u660e\u8ba1\u7b97\uff0c\u60a8\u9700\u8981\u901a\u8fc7\u8c03\u7528 glEnable(GL_LIGHTING) \u6765\u542f\u7528\u7167\u660e\u3002\u5982\u679c\u60a8\u53ea\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u60a8\u4f1a\u53d1\u73b0\u60a8\u7684\u5bf9\u8c61\u5168\u662f\u5b8c\u5168\u9ed1\u8272\u7684\u3002\u5982\u679c\u60a8\u60f3\u770b\u5230\u5b83\u4eec\uff0c\u60a8\u5fc5\u987b\u6253\u5f00\u4e00\u4e9b\u5149\u6e90\u3002</p> <p>\u51b3\u5b9a\u8868\u9762\u4e0e\u5149\u4e92\u52a8\u65b9\u5f0f\u7684\u5c5e\u6027\u88ab\u79f0\u4e3a\u8868\u9762\u6750\u8d28\u3002\u4e00\u4e2a\u8868\u9762\u53ef\u4ee5\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u6750\u8d28\u5c5e\u6027\u3002\u5728\u6211\u4eec\u5b66\u4e60 OpenGL \u5149\u7167\u548c\u6750\u8d28\u7684 API \u4e4b\u524d\uff0c\u60a8\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e\u5149\u548c\u6750\u8d28\u5c5e\u6027\u7684\u4e00\u822c\u6982\u5ff5\u3002\u8fd9\u4e9b\u6982\u5ff5\u5728\u672c\u8282\u4e2d\u4ecb\u7ecd\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u8ba8\u8bba OpenGL 1.1 \u4e2d\u5b9e\u9645\u5982\u4f55\u8fdb\u884c\u7167\u660e\u3002</p> <p>Lighting is one of the most important considerations for realistic 3D graphics. The goal is to simulate light sources and the way that the light that they emit interacts with objects in the scene. Lighting calculations are disabled by default in OpenGL. This means that when OpenGL applies color to a vertex, it simply uses the current color value as set by the one of the functions glColor*. In order to get OpenGL to do lighting calculations, you need to enable lighting by calling glEnable(GL_LIGHTING). If that's all you do, you will find that your objects are all completely black. If you want to see them, you have to turn on some lights.</p> <p>The properties of a surface that determine how it interacts light are referred to as the material of the surface. A surface can have several different material properties. Before we study the OpenGL API for light and material, there are a few general ideas about light and material properties that you need to understand. Those ideas are introduced in this section. We postpone discussion of how lighting is actually done in OpenGL 1.1 until the next section.</p>"},{"location":"cn/c4/s1/#411-\u5149\u4e0e\u6750\u6599","title":"4.1.1 \u5149\u4e0e\u6750\u6599","text":"<p>Light and Material</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u5149\u7ebf\u7167\u5c04\u5230\u8868\u9762\u4e0a\u65f6\uff0c\u4e00\u90e8\u5206\u5149\u7ebf\u4f1a\u88ab\u53cd\u5c04\u3002\u53cd\u5c04\u7684\u5177\u4f53\u65b9\u5f0f\u590d\u6742\u5730\u4f9d\u8d56\u4e8e\u8868\u9762\u7684\u6027\u8d28\uff0c\u4e5f\u5c31\u662f\u6211\u6240\u8bf4\u7684\u8868\u9762\u6750\u8d28\u5c5e\u6027\u3002\u5728 OpenGL 1.1 \u4e2d\uff0c\u8fd9\u79cd\u590d\u6742\u6027\u88ab\u975e\u5e38\u7c97\u7565\u5730\u8fd1\u4f3c\u4e3a\u4e24\u79cd\u901a\u7528\u7c7b\u578b\u7684\u53cd\u5c04\uff1a\u955c\u9762\u53cd\u5c04\u548c\u6563\u5c04\u53cd\u5c04\u3002\u8fd9\u4e24\u79cd\u53cd\u5c04\u7c7b\u578b\u5728\u5176\u4ed63D\u56fe\u5f62\u7cfb\u7edf\u4e2d\u4e5f\u5f88\u91cd\u8981\u3002\uff08\u4f46\u89c1\u7b2c8.2\u8282\u4ee5\u4e86\u89e3\u6750\u6599\u7684\u66f4\u73b0\u4ee3\u89c2\u70b9\u3002\uff09</p> <p></p> <p>\u5728\u5b8c\u7f8e\u7684\u955c\u9762\u53cd\u5c04\uff08\u201c\u955c\u5b50\u822c\u7684\u201d\uff09\u4e2d\uff0c\u5165\u5c04\u5149\u7ebf\u4ece\u8868\u9762\u5b8c\u6574\u5730\u53cd\u5c04\u51fa\u6765\u3002\u53cd\u5c04\u5149\u7ebf\u4e0e\u8868\u9762\u5f62\u6210\u4e0e\u5165\u5c04\u5149\u7ebf\u76f8\u540c\u7684\u89d2\u5ea6\u3002\u53ea\u6709\u5f53\u89c2\u5bdf\u8005\u5904\u4e8e\u53cd\u5c04\u5149\u7ebf\u8def\u5f84\u4e0a\u7684\u5b8c\u5168\u6b63\u786e\u7684\u4f4d\u7f6e\u65f6\uff0c\u624d\u80fd\u770b\u5230\u53cd\u5c04\u5149\u7ebf\u3002\u5373\u4f7f\u6574\u4e2a\u8868\u9762\u88ab\u5149\u6e90\u7167\u4eae\uff0c\u89c2\u5bdf\u8005\u4e5f\u53ea\u80fd\u5728\u8868\u9762\u51e0\u4f55\u5f62\u72b6\u6b63\u786e\u7684\u90a3\u4e9b\u70b9\u4e0a\u770b\u5230\u5149\u6e90\u7684\u53cd\u5c04\u3002\u8fd9\u79cd\u53cd\u5c04\u88ab\u79f0\u4e3a\u955c\u9762\u9ad8\u5149\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u8ba4\u4e3a\u5149\u7ebf\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u5b8c\u7f8e\u5149\u7ebf\u88ab\u53cd\u5c04\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u66f4\u5bbd\u6216\u66f4\u7a84\u7684\u5149\u9525\u3002</p> <p></p> <p>\u6765\u81ea\u975e\u5e38\u5149\u6ed1\u8868\u9762\u7684\u955c\u9762\u53cd\u5c04\u4f1a\u4ea7\u751f\u975e\u5e38\u7a84\u7684\u53cd\u5c04\u5149\u9525\uff1b\u8fd9\u79cd\u6750\u6599\u4e0a\u7684\u955c\u9762\u9ad8\u5149\u5c0f\u800c\u5c16\u9510\u3002\u8f83\u6697\u7684\u8868\u9762\u4f1a\u4ea7\u751f\u66f4\u5bbd\u7684\u53cd\u5c04\u5149\u9525\u548c\u66f4\u5927\u3001\u66f4\u6a21\u7cca\u7684\u955c\u9762\u9ad8\u5149\u3002\u5728 OpenGL \u4e2d\uff0c\u51b3\u5b9a\u955c\u9762\u9ad8\u5149\u5927\u5c0f\u548c\u6e05\u6670\u5ea6\u7684\u6750\u8d28\u5c5e\u6027\u79f0\u4e3a\u5149\u6cfd\u5ea6\u3002OpenGL \u4e2d\u7684\u5149\u6cfd\u5ea6\u662f\u4e00\u4e2a\u8303\u56f4\u5728 0 \u5230 128 \u4e4b\u95f4\u7684\u6570\u5b57\u3002\u968f\u7740\u6570\u5b57\u7684\u589e\u52a0\uff0c\u955c\u9762\u9ad8\u5149\u53d8\u5f97\u66f4\u5c0f\u3002\u8fd9\u5f20\u56fe\u7247\u5c55\u793a\u4e86\u516b\u4e2a\u7403\u4f53\uff0c\u5b83\u4eec\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5149\u6cfd\u5ea6\u6750\u8d28\u5c5e\u6027\u7684\u503c\uff1a</p> <p></p> <p>\u6700\u5de6\u8fb9\u7684\u7403\u4f53\u7684\u5149\u6cfd\u5ea6\u4e3a 0\uff0c\u5bfc\u81f4\u4e00\u4e2a\u96be\u770b\u7684\u955c\u9762\u201c\u9ad8\u5149\u201d\uff0c\u51e0\u4e4e\u8986\u76d6\u4e86\u6574\u4e2a\u534a\u7403\u3002\u4ece\u5de6\u5230\u53f3\uff0c\u6bcf\u4e2a\u7403\u4f53\u7684\u5149\u6cfd\u5ea6\u589e\u52a0 16\u3002</p> <p>\u5728\u7eaf\u7cb9\u7684\u6563\u5c04\u53cd\u5c04\u4e2d\uff0c\u5165\u5c04\u5149\u7ebf\u4f1a\u5747\u5300\u5730\u5411\u6240\u6709\u65b9\u5411\u6563\u5c04\u3002\u89c2\u5bdf\u8005\u5c06\u770b\u5230\u6765\u81ea\u8868\u9762\u7684\u6240\u6709\u70b9\u53cd\u5c04\u7684\u5149\u7ebf\u3002\u5982\u679c\u5165\u5c04\u5149\u4ee5\u5e73\u884c\u5149\u7ebf\u5747\u5300\u7167\u4eae\u8868\u9762\uff0c\u90a3\u4e48\u8868\u9762\u5bf9\u89c2\u5bdf\u8005\u6765\u8bf4\u770b\u8d77\u6765\u662f\u5747\u5300\u7167\u660e\u7684\u3002\uff08\u5982\u679c\u4e0d\u540c\u7684\u5149\u7ebf\u4ee5\u4e0d\u540c\u7684\u89d2\u5ea6\u51fb\u4e2d\u8868\u9762\uff0c\u5c31\u50cf\u5b83\u4eec\u6765\u81ea\u9644\u8fd1\u7684\u706f\u6216\u8868\u9762\u662f\u5f2f\u66f2\u7684\uff0c\u90a3\u4e48\u5149\u7ebf\u5728\u8be5\u70b9\u7684\u7167\u660e\u91cf\u53d6\u51b3\u4e8e\u5149\u7ebf\u5728\u8be5\u70b9\u7684\u5165\u5c04\u89d2\u5ea6\uff0c\u800c\u4e0d\u662f\u4ece\u8be5\u70b9\u5230\u7528\u6237\u7684\u7ebf\u7684\u89d2\u5ea6\u3002\uff09</p> <p>\u5f53\u5149\u7ebf\u7167\u5c04\u5230\u8868\u9762\u65f6\uff0c\u4e00\u90e8\u5206\u5149\u53ef\u4ee5\u88ab\u5438\u6536\uff0c\u4e00\u90e8\u5206\u53ef\u4ee5\u88ab\u6563\u5c04\u53cd\u5c04\uff0c\u4e00\u90e8\u5206\u53ef\u4ee5\u88ab\u955c\u9762\u53cd\u5c04\u3002\u53cd\u5c04\u91cf\u5bf9\u4e0d\u540c\u6ce2\u957f\u53ef\u4ee5\u4e0d\u540c\u3002\u6750\u6599\u5bf9\u5404\u79cd\u6ce2\u957f\u5149\u7684\u53cd\u5c04\u7a0b\u5ea6\u6784\u6210\u4e86\u6750\u6599\u7684\u989c\u8272\u3002\u73b0\u5728\u6211\u4eec\u770b\u5230\u4e86\uff0c\u6750\u6599\u53ef\u4ee5\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u989c\u8272\u2014\u2014\u4e00\u4e2a\u6563\u5c04\u989c\u8272\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u6750\u6599\u5982\u4f55\u6563\u5c04\u53cd\u5c04\u5149\uff0c\u4ee5\u53ca\u4e00\u4e2a\u955c\u9762\u989c\u8272\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u5b83\u5982\u4f55\u955c\u9762\u53cd\u5c04\u5149\u3002\u6563\u5c04\u989c\u8272\u662f\u7269\u4f53\u7684\u57fa\u672c\u989c\u8272\u3002\u955c\u9762\u989c\u8272\u51b3\u5b9a\u4e86\u955c\u9762\u9ad8\u5149\u7684\u989c\u8272\u3002\u6563\u5c04\u548c\u955c\u9762\u989c\u8272\u53ef\u4ee5\u76f8\u540c\uff1b\u4f8b\u5982\uff0c\u8fd9\u901a\u5e38\u9002\u7528\u4e8e\u91d1\u5c5e\u8868\u9762\u3002\u6216\u8005\u5b83\u4eec\u53ef\u4ee5\u4e0d\u540c\uff1b\u4f8b\u5982\uff0c\u5851\u6599\u8868\u9762\u901a\u5e38\u65e0\u8bba\u6563\u5c04\u989c\u8272\u5982\u4f55\u90fd\u4f1a\u6709\u767d\u8272\u955c\u9762\u9ad8\u5149\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u6f14\u793a\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u6211\u4eec\u8fc4\u4eca\u8ba8\u8bba\u7684\u6750\u8d28\u5c5e\u6027\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb\u6f14\u793a\u4e2d\u7684\u5e2e\u52a9\u6587\u672c\u3002</p> <p></p> <p>OpenGL \u66f4\u8fdb\u4e00\u6b65\u3002\u5b9e\u9645\u4e0a\uff0c\u4e0e\u6750\u8d28\u76f8\u5173\u8fd8\u6709\u53e6\u5916\u4e24\u79cd\u989c\u8272\u3002\u7b2c\u4e09\u79cd\u989c\u8272\u662f\u6750\u8d28\u7684\u73af\u5883\u5149\u989c\u8272\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u8868\u9762\u5982\u4f55\u53cd\u5c04\u73af\u5883\u5149\u3002\u73af\u5883\u5149\u6307\u7684\u662f\u4e0d\u662f\u76f4\u63a5\u6765\u81ea\u5149\u6e90\u7684\u4e00\u822c\u7167\u660e\u6c34\u5e73\u3002\u5b83\u7531\u53cd\u5c04\u548c\u518d\u53cd\u5c04\u8fc7\u591a\u6b21\u7684\u5149\u7ec4\u6210\uff0c\u4ee5\u81f3\u4e8e\u4e0d\u518d\u6765\u81ea\u4efb\u4f55\u7279\u5b9a\u65b9\u5411\u3002\u73af\u5883\u5149\u5c31\u662f\u9634\u5f71\u4e0d\u662f\u7edd\u5bf9\u9ed1\u8272\u7684\u539f\u56e0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u73af\u5883\u5149\u53ea\u662f\u5bf9\u591a\u6b21\u53cd\u5c04\u5149\u7684\u73b0\u5b9e\u7684\u4e00\u79cd\u7c97\u7565\u8fd1\u4f3c\uff0c\u4f46\u8fd9\u6bd4\u5b8c\u5168\u5ffd\u7565\u591a\u6b21\u53cd\u5c04\u8981\u597d\u3002\u6750\u8d28\u7684\u73af\u5883\u5149\u989c\u8272\u51b3\u5b9a\u4e86\u5b83\u5c06\u5982\u4f55\u53cd\u5c04\u5404\u79cd\u6ce2\u957f\u7684\u6f2b\u53cd\u5c04\u5149\u3002\u73af\u5883\u5149\u989c\u8272\u901a\u5e38\u8bbe\u7f6e\u4e3a\u4e0e\u6563\u5c04\u989c\u8272\u76f8\u540c\u3002</p> <p>\u4e0e\u6750\u8d28\u76f8\u5173\u8054\u7684\u7b2c\u56db\u79cd\u989c\u8272\u662f\u81ea\u53d1\u5149\u989c\u8272\uff0c\u5b83\u5e76\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u4e0e\u524d\u4e09\u79cd\u989c\u8272\u5c5e\u6027\u76f8\u540c\u7684\u989c\u8272\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4e0e\u8868\u9762\u5982\u4f55\u53cd\u5c04\u5149\u65e0\u5173\u3002\u81ea\u53d1\u5149\u989c\u8272\u662f\u4e0d\u6765\u81ea\u4efb\u4f55\u5916\u90e8\u6765\u6e90\u7684\u989c\u8272\uff0c\u56e0\u6b64\u4f3c\u4e4e\u662f\u7531\u6750\u6599\u672c\u8eab\u53d1\u51fa\u7684\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u7269\u4f53\u53d1\u51fa\u7684\u5149\u4f1a\u7167\u4eae\u5176\u4ed6\u7269\u4f53\uff0c\u800c\u662f\u610f\u5473\u7740\u5373\u4f7f\u6ca1\u6709\u5149\u6e90\uff08\u751a\u81f3\u6ca1\u6709\u73af\u5883\u5149\uff09\uff0c\u7269\u4f53\u4e5f\u53ef\u4ee5\u88ab\u770b\u5230\u3002\u5728\u5149\u7ebf\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\uff0c\u7269\u4f53\u4f1a\u6bd4\u4ec5\u7531\u7167\u660e\u5149\u89e3\u91ca\u7684\u66f4\u4eae\uff0c\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bb2\uff0c\u5b83\u770b\u8d77\u6765\u4f1a\u53d1\u5149\u3002\u81ea\u53d1\u5149\u989c\u8272\u901a\u5e38\u662f\u9ed1\u8272\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u7269\u4f53\u6839\u672c\u6ca1\u6709\u81ea\u53d1\u5149\u3002</p> <p>\u56db\u79cd\u6750\u8d28\u989c\u8272\u5c5e\u6027\u4e2d\u7684\u6bcf\u4e00\u79cd\u90fd\u662f\u901a\u8fc7\u4e09\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\u7684\uff0c\u8fd9\u4e9b\u6570\u5b57\u7ed9\u51fa\u4e86\u989c\u8272\u7684 RGB\uff08\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\uff09\u5206\u91cf\u3002\u771f\u5b9e\u7684\u5149\u53ef\u4ee5\u5305\u542b\u65e0\u9650\u6570\u91cf\u7684\u4e0d\u540c\u6ce2\u957f\u3002RGB \u989c\u8272\u53ea\u7531\u4e09\u4e2a\u5206\u91cf\u7ec4\u6210\uff0c\u4f46\u7531\u4e8e\u4eba\u7c7b\u8272\u89c9\u7684\u7279\u6027\uff0c\u8fd9\u5728\u5927\u591a\u6570\u76ee\u7684\u4e2d\u662f\u4e00\u4e2a\u76f8\u5f53\u597d\u7684\u8fd1\u4f3c\u3002\uff08\u89c1\u5c0f\u82822.1.4\u3002\uff09\u6750\u8d28\u989c\u8272\u4e5f\u53ef\u4ee5\u6709 alpha \u5206\u91cf\uff0c\u4f46\u5728 OpenGL \u4e2d\u552f\u4e00\u4f7f\u7528\u7684 alpha \u5206\u91cf\u662f\u6563\u5c04\u6750\u8d28\u989c\u8272\u7684 alpha \u5206\u91cf\u3002</p> <p>\u5728\u73af\u5883\u5149\u3001\u6563\u5c04\u6216\u955c\u9762\u989c\u8272\u7684\u7ea2\u8272\u3001\u84dd\u8272\u548c\u7eff\u8272\u5206\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u201c\u989c\u8272\u201d\u8fd9\u4e2a\u672f\u8bed\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u53cd\u5c04\u7387\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u989c\u8272\u7684\u7ea2\u8272\u5206\u91cf\u7ed9\u51fa\u4e86\u51fb\u4e2d\u8868\u9762\u7684\u7ea2\u5149\u7684\u6bd4\u4f8b\uff0c\u8be5\u8868\u9762\u88ab\u53cd\u5c04\uff0c\u7eff\u8272\u548c\u84dd\u8272\u4e5f\u662f\u5982\u6b64\u3002\u6709\u4e09\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u53cd\u5c04\u989c\u8272\uff0c\u56e0\u4e3a OpenGL \u4e2d\u6709\u4e09\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5149\uff0c\u800c\u6750\u6599\u53ef\u4ee5\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u5149\u6709\u4e0d\u540c\u7684\u53cd\u5c04\u7387\u3002</p> <p>When light strikes a surface, some of it will be reflected. Exactly how it reflects depends in a complicated way on the nature of the surface, what I am calling the material properties of the surface. In OpenGL 1.1, the complexity is approximated\u2014very crudely\u2014by two general types of reflection, specular reflection and diffuse reflection. These two types of reflection are important in other 3D graphics systems as well. (But see Section 8.2 for a more modern view of materials.)</p> <p></p> <p>In perfect specular (\"mirror-like\") reflection, an incoming ray of light is reflected from the surface intact. The reflected ray makes the same angle with the surface as the incoming ray. A viewer can see the reflected ray only if the viewer is in exactly the right position, somewhere along the path of the reflected ray. Even if the entire surface is illuminated by the light source, the viewer will only see the reflection of the light source at those points on the surface where the geometry is right. Such reflections are referred to as specular highlights. In practice, we think of a ray of light as being reflected not as a single perfect ray, but as a cone of light, which can be more or less narrow.</p> <p></p> <p>Specular reflection from a very shiny surface produces very narrow cones of reflected light; specular highlights on such a material are small and sharp. A duller surface will produce wider cones of reflected light and bigger, fuzzier specular highlights. In OpenGL, the material property that determines the size and sharpness of specular highlights is called shininess. Shininess in OpenGL is a number in the range 0 to 128. As the number increases, specular highlights get smaller. This image shows eight spheres that differ only in the value of the shininess material property:</p> <p></p> <p>For the sphere on the left, the shininess is 0, which leads to an ugly specular \"highlight\" that almost covers an entire hemisphere. Going from left to right, the shininess increases by 16 from one sphere to the next.</p> <p>In pure diffuse reflection, an incoming ray of light is scattered in all directions equally. A viewer would see reflected light from all points on the surface. If the incoming light arrives in parallel rays that evenly illuminate the surface, then the surface would appear to the viewer to be evenly illuminated. (If different rays strike the surface at different angles, as they would if they come from a nearby lamp or if the surface is curved, then the amount of illumination at a point depends on the angle at which the ray hits the surface at that point, but not on the angle of the line from that point to the user.)</p> <p>When light strikes a surface, some of the light can be absorbed, some can be reflected diffusely, and some can be reflected specularly. The amount of reflection can be different for different wavelengths. The degree to which a material reflects light of various wavelengths is what constitutes the color of the material. We now see that a material can have two different colors\u2014a diffuse color that tells how the material reflects light diffusely, and a specular color that tells how it reflects light specularly. The diffuse color is the basic color of the object. The specular color determines the color of specular highlights. The diffuse and specular colors can be the same; for example, this is often true for metallic surfaces. Or they can be different; for example, a plastic surface will often have white specular highlights no matter what the diffuse color.</p> <p>here is a demo that lets you experiment with the material properties that we have discussed so far. Read the help text in the demo for more information.</p> <p></p> <p>OpenGL goes even further. In fact, there are two more colors associated with a material. The third color is the ambient color of the material, which tells how the surface reflects ambient light. Ambient light refers to a general level of illumination that does not come directly from a light source. It consists of light that has been reflected and re-reflected so many times that it is no longer coming from any particular direction. Ambient light is why shadows are not absolutely black. In fact, ambient light is only a crude approximation for the reality of multiply reflected light, but it is better than ignoring multiple reflections entirely. The ambient color of a material determines how it will reflect various wavelengths of ambient light. Ambient color is generally set to be the same as the diffuse color.</p> <p>The fourth color associated with a material is an emission color, which is not really a color in the same sense as the first three color properties. That is, it has nothing to do with how the surface reflects light. The emission color is color that does not come from any external source, and therefore seems to be emitted by the material itself. This does not mean that the object is giving off light that will illuminate other objects, but it does mean that the object can be seen even if there is no source of light (not even ambient light). In the presence of light, the object will be brighter than can be accounted for by the light that illuminates it, and in that sense it appears to glow. The emission color is usually black; that is, the object has no emission at all.</p> <p>Each of the four material color properties is specified in terms of three numbers giving the RGB (red, green, and blue) components of the color. Real light can contain an infinite number of different wavelengths. An RGB color is made up of just three components, but the nature of human color vision makes this a pretty good approximation for most purposes. (See Subsection 2.1.4.) Material colors can also have alpha components, but the only alpha component that is ever used in OpenGL is the one for the diffuse material color.</p> <p>In the case of the red, blue, and green components of the ambient, diffuse, or specular color, the term \"color\" really means reflectivity. That is, the red component of a color gives the proportion of red light hitting the surface that is reflected by that surface, and similarly for green and blue. There are three different types of reflective color because there are three different types of light in OpenGL, and a material can have a different reflectivity for each type of light.</p>"},{"location":"cn/c4/s1/#412-\u5149\u5c5e\u6027","title":"4.1.2 \u5149\u5c5e\u6027","text":"<p>Light Properties</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0d\u8003\u8651\u73af\u5883\u5149\uff0c\u73af\u5883\u4e2d\u7684\u5149\u6765\u81ea\u5149\u6e90\uff0c\u4f8b\u5982\u706f\u6216\u592a\u9633\u3002\u5b9e\u9645\u4e0a\uff0c\u706f\u548c\u592a\u9633\u662f\u4e24\u79cd\u672c\u8d28\u4e0a\u4e0d\u540c\u7684\u5149\u6e90\u7684\u4f8b\u5b50\uff1a\u70b9\u5149\u6e90\u548c\u65b9\u5411\u5149\u3002\u70b9\u5149\u6e90\u4f4d\u4e8e3D\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5e76\u4ece\u8be5\u70b9\u5411\u6240\u6709\u65b9\u5411\u53d1\u5c04\u5149\u3002\u5bf9\u4e8e\u65b9\u5411\u5149\uff0c\u6240\u6709\u5149\u90fd\u6765\u81ea\u540c\u4e00\u65b9\u5411\uff0c\u4f7f\u5149\u7ebf\u5e73\u884c\u3002\u592a\u9633\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u65b9\u5411\u5149\u6e90\uff0c\u56e0\u4e3a\u5b83\u8ddd\u79bb\u5982\u6b64\u4e4b\u8fdc\uff0c\u4ee5\u81f3\u4e8e\u5f53\u592a\u9633\u5149\u5230\u8fbe\u5730\u7403\u65f6\uff0c\u5149\u7ebf\u5b9e\u9645\u4e0a\u662f\u5e73\u884c\u7684\u3002</p> <p></p> <p>\u5149\u53ef\u4ee5\u6709\u989c\u8272\u3002\u5b9e\u9645\u4e0a\uff0c\u5728OpenGL\u4e2d\uff0c\u6bcf\u4e2a\u5149\u6e90\u90fd\u6709\u4e09\u79cd\u989c\u8272\uff1a\u73af\u5883\u8272\u3001\u6563\u5c04\u8272\u548c\u955c\u9762\u8272\u3002\u6b63\u5982\u6750\u6599\u7684\u989c\u8272\u66f4\u51c6\u786e\u5730\u79f0\u4e3a\u53cd\u5c04\u7387\uff0c\u5149\u7684\u989c\u8272\u66f4\u51c6\u786e\u5730\u79f0\u4e3a\u5f3a\u5ea6\u6216\u80fd\u91cf\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u989c\u8272\u6307\u7684\u662f\u5149\u7684\u80fd\u91cf\u5982\u4f55\u5728\u4e0d\u540c\u6ce2\u957f\u4e4b\u95f4\u5206\u5e03\u3002\u771f\u6b63\u7684\u5149\u53ef\u4ee5\u5305\u542b\u65e0\u9650\u6570\u91cf\u7684\u4e0d\u540c\u6ce2\u957f\uff1b\u5f53\u8fd9\u4e9b\u6ce2\u957f\u88ab\u5206\u79bb\u65f6\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u989c\u8272\u7684\u5149\u8c31\u6216\u5f69\u8679\u3002\u5728\u8ba1\u7b97\u673a\u4e0a\u901a\u5e38\u6a21\u62df\u7684\u5149\u53ea\u5305\u542b\u4e09\u79cd\u57fa\u672c\u989c\u8272\uff1a\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u3002\u6240\u4ee5\uff0c\u5c31\u50cf\u6750\u6599\u989c\u8272\u4e00\u6837\uff0c\u5149\u7684\u989c\u8272\u662f\u901a\u8fc7\u7ed9\u51fa\u4ee3\u8868\u5149\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u5f3a\u5ea6\u7684\u4e09\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\u7684\u3002</p> <p>\u5149\u7684\u6563\u5c04\u5f3a\u5ea6\u662f\u4e0e\u6563\u5c04\u6750\u6599\u989c\u8272\u4e92\u52a8\u7684\u5149\u7684\u65b9\u9762\uff0c\u5149\u7684\u955c\u9762\u5f3a\u5ea6\u662f\u4e0e\u955c\u9762\u6750\u6599\u989c\u8272\u4e92\u52a8\u7684\u90e8\u5206\u3002\u901a\u5e38\uff0c\u6563\u5c04\u548c\u955c\u9762\u5149\u5f3a\u5ea6\u662f\u76f8\u540c\u7684\u3002</p> <p>\u5149\u7684\u73af\u5883\u5f3a\u5ea6\u7684\u5de5\u4f5c\u539f\u7406\u7565\u6709\u4e0d\u540c\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u73af\u5883\u5149\u662f\u4e0d\u53ef\u76f4\u63a5\u8ffd\u6eaf\u5230\u4efb\u4f55\u5149\u6e90\u7684\u5149\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u5fc5\u987b\u6765\u81ea\u67d0\u4e2a\u5730\u65b9\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u6253\u5f00\u4e00\u4e2a\u5149\u6e90\u5e94\u8be5\u589e\u52a0\u73af\u5883\u4e2d\u7684\u73af\u5883\u5149\u7684\u603b\u4f53\u6c34\u5e73\u3002\u5728OpenGL\u4e2d\uff0c\u5149\u7684\u73af\u5883\u5f3a\u5ea6\u88ab\u6dfb\u52a0\u5230\u73af\u5883\u5149\u7684\u603b\u4f53\u6c34\u5e73\u4e2d\u3002\uff08\u4e5f\u53ef\u4ee5\u6709\u5168\u5c40\u73af\u5883\u5149\uff0c\u5b83\u4e0e\u573a\u666f\u4e2d\u7684\u4efb\u4f55\u5149\u6e90\u90fd\u4e0d\u76f8\u5173\u3002\uff09\u73af\u5883\u5149\u4e0e\u6750\u6599\u7684\u73af\u5883\u8272\u4e92\u52a8\uff0c\u8fd9\u79cd\u4e92\u52a8\u4e0d\u4f9d\u8d56\u4e8e\u5149\u6e90\u6216\u89c2\u5bdf\u8005\u7684\u4f4d\u7f6e\u3002\u6240\u4ee5\uff0c\u5149\u4e0d\u5fc5\u7167\u5c04\u5728\u7269\u4f53\u4e0a\u624d\u80fd\u4f7f\u7269\u4f53\u7684\u73af\u5883\u8272\u53d7\u5230\u5149\u6e90\u7684\u5f71\u54cd\uff1b\u53ea\u8981\u6253\u5f00\u5149\u6e90\u5373\u53ef\u3002</p> <p>\u6211\u518d\u6b21\u5f3a\u8c03\uff0c\u8fd9\u53ea\u662f\u4e00\u79cd\u8fd1\u4f3c\uff0c\u800c\u4e14\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b83\u5e76\u6ca1\u6709\u57fa\u4e8e\u73b0\u5b9e\u4e16\u754c\u7269\u7406\u7684\u57fa\u7840\u3002\u771f\u6b63\u7684\u5149\u6e90\u6ca1\u6709\u5206\u5f00\u7684\u73af\u5883\u3001\u6563\u5c04\u548c\u955c\u9762\u989c\u8272\uff0c\u8bb8\u591a\u8ba1\u7b97\u673a\u56fe\u5f62\u7cfb\u7edf\u4f7f\u7528\u5355\u4e00\u989c\u8272\u6765\u6a21\u62df\u5149\u6e90\u3002</p> <p>Leaving aside ambient light, the light in an environment comes from a light source such as a lamp or the sun. In fact, a lamp and the sun are examples of two essentially different kinds of light source: a point light and a directional light. A point light source is located at a point in 3D space, and it emits light in all directions from that point. For a directional light, all the light comes from the same direction, so that the rays of light are parallel. The sun is considered to be a directional light source since it is so far away that light rays from the sun are essentially parallel when they get to the Earth .</p> <p></p> <p>A light can have color. In fact, in OpenGL, each light source has three colors: an ambient color, a diffuse color, and a specular color. Just as the color of a material is more properly referred to as reflectivity, color of a light is more properly referred to as intensity or energy. More exactly, color refers to how the light's energy is distributed among different wavelengths. Real light can contain an infinite number of different wavelengths; when the wavelengths are separated, you get a spectrum or rainbow containing a continuum of colors. Light as it is usually modeled on a computer contains only the three basic colors, red, green, and blue. So, just like material color, light color is specified by giving three numbers representing the red, green, and blue intensities of the light.</p> <p>The diffuse intensity of a light is the aspect of the light that interacts with diffuse material color, and the specular intensity of a light is what interacts with specular material color. It is common for the diffuse and specular light intensities to be the same.</p> <p>The ambient intensity of a light works a little differently. Recall that ambient light is light that is not directly traceable to any light source. Still, it has to come from somewhere and we can imagine that turning on a light should increase the general level of ambient light in the environment. The ambient intensity of a light in OpenGL is added to the general level of ambient light. (There can also be global ambient light, which is not associated with any of the light sources in the scene.) Ambient light interacts with the ambient color of a material, and this interaction has no dependence on the position of the light sources or viewer. So, a light doesn't have to shine on an object for the object's ambient color to be affected by the light source; the light source just has to be turned on.</p> <p>I should emphasize again that this is all just an approximation, and in this case not one that has a basis in the physics of the real world. Real light sources do not have separate ambient, diffuse, and specular colors, and many computer graphics systems model light sources using just one color.</p>"},{"location":"cn/c4/s1/#413-\u6cd5\u5411\u91cf","title":"4.1.3 \u6cd5\u5411\u91cf","text":"<p>Normal Vectors</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u7ebf\u7167\u5c04\u5728\u8868\u9762\u4e0a\u4ea7\u751f\u7684\u89c6\u89c9\u6548\u5e94\u53d6\u51b3\u4e8e\u8868\u9762\u548c\u5149\u7ebf\u7684\u5c5e\u6027\u3002\u4f46\u5b83\u4e5f\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u5149\u7ebf\u4e0e\u8868\u9762\u63a5\u89e6\u7684\u89d2\u5ea6\u3002\u89d2\u5ea6\u5bf9\u4e8e\u955c\u9762\u53cd\u5c04\u81f3\u5173\u91cd\u8981\uff0c\u4e5f\u4f1a\u5f71\u54cd\u6563\u5c04\u53cd\u5c04\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5373\u4f7f\u66f2\u9762\u7684\u989c\u8272\u5747\u5300\uff0c\u4e0d\u540c\u70b9\u4e0a\u7684\u5f2f\u66f2\u3001\u53d1\u5149\u8868\u9762\u770b\u8d77\u6765\u4e5f\u4f1a\u4e0d\u540c\u3002\u4e3a\u4e86\u8ba1\u7b97\u8fd9\u4e2a\u89d2\u5ea6\uff0cOpenGL \u9700\u8981\u77e5\u9053\u8868\u9762\u9762\u5411\u7684\u65b9\u5411\u3002\u8fd9\u4e2a\u65b9\u5411\u7531\u4e00\u4e2a\u5782\u76f4\u4e8e\u8868\u9762\u7684\u5411\u91cf\u6307\u5b9a\u3002\"\u5782\u76f4\"\u7684\u53e6\u4e00\u4e2a\u8bcd\u662f \"\u6cd5\u5411\"\uff0c\u4e00\u4e2a\u975e\u96f6\u5411\u91cf\u5982\u679c\u5728\u7ed9\u5b9a\u70b9\u4e0a\u5782\u76f4\u4e8e\u8868\u9762\uff0c\u5219\u79f0\u4e3a\u8be5\u8868\u9762\u7684 \u6cd5\u5411\u91cf\u3002\u5728\u4f7f\u7528\u7167\u660e\u8ba1\u7b97\u65f6\uff0c\u6cd5\u5411\u91cf\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8e\u4e00\u3002\u957f\u5ea6\u4e3a\u4e00\u7684\u6cd5\u5411\u91cf\u79f0\u4e3a \u5355\u4f4d\u6cd5\u5411\u91cf\u3002\u4e3a\u4e86\u5728 OpenGL \u4e2d\u8fdb\u884c\u9002\u5f53\u7684\u7167\u660e\u8ba1\u7b97\uff0c\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u5355\u4f4d\u6cd5\u5411\u91cf\u3002\u7136\u800c\uff0c\u7ed9\u5b9a\u4efb\u4f55\u6cd5\u5411\u91cf\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u9664\u4ee5\u5176\u957f\u5ea6\u6765\u8ba1\u7b97\u5355\u4f4d\u6cd5\u5411\u91cf\uff08\u89c1\u7b2c3.5\u8282\u5173\u4e8e\u5411\u91cf\u53ca\u5176\u957f\u5ea6\u7684\u8ba8\u8bba\uff09\u3002</p> <p>\u7531\u4e8e\u8868\u9762\u53ef\u80fd\u662f\u5f2f\u66f2\u7684\uff0c\u5b83\u5728\u4e0d\u540c\u70b9\u4e0a\u53ef\u80fd\u9762\u5411\u4e0d\u540c\u7684\u65b9\u5411\u3002\u6240\u4ee5\uff0c\u6cd5\u5411\u91cf\u4e0e\u8868\u9762\u4e0a\u7684\u4e00\u4e2a\u7279\u5b9a\u70b9\u76f8\u5173\u8054\u3002\u5728 OpenGL \u4e2d\uff0c\u6cd5\u5411\u91cf\u5b9e\u9645\u4e0a\u53ea\u5206\u914d\u7ed9\u539f\u8bed\u7684\u9876\u70b9\u3002\u539f\u8bed\u9876\u70b9\u4e0a\u7684\u6cd5\u5411\u91cf\u7528\u4e8e\u5bf9\u6574\u4e2a\u539f\u8bed\u8fdb\u884c\u7167\u660e\u8ba1\u7b97\u3002</p> <p>\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u4e3a\u591a\u8fb9\u5f62\u7684\u6bcf\u4e2a\u9876\u70b9\u5206\u914d\u4e0d\u540c\u7684\u6cd5\u5411\u91cf\u3002\u73b0\u5728\uff0c\u4f60\u53ef\u80fd\u4f1a\u95ee\u81ea\u5df1\uff0c\"\u591a\u8fb9\u5f62\u7684\u6240\u6709\u6cd5\u5411\u91cf\u4e0d\u662f\u90fd\u6307\u5411\u540c\u4e00\u65b9\u5411\u5417\uff1f\"\u6bd5\u7adf\uff0c\u591a\u8fb9\u5f62\u662f\u5e73\u7684\uff1b\u591a\u8fb9\u5f62\u7684\u5782\u76f4\u65b9\u5411\u4e0d\u4f1a\u968f\u7740\u70b9\u7684\u53d8\u5316\u800c\u53d8\u5316\u3002\u8fd9\u662f\u771f\u7684\uff0c\u5982\u679c\u4f60\u7684\u76ee\u6807\u662f\u663e\u793a\u4e00\u4e2a\u7531\u5e73\u9762\u591a\u8fb9\u5f62\u6784\u6210\u7684\u591a\u9762\u4f53\u5bf9\u8c61\uff0c\u90a3\u4e48\u786e\u5b9e\uff0c\u8fd9\u4e9b\u591a\u8fb9\u5f62\u7684\u6bcf\u4e2a\u6cd5\u5411\u91cf\u90fd\u5e94\u8be5\u6307\u5411\u540c\u4e00\u65b9\u5411\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u591a\u9762\u4f53\u7ecf\u5e38\u7528\u6765\u8fd1\u4f3c\u7403\u4f53\u7b49\u66f2\u9762\u3002\u5982\u679c\u4f60\u771f\u6b63\u7684\u76ee\u6807\u662f\u5236\u4f5c\u770b\u8d77\u6765\u50cf\u66f2\u9762\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u4f60\u60f3\u4f7f\u7528\u7684\u6cd5\u5411\u91cf\u5e94\u8be5\u5782\u76f4\u4e8e\u5b9e\u9645\u8868\u9762\uff0c\u800c\u4e0d\u662f\u8fd1\u4f3c\u5b83\u7684\u591a\u9762\u4f53\u3002\u770b\u8fd9\u4e2a\u4f8b\u5b50\uff1a</p> <p></p> <p>\u8fd9\u5f20\u56fe\u7247\u4e2d\u7684\u4e24\u4e2a\u5bf9\u8c61\u7531\u4e00\u7cfb\u5217\u77e9\u5f62\u5e26\u7ec4\u6210\u3002\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u51e0\u4f55\u5f62\u72b6\uff0c\u4f46\u5b83\u4eec\u770b\u8d77\u6765\u975e\u5e38\u4e0d\u540c\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u6cd5\u5411\u91cf\u3002\u5bf9\u4e8e\u4e0a\u9762\u7684\u5bf9\u8c61\uff0c\u77e9\u5f62\u5e26\u5e94\u8be5\u8fd1\u4f3c\u4e00\u4e2a\u5e73\u6ed1\u8868\u9762\u3002\u77e9\u5f62\u7684\u9876\u70b9\u662f\u8be5\u8868\u9762\u4e0a\u7684\u70b9\uff0c\u6211\u6839\u672c\u4e0d\u60f3\u770b\u5230\u77e9\u5f62\u2014\u2014\u6211\u60f3\u770b\u5230\u7684\u662f\u66f2\u9762\uff0c\u6216\u8005\u81f3\u5c11\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8fd1\u4f3c\u3002\u6240\u4ee5\u5bf9\u4e8e\u4e0a\u9762\u7684\u5bf9\u8c61\uff0c\u5f53\u6211\u5728\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u6cd5\u5411\u91cf\u65f6\uff0c\u6211\u4f7f\u7528\u7684\u5411\u91cf\u662f\u5782\u76f4\u4e8e\u8868\u9762\u800c\u4e0d\u662f\u77e9\u5f62\u7684\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e\u4e0b\u9762\u7684\u7269\u4f53\uff0c\u6211\u8ba4\u4e3a\u5b83\u771f\u7684\u662f\u4e00\u4e2a\u77e9\u5f62\u5e26\uff0c\u6211\u4f7f\u7528\u7684\u6cd5\u5411\u91cf\u5b9e\u9645\u4e0a\u5782\u76f4\u4e8e\u77e9\u5f62\u3002\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ef4\u63d2\u56fe\uff0c\u663e\u793a\u4e86\u7528\u4e8e\u4e24\u5e45\u56fe\u7247\u7684\u6cd5\u5411\u91cf\uff1a</p> <p></p> <p>\u7c97\u84dd\u7ebf\u8868\u793a\u77e9\u5f62\uff0c\u4ece\u4e0a\u65b9\u8fb9\u7f18\u770b\u3002\u7bad\u5934\u8868\u793a\u6cd5\u5411\u91cf\u3002\u6bcf\u4e2a\u77e9\u5f62\u6709\u4e24\u4e2a\u6cd5\u5411\u91cf\uff0c\u6bcf\u4e2a\u7aef\u70b9\u4e00\u4e2a\u3002\u6bcf\u4e2a\u9876\u70b9\u662f\u4e24\u4e2a\u77e9\u5f62\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5728\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u4e86\u4e24\u4e2a\u6cd5\u5411\u91cf\u3002</p> <p>\u5728\u63d2\u56fe\u7684\u4e0b\u534a\u90e8\u5206\uff0c\u4e24\u4e2a\u5728\u70b9\u4e0a\u76f8\u9047\u7684\u77e9\u5f62\u5728\u8be5\u70b9\u4e0a\u6709\u4e0d\u540c\u7684\u6cd5\u5411\u91cf\u3002\u77e9\u5f62\u7684\u6cd5\u5411\u91cf\u5b9e\u9645\u4e0a\u5782\u76f4\u4e8e\u77e9\u5f62\u3002\u5f53\u4f60\u4ece\u4e00\u5757\u77e9\u5f62\u79fb\u52a8\u5230\u4e0b\u4e00\u5757\u65f6\uff0c\u65b9\u5411\u4f1a\u53d1\u751f\u7a81\u7136\u53d8\u5316\uff0c\u6240\u4ee5\u5f53\u4e00\u5757\u77e9\u5f62\u4e0e\u4e0b\u4e00\u5757\u77e9\u5f62\u76f8\u9047\u65f6\uff0c\u4e24\u4e2a\u77e9\u5f62\u7684\u6cd5\u5411\u91cf\u662f\u4e0d\u540c\u7684\u3002\u5728\u6e32\u67d3\u56fe\u50cf\u4e0a\u7684\u89c6\u89c9\u6548\u5e94\u662f\u7a81\u7136\u7684\u9634\u5f71\u53d8\u5316\uff0c\u88ab\u611f\u77e5\u4e3a\u4e24\u4e2a\u77e9\u5f62\u4e4b\u95f4\u7684\u89d2\u843d\u6216\u8fb9\u7f18\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u4e0a\u534a\u90e8\u5206\uff0c\u5411\u91cf\u5782\u76f4\u4e8e\u901a\u8fc7\u77e9\u5f62\u7aef\u70b9\u7684\u66f2\u9762\u3002\u5f53\u4e24\u4e2a\u77e9\u5f62\u5171\u4eab\u4e00\u4e2a\u9876\u70b9\u65f6\uff0c\u5b83\u4eec\u4e5f\u5728\u8be5\u9876\u70b9\u5171\u4eab\u76f8\u540c\u7684\u6cd5\u5411\u91cf\u3002\u5728\u89c6\u89c9\u4e0a\uff0c\u8fd9\u6d88\u9664\u4e86\u9634\u5f71\u7684\u7a81\u7136\u53d8\u5316\uff0c\u4ea7\u751f\u4e86\u66f4\u50cf\u5e73\u6ed1\u66f2\u9762\u7684\u5916\u89c2\u3002</p> <p>\u5206\u914d\u6cd5\u5411\u91cf\u7684\u4e24\u79cd\u65b9\u5f0f\u79f0\u4e3a \u5e73\u9762\u7740\u8272 \u548c \u5e73\u6ed1\u7740\u8272\u3002\u5e73\u9762\u7740\u8272\u4f7f\u8868\u9762\u770b\u8d77\u6765\u50cf\u7531\u5e73\u9762\u4fa7\u9762\u6216\u9762\u7ec4\u6210\u3002\u5e73\u6ed1\u7740\u8272\u4f7f\u5b83\u770b\u8d77\u6765\u66f4\u50cf\u4e00\u4e2a\u5e73\u6ed1\u8868\u9762\u3002\u8fd9\u4e2a\u6f14\u793a\u5c06\u5e2e\u52a9\u60a8\u7406\u89e3\u8fd9\u4e9b\u6982\u5ff5\u3002\u5b83\u663e\u793a\u4e86\u4e00\u4e2a\u591a\u8fb9\u5f62\u7f51\u683c\u88ab\u7528\u6765\u8fd1\u4f3c\u4e00\u4e2a\u7403\u4f53\uff0c\u53ef\u4ee5\u9009\u62e9\u5e73\u6ed1\u6216\u5e73\u9762\u7740\u8272\u3002\u4f7f\u7528\u6ed1\u5757\u63a7\u5236\u7f51\u683c\u4e2d\u7684\u591a\u8fb9\u5f62\u6570\u91cf\u3002</p> <p></p> <p>\u6240\u6709\u8fd9\u4e9b\u7684\u7ed3\u679c\u662f\uff0c\u60a8\u53ef\u4ee5\u968f\u610f\u9009\u62e9\u9002\u5408\u60a8\u76ee\u7684\u7684\u4efb\u4f55\u6cd5\u5411\u91cf\u3002\u9876\u70b9\u5904\u7684\u6cd5\u5411\u91cf\u662f\u60a8\u6240\u8bf4\u7684\u4efb\u4f55\u4e1c\u897f\uff0c\u5b83\u4e0d\u5fc5\u771f\u7684\u5782\u76f4\u4e8e\u591a\u8fb9\u5f62\u3002\u60a8\u9009\u62e9\u7684\u6cd5\u5411\u91cf\u5e94\u8be5\u53d6\u51b3\u4e8e\u60a8\u8bd5\u56fe\u5efa\u6a21\u7684\u5bf9\u8c61\u3002</p> <p>\u5728\u9009\u62e9\u6cd5\u5411\u91cf\u65f6\u8fd8\u6709\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u8868\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\u603b\u662f\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u5355\u4f4d\u6cd5\u5411\u91cf\uff0c\u6307\u5411\u76f8\u53cd\u7684\u65b9\u5411\u30023D \u4e2d\u7684\u591a\u8fb9\u5f62\u6709\u4e24\u4e2a\u9762\uff0c\u9762\u5411\u76f8\u53cd\u7684\u65b9\u5411\u3002OpenGL \u5c06\u5176\u4e2d\u4e00\u4e2a\u89c6\u4e3a\u524d\u8868\u9762\uff0c\u53e6\u4e00\u4e2a\u89c6\u4e3a\u540e\u8868\u9762\u3002OpenGL \u901a\u8fc7\u6307\u5b9a\u9876\u70b9\u7684\u987a\u5e8f\u6765\u533a\u5206\u5b83\u4eec\u3002\uff08\u89c1\u5c0f\u82823.4.1\u3002\uff09\u9ed8\u8ba4\u89c4\u5219\u662f\uff0c\u5f53\u89c2\u5bdf\u524d\u8868\u9762\u65f6\uff0c\u9876\u70b9\u7684\u987a\u5e8f\u662f\u9006\u65f6\u9488\u7684\uff0c\u89c2\u5bdf\u540e\u8868\u9762\u65f6\u662f\u987a\u65f6\u9488\u7684\u3002\u5f53\u591a\u8fb9\u5f62\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u65f6\uff0c\u8fd9\u4e2a\u89c4\u5219\u8ba9 OpenGL \u77e5\u9053\u6b63\u5728\u663e\u793a\u7684\u662f\u524d\u8868\u9762\u8fd8\u662f\u540e\u8868\u9762\u3002\u5728\u4e3a\u591a\u8fb9\u5f62\u6307\u5b9a\u6cd5\u5411\u91cf\u65f6\uff0c\u5411\u91cf\u5e94\u8be5\u6307\u5411\u591a\u8fb9\u5f62\u7684\u524d\u8868\u9762\u3002\u8fd9\u662f\u53f3\u624b\u89c4\u5219\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\u3002\u5982\u679c\u60a8\u5c06\u53f3\u624b\u7684\u624b\u6307\u5377\u66f2\u5728\u591a\u8fb9\u5f62\u9876\u70b9\u6307\u5b9a\u7684\u65b9\u5411\u4e0a\uff0c\u90a3\u4e48\u6cd5\u5411\u91cf\u5e94\u8be5\u6307\u5411\u60a8\u7684\u62c7\u6307\u65b9\u5411\u3002\u6ce8\u610f\uff0c\u5f53\u60a8\u89c2\u5bdf\u591a\u8fb9\u5f62\u7684\u524d\u8868\u9762\u65f6\uff0c\u6cd5\u5411\u91cf\u5e94\u8be5\u6307\u5411\u60a8\u3002\u5982\u679c\u60a8\u89c2\u5bdf\u540e\u8868\u9762\uff0c\u6cd5\u5411\u91cf\u5e94\u8be5\u6307\u5411\u8fdc\u79bb\u60a8\u3002</p> <p>\u4e3a\u5bf9\u8c61\u627e\u5230\u6b63\u786e\u7684\u6cd5\u5411\u91cf\u53ef\u80fd\u662f\u4e00\u4e2a\u96be\u9898\u3002\u590d\u6742\u7684\u51e0\u4f55\u6a21\u578b\u901a\u5e38\u9644\u5e26\u5fc5\u8981\u7684\u6cd5\u5411\u91cf\u3002\u4f8b\u5982\uff0cGLUT \u5e93\u7ed8\u5236\u7684\u5b9e\u4f53\u5f62\u72b6\u5c31\u662f\u5982\u6b64\u3002</p> <p>The visual effect of a light shining on a surface depends on the properties of the surface and of the light. But it also depends to a great extent on the angle at which the light strikes the surface. The angle is essential to specular reflection and also affects diffuse reflection. That's why a curved, lit surface looks different at different points, even if its surface is a uniform color. To calculate this angle, OpenGL needs to know the direction in which the surface is facing. That direction is specified by a vector that is perpendicular to the surface. Another word for \"perpendicular\" is \"normal,\" and a non-zero vector that is perpendicular to a surface at a given point is called a normal vector to that surface. When used in lighting calculations, a normal vector must have length equal to one. A normal vector of length one is called a unit normal. For proper lighting calculations in OpenGL, a unit normal must be specified for each vertex. However, given any normal vector, it is possible to calculate a unit normal from it by dividing the vector by its length. (See Section 3.5 for a discussion of vectors and their lengths.)</p> <p>Since a surface can be curved, it can face different directions at different points. So, a normal vector is associated with a particular point on a surface. In OpenGL, normal vectors are actually assigned only to the vertices of a primitive. The normal vectors at the vertices of a primitive are used to do lighting calculations for the entire primitive.</p> <p>Note in particular that you can assign different normal vectors at each vertex of a polygon. Now, you might be asking yourself, \"Don't all the normal vectors to a polygon point in the same direction?\" After all, a polygon is flat; the perpendicular direction to the polygon doesn't change from point to point. This is true, and if your objective is to display a polyhedral object whose sides are flat polygons, then in fact, all the normals of each of those polygons should point in the same direction. On the other hand, polyhedra are often used to approximate curved surfaces such as spheres. If your real objective is to make something that looks like a curved surface, then you want to use normal vectors that are perpendicular to the actual surface, not to the polyhedron that approximates it. Take a look at this example:</p> <p></p> <p>The two objects in this picture are made up of bands of rectangles. The two objects have exactly the same geometry, yet they look quite different. This is because different normal vectors are used in each case. For the top object, the band of rectangles is supposed to approximate a smooth surface. The vertices of the rectangles are points on that surface, and I really didn't want to see the rectangles at all\u2014I wanted to see the curved surface, or at least a good approximation. So for the top object, when I specified the normal vector at each of the vertices, I used a vector that is perpendicular to the surface rather than one perpendicular to the rectangle. For the object on the bottom, on the other hand, I was thinking of an object that really is a band of rectangles, and I used normal vectors that were actually perpendicular to the rectangles. Here's a two-dimensional illustration that shows the normal vectors that were used for the two pictures:</p> <p></p> <p>The thick blue lines represent the rectangles, as seen edge-on from above. The arrows represent the normal vectors. Each rectangle has two normals, one at each endpoint. Each vertex is part of two rectangles, and so two normal vectors are specified at each vertex.</p> <p>In the bottom half of the illustration, two rectangles that meet at a point have different normal vectors at that point. The normal vectors for a rectangle are actually perpendicular to the rectangle. There is an abrupt change in direction as you move from one rectangle to the next, so where one rectangle meets the next, the normal vectors to the two rectangles are different. The visual effect on the rendered image is an abrupt change in shading that is perceived as a corner or edge between the two rectangles.</p> <p>In the top half, on the other hand, the vectors are perpendicular to a curved surface that passes through the endpoints of the rectangles. When two rectangles share a vertex, they also share the same normal at that vertex. Visually, this eliminates the abrupt change in shading, resulting in something that looks more like a smoothly curving surface.</p> <p>The two ways of assigning normal vectors are called flat shading and smooth shading. Flat shading makes a surface look like it is made of flat sides or facets. Smooth shading makes it look more like a smooth surface. This demo will help you to understand these concepts. It shows a polygonal mesh being used to approximate a sphere, with your choice of smooth or flat shading. Use the sliders to control the number of polygons in the mesh.</p> <p></p> <p>The upshot of all this is that you get to make up whatever normal vectors suit your purpose. A normal vector at a vertex is whatever you say it is, and it does not have to be literally perpendicular to the polygon. The normal vector that you choose should depend on the object that you are trying to model.</p> <p>There is one other issue in choosing normal vectors: There are always two possible unit normal vectors at a point on a surface, pointing in opposite directions. A polygon in 3D has two faces, facing in opposite directions. OpenGL considers one of these to be the front face and the other to be the back face. OpenGL tells them apart by the order in which the vertices are specified. (See Subsection 3.4.1.) The default rule is that the order of the vertices is counterclockwise when looking at the front face and is clockwise when looking at the back face. When the polygon is drawn on the screen, this rule lets OpenGL tell whether it is the front face or the back face that is being shown. When specifying a normal vector for the polygon, the vector should point out of the front face of the polygon. This is another example of the right-hand rule. If you curl the fingers of your right hand in the direction in which the vertices of the polygon were specified, then the normal vector should point in the direction of your thumb. Note that when you are looking at the front face of a polygon, the normal vector should be pointing towards you. If you are looking at the back face, the normal vector should be pointing away from you.</p> <p>It can be a difficult problem to come up with the correct normal vectors for an object. Complex geometric models often come with the necessary normal vectors included. This is true, for example, for the solid shapes drawn by the GLUT library.</p>"},{"location":"cn/c4/s1/#414-opengl-11-\u5149\u7167\u65b9\u7a0b","title":"4.1.4 OpenGL 1.1 \u5149\u7167\u65b9\u7a0b","text":"<p>The OpenGL 1.1 Lighting Equation</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL \u8fdb\u884c\u201c\u7167\u660e\u8ba1\u7b97\u201d\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u8ba1\u7b97\u7684\u76ee\u7684\u662f\u4e3a\u8868\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\u4ea7\u751f\u4e00\u4e2a\u989c\u8272 (r,g,b,a)\u3002\u5728 OpenGL 1.1 \u4e2d\uff0c\u7167\u660e\u8ba1\u7b97\u5b9e\u9645\u4e0a\u53ea\u5728\u539f\u8bed\u7684\u9876\u70b9\u5904\u8fdb\u884c\u3002\u6bcf\u4e2a\u9876\u70b9\u7684\u989c\u8272\u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u901a\u8fc7\u63d2\u503c\u9876\u70b9\u989c\u8272\u6765\u83b7\u5f97\u539f\u8bed\u5185\u90e8\u70b9\u7684\u989c\u8272\u3002</p> <p>\u9876\u70b9\u989c\u8272\u7684 alpha \u5206\u91cf a \u5f88\u7b80\u5355\uff1a\u5b83\u53ea\u662f\u8be5\u9876\u70b9\u5904\u6563\u5c04\u6750\u8d28\u989c\u8272\u7684 alpha \u5206\u91cf\u3002r\u3001g \u548c b \u7684\u8ba1\u7b97\u76f8\u5f53\u590d\u6742\uff0c\u4e5f\u6bd4\u8f83\u6570\u5b66\u5316\uff0c\u60a8\u4e0d\u4e00\u5b9a\u9700\u8981\u7406\u89e3\u5b83\u3002\u4f46\u8fd9\u91cc\u7b80\u8981\u63cf\u8ff0\u4e00\u4e0b\u5982\u4f55\u8fdb\u884c\u8ba1\u7b97...</p> <p>\u5ffd\u7565 alpha \u5206\u91cf\uff0c\u5047\u8bbe\u6750\u8d28\u7684\u73af\u5883\u3001\u6563\u5c04\u3001\u955c\u9762\u548c\u81ea\u53d1\u5149\u989c\u8272\u7684 RGB \u5206\u91cf\u5206\u522b\u4e3a (mar,mag,mab)\u3001(mdr,mdg,mdb)\u3001(msr,msg,msb) \u548c (mer,meg,meb)\u3002\u5047\u8bbe\u5168\u5c40\u73af\u5883\u5f3a\u5ea6 (gar,gag,gab) \u4ee3\u8868\u4e0e\u73af\u5883\u4e2d\u4efb\u4f55\u5149\u6e90\u65e0\u5173\u7684\u73af\u5883\u5149\u3002\u53ef\u4ee5\u6709\u591a\u4e2a\u70b9\u5149\u6e90\u548c\u65b9\u5411\u5149\u6e90\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u7b2c 0 \u53f7\u5149\u6e90\u3001\u7b2c 1 \u53f7\u5149\u6e90\u3001\u7b2c 2 \u53f7\u5149\u6e90\u7b49\u3002\u5728\u8fd9\u79cd\u8bbe\u7f6e\u4e0b\uff0c\u9876\u70b9\u989c\u8272\u7684\u7ea2\u8272\u5206\u91cf\u5c06\u662f\uff1a</p> \\[ r = mer + gar \\times mar + I_0,r + I_1,r + I_2,r + \\ldots \\] <p>\u5176\u4e2d \\( I_0,r \\) \u662f\u6765\u81ea\u7b2c 0 \u53f7\u5149\u6e90\u5bf9\u989c\u8272\u7684\u8d21\u732e\u7684\u7ea2\u8272\u5206\u91cf\uff1b\\( I_1,r \\) \u662f\u7b2c 1 \u53f7\u5149\u6e90\u7684\u8d21\u732e\uff1b\u4ee5\u6b64\u7c7b\u63a8\u3002\u5bf9\u4e8e\u989c\u8272\u7684\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u4e5f\u6709\u7c7b\u4f3c\u7684\u65b9\u7a0b\u3002\u8fd9\u4e2a\u65b9\u7a0b\u8868\u660e\uff0c\u81ea\u53d1\u5149\u989c\u8272 mer \u7b80\u5355\u5730\u6dfb\u52a0\u5230\u5176\u4ed6\u989c\u8272\u8d21\u732e\u4e2d\u3002\u5168\u5c40\u73af\u5883\u5149\u7684\u8d21\u732e\u662f\u901a\u8fc7\u5c06\u5168\u5c40\u73af\u5883\u5f3a\u5ea6 gar \u4e58\u4ee5\u6750\u8d28\u73af\u5883\u989c\u8272 mar \u6765\u83b7\u5f97\u7684\u3002\u8fd9\u662f\u6570\u5b66\u4e0a\u8bf4\u6750\u8d28\u73af\u5883\u989c\u8272\u662f\u8868\u9762\u53cd\u5c04\u7684\u73af\u5883\u5149\u7684\u4e00\u90e8\u5206\u3002</p> <p>\\( I_0,r, I_1,r \\) \u7b49\u9879\u4ee3\u8868\u73af\u5883\u4e2d\u5404\u4e2a\u5149\u6e90\u5bf9\u6700\u7ec8\u989c\u8272\u7684\u8d21\u732e\u3002\u5149\u6e90\u7684\u8d21\u732e\u6bd4\u8f83\u590d\u6742\u3002\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u5149\u6e90\u3002\u9996\u5148\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e00\u4e2a\u5149\u6e90\u88ab\u7981\u7528\uff08\u5373\u5173\u95ed\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5149\u6e90\u7684\u8d21\u732e\u5c31\u662f\u96f6\u3002\u5bf9\u4e8e\u542f\u7528\u7684\u5149\u6e90\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u51e0\u4f55\u5f62\u72b6\u548c\u989c\u8272\uff1a</p> <p></p> <p>\u5728\u8fd9\u4e2a\u63d2\u56fe\u4e2d\uff0cN \u662f\u6211\u4eec\u60f3\u8981\u8ba1\u7b97\u989c\u8272\u7684\u70b9\u7684\u6cd5\u5411\u91cf\u3002L \u662f\u4e00\u4e2a\u6307\u5411\u4ece\u8868\u9762\u5230\u8fbe\u7684\u5149\u7ebf\u65b9\u5411\u7684\u5411\u91cf\u3002V \u662f\u4e00\u4e2a\u6307\u5411\u89c2\u5bdf\u8005\u65b9\u5411\u7684\u5411\u91cf\u3002R \u662f\u53cd\u5c04\u5149\u7ebf\u7684\u65b9\u5411\uff0c\u5373\u5f53\u5149\u7ebf\u4ece\u5149\u6e90\u5230\u8fbe\u76f8\u5173\u70b9\u7684\u8868\u9762\u65f6\uff0c\u4f1a\u955c\u9762\u53cd\u5c04\u7684\u65b9\u5411\u3002N \u548c L \u4e4b\u95f4\u7684\u89d2\u5ea6\u4e0e N \u548c R \u4e4b\u95f4\u7684\u89d2\u5ea6\u76f8\u540c\uff1b\u8fd9\u662f\u5173\u4e8e\u5149\u7684\u7269\u7406\u5b66\u7684\u4e00\u4e2a\u57fa\u672c\u4e8b\u5b9e\u3002\u6240\u6709\u5411\u91cf\u90fd\u662f\u5355\u4f4d\u5411\u91cf\uff0c\u957f\u5ea6\u4e3a 1\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u5355\u4f4d\u5411\u91cf A \u548c B\uff0c\u5185\u79ef A \u00b7 B \u7b49\u4e8e\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u89d2\u5ea6\u7684\u4f59\u5f26\u3002\u5185\u79ef\u5728\u7167\u660e\u65b9\u7a0b\u4e2d\u6709\u51e0\u4e2a\u70b9\u51fa\u73b0\uff0c\u4f5c\u4e3a\u8ba1\u7b97\u4e0d\u540c\u5411\u91cf\u4e4b\u95f4\u89d2\u5ea6\u7684\u4e00\u79cd\u65b9\u5f0f\u3002</p> <p>\u73b0\u5728\uff0c\u5047\u8bbe\u5149\u5177\u6709\u73af\u5883\u3001\u6563\u5c04\u548c\u955c\u9762\u989c\u8272\u5206\u91cf (lar,lag,lab)\u3001(ldr,ldg,ldb) \u548c (lsr,lsg,lsb)\u3002\u53e6\u5916\uff0cmh \u662f\u6750\u8d28\u7684\u5149\u6cfd\u5ea6\u5c5e\u6027\u503c\u3002\u7136\u540e\uff0c\u5047\u8bbe\u5149\u6e90\u542f\u7528\uff0c\u8fd9\u4e2a\u5149\u6e90\u5bf9\u9876\u70b9\u989c\u8272\u7ea2\u8272\u5206\u91cf\u7684\u8d21\u732e\u53ef\u4ee5\u8ba1\u7b97\u4e3a\uff1a</p> \\[ I_r = lar \\times mar + f \\times ( ldr \\times mdr \\times (L \\cdot N) + lsr \\times msr \\times \\max(0, V \\cdot R)^{mh} ) \\] <p>\u5bf9\u4e8e\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u6709\u7c7b\u4f3c\u7684\u65b9\u7a0b\u3002\u7b2c\u4e00\u9879 \\( lar \\times mar \\) \u8003\u8651\u4e86\u8fd9\u4e2a\u5149\u6e90\u7684\u73af\u5883\u5149\u5bf9\u8868\u9762\u989c\u8272\u7684\u8d21\u732e\u3002\u65e0\u8bba\u8868\u9762\u662f\u5426\u9762\u5411\u5149\u7ebf\uff0c\u8fd9\u4e00\u9879\u90fd\u6dfb\u52a0\u5230\u989c\u8272\u4e2d\u3002</p> <p>f \u7684\u503c\u5982\u679c\u8868\u9762\u80cc\u5411\u5149\u7ebf\u662f 0\uff0c\u5982\u679c\u8868\u9762\u9762\u5411\u5149\u7ebf\u662f 1\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u8003\u8651\u4e86\u5149\u7ebf\u53ea\u7167\u4eae\u8868\u9762\u7684\u4e00\u9762\u3002\u8981\u6d4b\u8bd5 f \u662f 0 \u8fd8\u662f 1\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5 \\( L \\cdot N \\) \u662f\u5426\u5c0f\u4e8e 0\u3002\u8fd9\u4e2a\u70b9\u79ef\u662f L \u548c N \u4e4b\u95f4\u89d2\u5ea6\u7684\u4f59\u5f26\uff1b\u5f53\u89d2\u5ea6\u5927\u4e8e 90 \u5ea6\u65f6\uff0c\u5b83\u5c0f\u4e8e 0\uff0c\u8fd9\u610f\u5473\u7740\u6cd5\u5411\u91cf\u5728\u8868\u9762\u5bf9\u9762\u5149\u7ebf\u7684\u4e00\u4fa7\u3002\u5f53 f \u4e3a\u96f6\u65f6\uff0c\u5149\u7ebf\u5bf9\u9876\u70b9\u989c\u8272\u6ca1\u6709\u6563\u5c04\u6216\u955c\u9762\u8d21\u732e\u3002</p> <p>\u989c\u8272\u7684\u6563\u5c04\u5206\u91cf\uff08\u5728 f \u8c03\u6574\u4e4b\u524d\uff09\u7531 \\( ldr \\times mdr \\times (L \\cdot N) \\) \u7ed9\u51fa\u3002\u8fd9\u4ee3\u8868\u6563\u5c04\u5149\u5f3a\u5ea6\u4e58\u4ee5\u6750\u8d28\u7684\u6563\u5c04\u53cd\u5c04\u7387\uff0c\u4e58\u4ee5 L \u548c N \u4e4b\u95f4\u89d2\u5ea6\u7684\u4f59\u5f26\u3002\u89d2\u5ea6\u6d89\u53ca\uff1a</p> <p></p> <p>\u8bd1\u6ce8</p> <p>\u6bcf\u4e2a\u5e73\u65b9\u5355\u4f4d\u8868\u9762\u4e0a\u51fb\u4e2d\u7684\u5149\u80fd\u91cf\u91cf\u53d6\u51b3\u4e8e\u5149\u51fb\u4e2d\u8868\u9762\u7684\u89d2\u5ea6\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u89d2\u5ea6\uff0c\u76f8\u540c\u7684\u5149\u80fd\u91cf\u88ab\u5206\u6563\u5728\u66f4\u5927\u7684\u533a\u57df\u3002</p> <p>\u8868\u9762\u9762\u5411\u7684\u65b9\u5411\u7531\u5176\u6cd5\u5411\u91cf\u8868\u793a\uff0c\u6cd5\u5411\u91cf\u662f\u4e00\u4e2a\u5782\u76f4\u4e8e\u8868\u9762\u7684\u5411\u91cf\u3002</p> <p>\u968f\u7740\u89d2\u5ea6\u4ece 0 \u589e\u52a0\u5230 90 \u5ea6\uff0c\u89d2\u5ea6\u7684\u4f59\u5f26\u4ece 1 \u51cf\u5c11\u5230 0\uff0c\u6240\u4ee5\u89d2\u5ea6\u8d8a\u5927\uff0c\\( ldr \\times mdr \\times (L \\cdot N) \\) \u7684\u503c\u8d8a\u5c0f\uff0c\u6563\u5c04\u7167\u660e\u5bf9\u989c\u8272\u7684\u8d21\u732e\u8d8a\u5c0f\u3002</p> <p>\u5bf9\u4e8e\u955c\u9762\u5206\u91cf\uff0c\u56de\u60f3\u4e00\u4e0b\uff0c\u5149\u7ebf\u4ee5\u5149\u9525\u7684\u5f62\u5f0f\u955c\u9762\u53cd\u5c04\u3002\u53cd\u5c04\u5411\u91cf R \u4f4d\u4e8e\u9525\u4f53\u4e2d\u5fc3\u3002\u89c2\u5bdf\u8005\u79bb\u9525\u4f53\u4e2d\u5fc3\u8d8a\u8fd1\uff0c\u955c\u9762\u53cd\u5c04\u5c31\u8d8a\u5f3a\u70c8\u3002\u89c2\u5bdf\u8005\u4e0e\u9525\u4f53\u4e2d\u5fc3\u7684\u8ddd\u79bb\u53d6\u51b3\u4e8e V \u548c R \u4e4b\u95f4\u7684\u89d2\u5ea6\uff0c\u5728\u65b9\u7a0b\u4e2d\u4ee5\u70b9\u79ef V\u00b7R \u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u6570\u5b66\u4e0a\uff0c\u989c\u8272\u7684\u955c\u9762\u8d21\u732e\u7531 \\( lsr \\times msr \\times \\max(0, V \\cdot R)^{mh} \\) \u7ed9\u51fa\u3002\u53d6 0 \u548c V\u00b7R \u7684\u6700\u5927\u503c\u786e\u4fdd\u5982\u679c V \u548c R \u4e4b\u95f4\u7684\u89d2\u5ea6\u5927\u4e8e 90 \u5ea6\uff0c\u955c\u9762\u8d21\u732e\u4e3a\u96f6\u3002\u5047\u8bbe\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\uff0cmax(0,V\u00b7R) \u7b49\u4e8e V\u00b7R\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u70b9\u79ef\u88ab\u63d0\u5347\u5230\u6307\u6570 mh\uff0c\u8fd9\u662f\u6750\u8d28\u7684\u5149\u6cfd\u5ea6\u5c5e\u6027\u3002\u5f53 mh \u4e3a 0 \u65f6\uff0c(V\u00b7R)^{mh} \u4e3a 1\uff0c\u6ca1\u6709\u89d2\u5ea6\u7684\u4f9d\u8d56\u6027\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u662f\u6211\u4eec\u5728\u5149\u6cfd\u5ea6\u4e3a\u96f6\u65f6\u770b\u5230\u7684\u90a3\u79cd\u5de8\u5927\u800c\u4e0d\u53d7\u6b22\u8fce\u7684\u955c\u9762\u9ad8\u5149\u3002\u5bf9\u4e8e\u6b63\u503c\u7684\u5149\u6cfd\u5ea6\uff0c\u955c\u9762\u8d21\u732e\u5728 V \u548c R \u4e4b\u95f4\u89d2\u5ea6\u4e3a\u96f6\u65f6\u6700\u5927\uff0c\u968f\u7740\u89d2\u5ea6\u7684\u589e\u52a0\u800c\u51cf\u5c11\u3002\u5149\u6cfd\u5ea6\u503c\u8d8a\u5927\uff0c\u51cf\u5c11\u7684\u901f\u7387\u8d8a\u5feb\u3002\u7ed3\u679c\u662f\uff0c\u8f83\u5927\u7684\u5149\u6cfd\u5ea6\u503c\u7ed9\u51fa\u66f4\u5c0f\u3001\u66f4\u6e05\u6670\u7684\u955c\u9762\u9ad8\u5149\u3002</p> <p>\u8bb0\u4f4f\uff0c\u76f8\u540c\u7684\u8ba1\u7b97\u5bf9\u6bcf\u4e2a\u542f\u7528\u7684\u5149\u6e90\u91cd\u590d\u8fdb\u884c\uff0c\u7ed3\u679c\u7ed3\u5408\u8d77\u6765\u7ed9\u51fa\u6700\u7ec8\u7684\u9876\u70b9\u989c\u8272\u3002\u7279\u522b\u662f\u5f53\u4f7f\u7528\u51e0\u4e2a\u5149\u6e90\u65f6\uff0c\u5f88\u5bb9\u6613\u6700\u7ec8\u5f97\u5230\u5927\u4e8e\u4e00\u7684\u989c\u8272\u5206\u91cf\u3002\u6700\u540e\uff0c\u5728\u989c\u8272\u7528\u4e8e\u7ed9\u5c4f\u5e55\u4e0a\u7684\u50cf\u7d20\u4e0a\u8272\u4e4b\u524d\uff0c\u989c\u8272\u5206\u91cf\u5fc5\u987b\u88ab\u9650\u5236\u5728\u96f6\u5230\u4e00\u7684\u8303\u56f4\u5185\u3002\u5927\u4e8e\u4e00\u7684\u503c\u88ab\u66ff\u6362\u4e3a\u4e00\u3002\u8fd9\u5f88\u5bb9\u6613\u4ea7\u751f\u5927\u7247\u533a\u57df\u4e3a\u5747\u5300\u767d\u8272\u7684\u4e11\u964b\u56fe\u50cf\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u533a\u57df\u7684\u6240\u6709\u989c\u8272\u503c\u90fd\u8d85\u8fc7\u4e86\u4e00\u3002\u672c\u5e94\u901a\u8fc7\u7167\u660e\u4f20\u8fbe\u7684\u6240\u6709\u4fe1\u606f\u5df2\u7ecf\u4e22\u5931\u3002\u5176\u6548\u679c\u7c7b\u4f3c\u4e8e\u66dd\u5149\u8fc7\u5ea6\u7684\u7167\u7247\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u66dd\u5149\u8fc7\u5ea6\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u5de5\u4f5c\u6765\u627e\u5230\u5408\u9002\u7684\u7167\u660e\u6c34\u5e73\u3002</p> <p>\uff08\u672c\u8282\u4e2d\u5173\u4e8e\u7167\u660e\u7684\u8ba8\u8bba\u9057\u6f0f\u4e86\u4e00\u4e9b\u56e0\u7d20\u3002\u6240\u5448\u73b0\u7684\u65b9\u7a0b\u6ca1\u6709\u8003\u8651\u5230\u70b9\u5149\u6e90\u7684\u6548\u679c\u53ef\u80fd\u53d6\u51b3\u4e8e\u5230\u5149\u6e90\u7684\u8ddd\u79bb\uff0c\u4e5f\u6ca1\u6709\u8003\u8651\u5230\u805a\u5149\u706f\uff0c\u5b83\u4eec\u53ea\u53d1\u5c04\u4e00\u4e2a\u5149\u9525\u3002\u8fd9\u4e24\u8005\u90fd\u53ef\u4ee5\u5728 OpenGL 1.1 \u4e2d\u914d\u7f6e\uff0c\u4f46\u672c\u4e66\u6ca1\u6709\u4ecb\u7ecd\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fd8\u6709\u8bb8\u591a\u5149\u7684\u65b9\u9762\u6ca1\u6709\u88ab OpenGL \u4f7f\u7528\u7684\u7b80\u5355\u6a21\u578b\u6355\u83b7\u3002\u6700\u660e\u663e\u7684\u9057\u6f0f\u4e4b\u4e00\u662f\u9634\u5f71\uff1a\u5bf9\u8c61\u4e0d\u963b\u6321\u5149\uff01\u5149\u76f4\u63a5\u7a7f\u8fc7\u5b83\u4eec\u3002\u6211\u4eec\u5c06\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u8ba8\u8bba\u5176\u4ed6\u56fe\u5f62\u7cfb\u7edf\u65f6\u9047\u5230\u6a21\u578b\u7684\u4e00\u4e9b\u6269\u5c55\u3002\uff09</p> <p>What does it actually mean to say that OpenGL performs \"lighting calculations\"? The goal of the calculation is to produce a color, (r,g,b,a), for a point on a surface. In OpenGL 1.1, lighting calculations are actually done only at the vertices of a primitive. After the color of each vertex has been computed, colors for interior points of the primitive are obtained by interpolating the vertex colors.</p> <p>The alpha component of the vertex color, a, is easy: It's simply the alpha component of the diffuse material color at that vertex. The calculation of r, g, and b is fairly complex and rather mathematical, and you don't necessarily need to understand it. But here is a short description of how it's done...</p> <p>Ignoring alpha components, let's assume that the ambient, diffuse, specular, and emission colors of the material have RGB components (mar,mag,mab), (mdr,mdg,mdb), (msr,msg,msb), and (mer,meg,meb), respectively. Suppose that the global ambient intensity, which represents ambient light that is not associated with any light source in the environment, is (gar,gag,gab). There can be several point and directional light sources, which we refer to as light number 0, light number 1, light number 2, and so on. With this setup, the red component of the vertex color will be:</p> <pre><code>r = mer + gar*mar + I0,r + I1,r + I2,r + ...\n</code></pre> <p>where I0,r is the red component of the contribution to the color that comes from light number 0; I1,r is the contribution from light number 1; and so on. A similar equation holds for the green and blue components of the color. This equation says that the emission color, mer, is simply added to any other contributions to the color. And the contribution of global ambient light is obtained by multiplying the global ambient intensity, gar, by the material ambient color, mar. This is the mathematical way of saying that the material ambient color is the fraction of the ambient light that is reflected by the surface.</p> <p>The terms I0,r, I1,r, and so on, represent contributions to the final color from the various light sources in the environment. The contributions from the light sources are complicated. Consider just one of the light sources. Note, first of all, that if a light source is disabled (that is, if it is turned off), then the contribution from that light source is zero. For an enabled light source, we have to look at the geometry as well as the colors:</p> <p></p> <p>In this illustration, N is the normal vector at the point whose color we want to compute. L is a vector that points back along the direction from which the light arrives at the surface. V is a vector that points in the direction of the viewer. And R is the direction of the reflected ray, that is, the direction in which a light ray from the source would be reflected specularly when it strikes the surface at the point in question. The angle between N and L is the same as the angle between N and R; this is a basic fact about the physics of light. All of the vectors are unit vectors, with length 1. Recall that for unit vectors A and B, the inner product A \u00b7 B is equal to the cosine of the angle between the two vectors. Inner products occur at several points in the lighting equation, as the way of accounting for the angles between various vectors.</p> <p>Now, let's say that the light has ambient, diffuse, and specular color components (lar,lag,lab), (ldr,ldg,ldb), and (lsr,lsg,lsb). Also, let mh be the value of the shininess property of the material. Then, assuming that the light is enabled, the contribution of this light source to the red component of the vertex color can be computed as</p> <pre><code>Ir = lar*mar + f*( ldr*mdr*(L\u00b7N) + lsr*msr*max(0,V\u00b7R)mh )\n</code></pre> <p>with similar equations for the green and blue components. The first term, lar*mar accounts for the contribution of the ambient light from this light source to the color of the surface. This term is added to the color whether or not the surface is facing the light.</p> <p>The value of f is 0 if the surface is facing away from the light and is 1 if the surface faces the light; that is, it accounts for the fact that the light only illuminates one side of the surface. To test whether f is 0 or 1, we can check whether L\u00b7N is less than 0. This dot product is the cosine of the angle between L and N; it is less than 0 when the angle is greater than 90 degrees, which would mean that the normal vector is on the opposite side of the surface from the light. When f is zero, there is no diffuse or specular contribution from the light to the color of the vertex.</p> <p>The diffuse component of the color, before adjustment by f, is given by <code>ldr*mdr*(L\u00b7N)</code>. This represents the diffuse intensity of the light times the diffuse reflectivity of the material, multiplied by the cosine of the angle between L and N. The angle is involved</p> <p></p> <p>As the angle increases from 0 to 90 degrees, the cosine of the angle decreases from 1 to 0, so the larger the angle, the smaller the value of <code>ldr*mdr*(L\u00b7N)</code> and the smaller the contribution of diffuse illumination to the color.</p> <p>For the specular component, recall that a light ray is reflected specularly as a cone of light. The reflection vector, R, is at the center of the cone. The closer the viewer is to the center of the cone, the more intense the specular reflection. The distance of the viewer from the center of the cone depends on the angle between V and R, which appears in the equation as the dot product V\u00b7R. Mathematically, the specular contribution to the color is given by lsrmsrmax(0,V\u00b7R)mh. Taking the maximum of 0 and V\u00b7R ensures that the specular contribution is zero if the angle between V and R is greater than 90 degrees. Assuming that is not the case, max(0,V\u00b7R) is equal to V\u00b7R. Note that this dot product is raised to the exponent mh, which is the material's shininess property. When mh is 0, (V\u00b7R)mh is 1, and there is no dependence on the angle; in that case, the result is the sort of huge and undesirable specular highlight that we have seen for shininess equal to zero. For positive values of shininess, the specular contribution is maximal when the angle between V and R is zero, and it decreases as the angle increases. The larger the shininess value, the faster the rate of decrease. The result is that larger shininess values give smaller, sharper specular highlights.</p> <p>Remember that the same calculation is repeated for every enabled light and that the results are combined to give the final vertex color. It's easy, especially when using several lights, to end up with color components larger than one. In the end, before the color is used to color a pixel on the screen, the color components must be clamped to the range zero to one. Values greater than one are replaced by one. This makes it easy to produce ugly pictures in which large areas are a uniform white because all the color values in those areas exceeded one. All the information that was supposed to be conveyed by the lighting has been lost. The effect is similar to an over-exposed photograph. It can take some work to find appropriate lighting levels to avoid this kind of over-exposure.</p> <p>(My discussion of lighting in this section leaves out some factors. The equation as presented doesn't take into account the fact that the effect of a point light can depend on the distance to the light, and it doesn't take into account spotlights, which emit just a cone of light. Both of these can configured in OpenGL 1.1, but this book does not cover how to do that. There are also many aspects of light that are not captured by the simple model used in OpenGL. One of the most obvious omissions is shadows: Objects don't block light! Light shines right through them. We will encounter some extensions to the model in later chapters when we discuss other graphics systems.)</p>"},{"location":"cn/c4/s2/","title":"4.2 OpenGL 1.1 \u4e2d\u7684\u5149\u548c\u6750\u8d28","text":"<p>Light and Material in OpenGL 1.1</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u5728OpenGL\u4e2d\u4f7f\u7528\u5149\u7ebf\u548c\u6750\u8d28\u3002\u672c\u8282\u8ba8\u8bba\u7684\u51fd\u6570\u7279\u5b9a\u4e8eOpenGL\u7684\u65e7\u7248\u672c\uff0c\u5e76\u4e14\u4e0d\u4f1a\u76f4\u63a5\u5e94\u7528\u5230\u5176\u4ed6\u56fe\u5f62API\u3002\uff08\u4f46\u662f\u5b83\u4eec\u5b9e\u73b0\u7684\u4e00\u822c\u601d\u60f3\uff0c\u5982\u4e0a\u4e00\u8282\u6240\u6db5\u76d6\u7684\uff0c\u66f4\u5177\u6709\u666e\u904d\u9002\u7528\u6027\u3002\uff09</p> <p>\u5728OpenGL 1.1\u4e2d\uff0c\u5fc5\u987b\u901a\u8fc7\u8c03\u7528glEnable(GL_LIGHTING)\u6765\u542f\u7528\u5149\u7ebf\u548c\u6750\u8d28\u7684\u4f7f\u7528\u3002\u5f53\u7167\u660e\u88ab\u7981\u7528\u65f6\uff0c\u9876\u70b9\u7684\u989c\u8272\u4ec5\u4ec5\u662f\u7531glColor*\u8bbe\u7f6e\u7684\u5f53\u524d\u989c\u8272\u3002\u5f53\u7167\u660e\u88ab\u542f\u7528\u65f6\uff0c\u9876\u70b9\u7684\u989c\u8272\u662f\u4f7f\u7528\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f\u8ba1\u7b97\u5f97\u51fa\u7684\uff0c\u8be5\u516c\u5f0f\u8003\u8651\u4e86\u573a\u666f\u7684\u7167\u660e\u548c\u4e4b\u524d\u8ba8\u8bba\u8fc7\u7684\u5206\u914d\u7ed9\u9876\u70b9\u7684\u6750\u8d28\u5c5e\u6027\u3002\u73b0\u5728\uff0c\u662f\u65f6\u5019\u5b66\u4e60\u7528\u4e8e\u914d\u7f6e\u7167\u660e\u5e76\u5c06\u6750\u8d28\u5206\u914d\u7ed9\u5bf9\u8c61\u7684OpenGL\u547d\u4ee4\u4e86\u3002</p> <p>\u901a\u5e38\uff0c\u7167\u660e\u5728\u6e32\u67d3\u573a\u666f\u7684\u67d0\u4e9b\u90e8\u5206\u65f6\u88ab\u6253\u5f00\uff0c\u800c\u5728\u6e32\u67d3\u5176\u4ed6\u90e8\u5206\u65f6\u88ab\u5173\u95ed\u3002\u6211\u4eec\u5c06\u8bf4\u4e00\u4e9b\u5bf9\u8c61\u662f\u201c\u88ab\u7167\u4eae\u7684\u201d\uff0c\u800c\u5176\u4ed6\u5bf9\u8c61\u5219\u4e0d\u662f\u3002\u4f8b\u5982\uff0c\u5373\u4f7f\u5b83\u4eec\u662f\u88ab\u7167\u4eae\u7684\u5b9e\u4f53\u5bf9\u8c61\u573a\u666f\u7684\u4e00\u90e8\u5206\uff0c\u7ebf\u6846\u5bf9\u8c61\u901a\u5e38\u4e5f\u662f\u5728\u7167\u660e\u88ab\u7981\u7528\u7684\u60c5\u51b5\u4e0b\u7ed8\u5236\u7684\u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u5728\u8c03\u7528glBegin\u548cglEnd\u4e4b\u95f4\u8c03\u7528glEnable\u6216glDisable\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u8ba9\u540c\u4e00\u539f\u7d20\u7684\u4e00\u90e8\u5206\u88ab\u7167\u4eae\uff0c\u800c\u53e6\u4e00\u90e8\u5206\u540c\u4e00\u539f\u7d20\u4e0d\u88ab\u7167\u4eae\u3002\uff08\u6211\u5e94\u8be5\u6ce8\u610f\uff0c\u5f53\u7167\u660e\u88ab\u542f\u7528\u65f6\uff0c\u5b83\u4e5f\u4f1a\u5e94\u7528\u4e8e\u70b9\u548c\u7ebf\u539f\u7d20\u4ee5\u53ca\u591a\u8fb9\u5f62\uff0c\u5c3d\u7ba1\u8fd9\u6837\u505a\u5f88\u5c11\u6709\u610f\u4e49\u3002\uff09\u7167\u660e\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u53c2\u6570GL_LIGHTING\u8c03\u7528glEnable\u548cglDisable*\u6765\u542f\u7528\u548c\u7981\u7528\u3002\u5f53\u7167\u660e\u88ab\u5173\u95ed\u65f6\uff0c\u5176\u4ed6\u5149\u7ebf\u548c\u6750\u8d28\u8bbe\u7f6e\u4e0d\u9700\u8981\u4fee\u6539\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u7167\u660e\u88ab\u7981\u7528\u65f6\u4f1a\u88ab\u7b80\u5355\u5730\u5ffd\u7565\u3002</p> <p>\u8981\u7167\u4eae\u4e00\u4e2a\u573a\u666f\uff0c\u9664\u4e86\u542f\u7528GL_LIGHTING\uff0c\u4f60\u8fd8\u9700\u8981\u914d\u7f6e\u81f3\u5c11\u4e00\u4e2a\u5149\u6e90\u3002\u5bf9\u4e8e\u975e\u5e38\u57fa\u7840\u7684\u7167\u660e\uff0c\u901a\u5e38\u53ea\u9700\u8981\u8c03\u7528</p> <pre><code>glEnable(GL_LIGHT0);\n</code></pre> <p>\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6253\u5f00\u4e00\u4e2a\u4ece\u89c2\u5bdf\u8005\u65b9\u5411\u5c04\u5165\u573a\u666f\u7684\u65b9\u5411\u5149\u3002\uff08\u6ce8\u610fGL_LIGHT0\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u96f6\u3002\uff09\u7531\u4e8e\u5b83\u662f\u4ece\u89c2\u5bdf\u8005\u7684\u65b9\u5411\u7167\u5c04\u7684\uff0c\u5b83\u4f1a\u7167\u4eae\u7528\u6237\u80fd\u770b\u5230\u7684\u6240\u6709\u4e1c\u897f\u3002\u5149\u7ebf\u662f\u767d\u8272\u7684\uff0c\u6ca1\u6709\u955c\u9762\u6210\u5206\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u5c06\u770b\u5230\u7269\u4f53\u7684\u6563\u5c04\u989c\u8272\uff0c\u6ca1\u6709\u4efb\u4f55\u955c\u9762\u9ad8\u5149\u3002\u6211\u4eec\u5c06\u5728\u672c\u8282\u540e\u9762\u770b\u5230\u5982\u4f55\u6539\u53d8\u8fd9\u4e2a\u5149\u6e90\u7684\u7279\u6027\u4ee5\u53ca\u5982\u4f55\u914d\u7f6e\u5176\u4ed6\u5149\u6e90\u3002\u4f46\u9996\u5148\uff0c\u6211\u4eec\u5c06\u8003\u8651\u6750\u8d28\u548c\u6cd5\u5411\u91cf\u3002</p> <p>In this section, we will see how to use light and material in OpenGL. The functions that are discussed in this section are specific to older versions of OpenGL, and will not carry over directly to other graphics APIs. (But the general ideas that they implement, which were covered in the previous section are more generally applicable.)</p> <p>In OpenGL 1.1, the use of light and material must be enabled by calling glEnable(GL_LIGHTING). When lighting is disabled, the color of a vertex is simply the current color as set by glColor*. When lighting is enabled, the color of a vertex is computed using a mathematical formula that takes into account the lighting of the scene and the material properties that have been assigned to the vertex, as discussed in the previous section. Now it's time to learn about the OpenGL commands that are used to configure lighting and to assign materials to objects.</p> <p>It is common for lighting to be turned on for rendering some parts of a scene, but turned off for other parts. We will say that some objects are \"lit\" while others aren't. For example, wireframe objects are usually drawn with lighting disabled, even if they are part of a scene in which solid objects are lit. But note that it is illegal to call glEnable or glDisable between calls to glBegin and glEnd, so it is not possible for part of a primitive to be lit while another part of the same primitive is unlit. (I should note that when lighting is enabled, it is applied to point and line primitives as well as to polygons, even though it rarely makes sense to do so.) Lighting can be enabled and disabled by calling glEnable and glDisable with parameter GL_LIGHTING. Other light and material settings don't have to be modified when lighting is turned off, since they are simply ignored when lighting is disabled.</p> <p>To light a scene, in addition to enabling GL_LIGHTING, you must configure at least one source of light. For very basic lighting, it often suffices to call</p> <pre><code>glEnable(GL_LIGHT0);\n</code></pre> <p>This command turns on a directional light that shines from the direction of the viewer into the scene. (Note that the last character in GL_LIGHT0 is a zero.) Since it shines from the direction of the viewer, it will illuminate everything that the user can see. The light is white, with no specular component; that is, you will see the diffuse color of objects, without any specular highlights. We will see later in this section how to change the characteristics of this light source and how to configure additional sources. But first, we will consider materials and normal vectors.</p>"},{"location":"cn/c4/s2/#421-\u5e94\u7528\u6750\u6599","title":"4.2.1 \u5e94\u7528\u6750\u6599","text":"<p>Working with Material</p> \u4e2d\u6587\u82f1\u6587 <p>\u6750\u8d28\u5c5e\u6027\u662f\u9876\u70b9\u5c5e\u6027\uff0c\u5c31\u50cf\u989c\u8272\u662f\u9876\u70b9\u5c5e\u6027\u4e00\u6837\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cOpenGL\u72b6\u6001\u5305\u62ec\u6bcf\u4e2a\u6750\u8d28\u5c5e\u6027\u7684\u5f53\u524d\u503c\u3002\u5f53\u9876\u70b9\u901a\u8fc7\u8c03\u7528glVertex*\u51fd\u6570\u751f\u6210\u65f6\uff0c\u4f1a\u5b58\u50a8\u5f53\u524d\u6750\u8d28\u5c5e\u6027\u7684\u6bcf\u4e2a\u526f\u672c\uff0c\u4ee5\u53ca\u9876\u70b9\u5750\u6807\u3002\u5f53\u5305\u542b\u8be5\u9876\u70b9\u7684\u539f\u7d20\u88ab\u6e32\u67d3\u65f6\uff0c\u4e0e\u9876\u70b9\u5173\u8054\u7684\u6750\u8d28\u5c5e\u6027\u5c06\u4e0e\u6709\u5173\u7167\u660e\u7684\u4fe1\u606f\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u8ba1\u7b97\u9876\u70b9\u7684\u989c\u8272\u3002</p> <p>\u8fd9\u88ab\u591a\u8fb9\u5f62\u662f\u53cc\u9762\u7684\u4e8b\u5b9e\u590d\u6742\u5316\u4e86\uff0c\u591a\u8fb9\u5f62\u7684\u524d\u8868\u9762\u548c\u540e\u8868\u9762\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6750\u8d28\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5b9e\u9645\u4e0a\uff0c\u4e3a\u6bcf\u4e2a\u9876\u70b9\u5b58\u50a8\u4e86\u4e24\u5957\u6750\u8d28\u5c5e\u6027\u503c\uff1a\u524d\u6750\u8d28\u548c\u540e\u6750\u8d28\u3002\uff08\u9664\u975e\u542f\u7528\u53cc\u9762\u7167\u660e\uff0c\u5426\u5219\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u4f7f\u7528\u540e\u6750\u8d28\uff0c\u53cc\u9762\u7167\u660e\u5c06\u5728\u4e0b\u9762\u8ba8\u8bba\u3002\uff09</p> <p>\u8003\u8651\u5230\u6240\u6709\u8fd9\u4e9b\uff0c\u6211\u4eec\u5c06\u67e5\u770b\u8bbe\u7f6e\u6750\u8d28\u5c5e\u6027\u5f53\u524d\u503c\u7684\u51fd\u6570\u3002\u5bf9\u4e8e\u8bbe\u7f6e\u73af\u5883\u3001\u6563\u5c04\u3001\u955c\u9762\u548c\u81ea\u53d1\u5149\u6750\u8d28\u989c\u8272\uff0c\u51fd\u6570\u662f\uff1a</p> <pre><code>void glMaterialfv(int side, int property, float* valueArray)\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u662fGL_FRONT_AND_BACK\u3001GL_FRONT\u6216GL_BACK\u3002\u5b83\u544a\u8bc9\u60a8\u662f\u4e3a\u524d\u8868\u9762\u3001\u540e\u8868\u9762\u8fd8\u662f\u4e24\u8005\u8bbe\u7f6e\u6750\u8d28\u5c5e\u6027\u503c\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u544a\u8bc9\u60a8\u6b63\u5728\u8bbe\u7f6e\u54ea\u4e2a\u6750\u8d28\u5c5e\u6027\u3002\u5b83\u53ef\u4ee5\u662fGL_AMBIENT\u3001GL_DIFFUSE\u3001GL_SPECULAR\u3001GL_EMISSION\u6216GL_AMBIENT_AND_DIFFUSE\u3002\u8bf7\u6ce8\u610f\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528GL_AMBIENT_AND_DIFFUSE\u4f5c\u4e3a\u5c5e\u6027\u540d\u79f0\uff0c\u7528\u4e00\u6b21\u8c03\u7528glMaterialfv\u6765\u5c06\u73af\u5883\u548c\u6563\u5c04\u989c\u8272\u8bbe\u7f6e\u4e3a\u76f8\u540c\u7684\u503c\uff1b\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u3002glMaterialfv\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5305\u542b\u56db\u4e2a\u6d6e\u70b9\u6570\u7684\u6570\u7ec4\u3002\u8fd9\u4e9b\u6570\u5b57\u7ed9\u51faRGBA\u989c\u8272\u5206\u91cf\uff0c\u4f5c\u4e3a0.0\u52301.0\u8303\u56f4\u5185\u7684\u503c\uff1b\u5b9e\u9645\u4e0a\u5141\u8bb8\u8d85\u51fa\u6b64\u8303\u56f4\u7684\u503c\uff0c\u5e76\u5c06\u7528\u4e8e\u7167\u660e\u8ba1\u7b97\uff0c\u4f46\u8fd9\u6837\u7684\u503c\u662f\u4e0d\u5bfb\u5e38\u7684\u3002\u8bf7\u6ce8\u610f\uff0c\u9700\u8981\u4e00\u4e2aalpha\u5206\u91cf\uff0c\u4f46\u4ec5\u5728\u6563\u5c04\u989c\u8272\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff1a\u5f53\u8ba1\u7b97\u9876\u70b9\u989c\u8272\u65f6\uff0c\u5176alpha\u5206\u91cf\u8bbe\u7f6e\u4e3a\u6563\u5c04\u6750\u8d28\u989c\u8272\u7684alpha\u5206\u91cf\u3002</p> <p>\u5149\u6cfd\u5ea6\u6750\u8d28\u5c5e\u6027\u662f\u4e00\u4e2a\u5355\u4e00\u6570\u5b57\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u4e0d\u540c\u7684\u51fd\u6570\u6765\u8bbe\u7f6e\u5b83\u7684\u503c\uff08\u51fd\u6570\u540d\u672b\u5c3e\u6ca1\u6709\"v\"\uff09\uff1a</p> <pre><code>void glMaterialf(int side, int property, float value)\n</code></pre> <p>\u518d\u6b21\uff0cside\u53ef\u4ee5\u662fGL_FRONT_AND_BACK\u3001GL_FRONT\u6216GL_BACK\u3002property\u5fc5\u987b\u662fGL_SHININESS\u3002\u503c\u662f\u4e00\u4e2a\u57280.0\u5230128.0\u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\u3002</p> <p>\u4e0eglColor\u548cglVertex\u7684\u5927\u91cf\u7248\u672c\u76f8\u6bd4\uff0c\u8bbe\u7f6e\u6750\u8d28\u7684\u9009\u9879\u662f\u6709\u9650\u7684\u3002\u7279\u522b\u662f\uff0c\u4e0d\u53ef\u80fd\u5728\u6ca1\u6709\u5b9a\u4e49\u6570\u7ec4\u6765\u5305\u542b\u989c\u8272\u5206\u91cf\u503c\u7684\u60c5\u51b5\u4e0b\u8bbe\u7f6e\u6750\u8d28\u989c\u8272\u3002\u5047\u8bbe\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u8981\u5c06\u73af\u5883\u548c\u6563\u5c04\u989c\u8272\u8bbe\u7f6e\u4e3a\u84dd\u7eff\u8272\u3002\u5728C\u8bed\u8a00\u4e2d\uff0c\u8fd9\u53ef\u80fd\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b8c\u6210\uff1a</p> <pre><code>float bgcolor[4] = {0.0, 0.7, 0.5, 1.0};\nglMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, bgcolor);\n</code></pre> <p>\u4f7f\u7528\u6211\u7684JavaScript OpenGL\u6a21\u62df\u5668\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\uff1a</p> <pre><code>let bgcolor = [0.0, 0.7, 0.5, 1.0];\nglMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, bgcolor);\n</code></pre> <p>\u5728Java\u7684JOGL API\u4e2d\uff0c\u5176\u4e2d\u5177\u6709\u6570\u7ec4\u53c2\u6570\u7684\u65b9\u6cd5\u6709\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u7528\u4e8e\u7ed9\u51fa\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u8d77\u59cb\u7d22\u5f15\uff0c\u5b83\u53d8\u6210\uff1a</p> <pre><code>float[] bgcolor = {0.0F, 0.7F, 0.5F, 1.0F};\ngl.glMaterialfv(GL2.GL_FRONT_AND_BACK, GL2.GL_AMBIENT_AND_DIFFUSE, bgcolor, 0);\n</code></pre> <p>\u5728C\u8bed\u8a00\u4e2d\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u5411\u6d6e\u70b9\u6570\u7684\u6307\u9488\uff0c\u8fd9\u5141\u8bb8\u5c06\u591a\u4e2a\u6750\u8d28\u5c5e\u6027\u7684\u503c\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u7075\u6d3b\u6027\u3002\u5047\u8bbe\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e00\u4e2aC\u6570\u7ec4\uff1a</p> <pre><code>float gold[13] = {0.24725, 0.1995, 0.0745, 1.0,      /* \u73af\u5883 */\n                0.75164, 0.60648, 0.22648, 1.0,    /* \u6563\u5c04 */\n                0.628281, 0.555802, 0.366065, 1.0, /* \u955c\u9762 */\n                50.0                               /* \u5149\u6cfd\u5ea6 */\n    };\n</code></pre> <p>\u5176\u4e2d\u6570\u7ec4\u4e2d\u524d\u56db\u4e2a\u6570\u5b57\u6307\u5b9a\u4e00\u4e2a\u73af\u5883\u989c\u8272\uff1b\u63a5\u4e0b\u6765\u7684\u56db\u4e2a\uff0c\u4e00\u4e2a\u6563\u5c04\u989c\u8272\uff1b\u518d\u63a5\u4e0b\u6765\u7684\u56db\u4e2a\uff0c\u4e00\u4e2a\u955c\u9762\u989c\u8272\uff1b\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u5149\u6cfd\u5ea6\u6307\u6570\u3002\u8fd9\u4e2a\u6570\u7ec4\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u6240\u6709\u6750\u8d28\u5c5e\u6027\uff1a</p> <pre><code>glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, gold);\nglMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, &amp;gold[4]);\nglMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, &amp;gold[8]);\nglMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, gold[12]);\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6700\u540e\u4e00\u4e2a\u51fd\u6570\u662fglMaterialf\u800c\u4e0d\u662fglMaterialfv\uff0c\u5b83\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u5b57\u800c\u4e0d\u662f\u4e00\u4e2a\u6307\u9488\u3002\u5728Java\u4e2d\u4e5f\u53ef\u4ee5\u505a\u7c7b\u4f3c\u7684\u4e8b\u60c5\uff1a</p> <pre><code>float[] gold = {0.24725F, 0.1995F, 0.0745F, 1.0F,      /* \u73af\u5883 */\n                0.75164F, 0.60648F, 0.22648F, 1.0F,    /* \u6563\u5c04 */\n                0.628281F, 0.555802F, 0.366065F, 1.0F, /* \u955c\u9762 */\n                50.0F                                  /* \u5149\u6cfd\u5ea6 */\n    };\n\ngl.glMaterialfv(GL2.GL_FRONT_AND_BACK, GL2.GL_AMBIENT, gold, 0);\ngl.glMaterialfv(GL2.GL_FRONT_AND_BACK, GL2.GL_DIFFUSE, gold, 4);\ngl.glMaterialfv(GL2.GL_FRONT_AND_BACK, GL2.GL_SPECULAR, gold, 8);\ngl.glMaterialf(GL2.GL_FRONT_AND_BACK, GL2.GL_SHININESS, gold[12]);\n</code></pre> <p>glMaterialfv\u548cglMaterialf\u51fd\u6570\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8c03\u7528\uff0c\u5305\u62ec\u5728glBegin\u548cglEnd\u8c03\u7528\u4e4b\u95f4\u3002\u8fd9\u610f\u5473\u7740\u539f\u7d20\u7684\u4e0d\u540c\u9876\u70b9\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6750\u8d28\u5c5e\u6027\u3002</p> <p>\u6240\u4ee5\uff0c\u4e5f\u8bb8\u4f60\u66f4\u559c\u6b22glColor*\u800c\u4e0d\u662fglMaterialfv\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5904\u7406\u6750\u8d28\u4ee5\u53ca\u666e\u901a\u989c\u8272\u3002\u5982\u679c\u4f60\u8c03\u7528\uff1a</p> <pre><code>glEnable(GL_COLOR_MATERIAL);\n</code></pre> <p>\u90a3\u4e48\u4e00\u4e9b\u6750\u8d28\u989c\u8272\u5c5e\u6027\u5c06\u8ddf\u8e2a\u989c\u8272\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bbe\u7f6e\u989c\u8272\u4e5f\u5c06\u8bbe\u7f6e\u5f53\u524d\u7684\u524d\u8868\u9762\u548c\u540e\u8868\u9762\u3001\u73af\u5883\u548c\u6563\u5c04\u6750\u8d28\u5c5e\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f8b\u5982\uff0c\u8c03\u7528\uff1a</p> <pre><code>glColor3f(1, 0, 0);\n</code></pre> <p>\u5982\u679c\u7167\u660e\u88ab\u542f\u7528\uff0c\u5c06\u5177\u6709\u4e0e\u8c03\u7528\u76f8\u540c\u7684\u6548\u679c\uff1a</p> <pre><code>glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, array);\nwhere array contains the values 1, 0, 0, 1. You can change the material property that tracks the color using\n\n```c\nvoid glColorMaterial(side, property);\n</code></pre> <p>\u5176\u4e2dside\u53ef\u4ee5\u662fGL_FRONT_AND_BACK\u3001GL_FRONT\u6216GL_BACK\uff0cproperty\u53ef\u4ee5\u662fGL_AMBIENT\u3001GL_DIFFUSE\u3001GL_SPECULAR\u3001GL_EMISSION\u6216GL_AMBIENT_AND_DIFFUSE\u3002\u65e2\u4e0d\u80fd\u5728glBegin\u548cglEnd\u8c03\u7528\u4e4b\u95f4\u8c03\u7528glEnable\uff0c\u4e5f\u4e0d\u80fd\u8c03\u7528glColorMaterial\uff0c\u56e0\u6b64\u539f\u7d20\u7684\u6240\u6709\u9876\u70b9\u5fc5\u987b\u4f7f\u7528\u76f8\u540c\u7684\u8bbe\u7f6e\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u5f53\u4f7f\u7528glDrawArrays\u6216glDrawElements\u7ed8\u5236\u539f\u7d20\u65f6\uff0c\u539f\u7d20\u7684\u9876\u70b9\u7684\u989c\u8272\u503c\u53ef\u4ee5\u4ece\u989c\u8272\u6570\u7ec4\u4e2d\u83b7\u53d6\uff0c\u4f7f\u7528glColorPointer\u6307\u5b9a\u3002\uff08\u89c13.4.2\u5c0f\u8282\u3002\uff09\u6ca1\u6709\u7c7b\u4f3c\u7684\u6570\u7ec4\u7528\u4e8e\u6750\u8d28\u5c5e\u6027\u3002\u7136\u800c\uff0c\u5982\u679c\u5728\u4f7f\u7528glDrawArrays\u6216glDrawElements\u65f6\u542f\u7528\u4e86\u7167\u660e\uff0c\u5e76\u4e14\u4e5f\u542f\u7528\u4e86GL_COLOR_MATERIAL\uff0c\u90a3\u4e48\u989c\u8272\u6570\u7ec4\u5c06\u88ab\u7528\u4f5c\u8ddf\u8e2a\u989c\u8272\u7684\u6750\u8d28\u5c5e\u6027\u503c\u7684\u6765\u6e90\u3002</p> <p>Material properties are vertex attributes in that same way that color is a vertex attribute. That is, the OpenGL state includes a current value for each of the material properties. When a vertex is generated by a call to one of the glVertex* functions, a copy of each of the current material properties is stored, along with the vertex coordinates. When a primitive that contains the vertex is rendered, the material properties that are associated with the vertex are used, along with information about lighting, to compute a color for the vertex.</p> <p>This is complicated by the fact that polygons are two-sided, and the front face and back face of a polygon can have different materials. This means that, in fact, two sets of material property values are stored for each vertex: the front material and the back material. (The back material isn't actually used unless you turn on two-sided lighting, which will be discussed below.)</p> <p>With all that in mind, we will look at functions for setting the current values of material properties. For setting the ambient, diffuse, specular, and emission material colors, the function is</p> <pre><code>void glMaterialfv( int side, int property, float* valueArray )\n</code></pre> <p>The first parameter can be GL_FRONT_AND_BACK, GL_FRONT, or GL_BACK. It tells whether you are setting a material property value for the front face, the back face, or both. The second parameter tells which material property is being set. It can be GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, or GL_AMBIENT_AND_DIFFUSE. Note that it is possible to set the ambient and diffuse colors to the same value with one call to glMaterialfv by using GL_AMBIENT_AND_DIFFUSE as the property name; this is the most common case. The last parameter to glMaterialfv is an array containing four float numbers. The numbers give the RGBA color components as values in the range from 0.0 to 1.0; values outside this range are actually allowed, and will be used in lighting computations, but such values are unusual. Note that an alpha component is required, but it is used only in the case of diffuse color: When the vertex color is computed, its alpha component is set equal to the alpha component of the diffuse material color.</p> <p>The shininess material property is a single number rather than an array, and there is a different function for setting its value (without the \"v\" at the end of the name):</p> <pre><code>void glMaterialf( int side, int property, float value )\n</code></pre> <p>Again, the side can be GL_FRONT_AND_BACK, GL_FRONT, or GL_BACK. The property must be GL_SHININESS. And the value is a float in the range 0.0 to 128.0.</p> <p>Compared to the large number of versions of glColor and glVertex, the options for setting material are limited. In particular, it is not possible to set a material color without defining an array to contain the color component values. Suppose for example that we want to set the ambient and diffuse colors to a bluish green. In C, that might be done with</p> <pre><code>float bgcolor[4] = { 0.0, 0.7, 0.5, 1.0 };\nglMaterialfv( GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, bgcolor );\n</code></pre> <p>With my JavaScript simulator for OpenGL, this would look like</p> <pre><code>let bgcolor = [ 0.0, 0.7, 0.5, 1.0 ];\nglMaterialfv( GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, bgcolor );\n</code></pre> <p>And in the JOGL API for Java, where methods with array parameters have an additional parameter to give the starting index of the data in the array, it becomes</p> <pre><code>float[] bgcolor = { 0.0F, 0.7F, 0.5F, 1.0F };\ngl.glMaterialfv(GL2.GL_FRONT_AND_BACK, GL2.GL_AMBIENT_AND_DIFFUSE, bgcolor, 0);\n</code></pre> <p>In C, the third parameter is actually a pointer to float, which allows the flexibility of storing the values for several material properties in one array. Suppose, for example, that we have a C array</p> <pre><code>float gold[13] = { 0.24725, 0.1995, 0.0745, 1.0,      /* ambient */\n                0.75164, 0.60648, 0.22648, 1.0,    /* diffuse */\n                0.628281, 0.555802, 0.366065, 1.0, /* specular */\n                50.0                               /* shininess */\n    };\n</code></pre> <p>where the first four numbers in the array specify an ambient color; the next four, a diffuse color; the next four, a specular color; and the last number, a shininess exponent. This array can be used to set all the material properties:</p> <pre><code>glMaterialfv( GL_FRONT_AND_BACK, GL_AMBIENT, gold );\nglMaterialfv( GL_FRONT_AND_BACK, GL_DIFFUSE, &amp;gold[4] );\nglMaterialfv( GL_FRONT_AND_BACK, GL_SPECULAR, &amp;gold[8] );\nglMaterialf( GL_FRONT_AND_BACK, GL_SHININESS, gold[12] );\n</code></pre> <p>Note that the last function is glMaterialf rather than glMaterialfv, and that its third parameter is a number rather than a pointer. Something similar can be done in Java with</p> <pre><code>float[] gold = { 0.24725F, 0.1995F, 0.0745F, 1.0F,      /* ambient */\n                0.75164F, 0.60648F, 0.22648F, 1.0F,    /* diffuse */\n                0.628281F, 0.555802F, 0.366065F, 1.0F, /* specular */\n                50.0F                                  /* shininess */\n    };\n\ngl.glMaterialfv( GL2.GL_FRONT_AND_BACK, GL2.GL_AMBIENT, gold, 0 );\ngl.glMaterialfv( GL2.GL_FRONT_AND_BACK, GL2.GL_DIFFUSE, gold, 4 );\ngl.glMaterialfv( GL2.GL_FRONT_AND_BACK, GL2.GL_SPECULAR, gold, 8 );\ngl.glMaterialf( GL2.GL_FRONT_AND_BACK, GL2.GL_SHININESS, gold[12] );\n</code></pre> <p>The functions glMaterialfv and glMaterialf can be called at any time, including between calls to glBegin and glEnd. This means that different vertices of a primitive can have different material properties.</p> <p>So, maybe you like glColor* better than glMaterialfv? If so, you can use it to work with material as well as regular color. If you call</p> <pre><code>glEnable( GL_COLOR_MATERIAL );\n</code></pre> <p>then some of the material color properties will track the color. By default, setting the color will also set the current front and back, ambient and diffuse material properties. That is, for example, calling</p> <pre><code>glColor3f( 1, 0, 0 );\n</code></pre> <p>will, if lighting is enabled, have the same effect as calling</p> <pre><code>glMaterialfv( GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, array );\nwhere array contains the values 1, 0, 0, 1. You can change the material property that tracks the color using\n\n```c\nvoid glColorMaterial( side, property );\n</code></pre> <p>where side can be GL_FRONT_AND_BACK, GL_FRONT, or GL_BACK, and property can be GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, or GL_AMBIENT_AND_DIFFUSE. Neither glEnable nor glColorMaterial can be called between calls to glBegin and glEnd, so all of the vertices of a primitive must use the same setting.</p> <p>Recall that when glDrawArrays or glDrawElements is used to draw a primitive, the color values for the vertices of the primitive can be taken from a color array, as specified using glColorPointer. (See Subsection 3.4.2.) There are no similar arrays for material properties. However, if a color array is used while lighting is enabled, and if GL_COLOR_MATERIAL is also enabled, then the color array will be used as the source for the values of the material properties that are tracking the color.</p>"},{"location":"cn/c4/s2/#422-\u5b9a\u4e49\u6cd5\u5411\u91cf","title":"4.2.2 \u5b9a\u4e49\u6cd5\u5411\u91cf","text":"<p>Defining Normal Vectors</p> \u4e2d\u6587\u82f1\u6587 <p>\u6cd5\u5411\u91cf\u5bf9\u7167\u660e\u8ba1\u7b97\u81f3\u5173\u91cd\u8981\u3002\uff08\u89c1\u5c0f\u82824.1.3\uff09\u3002\u50cf\u989c\u8272\u548c\u6750\u8d28\u4e00\u6837\uff0c\u6cd5\u5411\u91cf\u4e5f\u662f\u9876\u70b9\u7684\u5c5e\u6027\u3002OpenGL\u72b6\u6001\u5305\u62ec\u4e00\u4e2a\u5f53\u524d\u6cd5\u5411\u91cf\uff0c\u8be5\u6cd5\u5411\u91cf\u662f\u901a\u8fc7glNormal\u7cfb\u5217\u51fd\u6570\u8bbe\u7f6e\u7684\u3002\u5f53\u4f7f\u7528glVertex\u6307\u5b9a\u9876\u70b9\u65f6\uff0c\u4f1a\u4fdd\u5b58\u5f53\u524d\u6cd5\u5411\u91cf\u7684\u526f\u672c\u4f5c\u4e3a\u9876\u70b9\u7684\u5c5e\u6027\uff0c\u5e76\u4e14\u5728\u901a\u8fc7\u7167\u660e\u65b9\u7a0b\u8ba1\u7b97\u9876\u70b9\u989c\u8272\u65f6\uff0c\u5c06\u5176\u7528\u4f5c\u8be5\u9876\u70b9\u7684\u6cd5\u5411\u91cf\u3002\u8bf7\u6ce8\u610f\uff0c\u9876\u70b9\u7684\u6cd5\u5411\u91cf\u5fc5\u987b\u5728\u8c03\u7528\u8be5\u9876\u70b9\u7684*glVertex\u4e4b\u524d\u6307\u5b9a\u3002</p> <p>glNormal\u7cfb\u5217\u51fd\u6570\u5305\u62ecglNormal3f\u3001glNormal3d\u3001glNormal3fv\u548cglNormal3dv\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u201cv\u201d\u8868\u793a\u503c\u5728\u6570\u7ec4\u4e2d\uff0c\u201cf\u201d\u8868\u793a\u503c\u662f\u6d6e\u70b9\u6570\uff0c\u201cd\u201d\u8868\u793a\u503c\u662f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570**\u3002\uff08\u6240\u6709\u6cd5\u5411\u91cf\u90fd\u6709\u4e09\u4e2a\u5206\u91cf\uff09\u3002\u4e00\u4e9b\u793a\u4f8b\uff1a</p> <pre><code>glNormal3f(0, 0, 1);  //\uff08\u8fd9\u662f\u9ed8\u8ba4\u503c\u3002\uff09\nglNormal3d(0.707, 0.707, 0.0);\nfloat normalArray[3] = {0.577, 0.577, 0.577};\nglNormal3fv(normalArray);\n</code></pre> <p>\u5bf9\u4e8e\u5e94\u8be5\u770b\u8d77\u6765\u662f\u5e73\u9762\u7684\u591a\u8fb9\u5f62\uff0c\u6240\u6709\u9876\u70b9\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u6cd5\u5411\u91cf\u3002\u4f8b\u5982\uff0c\u8981\u7ed8\u5236\u4e00\u4e2a\u9762\u5411\u6b63y\u8f74\u65b9\u5411\u7684\u7acb\u65b9\u4f53\u7684\u201c\u9876\u90e8\u201d\u9762\uff1a</p> <pre><code>glNormal3f(0, 1, 0); // \u6307\u5411\u6b63y\u8f74\u65b9\u5411\nglBegin(GL_QUADS);\nglVertex3fv(1,1,1);  \nglVertex3fv(1,1,-1);\nglVertex3fv(-1,1,-1);\nglVertex3fv(-1,1,1);\nglEnd();\n</code></pre> <p>\u8bb0\u4f4f\uff0c\u6cd5\u5411\u91cf\u5e94\u8be5\u6307\u5411\u591a\u8fb9\u5f62\u7684\u524d\u8868\u9762\uff0c\u5e76\u4e14\u524d\u8868\u9762\u662f\u7531\u751f\u6210\u9876\u70b9\u7684\u987a\u5e8f\u51b3\u5b9a\u7684\u3002\uff08\u60a8\u53ef\u80fd\u8ba4\u4e3a\u524d\u8868\u9762\u5e94\u8be5\u7531\u6cd5\u5411\u91cf\u6307\u5411\u7684\u65b9\u5411\u51b3\u5b9a\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u975e\u5982\u6b64\u3002\u5982\u679c\u9876\u70b9\u7684\u6cd5\u5411\u91cf\u6307\u5411\u9519\u8bef\u7684\u65b9\u5411\uff0c\u90a3\u4e48\u7167\u660e\u8ba1\u7b97\u5c06\u65e0\u6cd5\u4e3a\u8be5\u9876\u70b9\u7ed9\u51fa\u6b63\u786e\u7684\u989c\u8272\u3002\uff09</p> <p>\u5f53\u5efa\u6a21\u5e73\u6ed1\u8868\u9762\u65f6\uff0c\u6cd5\u5411\u91cf\u5e94\u5782\u76f4\u4e8e\u8868\u9762\uff0c\u800c\u4e0d\u662f\u5782\u76f4\u4e8e\u8fd1\u4f3c\u8868\u9762\u7684\u591a\u8fb9\u5f62\u3002\uff08\u89c1\u5c0f\u82824.1.3\uff09\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u7ed8\u5236\u4e00\u4e2a\u534a\u5f84\u4e3a1\uff0c\u9ad8\u5ea6\u4e3a2\u7684\u5706\u67f1\u4f53\u7684\u4fa7\u9762\uff0c\u5176\u4e2d\u5706\u67f1\u4f53\u7684\u4e2d\u5fc3\u4f4d\u4e8e(0,0,0)\uff0c\u8f74\u6cbf\u7740z\u8f74\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u4e09\u89d2\u5f62\u6761\u5e26\u6765\u8fd1\u4f3c\u8868\u9762\u3002\u5706\u67f1\u4f53\u4fa7\u9762\u7684\u9876\u90e8\u548c\u5e95\u90e8\u8fb9\u7f18\u662f\u5706\u5f62\u3002\u6cbf\u7740\u4e0a\u8fb9\u7f18\u7684\u9876\u70b9\u5c06\u5177\u6709\u5750\u6807(cos(a),sin(a),1)\uff0c\u6cbf\u7740\u4e0b\u8fb9\u7f18\u7684\u9876\u70b9\u5c06\u5177\u6709\u5750\u6807(cos(a),sin(a),-1)\uff0c\u5176\u4e2da\u662f\u67d0\u4e2a\u89d2\u5ea6\u3002\u6cd5\u5411\u91cf\u6307\u5411\u4e0e\u534a\u5f84\u76f8\u540c\u7684\u65b9\u5411\uff0c\u4f46\u7531\u4e8e\u5b83\u76f4\u63a5\u4ece\u5706\u67f1\u4f53\u4fa7\u9762\u4f38\u51fa\uff0c\u5176z\u5750\u6807\u4e3a\u96f6\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u4e24\u4e2a\u70b9\u4e0a\uff0c\u5706\u67f1\u4f53\u4fa7\u9762\u7684\u6cd5\u5411\u91cf\u5c06\u662f(cos(a),sin(a),0)\u3002\u4ecez\u8f74\u9876\u90e8\u5411\u4e0b\u770b\u5706\u67f1\u4f53\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <p></p> <p>\u5f53\u6211\u4eec\u5c06\u5706\u67f1\u4f53\u7684\u4fa7\u9762\u4f5c\u4e3a\u4e09\u89d2\u5f62\u6761\u5e26\u7ed8\u5236\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u4ea4\u66ff\u7684\u8fb9\u7f18\u4e0a\u751f\u6210\u9876\u70b9\u5bf9\u3002\u6cd5\u5411\u91cf\u5bf9\u4e8e\u8fd9\u5bf9\u9876\u70b9\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bf9\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u662f\u4ee3\u7801\uff1a</p> <pre><code>glBegin(GL_TRIANGLE_STRIP);\nfor (i = 0; i &lt;= 16; i++) {\n    double angle = 2*3.14159/16 * i;  // i\u662f\u5706\u5468\u768416\u5206\u4e4b\u4e00\n    double x = cos(angle);\n    double y = sin(angle);\n    glNormal3f(x, y, 0);  // \u8fd9\u4e2a\u89d2\u5ea6\u7684\u4e24\u4e2a\u9876\u70b9\u7684\u6cd5\u5411\u91cf\u3002\n    glVertex3f(x, y, 1);  // \u5728\u4e0a\u8fb9\u7f18\u7684\u9876\u70b9\u3002\n    glVertex3f(x, y, -1); // \u5728\u4e0b\u8fb9\u7f18\u7684\u9876\u70b9\u3002\n}\nglEnd();\n</code></pre> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u5f53\u6211\u4eec\u7ed8\u5236\u5706\u67f1\u4f53\u7684\u9876\u90e8\u548c\u5e95\u90e8\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u662f\u4e00\u4e2a\u5e73\u9762\u591a\u8fb9\u5f62\uff0c\u9876\u90e8\u7684\u6cd5\u5411\u91cf\u6307\u5411(0,0,1)\u65b9\u5411\uff0c\u5e95\u90e8\u7684\u6cd5\u5411\u91cf\u6307\u5411(0,0,-1)\u65b9\u5411\uff1a</p> <pre><code>glNormal3f(0, 0, 1);\nglBegin(GL_TRIANGLE_FAN);  // \u7ed8\u5236\u9876\u90e8\uff0c\u5728z = 1\u5e73\u9762\u4e0a\u3002\nfor (i = 0; i &lt;= 16; i++) {\n    double angle = 2*3.14159/16 * i;\n    double x = cos(angle);\n    double y = sin(angle);\n    glVertex3f(x, y, 1);\n}\nglEnd();\n\nglNormal3f(0, 0, -1);\nglBegin(GL_TRIANGLE_FAN);  // \u7ed8\u5236\u5e95\u90e8\uff0c\u5728z = -1\u5e73\u9762\u4e0a\u3002\nfor (i = 16; i &gt;= 0; i--) {\n    double angle = 2*3.14159/16 * i;\n    double x = cos(angle);\n    double y = sin(angle);\n    glVertex3f(x, y, -1);\n}\nglEnd();\n</code></pre> <p>\u6ce8\u610f\uff0c\u5e95\u90e8\u7684\u9876\u70b9\u662f\u6309\u4e0e\u9876\u90e8\u9876\u70b9\u76f8\u53cd\u7684\u987a\u5e8f\u751f\u6210\u7684\uff0c\u4ee5\u8003\u8651\u9876\u90e8\u548c\u5e95\u90e8\u9762\u5411\u76f8\u53cd\u65b9\u5411\u7684\u4e8b\u5b9e\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u9876\u70b9\u9700\u8981\u6309\u4ece\u524d\u5f80\u770b\u7684\u9006\u65f6\u9488\u987a\u5e8f\u679a\u4e3e\u3002</p> <p>\u5f53\u4f7f\u7528glDrawArrays\u6216glDrawElements\u7ed8\u5236\u539f\u8bed\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6cd5\u5411\u91cf\u6570\u7ec4\u6765\u4e3a\u6bcf\u4e2a\u9876\u70b9\u63d0\u4f9b\u4e0d\u540c\u7684\u6cd5\u5411\u91cf\u3002\u6cd5\u5411\u91cf\u6570\u7ec4\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u989c\u8272\u6570\u7ec4\u548c\u9876\u70b9\u6570\u7ec4\u76f8\u540c\u3002\u8981\u4f7f\u7528\u5b83\uff0c\u60a8\u9700\u8981\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u542f\u7528\u6cd5\u5411\u91cf\u6570\u7ec4\u7684\u4f7f\u7528\uff1a</p> <pre><code>glEnableClientState(GL_NORMAL_ARRAY);\n</code></pre> <p>\u6cd5\u5411\u91cf\u7684\u5750\u6807\u5fc5\u987b\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\uff08\u6216JOGL\u4e2d\u7684nio\u7f13\u51b2\u533a\u4e2d\uff09\uff0c\u5e76\u4e14\u5fc5\u987b\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u6307\u5b9a\u6570\u636e\u7684\u4f4d\u7f6e\uff1a</p> <pre><code>glNormalPointer(type, stride, data);\n</code></pre> <p>type\u6307\u5b9a\u6570\u7ec4\u4e2d\u503c\u7684\u7c7b\u578b\u3002\u5b83\u53ef\u4ee5\u662fGL_INT\u3001GL_FLOAT\u6216GL_DOUBLE\u3002\u6b65\u957f\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u901a\u5e38\u4e3a0\uff0c\u610f\u5473\u7740\u6cd5\u5411\u91cf\u4e4b\u95f4\u6ca1\u6709\u989d\u5916\u7684\u6570\u636e\u5728\u6570\u7ec4\u4e2d\u3002data\u662f\u5305\u542b\u6cd5\u5411\u91cf\u7684\u6570\u7ec4\uff08\u6216\u7f13\u51b2\u533a\uff09\uff0c\u6bcf\u4e2a\u6cd5\u5411\u91cf\u6709\u4e09\u4e2a\u6570\u5b57\u3002</p> <p>\u6709\u4e86\u8fd9\u6837\u7684\u8bbe\u7f6e\uff0c\u5f53\u4f7f\u7528glDrawArrays\u6216glDrawElements\u7ed8\u5236\u539f\u8bed\u65f6\uff0c\u539f\u8bed\u7684\u6cd5\u5411\u91cf\u5c06\u4ece\u6570\u7ec4\u4e2d\u83b7\u53d6\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u672a\u542f\u7528GL_NORMAL_ARRAY\uff0c\u5219\u539f\u8bed\u7684\u6240\u6709\u6cd5\u5411\u91cf\u5c06\u76f8\u540c\uff0c\u5e76\u5c06\u7b49\u4e8e\u7531glNormal*\u8bbe\u7f6e\u7684\u5f53\u524d\u6cd5\u5411\u91cf\u3002</p> <p>\u7167\u660e\u65b9\u7a0b\u5047\u5b9a\u6cd5\u5411\u91cf\u662f\u5355\u4f4d\u6cd5\u5411\u91cf\uff0c\u5373\u5b83\u4eec\u7684\u957f\u5ea6\u7b49\u4e8e\u4e00\u3002OpenGL\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u662f\u4f7f\u7528\u63d0\u4f9b\u7684\u6cd5\u5411\u91cf\uff0c\u5373\u4f7f\u5b83\u4eec\u7684\u957f\u5ea6\u4e0d\u662f\u4e00\uff0c\u8fd9\u5c06\u7ed9\u51fa\u9519\u8bef\u7684\u7ed3\u679c\u3002\u7136\u800c\uff0c\u5982\u679c\u60a8\u8c03\u7528\uff1a</p> <pre><code>glEnable(GL_NORMALIZE);\n</code></pre> <p>\u90a3\u4e48OpenGL\u5c06\u81ea\u52a8\u5c06\u6bcf\u4e2a\u6cd5\u5411\u91cf\u8f6c\u6362\u4e3a\u6307\u5411\u540c\u4e00\u65b9\u5411\u7684\u5355\u4f4d\u6cd5\u5411\u91cf\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5f53\u5e94\u7528\u51e0\u4f55\u53d8\u6362\u65f6\uff0c\u6cd5\u5411\u91cf\u4f1a\u4e0e\u9876\u70b9\u4e00\u8d77\u53d8\u6362\uff1b\u8fd9\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u53d8\u6362\u53ef\u4ee5\u6539\u53d8\u8868\u9762\u671d\u5411\u7684\u65b9\u5411\u3002\u7f29\u653e\u53d8\u6362\u53ef\u4ee5\u6539\u53d8\u6cd5\u5411\u91cf\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u5373\u4f7f\u60a8\u63d0\u4f9b\u4e86\u5355\u4f4d\u6cd5\u5411\u91cf\uff0c\u5728\u7f29\u653e\u53d8\u6362\u540e\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u662f\u5355\u4f4d\u6cd5\u5411\u91cf\u3002\u7136\u800c\uff0c\u5982\u679c\u60a8\u542f\u7528\u4e86GL_NORMALIZE\uff0c\u53d8\u6362\u540e\u7684\u6cd5\u5411\u91cf\u5c06\u81ea\u52a8\u8f6c\u6362\u56de\u5355\u4f4d\u6cd5\u5411\u91cf\u3002\u6211\u7684\u5efa\u8bae\u662f\u59cb\u7ec8\u5728OpenGL\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u542f\u7528GL_NORMALIZE\u3002\u552f\u4e00\u7684\u4f8b\u5916\u662f\u60a8\u63d0\u4f9b\u7684\u6240\u6709\u6cd5\u5411\u91cf\u7684\u957f\u5ea6\u90fd\u662f\u4e00\uff0c\u5e76\u4e14\u60a8\u4e0d\u5e94\u7528\u4efb\u4f55\u7f29\u653e\u53d8\u6362\u3002\uff08\u5e73\u79fb\u548c\u65cb\u8f6c\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4fee\u6539\u957f\u5ea6\u3002\uff09</p> <p>Normal vectors are essential to lighting calculations. (See Subsection 4.1.3.) Like color and material, normal vectors are attributes of vertices. The OpenGL state includes a current normal vector, which is set using functions in the family glNormal. When a vertex is specified with glVertex*, a copy of the current normal vector is saved as an attribute of the vertex, and it is used as the normal vector for that vertex when the color of the vertex is computed by the lighting equation. Note that the normal vector for a vertex must be specified before glVertex** is called for that vertex.</p> <p>Functions in the family glNormal* include glNormal3f, glNormal3d, glNormal3fv, and glNormal3dv. As usual, a \"v\" means that the values are in an array, \"f\" means that the values are floats, and \"d\" means that the values are doubles. (All normal vectors have three components). Some examples:</p> <pre><code>glNormal3f( 0, 0, 1 );  // (This is the default value.)\nglNormal3d( 0.707, 0.707, 0.0 );\nfloat normalArray[3] = { 0.577, 0.577, 0.577 };\nglNormal3fv( normalArray );\n</code></pre> <p>For a polygon that is supposed to look flat, the same normal vector is used for all of the vertices of the polygon. For example, to draw one side of a cube, say the \"top\" side, facing in the direction of the positive y-axis:</p> <pre><code>glNormal3f( 0, 1, 0 ); // Points along positive y-axis\nglBegin(GL_QUADS);\nglVertex3fv(1,1,1);  \nglVertex3fv(1,1,-1);\nglVertex3fv(-1,1,-1);\nglVertex3fv(-1,1,1);\nglEnd();\n</code></pre> <p>Remember that the normal vector should point out of the front face of the polygon, and that the front face is determined by the order in which the vertices are generated. (You might think that the front face should be determined by the direction in which the normal vector points, but that is not how its done. If a normal vector for a vertex points in the wrong direction, then lighting calculations will not give the correct color for that vertex.)</p> <p>When modeling a smooth surface, normal vectors should be chosen perpendicular to the surface, rather than to the polygons that approximate the surface. (See Subsection 4.1.3.) Suppose that we want to draw the side of a cylinder with radius 1 and height 2, where the center of the cylinder is at (0,0,0) and the axis lies along the z-axis. We can approximate the surface using a single triangle strip. The top and bottom edges of the side of a cylinder are circles. Vertices along the top edge will have coordinates (cos(a),sin(a),1) and vertices along the bottom edge will have coordinates (cos(a),sin(a),\u22121), where a is some angle. The normal vector points in the same direction as the radius, but its z-coordinate is zero since it points directly out from the side of the cylinder. So, the normal vector to the side of the cylinder at both of these points will be (cos(a),sin(a),0). Looking down the z-axis at the top of the cylinder, it looks like this:</p> <p></p> <p>When we draw the side of the cylinder as a triangle strip, we have to generate pairs of vertices on alternating edges. The normal vector is the same for the two vertices in the pair, but it is different for different pairs. Here is the code:</p> <pre><code>glBegin(GL_TRIANGLE_STRIP);\nfor (i = 0; i &lt;= 16; i++) {\n    double angle = 2*3.14159/16 * i;  // i 16-ths of a full circle\n    double x = cos(angle);\n    double y = sin(angle);\n    glNormal3f( x, y, 0 );  // Normal for both vertices at this angle.\n    glVertex3f( x, y, 1 );  // Vertex on the top edge.\n    glVertex3f( x, y, -1 ); // Vertex on the bottom edge.\n}\nglEnd();\n</code></pre> <p>When we draw the top and bottom of the cylinder, on the other hand, we want a flat polygon, with the normal vector pointing in the direction (0,0,1) for the top and in the direction (0,0,\u22121) for the bottom:</p> <pre><code>glNormal3f( 0, 0, 1);\nglBegin(GL_TRIANGLE_FAN);  // Draw the top, in the plane z = 1.\nfor (i = 0; i &lt;= 16; i++) {\n    double angle = 2*3.14159/16 * i;\n    double x = cos(angle);\n    double y = sin(angle);\n    glVertex3f( x, y, 1 );\n}\nglEnd();\n\nglNormal3f( 0, 0, -1 );\nglBegin(GL_TRIANGLE_FAN);  // Draw the bottom, in the plane z = -1\nfor (i = 16; i &gt;= 0; i--) {\n    double angle = 2*3.14159/16 * i;\n    double x = cos(angle);\n    double y = sin(angle);\n    glVertex3f( x, y, -1 );\n}\nglEnd();\n</code></pre> <p>Note that the vertices for the bottom are generated in the opposite order from the vertices for the top, to account for the fact that the top and bottom face in opposite directions. As always, vertices need to be enumerated in counterclockwise order, as seen from the front.</p> <p>When drawing a primitive with glDrawArrays or glDrawElements, it is possible to provide a different normal for each vertex by using a normal array to hold the normal vectors. The normal array works in the same way as the color array and the vertex array. To use one, you need to enable the use of a normal array by calling</p> <pre><code>glEnableClientState(GL_NORMAL_ARRAY);\n</code></pre> <p>The coordinates for the normal vectors must be stored in an array (or in an nio buffer for JOGL), and the location of the data must be specified by calling</p> <pre><code>glNormalPointer( type, stride, data );\n</code></pre> <p>The type specifies the type of values in the array. It can be GL_INT, GL_FLOAT, or GL_DOUBLE. The stride is an integer, which is usually 0, meaning that there is no extra data in the array between the normal vectors. And data is the array (or buffer) that holds the normal vectors, with three numbers for each normal.</p> <p>With this setup, when glDrawArrays or glDrawElements is used to draw a primitive, the normal vectors for the primitive will be pulled from the array. Note that if GL_NORMAL_ARRAY is not enabled, then all of the normal vectors for the primitive will be the same, and will be equal to the current normal vector as set by glNormal*.</p> <p>The lighting equation assumes that normal vectors are unit normals, that is, that they have length equal to one. The default in OpenGL is to use normal vectors as provided, even if they don't have length one, which will give incorrect results. However, if you call</p> <pre><code>glEnable(GL_NORMALIZE);\n</code></pre> <p>then OpenGL will automatically convert every normal vector into a unit normal that points in the same direction.</p> <p>Note that when a geometric transform is applied, normal vectors are transformed along with vertices; this is necessary because a transformation can change the direction in which a surface is facing. A scaling transformation can change the length of a normal vector, so even if you provided unit normal vectors, they will not be unit normals after a scaling transformation. However, if you have enabled GL_NORMALIZE, the transformed normals will automatically be converted back to unit normals. My recommendation is to always enable GL_NORMALIZE as part of your OpenGL initialization. The only exception would be if all of the normal vectors that you provide are of length one and you do not apply any scaling transformations. (Translations and rotations are OK, because they do not modify lengths.)</p>"},{"location":"cn/c4/s2/#423-\u5e94\u7528\u706f\u5149","title":"4.2.3 \u5e94\u7528\u706f\u5149","text":"<p>Working with Lights</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL 1.1 \u81f3\u5c11\u652f\u6301\u516b\u4e2a\u5149\u6e90\uff0c\u5b83\u4eec\u7531\u5e38\u91cf GL_LIGHT0, GL_LIGHT1, ..., GL_LIGHT7 \u6807\u8bc6\u3002\uff08OpenGL \u5b9e\u73b0\u53ef\u80fd\u5141\u8bb8\u989d\u5916\u7684\u5149\u6e90\u3002\uff09\u6bcf\u4e2a\u5149\u6e90\u53ef\u4ee5\u914d\u7f6e\u4e3a\u65b9\u5411\u5149\u6216\u70b9\u5149\u6e90\uff0c\u6bcf\u4e2a\u5149\u6e90\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u6563\u5c04\u3001\u955c\u9762\u548c\u73af\u5883\u5149\u5f3a\u5ea6\u3002\uff08\u89c1\u5c0f\u82824.1.2\u3002\uff09</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u5149\u6e90\u90fd\u662f\u7981\u7528\u7684\u3002\u8981\u542f\u7528\u4e00\u4e2a\u5149\u6e90\uff0c\u8c03\u7528 glEnable(light)\uff0c\u5176\u4e2d light \u662f GL_LIGHT0, GL_LIGHT1, ... \u7b49\u5e38\u91cf\u4e4b\u4e00\u3002\u7136\u800c\uff0c\u4ec5\u4ec5\u542f\u7528\u4e00\u4e2a\u5149\u6e90\u5e76\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u7167\u660e\uff0c\u9664\u4e86 GL_LIGHT0 \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6240\u6709\u5149\u5f3a\u5ea6\u9ed8\u8ba4\u90fd\u4e3a\u96f6\uff0c\u552f\u4e00\u7684\u4f8b\u5916\u662f\u7b2c0\u53f7\u5149\u7684\u6563\u5c04\u989c\u8272\u3002\u8981\u4ece\u5176\u4ed6\u5149\u6e90\u83b7\u5f97\u5149\uff0c\u60a8\u9700\u8981\u66f4\u6539\u5b83\u4eec\u7684\u4e00\u4e9b\u5c5e\u6027\u3002\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u8bbe\u7f6e\u5149\u6e90\u5c5e\u6027\uff1a</p> <pre><code>void glLightfv(int light, int property, float* valueArray);\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f GL_LIGHT0, GL_LIGHT1, ..., GL_LIGHT7 \u4e2d\u7684\u4e00\u4e2a\u5e38\u91cf\u3002\u5b83\u6307\u5b9a\u4e86\u6b63\u5728\u914d\u7f6e\u7684\u5149\u6e90\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u660e\u4e86\u6b63\u5728\u8bbe\u7f6e\u7684\u5149\u6e90\u5c5e\u6027\uff0c\u53ef\u4ee5\u662f GL_DIFFUSE, GL_SPECULAR, GL_AMBIENT, \u6216 GL_POSITION\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u81f3\u5c11\u5305\u542b\u56db\u4e2a\u6d6e\u70b9\u6570\uff0c\u7ed9\u51fa\u5c5e\u6027\u7684\u503c\u3002</p> <p>\u5bf9\u4e8e\u989c\u8272\u5c5e\u6027\uff0c\u6570\u7ec4\u4e2d\u7684\u56db\u4e2a\u6570\u5b57\u6307\u5b9a\u4e86\u989c\u8272\u7684\u7ea2\u8272\u3001\u7eff\u8272\u3001\u84dd\u8272\u548c\u900f\u660e\u5ea6\u5206\u91cf\u3002\uff08\u900f\u660e\u5ea6\u5206\u91cf\u5b9e\u9645\u4e0a\u6ca1\u6709\u7528\u3002\uff09\u503c\u901a\u5e38\u57280.0\u52301.0\u7684\u8303\u56f4\u5185\uff0c\u4f46\u4e5f\u53ef\u4ee5\u8d85\u51fa\u8fd9\u4e2a\u8303\u56f4\uff1b\u4e8b\u5b9e\u4e0a\uff0c\u5927\u4e8e1.0\u7684\u503c\u6709\u65f6\u662f\u6709\u7528\u7684\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5149\u6e90\u7684\u6563\u5c04\u548c\u955c\u9762\u989c\u8272\u544a\u8bc9\u4e86\u5149\u5982\u4f55\u4e0e\u6563\u5c04\u548c\u955c\u9762\u6750\u8d28\u989c\u8272\u4e92\u52a8\uff0c\u73af\u5883\u989c\u8272\u5728\u542f\u7528\u5149\u6e90\u65f6\u7b80\u5355\u5730\u6dfb\u52a0\u5230\u5168\u5c40\u73af\u5883\u5149\u4e2d\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u7b2c0\u53f7\u5149\u8bbe\u7f6e\u4e3a\u5e26\u6709\u84dd\u8272\u955c\u9762\u9ad8\u5149\u7684\u84dd\u8272\u5149\uff0c\u5e76\u5728\u6253\u5f00\u65f6\u5411\u73af\u5883\u5149\u4e2d\u6dfb\u52a0\u4e00\u70b9\u84dd\u8272\uff0c\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528\uff1a</p> <pre><code>float blue1[4] = {0.4, 0.4, 0.6, 1};\nfloat blue2[4] = {0, 0, 0.8, 1};\nfloat blue3[4] = {0, 0, 0.15, 1};\nglLightfv(GL_LIGHT1, GL_DIFFUSE, blue1);\nglLightfv(GL_LIGHT1, GL_SPECULAR, blue2);\nglLightfv(GL_LIGHT1, GL_AMBIENT, blue3);\n</code></pre> <p>\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u5b9e\u9a8c\u624d\u80fd\u51c6\u786e\u5730\u627e\u51fa\u6570\u7ec4\u4e2d\u8981\u4f7f\u7528\u7684\u503c\uff0c\u4ee5\u83b7\u5f97\u60a8\u60f3\u8981\u7684\u6548\u679c\u3002</p> <p>\u5149\u6e90\u7684 GL_POSITION \u5c5e\u6027\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u5b83\u65e2\u7528\u4e8e\u8bbe\u7f6e\u5149\u6e90\u662f\u70b9\u5149\u6e90\u8fd8\u662f\u65b9\u5411\u5149\uff0c\u4e5f\u7528\u4e8e\u8bbe\u7f6e\u5176\u4f4d\u7f6e\u6216\u65b9\u5411\u3002GL_POSITION \u7684\u5c5e\u6027\u503c\u662f\u4e00\u4e2a\u5305\u542b\u56db\u4e2a\u6570\u5b57\uff08x,y,z,w\uff09\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5fc5\u987b\u975e\u96f6\u3002\u5f53\u7b2c\u56db\u4e2a\u6570\u5b57\uff0cw\uff0c\u4e3a\u96f6\u65f6\uff0c\u5149\u6e90\u662f\u65b9\u5411\u5149\uff0c\u70b9 (x,y,z) \u6307\u5b9a\u4e86\u5149\u6e90\u7684\u65b9\u5411\uff1a\u5149\u7ebf\u6cbf\u7740\u4ece\u70b9 (x,y,z) \u5230 \u539f\u70b9\u7684\u7ebf\u7684\u65b9\u5411\u7167\u5c04\u3002\u8fd9\u4e0e\u9f50\u6b21\u5750\u6807\u6709\u5173\uff1a\u5149\u6e90\u7684\u6e90\u5934\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5728 (x,y,z) \u65b9\u5411\u4e0a\u65e0\u9650\u8fdc\u7684\u70b9\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u7b2c\u56db\u4e2a\u6570\u5b57\uff0cw\uff0c\u975e\u96f6\uff0c\u90a3\u4e48\u5149\u6e90\u662f\u70b9\u5149\u6e90\uff0c\u5b83\u4f4d\u4e8e\u70b9 (x/w, y/w, z/w)\u3002\u901a\u5e38\uff0cw \u662f 1\u3002\u503c (x,y,z,1) \u7ed9\u51fa\u4e86\u4f4d\u4e8e (x,y,z) \u7684\u70b9\u5149\u6e90\u3002\u540c\u6837\uff0c\u8fd9\u786e\u5b9e\u662f\u9f50\u6b21\u5750\u6807\u3002</p> <p>\u6240\u6709\u5149\u6e90\u7684\u9ed8\u8ba4\u4f4d\u7f6e\u662f (0,0,1,0)\uff0c\u8868\u793a\u4ece z \u8f74\u6b63\u65b9\u5411\u7167\u5c04\u5230 z \u8f74\u8d1f\u65b9\u5411\u7684\u65b9\u5411\u5149\u3002</p> <p>\u5173\u4e8e\u5149\u6e90\u7684\u4e00\u4e2a\u91cd\u8981\u4e14\u53ef\u80fd\u4ee4\u4eba\u56f0\u60d1\u7684\u4e8b\u5b9e\u662f\uff0c\u4e3a\u5149\u6e90\u6307\u5b9a\u7684\u4f4d\u7f6e\u4f1a\u901a\u8fc7\u4f7f\u7528 glLightfv \u8bbe\u7f6e\u4f4d\u7f6e\u65f6\u6709\u6548\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u8fdb\u884c\u53d8\u6362\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f4d\u7f6e\u662f\u4ee5\u773c\u775b\u5750\u6807\u8bbe\u7f6e\u7684\uff0c\u800c\u4e0d\u662f\u4e16\u754c\u5750\u6807\u3002\u7528\u5c5e\u6027\u8bbe\u7f6e\u4e3a GL_POSITION \u8c03\u7528 glLightfv \u975e\u5e38\u7c7b\u4f3c\u4e8e\u8c03\u7528 glVertex*\u3002\u5149\u6e90\u4f4d\u7f6e\u7684\u53d8\u6362\u65b9\u5f0f\u4e0e\u9876\u70b9\u5750\u6807\u7684\u53d8\u6362\u65b9\u5f0f\u76f8\u540c\u3002\u4f8b\u5982\uff0c</p> <pre><code>float position[4] = {1,2,3,1};\nglLightfv(GL_LIGHT1, GL_POSITION, position);\n</code></pre> <p>\u5c06\u5149\u6e90\u653e\u7f6e\u5728\u4e0e</p> <pre><code>glTranslatef(1,2,3);\nfloat position[4] = {0,0,0,1};\nglLightfv(GL_LIGHT1, GL_POSITION, position);\n</code></pre> <p>\u76f8\u540c\u7684\u5730\u65b9\u3002\u5bf9\u4e8e\u65b9\u5411\u5149\uff0c\u5149\u6e90\u7684\u65b9\u5411\u4f1a\u901a\u8fc7\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u7684\u65cb\u8f6c\u90e8\u5206\u8fdb\u884c\u53d8\u6362\u3002</p> <p>\u4f7f\u7528\u5149\u6e90\u4f4d\u7f6e\u6709\u4e09\u79cd\u57fa\u672c\u65b9\u6cd5\u3002\u6700\u5bb9\u6613\u7684\u601d\u8003\u65b9\u5f0f\u662f\u8003\u8651\u53ef\u80fd\u7684\u52a8\u753b\u573a\u666f\u3002</p> <p>\u7b2c\u4e00\u79cd\uff0c\u5982\u679c\u5728\u5e94\u7528\u4efb\u4f55\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u4e4b\u524d\u8bbe\u7f6e\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5149\u6e90\u76f8\u5bf9\u4e8e\u89c2\u5bdf\u8005\u662f\u56fa\u5b9a\u7684\u3002\u4f8b\u5982\uff0c\u9ed8\u8ba4\u7684\u5149\u6e90\u4f4d\u7f6e\u5728\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u4e3a\u5355\u4f4d\u77e9\u9635\u65f6\u6709\u6548\u5730\u8bbe\u7f6e\u4e3a (0,0,1,0)\u3002\u8fd9\u610f\u5473\u7740\u5b83\u6cbf\u7740\u89c2\u5bdf\u8005\u5750\u6807\u7cfb\u4e2d z \u8f74\u7684\u8d1f\u65b9\u5411\u7167\u5c04\uff0c\u5176\u4e2d z \u8f74\u8d1f\u65b9\u5411\u6307\u5411\u5c4f\u5e55\u5185\u3002\u53e6\u4e00\u79cd\u8bf4\u6cd5\u662f\uff0c\u5149\u6e90\u603b\u662f\u4ece\u89c2\u5bdf\u8005\u65b9\u5411\u7167\u5c04\u8fdb\u573a\u666f\u3002\u5c31\u50cf\u5149\u6e90\u9644\u7740\u5728\u89c2\u5bdf\u8005\u4e0a\u3002\u5982\u679c\u89c2\u5bdf\u8005\u5728\u4e16\u754c\u4e2d\u79fb\u52a8\uff0c\u5149\u6e90\u4e5f\u4f1a\u968f\u7740\u89c2\u5bdf\u8005\u79fb\u52a8\u3002</p> <p>\u7b2c\u4e8c\u79cd\uff0c\u5982\u679c\u5728\u5e94\u7528\u4e86\u89c2\u5bdf\u53d8\u6362\u5e76\u4e14\u5728\u5e94\u7528\u4efb\u4f55\u5efa\u6a21\u53d8\u6362\u4e4b\u524d\u8bbe\u7f6e\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5149\u6e90\u7684\u4f4d\u7f6e\u56fa\u5b9a\u5728\u4e16\u754c\u5750\u6807\u4e2d\u3002\u5b83\u4e0d\u4f1a\u968f\u7740\u89c2\u5bdf\u8005\u79fb\u52a8\uff0c\u4e5f\u4e0d\u4f1a\u968f\u7740\u573a\u666f\u4e2d\u7684\u5bf9\u8c61\u79fb\u52a8\u3002\u5c31\u50cf\u5149\u6e90\u9644\u7740\u5728\u4e16\u754c\u4e0a\u3002</p> <p>\u7b2c\u4e09\u79cd\uff0c\u5982\u679c\u5728\u5e94\u7528\u4e86\u5efa\u6a21\u53d8\u6362\u4e4b\u540e\u8bbe\u7f6e\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5149\u6e90\u4f1a\u53d7\u5230\u8be5\u5efa\u6a21\u53d8\u6362\u7684\u5f71\u54cd\u3002\u8fd9\u53ef\u4ee5\u7528\u6765\u5236\u4f5c\u4e00\u4e2a\u968f\u7740\u5efa\u6a21\u53d8\u6362\u6539\u53d8\u800c\u5728\u573a\u666f\u4e2d\u79fb\u52a8\u7684\u5149\u6e90\u3002\u5982\u679c\u5149\u6e90\u53d7\u5230\u4e0e\u5bf9\u8c61\u76f8\u540c\u7684\u5efa\u6a21\u53d8\u6362\u7684\u5f71\u54cd\uff0c\u90a3\u4e48\u5149\u6e90\u5c06\u968f\u7740\u5bf9\u8c61\u79fb\u52a8\uff0c\u5c31\u597d\u50cf\u5b83\u9644\u7740\u5728\u5bf9\u8c61\u4e0a\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f glut/four-lights.c \u6216 jogl/FourLights.java \u4f7f\u7528\u4e86\u591a\u4e2a\u79fb\u52a8\u7684\u5f69\u8272\u5149\u6e90\uff0c\u5e76\u5141\u8bb8\u60a8\u6253\u5f00\u548c\u5173\u95ed\u5b83\u4eec\u4ee5\u67e5\u770b\u6548\u679c\u3002\u4e0b\u9762\u7684\u6f14\u793a\u662f\u540c\u4e00\u4e2a\u7a0b\u5e8f\u7684 JavaScript \u7248\u672c\u3002\u8be5\u7a0b\u5e8f\u8ba9\u60a8\u53ef\u4ee5\u770b\u5230\u6765\u81ea\u4e0d\u540c\u6765\u6e90\u7684\u5149\u5982\u4f55\u7ed3\u5408\u4ea7\u751f\u5bf9\u8c61\u7684\u53ef\u89c1\u989c\u8272\u3002\u6e90\u4ee3\u7801\u63d0\u4f9b\u4e86\u914d\u7f6e\u5149\u6e90\u548c\u4f7f\u7528\u6750\u8d28\u5c5e\u6027\u7684\u793a\u4f8b\u3002</p> <p></p> <p>OpenGL 1.1 supports at least eight light sources, which are identified by the constants GL_LIGHT0, GL_LIGHT1, ..., GL_LIGHT7. (An OpenGL implementation might allow additional lights.) Each light source can be configured to be either a directional light or a point light, and each light can have its own diffuse, specular, and ambient intensities. (See Subsection 4.1.2.)</p> <p>By default, all of the light sources are disabled. To enable a light, call glEnable(light), where light is one of the constants GL_LIGHT0, GL_LIGHT1, .... However, just enabling a light does not give any illumination, except in the case of GL_LIGHT0, since all light intensities are zero by default, with the single exception of the diffuse color of light number 0. To get any light from the other light sources, you need to change some of their properties. Light properties can be set using the functions</p> <pre><code>void glLightfv( int light, int property, float* valueArray );\n</code></pre> <p>The first parameter is one of the constants GL_LIGHT0, GL_LIGHT1, ..., GL_LIGHT7. It specifies which light is being configured. The second parameter says which property of the light is being set. It can be GL_DIFFUSE, GL_SPECULAR, GL_AMBIENT, or GL_POSITION. The last parameter is an array that contains at least four float numbers, giving the value of the property.</p> <p>For the color properties, the four numbers in the array specify the red, green, blue, and alpha components of the color. (The alpha component is not actually used for anything.) The values generally lie in the range 0.0 to 1.0, but can lie outside that range; in fact, values larger than 1.0 are occasionally useful. Remember that the diffuse and specular colors of a light tell how the light interacts with the diffuse and specular material colors, and the ambient color is simply added to the global ambient light when the light is enabled. For example, to set up light zero as a bluish light, with blue specular highlights, that adds a bit of blue to the ambient light when it is turned on, you might use:</p> <pre><code>float blue1[4] = { 0.4, 0.4, 0.6, 1 };\nfloat blue2[4] = { 0, 0, 0.8, 1 };\nfloat blue3[4] = { 0, 0, 0.15, 1 };\nglLightfv( GL_LIGHT1, GL_DIFFUSE, blue1 );\nglLightfv( GL_LIGHT1, GL_SPECULAR, blue2 );\nglLightfv( GL_LIGHT1, GL_AMBIENT, blue3 );\n</code></pre> <p>It would likely take some experimentation to figure out exactly what values to use in the arrays to get the effect that you want.</p> <p>The GL_POSITION property of a light is quite a bit different. It is used both to set whether the light is a point light or a directional light, and to set its position or direction. The property value for GL_POSITION is an array of four numbers (x,y,z,w), of which at least one must be non-zero. When the fourth number, w, is zero, then the light is directional and the point (x,y,z) specifies the direction of the light: The light rays shine in the direction of the line from the point (x,y,z) towards the origin. This is related to homogeneous coordinates: The source of the light can be considered to be a point at infinity in the direction of (x,y,z).</p> <p>On the other hand, if the fourth number, w, is non-zero, then the light is a point light, and it is located at the point (x/w, y/w, z/w). Usually, w is 1. The value (x,y,z,1) gives a point light at (x,y,z). Again, this is really homogeneous coordinates.</p> <p>The default position for all lights is (0,0,1,0), representing a directional light shining from the positive direction of the z-axis, towards the negative direction of the z-axis.</p> <p>One important and potentially confusing fact about lights is that the position that is specified for a light is transformed by the modelview transformation that is in effect at the time the position is set using glLightfv. Another way of saying this is that the position is set in eye coordinates, not in world coordinates. Calling glLightfv with the property set to GL_POSITION is very much like calling glVertex*. The light position is transformed in the same way that the vertex coordinates would be transformed. For example,</p> <pre><code>float position[4] = { 1,2,3,1 }\nglLightfv(GL_LIGHT1, GL_POSITION, position);\n</code></pre> <p>puts the light in the same place as</p> <pre><code>glTranslatef(1,2,3);\nfloat position[4] = { 0,0,0,1 }\nglLightfv(GL_LIGHT1, GL_POSITION, position);\n</code></pre> <p>For a directional light, the direction of the light is transformed by the rotational part of the modelview transformation.</p> <p>There are three basic ways to use light position. It is easiest to think in terms of potentially animated scenes.</p> <p>First, if the position is set before any modelview transformation is applied, then the light is fixed with respect to the viewer. For example, the default light position is effectively set to (0,0,1,0) while the modelview transform is the identity. This means that it shines in the direction of the negative z-axis, in the coordinate system of the viewer, where the negative z-axis points into the screen. Another way of saying this is that the light always shines from the direction of the viewer into the scene. It's like the light is attached to the viewer. If the viewer moves about in the world, the light moves with the viewer.</p> <p>Second, if the position is set after the viewing transform has been applied and before any modeling transform is applied, then the position of the light is fixed in world coordinates. It will not move with the viewer, and it will not move with objects in the scene. It's like the light is attached to the world.</p> <p>Third, if the position is set after a modeling transform has been applied, then the light is subject to that modeling transformation. This can be used to make a light that moves around in the scene as the modeling transformation changes. If the light is subject to the same modeling transformation as an object, then the light will move around with that object, as if it is attached to the object.</p> <p>The sample program glut/four-lights.c or jogl/FourLights.java uses multiple moving, colored lights and lets you turn them on and off to see the effect. The demo below is a JavaScript version of the same program. The program lets you see how light from various sources combines to produce the visible color of an object. The source code provides examples of configuring lights and using material properties.</p> <p></p>"},{"location":"cn/c4/s2/#424-\u5168\u5c40\u5149\u7167\u5c5e\u6027","title":"4.2.4 \u5168\u5c40\u5149\u7167\u5c5e\u6027","text":"<p>Global Lighting Properties</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL 1.1 \u4e2d\u7684\u7167\u660e\u7cfb\u7edf\u9664\u4e86\u5355\u4e2a\u5149\u6e90\u7684\u5c5e\u6027\u5916\uff0c\u8fd8\u4f7f\u7528\u4e86\u51e0\u4e2a\u5168\u5c40\u5c5e\u6027\u3002\u5728 OpenGL 1.1 \u4e2d\uff0c\u53ea\u6709\u4e09\u4e2a\u8fd9\u6837\u7684\u5c5e\u6027\u3002\u5176\u4e2d\u4e4b\u4e00\u662f\u5168\u5c40\u73af\u5883\u5149\uff0c\u5b83\u4e0d\u6765\u81ea\u4efb\u4f55\u5149\u6e90\u7684\u73af\u5883\u989c\u8272\u5c5e\u6027\u3002\u5373\u4f7f\u6240\u6709 GL_LIGHT0, GL_LIGHT1, ... \u90fd\u88ab\u7981\u7528\uff0c\u5168\u5c40\u73af\u5883\u5149\u4e5f\u4f1a\u5b58\u5728\u4e8e\u73af\u5883\u4e2d\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5168\u5c40\u73af\u5883\u5149\u662f\u9ed1\u8272\u7684\uff08\u5373\u5176 RGB \u5206\u91cf\u90fd\u662f\u96f6\uff09\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u66f4\u6539\u5176\u503c\uff1a</p> <pre><code>void glLightModelfv(int property, float* value)\n</code></pre> <p>\u5176\u4e2d property \u5fc5\u987b\u662f GL_LIGHT_MODEL_AMBIENT\uff0cvalue \u662f\u4e00\u4e2a\u5305\u542b\u56db\u4e2a\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u7ed9\u51fa\u5168\u5c40\u73af\u5883\u5149\u7684 RGBA \u989c\u8272\u5206\u91cf\uff0c\u8303\u56f4\u5728 0.0 \u5230 1.0 \u4e4b\u95f4\u3002\u901a\u5e38\uff0c\u5168\u5c40\u73af\u5883\u5149\u7684\u7ea7\u522b\u5e94\u8be5\u76f8\u5f53\u4f4e\u3002\u4f8b\u5982\uff0c\u5728 C \u8bed\u8a00\u4e2d\uff1a</p> <pre><code>float ambientLevel[] = {0.15, 0.15, 0.15, 1};\nglLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambientLevel);\n</code></pre> <p>\u989c\u8272\u7684 alpha \u5206\u91cf\u901a\u5e38\u8bbe\u7f6e\u4e3a 1\uff0c\u4f46\u4e0d\u88ab\u7528\u4e8e\u4efb\u4f55\u76ee\u7684\u3002\u5bf9\u4e8e JOGL\uff0c\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6709\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6765\u6307\u5b9a\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u8d77\u59cb\u7d22\u5f15\uff0c\u793a\u4f8b\u53d8\u6210\uff1a</p> <pre><code>float[] ambientLevel = {0.15F, 0.15F, 0.15F, 0};\ngl.glLightModelfv(GL2.GL_LIGHT_MODEL_AMBIENT, ambientLevel, 0);\n</code></pre> <p>\u53e6\u5916\u4e24\u4e2a\u5149\u6a21\u578b\u5c5e\u6027\u662f\u9009\u9879\uff0c\u53ef\u4ee5\u5173\u95ed\u6216\u5f00\u542f\u3002\u8fd9\u4e9b\u5c5e\u6027\u662f GL_LIGHT_MODEL_TWO_SIDE \u548c GL_LIGHT_MODEL_LOCAL_VIEWER\u3002\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u8bbe\u7f6e\uff1a</p> <pre><code>void glLightModeli(int property, int value)\n</code></pre> <p>value \u7684\u503c\u4e3a 0 \u6216 1\uff0c\u8868\u793a\u9009\u9879\u662f\u5426\u5173\u95ed\u6216\u5f00\u542f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7b26\u53f7\u5e38\u91cf GL_FALSE \u548c GL_TRUE \u4f5c\u4e3a value\uff0c\u4f46\u8fd9\u4e9b\u53ea\u662f 0 \u548c 1 \u7684\u540d\u79f0\u3002</p> <p>GL_LIGHT_MODEL_TWO_SIDE \u7528\u4e8e\u5f00\u542f\u53cc\u9762\u7167\u660e\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u591a\u8fb9\u5f62\u53ef\u4ee5\u6709\u4e24\u5957\u6750\u8d28\u5c5e\u6027\uff0c\u524d\u6750\u8d28\u548c\u540e\u6750\u8d28\u3002\u5f53\u53cc\u9762\u7167\u660e\u5173\u95ed\u65f6\uff08\u8fd9\u662f\u9ed8\u8ba4\u8bbe\u7f6e\uff09\uff0c\u53ea\u4f7f\u7528\u524d\u6750\u8d28\uff1b\u5b83\u65e2\u7528\u4e8e\u591a\u8fb9\u5f62\u7684\u524d\u8868\u9762\uff0c\u4e5f\u7528\u4e8e\u540e\u8868\u9762\u3002\u6b64\u5916\uff0c\u76f8\u540c\u7684\u6cd5\u5411\u91cf\u7528\u4e8e\u4e24\u4e2a\u8868\u9762\u3002\u7531\u4e8e\u8fd9\u4e9b\u5411\u91cf\u6307\u5411\u2014\u2014\u6216\u8005\u81f3\u5c11\u5e94\u8be5\u662f\u6307\u5411\u2014\u2014\u591a\u8fb9\u5f62\u524d\u8868\u9762\u7684\u5916\u90e8\uff0c\u5b83\u4eec\u5bf9\u4e8e\u540e\u8868\u9762\u6ca1\u6709\u7ed9\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002\u5b9e\u9645\u4e0a\uff0c\u540e\u8868\u9762\u770b\u8d77\u6765\u50cf\u662f\u88ab\u591a\u8fb9\u5f62\u524d\u9762\u7684\u5149\u6e90\u7167\u4eae\u7684\uff0c\u4f46\u540e\u8868\u9762\u5e94\u8be5\u88ab\u4f4d\u4e8e\u591a\u8fb9\u5f62\u540e\u9762\u7684\u5149\u6e90\u7167\u4eae\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u5f53\u53cc\u9762\u7167\u660e\u5f00\u542f\u65f6\uff0c\u540e\u8868\u9762\u4f7f\u7528\u540e\u6750\u8d28\uff0c\u5e76\u4e14\u5728\u7167\u660e\u8ba1\u7b97\u4e2d\u4f7f\u7528\u540e\u8868\u9762\u65f6\u6cd5\u5411\u91cf\u7684\u65b9\u5411\u4f1a\u88ab\u53cd\u8f6c\u3002</p> <p>\u6bcf\u5f53\u573a\u666f\u4e2d\u53ef\u80fd\u6709\u53ef\u89c1\u7684\u540e\u8868\u9762\u65f6\uff0c\u60a8\u90fd\u5e94\u8be5\u4f7f\u7528\u53cc\u9762\u7167\u660e\u3002\uff08\u5f53\u60a8\u7684\u573a\u666f\u7531\u201c\u5b9e\u4f53\u201d\u5bf9\u8c61\u7ec4\u6210\uff0c\u540e\u8868\u9762\u9690\u85cf\u5728\u5b9e\u4f53\u5185\u90e8\u65f6\uff0c\u5c31\u4e0d\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5\u3002\uff09\u4f7f\u7528\u53cc\u9762\u7167\u660e\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u5728\u4e24\u4e2a\u8868\u9762\u4e0a\u4f7f\u7528\u76f8\u540c\u7684\u6750\u8d28\uff0c\u6216\u4e3a\u4e24\u4e2a\u8868\u9762\u6307\u5b9a\u4e0d\u540c\u7684\u6750\u8d28\u3002\u4f8b\u5982\uff0c\u5728\u524d\u8868\u9762\u653e\u7f6e\u6709\u5149\u6cfd\u7684\u7d2b\u8272\u6750\u8d28\uff0c\u5728\u540e\u8868\u9762\u653e\u7f6e\u8f83\u6697\u7684\u9ec4\u8272\u6750\u8d28\uff1a</p> <pre><code>glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, 1); // \u5f00\u542f\u53cc\u9762\u7167\u660e\u3002\n\nfloat purple[] = {0.6, 0, 0.6, 1};\nfloat yellow[] = {0.6, 0.6, 0, 1};\nfloat white[] = {0.4, 0.4, 0.4, 1}; // \u7528\u4e8e\u955c\u9762\u9ad8\u5149\u3002\nfloat black[] = {0, 0, 0, 1};\n\nglMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, purple);  // \u524d\u6750\u8d28\nglMaterialfv(GL_FRONT, GL_SPECULAR, white);\nglMaterialf(GL_FRONT, GL_SHININESS, 64);\n\nglMaterialfv(GL_BACK, GL_AMBIENT_AND_DIFFUSE, yellow);  // \u540e\u6750\u8d28\nglMaterialfv(GL_BACK, GL_SPECULAR, black);  // \u6ca1\u6709\u955c\u9762\u9ad8\u5149\n</code></pre> <p>\u8fd9\u4e2a\u5c0f\u6f14\u793a\u5c55\u793a\u4e86\u8fd9\u4e9b\u6750\u8d28\u5728\u4e00\u4e2a\u6ca1\u6709\u9876\u90e8\u7684\u5706\u67f1\u4f53\u4e0a\u7684\u5916\u89c2\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728\u5185\u8868\u9762\u770b\u5230\u540e\u8868\u9762\uff1a</p> <p></p> <p>\u7b2c\u4e09\u4e2a\u6750\u8d28\u5c5e\u6027\uff0cGL_LIGHT_MODEL_LOCAL_VIEWER\uff0c\u91cd\u8981\u6027\u5c0f\u5f97\u591a\u3002\u5b83\u4e0e\u7167\u660e\u65b9\u7a0b\u4e2d\u4ece\u8868\u9762\u5230\u89c2\u5bdf\u8005\u7684\u65b9\u5411\u6709\u5173\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65b9\u5411\u603b\u662f\u76f4\u63a5\u6307\u5411\u5c4f\u5e55\u5916\uff0c\u8fd9\u5bf9\u4e8e\u6b63\u4ea4\u6295\u5f71\u662f\u6b63\u786e\u7684\uff0c\u4f46\u5bf9\u4e8e\u900f\u89c6\u6295\u5f71\u5219\u4e0d\u51c6\u786e\u3002\u5982\u679c\u60a8\u5f00\u542f\u672c\u5730\u89c2\u5bdf\u8005\u9009\u9879\uff0c\u5c06\u4f7f\u7528\u771f\u5b9e\u7684\u89c2\u5bdf\u8005\u65b9\u5411\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u5dee\u5f02\u901a\u5e38\u4e0d\u662f\u5f88\u660e\u663e\u3002</p> <p>In addition to the properties of individual light sources, the OpenGL lighting system uses several global properties. There are only three such properties in OpenGL 1.1. One of them is the global ambient light, which is ambient light that doesn't come from the ambient color property of any light source. Global ambient light will be present in the environment even if all of GL_LIGHT0, GL_LIGHT1, ... are disabled. By default, the global ambient light is black (that is, its RGB components are all zero). The value can be changed using the function</p> <pre><code>void glLightModelfv( int property, float* value )\n</code></pre> <p>where the property must be GL_LIGHT_MODEL_AMBIENT and the value is an array containing four numbers giving the RGBA color components of the global ambient light as numbers in the range 0.0 to 1.0. In general, the global ambient light level should be quite low. For example, in C:</p> <pre><code>float ambientLevel[] = { 0.15, 0.15, 0.15, 1 };\nglLightModelfv( GL_LIGHT_MODEL_AMBIENT, ambientLevel );\n</code></pre> <p>The alpha component of the color is usually set to 1, but it is not used for anything. For JOGL, as usual, there is an extra parameter to specify the starting index of the data in the array, and the example becomes:</p> <pre><code>float[] ambientLevel = { 0.15F, 0.15F, 0.15F, 0 };\ngl.glLightModelfv( GL2.GL_LIGHT_MODEL_AMBIENT, ambientLevel, 0 );\n</code></pre> <p>The other two light model properties are options that can be either off or on. The properties are GL_LIGHT_MODEL_TWO_SIDE and GL_LIGHT_MODEL_LOCAL_VIEWER. They can be set using the function</p> <pre><code>void glLightModeli( int property, int value )\n</code></pre> <p>with a value equal to 0 or 1 to indicate whether the option should be off or on. You can use the symbolic constants GL_FALSE and GL_TRUE for the value, but these are just names for 0 and 1.</p> <p>GL_LIGHT_MODEL_TWO_SIDE is used to turn on two-sided lighting. Recall that a polygon can have two sets of material properties, a front material and a back material. When two-sided lighting is off, which is the default, only the front material is used; it is used for both the front face and the back face of the polygon. Furthermore, the same normal vector is used for both faces. Since those vectors point\u2014or at least are supposed to point\u2014out of the front face, they don't give the correct result for the back face. In effect, the back face looks like it is illuminated by light sources that lie in front of the polygon, but the back face should be illuminated by the lights that lie behind the polygon.</p> <p>On the other hand, when two-sided lighting is on, the back material is used on the back face and the direction of the normal vector is reversed when it is used in lighting calculations for the back face.</p> <p>You should use two-sided lighting whenever there are back faces that might be visible in your scene. (This will not be the case when your scene consists of \"solid\" objects, where the back faces are hidden inside the solid.) With two-sided lighting, you have the option of using the same material on both faces or specifying different materials for the two faces. For example, to put a shiny purple material on front faces and a duller yellow material on back faces:</p> <pre><code>glLightModeli( GL_LIGHT_MODEL_TWO_SIDE, 1 ); // Turn on two-sided lighting.\n\nfloat purple[] = { 0.6, 0, 0.6, 1 };\nfloat yellow[] = { 0.6, 0.6, 0, 1 };\nfloat white[] = { 0.4, 0.4, 0.4, 1 }; // For specular highlights.\nfloat black[] = { 0, 0, 0, 1 };\n\n\nglMaterialfv( GL_FRONT, GL_AMBIENT_AND_DIFFUSE, purple );  // front material\nglMaterialfv( GL_FRONT, GL_SPECULAR, white );\nglMaterialf( GL_FRONT, GL_SHININESS, 64 );\n\nglMaterialfv( GL_BACK, GL_AMBIENT_AND_DIFFUSE, yellow );  // back material\nglMaterialfv( GL_BACK, GL_SPECULAR, black );  // no specular highlights\n</code></pre> <p>This little demo shows what these materials look like on a cylinder that has no top, so that you can see the back faces on the inside surface:</p> <p></p> <p>The third material property, GL_LIGHT_MODEL_LOCAL_VIEWER, is much less important. It has to do with the direction from a surface to the viewer in the lighting equation. By default, this direction is always taken to point directly out of the screen, which is true for an orthographic projection but is not accurate for a perspective projection. If you turn on the local viewer option, the true direction to the viewer is used. In practice, the difference is usually not very noticeable.</p>"},{"location":"cn/c4/s3/","title":"4.3 \u56fe\u50cf\u7eb9\u7406","text":"<p>Image Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u7edf\u4e00\u989c\u8272\u76843D\u5bf9\u8c61\u770b\u8d77\u6765\u8db3\u591f\u597d\uff0c\u4f46\u5b83\u4eec\u6709\u70b9\u5355\u8c03\u3002\u5b83\u4eec\u7684\u7edf\u4e00\u989c\u8272\u6ca1\u6709\u50cf\u7816\u5899\u6216\u683c\u5b50\u6c99\u53d1\u90a3\u6837\u7684\u89c6\u89c9\u5438\u5f15\u529b\u3002\u901a\u8fc7\u5728\u8868\u9762\u6dfb\u52a0\u7eb9\u7406\uff0c\u53ef\u4ee5\u4f7f\u4e09\u7ef4\u5bf9\u8c61\u770b\u8d77\u6765\u66f4\u6709\u8da3\u3001\u66f4\u903c\u771f\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7eb9\u7406\u662f\u5728\u5355\u4e2a\u539f\u7d20\u5185\u90e8\u50cf\u7d20\u4e0e\u50cf\u7d20\u4e4b\u95f4\u7684\u53d8\u5316\u3002\u6211\u4eec\u53ea\u8003\u8651\u4e00\u79cd\u7eb9\u7406\uff1a\u56fe\u50cf\u7eb9\u7406\u3002\u56fe\u50cf\u7eb9\u7406\u53ef\u4ee5\u5e94\u7528\u4e8e\u8868\u9762\uff0c\u4f7f\u8868\u9762\u7684\u8272\u6cfd\u4ece\u70b9\u5230\u70b9\u53d8\u5316\uff0c\u6709\u70b9\u50cf\u5c06\u56fe\u50cf\u590d\u5236\u5230\u8868\u9762\u4e0a\u3002\u4ee5\u4e0b\u662f\u5c55\u793a\u4e86\u516d\u4e2a\u5177\u6709\u4e0d\u540c\u56fe\u50cf\u7eb9\u7406\u7684\u5bf9\u8c61\u7684\u56fe\u7247\uff1a</p> <p></p> <p>\uff08\u5730\u7403\u5730\u5f62\u56fe\u50cf\uff0c\u7531 NASA/JPL-Caltech \u63d0\u4f9b\u3002\u7816\u5757\u548c\u91d1\u5c5e\u662f\u514d\u8d39\u7eb9\u7406\uff08\u4ece\u5df2\u4e0d\u5b58\u5728\u7684\u7f51\u7ad9\u4e0b\u8f7d\uff09\u3002\u5730\u7403\u591c\u666f\u56fe\u50cf\u62cd\u6444\u81ea \u6bcf\u65e5\u5929\u6587\u56fe\u7247 \u7f51\u7ad9\uff1b\u5b83\u4e5f\u662f NASA/JPL \u7684\u56fe\u50cf\u3002\u53ef\u4ee5\u5728\u7f51\u7ad9\u4e0b\u8f7d\u6e90\u6587\u4ef6\u5939\u4e2d\u7684 jogl \u6216 glut \u6587\u4ef6\u5939\u5185\u7684 textures \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u56fe\u50cf\u526f\u672c\u3002\u672c\u4e66\u4e2d\u7684\u51e0\u4e2a\u793a\u4f8b\u5c06\u4f7f\u7528\u8be5\u6587\u4ef6\u5939\u4e2d\u7684\u56fe\u50cf\u3002\uff09</p> <p>\u7eb9\u7406\u53ef\u80fd\u662f OpenGL \u6700\u590d\u6742\u7684\u90e8\u5206\uff0c\u5e76\u4e14\u5b83\u4eec\u662f\u81ea OpenGL 1.1 \u4ee5\u6765\u4e00\u76f4\u5b58\u5728\u5e76\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u7684\u90e8\u5206\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bf9\u4e8e\u6709\u6548\u521b\u5efa\u903c\u771f\u56fe\u50cf\u81f3\u5173\u91cd\u8981\u3002\u672c\u8282\u53ea\u6db5\u76d6\u4e86 OpenGL 1.1 \u7eb9\u7406 API \u7684\u90e8\u5206\u5185\u5bb9\u3002\u6211\u4eec\u5c06\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u770b\u5230\u66f4\u591a\u7684\u7eb9\u7406\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u7528\u4f5c\u7eb9\u7406\u7684\u56fe\u50cf\u5e94\u5177\u6709\u4e3a\u4e8c\u7684\u5e42\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u4f8b\u5982 128\u3001256 \u6216 512\u3002\u8fd9\u662f OpenGL 1.1 \u7684\u8981\u6c42\u3002\u5728\u67d0\u4e9b\u7248\u672c\u4e2d\u653e\u5bbd\u4e86\u8fd9\u4e00\u8981\u6c42\uff0c\u4f46\u4f7f\u7528\u4e8c\u7684\u5e42\u7eb9\u7406\u4ecd\u7136\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u672c\u8282\u8ba8\u8bba\u7684\u4e00\u4e9b\u4e8b\u60c5\u5982\u679c\u4e0d\u4f7f\u7528\u4e8c\u7684\u5e42\u7eb9\u7406\uff0c\u5373\u4f7f\u5728\u73b0\u4ee3\u7cfb\u7edf\u4e2d\u4e5f\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002</p> <p>\u5f53\u56fe\u50cf\u7eb9\u7406\u5e94\u7528\u4e8e\u8868\u9762\u65f6\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u8868\u9762\u7684\u50cf\u7d20\u7684 RGBA \u989c\u8272\u5206\u91cf\u4e0e\u56fe\u50cf\u4e2d\u7684\u989c\u8272\u5206\u91cf\u76f8\u4e58\u3002\u5982\u679c\u542f\u7528\u4e86\u7167\u660e\uff0c\u8868\u9762\u989c\u8272\u5c06\u88ab\u7167\u660e\u6548\u679c\u4fee\u6539\uff0c\u7136\u540e\u4e0e\u7eb9\u7406\u989c\u8272\u76f8\u4e58\u3002\u901a\u5e38\u4f7f\u7528\u767d\u8272\u4f5c\u4e3a\u8868\u9762\u989c\u8272\u3002\u5982\u679c\u8868\u9762\u4f7f\u7528\u4e0d\u540c\u7684\u989c\u8272\uff0c\u5b83\u5c06\u4e3a\u7eb9\u7406\u56fe\u50cf\u7684\u989c\u8272\u6dfb\u52a0\u4e00\u79cd\u201c\u8272\u5f69\u503e\u5411\u201d\u3002</p> <p>Uniformly colored 3D objects look nice enough, but they are a little bland. Their uniform colors don't have the visual appeal of, say, a brick wall or a plaid couch. Three-dimensional objects can be made to look more interesting and more realistic by adding a texture to their surfaces. A texture, in general, is some sort of variation from pixel to pixel within a single primitive. We will consider only one kind of texture: image textures. An image texture can be applied to a surface to make the color of the surface vary from point to point, something like painting a copy of the image onto the surface. Here is a picture that shows six objects with various image textures:</p> <p></p> <p>(Topographical Earth image, courtesy NASA/JPL-Caltech. The brick and metal are free textures (which were downloaded from a web site that no longer exists). EarthAtNight image taken from the Astronomy Picture of the Day web site; it is also a NASA/JPL image. Copies of the images can be found in the folder named textures in either the jogl or glut folder inside the source folder of the web site download. Images from that folder will be used in several examples in this book.)</p> <p>Textures might be the most complicated part of OpenGL, and they are a part that has survived, and become more complicated, in the most modern versions since they are so vital for the efficient creation of realistic images. This section covers only part of the OpenGL 1.1 texture API. We will see more of textures in later chapters.</p> <p>Note that an image that is used as a texture should have a width and a height that are powers of two, such as 128, 256, or 512. This is a requirement in OpenGL 1.1. The requirement is relaxed in some versions, but it's still a good idea to use power-of-two textures Some of the things discussed in this section will not work with non-power-of-two textures, even on modern systems.</p> <p>When an image texture is applied to a surface, the default behavior is to multiply the RGBA color components of pixels on the surface by the color components from the image. The surface color will be modified by light effects, if lighting is turned on, before it is multiplied by the texture color. It is common to use white as the surface color. If a different color is used on the surface, it will add a \"tint\" to the color from the texture image.</p>"},{"location":"cn/c4/s3/#431-\u7eb9\u7406\u5750\u6807","title":"4.3.1 \u7eb9\u7406\u5750\u6807","text":"<p>Texture Coordinates</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u4e00\u4e2a\u7eb9\u7406\u5e94\u7528\u4e8e\u8868\u9762\u65f6\uff0c\u8868\u9762\u4e0a\u7684\u6bcf\u4e2a\u70b9\u5fc5\u987b\u5bf9\u5e94\u4e8e\u7eb9\u7406\u4e2d\u7684\u4e00\u4e2a\u70b9\u3002\u5fc5\u987b\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u786e\u5b9a\u5982\u4f55\u8ba1\u7b97\u8fd9\u79cd\u6620\u5c04\u3002\u4e3a\u6b64\uff0c\u5bf9\u8c61\u9700\u8981\u7eb9\u7406\u5750\u6807\u3002\u6b63\u5982\u5728 OpenGL \u4e2d\u901a\u5e38\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u4e3a\u4e00\u4e2a\u539f\u7d20\u7684\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u7eb9\u7406\u5750\u6807\u3002\u539f\u7d20\u5185\u90e8\u70b9\u7684\u7eb9\u7406\u5750\u6807\u901a\u8fc7\u63d2\u503c\u9876\u70b9\u7684\u503c\u6765\u8ba1\u7b97\u3002</p> <p>\u7eb9\u7406\u56fe\u50cf\u5e26\u6709\u5b83\u81ea\u5df1\u7684\u4e8c\u7ef4\u5750\u6807\u7cfb\u7edf\u3002\u4f20\u7edf\u4e0a\uff0cs \u7528\u4e8e\u56fe\u50cf\u7684\u6c34\u5e73\u5750\u6807\uff0ct \u7528\u4e8e\u5782\u76f4\u5750\u6807\u3002s \u5750\u6807\u662f\u4e00\u4e2a\u5b9e\u6570\uff0c\u4ece\u56fe\u50cf\u5de6\u4fa7\u7684 0 \u5230\u53f3\u4fa7\u7684 1\uff0c\u800c t \u4ece\u5e95\u90e8\u7684 0 \u5230\u9876\u90e8\u7684 1\u3002s \u6216 t \u7684\u503c\u5728 0 \u5230 1 \u8303\u56f4\u4e4b\u5916\u4e0d\u5904\u4e8e\u56fe\u50cf\u5185\u90e8\uff0c\u4f46\u8fd9\u6837\u7684\u503c\u4f5c\u4e3a\u7eb9\u7406\u5750\u6807\u4ecd\u7136\u6709\u6548\u3002\u8bf7\u6ce8\u610f\uff0c\u7eb9\u7406\u5750\u6807\u4e0d\u662f\u57fa\u4e8e\u50cf\u7d20\u7684\u3002\u65e0\u8bba\u56fe\u50cf\u5927\u5c0f\u5982\u4f55\uff0cs \u548c t \u7684\u503c\u5728 0 \u548c 1 \u4e4b\u95f4\u8986\u76d6\u6574\u4e2a\u56fe\u50cf\u3002</p> <p>\u8981\u7ed8\u5236\u4e00\u4e2a\u5e26\u7eb9\u7406\u7684\u539f\u7d20\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e2a\u9876\u70b9\u63d0\u4f9b\u4e00\u5bf9\u6570\u5b57 (s,t)\u3002\u8fd9\u4e9b\u662f\u8be5\u9876\u70b9\u7684\u7eb9\u7406\u5750\u6807\u3002\u5b83\u4eec\u6307\u793a\u56fe\u50cf\u4e2d\u7684\u54ea\u4e2a\u70b9\u6620\u5c04\u5230\u9876\u70b9\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5c06 EarthAtNight \u56fe\u50cf\u7684\u4e00\u90e8\u5206\u5e94\u7528\u4e8e\u4e00\u4e2a\u4e09\u89d2\u5f62\u539f\u7d20\u3002\u5047\u8bbe\u5c06\u8981\u6620\u5c04\u5230\u539f\u7d20\u7684\u56fe\u50cf\u533a\u57df\u662f\u8fd9\u91cc\u7528\u7c97\u6a59\u8272\u8f6e\u5ed3\u663e\u793a\u7684\u4e09\u89d2\u5f62\uff1a</p> <p></p> <p>\u8fd9\u4e2a\u533a\u57df\u7684\u9876\u70b9\u5177\u6709 (s,t) \u5750\u6807 (0.3,0.1)\uff0c(0.45,0.6) \u548c (0.25,0.7)\u3002\u8fd9\u4e9b\u6765\u81ea\u56fe\u50cf\u7684\u5750\u6807\u5e94\u8be5\u7528\u4f5c\u4e09\u89d2\u5f62\u539f\u7d20\u9876\u70b9\u7684\u7eb9\u7406\u5750\u6807\u3002</p> <p>\u9876\u70b9\u7684\u7eb9\u7406\u5750\u6807\u662f\u9876\u70b9\u7684\u5c5e\u6027\uff0c\u5c31\u50cf\u989c\u8272\u3001\u6cd5\u5411\u91cf\u548c\u6750\u8d28\u5c5e\u6027\u4e00\u6837\u3002\u7eb9\u7406\u5750\u6807\u7531 glTexCoord \u7cfb\u5217\u51fd\u6570\u6307\u5b9a\uff0c\u5305\u62ec\u51fd\u6570 glTexCoord2f(s,t)\uff0cglTexCoord2d(s,t)\uff0cglTexCoord2fv(array) \u548c glTexCoord2dv(array)\u3002OpenGL \u72b6\u6001\u5305\u62ec\u7531\u8fd9\u4e9b\u51fd\u6570\u6307\u5b9a\u7684\u5f53\u524d\u7eb9\u7406\u5750\u6807\u96c6\u3002\u5f53\u60a8\u4f7f\u7528 glVertex \u6307\u5b9a\u4e00\u4e2a\u9876\u70b9\u65f6\uff0c\u5f53\u524d\u7eb9\u7406\u5750\u6807\u88ab\u590d\u5236\u5e76\u6210\u4e3a\u4e00\u4e2a\u4e0e\u9876\u70b9\u5173\u8054\u7684\u5c5e\u6027\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u8fd9\u610f\u5473\u7740\u9876\u70b9\u7684\u7eb9\u7406\u5750\u6807\u5fc5\u987b\u5728\u8c03\u7528 *glVertex \u4e4b\u524d\u6307\u5b9a\u3002\u4e00\u4e2a\u539f\u7d20\u7684\u6bcf\u4e2a\u9876\u70b9\u90fd\u9700\u8981\u4e0d\u540c\u7684\u7eb9\u7406\u5750\u6807\u96c6\u3002</p> <p>\u4f8b\u5982\uff0c\u8981\u5c06\u4e0a\u56fe\u4e2d\u7684\u4e09\u89d2\u5f62\u533a\u57df\u5e94\u7528\u4e8e xy \u5e73\u9762\u4e0a\u9876\u70b9\u4f4d\u4e8e (0,0)\uff0c(0,1) \u548c (1,0) \u7684\u4e09\u89d2\u5f62\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a</p> <pre><code>glNormal3d(0,0,1);       // \u8fd9\u4e2a\u6cd5\u5411\u9002\u7528\u4e8e\u6240\u6709\u4e09\u4e2a\u9876\u70b9\u3002\nglBegin(GL_TRIANGLES);\nglTexCoord2d(0.3,0.1);   // \u9876\u70b9 (0,0) \u7684\u7eb9\u7406\u5750\u6807\nglVertex2d(0,0);\nglTexCoord2d(0.45,0.6);  // \u9876\u70b9 (0,1) \u7684\u7eb9\u7406\u5750\u6807\nglVertex2d(0,1);\nglTexCoord2d(0.25,0.7);  // \u9876\u70b9 (1,0) \u7684\u7eb9\u7406\u5750\u6807\nglVertex2d(1,0);\nglEnd();\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u9876\u70b9\u7684 (x,y) \u5750\u6807\uff08\u7ed9\u51fa\u5176\u5728\u7a7a\u95f4\u4e2d\u7684\u4f4d\u7f6e\uff09\u4e0e\u9876\u70b9\u5173\u8054\u7684 (s,t) \u7eb9\u7406\u5750\u6807\u4e4b\u95f4\u6ca1\u6709\u7279\u5b9a\u7684\u5173\u7cfb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u7ed8\u5236\u7684\u4e09\u89d2\u5f62\u4e0e\u56fe\u50cf\u4e2d\u7684\u4e09\u89d2\u5f62\u533a\u57df\u5f62\u72b6\u4e0d\u540c\uff0c\u90a3\u90e8\u5206\u56fe\u50cf\u5c06\u4e0d\u5f97\u4e0d\u88ab\u62c9\u4f38\u548c\u626d\u66f2\u4ee5\u9002\u5e94\u3002\u5728\u5927\u591a\u6570\u7eb9\u7406\u56fe\u50cf\u7684\u4f7f\u7528\u4e2d\u90fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u626d\u66f2\u3002</p> <p>\u6709\u65f6\uff0c\u5f88\u96be\u51b3\u5b9a\u4f7f\u7528\u4ec0\u4e48\u7eb9\u7406\u5750\u6807\u3002\u4e00\u4e2a\u5bb9\u6613\u51b3\u5b9a\u7684\u6848\u4f8b\u662f\u5c06\u5b8c\u6574\u7eb9\u7406\u5e94\u7528\u4e8e\u77e9\u5f62\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5b83\u7ed8\u5236 xy \u5e73\u9762\u4e0a\u7684\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u5e26\u6709\u9002\u5f53\u7684\u7eb9\u7406\u5750\u6807\uff0c\u5c06\u6574\u4e2a\u56fe\u50cf\u6620\u5c04\u5230\u6b63\u65b9\u5f62\u4e0a\uff1a</p> <pre><code>glBegin(GL_TRIANGLE_FAN);\nglNormal3f(0,0,1);\nglTexCoord2d(0,0);     // \u5de6\u4e0b\u89d2\u7684\u7eb9\u7406\u5750\u6807\nglVertex2d(-0.5,-0.5);\nglTexCoord2d(1,0);     // \u53f3\u4e0b\u89d2\u7684\u7eb9\u7406\u5750\u6807\nglVertex2d(0.5,-0.5);\nglTexCoord2d(1,1);     // \u53f3\u4e0a\u89d2\u7684\u7eb9\u7406\u5750\u6807\nglVertex2d(0.5,0.5);\nglTexCoord2d(0,1);     // \u5de6\u4e0a\u89d2\u7684\u7eb9\u7406\u5750\u6807\nglVertex2d(-0.5,0.5);\nglEnd();\n</code></pre> <p>\u9057\u61be\u7684\u662f\uff0cGLUT \u5e93\u4e2d\u7684\u6807\u51c6\u5f62\u72b6\u6ca1\u6709\u9644\u5e26\u7eb9\u7406\u5750\u6807\uff08\u8336\u58f6\u9664\u5916\uff09\u3002\u6211\u7f16\u5199\u4e86\u4e00\u7ec4\u51fd\u6570\uff0c\u7528\u4e8e\u7ed8\u5236\u5e26\u6709\u7eb9\u7406\u5750\u6807\u7684\u7c7b\u4f3c\u5f62\u72b6\u3002\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u5728 JOGL \u7684 jogl/TexturedShapes.java \u6216 C \u7684 glut/textured-shapes.c\uff08\u4ee5\u53ca\u76f8\u5e94\u7684\u5934\u6587\u4ef6 glut/textured-shapes.h\uff09\u4e2d\u627e\u5230\u3002\u5f53\u7136\uff0c\u5c06\u7eb9\u7406\u5e94\u7528\u4e8e\u7ed9\u5b9a\u5bf9\u8c61\u6709\u5f88\u591a\u65b9\u6cd5\u3002\u5982\u679c\u60a8\u4f7f\u7528\u6211\u7684\u51fd\u6570\uff0c\u60a8\u5c06\u53d7\u9650\u4e8e\u6211\u5173\u4e8e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u51b3\u5b9a\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f jogl/TextureDemo.java \u6216 glut/texture-demo.c \u8ba9\u60a8\u53ef\u4ee5\u5728\u6211\u7684\u5e26\u7eb9\u7406\u5f62\u72b6\u4e0a\u67e5\u770b\u51e0\u79cd\u4e0d\u540c\u7684\u7eb9\u7406\u56fe\u50cf\u3002</p> <p>\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u60a8\u63d0\u4f9b\u4e0d\u5728 0 \u5230 1 \u8303\u56f4\u5185\u7684\u7eb9\u7406\u5750\u6807\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7ed3\u679c\u8868\u660e\u8fd9\u6837\u7684\u503c\u662f\u5408\u6cd5\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728 OpenGL 1.1 \u4e2d\uff0c\u5b83\u4eec\u7684\u884c\u4e3a\u5c31\u597d\u50cf\u6574\u4e2a st \u5e73\u9762\u5145\u6ee1\u4e86\u56fe\u50cf\u7684\u526f\u672c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u7eb9\u7406\u5750\u6807\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u90fd\u4ece 0 \u5230 3\uff0c\u800c\u4e0d\u662f 0 \u5230 1\uff0c\u90a3\u4e48\u60a8\u5c06\u5728\u6b63\u65b9\u5f62\u4e0a\u5f97\u5230\u56fe\u50cf\u7684\u4e5d\u4e2a\u526f\u672c\uff08\u6c34\u5e73\u4e09\u4e2a\u526f\u672c\u4e58\u4ee5\u5782\u76f4\u4e09\u4e2a\u526f\u672c\uff09\u3002</p> <p>\u8981\u4f7f\u7528 glDrawArrays \u6216 glDrawElements \u7ed8\u5236\u5e26\u7eb9\u7406\u7684\u539f\u7d20\uff0c\u60a8\u9700\u8981\u5728\u9876\u70b9\u6570\u7ec4\u4e2d\u63d0\u4f9b\u7eb9\u7406\u5750\u6807\uff0c\u5c31\u50cf\u60a8\u63d0\u4f9b\u9876\u70b9\u5750\u6807\u3001\u989c\u8272\u548c\u6cd5\u5411\u91cf\u4e00\u6837\u3002\uff08\u89c1 \u5c0f\u82823.4.2\u3002\uff09\u7ec6\u8282\u662f\u7c7b\u4f3c\u7684\uff1a\u60a8\u5fc5\u987b\u901a\u8fc7\u8c03\u7528</p> <pre><code>glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n</code></pre> <p>\u542f\u7528\u4f7f\u7528\u7eb9\u7406\u5750\u6807\u6570\u7ec4\uff0c\u5e76\u4f7f\u7528\u51fd\u6570</p> <pre><code>void glTexCoordPointer(int size, int dataType, int stride, void* array)\n</code></pre> <p>\u544a\u8bc9 OpenGL \u6570\u636e\u7684\u4f4d\u7f6e\u3002\u5bf9\u6211\u4eec\u6765\u8bf4\uff0csize \u603b\u662f 2\u3002\uff08OpenGL \u8fd8\u5141\u8bb8 3 \u6216 4 \u4e2a\u7eb9\u7406\u5750\u6807\uff0c\u4f46\u6211\u4eec\u7528\u4e0d\u5230\u5b83\u4eec\u3002\uff09dataType \u53ef\u4ee5\u662f GL_FLOAT\u3001GL_DOUBLE \u6216 GL_INT\u3002stride \u901a\u5e38\u662f\u96f6\uff0c\u8868\u793a\u6570\u7ec4\u4e2d\u7684\u7eb9\u7406\u5750\u6807\u4e4b\u95f4\u6ca1\u6709\u989d\u5916\u7684\u6570\u636e\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u6570\u7ec4\u6216\u6307\u5411\u6570\u636e\u7684\u6307\u9488\uff0c\u5fc5\u987b\u662f dataType \u6307\u793a\u7684\u7c7b\u578b\u3002\u5728 JOGL \u4e2d\uff0c\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u60a8\u4f1a\u4f7f\u7528 nio \u7f13\u51b2\u533a\u800c\u4e0d\u662f\u6570\u7ec4\u3002</p> <p>When a texture is applied to a surface, each point on the surface has to correspond to a point in the texture. There has to be a way to determine how this mapping is computed. For that, the object needs texture coordinates. As is generally the case in OpenGL, texture coordinates are specified for each vertex of a primitive. Texture coordinates for points inside the primitive are calculated by interpolating the values from the vertices of the primitive.</p> <p>A texture image comes with its own 2D coordinate system. Traditionally, s is used for the horizontal coordinate on the image and t is used for the vertical coordinate. The s coordinate is a real number that ranges from 0 on the left of the image to 1 on the right, while t ranges from 0 at the bottom to 1 at the top. Values of s or t outside of the range 0 to 1 are not inside the image, but such values are still valid as texture coordinates. Note that texture coordinates are not based on pixels. No matter what size the image is, values of s and t between 0 and 1 cover the entire image.</p> <p>To draw a textured primitive, we need a pair of numbers (s,t) for each vertex. These are the texture coordinates for that vertex. They tell which point in the image is mapped to the vertex. For example, suppose that we want to apply part of an EarthAtNight image to a triangular primitive. Let's say that the area in the image that is to be mapped onto the primitive is the triangle shown here outlined in thick orange:</p> <p></p> <p>The vertices of this area have (s,t) coordinates (0.3,0.1), (0.45,0.6), and (0.25,0.7). These coordinates from the image should be used as the texture coordinates for the vertices of the triangular primitive.</p> <p>The texture coordinates of a vertex are an attribute of the vertex, just like color, normal vectors, and material properties. Texture coordinates are specified by the family of functions glTexCoord*, including the functions glTexCoord2f(s,t), glTexCoord2d(s,t), glTexCoord2fv(array), and glTexCoord2dv(array). The OpenGL state includes a current set of texture coordinates, as specified by these functions. When you specify a vertex with glVertex*, the current texture coordinates are copied and become an attribute that is associated with the vertex. As usual, this means that the texture coordinates for a vertex must be specified before glVertex* is called. Each vertex of a primitive will need a different set of texture coordinates.</p> <p>For example, to apply the triangular region in the image shown above to the triangle in the xy-plane with vertices at (0,0), (0,1), and (1,0), we can say:</p> <pre><code>glNormal3d(0,0,1);       // This normal works for all three vertices.\nglBegin(GL_TRIANGLES);\nglTexCoord2d(0.3,0.1);   // Texture coords for vertex (0,0)\nglVertex2d(0,0);\nglTexCoord2d(0.45,0.6);  // Texture coords for vertex (0,1)\nglVertex2d(0,1);\nglTexCoord2d(0.25,0.7);  // Texture coords for vertex (1,0)\nglVertex2d(1,0);\nglEnd();\n</code></pre> <p>Note that there is no particular relationship between the (x,y) coordinates of a vertex, which give its position in space, and the (s,t) texture coordinates associated with the vertex. In fact, in this case, the triangle that I am drawing has a different shape from the triangular area in the image, and that piece of the image will have to be stretched and distorted to fit. Such distortion occurs in most uses of texture images.</p> <p>Sometimes, it's difficult to decide what texture coordinates to use. One case where it's easy is applying the complete texture to a rectangle. Here is a code segment that draws a square in the xy-plane, with appropriate texture coordinates to map the entire image onto the square:</p> <pre><code>glBegin(GL_TRIANGLE_FAN);\nglNormal3f(0,0,1);\nglTexCoord2d(0,0);     // Texture coords for lower left corner\nglVertex2d(-0.5,-0.5);\nglTexCoord2d(1,0);     // Texture coords for lower right corner\nglVertex2d(0.5,-0.5);\nglTexCoord2d(1,1);     // Texture coords for upper right corner\nglVertex2d(0.5,0.5);\nglTexCoord2d(0,1);     // Texture coords for upper left corner\nglVertex2d(-0.5,0.5);\nglEnd();\n</code></pre> <p>Unfortunately, the standard shapes in the GLUT library do not come with texture coordinates (except for the teapot, which does). I have written a set of functions for drawing similar shapes that do come with texture coordinates. The functions can be found in jogl/TexturedShapes.java for JOGL or in glut/textured-shapes.c (plus the corresponding header file glut/textured-shapes.h) for C. Of course, there are many ways of applying a texture to a given object. If you use my functions, you are stuck with my decision about how to do so.</p> <p>The sample program jogl/TextureDemo.java or glut/texture-demo.c lets you view several different texture images on my textured shapes.</p> <p>One last question: What happens if you supply texture coordinates that are not in the range from 0 to 1? It turns out that such values are legal. By default, in OpenGL 1.1, they behave as though the entire st-plane is filled with copies of the image. For example, if the texture coordinates for a square range from 0 to 3 in both directions, instead of 0 to 1, then you get nine copies of the image on the square (three copies horizontally by three copies vertically).</p> <p>To draw a textured primitive using glDrawArrays or glDrawElements, you will need to supply the texture coordinates in a vertex array, in the same way that you supply vertex coordinates, colors, and normal vectors. (See Subsection 3.4.2.) The details are similar: You have to enable the use of a texture coordinate array by calling</p> <pre><code>glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n</code></pre> <p>and you have to tell OpenGL the location of the data using the function</p> <pre><code>void glTexCoordPointer( int size, int dataType, int stride, void* array)\n</code></pre> <p>The size, for us, will always be 2. (OpenGL also allows 3 or 4 texture coordinates, but we have no use for them.) The dataType can be GL_FLOAT, GL_DOUBLE, or GL_INT. The stride will ordinarily be zero, to indicate that there is no extra data between texture coordinates in the array. The last parameter is an array or pointer to the data, which must be of the type indicated by the dataType. In JOGL, as usual, you would use an nio buffer instead of an array.</p>"},{"location":"cn/c4/s3/#432-mipmap-\u548c\u8fc7\u6ee4","title":"4.3.2 MipMap \u548c\u8fc7\u6ee4","text":"<p>MipMaps and Filtering</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u4e00\u4e2a\u7eb9\u7406\u5e94\u7528\u4e8e\u8868\u9762\u65f6\uff0c\u7eb9\u7406\u4e2d\u7684\u50cf\u7d20\u901a\u5e38\u4e0d\u4f1a\u4e0e\u8868\u9762\u7684\u50cf\u7d20\u4e00\u4e00\u5bf9\u5e94\uff0c\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7eb9\u7406\u5728\u6620\u5c04\u5230\u8868\u9762\u65f6\u5fc5\u987b\u88ab\u62c9\u4f38\u6216\u7f29\u5c0f\u3002\u6709\u65f6\uff0c\u7eb9\u7406\u4e2d\u7684\u51e0\u4e2a\u50cf\u7d20\u4f1a\u88ab\u6620\u5c04\u5230\u8868\u9762\u7684\u540c\u4e00\u4e2a\u50cf\u7d20\u4e0a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u5230\u8868\u9762\u50cf\u7d20\u7684\u989c\u8272\u5fc5\u987b\u4ece\u6620\u5c04\u5230\u5b83\u7684\u6240\u6709\u7eb9\u7406\u50cf\u7d20\u7684\u989c\u8272\u4e2d\u8ba1\u7b97\u5f97\u51fa\u3002\u8fd9\u662f\u201c\u8fc7\u6ee4\u201d\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1b\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u4f7f\u7528\u4e86\u4e00\u4e2a\u7f29\u653e\u8fc7\u6ee4\uff0c\u56e0\u4e3a\u7eb9\u7406\u6b63\u5728\u88ab\u7f29\u5c0f\u3002\u5f53\u7eb9\u7406\u4e2d\u7684\u4e00\u4e2a\u50cf\u7d20\u8986\u76d6\u4e86\u8868\u9762\u7684\u591a\u4e2a\u50cf\u7d20\u65f6\uff0c\u7eb9\u7406\u5fc5\u987b\u88ab\u653e\u5927\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u653e\u5927\u8fc7\u6ee4\u3002</p> <p>\u5728\u6211\u4eec\u7ee7\u7eed\u4e4b\u524d\uff0c\u6709\u4e00\u4e2a\u672f\u8bed\uff1a\u7eb9\u7406\u4e2d\u7684\u50cf\u7d20\u88ab\u79f0\u4e3atexels\uff08\u201ctexture pixel\u201d\u6216\u201ctexture element\u201d\u7684\u7f29\u5199\uff09\uff0c\u4ece\u73b0\u5728\u5f00\u59cb\u6211\u5c06\u4f7f\u7528\u8fd9\u4e2a\u672f\u8bed\u3002</p> <p>\u5728\u51b3\u5b9a\u5982\u4f55\u5c06\u7eb9\u7406\u5e94\u7528\u5230\u8868\u9762\u7684\u4e00\u4e2a\u50cf\u7d20\u4e0a\u65f6\uff0cOpenGL \u5fc5\u987b\u5904\u7406\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u90a3\u4e2a\u50cf\u7d20\u5b9e\u9645\u4e0a\u5305\u542b\u65e0\u9650\u591a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u81ea\u5df1\u7684\u7eb9\u7406\u5750\u6807\u3002\u90a3\u4e48\uff0c\u5e94\u8be5\u5982\u4f55\u8ba1\u7b97\u50cf\u7d20\u7684\u7eb9\u7406\u989c\u8272\u5462\uff1f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4ece\u4e00\u4e2a\u50cf\u7d20\u4e2d\u9009\u62e9\u4e00\u4e2a\u70b9\uff0c\u6bd4\u5982\u8bf4\u50cf\u7d20\u4e2d\u5fc3\u7684\u70b9\u3002OpenGL \u77e5\u9053\u90a3\u4e2a\u70b9\u7684\u7eb9\u7406\u5750\u6807\u3002\u8fd9\u4e9b\u7eb9\u7406\u5750\u6807\u5bf9\u5e94\u4e8e\u7eb9\u7406\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e2a\u70b9\u4f4d\u4e8e\u7eb9\u7406\u7684\u4e00\u4e2atexels \u4e2d\u3002\u90a3\u4e2atexel \u7684\u989c\u8272\u53ef\u4ee5\u88ab\u7528\u4f5c\u50cf\u7d20\u7684\u7eb9\u7406\u989c\u8272\u3002\u8fd9\u88ab\u79f0\u4e3a\u201c\u6700\u8fd1\u50cf\u7d20\u8fc7\u6ee4\u201d\u3002\u5b83\u975e\u5e38\u5feb\uff0c\u4f46\u901a\u5e38\u4e0d\u4f1a\u7ed9\u51fa\u597d\u7684\u7ed3\u679c\u3002\u5b83\u6ca1\u6709\u8003\u8651\u5230\u8868\u9762\u50cf\u7d20\u548c\u56fe\u50cf\u4e2dtexels \u5927\u5c0f\u7684\u5dee\u5f02\u3002\u6700\u8fd1\u50cf\u7d20\u8fc7\u6ee4\u7684\u6539\u8fdb\u662f\u201c\u7ebf\u6027\u8fc7\u6ee4\u201d\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u51e0\u4e2atexels \u989c\u8272\u7684\u5e73\u5747\u503c\u6765\u5f97\u51fa\u5e94\u7528\u5230\u8868\u9762\u7684\u989c\u8272\u3002</p> <p>\u7ebf\u6027\u8fc7\u6ee4\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u5f53\u4e00\u4e2a\u5927\u7eb9\u7406\u5e94\u7528\u5230\u4e00\u4e2a\u66f4\u5c0f\u7684\u8868\u9762\u79ef\u65f6\uff0c\u5b83\u4f1a\u53d8\u5f97\u975e\u5e38\u4f4e\u6548\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bb8\u591atexels \u6620\u5c04\u5230\u4e00\u4e2a\u50cf\u7d20\uff0c\u8ba1\u7b97\u8fd9\u4e48\u591atexels \u7684\u5e73\u5747\u503c\u53d8\u5f97\u975e\u5e38\u4f4e\u6548\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5de7\u5999\u7684\u89e3\u51b3\u65b9\u6848\uff1aMipmaps\u3002</p> <p>\u7eb9\u7406\u7684mipmap \u662f\u7eb9\u7406\u7684\u7f29\u5c0f\u7248\u672c\u3002\u4e00\u5957\u5b8c\u6574\u7684mipmaps \u5305\u62ec\u5168\u5c3a\u5bf8\u7eb9\u7406\u3001\u6bcf\u4e2a\u7ef4\u5ea6\u90fd\u9664\u4ee5\u4e8c\u7684\u534a\u5c3a\u5bf8\u7248\u672c\u3001\u56db\u5206\u4e4b\u4e00\u5c3a\u5bf8\u7248\u672c\u3001\u516b\u5206\u4e4b\u4e00\u5c3a\u5bf8\u7248\u672c\uff0c\u7b49\u7b49\u3002\u5982\u679c\u4e00\u4e2a\u7ef4\u5ea6\u7f29\u5c0f\u5230\u4e00\u4e2a\u50cf\u7d20\uff0c\u5b83\u5c31\u4e0d\u518d\u8fdb\u4e00\u6b65\u7f29\u5c0f\uff0c\u4f46\u53e6\u4e00\u4e2a\u7ef4\u5ea6\u4f1a\u7ee7\u7eed\u51cf\u534a\uff0c\u76f4\u5230\u5b83\u4e5f\u8fbe\u5230\u4e00\u4e2a\u50cf\u7d20\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6700\u7ec8\u7684mipmap \u7531\u4e00\u4e2a\u50cf\u7d20\u7ec4\u6210\u3002\u4ee5\u4e0b\u662f\u4e00\u7ec4\u7816\u7eb9\u7406\u7684mipmaps \u7684\u524d\u51e0\u5f20\u56fe\u50cf\uff1a</p> <p></p> <p>\u4f60\u4f1a\u6ce8\u610f\u5230mipmaps \u5f88\u5feb\u5c31\u53d8\u5c0f\u4e86\u3002\u4e00\u5957mipmaps \u6240\u4f7f\u7528\u7684\u603b\u5185\u5b58\u53ea\u6bd4\u539f\u59cb\u7eb9\u7406\u591a\u5927\u7ea6\u4e09\u5206\u4e4b\u4e00\uff0c\u6240\u4ee5\u4f7f\u7528mipmaps \u65f6\u989d\u5916\u7684\u5185\u5b58\u9700\u6c42\u5e76\u4e0d\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u3002</p> <p>Mipmaps \u4ec5\u7528\u4e8e\u7f29\u653e\u8fc7\u6ee4\u3002\u5b83\u4eec\u672c\u8d28\u4e0a\u662f\u5728\u7f29\u5c0f\u7eb9\u7406\u4ee5\u9002\u5e94\u8868\u9762\u65f6\u9884\u5148\u8ba1\u7b97\u6240\u9700\u7684\u5927\u90e8\u5206\u5e73\u5747\u503c\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u8981\u7eb9\u7406\u5316\u4e00\u4e2a\u50cf\u7d20\uff0cOpenGL \u9996\u5148\u53ef\u4ee5\u9009\u62e9texels \u5927\u5c0f\u6700\u63a5\u8fd1\u50cf\u7d20\u5927\u5c0f\u7684mipmap\u3002\u7136\u540e\u5b83\u53ef\u4ee5\u5728\u90a3\u4e2amipmap \u4e0a\u8fdb\u884c\u7ebf\u6027\u8fc7\u6ee4\u6765\u8ba1\u7b97\u989c\u8272\uff0c\u5e76\u4e14\u5b83\u6700\u591a\u53ea\u9700\u8981\u5e73\u5747\u51e0\u4e2atexels \u5c31\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002</p> <p>\u5728 OpenGL \u7684\u66f4\u65b0\u7248\u672c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u8ba9 OpenGL \u81ea\u52a8\u751f\u6210 mipmaps\u3002\u5728 OpenGL 1.1 \u4e2d\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528 mipmaps\uff0c\u4f60\u5fc5\u987b\u9010\u4e2a\u52a0\u8f7d\u6bcf\u4e2a mipmap\uff0c\u6216\u8005\u4f60\u5fc5\u987b\u81ea\u5df1\u751f\u6210\u5b83\u4eec\u3002\uff08GLU \u5e93\u6709\u4e00\u4e2a\u65b9\u6cd5 gluBuild2DMipmaps\uff0c\u53ef\u4ee5\u7528\u6765\u4e3a 2D \u7eb9\u7406\u751f\u6210\u4e00\u7ec4 mipmaps\u3002\uff09\u7136\u800c\uff0c\u6211\u7684\u793a\u4f8b\u7a0b\u5e8f\u4e0d\u4f7f\u7528 mipmaps\u3002</p> <p>When a texture is applied to a surface, the pixels in the texture do not usually match up one-to-one with pixels on the surface, and in general, the texture must be stretched or shrunk as it is being mapped onto the surface. Sometimes, several pixels in the texture will be mapped to the same pixel on the surface. In this case, the color that is applied to the surface pixel must somehow be computed from the colors of all the texture pixels that map to it. This is an example of \"filtering\"; in particular, it uses a minification filter because the texture is being shrunk. When one pixel from the texture covers more than one pixel on the surface, the texture has to be magnified, and we need a magnification filter.</p> <p>One bit of terminology before we proceed: The pixels in a texture are referred to as texels, short for \"texture pixel\" or \"texture element\", and I will use that term from now on.</p> <p>When deciding how to apply a texture to a pixel on a surface, OpenGL must deal with the fact that that pixel actually contains an infinite number of points, and each point has its own texture coordinates. So, how should a texture color for the pixel be computed? The easiest thing to do is to select one point from the pixel, say the point at the center of the pixel. OpenGL knows the texture coordinates for that point. Those texture coordinates correspond to one point in the texture, and that point lies in one of the texture's texels. The color of that texel could be used as the texture color for the pixel. This is called \"nearest texel filtering.\" It is very fast, but it does not usually give good results. It doesn't take into account the difference in size between the pixels on the surface and the texels in the image. An improvement on nearest texel filtering is \"linear filtering,\" which can take an average of several texel colors to compute the color that will be applied to the surface.</p> <p>The problem with linear filtering is that it will be very inefficient when a large texture is applied to a much smaller surface area. In this case, many texels map to one pixel, and computing the average of so many texels becomes very inefficient. There is a neat solution for this: mipmaps.</p> <p>A mipmap for a texture is a scaled-down version of that texture. A complete set of mipmaps consists of the full-size texture, a half-size version in which each dimension is divided by two, a quarter-sized version, a one-eighth-sized version, and so on. If one dimension shrinks to a single pixel, it is not reduced further, but the other dimension will continue to be cut in half until it too reaches one pixel. In any case, the final mipmap consists of a single pixel. Here are the first few images in the set of mipmaps for a brick texture:</p> <p></p> <p>You'll notice that the mipmaps become small very quickly. The total memory used by a set of mipmaps is only about one-third more than the memory used for the original texture, so the additional memory requirement is not a big issue when using mipmaps.</p> <p>Mipmaps are used only for minification filtering. They are essentially a way of pre-computing the bulk of the averaging that is required when shrinking a texture to fit a surface. To texture a pixel, OpenGL can first select the mipmap whose texels most closely match the size of the pixel. It can then do linear filtering on that mipmap to compute a color, and it will have to average at most a few texels in order to do so.</p> <p>In newer versions of OpenGL, you can get OpenGL to generate mipmaps automatically. In OpenGL 1.1, if you want to use mipmaps, you must either load each mipmap individually, or you must generate them yourself. (The GLU library has a method, gluBuild2DMipmaps that can be used to generate a set of mipmaps for a 2D texture.) However, my sample programs do not use mipmaps.</p>"},{"location":"cn/c4/s3/#433-\u7eb9\u7406\u76ee\u6807\u548c\u7eb9\u7406\u53c2\u6570","title":"4.3.3 \u7eb9\u7406\u76ee\u6807\u548c\u7eb9\u7406\u53c2\u6570","text":"<p>Texture Target and Texture Parameters</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL \u53ef\u4ee5\u4f7f\u7528\u4e00\u7ef4\u548c\u4e09\u7ef4\u7eb9\u7406\uff0c\u4ee5\u53ca\u4e8c\u7ef4\u7eb9\u7406\u3002\u56e0\u6b64\uff0c\u8bb8\u591a\u5904\u7406\u7eb9\u7406\u7684 OpenGL \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a \u7eb9\u7406\u76ee\u6807 \u4f5c\u4e3a\u53c2\u6570\uff0c\u4ee5\u544a\u8bc9\u51fd\u6570\u5e94\u7528\u4e8e\u4e00\u7ef4\u3001\u4e8c\u7ef4\u6216\u4e09\u7ef4\u7eb9\u7406\u3002\u5bf9\u6211\u4eec\u6765\u8bf4\uff0c\u552f\u4e00\u7684\u7eb9\u7406\u76ee\u6807\u5c06\u662f GL_TEXTURE_2D\u3002</p> <p>\u6709\u4e00\u4e9b\u9009\u9879\u9002\u7528\u4e8e\u7eb9\u7406\uff0c\u4ee5\u63a7\u5236\u7eb9\u7406\u5982\u4f55\u5e94\u7528\u5230\u8868\u9762\u4e0a\u7684\u7ec6\u8282\u3002\u4e00\u4e9b\u9009\u9879\u53ef\u4ee5\u4f7f\u7528 glTexParameteri() \u51fd\u6570\u8bbe\u7f6e\uff0c\u5305\u62ec\u4e24\u4e2a\u4e0e\u8fc7\u6ee4\u6709\u5173\u7684\u9009\u9879\u3002OpenGL \u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u7f29\u653e\u548c\u653e\u5927\u8fc7\u6ee4\u6280\u672f\u3002\u53ef\u4ee5\u4f7f\u7528 glTexParameteri() \u8bbe\u7f6e\u8fc7\u6ee4\u5668\uff1a</p> <pre><code>glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);\n</code></pre> <p>magFilter \u548c minFilter \u7684\u503c\u662f\u6307\u5b9a\u8fc7\u6ee4\u7b97\u6cd5\u7684\u5e38\u91cf\u3002\u5bf9\u4e8e magFilter\uff0c\u552f\u4e00\u7684\u9009\u9879\u662f GL_NEAREST \u548c GL_LINEAR\uff0c\u5206\u522b\u63d0\u4f9b\u6700\u8fd1\u50cf\u7d20\u548c\u7ebf\u6027\u8fc7\u6ee4\u3002MAG \u8fc7\u6ee4\u5668\u7684\u9ed8\u8ba4\u503c\u662f GL_LINEAR\uff0c\u5f88\u5c11\u9700\u8981\u66f4\u6539\u5b83\u3002\u5bf9\u4e8e minFilter\uff0c\u9664\u4e86 GL_NEAREST \u548c GL_LINEAR\uff0c\u8fd8\u6709\u56db\u4e2a\u9009\u9879\u4f7f\u7528 mipmaps \u8fdb\u884c\u66f4\u6709\u6548\u7684\u8fc7\u6ee4\u3002MIN \u8fc7\u6ee4\u5668\u7684\u9ed8\u8ba4\u503c\u662f GL_NEAREST_MIPMAP_LINEAR\uff0c\u5b83\u5728\u6bcf\u4e2a mipmap \u5185\u8fdb\u884c mipmap \u4e4b\u95f4\u548c\u6700\u8fd1\u50cf\u7d20\u8fc7\u6ee4\u7684\u5e73\u5747\u5904\u7406\u3002\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u5c3d\u7ba1\u6548\u7387\u8f83\u4f4e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 GL_LINEAR_MIPMAP_LINEAR\uff0c\u5b83\u5728 mipmap \u4e4b\u95f4\u548c\u5185\u90e8\u90fd\u8fdb\u884c\u5e73\u5747\u5904\u7406\u3002\u53e6\u5916\u4e24\u4e2a\u9009\u9879\u662f GL_NEAREST_MIPMAP_NEAREST \u548c GL_LINEAR_MIPMAP_NEAREST\u3002</p> <p>\u975e\u5e38\u91cd\u8981\u7684\u4e00\u70b9\uff1a\u5982\u679c\u60a8\u4e0d\u4e3a\u7eb9\u7406\u4f7f\u7528 mipmaps\uff0c\u90a3\u4e48\u5fc5\u987b\u5c06\u8be5\u7eb9\u7406\u7684\u7f29\u653e\u8fc7\u6ee4\u5668\u66f4\u6539\u4e3a GL_LINEAR\uff0c\u6216\u8005\u8f83\u5c11\u53ef\u80fd\u7684\u662f GL_NEAREST\u3002\u9ed8\u8ba4\u7684 MIN \u8fc7\u6ee4\u5668 \u9700\u8981 mipmaps\uff0c\u5982\u679c mipmaps \u4e0d\u53ef\u7528\uff0c\u5219\u7eb9\u7406\u88ab\u8ba4\u4e3a\u672a\u6b63\u786e\u5f62\u6210\uff0cOpenGL \u4f1a\u5ffd\u7565\u5b83\uff01\u8bf7\u8bb0\u4f4f\uff0c\u5982\u679c\u60a8\u4e0d\u521b\u5efa mipmaps \u5e76\u4e14\u4e0d\u66f4\u6539\u7f29\u653e\u8fc7\u6ee4\u5668\uff0c\u90a3\u4e48\u60a8\u7684\u7eb9\u7406\u5c06\u88ab OpenGL \u7b80\u5355\u5730\u5ffd\u7565\u3002</p> <p>\u8fd8\u6709\u53e6\u4e00\u5bf9\u7eb9\u7406\u53c2\u6570\u6765\u63a7\u5236\u8303\u56f4\u5728 0 \u5230 1 \u4e4b\u5916\u7684\u7eb9\u7406\u5750\u6807\u5982\u4f55\u5904\u7406\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u91cd\u590d\u7eb9\u7406\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u201c\u5939\u201d\u7eb9\u7406\u3002\u8fd9\u610f\u5473\u7740\u5f53\u6307\u5b9a\u8303\u56f4\u5728 0 \u5230 1 \u4e4b\u5916\u7684\u7eb9\u7406\u5750\u6807\u65f6\uff0c\u8fd9\u4e9b\u503c\u4f1a\u88ab\u5f3a\u5236\u8fdb\u5165\u8be5\u8303\u56f4\uff1a\u5c0f\u4e8e 0 \u7684\u503c\u88ab\u66ff\u6362\u4e3a 0\uff0c\u5927\u4e8e 1 \u7684\u503c\u88ab\u66ff\u6362\u4e3a 1\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5206\u522b\u5728 s \u548c t \u65b9\u5411\u4e0a\u5939\u4f4f\u503c\uff1a</p> <pre><code>glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);\n</code></pre> <p>\u5c06 GL_REPEAT \u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u53ef\u4ee5\u6062\u590d\u9ed8\u8ba4\u884c\u4e3a\u3002\u5f53\u542f\u7528\u5939\u53d6\u65f6\uff0c\u8303\u56f4\u5728 0 \u5230 1 \u4e4b\u5916\u7684\u7eb9\u7406\u5750\u6807\u5c06\u8fd4\u56de\u4e0e\u4f4d\u4e8e\u56fe\u50cf\u5916\u8fb9\u7f18\u7684\u50cf\u7d20\u76f8\u540c\u7684\u989c\u8272\u3002\u8fd9\u662f\u4e24\u4e2a\u5e26\u7eb9\u7406\u7684\u6b63\u65b9\u5f62\u4e0a\u6548\u679c\u7684\u6837\u5b50\uff1a</p> <p></p> <p>\u8fd9\u5f20\u56fe\u7247\u4e2d\u7684\u4e24\u4e2a\u6b63\u65b9\u5f62\u7684 s \u548c t \u7eb9\u7406\u5750\u6807\u8303\u56f4\u4ece -1 \u5230 2\u3002\u539f\u59cb\u56fe\u50cf\u4f4d\u4e8e\u6b63\u65b9\u5f62\u7684\u4e2d\u5fc3\u3002\u5de6\u4fa7\u7684\u6b63\u65b9\u5f62\uff0c\u7eb9\u7406\u662f\u91cd\u590d\u7684\u3002\u53f3\u4fa7\u7684\u6b63\u65b9\u5f62\uff0c\u7eb9\u7406\u662f\u5939\u53d6\u7684\u3002</p> <p>OpenGL can actually use one-dimensional and three-dimensional textures, as well as two-dimensional. Because of this, many OpenGL functions dealing with textures take a texture target as a parameter, to tell whether the function should be applied to one, two, or three dimensional textures. For us, the only texture target will be GL_TEXTURE_2D.</p> <p>There are a number of options that apply to textures, to control the details of how textures are applied to surfaces. Some of the options can be set using the glTexParameteri() function, including two that have to do with filtering. OpenGL supports several different filtering techniques for minification and magnification. The filters can be set using glTexParameteri():</p> <pre><code>glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);\n</code></pre> <p>The values of magFilter and minFilter are constants that specify the filtering algorithm. For the magFilter, the only options are GL_NEAREST and GL_LINEAR, giving nearest texel and linear filtering. The default for the MAG filter is GL_LINEAR, and there is rarely any need to change it. For minFilter, in addition to GL_NEAREST and GL_LINEAR, there are four options that use mipmaps for more efficient filtering. The default MIN filter is GL_NEAREST_MIPMAP_LINEAR, which does averaging between mipmaps and nearest texel filtering within each mipmap. For even better results, at the cost of greater inefficiency, you can use GL_LINEAR_MIPMAP_LINEAR, which does averaging both between and within mipmaps. The other two options are GL_NEAREST_MIPMAP_NEAREST and GL_LINEAR_MIPMAP_NEAREST.</p> <p>One very important note: If you are not using mipmaps for a texture, it is imperative that you change the minification filter for that texture to GL_LINEAR or, less likely, GL_NEAREST. The default MIN filter requires mipmaps, and if mipmaps are not available, then the texture is considered to be improperly formed, and OpenGL ignores it! Remember that if you don't create mipmaps and if you don't change the minification filter, then your texture will simply be ignored by OpenGL.</p> <p>There is another pair of texture parameters to control how texture coordinates outside the range 0 to 1 are treated. As mentioned above, the default is to repeat the texture. The alternative is to \"clamp\" the texture. This means that when texture coordinates outside the range 0 to 1 are specified, those values are forced into that range: Values less than 0 are replaced by 0, and values greater than 1 are replaced by 1. Values can be clamped separately in the s and t directions using</p> <pre><code>glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);\n</code></pre> <p>Passing GL_REPEAT as the last parameter restores the default behavior. When clamping is in effect, texture coordinates outside the range 0 to 1 return the same color as a texel that lies along the outer edge of the image. Here is what the effect looks like on two textured squares:</p> <p></p> <p>The two squares in this image have s and t texture coordinates that range from \u22121 to 2. The original image lies in the center of the square. For the square on the left, the texture is repeated. On the right, the texture is clamped.</p>"},{"location":"cn/c4/s3/#434-\u7eb9\u7406\u53d8\u6362","title":"4.3.4 \u7eb9\u7406\u53d8\u6362","text":"<p>Texture Transformation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u4e00\u4e2a\u7eb9\u7406\u5e94\u7528\u4e8e\u4e00\u4e2a\u539f\u7d20\u65f6\uff0c\u9876\u70b9\u7684\u7eb9\u7406\u5750\u6807\u51b3\u5b9a\u4e86\u7eb9\u7406\u4e2d\u54ea\u4e2a\u70b9\u6620\u5c04\u5230\u8be5\u9876\u70b9\u3002\u7eb9\u7406\u56fe\u50cf\u662f\u4e8c\u7ef4\u7684\uff0c\u4f46 OpenGL \u4e5f\u652f\u6301\u4e00\u7ef4\u7eb9\u7406\u548c\u4e09\u7ef4\u7eb9\u7406\u3002\u8fd9\u610f\u5473\u7740\u7eb9\u7406\u5750\u6807\u4e0d\u80fd\u4ec5\u9650\u4e8e\u4e24\u4e2a\u5750\u6807\u3002\u5b9e\u9645\u4e0a\uff0cOpenGL \u5185\u90e8\u4ee5\u9f50\u6b21\u5750\u6807\u7684\u5f62\u5f0f\u8868\u793a\u4e00\u7ec4\u7eb9\u7406\u5750\u6807\uff0c\u79f0\u4e3a (s,t,r,q)\u3002\u6211\u4eec\u4f7f\u7528 glTexCoord2 \u6765\u6307\u5b9a\u7eb9\u7406\u7684 s \u548c t \u5750\u6807\uff0c\u4f46\u4f8b\u5982\u8c03\u7528 glTexCoord2f(s,t) \u5b9e\u9645\u4e0a\u53ea\u662f glTexCoord4f(s,t,0,1)* \u7684\u7b80\u5199\u3002</p> <p>\u7531\u4e8e\u7eb9\u7406\u5750\u6807\u4e0e\u9876\u70b9\u5750\u6807\u6ca1\u6709\u533a\u522b\uff0c\u5b83\u4eec\u53ef\u4ee5\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u8fdb\u884c\u53d8\u6362\u3002OpenGL \u5c06\u5176\u72b6\u6001\u4e2d\u7684\u7eb9\u7406\u53d8\u6362\u4f5c\u4e3a\u6a21\u578b\u89c6\u56fe\u548c\u6295\u5f71\u53d8\u6362\u7684\u4e00\u90e8\u5206\u6765\u7ef4\u62a4\u3002\u4e09\u79cd\u53d8\u6362\u7684\u5f53\u524d\u503c\u90fd\u5b58\u50a8\u4e3a\u77e9\u9635\u3002\u5f53\u4e00\u4e2a\u7eb9\u7406\u5e94\u7528\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4e3a\u5176\u9876\u70b9\u6307\u5b9a\u7684\u7eb9\u7406\u5750\u6807\u4f1a\u901a\u8fc7\u7eb9\u7406\u77e9\u9635\u8fdb\u884c\u53d8\u6362\u3002\u7136\u540e\u4f7f\u7528\u53d8\u6362\u540e\u7684\u7eb9\u7406\u5750\u6807\u6765\u786e\u5b9a\u7eb9\u7406\u4e2d\u7684\u4e00\u4e2a\u70b9\u3002\u5f53\u7136\uff0c\u9ed8\u8ba4\u7684\u7eb9\u7406\u53d8\u6362\u662f\u6052\u7b49\u53d8\u6362\uff0c\u4e0d\u4f1a\u6539\u53d8\u5750\u6807\u3002</p> <p>\u7eb9\u7406\u77e9\u9635\u53ef\u4ee5\u8868\u793a\u7f29\u653e\u3001\u65cb\u8f6c\u3001\u5e73\u79fb\u4ee5\u53ca\u8fd9\u4e9b\u57fa\u672c\u53d8\u6362\u7684\u7ec4\u5408\u3002\u8981\u6307\u5b9a\u7eb9\u7406\u53d8\u6362\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528 glMatrixMode() \u5c06\u77e9\u9635\u6a21\u5f0f\u8bbe\u7f6e\u4e3a GL_TEXTURE\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u8c03\u7528\u5982 glRotate\u3001glScale \u548c glLoadIdentity \u7b49\u65b9\u6cd5\u5c06\u5e94\u7528\u4e8e\u7eb9\u7406\u77e9\u9635\u3002\u4f8b\u5982\uff0c\u8981\u5b89\u88c5\u4e00\u4e2a\u5728\u6bcf\u4e2a\u65b9\u5411\u4e0a\u5c06\u7eb9\u7406\u5750\u6807\u7f29\u653e\u4e24\u500d\u7684\u7eb9\u7406\u53d8\u6362\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a</p> <pre><code>glMatrixMode(GL_TEXTURE);\nglLoadIdentity(); // \u786e\u4fdd\u6211\u4eec\u4ece\u6052\u7b49\u77e9\u9635\u5f00\u59cb\u3002\nglScalef(2,2,1);\nglMatrixMode(GL_MODELVIEW); // \u5c06\u77e9\u9635\u6a21\u5f0f\u8bbe\u7f6e\u56de GL_MODELVIEW\u3002\n</code></pre> <p>\u7531\u4e8e\u56fe\u50cf\u4f4d\u4e8e st \u5e73\u9762\u4e0a\uff0c\u56e0\u6b64 glScalef \u7684\u524d\u4e24\u4e2a\u53c2\u6570\u624d\u91cd\u8981\u3002\u5bf9\u4e8e\u65cb\u8f6c\uff0c\u60a8\u5c06\u4f7f\u7528 (0,0,1) \u4f5c\u4e3a\u65cb\u8f6c\u8f74\uff0c\u8fd9\u5c06\u5728 st \u5e73\u9762\u4e0a\u65cb\u8f6c\u56fe\u50cf\u3002</p> <p>\u73b0\u5728\uff0c\u8fd9\u5bf9\u7eb9\u7406\u5728\u8868\u9762\u4e0a\u7684\u5916\u89c2\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u5728\u793a\u4f8b\u4e2d\uff0c\u7f29\u653e\u53d8\u6362\u5c06\u6bcf\u4e2a\u7eb9\u7406\u5750\u6807\u4e58\u4ee5 2\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u9876\u70b9\u88ab\u5206\u914d\u4e86\u4e8c\u7ef4\u7eb9\u7406\u5750\u6807 (0.4,0.1)\uff0c\u90a3\u4e48\u5728\u5e94\u7528\u7eb9\u7406\u53d8\u6362\u540e\uff0c\u8be5\u9876\u70b9\u5c06\u6620\u5c04\u5230\u7eb9\u7406\u4e2d\u7684\u70b9 (s,t) = (0.8,0.2)\u3002\u7eb9\u7406\u5750\u6807\u5728\u8868\u9762\u4e0a\u7684\u53d8\u5316\u901f\u5ea6\u662f\u4e0d\u5e26\u7f29\u653e\u53d8\u6362\u65f6\u7684\u4e24\u500d\u3002\u4e00\u4e2a\u5728\u6ca1\u6709\u53d8\u6362\u65f6\u4f1a\u6620\u5c04\u5230\u7eb9\u7406\u56fe\u50cf\u4e2d 1x1 \u5e73\u65b9\u533a\u57df\u7684\u8868\u9762\u4e0a\u7684\u533a\u57df\uff0c\u5c06\u6539\u4e3a\u6620\u5c04\u5230\u56fe\u50cf\u4e2d\u7684 2x2 \u5e73\u65b9\u533a\u57df\u2014\u2014\u56e0\u6b64\uff0c\u5728\u8be5\u533a\u57df\u5185\u5c06\u770b\u5230\u56fe\u50cf\u7684\u66f4\u5927\u4e00\u90e8\u5206\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7eb9\u7406\u56fe\u50cf\u5728\u8868\u9762\u4e0a\u5c06\u88ab\u7f29\u5c0f\u4e24\u500d\uff01\u66f4\u4e00\u822c\u5730\u8bf4\uff0c\u7eb9\u7406\u53d8\u6362\u5bf9\u7eb9\u7406\u5916\u89c2\u7684\u5f71\u54cd\u662f\u5176\u5bf9\u7eb9\u7406\u5750\u6807\u5f71\u54cd\u7684\u9006\u3002\uff08\u8fd9\u4e0e\u89c6\u56fe\u53d8\u6362\u548c\u5efa\u6a21\u53d8\u6362\u4e4b\u95f4\u7684\u9006\u5173\u7cfb\u5b8c\u5168\u7c7b\u4f3c\u3002\uff09\u5982\u679c\u7eb9\u7406\u53d8\u6362\u662f\u5411\u53f3\u5e73\u79fb\uff0c\u90a3\u4e48\u7eb9\u7406\u5c31\u4f1a\u5728\u8868\u9762\u4e0a\u5411\u5de6\u79fb\u52a8\u3002\u5982\u679c\u7eb9\u7406\u53d8\u6362\u662f\u9006\u65f6\u9488\u65cb\u8f6c\uff0c\u90a3\u4e48\u7eb9\u7406\u5c31\u4f1a\u5728\u8868\u9762\u4e0a\u987a\u65f6\u9488\u65cb\u8f6c\u3002</p> <p>\u6211\u5728\u8fd9\u91cc\u63d0\u5230\u7eb9\u7406\u53d8\u6362\u4e3b\u8981\u662f\u4e3a\u4e86\u5c55\u793a OpenGL \u5982\u4f55\u5728\u53e6\u4e00\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u53d8\u6362\u3002\u4f46\u6709\u65f6\u53d8\u6362\u7eb9\u7406\u4ee5\u4f7f\u5176\u66f4\u597d\u5730\u9002\u5e94\u8868\u9762\u662f\u6709\u7528\u7684\u3002\u5e76\u4e14\u4e3a\u4e86\u83b7\u5f97\u4e0d\u5bfb\u5e38\u7684\u6548\u679c\uff0c\u60a8\u751a\u81f3\u53ef\u4ee5\u52a8\u753b\u5316\u7eb9\u7406\u53d8\u6362\uff0c\u4f7f\u7eb9\u7406\u56fe\u50cf\u5728\u8868\u9762\u4e0a\u79fb\u52a8\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6f14\u793a\uff0c\u8ba9\u60a8\u5c1d\u8bd5\u7eb9\u7406\u53d8\u6362\u5e76\u67e5\u770b\u6548\u679c\u3002\u5728\u5de6\u4fa7\uff0c\u60a8\u53ef\u4ee5\u770b\u5230 st \u5e73\u9762\u4e0a s \u548c t \u4ecb\u4e8e -1 \u548c 2 \u4e4b\u95f4\u7684\u533a\u57df\u3002\u4e00\u4e2a\u6846\u52fe\u52d2\u51fa\u6620\u5c04\u5230\u5177\u6709\u7eb9\u7406\u5750\u6807\u8303\u56f4\u5728 0 \u5230 1 \u7684 3D \u5bf9\u8c61\u533a\u57df\u7684\u7eb9\u7406\u533a\u57df\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u62d6\u52a8\u6ed1\u5757\u6765\u5e94\u7528\u7eb9\u7406\u53d8\u6362\uff0c\u770b\u770b\u53d8\u6362\u5982\u4f55\u5f71\u54cd\u6846\u4ee5\u53ca\u5982\u4f55\u5f71\u54cd\u5bf9\u8c61\u4e0a\u7684\u7eb9\u7406\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u6f14\u793a\u4e2d\u7684\u5e2e\u52a9\u6587\u672c\u3002</p> <p></p> <p>When a texture is applied to a primitive, the texture coordinates for a vertex determine which point in the texture is mapped to that vertex. Texture images are 2D, but OpenGL also supports one-dimensional textures and three-dimensional textures. This means that texture coordinates cannot be restricted to two coordinates. In fact, a set of texture coordinates in OpenGL is represented internally in the form of homogeneous coordinates, which are referred to as (s,t,r,q). We have used glTexCoord2* to specify texture s and t coordinates, but a call to glTexCoord2f(s,t), for example, is really just shorthand for glTexCoord4f(s,t,0,1).</p> <p>Since texture coordinates are no different from vertex coordinates, they can be transformed in exactly the same way. OpenGL maintains a texture transformation as part of its state, along with the modelview and projection transformations. The current value of each of the three transformations is stored as a matrix. When a texture is applied to an object, the texture coordinates that were specified for its vertices are transformed by the texture matrix. The transformed texture coordinates are then used to pick out a point in the texture. Of course, the default texture transform is the identity transform, which doesn't change the coordinates.</p> <p>The texture matrix can represent scaling, rotation, translation and combinations of these basic transforms. To specify a texture transform, you have to use glMatrixMode() to set the matrix mode to GL_TEXTURE. With this mode in effect, calls to methods such as glRotate*, glScale*, and glLoadIdentity are applied to the texture matrix. For example to install a texture transform that scales texture coordinates by a factor of two in each direction, you could say:</p> <pre><code>glMatrixMode(GL_TEXTURE);\nglLoadIdentity(); // Make sure we are starting from the identity matrix.\nglScalef(2,2,1);\nglMatrixMode(GL_MODELVIEW); // Leave matrix mode set to GL_MODELVIEW.\n</code></pre> <p>Since the image lies in the st-plane, only the first two parameters of glScalef matter. For rotations, you would use (0,0,1) as the axis of rotation, which will rotate the image within the st-plane.</p> <p>Now, what does this actually mean for the appearance of the texture on a surface? In the example, the scaling transform multiplies each texture coordinate by 2. For example, if a vertex was assigned 2D texture coordinates (0.4,0.1), then after the texture transform is applied, that vertex will be mapped to the point (s,t) = (0.8,0.2) in the texture. The texture coordinates vary twice as fast on the surface as they would without the scaling transform. A region on the surface that would map to a 1-by-1 square in the texture image without the transform will instead map to a 2-by-2 square in the image\u2014so that a larger piece of the image will be seen inside the region. In other words, the texture image will be shrunk by a factor of two on the surface! More generally, the effect of a texture transformation on the appearance of the texture is the inverse of its effect on the texture coordinates. (This is exactly analogous to the inverse relationship between a viewing transformation and a modeling transformation.) If the texture transform is translation to the right, then the texture moves to the left on the surface. If the texture transform is a counterclockwise rotation, then the texture rotates clockwise on the surface.</p> <p>I mention texture transforms here mostly to show how OpenGL can use transformations in another context. But it is sometimes useful to transform a texture to make it fit better on a surface. And for an unusual effect, you might even animate the texture transform to make the texture image move on the surface. Here is a demo that lets you experiment with texture transforms and see the effect. On the left, you see the region in the st-plane for s and t between \u22121 and 2. A box outlines the region in the texture that maps to a region on the 3D object with texture coordinates in the range 0 to 1. You can drag the sliders to apply texture transforms to see how the transforms affect the box and how they affect the texture on the object. See the help text in the demo for more information.</p> <p></p>"},{"location":"cn/c4/s3/#435-\u4ece\u5185\u5b58\u52a0\u8f7d\u7eb9\u7406","title":"4.3.5 \u4ece\u5185\u5b58\u52a0\u8f7d\u7eb9\u7406","text":"<p>Loading a Texture from Memory</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL \u4e2d\u5c06\u56fe\u50cf\u7528\u4f5c\u7eb9\u7406\u7684\u8fc7\u7a0b\u901a\u5e38\u5f00\u59cb\u4e8e\u6587\u4ef6\u4e2d\u7684\u56fe\u50cf\u3002OpenGL \u672c\u8eab\u6ca1\u6709\u4ece\u6587\u4ef6\u52a0\u8f7d\u56fe\u50cf\u7684\u51fd\u6570\u3002\u76ee\u524d\uff0c\u6211\u4eec\u5047\u8bbe\u56fe\u50cf\u5df2\u7ecf\u4ece\u6587\u4ef6\u52a0\u8f7d\u5230\u8ba1\u7b97\u673a\u7684\u5185\u5b58\u4e2d\u3002\u672c\u8282\u7a0d\u540e\uff0c\u6211\u5c06\u89e3\u91ca\u5982\u4f55\u5728 C \u548c Java \u4e2d\u5b8c\u6210\u8fd9\u4e00\u8fc7\u7a0b\u3002</p> <p>OpenGL \u4ece\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u52a0\u8f7d\u56fe\u50cf\u6570\u636e\u5230 2D \u7eb9\u7406\u7684\u51fd\u6570\u662f glTexImage2D()\uff0c\u5176\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>glTexImage2D(target, mipmapLevel, internalFormat, width, height, border,\n            format, dataType, pixels);\n</code></pre> <p>target \u5e94\u8be5\u662f GL_TEXTURE_2D\u3002mipmapLevel \u901a\u5e38\u5e94\u8be5\u662f 0\u3002\u503c 0 \u7528\u4e8e\u52a0\u8f7d\u4e3b\u7eb9\u7406\uff1b\u66f4\u5927\u7684\u503c\u7528\u4e8e\u52a0\u8f7d\u5355\u72ec\u7684 mipmap\u3002internalFormat \u544a\u8bc9 OpenGL \u60a8\u5e0c\u671b\u7eb9\u7406\u6570\u636e\u5728 OpenGL \u7eb9\u7406\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\u3002\u5b83\u53ef\u4ee5\u662f GL_RGB\uff0c\u7528\u4e8e\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u5b58\u50a8 8 \u4f4d\u7684\u7ea2\u8272/\u7eff\u8272/\u84dd\u8272\u5206\u91cf\u3002\u53e6\u4e00\u79cd\u53ef\u80fd\u6027\u662f GL_RGBA\uff0c\u5b83\u589e\u52a0\u4e86\u4e00\u4e2a alpha \u5206\u91cf\u3002width \u548c height \u63d0\u4f9b\u4e86\u56fe\u50cf\u7684\u5927\u5c0f\uff1b\u8fd9\u4e9b\u503c\u5e94\u8be5\u662f 2 \u7684\u5e42\u3002border \u7684\u503c\u5e94\u8be5\u662f 0\uff1b\u53e6\u4e00\u79cd\u53ef\u80fd\u6027\u662f 1\uff0c\u8fd9\u8868\u660e\u5df2\u7ecf\u5728\u56fe\u50cf\u6570\u636e\u5468\u56f4\u6dfb\u52a0\u4e86\u4e00\u50cf\u7d20\u7684\u8fb9\u754c\uff0c\u6211\u5c06\u4e0d\u8ba8\u8bba\u5176\u539f\u56e0\u3002\u6700\u540e\u4e09\u4e2a\u53c2\u6570\u63cf\u8ff0\u4e86\u56fe\u50cf\u6570\u636e\u3002format \u544a\u8bc9\u5982\u4f55\u5728\u8ba1\u7b97\u673a\u7684\u5185\u5b58\u4e2d\u8868\u793a\u539f\u59cb\u56fe\u50cf\u6570\u636e\uff0c\u4f8b\u5982 GL_RGB \u6216 GL_RGBA\u3002dataType \u901a\u5e38\u662f GL_UNSIGNED_BYTE\uff0c\u8868\u793a\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u88ab\u8868\u793a\u4e3a\u8303\u56f4\u5728 0 \u5230 255 \u7684\u4e00\u5b57\u8282\u503c\u3002\u800c pixels \u662f\u6307\u5411\u50cf\u7d20\u5b9e\u9645\u989c\u8272\u6570\u636e\u7684\u8d77\u59cb\u70b9\u7684\u6307\u9488\u3002\u50cf\u7d20\u6570\u636e\u5fc5\u987b\u5728\u7279\u5b9a\u7684\u683c\u5f0f\u4e2d\uff0c\u4f46\u8fd9\u5728\u8fd9\u91cc\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5173\u5fc3\uff0c\u56e0\u4e3a\u901a\u5e38\u7531\u7528\u4e8e\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u56fe\u50cf\u7684\u51fd\u6570\u6765\u5904\u7406\u3002\uff08\u5bf9\u4e8e JOGL\uff0c\u6307\u9488\u5c06\u88ab\u7f13\u51b2\u533a\u66ff\u6362\u3002\uff09</p> <p>\u8fd9\u770b\u8d77\u6765\u76f8\u5f53\u590d\u6742\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5bf9 glTexImage2D \u7684\u8c03\u7528\u901a\u5e38\u91c7\u53d6\u4ee5\u4e0b\u5f62\u5f0f\uff0c\u53ea\u662f\u53ef\u80fd\u7528 GL_RGBA \u66ff\u6362 GL_RGB\u3002</p> <pre><code>glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0,\n            GL_RGB, GL_UNSIGNED_BYTE, pixels);\n</code></pre> <p>\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u5c06\u628a\u56fe\u50cf\u52a0\u8f7d\u5230\u7eb9\u7406\u4e2d\uff0c\u4f46\u5b83\u4e0d\u4f1a\u5bfc\u81f4\u7eb9\u7406\u88ab\u4f7f\u7528\u3002\u4e3a\u6b64\uff0c\u60a8\u8fd8\u5fc5\u987b\u8c03\u7528</p> <pre><code>glEnable(GL_TEXTURE_2D);\n</code></pre> <p>\u5982\u679c\u60a8\u5e0c\u671b\u5728\u67d0\u4e9b\u5bf9\u8c61\u4e0a\u4f7f\u7528\u7eb9\u7406\u800c\u5728\u5176\u4ed6\u5bf9\u8c61\u4e0a\u4e0d\u4f7f\u7528\uff0c\u60a8\u53ef\u4ee5\u5728\u7ed8\u5236\u5e0c\u671b\u6709\u7eb9\u7406\u7684\u5bf9\u8c61\u4e4b\u524d\u542f\u7528 GL_TEXTURE_2D\uff0c\u5728\u7ed8\u5236\u65e0\u7eb9\u7406\u7684\u5bf9\u8c61\u4e4b\u524d\u5c06\u5176\u7981\u7528\u3002\u60a8\u4e5f\u53ef\u4ee5\u968f\u65f6\u901a\u8fc7\u8c03\u7528 glTexImage2D \u66f4\u6539\u6b63\u5728\u4f7f\u7528\u7684\u7eb9\u7406\u3002</p> <p>It's about time that we looked at the process of getting an image into OpenGL so that it can be used as a texture. Usually, the image starts out in a file. OpenGL does not have functions for loading images from a file. For now, we assume that the file has already been loaded from the file into the computer's memory. Later in this section, I will explain how that's done in C and in Java.</p> <p>The OpenGL function for loading image data from the computer's memory into a 2D texture is glTexImage2D(), which takes the form:</p> <pre><code>glTexImage2D(target, mipmapLevel, internalFormat, width, height, border,\n                            format, dataType, pixels);\n</code></pre> <p>The target should be GL_TEXTURE_2D. The mipmapLevel should ordinarily be 0. The value 0 is for loading the main texture; a larger value is used to load an individual mipmap. The internalFormat tells OpenGL how you want the texture data to be stored in OpenGL texture memory. It can be GL_RGB to store an 8-bit red/green/blue component for each pixel. Another possibility is GL_RGBA, which adds an alpha component. The width and height give the size of the image; the values should be powers of two. The value of border should be 0; the only other possibility is 1, which indicates that a one-pixel border has been added around the image data for reasons that I will not discuss. The last three parameters describe the image data. The format tells how the original image data is represented in the computer's memory, such as GL_RGB or GL_RGBA. The dataType is usually GL_UNSIGNED_BYTE, indicating that each color component is represented as a one-byte value in the range 0 to 255. And pixels is a pointer to the start of the actual color data for the pixels. The pixel data has to be in a certain format, but that need not concern us here, since it is usually taken care of by the functions that are used to read the image from a file. (For JOGL, the pointer would be replaced by a buffer.)</p> <p>This all looks rather complicated, but in practice, a call to glTexImage2D generally takes the following form, except possibly with GL_RGB replaced with GL_RGBA.</p> <pre><code>glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0,\n                    GL_RGB, GL_UNSIGNED_BYTE, pixels);\n</code></pre> <p>Calling this function will load the image into the texture, but it does not cause the texture to be used. For that, you also have to call</p> <pre><code>glEnable(GL_TEXTURE_2D);\n</code></pre> <p>If you want to use the texture on some objects but not others, you can enable GL_TEXTURE_2D before drawing objects that you want to be textured and disable it before drawing untextured objects. You can also change the texture that is being used at any time by calling glTexImage2D.</p>"},{"location":"cn/c4/s3/#436-\u6765\u81ea\u989c\u8272\u7f13\u51b2\u533a\u7684\u7eb9\u7406","title":"4.3.6 \u6765\u81ea\u989c\u8272\u7f13\u51b2\u533a\u7684\u7eb9\u7406","text":"<p>Texture from Color Buffer</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u7eb9\u7406\u56fe\u50cf\u901a\u5e38\u6765\u81ea\u5916\u90e8\u6765\u6e90\uff0c\u6700\u5e38\u89c1\u7684\u662f\u56fe\u50cf\u6587\u4ef6\u3002\u7136\u800c\uff0cOpenGL \u672c\u8eab\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u56fe\u50cf\u521b\u5efa\u5f15\u64ce\u3002\u6709\u65f6\uff0c\u4e0e\u5176\u52a0\u8f7d\u4e00\u4e2a\u56fe\u50cf\u6587\u4ef6\uff0c\u4e0d\u5982\u8ba9 OpenGL \u5185\u90e8\u521b\u5efa\u56fe\u50cf\u66f4\u65b9\u4fbf\uff0c\u901a\u8fc7\u6e32\u67d3\u6765\u5b9e\u73b0\u3002\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a OpenGL \u53ef\u4ee5\u4ece\u5b83\u81ea\u5df1\u7684\u989c\u8272\u7f13\u51b2\u533a\u8bfb\u53d6\u7eb9\u7406\u6570\u636e\uff0c\u5b83\u5728\u90a3\u91cc\u8fdb\u884c\u7ed8\u56fe\u3002\u8981\u4f7f\u7528 OpenGL \u521b\u5efa\u7eb9\u7406\u56fe\u50cf\uff0c\u60a8\u53ea\u9700\u4f7f\u7528\u6807\u51c6\u7684 OpenGL \u7ed8\u56fe\u547d\u4ee4\u7ed8\u5236\u56fe\u50cf\uff0c\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u5c06\u8be5\u56fe\u50cf\u52a0\u8f7d\u4e3a\u7eb9\u7406\uff1a</p> <pre><code>glCopyTexImage2D(\u76ee\u6807, mipmap\u7ea7\u522b, \u5185\u90e8\u683c\u5f0f,\n                                    x, y, \u5bbd\u5ea6, \u9ad8\u5ea6, \u8fb9\u6846 );\n</code></pre> <p>\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\uff0c\u76ee\u6807\u5c06\u662f GL_TEXTURE_2D\uff1bmipmap\u7ea7\u522b \u5e94\u8be5\u662f\u96f6\uff1b\u5185\u90e8\u683c\u5f0f \u901a\u5e38\u662f GL_RGB \u6216 GL_RGBA\uff1bx \u548c y \u6307\u5b9a\u4ece\u989c\u8272\u7f13\u51b2\u533a\u8bfb\u53d6\u7eb9\u7406\u7684\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\uff1bwidth \u548c height \u662f\u8be5\u77e9\u5f62\u7684\u5927\u5c0f\uff1b\u8fb9\u6846\u5e94\u8be5\u662f 0\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u7eb9\u7406\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5e94\u8be5\u662f 2 \u7684\u5e42\u3002\u5bf9 glCopyTexImage2D \u7684\u8c03\u7528\u901a\u5e38\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>glCopyTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, x, y, \u5bbd\u5ea6, \u9ad8\u5ea6, 0);\n</code></pre> <p>\u6700\u7ec8\u7ed3\u679c\u662f\uff0c\u989c\u8272\u7f13\u51b2\u533a\u4e2d\u6307\u5b9a\u7684\u77e9\u5f62\u5c06\u88ab\u590d\u5236\u5230\u7eb9\u7406\u5185\u5b58\uff0c\u5e76\u6210\u4e3a\u5f53\u524d\u7684 2D \u7eb9\u7406\u3002\u8fd9\u4e0e\u5bf9 glTexImage2D() \u7684\u8c03\u7528\u7684\u5de5\u4f5c\u65b9\u5f0f\u76f8\u540c\uff0c\u53ea\u662f\u56fe\u50cf\u6570\u636e\u7684\u6765\u6e90\u4e0d\u540c\u3002</p> <p>\u4e00\u4e2a\u793a\u4f8b\u53ef\u4ee5\u5728 JOGL \u7a0b\u5e8f jogl/TextureFromColorBuffer.java \u6216 C \u7248\u672c glut/texture-from-color-buffer.c \u4e2d\u627e\u5230\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7ed8\u5236\u4e86 2.4.1 \u5c0f\u8282 \u4e2d\u7684\u98ce\u8f66\u548c\u63a8\u8f66\u573a\u666f\uff0c\u5e76\u968f\u540e\u5c06\u8be5\u7ed8\u56fe\u4f5c\u4e3a\u7eb9\u7406\u5e94\u7528\u4e8e 3D \u5bf9\u8c61\u3002\u8fd9\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6f14\u793a\u7248\u672c\u3002</p> <p></p> <p>\u7eb9\u7406\u53ef\u4ee5\u88ab\u52a8\u753b\u5316\uff01\u5bf9\u4e8e\u52a8\u753b\uff0c\u6bcf\u4e2a\u5e27\u90fd\u4f1a\u7ed8\u5236\u4e00\u4e2a\u65b0\u7684\u7eb9\u7406\u3002\u6240\u6709\u5de5\u4f5c\u90fd\u5728\u7a0b\u5e8f\u7684\u663e\u793a\u51fd\u6570\u4e2d\u5b8c\u6210\u3002\u5728\u8be5\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u5c06\u98ce\u8f66\u548c\u63a8\u8f66\u573a\u666f\u7684\u5f53\u524d\u5e27\u4f5c\u4e3a\u7981\u7528\u7167\u660e\u7684 2D \u573a\u666f\u7ed8\u5236\u3002\u8fd9\u5e45\u753b\u4e0d\u4f1a\u663e\u793a\u5728\u7535\u8111\u5c4f\u5e55\u4e0a\uff1b\u7ed8\u56fe\u662f\u5728\u5c4f\u5e55\u5916\u5b8c\u6210\u7684\uff0c\u56fe\u50cf\u5c06\u5728\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u4e4b\u524d\u88ab\u64e6\u9664\u5e76\u66ff\u6362\u4e3a 3D \u56fe\u50cf\u3002\u7136\u540e\u8c03\u7528 glCopyTexImage2D() \u51fd\u6570\u5c06\u573a\u666f\u590d\u5236\u5230\u5f53\u524d\u7eb9\u7406\u4e2d\u3002\u7136\u540e\uff0c\u6e05\u9664\u989c\u8272\u7f13\u51b2\u533a\uff0c\u542f\u7528\u7167\u660e\uff0c\u5e76\u8bbe\u7f6e 3D \u6295\u5f71\uff0c\u6700\u540e\u7ed8\u5236\u5728\u7535\u8111\u5c4f\u5e55\u4e0a\u770b\u5230\u7684 3D \u5bf9\u8c61\u3002</p> <p>Texture images for use in an OpenGL program usually come from an external source, most often an image file. However, OpenGL is itself a powerful engine for creating images. Sometimes, instead of loading an image file, it's convenient to have OpenGL create the image internally, by rendering it. This is possible because OpenGL can read texture data from its own color buffer, where it does its drawing. To create a texture image using OpenGL, you just have to draw the image using standard OpenGL drawing commands and then load that image as a texture using the method</p> <pre><code>glCopyTexImage2D( target, mipmapLevel, internalFormat,\n                                    x, y, width, height, border );\n</code></pre> <p>In this method, target will be GL_TEXTURE_2D; mipmapLevel should be zero; the internalFormat will ordinarily be GL_RGB or GL_RGBA; x and y specify the lower left corner of the rectangle from which the texture will be read; width and height are the size of that rectangle; and border should be 0. As usual with textures, the width and height should ordinarily be powers of two. A call to glCopyTexImage2D will typically look like</p> <pre><code>glCopyTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, x, y, width, height, 0);\n</code></pre> <p>The end result is that the specified rectangle from the color buffer will be copied to texture memory and will become the current 2D texture. This works in the same way as a call to glTexImage2D(), except for the source of the image data.</p> <p>An example can be found in the JOGL program jogl/TextureFromColorBuffer.java or in the C version glut/texture-from-color-buffer.c. This program draws the windmill-and-cart scene from Subsection 2.4.1 and then uses that drawing as a texture on 3D objects. Here is a demo version of the program.</p> <p></p> <p>The texture can be animated! For the animation, a new texture is drawn for each frame. All the work is done in the program's display function. In that function, the current frame of the windmill-and-cart scene is first drawn as a 2D scene with lighting disabled. This picture is not shown on the computer screen; the drawing is done off-screen and the image will be erased and replaced with the 3D image before it's ever shown on screen. The glCopyTexImage2D() function is then called to copy the scene into the current texture. Then, the color buffer is cleared, lighting is enabled, and a 3D projection is set up, before finally drawing the 3D object that is seen on the computer screen.</p>"},{"location":"cn/c4/s3/#437-\u7eb9\u7406\u5bf9\u8c61","title":"4.3.7 \u7eb9\u7406\u5bf9\u8c61","text":"<p>Texture Objects</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL 1.0 \u4e2d\u5173\u4e8e\u7eb9\u7406\u7684\u6240\u6709\u5185\u5bb9\u5728 OpenGL 1.1 \u4e2d\u4ecd\u7136\u9002\u7528\u3002OpenGL 1.1 \u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a\u7eb9\u7406\u5bf9\u8c61\u7684\u65b0\u7279\u6027\uff0c\u4ee5\u4f7f\u7eb9\u7406\u5904\u7406\u66f4\u52a0\u9ad8\u6548\u3002\u7eb9\u7406\u5bf9\u8c61\u7528\u4e8e\u5f53\u4f60\u9700\u8981\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u591a\u4e2a\u7eb9\u7406\u56fe\u50cf\u65f6\u3002\u52a0\u8f7d\u7eb9\u7406\u56fe\u50cf\u7684\u5e38\u7528\u65b9\u6cd5 glTexImage2D\uff0c\u5c06\u6570\u636e\u4ece\u4f60\u7684\u7a0b\u5e8f\u4f20\u8f93\u5230\u663e\u5361\u3002\u8fd9\u662f\u4e00\u4e2a\u6602\u8d35\u7684\u64cd\u4f5c\uff0c\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u5728\u591a\u4e2a\u7eb9\u7406\u4e4b\u95f4\u5207\u6362\u53ef\u80fd\u4f1a\u4e25\u91cd\u964d\u4f4e\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\u7eb9\u7406\u5bf9\u8c61\u63d0\u4f9b\u4e86\u5728\u663e\u5361\u4e0a\u5b58\u50a8\u591a\u4e2a\u7eb9\u7406\u6570\u636e\u7684\u53ef\u80fd\u6027\u3002\u6709\u4e86\u7eb9\u7406\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5355\u4e00\u7684\u3001\u5feb\u901f\u7684 OpenGL \u547d\u4ee4\u5728\u4e0d\u540c\u7684\u7eb9\u7406\u5bf9\u8c61\u4e4b\u95f4\u5207\u6362\uff1a\u4f60\u53ea\u9700\u8981\u544a\u8bc9 OpenGL \u4f60\u60f3\u8981\u4f7f\u7528\u54ea\u4e2a\u7eb9\u7406\u5bf9\u8c61\u3002\uff08\u5f53\u7136\uff0c\u663e\u5361\u53ea\u6709\u6709\u9650\u7684\u5185\u5b58\u7528\u4e8e\u5b58\u50a8\u7eb9\u7406\uff0c\u4f60\u4e0d\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u7eb9\u7406\u5bf9\u8c61\u90fd\u4f1a\u88ab\u5b9e\u9645\u5b58\u50a8\u5728\u663e\u5361\u4e0a\u3002\u4e0d\u9002\u5408\u653e\u5728\u663e\u5361\u5185\u5b58\u4e2d\u7684\u7eb9\u7406\u5bf9\u8c61\u5e76\u4e0d\u6bd4\u666e\u901a\u7eb9\u7406\u66f4\u9ad8\u6548\u3002\uff09</p> <p>\u7eb9\u7406\u5bf9\u8c61\u7531 OpenGL \u548c\u56fe\u5f62\u786c\u4ef6\u7ba1\u7406\u3002\u4e00\u4e2a\u7eb9\u7406\u5bf9\u8c61\u7531\u4e00\u4e2a\u6574\u6570 ID \u53f7\u6807\u8bc6\u3002\u8981\u4f7f\u7528\u4e00\u4e2a\u7eb9\u7406\u5bf9\u8c61\uff0c\u4f60\u9700\u8981\u4ece OpenGL \u83b7\u53d6\u4e00\u4e2a ID \u53f7\u3002\u8fd9\u662f\u901a\u8fc7 glGenTextures \u51fd\u6570\u5b8c\u6210\u7684\uff1a</p> <pre><code>void glGenTextures( int textureCount, int* array )\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u4e00\u6b21\u8c03\u7528\u751f\u6210\u591a\u4e2a\u7eb9\u7406 ID\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u4f60\u60f3\u8981\u591a\u5c11\u4e2a ID\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bf4\u660e\u751f\u6210\u7684 ID \u5c06\u88ab\u5b58\u50a8\u5728\u54ea\u91cc\u3002\u5b83\u5e94\u8be5\u662f\u4e00\u4e2a\u81f3\u5c11\u4e3a textureCount \u957f\u5ea6\u7684\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u8ba1\u5212\u4f7f\u7528\u4e09\u4e2a\u7eb9\u7406\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u8bf4\uff1a</p> <pre><code>int idList[3];\nglGenTextures( 3, idList );\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 idList[0]\u3001idList[1] \u548c idList[2] \u6765\u5f15\u7528\u7eb9\u7406\u3002\u7531\u4e8e C \u4e2d\u6307\u9488\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5982\u679c\u4f60\u60f3\u8981\u83b7\u53d6\u4e00\u4e2a\u5355\u4e00\u7684\u7eb9\u7406 ID\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u7684\u6307\u9488\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 glGenTextures()\u3002\u4f8b\u5982\uff1a</p> <pre><code>int texID;\nglGenTextures( 1, &amp;texID );\n</code></pre> <p>\u65b0\u7684\u7eb9\u7406 ID \u5c06\u88ab\u5b58\u50a8\u5728\u53d8\u91cf texID \u4e2d\u3002</p> <p>\u6bcf\u4e2a\u7eb9\u7406\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u7684\u72b6\u6001\uff0c\u5176\u4e2d\u5305\u62ec\u7eb9\u7406\u53c2\u6570\u7684\u503c\uff0c\u5982 GL_TEXTURE_MIN_FILTER\uff0c\u4ee5\u53ca\u7eb9\u7406\u56fe\u50cf\u672c\u8eab\u3002\u8981\u4f7f\u7528\u7279\u5b9a\u7684\u7eb9\u7406\u5bf9\u8c61\uff0c\u4f60\u5fc5\u987b\u9996\u5148\u8c03\u7528</p> <pre><code>glBindTexture( GL_TEXTURE_2D, texID )\n</code></pre> <p>\u5176\u4e2d texID \u662f\u7531 glGenTextures \u8fd4\u56de\u7684\u7eb9\u7406 ID\u3002\u5728\u6b64\u8c03\u7528\u4e4b\u540e\uff0c\u4efb\u4f55\u5bf9 glTexParameteri\u3001glTexImage2D \u6216 glCopyTexImage2D \u7684\u4f7f\u7528\u90fd\u5c06\u5e94\u7528\u4e8e ID \u4e3a texID \u7684\u7eb9\u7406\u5bf9\u8c61\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u5f53\u6e32\u67d3\u4e00\u4e2a\u5e26\u7eb9\u7406\u7684\u539f\u7d20\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u7eb9\u7406\u662f\u6700\u8fd1\u4e00\u6b21\u4f7f\u7528 glBindTexture \u7ed1\u5b9a\u7684\u90a3\u4e2a\u3002\u4e00\u4e2a\u5178\u578b\u7684\u6a21\u5f0f\u662f\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u671f\u95f4\u52a0\u8f7d\u548c\u914d\u7f6e\u591a\u4e2a\u7eb9\u7406\uff1a</p> <pre><code>glGenTextures( n, textureIdList );\nfor (i = 0; i &lt; n; i++) {\n    glBindTexture( textureIDList[i] );\n    .\n    .  // \u52a0\u8f7d\u7b2c i \u4e2a\u7eb9\u7406\u56fe\u50cf\n    .  // \u914d\u7f6e\u7b2c i \u4e2a\u7eb9\u7406\u56fe\u50cf\n    .\n}\n</code></pre> <p>\u7136\u540e\uff0c\u5728\u6e32\u67d3\u573a\u666f\u65f6\uff0c\u6bcf\u6b21\u4f60\u60f3\u8981\u4ece\u4e00\u4e2a\u7eb9\u7406\u56fe\u50cf\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u7eb9\u7406\u56fe\u50cf\u65f6\uff0c\u4f60\u4f1a\u8c03\u7528 glBindTexture\u3002\u8fd9\u5c06\u6bd4\u6bcf\u6b21\u60f3\u8981\u5207\u6362\u7eb9\u7406\u65f6\u8c03\u7528 glTexImage2D \u66f4\u9ad8\u6548\u3002</p> <p>OpenGL 1.1 \u5c06\u7eb9\u7406 ID \u96f6\u4fdd\u7559\u4e3a\u9ed8\u8ba4\u7eb9\u7406\u5bf9\u8c61\uff0c\u6700\u521d\u662f\u7ed1\u5b9a\u7684\u3002\u8fd9\u662f\u5982\u679c\u4f60\u4ece\u672a\u8c03\u7528 glBindTexture \u5c31\u4f1a\u4f7f\u7528\u7684\u7eb9\u7406\u5bf9\u8c61\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u5199\u4f7f\u7528\u7eb9\u7406\u800c\u4e0d\u63d0\u53ca glBindTexture \u7684\u7a0b\u5e8f\u3002\uff08\u7136\u800c\uff0c\u6211\u5e94\u8be5\u6307\u51fa\uff0c\u5f53\u6211\u4eec\u5230\u8fbe WebGL \u65f6\uff0c\u60c5\u51b5\u5c06\u4e0d\u518d\u5982\u6b64\u3002\uff09</p> <p>\u5c0f\u578b\u793a\u4f8b\u7a0b\u5e8f glut/texture-objects.c \u5c55\u793a\u4e86\u5982\u4f55\u5728 C \u4e2d\u4f7f\u7528\u7eb9\u7406\u5bf9\u8c61\u3002\u5b83\u4ec5\u5728 C \u4e2d\u53ef\u7528\uff0c\u56e0\u4e3a\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0cJOGL \u6709\u5b83\u81ea\u5df1\u7684\u5904\u7406\u7eb9\u7406\u5bf9\u8c61\u7684\u65b9\u5f0f\u3002</p> <p>Everything that I've said so far about textures was already true for OpenGL 1.0. OpenGL 1.1 introduced a new feature called texture objects to make texture handling more efficient. Texture objects are used when you need to work with several texture images in the same program. The usual method for loading texture images, glTexImage2D, transfers data from your program into the graphics card. This is an expensive operation, and switching among multiple textures by using this method can seriously degrade a program's performance. Texture objects offer the possibility of storing texture data for multiple textures on the graphics card. With texture objects, you can switch from one texture object to another with a single, fast OpenGL command: You just have to tell OpenGL which texture object you want to use. (Of course, the graphics card has only a limited amount of memory for storing textures, and you aren't guaranteed that all of your texture objects will actually be stored on the graphics card. Texture objects that don't fit in the graphics card's memory are no more efficient than ordinary textures.)</p> <p>Texture objects are managed by OpenGL and the graphics hardware. A texture object is identified by an integer ID number. To use a texture object, you need to obtain an ID number from OpenGL. This is done with the glGenTextures function:</p> <pre><code>void glGenTextures( int textureCount, int* array )\n</code></pre> <p>This function can generate multiple texture IDs with a single call. The first parameter specifies how many IDs you want. The second parameter says where the generated IDs will be stored. It should be an array whose length is at least textureCount. For example, if you plan to use three texture objects, you can say</p> <pre><code>int idList[3];\nglGenTextures( 3, idList );\n</code></pre> <p>You can then use idList[0], idList[1], and idList[2] to refer to the textures. Because of the way pointers work in C, if you want to get a single texture ID, you can pass a pointer to an integer variable as the second parameter to glGenTextures(). For example,</p> <pre><code>int texID;\nglGenTextures( 1, &amp;texID );\n</code></pre> <p>The new texture ID will be stored in the variable texID.</p> <p>Every texture object has its own state, which includes the values of texture parameters such as GL_TEXTURE_MIN_FILTER as well as the texture image itself. To work with a specific texture object, you must first call</p> <pre><code>glBindTexture( GL_TEXTURE_2D, texID )\n</code></pre> <p>where texID is the texture ID returned by glGenTextures. After this call, any use of glTexParameteri, glTexImage2D, or glCopyTexImage2D will be applied to the texture object with ID texID.</p> <p>Similarly, when a textured primitive is rendered, the texture that is used is the one that was most recently bound using glBindTexture. A typical pattern would be to load and configure a number of textures during program initialization:</p> <pre><code>glGenTextures( n, textureIdList );\nfor (i = 0; i &lt; n; i++) {\n    glBindTexture( textureIDList[i] );\n    .\n    .  // Load texture image number i\n    .  // Configure texture image number i\n    .\n}\n</code></pre> <p>Then, while rendering a scene, you would call glBindTexture every time you want to switch from one texture image to another texture image. This would be much more efficient than calling glTexImage2D every time you want to switch textures.</p> <p>OpenGL 1.1 reserves texture ID zero as the default texture object, which is bound initially. It is the texture object that you are using if you never call glBindTexture. This means that you can write programs that use textures without ever mentioning glBindTexture. (However, I should note that when we get to WebGL, that will no longer be true.)</p> <p>The small sample program glut/texture-objects.c shows how to use texture objects in C. In is available only in C since, as we will see, JOGL has its own way of working with texture objects.</p>"},{"location":"cn/c4/s3/#438-\u5728-c-\u4e2d\u52a0\u8f7d\u7eb9\u7406","title":"4.3.8 \u5728 C \u4e2d\u52a0\u8f7d\u7eb9\u7406","text":"<p>Loading Textures in C</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u5982\u4f55\u5c06\u7eb9\u7406\u56fe\u50cf\u6570\u636e\u4ece\u5185\u5b58\u52a0\u8f7d\u5230 OpenGL \u4e2d\u3002\u5269\u4e0b\u7684\u95ee\u9898\u662f\uff0c\u5728\u8c03\u7528 <code>glTexImage2D</code> \u4e4b\u524d\u5982\u4f55\u5c06\u56fe\u50cf\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u8ba1\u7b97\u6570\u636e\u2014\u2014\u5b9e\u9645\u4e0a\uff0c\u4f60\u7684\u7a0b\u5e8f\u53ef\u4ee5\u5373\u65f6\u751f\u6210\u7eb9\u7406\u6570\u636e\u3002\u7136\u800c\uff0c\u66f4\u6709\u53ef\u80fd\u7684\u662f\uff0c\u4f60\u60f3\u8981\u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u5b83\u3002\u672c\u8282\u5c06\u63a2\u8ba8\u5982\u4f55\u5728 C \u8bed\u8a00\u4e2d\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002\u4f60\u53ef\u80fd\u60f3\u8981\u4f7f\u7528\u4e00\u4e2a\u56fe\u50cf\u5904\u7406\u51fd\u6570\u5e93\u3002\u6709\u51e0\u4e2a\u514d\u8d39\u7684\u56fe\u50cf\u5904\u7406\u5e93\u53ef\u7528\u3002\u6211\u5c06\u8ba8\u8bba\u5176\u4e2d\u4e4b\u4e00\uff0cFreeImage\uff0c\u5b83\u53ef\u4ee5\u4e0e\u8bb8\u591a\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f\u4e00\u8d77\u5de5\u4f5c\u3002FreeImage \u53ef\u4ee5\u4ece http://freeimage.sourceforge.net/ \u83b7\u53d6\uff0c\u4f46\u6211\u5728 Linux \u4e0a\u7b80\u5355\u5730\u901a\u8fc7\u5b89\u88c5\u5305 libfreeimage-dev \u6765\u4f7f\u7528\u5b83\u3002\u4e3a\u4e86\u4f7f\u6211\u7684\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u5b83\uff0c\u6211\u5728 C \u7a0b\u5e8f\u7684\u9876\u90e8\u6dfb\u52a0\u4e86 <code>#include \"FreeImage.h\"</code>\uff0c\u5e76\u5728 gcc \u547d\u4ee4\u4e2d\u6dfb\u52a0\u4e86\u9009\u9879 -lfreeimage \u4ee5\u4f7f\u5e93\u5bf9\u7f16\u8bd1\u5668\u53ef\u7528\u3002\uff08\u6709\u5173\u4f7f\u7528\u6b64\u5e93\u7684\u793a\u4f8b\u7a0b\u5e8f\uff0c\u8bf7\u53c2\u89c1 glut/texture-demo.c\u3002\uff09\u4e0e\u5176\u8be6\u7ec6\u8ba8\u8bba FreeImage\uff0c\u6211\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528\u5b83\u4ece\u6587\u4ef6\u52a0\u8f7d\u56fe\u50cf\u6570\u636e\u7684\u6ce8\u91ca\u826f\u597d\u7684\u51fd\u6570\uff1a</p> <pre><code>void* imgPixels; // \u6307\u5411\u5185\u5b58\u4e2d\u7eb9\u7406\u7684\u539f\u59cb RGB \u6570\u636e\u7684\u6307\u9488\u3002\nint imgWidth;    // \u7eb9\u7406\u56fe\u50cf\u7684\u5bbd\u5ea6\u3002\nint imgHeight;   // \u7eb9\u7406\u56fe\u50cf\u7684\u9ad8\u5ea6\u3002\n\nvoid loadTexture( char* fileName ) {\n    // \u4f7f\u7528 FreeImage \u5e93\u52a0\u8f7d\u7eb9\u7406\u56fe\u50cf\uff0c\u5e76\u5c06\u6240\u9700\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u5168\u5c40\u53d8\u91cf\n    // imgPixels, imgWidth, imgHeight \u4e2d\u3002\u53c2\u6570 fileName \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\n    // \u5305\u542b\u8981\u4ece\u4e2d\u52a0\u8f7d\u56fe\u50cf\u7684\u56fe\u50cf\u6587\u4ef6\u7684\u540d\u79f0\u3002\u5982\u679c\u65e0\u6cd5\u52a0\u8f7d\u56fe\u50cf\uff0c\n    // \u5219 imgPixels \u5c06\u88ab\u8bbe\u7f6e\u4e3a null \u6307\u9488\u3002\n\n    imgPixels = 0; // \u7a7a\u6307\u9488\uff0c\u8868\u793a\u5c1a\u672a\u8bfb\u53d6\u6570\u636e\u3002\n\n    FREE_IMAGE_FORMAT format = FreeImage_GetFIFFromFilename(fileName);\n    // FREE_IMAGE_FORMAT \u662f FreeImage \u5e93\u5b9a\u4e49\u7684\u7c7b\u578b\u3002\n    // \u5728\u8fd9\u91cc\uff0c\u683c\u5f0f\u662f\u4ece\u6587\u4ef6\u540d\u4e2d\u7684\u6587\u4ef6\u6269\u5c55\u540d\uff08\u5982 .png, .jpg \u6216 .gif\uff09\u786e\u5b9a\u7684\uff0c\n    // \u652f\u6301\u8bb8\u591a\u683c\u5f0f\u3002\n\n    if (format == FIF_UNKNOWN) {\n        printf(\"Unknown file type for texture image file %s\\n\", fileName);\n        return;\n    }\n\n    FIBITMAP* bitmap = FreeImage_Load(format, fileName, 0);\n    // FIBITMAP \u662f FreeImage \u5e93\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u8868\u793a\u539f\u59cb\u56fe\u50cf\u6570\u636e\u52a0\u4e0a\u4e00\u4e9b\u5143\u6570\u636e\uff0c\n    // \u5982\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u4ee5\u53ca\u56fe\u50cf\u6570\u636e\u7684\u683c\u5f0f\u3002\u8fd9\u5b9e\u9645\u4e0a\u5c1d\u8bd5\u4ece\u6307\u5b9a\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n\n    if (!bitmap) {\n        printf(\"Failed to load image %s\\n\", fileName);\n        return;\n    }\n\n    FIBITMAP* bitmap2 = FreeImage_ConvertTo24Bits(bitmap);\n    // \u8fd9\u4f1a\u521b\u5efa\u56fe\u50cf\u7684\u526f\u672c\uff0c\u6570\u636e\u4ee5\u6807\u51c6 RGB\uff08\u6216 BGR\uff09\u683c\u5f0f\u8868\u793a\uff0c\u4f9b OpenGL \u4f7f\u7528\u3002\n\n    FreeImage_Unload(bitmap);\n    // \u4f7f\u7528\u5b8c\u4f4d\u56fe\u540e\uff0c\u5e94\u8be5\u91ca\u653e\u5b83\u3002\n    // \u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86 bitmap \u7684\u4f7f\u7528\uff0c\u4f46\u8fd8\u6ca1\u6709\u5b8c\u6210 bitmap2 \u7684\u4f7f\u7528\uff0c\u56e0\u4e3a\n    // \u6211\u4eec\u5c06\u4f1a\u7ee7\u7eed\u4f7f\u7528 bitmap2 \u7684\u6570\u636e\u3002\n\n    imgPixels = FreeImage_GetBits(bitmap2);  // \u83b7\u53d6\u6211\u4eec\u6240\u9700\u7684\u6570\u636e\uff01\n    imgWidth = FreeImage_GetWidth(bitmap2);\n    imgHeight = FreeImage_GetHeight(bitmap2);\n\n    if (imgPixels) {\n        printf(\"Texture image loaded from file %s, size %dx%d\\n\",\n            fileName, imgWidth, imgHeight);\n    }\n    else {\n        printf(\"Failed to get texture data from %s\\n\", fileName);\n    }\n\n} // end loadTexture\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u540e\uff0c\u6211\u4eec\u9700\u8981\u7684 <code>glTexImage2D()</code> \u6570\u636e\u5c31\u5728\u5168\u5c40\u53d8\u91cf <code>imgWidth</code>\u3001<code>imgHeight</code> \u548c <code>imgPixels</code> \u4e2d\uff08\u6216\u8005 <code>imgPixels</code> \u4e3a 0\uff0c\u8868\u793a\u52a0\u8f7d\u56fe\u50cf\u7684\u5c1d\u8bd5\u5931\u8d25\uff09\u3002\u6709\u4e00\u4e2a\u590d\u6742\u6027\uff1aFreeImage \u4f1a\u5728\u67d0\u4e9b\u5e73\u53f0\u4e0a\u4ee5\u7ea2/\u7eff/\u84dd\u7684\u987a\u5e8f\u5b58\u50a8\u50cf\u7d20\u7684\u989c\u8272\u5206\u91cf\uff0c\u4f46\u5728\u5176\u4ed6\u5e73\u53f0\u4e0a\u4ee5\u84dd/\u7eff/\u7ea2\u7684\u987a\u5e8f\u5b58\u50a8\u3002\u7b2c\u4e8c\u79cd\u6570\u636e\u683c\u5f0f\u5728 OpenGL \u4e2d\u88ab\u79f0\u4e3a GL_BGR\u3002\u5982\u679c\u4f60\u5728 <code>glTexImage2D()</code> \u4e2d\u4f7f\u7528\u4e86\u9519\u8bef\u7684\u683c\u5f0f\uff0c\u90a3\u4e48\u989c\u8272\u7684\u7ea2\u8272\u548c\u84dd\u8272\u5206\u91cf\u5c06\u4f1a\u98a0\u5012\u3002\u4e3a\u4e86\u533a\u5206\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 FreeImage \u5e38\u91cf FI_RGBA_RED\uff0c\u5b83\u544a\u8bc9\u50cf\u7d20\u6570\u636e\u4e2d\u7ea2\u8272\u5206\u91cf\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u683c\u5f0f\u662f GL_RGB\uff0c\u8fd9\u4e2a\u5e38\u91cf\u5c06\u662f 0\uff1b\u5982\u679c\u683c\u5f0f\u662f GL_BGR\uff0c\u8fd9\u4e2a\u5e38\u91cf\u5c06\u662f 2\u3002\u6240\u4ee5\uff0c\u8981\u5728 OpenGL \u4e2d\u4f7f\u7528\u7eb9\u7406\uff0c\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff1a</p> <pre><code>if ( imgPixels ) { // \u56fe\u50cf\u6570\u636e\u5b58\u5728\n    int format; // \u5185\u5b58\u4e2d\u989c\u8272\u6570\u636e\u7684\u683c\u5f0f\n    if ( FI_RGBA_RED == 0 )\n        format = GL_RGB;\n    else\n        format = GL_BGR;\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, imgWidth, imgHeight, 0, format,\n                        GL_UNSIGNED_BYTE, imgPixels);\n    glEnable(GL_TEXTURE_2D);\n}\nelse { // \u6ca1\u6709\u52a0\u8f7d\u56fe\u50cf\u6570\u636e\uff0c\u6240\u4ee5\u4e0d\u8981\u5c1d\u8bd5\u4f7f\u7528\u7eb9\u7406\u3002\n    glDisable(GL_TEXTURE_2D);\n}\n</code></pre> <p>\u4e3a\u4e86\u66f4\u52a0\u5c0f\u5fc3\uff0c\u4f60\u53ef\u4ee5\u68c0\u67e5\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u662f\u5426\u4e3a 2 \u7684\u5e42\u3002\u5982\u679c\u4e0d\u662f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 FreeImage \u5e93\u4e2d\u7684 <code>FreeImage_Rescale()</code> \u51fd\u6570\u6765\u8c03\u6574\u5927\u5c0f\u3002</p> <p>FreeImage \u662f\u4e00\u4e2a\u5e9e\u5927\u4e14\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u53ef\u80fd\u4e0d\u5bb9\u6613\u5728\u4f60\u7684\u8ba1\u7b97\u673a\u4e0a\u63d0\u4f9b\u3002\u4e3a\u4e86\u8ba9\u4f60\u66f4\u5bb9\u6613\u5730\u5728 C \u4e2d\u5c1d\u8bd5\u7eb9\u7406\uff0c\u6211\u8fd8\u5305\u62ec\u4e86\u4e00\u4e2a\u5c0f\u578b\u7684 C \u5b9e\u7528\u7a0b\u5e8f\uff0c\u7528\u4e8e\u4ece .rgb \u6587\u4ef6\u4e2d\u8bfb\u53d6\u7eb9\u7406\u3002rgb \u6587\u4ef6\u683c\u5f0f\u76f8\u5f53\u7b80\u5355\uff0c\u4f46 rgb \u6587\u4ef6\u901a\u5e38\u6bd4\u76f8\u5e94\u7684 .png \u6216 .jpeg \u6587\u4ef6\u5927\u5f97\u591a\u3002\u8be5\u683c\u5f0f\u4e0d\u88ab\u5e7f\u6cdb\u652f\u6301\uff0c\u4f46\u6211\u5728 glut/textures-rgb \u6587\u4ef6\u5939\u4e2d\u5305\u542b\u4e86\u6211\u7684\u793a\u4f8b\u7eb9\u7406\u56fe\u50cf\u7684 .rgb \u7248\u672c\u3002\u52a0\u8f7d\u5b83\u4eec\u7684\u5c0f\u578b\u5e93\u662f glut/textures-rgb/readrgb.c \u53ca\u5176\u5934\u6587\u4ef6 glut/textures-rgb/readrgb.h\u3002\uff08\u8be5\u5e93\u6765\u81ea http://paulbourke.net/dataformats/sgirgb/\u3002\uff09\u4f7f\u7528\u8be5\u5e93\u7684\u793a\u4f8b\u7a0b\u5e8f\u662f glut/texture-objects-rgb.c \u548c glut/texture-demo-rgb.c\u3002</p> <p>We have seen how to load texture image data from memory into OpenGL. The problem that remains is how to get the image data into memory before calling glTexImage2D. One possibility is to compute the data\u2014you can actually have your program generate texture data on the fly. More likely, however, you want to load it from a file. This section looks at how that might be done in C. You will probably want to use a library of image-manipulation functions. Several free image processing libraries are available. I will discuss one of them, FreeImage, which can work with many image file formats. FreeImage can be obtained from http://freeimage.sourceforge.net/, but I was able to use it in Linux simply by installing the package libfreeimage-dev. To make it available to my program, I added <code>#include \"FreeImage.h\"</code> to the top of my C program, and I added the option -lfreeimage to the gcc command to make the library available to the compiler. (See the sample program glut/texture-demo.c for an example that uses this library.) Instead of discussing FreeImage in detail, I present a well-commented function that uses it to load image data from a file:</p> <pre><code>void* imgPixels; // Pointer to raw RGB data for texture in memory.\nint imgWidth;    // Width of the texture image.\nint imgHeight;   // Height of the texture image.\n\nvoid loadTexture( char* fileName ) {\n        // Loads a texture image using the FreeImage library, and stores the\n        // required info in global variables imgPixels, imgWidth, imgHeight.\n        // The parameter fileName is a string that contains the name of the\n        // image file from which the image is to be loaded.  If the image\n        // can't be loaded, then imgPixels will be set to be a null pointer.\n\n    imgPixels = 0; // Null pointer to signal that data has not been read.\n\n    FREE_IMAGE_FORMAT format = FreeImage_GetFIFFromFilename(fileName);\n        // FREE_IMAGE_FORMAT is a type defined by the FreeImage library.\n        // Here, the format is determined from the file extension in\n        // the file name, such as .png, .jpg, or .gif.  Many formats\n        // are supported.\n\n    if (format == FIF_UNKNOWN) {\n        printf(\"Unknown file type for texture image file %s\\n\", fileName);\n        return;\n    }\n\n    FIBITMAP* bitmap = FreeImage_Load(format, fileName, 0);\n        // FIBITMAP is a type defined by the FreeImage library, representing\n        // the raw image data plus some metadata such as width, height,\n        // and the format of the image data.  This actually tries to\n        // read the data from the specified file.\n\n    if (!bitmap) {\n        printf(\"Failed to load image %s\\n\", fileName);\n        return;\n    }\n\n    FIBITMAP* bitmap2 = FreeImage_ConvertTo24Bits(bitmap);\n        // This creates a copy of the image, with the data represented\n        // in standard RGB (or BGR) format, for use with OpenGL.\n\n    FreeImage_Unload(bitmap);\n        // After finishing with a bitmap, it should be disposed.\n        // We are finished with bitmap, but not with bitmap2, since\n        // we will continue to use the data from bitmap2.\n\n    imgPixels = FreeImage_GetBits(bitmap2);  // Get the data we need!\n    imgWidth = FreeImage_GetWidth(bitmap2);\n    imgHeight = FreeImage_GetHeight(bitmap2);\n\n    if (imgPixels) {\n        printf(\"Texture image loaded from file %s, size %dx%d\\n\", \n                        fileName, imgWidth, imgHeight);\n    }\n    else {\n        printf(\"Failed to get texture data from %s\\n\", fileName);\n    }\n\n} // end loadTexture\n</code></pre> <p>After this function has been called, the data that we need for glTexImage2D() is in the global variables imgWidth, imgHeight, and imgPixels (or imgPixels is 0 to indicate that the attempt to load the image failed). There is one complication: FreeImage will store the color components for a pixel in the order red/green/blue on some platforms but in the order blue/green/red on other platforms. The second data format is called GL_BGR in OpenGL. If you use the wrong format in glTextImage2D(), then the red and blue components of the color will be reversed. To tell the difference, you can use the FreeImage constant FI_RGBA_RED, which tells the position of the red color component in pixel data. This constant will be 0 if the format is GL_RGB and will be 2 if the format is GL_BGR. So, to use the texture in OpenGL, you might say:</p> <pre><code>if ( imgPixels ) { // The image data exists\n    int format; // The format of the color data in memory\n    if ( FI_RGBA_RED == 0 )\n    format = GL_RGB;\n    else\n    format = GL_BGR;\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, imgWidth, imgHeight, 0, format,\n                        GL_UNSIGNED_BYTE, imgPixels);\n    glEnable(GL_TEXTURE_2D);\n}\nelse { // The image data was not loaded, so don't attempt to use the texture.\n    glDisable(GL_TEXTURE_2D);\n}\n</code></pre> <p>To be even more careful, you could check that the width and the height of the image are powers of two. If not, you can resize it using the function FreeImage_Rescale() from the FreeImage library.</p> <p>FreeImage is a large, complicated system that might not be easily made available on your computer. To make it easier for you to experiment with textures in C, I have also included a small C utility for reading textures from .rgb files. The rgb file format is fairly simple, but rgb files are generally much larger than the corresponding .png or .jpeg files. The format is not widely supported, but I have included .rgb versions of my sample texture images in the folder glut/textures-rgb. The small library for loading them into textures is glut/textures-rgb/readrgb.c and its header file glut/textures-rgb/readrgb.h. (The library is from http://paulbourke.net/dataformats/sgirgb/.) Sample programs that use the library are glut/texture-objects-rgb.c and glut/texture-demo-rgb.c.</p>"},{"location":"cn/c4/s3/#439-\u901a\u8fc7-jogl-\u4f7f\u7528\u7eb9\u7406","title":"4.3.9 \u901a\u8fc7 JOGL \u4f7f\u7528\u7eb9\u7406","text":"<p>Using Textures with JOGL</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u7ec8\u4e8e\u8f6c\u5411\u5728 Java \u4e2d\u4f7f\u7528\u7eb9\u7406\u56fe\u50cf\u3002JOGL \u5e26\u6709\u591a\u4e2a\u7c7b\uff0c\u4f7f\u5f97\u5728 Java \u4e2d\u4f7f\u7528\u7eb9\u7406\u76f8\u5bf9\u5bb9\u6613\uff0c\u7279\u522b\u662f\u5305 com.jogamp.opengl.util.texture \u4e2d\u7684 Texture \u548c TextureIO \u7c7b\uff0c\u4ee5\u53ca\u5305 com.jogamp.opengl.util.texture.awt \u4e2d\u7684 AWTTextureIO \u7c7b\u3002\u6709\u5173\u4f7f\u7528 JOGL \u7eb9\u7406\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1\u793a\u4f8b\u7a0b\u5e8f jogl/TextureDemo.java\u3002</p> <p>\u4e00\u4e2a Texture \u7c7b\u578b\u7684\u5bf9\u8c61\u4ee3\u8868\u4e00\u4e2a\u5df2\u7ecf\u88ab\u52a0\u8f7d\u5230 OpenGL \u4e2d\u7684\u7eb9\u7406\u3002\u5728\u5185\u90e8\uff0c\u5b83\u4f7f\u7528\u4e00\u4e2a\u7eb9\u7406\u5bf9\u8c61\u6765\u5b58\u50a8\u7eb9\u7406\u53ca\u5176\u914d\u7f6e\u6570\u636e\u3002\u5982\u679c tex \u662f\u4e00\u4e2a Texture \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528</p> <pre><code>tex.bind(gl);\n</code></pre> <p>\u5728\u6e32\u67d3\u5bf9\u8c61\u65f6\u4f7f\u7528\u7eb9\u7406\u56fe\u50cf\u3002\u53c2\u6570 gl \u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u8868\u793a OpenGL \u7ed8\u56fe\u4e0a\u4e0b\u6587\u7684 GL2 \u7c7b\u578b\u7684\u53d8\u91cf\u3002\u8fd9\u4e2a\u51fd\u6570\u7b49\u4ef7\u4e8e\u8c03\u7528 OpenGL \u7eb9\u7406\u5bf9\u8c61\u7684 glBindTexture\u3002\u4f60\u4ecd\u7136\u9700\u8981\u901a\u8fc7\u8c03\u7528 gl.glEnable(GL2.GL_TEXTURE_2D) \u6216\u7b49\u4ef7\u5730\uff0c</p> <pre><code>tex.enable(gl);\n</code></pre> <p>\u6765\u542f\u7528 GL_TEXTURE_2D\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u7167\u901a\u5e38\u7684\u65b9\u5f0f\u8bbe\u7f6e\u7eb9\u7406\u53c2\u6570\uff0c\u901a\u8fc7\u5728\u7ed1\u5b9a\u7eb9\u7406\u65f6\u8c03\u7528 gl.glTexParameteri()\uff0c\u4f46\u6700\u597d\u4f7f\u7528 Texture \u7c7b\u4e2d\u7684\u65b9\u6cd5\u6765\u8bbe\u7f6e\u53c2\u6570\uff1a</p> <pre><code>tex.setTexParameteri(gl, parameterName, value);\n</code></pre> <p>\u8fd9\u5c06\u5728\u8bbe\u7f6e\u7eb9\u7406\u53c2\u6570\u4e4b\u524d\u81ea\u52a8\u7ed1\u5b9a\u7eb9\u7406\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c</p> <pre><code>tex.setTexParameteri(gl, GL2.GL_TEXTURE_MIN_FILTER, GL2.LINEAR_MIPMAP_LINEAR);\n</code></pre> <p>\u6240\u4ee5\uff0c\u4e00\u65e6\u4f60\u6709\u4e86 Texture\uff0c\u4f7f\u7528\u8d77\u6765\u5c31\u76f8\u5f53\u5bb9\u6613\u4e86\u3002\u4f46\u4ecd\u7136\u5b58\u5728\u521b\u5efa Texture \u5bf9\u8c61\u7684\u95ee\u9898\u3002\u4e3a\u6b64\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 TextureIO \u548c AWTTextureIO \u7c7b\u4e2d\u7684\u9759\u6001\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5982\u679c fileName \u662f\u4e00\u4e2a\u56fe\u50cf\u6587\u4ef6\uff08\u6216\u6307\u5411\u8be5\u6587\u4ef6\u7684\u8def\u5f84\uff09\u7684\u540d\u79f0\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u8fd9\u6837\u8bf4</p> <pre><code>tex = TextureIO.newTexture(new File(fileName), true);\n</code></pre> <p>\u5c06\u6587\u4ef6\u4e2d\u7684\u7eb9\u7406\u52a0\u8f7d\u5230 Texture \u5bf9\u8c61 tex \u4e2d\u3002\u8fd9\u91cc\u7684 boolean \u53c2\u6570\uff0c\u4ee5\u53ca\u6211\u4eec\u5c06\u8981\u67e5\u770b\u7684\u6240\u6709\u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\uff0c\u544a\u8bc9 JOGL \u662f\u5426\u4e3a\u7eb9\u7406\u521b\u5efa mipmaps\uff1b\u901a\u8fc7\u4f20\u9012 true\uff0c\u6211\u4eec\u81ea\u52a8\u83b7\u5f97\u4e00\u7ec4\u5b8c\u6574\u7684 mipmaps\uff01</p> <p>\u4e00\u4e2a\u91cd\u8981\u7684\u6ce8\u610f\u4e8b\u9879\uff1aJava \u7684\u7eb9\u7406\u521b\u5efa\u51fd\u6570\u53ea\u6709\u5728 OpenGL \u4e0a\u4e0b\u6587\u662f\u201c\u5f53\u524d\u7684\u201d\u65f6\u624d\u4f1a\u5de5\u4f5c\u3002\u8fd9\u5c06\u5728 GLEventListener \u7684\u4e8b\u4ef6\u5904\u7406\u65b9\u6cd5\u4e2d\u6210\u7acb\uff0c\u5305\u62ec init() \u548c display() \u65b9\u6cd5\u3002\u7136\u800c\uff0c\u5728\u666e\u901a\u65b9\u6cd5\u548c\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u8fd9\u5c06\u4e0d\u6210\u7acb\u3002</p> <p>\u5f53\u7136\uff0c\u5728 Java \u4e2d\uff0c\u4f60\u66f4\u6709\u53ef\u80fd\u5c06\u56fe\u50cf\u4f5c\u4e3a\u7a0b\u5e8f\u4e2d\u7684\u8d44\u6e90\u5b58\u50a8\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u3002\u5982\u679c resourceName \u662f\u6307\u5411\u56fe\u50cf\u8d44\u6e90\u7684\u8def\u5f84\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528</p> <pre><code>URL textureURL;\ntextureURL = getClass().getClassLoader().getResource(resourceName);\ntexture = TextureIO.newTexture(textureURL, true, null);\n</code></pre> <p>\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230\u7eb9\u7406\u4e2d\u3002</p> <p>\u8fd9\u4e2a\u7248\u672c\u7684 newTexture \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86\u56fe\u50cf\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u540e\u7f00\u5982 \"png\" \u6216 \"jpg\" \u7684\u5b57\u7b26\u4e32\u7ed9\u51fa\uff1bnull \u503c\u544a\u8bc9 OpenGL \u81ea\u52a8\u68c0\u6d4b\u56fe\u50cf\u7c7b\u578b\uff0c\u8fd9\u901a\u5e38\u5e94\u8be5\u53ef\u4ee5\u5de5\u4f5c\u3002\uff08\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u6211\u5728\u8fd9\u91cc\u8ba8\u8bba\u7684\u6240\u6709\u7eb9\u7406\u52a0\u8f7d\u4ee3\u7801\u90fd\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\uff0c\u4f60\u5fc5\u987b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6355\u83b7\u6216\u5904\u7406\u5b83\u4eec\u3002\uff09</p> <p>\u6240\u6709\u8fd9\u4e9b\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u52a0\u8f7d\u7684\u7eb9\u7406\u5c06\u4f1a\u662f\u4e0a\u4e0b\u98a0\u5012\u7684\uff01\u8fd9\u662f\u56e0\u4e3a Java \u4ece\u56fe\u50cf\u7684\u9876\u884c\u5b58\u50a8\u56fe\u50cf\u6570\u636e\u5230\u5e95\u90e8\uff0c\u800c OpenGL \u671f\u671b\u56fe\u50cf\u6570\u636e\u4ece\u5e95\u884c\u5f00\u59cb\u5b58\u50a8\u3002\u5982\u679c\u8fd9\u5bf9\u4f60\u6709\u5f71\u54cd\uff0c\u4f60\u53ef\u4ee5\u5728\u521b\u5efa\u7eb9\u7406\u4e4b\u524d\u7ffb\u8f6c\u56fe\u50cf\u3002\u4e3a\u6b64\uff0c\u4f60\u5fc5\u987b\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230 BufferedImage \u4e2d\uff0c\u7136\u540e\u4f7f\u7528 AWTTextureIO \u7c7b\u5c06\u5176\u52a0\u8f7d\u5230\u7eb9\u7406\u4e2d\u3002\u4f8b\u5982\uff0c\u5047\u8bbe resourceName \u662f\u7a0b\u5e8f\u4e2d\u56fe\u50cf\u8d44\u6e90\u7684\u8def\u5f84\uff1a</p> <pre><code>URL textureURL;\ntextureURL = getClass().getClassLoader().getResource(resourceName);\nBufferedImage img = ImageIO.read(textureURL);\nImageUtil.flipImageVertically(img);\ntexture = AWTTextureIO.newTexture(GLProfile.getDefault(), img, true);\n</code></pre> <p>ImageUtil \u7c7b\u5728\u5305 com.jogamp.opengl.util.awt \u4e2d\u5b9a\u4e49\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u901a\u8fc7\u4ece\u8d44\u6e90\u4e2d\u8bfb\u53d6\u6765\u83b7\u53d6\u4e00\u4e2a BufferedImage\u3002\u4f60\u4e5f\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5b83\u2014\u2014\u751a\u81f3\u4f7f\u7528 Java 2D \u56fe\u5f62\u7ed8\u5236\u5b83\u3002</p> <p>We turn finally to using texture images in Java. JOGL comes with several classes that make it fairly easy to use textures in Java, notably the classes Texture and TextureIO in package com.jogamp.opengl.util.texture and AWTTextureIO in package com.jogamp.opengl.util.texture.awt. For an example of using textures with JOGL, see the sample program jogl/TextureDemo.java.</p> <p>An object of type Texture represents a texture that has already been loaded into OpenGL. Internally, it uses a texture object to store the texture and its configuration data. If tex is an object of type Texture, you can call</p> <pre><code>tex.bind(gl);\n</code></pre> <p>to use the texture image while rendering objects. The parameter, gl, as usual, is a variable of type GL2 the represents the OpenGL drawing context. This function is equivalent to calling glBindTexture for the OpenGL texture object that is used by the Java Texture. You still need to enable GL_TEXTURE_2D by calling gl.glEnable(GL2.GL_TEXTURE_2D) or, equivalently,</p> <pre><code>tex.enable(gl);\n</code></pre> <p>You can set texture parameters in the usual way, by calling gl.glTexParameteri() while the texture is bound, but it is preferable to use a method from the Texture class to set the parameters:</p> <pre><code>tex.setTexParameteri( gl, parameterName, value );\n</code></pre> <p>This will automatically bind the texture object before setting the texture parameter. For example,</p> <pre><code>tex.setTexParameteri(gl, GL2.GL_TEXTURE_MIN_FILTER, GL2.LINEAR_MIPMAP_LINEAR);\n</code></pre> <p>So, once you have a Texture, it's pretty easy to use. But there remains the problem of creating Texture objects. For that, you can use static methods in the TextureIO and AWTTextureIO classes. For example, if fileName is the name of an image file (or a path to such a file), then you can say</p> <pre><code>tex = TextureIO.newTexture( new File(fileName), true );\n</code></pre> <p>to load a texture from the file into a Texture object, tex. The boolean parameter here, and in all the methods we will look at, tells JOGL whether or not to create mipmaps for the texture; by passing true, we automatically get a full set of mipmaps!</p> <p>One important note: Java's texture creation functions will only work when an OpenGL context is \"current.\" This will be true in the event-handling methods of a GLEventListener, including the init() and display() methods. However, it will not be true in ordinary methods and constructors.</p> <p>Of course, in Java, you are more likely to store the image as a resource in the program than as a separate file. If resourceName is a path to the image resource, you can load the image into a texture with</p> <pre><code>URL textureURL;\ntextureURL = getClass().getClassLoader().getResource( resourceName );\ntexture = TextureIO.newTexture(textureURL, true, null);\n</code></pre> <p>The third parameter to this version of newTexture specifies the image type and can be given as a string containing a file suffix such as \"png\" or \"jpg\"; the value null tells OpenGL to autodetect the image type, which should work in general. (By the way, all the texture-loading code that I discuss here can throw exceptions, which you will have to catch or otherwise handle in some way.)</p> <p>One problem with all this is that textures loaded in this way will be upside down! This happens because Java stores image data from the top row of the image to the bottom, whereas OpenGL expects image data to be stored starting with the bottom row. If this is a problem for you, you can flip the image before using it to create a texture. To do that, you have to load the image into a BufferedImage and then load that into a texture using the AWTTextureIO class. For example, assuming resourceName is a path to an image resource in the program:</p> <pre><code>URL textureURL;\ntextureURL = getClass().getClassLoader().getResource( resourceName );\nBufferedImage img = ImageIO.read( textureURL );\nImageUtil.flipImageVertically( img );\ntexture = AWTTextureIO.newTexture(GLProfile.getDefault(), img, true);\n</code></pre> <p>The ImageUtil class is defined in package com.jogamp.opengl.util.awt. Here, I obtained a BufferedImage by reading it from a resource. You could also read it from a file\u2014or even draw it using Java 2D graphics.</p>"},{"location":"cn/c4/s4/","title":"4.4 \u706f\u5149\u3001\u76f8\u673a\u3001\u52a8\u4f5c","text":"<p>\u706f\u5149\uff0c\u6444\u5f71\u673a\uff0c\u5f00\u62cd</p> \u4e2d\u6587\u82f1\u6587 <p>\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u7684\u4e00\u4e2a\u573a\u666f\u53ef\u80fd\u662f\u4e00\u4e2a\u590d\u6742\u7684\u5bf9\u8c61\u96c6\u5408\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u7684\u5c5e\u6027\u3002\u5728\u5c0f\u82822.4.2\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5982\u4f55\u4f7f\u7528\u573a\u666f\u56fe\u6765\u7ec4\u7ec72D\u573a\u666f\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002\u6e32\u67d3\u4e00\u4e2a\u573a\u666f\u610f\u5473\u7740\u904d\u5386\u573a\u666f\u56fe\uff0c\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u6e32\u67d3\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\u3002\u5bf9\u4e8e3D\u56fe\u5f62\uff0c\u573a\u666f\u56fe\u5fc5\u987b\u5904\u7406\u66f4\u591a\u79cd\u7c7b\u7684\u5bf9\u8c61\u3001\u5c5e\u6027\u548c\u53d8\u6362\u3002\u4f8b\u5982\uff0c\u901a\u5e38\u5c06\u706f\u5149\u548c\u6444\u50cf\u673a\u89c6\u4e3a\u5bf9\u8c61\uff0c\u5e76\u80fd\u591f\u5c06\u5b83\u4eec\u5305\u542b\u5728\u573a\u666f\u56fe\u4e2d\u662f\u6709\u7528\u7684\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u8003\u86513D\u4e2d\u7684\u573a\u666f\u56fe\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u6444\u50cf\u673a\u548c\u706f\u5149\u4f5c\u4e3a\u5bf9\u8c61\u5904\u7406\u3002</p> <p>\u5728\u8bbe\u8ba1\u573a\u666f\u56fe\u65f6\uff0c\u6709\u5f88\u591a\u9009\u9879\u9700\u8981\u8003\u8651\u3002\u4f8b\u5982\uff0c\u53d8\u6362\u5e94\u8be5\u662f\u5bf9\u8c61\u8282\u70b9\u7684\u5c5e\u6027\uff0c\u8fd8\u662f\u5e94\u8be5\u6709\u5355\u72ec\u7684\u8282\u70b9\u6765\u8868\u793a\u53d8\u6362\uff1f\u5173\u4e8e\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u63d0\u51fa\u540c\u6837\u7684\u95ee\u9898\u3002\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5c5e\u6027\u503c\u5e94\u8be5\u53ea\u9002\u7528\u4e8e\u5b83\u662f\u5c5e\u6027\u7684\u8282\u70b9\uff0c\u8fd8\u662f\u5e94\u8be5\u7531\u8be5\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7ee7\u627f\uff1f</p> <p>\u4e00\u4e2a\u57fa\u672c\u7684\u9009\u62e9\u662f\u56fe\u7684\u5f62\u72b6\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u573a\u666f\u56fe\u53ef\u4ee5\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6216\u8005\u79f0\u4e3a\u201cdag\u201d\uff0c\u5b83\u662f\u4e00\u79cd\u7c7b\u4f3c\u6811\u7684\u7ed3\u6784\uff0c\u53ea\u4e0d\u8fc7\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u6709\u591a\u4e2a\u7236\u8282\u70b9\u3002\u5c0f\u82822.4.2\u4e2d\u7684\u573a\u666f\u56fe\u662fdag\u3002\u8fd9\u7684\u4f18\u70b9\u662f\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u8868\u793a\u573a\u666f\u4e2d\u7684\u591a\u4e2a\u5bf9\u8c61\uff0c\u56e0\u4e3a\u5728dag\u4e2d\uff0c\u8282\u70b9\u53ef\u4ee5\u5728\u904d\u5386\u56fe\u65f6\u88ab\u9047\u5230\u591a\u6b21\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u7528\u4e00\u4e2a\u573a\u666f\u56fe\u8282\u70b9\u8868\u793a\u591a\u4e2a\u5bf9\u8c61\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f3a\u4e4f\u7075\u6d3b\u6027\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5bf9\u8c61\u5c06\u5177\u6709\u8282\u70b9\u4e2d\u7f16\u7801\u7684\u4efb\u4f55\u5c5e\u6027\u7684\u76f8\u540c\u503c\u3002\u6240\u4ee5\uff0c\u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u573a\u666f\u56fe\u88ab\u8981\u6c42\u662f\u6811\u3002\u5728\u6811\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u7236\u8282\u70b9\uff0c\u5e76\u4e14\u8282\u70b9\u5728\u904d\u5386\u6811\u65f6\u53ea\u4f1a\u88ab\u9047\u5230\u4e00\u6b21\u3002\u6811\u548cdag\u4e4b\u95f4\u7684\u533a\u522b\u5c06\u5728\u6211\u4eec\u8ba8\u8bba\u573a\u666f\u56fe\u4e2d\u7684\u6444\u50cf\u673a\u8282\u70b9\u65f6\u663e\u73b0\u51fa\u6765\u3002</p> <p>A scene in computer graphics can be a complex collection of objects, each with its own attributes. In Subsection 2.4.2, we saw how a scene graph can be used to organize all the objects in a 2D scene. Rendering a scene means traversing the scene graph, rendering each object in the graph as it is encountered. For 3D graphics, scene graphs must deal with a larger variety of objects, attributes, and transforms. For example, it is often useful to consider lights and cameras to be objects and to be able to include them in scene graphs. In this section, we consider scene graphs in 3D, and how to treat cameras and lights as objects.</p> <p>When designing scene graphs, there are many options to consider. For example, should transforms be properties of object nodes, or should there be separate nodes to represent transforms? The same question can be asked about attributes. Another question is whether an attribute value should apply only to the node of which it is a property, or should it be inherited by the children of that node?</p> <p>A fundamental choice is the shape of the graph. In general, a scene graph can be a directed acyclic graph, or \"dag,\" which is a tree-like structure except that a node can have several parents in the graph. The scene graphs in Subsection 2.4.2 were dags. This has the advantage that a single node in the graph can represent several objects in the scene, since in a dag, a node can be encountered several times as the graph is traversed. On the other hand, representing several objects with one scene graph node can lead to a lack of flexibility, since those objects will all have the same value for any property encoded in the node. So, in some applications, scene graphs are required to be trees. In a tree, each node has a unique parent, and the node will be encountered only once as the tree in traversed. The distinction between trees and dags will show up when we discuss camera nodes in scene graphs.</p>"},{"location":"cn/c4/s4/#441-\u5c5e\u6027\u6808","title":"4.4.1 \u5c5e\u6027\u6808","text":"<p>Attribute Stack</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u51fd\u6570 glPushMatrix \u548c glPopMatrix \u5982\u4f55\u88ab\u7528\u6765\u64cd\u4f5c\u53d8\u6362\u5806\u6808\u3002\u5f53\u5728\u904d\u5386\u573a\u666f\u56fe\u65f6\u9047\u5230\u5305\u542b\u53d8\u6362\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u5728\u5e94\u7528\u53d8\u6362\u4e4b\u524d\u8c03\u7528 glPushMatrix\u3002\u7136\u540e\uff0c\u5728\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u88ab\u6e32\u67d3\u540e\uff0c\u8c03\u7528 glPopMatrix \u6765\u6062\u590d\u4e4b\u524d\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u3002</p> <p>\u5982\u679c\u5047\u8bbe\u573a\u666f\u56fe\u4e2d\u8282\u70b9\u7684\u5c5e\u6027\u503c\u5e94\u8be5\u4f5c\u4e3a\u8be5\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u88ab\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7ee7\u627f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u989c\u8272\u548c\u6750\u8d28\u7b49\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u505a\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002OpenGL 1.1 \u7ef4\u62a4\u4e86\u4e00\u4e2a\u5c5e\u6027\u5806\u6808\uff0c\u4f7f\u7528\u51fd\u6570 glPushAttrib \u548c glPopAttrib \u8fdb\u884c\u64cd\u4f5c\u3002\u9664\u4e86\u5bf9\u8c61\u5c5e\u6027\u5982\u5f53\u524d\u989c\u8272\u5916\uff0c\u5c5e\u6027\u5806\u6808\u8fd8\u53ef\u4ee5\u5b58\u50a8\u5168\u5c40\u5c5e\u6027\uff0c\u5982\u5168\u5c40\u73af\u5883\u5149\u989c\u8272\u548c\u6df1\u5ea6\u6d4b\u8bd5\u7684\u542f\u7528\u72b6\u6001\u3002\u7531\u4e8e\u53ef\u80fd\u7684\u5c5e\u6027\u975e\u5e38\u591a\uff0cglPushAttrib \u5e76\u4e0d\u662f\u7b80\u5355\u5730\u4fdd\u5b58\u6bcf\u4e2a\u5c5e\u6027\u7684\u503c\u3002\u76f8\u53cd\uff0c\u5b83\u53ea\u4fdd\u5b58\u53ef\u80fd\u5c5e\u6027\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u8981\u4fdd\u5b58\u7684\u5b50\u96c6\u662f\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u6307\u5b9a\u7684\u3002\u4f8b\u5982\uff0c\u547d\u4ee4</p> <pre><code>glPushAttrib(GL_ENABLED_BIT);\n</code></pre> <p>\u5c06\u4fdd\u5b58\u6bcf\u4e2a\u53ef\u4ee5\u542f\u7528\u6216\u7981\u7528\u7684 OpenGL \u72b6\u6001\u53d8\u91cf\u7684\u526f\u672c\u3002\u8fd9\u5305\u62ec GL_DEPTH_TEST\u3001GL_LIGHTING\u3001GL_NORMALIZE \u7b49\u7684\u5f53\u524d\u72b6\u6001\u3002\u7c7b\u4f3c\u5730\uff0c</p> <pre><code>glPushAttrib(GL_CURRENT_BIT);\n</code></pre> <p>\u4fdd\u5b58\u5f53\u524d\u989c\u8272\u3001\u6cd5\u5411\u91cf\u548c\u7eb9\u7406\u5750\u6807\u7684\u526f\u672c\u3002\u800c</p> <pre><code>glPushAttrib(GL_LIGHTING_BIT);\n</code></pre> <p>\u4fdd\u5b58\u4e0e\u7167\u660e\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u5982\u6750\u8d28\u5c5e\u6027\u548c\u706f\u5149\u5c5e\u6027\u7684\u503c\u3001\u5168\u5c40\u73af\u5883\u5149\u989c\u8272\u3001\u989c\u8272\u6750\u8d28\u8bbe\u7f6e\uff0c\u4ee5\u53ca\u7167\u660e\u548c\u6bcf\u4e2a\u5355\u72ec\u706f\u5149\u7684\u542f\u7528\u72b6\u6001\u3002\u5176\u4ed6\u5e38\u91cf\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u5176\u4ed6\u5c5e\u6027\u96c6\uff1b\u8be6\u60c5\u8bf7\u53c2\u9605 OpenGL \u6587\u6863\u3002\u53ef\u4ee5\u5c06\u51e0\u4e2a\u5e38\u91cf\u8fdb\u884c OR \u8fd0\u7b97\u6765\u7ec4\u5408\u5c5e\u6027\u96c6\u3002\u4f8b\u5982\uff0c</p> <pre><code>glPushAttrib(GL_LIGHTING_BIT | GL_ENABLED_BIT)\n</code></pre> <p>\u5c06\u4fdd\u5b58 GL_LIGHTING_BIT \u96c6\u548c GL_ENABLED_BIT \u96c6\u4e2d\u7684\u5c5e\u6027\u3002</p> <p>\u8c03\u7528 glPopAttrib() \u5c06\u6062\u590d\u7531\u76f8\u5e94\u8c03\u7528 glPushAttrib \u4fdd\u5b58\u7684\u6240\u6709\u503c\u3002glPopAttrib \u4e0d\u9700\u8981\u53c2\u6570\uff0c\u56e0\u4e3a\u8981\u6062\u590d\u7684\u5c5e\u6027\u96c6\u7531\u4f20\u9012\u7ed9 glPushAttrib \u7684\u53c2\u6570\u51b3\u5b9a\u3002</p> <p>\u5f88\u5bb9\u6613\u770b\u51fa\u5982\u4f55\u5728\u904d\u5386\u573a\u666f\u56fe\u65f6\u4f7f\u7528 glPushAttrib \u548c glPopAttrib\uff1a\u5728\u5904\u7406\u8282\u70b9\u65f6\uff0c\u5728\u66f4\u6539\u5c5e\u6027\u503c\u4e4b\u524d\uff0c\u8c03\u7528 glPushAttrib \u4fdd\u5b58\u76f8\u5173\u5c5e\u6027\u96c6\u6216\u591a\u7ec4\u5c5e\u6027\u96c6\u7684\u526f\u672c\u3002\u6e32\u67d3\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u3002\u7136\u540e\u8c03\u7528 glPopAttrib \u6765\u6062\u590d\u4fdd\u5b58\u7684\u503c\u3002\u8fd9\u9650\u5236\u4e86\u66f4\u6539\u7684\u6548\u679c\uff0c\u4f7f\u5b83\u4eec\u53ea\u9002\u7528\u4e8e\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u3002</p> <p>\u6709\u53e6\u4e00\u79cd\u4fdd\u5b58\u548c\u6062\u590d\u503c\u7684\u65b9\u6cd5\u3002OpenGL \u6709\u591a\u79cd \"get\" \u51fd\u6570\u6765\u8bfb\u53d6\u5404\u79cd\u72b6\u6001\u53d8\u91cf\u7684\u503c\u3002\u6211\u8fd9\u91cc\u53ea\u8ba8\u8bba\u5176\u4e2d\u7684\u4e00\u4e9b\u3002\u4f8b\u5982\uff0c</p> <pre><code>glGetFloatv(GL_CURRENT_COLOR, floatArray);\n</code></pre> <p>\u68c0\u7d22\u7531 glColor \u8bbe\u7f6e\u7684\u5f53\u524d\u989c\u8272\u503c\u3002floatArray \u53c2\u6570\u5e94\u8be5\u662f\u81f3\u5c11\u957f\u5ea6\u4e3a\u56db\u7684 float \u6570\u7ec4\u3002\u5f53\u524d\u989c\u8272\u7684 RGBA \u989c\u8272\u5206\u91cf\u5c06\u88ab\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\u3002\u6ce8\u610f\uff0c\u7a0d\u540e\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u8c03\u7528 glColor4fv(colorArray)* \u6765\u6062\u590d\u989c\u8272\u3002\u76f8\u540c\u7684\u51fd\u6570\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u8bfb\u53d6\u4e0d\u540c\u6d6e\u70b9\u72b6\u6001\u53d8\u91cf\u7684\u503c\u3002\u8981\u627e\u5230\u5f53\u524d\u89c6\u53e3\u7684\u503c\uff0c\u8bf7\u4f7f\u7528</p> <pre><code>glGetIntegerv(GL_VIEWPORT, intArray);\n</code></pre> <p>\u8fd9\u5c06\u8bbe\u7f6e intArray[0] \u548c intArray[1] \u4e3a\u5f53\u524d\u89c6\u53e3\u5de6\u4e0b\u89d2\u7684 x \u548c y \u5750\u6807\uff0cintArray[2] \u4e3a\u5176\u5bbd\u5ea6\uff0cintArray[3] \u4e3a\u5176\u9ad8\u5ea6\u3002\u8981\u8bfb\u53d6\u6750\u8d28\u5c5e\u6027\u7684\u5f53\u524d\u503c\uff0c\u8bf7\u4f7f\u7528</p> <pre><code>glGetMaterialfv(face, property, floatArray);\n</code></pre> <p>face \u5fc5\u987b\u662f GL_FRONT \u6216 GL_BACK\u3002\u5c5e\u6027\u5fc5\u987b\u662f GL_AMBIENT\u3001GL_DIFFUSE\u3001GL_SPECULAR\u3001GL_EMISSION \u6216 GL_SHININESS\u3002\u5c5e\u6027\u7684\u5f53\u524d\u503c\u5c06\u88ab\u5b58\u50a8\u5728 floatArray \u4e2d\uff0c\u5bf9\u4e8e\u989c\u8272\u5c5e\u6027\uff0c\u5b83\u5fc5\u987b\u81f3\u5c11\u957f\u5ea6\u4e3a\u56db\uff0c\u5bf9\u4e8e GL_SHININESS\uff0c\u81f3\u5c11\u957f\u5ea6\u4e3a\u4e00\u3002\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u547d\u4ee4\uff0cglGetLightfv\uff0c\u7528\u4e8e\u8bfb\u53d6\u706f\u5149\u5c5e\u6027\u3002</p> <p>\u6700\u540e\uff0c\u6211\u5c06\u63d0\u5230 glIsEnabled(name)\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u5982 GL_LIGHTING \u548c GL_DEPTH_TEST \u7b49\u72b6\u6001\u53d8\u91cf\u7684\u542f\u7528/\u7981\u7528\u72b6\u6001\u3002\u53c2\u6570\u5e94\u8be5\u662f\u6807\u8bc6\u72b6\u6001\u53d8\u91cf\u7684\u5e38\u91cf\u3002\u5982\u679c\u72b6\u6001\u53d8\u91cf\u88ab\u7981\u7528\uff0c\u51fd\u6570\u8fd4\u56de 0\uff1b\u5982\u679c\u88ab\u542f\u7528\uff0c\u8fd4\u56de 1\u3002\u4f8b\u5982\uff0cglIsEnabled(GL_LIGHTING) \u6d4b\u8bd5\u7167\u660e\u662f\u5426\u88ab\u542f\u7528\u3002\u5047\u8bbe\u573a\u666f\u56fe\u4e2d\u7684\u8282\u70b9\u6709\u4e00\u4e2a\u5c5e\u6027 lit \u6765\u544a\u8bc9\u662f\u5426\u5e94\u8be5\u542f\u7528\u7167\u660e\u6765\u6e32\u67d3\u8be5\u8282\u70b9\uff08\u53ca\u5176\u5b50\u8282\u70b9\uff09\u3002\u90a3\u4e48\u6e32\u67d3\u8282\u70b9\u7684\u4ee3\u7801\u53ef\u80fd\u5305\u62ec\u7c7b\u4f3c\u8fd9\u6837\u7684\u4e1c\u897f\uff1a</p> <pre><code>int saveLit = glIsEnabled(GL_LIGHTING);\nif (lit)\n    glEnable(GL_LIGHTING);\nelse\n    glDisable(GL_LIGHTING);\n.\n.  // \u6e32\u67d3\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\n.\nif (saveLit)\n    glEnable(GL_LIGHTING);\nelse\n    glDisable(GL_LIGHTING);\n</code></pre> <p>\u7531\u4e8e glPushAttrib \u53ef\u4ee5\u7528\u6765\u63a8\u9001\u5927\u7ec4\u5c5e\u6027\u503c\uff0c\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u4f7f\u7528 glIsEnabled \u548c glGet* \u547d\u4ee4\u65cf\u6765\u8bfb\u53d6\u4f60\u8ba1\u5212\u4fee\u6539\u7684\u72b6\u6001\u53d8\u91cf\u7684\u503c\u4f1a\u66f4\u6709\u6548\u3002\u7136\u800c\uff0c\u8bf7\u8bb0\u4f4f\uff0cOpenGL \u53ef\u4ee5\u5c06\u4e00\u7cfb\u5217\u547d\u4ee4\u6392\u961f\u5230\u6279\u5904\u7406\u4e2d\uff0c\u53d1\u9001\u5230\u663e\u5361\uff0c\u5e76\u4e14\u8fd9\u4e9b\u547d\u4ee4\u53ef\u4ee5\u7531 GPU \u5728\u4f60\u7684\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\u7684\u540c\u65f6\u6267\u884c\u3002glGet \u547d\u4ee4\u53ef\u80fd\u9700\u8981\u4f60\u7684\u7a0b\u5e8f\u4e0e\u663e\u5361\u901a\u4fe1\u5e76\u7b49\u5f85\u54cd\u5e94\u3002\u8fd9\u610f\u5473\u7740\u4efb\u4f55\u5f85\u5904\u7406\u7684 OpenGL \u547d\u4ee4\u90fd\u5fc5\u987b\u53d1\u9001\u5230\u663e\u5361\u5e76\u6267\u884c\u540e\uff0cglGet \u547d\u4ee4\u624d\u80fd\u5b8c\u6210\u3002\u8fd9\u662f\u53ef\u80fd\u5f71\u54cd\u6027\u80fd\u7684\u4e8b\u60c5\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cglPushAttrib \u548c glPopAttrib \u7684\u8c03\u7528\u53ef\u4ee5\u4e0e\u5176\u4ed6 OpenGL \u547d\u4ee4\u4e00\u8d77\u6392\u961f\uff0c\u5e76\u4ee5\u6279\u5904\u7406\u7684\u65b9\u5f0f\u53d1\u9001\u5230\u663e\u5361\uff0c\u7531\u56fe\u5f62\u786c\u4ef6\u9ad8\u6548\u6267\u884c\u3002\u5b9e\u9645\u4e0a\uff0c\u5f53\u4f60\u53ef\u80fd\u7684\u65f6\u5019\uff0c\u901a\u5e38\u6700\u597d\u4f18\u5148\u4f7f\u7528 glPushAttrib/glPopAttrib \u800c\u4e0d\u662f glGet \u547d\u4ee4\u3002</p> <p>We have seen how the functions glPushMatrix and glPopMatrix are used to manipulate the transform stack. These functions are useful when traversing a scene graph: When a node that contains a transform is encountered during a traversal of the graph, glPushMatrix can be called before applying the transform. Then, after the node and its descendants have been rendered, glPopMatrix is called to restore the previous modelview transformation.</p> <p>Something similar can be done for attributes such as color and material, if it is assumed that an attribute value in a scene graph node should be inherited as the default value of that attribute for children of the node. OpenGL 1.1 maintains an attribute stack, which is manipulated using the functions glPushAttrib and glPopAttrib. In addition to object attributes like the current color, the attribute stack can store global attributes like the global ambient color and the enabled state of the depth test. Since there are so many possible attributes, glPushAttrib does not simply save the value of every attribute. Instead, it saves a subset of the possible attributes. The subset that is to be saved is specified as a parameter to the function. For example, the command</p> <pre><code>glPushAttrib(GL_ENABLED_BIT);\n</code></pre> <p>will save a copy of each of the OpenGL state variables that can be enabled or disabled. This includes the current state of GL_DEPTH_TEST, GL_LIGHTING, GL_NORMALIZE, and others. Similarly,</p> <pre><code>glPushAttrib(GL_CURRENT_BIT);\n</code></pre> <p>saves a copy of the current color, normal vector, and texture coordinates. And</p> <pre><code>glPushAttrib(GL_LIGHTING_BIT);\n</code></pre> <p>saves attributes relevant to lighting such as the values of material properties and light properties, the global ambient color, color material settings, and the enabled state for lighting and each of the individual lights. Other constants can be used to save other sets of attributes; see the OpenGL documentation for details. It is possible to OR together several constants to combine sets of attributes. For example,</p> <pre><code>glPushAttrib(GL_LIGHTING_BIT | GL_ENABLED_BIT)\n</code></pre> <p>will save the attributes in both the GL_LIGHTING_BIT set and in the GL_ENABLED_BIT set.</p> <p>Calling glPopAttrib() will restore all the values that were saved by the corresponding call to glPushAttrib. There is no need for a parameter to glPopAttrib, since the set of attributes that are restored is determined by the parameter that was passed to glPushAttrib.</p> <p>It should be easy to see how glPushAttrib and glPopAttrib can be used while traversing a scene graph: When processing a node, before changing attribute values, call glPushAttrib to save a copy of the relevant set or sets of attributes. Render the node and its descendants. Then call glPopAttrib to restore the saved values. This limits the effect of the changes so that they apply only to the node and its descendants.</p> <p>There is an alternative way to save and restore values. OpenGL has a variety of \"get\" functions for reading the values of various state variables. I will discuss just some of them here. For example,</p> <pre><code>glGetFloatv( GL_CURRENT_COLOR, floatArray );\n</code></pre> <p>retrieves the current color value, as set by glColor*. The floatArray parameter should be an array of float, whose length is at least four. The RGBA color components of the current color will be stored in the array. Note that, later, you can simply call glColor4fv(colorArray) to restore the color. The same function can be used with different first parameters to read the values of different floating-point state variables. To find the current value of the viewport, use</p> <pre><code>glGetIntegerv( GL_VIEWPORT, intArray );\n</code></pre> <p>This will set intArray[0] and intArray[1] to be the x and y coordinates of the lower left corner of the current viewport, intArray[2] to be its width, and intArray[3] to be its height. To read the current values of material properties, use</p> <pre><code>glGetMaterialfv( face, property, floatArray );\n</code></pre> <p>The face must be GL_FRONT or GL_BACK. The property must be GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, or GL_SHININESS. The current value of the property will be stored in floatArray, which must be of length at least four for the color properties, or length at least one for GL_SHININESS. There is a similar command, glGetLightfv, for reading properties of lights.</p> <p>Finally, I will mention glIsEnabled(name), which can be used to check the enabled/disabled status of state variables such as GL_LIGHTING and GL_DEPTH_TEST. The parameter should be the constant that identifies the state variable. The function returns 0 if the state variable is disabled and 1 if it is enabled. For example, glIsEnabled(GL_LIGHTING) tests whether lighting is enabled. Suppose that a node in a scene graph has an attribute lit to tell whether that node (and its descendants) should be rendered with lighting enabled. Then the code for rendering a node might include something like this:</p> <pre><code>int saveLit = glIsEnabled(GL_LIGHTING);\nif (lit)\n    glEnable(GL_LIGHTING);\nelse\n    glDisable(GL_LIGHTING);\n.\n.  // Render the node and its descendants\n.\nif (saveLit)\nglEnable(GL_LIGHTING);\nelse\nglDisable(GL_LIGHTING);\n</code></pre> <p>Since glPushAttrib can be used to push large groups of attribute values, you might think that it would be more efficient to use glIsEnabled and the glGet* family of commands to read the values of just those state variables that you are planning to modify. However, recall that OpenGL can queue a number of commands into a batch to be sent to the graphics card, and those commands can be executed by the GPU at the same time that your program continues to run. A glGet command can require your program to communicate with the graphics card and wait for the response. This means that any pending OpenGL commands will have to be sent to the graphics card and executed before the glGet command can complete. This is the kind of thing that can hurt performance. In contrast, calls to glPushAttrib and glPopAttrib can be queued with other OpenGL commands and sent to the graphics card in batches, where they can be executed efficiently by the graphics hardware. In fact, you should generally prefer using glPushAttrib/glPopAttrib instead of a glGet command when possible.</p>"},{"location":"cn/c4/s4/#442-\u79fb\u52a8\u76f8\u673a","title":"4.4.2 \u79fb\u52a8\u76f8\u673a","text":"<p>Moving Camera</p> \u4e2d\u6587\u82f1\u6587 <p>\u8ba9\u6211\u4eec\u8f6c\u5411\u5efa\u6a21\u7684\u53e6\u4e00\u4e2a\u65b9\u9762\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u5728\u4e16\u754c\u4e2d\u79fb\u52a8\u7684\u89c2\u5bdf\u8005\u3002\u6709\u65f6\uff0c\u8fd9\u6837\u7684\u89c2\u5bdf\u8005\u88ab\u89c6\u4e3a\u79fb\u52a8\u7684\u6444\u50cf\u673a\u3002\u6444\u50cf\u673a\u7528\u4e8e\u62cd\u6444\u573a\u666f\u7684\u7167\u7247\u3002\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u50cf\u5bf9\u5176\u4ed6\u5bf9\u8c61\u5e94\u7528\u53d8\u6362\u4e00\u6837\u5bf9\u6444\u50cf\u673a\u5e94\u7528\u53d8\u6362\u3002\u6444\u50cf\u673a\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\u51b3\u5b9a\u4e86\u573a\u666f\u6e32\u67d3\u65f6\u5e94\u8be5\u770b\u5230\u4ec0\u4e48\u3002\u800c\u6444\u50cf\u673a\u7684\u201c\u5927\u5c0f\u201d\uff0c\u53ef\u80fd\u4f1a\u53d7\u5230\u7f29\u653e\u53d8\u6362\u7684\u5f71\u54cd\uff0c\u51b3\u5b9a\u4e86\u5b83\u7684\u89c6\u91ce\u8303\u56f4\u3002\u4f46\u6444\u50cf\u673a\u4e0d\u4ec5\u4ec5\u662f\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u6444\u50cf\u673a\u5b9e\u9645\u4e0a\u4ee3\u8868\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u7684\u89c6\u56fe\u53d8\u6362\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5efa\u6a21\u548c\u89c6\u56fe\u53d8\u6362\u5177\u6709\u76f8\u53cd\u7684\u6548\u679c\uff1a\u4f7f\u7528\u5efa\u6a21\u53d8\u6362\u5c06\u5bf9\u8c61\u5411\u53f3\u79fb\u52a8\u7b49\u540c\u4e8e\u4f7f\u7528\u89c6\u56fe\u53d8\u6362\u5c06\u89c2\u5bdf\u8005\u5411\u5de6\u79fb\u52a8\u3002\uff08\u89c1\u5c0f\u82823.3.4\u3002\uff09\u8981\u5bf9\u6444\u50cf\u673a\u5e94\u7528\u5efa\u6a21\u53d8\u6362\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u60f3\u8981\u5bf9\u6574\u4e2a\u573a\u666f\u5e94\u7528\u89c6\u56fe\u53d8\u6362\uff0c\u800c\u8fd9\u4e2a\u89c6\u56fe\u53d8\u6362\u662f\u6444\u50cf\u673a\u5efa\u6a21\u53d8\u6362\u7684\u9006\u53d8\u6362\u3002</p> <p>\u4e0b\u9762\u7684\u63d2\u56fe\u663e\u793a\u4e86\u4ece\u79fb\u52a8\u6444\u50cf\u673a\u89c6\u89d2\u89c2\u5bdf\u7684\u573a\u666f\u3002\u6444\u50cf\u673a\u4ece\u9ed8\u8ba4\u7684\u89c6\u56fe\u4f4d\u7f6e\u5f00\u59cb\uff0c\u4f4d\u4e8e\u539f\u70b9\uff0c\u671d\u5411\u8d1f z \u8f74\u65b9\u5411\u3002\u8fd9\u76f8\u5f53\u4e8e\u4f7f\u7528\u6052\u7b49\u53d8\u6362\u4f5c\u4e3a\u89c6\u56fe\u53d8\u6362\u3002\u5728\u7b2c\u4e8c\u5f20\u56fe\u50cf\u4e2d\uff0c\u6444\u50cf\u673a\u5411\u524d\u79fb\u52a8\u4e86\u5341\u4e2a\u5355\u4f4d\u3002\u8fd9\u76f8\u5f53\u4e8e\u5bf9\u6444\u50cf\u673a\u5e94\u7528\u5efa\u6a21\u53d8\u6362 glTranslatef(0,0,\u221210)\uff08\u56e0\u4e3a\u5b83\u662f\u6cbf\u7740\u8d1f z \u65b9\u5411\u79fb\u52a8\u7684\uff09\u3002\u4f46\u662f\u8981\u5c06\u8fd9\u79cd\u79fb\u52a8\u5b9e\u73b0\u4e3a\u89c6\u56fe\u7684\u53d8\u5316\uff0c\u6211\u4eec\u60f3\u8981\u4f5c\u4e3a\u89c6\u56fe\u53d8\u6362\u5e94\u7528\u9006\u64cd\u4f5c\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u5b9e\u9645\u5e94\u7528\u7684\u89c6\u56fe\u53d8\u6362\u662f glTranslatef(0,0,10)\u3002\u5982\u679c\u4f60\u613f\u610f\uff0c\u8fd9\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5e94\u7528\u4e8e\u573a\u666f\u4e2d\u6240\u6709\u5176\u4ed6\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\uff1a\u5c06\u6444\u50cf\u673a\u671d\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8\u5341\u4e2a\u5355\u4f4d\u7b49\u540c\u4e8e\u5c06\u6240\u6709\u5176\u4ed6\u5bf9\u8c61\u671d\u76f8\u53cd\u65b9\u5411\u79fb\u52a8\u5341\u4e2a\u5355\u4f4d\u3002</p> <p></p> <p>\u5bf9\u4e8e\u7b2c\u4e09\u5f20\u56fe\u50cf\uff0c\u6444\u50cf\u673a\u5728\u5e73\u79fb\u540e\u539f\u5730\u5411\u53f3\u65cb\u8f6c\u4e86 21 \u5ea6\u2014\u2014\u56f4\u7ed5 y \u8f74\u987a\u65f6\u9488\u65cb\u8f6c 21 \u5ea6\u2014\u2014\u4e4b\u540e\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u53d8\u6362 glRotatef(21,0,1,0) \u5b9e\u73b0\u2014\u2014\u56f4\u7ed5 y \u8f74\u9006\u65f6\u9488\u65cb\u8f6c 21 \u5ea6\u2014\u2014\u5728\u5e73\u79fb\u4e4b\u524d\u5e94\u7528\u3002\u8bb0\u4f4f\uff0c\u4e00\u7cfb\u5217\u53d8\u6362\u7684\u9006\u53d8\u6362\u662f\u5b83\u4eec\u9006\u53d8\u6362\u7684\u7ec4\u5408\uff0c\u987a\u5e8f\u76f8\u53cd\u3002\u6570\u5b66\u4e0a\uff0c\u4f7f\u7528 T<sup>\u22121</sup> \u8868\u793a\u53d8\u6362 T \u7684\u9006\u53d8\u6362\uff0c\u6211\u4eec\u6709 (RS)<sup>\u22121</sup> = S<sup>\u22121</sup> R<sup>\u22121</sup> \u5bf9\u4e8e\u4e24\u4e2a\u53d8\u6362 R \u548c S\u3002</p> <p>\u63d2\u56fe\u4e2d\u7684\u56fe\u50cf\u6765\u81ea\u4e0b\u9762\u7684\u6f14\u793a\u3002\u8be5\u6f14\u793a\u5141\u8bb8\u4f60\u5728\u573a\u666f\u4e2d\u79fb\u52a8\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5b83\u5f53\u7136\u8ba9\u4f60\u6539\u53d8\u89c6\u56fe\u53d8\u6362\uff0c\u4ece\u4e0d\u540c\u7684\u89c6\u70b9\u770b\u573a\u666f\u3002</p> <p></p> <p>\u5f53\u4f7f\u7528\u573a\u666f\u56fe\u65f6\uff0c\u5c06\u6444\u50cf\u673a\u5bf9\u8c61\u5305\u542b\u5728\u56fe\u4e2d\u53ef\u80fd\u662f\u6709\u7528\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u56fe\u4e2d\u5305\u542b\u4e00\u4e2a\u4ee3\u8868\u6444\u50cf\u673a\u7684\u8282\u70b9\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4f7f\u7528\u6444\u50cf\u673a\u6765\u67e5\u770b\u573a\u666f\u3002\u751a\u81f3\u53ef\u80fd\u6709\u591a\u4e2a\u6444\u50cf\u673a\u5728\u573a\u666f\u4e2d\uff0c\u63d0\u4f9b\u4e0d\u540c\u7684\u89c6\u70b9\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u80fd\u591f\u4ece\u7ed9\u5b9a\u6444\u50cf\u673a\u7684\u89c6\u89d2\u6e32\u67d3\u573a\u666f\u3002\u6839\u636e\u524d\u9762\u7684\u8ba8\u8bba\uff0c\u6211\u4eec\u77e5\u9053\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u89c6\u56fe\u53d8\u6362\uff0c\u5b83\u662f\u5e94\u7528\u4e8e\u6444\u50cf\u673a\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\u7684\u9006\u53d8\u6362\u3002\u5728\u6e32\u67d3\u573a\u666f\u4e2d\u7684\u4efb\u4f55\u5bf9\u8c61\u4e4b\u524d\uff0c\u5fc5\u987b\u5e94\u7528\u89c6\u56fe\u53d8\u6362\u3002</p> <p>\u5f53\u904d\u5386\u573a\u666f\u56fe\u65f6\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u8282\u70b9\u5e94\u7528\u5efa\u6a21\u53d8\u6362\u3002\u5728\u9047\u5230\u7ed9\u5b9a\u8282\u70b9\u65f6\u6709\u6548\u7684\u5efa\u6a21\u53d8\u6362\u662f\u6cbf\u5230\u8fbe\u8be5\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u5e94\u7528\u7684\u6240\u6709\u53d8\u6362\u7684\u7ec4\u5408\u3002\u7136\u800c\uff0c\u5982\u679c\u8282\u70b9\u662f\u6444\u50cf\u673a\u8282\u70b9\uff0c\u6211\u4eec\u4e0d\u60f3\u5e94\u7528\u90a3\u4e2a\u5efa\u6a21\u53d8\u6362\uff1b\u6211\u4eec\u60f3\u5c06\u5176\u9006\u53d8\u6362\u4f5c\u4e3a\u89c6\u56fe\u53d8\u6362\u5e94\u7528\u3002\u8981\u83b7\u5f97\u9006\u53d8\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6444\u50cf\u673a\u8282\u70b9\u5f00\u59cb\uff0c\u5411\u540e\u6cbf\u7740\u8def\u5f84\u5e94\u7528\u6bcf\u4e2a\u8282\u70b9\u7684\u5efa\u6a21\u53d8\u6362\u7684\u9006\u53d8\u6362\u3002</p> <p></p> <p>\u8bd1\u6ce8</p> <p>\u4e00\u4e2a\u5305\u542b\u6444\u50cf\u673a\u8282\u70b9\u7684\u573a\u666f\u56fe\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6811\uff0cR\u3001S \u548c T \u4ee3\u8868\u5e94\u7528\u4e8e\u56fe\u4e2d\u8282\u70b9\u7684\u5efa\u6a21\u53d8\u6362\u3002\u5e94\u7528\u4e8e\u6444\u50cf\u673a\u7684\u5efa\u6a21\u53d8\u6362\u662f RST\u3002\u89c6\u56fe\u53d8\u6362\u662f\u9006\u53d8\u6362\uff0cT<sup>\u22121</sup> S<sup>\u22121</sup> R<sup>\u22121</sup>\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ece\u6444\u50cf\u673a\u8282\u70b9\u8ddf\u968f\u7236\u6307\u9488\u83b7\u5f97\u3002</p> <p>\u4e3a\u4e86\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u573a\u666f\u56fe\u6570\u636e\u7ed3\u6784\u6dfb\u52a0\u201c\u7236\u6307\u9488\u201d\u3002\u8282\u70b9\u7684\u7236\u6307\u9488\u662f\u6307\u5411\u56fe\u4e2d\u8be5\u8282\u70b9\u7236\u8282\u70b9\u7684\u94fe\u63a5\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u5728\u6811\u4e2d\u6709\u6548\uff1b\u5728\u6811\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u7236\u8282\u70b9\uff0c\u4f46\u5728\u4e00\u822c\u7684\u6709\u5411\u65e0\u73af\u56fe\u4e2d\u5e76\u975e\u5982\u6b64\u3002\u53ef\u4ee5\u901a\u8fc7\u8ddf\u968f\u7236\u6307\u9488\u5411\u4e0a\u79fb\u52a8\u6811\u3002</p> <p>\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u4ece\u6444\u50cf\u673a\u89c6\u89d2\u6e32\u67d3\u573a\u666f\u7684\u7b97\u6cd5\u5982\u4e0b\uff1a\u901a\u8fc7\u8c03\u7528 glLoadIdentity() \u5c06\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u8bbe\u7f6e\u4e3a\u6052\u7b49\u3002\u4ece\u6444\u50cf\u673a\u8282\u70b9\u5f00\u59cb\uff0c\u8ddf\u968f\u7236\u6307\u9488\u76f4\u5230\u5230\u8fbe\u6811\u7684\u6839\u3002\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\uff0c\u5e94\u7528\u8be5\u8282\u70b9\u4e2d\u4efb\u4f55\u5efa\u6a21\u53d8\u6362\u7684\u9006\u53d8\u6362\u3002\uff08\u4f8b\u5982\uff0c\u5982\u679c\u5efa\u6a21\u53d8\u6362\u662f\u6309 (a,b,c) \u5e73\u79fb\uff0c\u8c03\u7528 glTranslatef(\u2212a,\u2212b,\u2212c)\u3002\uff09\u5230\u8fbe\u6839\u8282\u70b9\u65f6\uff0c\u5df2\u7ecf\u5efa\u7acb\u4e86\u5bf9\u5e94\u4e8e\u6444\u50cf\u673a\u7684\u89c6\u56fe\u53d8\u6362\u3002\u73b0\u5728\uff0c\u904d\u5386\u573a\u666f\u56fe\u4ee5\u901a\u5e38\u7684\u65b9\u5f0f\u6e32\u67d3\u573a\u666f\u3002\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u5e94\u8be5\u5ffd\u7565\u6444\u50cf\u673a\u8282\u70b9\u3002</p> <p>\u6ce8\u610f\uff0c\u6444\u50cf\u673a\u53ef\u4ee5\u9644\u52a0\u5230\u5bf9\u8c61\u4e0a\uff0c\u4ece\u5efa\u6a21\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6444\u50cf\u673a\u548c\u5bf9\u8c61\u90fd\u53d7\u5230\u76f8\u540c\u7684\u5efa\u6a21\u53d8\u6362\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u4f5c\u4e3a\u4e00\u4e2a\u5355\u5143\u4e00\u8d77\u79fb\u52a8\u3002\u4f8b\u5982\uff0c\u6444\u50cf\u673a\u53ef\u80fd\u9644\u52a0\u5230\u6c7d\u8f66\u4e0a\uff0c\u4ee5\u663e\u793a\u901a\u8fc7\u6c7d\u8f66\u6321\u98ce\u73bb\u7483\u7684\u89c6\u56fe\u3002\u5982\u679c\u6c7d\u8f66\u79fb\u52a8\u4e86\uff0c\u56e0\u4e3a\u5b83\u7684\u5efa\u6a21\u53d8\u6362\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6444\u50cf\u673a\u4e5f\u4f1a\u968f\u4e4b\u79fb\u52a8\u3002</p> <p>Let's turn to another aspect of modeling. Suppose that we want to implement a viewer that can be moved around in the world like other objects. Sometimes, such a viewer is thought of as a moving camera. The camera is used to take pictures of the scene. We want to be able to apply transformations to a camera just as we apply transformations to other objects. The position and orientation of the camera determine what should be visible when the scene is rendered. And the \"size\" of the camera, which can be affected by a scaling transformation, determines how large a field of view it has. But a camera is not just another object. A camera really represents the viewing transformation that we want to use. Recall that modeling and viewing transformations have opposite effects: Moving objects to the right with a modeling transform is equivalent to moving the viewer to the left with a viewing transformation. (See Subsection 3.3.4.) To apply a modeling transformation to the camera, we really want to apply a viewing transformation to the scene as a whole, and that viewing transformation is the inverse of the camera's modeling transformation.</p> <p>The following illustration shows a scene viewed from a moving camera. The camera starts in the default viewing position, at the origin, looking in the direction of the negative z-axis. This corresponds to using the identity as the viewing transform. For the second image, the camera has moved forward by ten units. This would correspond to applying the modeling transformation glTranslatef(0,0,\u221210) to the camera (since it is moving in the negative z-direction). But to implement this movement as a change of view, we want to apply the inverse operation as a viewing transformation. So, the viewing transform that we actually apply is glTranslatef(0,0,10). This can be seen, if you like, as a modeling transformation that is applied to all the other objects in the scene: Moving the camera ten units in one direction is equivalent to moving all the other objects 10 units in the opposite direction.</p> <p></p> <p>For the third image, the camera has rotated in place by 21 degrees to the right\u2014a 21-degree clockwise rotation about the y-axis\u2014after it has been translated. This can be implemented by the transformation glRotatef(21,0,1,0)\u2014a 21-degree counterclockwise rotation about the y-axis\u2014applied before the translation. Remember that the inverse of a composition of transformations is the composition of their inverses, in the opposite order. Mathematically, using T<sup>\u22121</sup> to represent the inverse of a transformation T, we have that (RS)<sup>\u22121</sup> = S<sup>\u22121</sup>R<sup>\u22121</sup> for two transformations R and S.</p> <p>The images in the illustration are from the following demo. The demo lets you move around in a scene. More accurately, of course, it lets you change the viewing transformation to see the scene from different viewpoints.</p> <p></p> <p>When using scene graphs, it can be useful to include a camera object in the graph. That is, we want to be able to include a node in the graph that represents the camera, and we want to be able to use the camera to view the scene. It can even be useful to have several cameras in the scene, providing alternative points of view. To implement this, we need to be able to render a scene from the point of view of a given camera. From the previous discussion, we know that in order to do that, we need to use a viewing transformation that is the inverse of the modeling transformation that is applied to the camera object. The viewing transform must be applied before any of the objects in the scene are rendered.</p> <p>When a scene graph is traversed, a modeling transformation can be applied at any node. The modeling transform that is in effect when a given node is encountered is the composition of all the transforms that were applied at nodes along the path that led to given node. However, if the node is a camera node, we don't want to apply that modeling transform; we want to apply its inverse as a viewing transform. To get the inverse, we can start at the camera node and follow the path backwards, applying the inverse of the modeling transform at each node.</p> <p></p> <p>To easily implement this, we can add \"parent pointers\" to the scene graph data structure. A parent pointer for a node is a link to the parent of that node in the graph. Note that this only works if the graph is a tree; in a tree, each node has a unique parent, but that is not true in a general directed acyclic graph. It is possible to move up the tree by following parent pointers.</p> <p>We this in mind, the algorithm for rendering the scene from the point of view of a camera goes as follows: Set the modelview transform to be the identity, by calling glLoadIdentity(). Start at the camera node, and follow parent pointers until you reach the root of the tree. At each node, apply the inverse of any modeling transformation in that node. (For example, if the modeling transform is translation by (a,b,c), call glTranslatef(\u2212a,\u2212b,\u2212c).) Upon reaching the root, the viewing transform corresponding to the camera has been established. Now, traverse the scene graph to render the scene as usual. During this traversal, camera nodes should be ignored.</p> <p>Note that a camera can be attached to an object, in the sense that the camera and the object are both subject to the same modeling transformation and so move together as a unit. In modeling terms, the camera and the object are sub-objects in a complex object. For example, a camera might be attached to a car to show the view through the windshield of that car. If the car moves, because its modeling transformation changes, the camera will move along with it.</p>"},{"location":"cn/c4/s4/#443-\u79fb\u52a8\u5149\u6e90","title":"4.4.3 \u79fb\u52a8\u5149\u6e90","text":"<p>Moving Light</p> \u4e2d\u6587\u82f1\u6587 <p>\u5c06\u706f\u5149\u89c6\u4e3a\u5bf9\u8c61\uff0c\u751a\u81f3\u4f5c\u4e3a\u590d\u6742\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\uff0c\u4e5f\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u5047\u8bbe\u4e00\u4e2a\u573a\u666f\u5305\u62ec\u4e00\u4e2a\u706f\u5177\u6a21\u578b\u3002\u706f\u5177\u6a21\u578b\u5c06\u5305\u62ec\u4e00\u4e9b\u51e0\u4f55\u5f62\u72b6\u4ee5\u4f7f\u5176\u53ef\u89c1\uff0c\u4f46\u5982\u679c\u5b83\u8981\u7167\u4eae\u573a\u666f\u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\uff0c\u5b83\u8fd8\u5fc5\u987b\u5305\u542b\u5149\u6e90\u3002\u8fd9\u610f\u5473\u7740\u706f\u5177\u662f\u4e00\u4e2a\u7531 OpenGL \u5149\u6e90\u52a0\u4e00\u4e9b\u51e0\u4f55\u5bf9\u8c61\u7ec4\u6210\u7684\u590d\u6742\u5bf9\u8c61\u3002\u5e94\u7528\u4e8e\u706f\u5177\u7684\u4efb\u4f55\u5efa\u6a21\u53d8\u6362\u4e5f\u5e94\u8be5\u5f71\u54cd\u5149\u6e90\u548c\u51e0\u4f55\u5f62\u72b6\u3002\u5c31\u573a\u666f\u56fe\u800c\u8a00\uff0c\u5149\u7531\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u8868\u793a\uff0c\u5e76\u4e14\u50cf\u573a\u666f\u56fe\u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u53d7\u5230\u5efa\u6a21\u53d8\u6362\u7684\u5f71\u54cd\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u62e5\u6709\u52a8\u753b\u706f\u5149\u2014\u2014\u6216\u8005\u5305\u542b\u706f\u5149\u4f5c\u4e3a\u5b50\u5bf9\u8c61\u7684\u52a8\u753b\u5bf9\u8c61\uff0c\u4f8b\u5982\u6c7d\u8f66\u7684\u524d\u706f\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u5728 \u5c0f\u82824.2.3 \u4e2d\u63d0\u5230\u7684\uff0c\u5149\u6e90\u4f1a\u53d7\u5230\u8bbe\u7f6e\u5149\u6e90\u4f4d\u7f6e\u65f6\u6709\u6548\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u7684\u5f71\u54cd\u3002\u5982\u679c\u5149\u5728\u573a\u666f\u56fe\u4e2d\u8868\u793a\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u5c31\u662f\u5728\u904d\u5386\u573a\u666f\u56fe\u65f6\u9047\u5230\u8be5\u8282\u70b9\u65f6\u6709\u6548\u7684\u53d8\u6362\u3002\u6240\u4ee5\uff0c\u770b\u8d77\u6765\u6211\u4eec\u5e94\u8be5\u53ea\u662f\u904d\u5386\u56fe\u5e76\u5728\u9047\u5230\u5b83\u65f6\u8bbe\u7f6e\u5149\u7684\u4f4d\u7f6e\u3002</p> <p>\u4f46\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u5728\u6e32\u67d3\u4efb\u4f55\u51e0\u4f55\u5f62\u72b6\u4e4b\u524d\uff0c\u6240\u6709\u53ef\u80fd\u5f71\u54cd\u8be5\u51e0\u4f55\u5f62\u72b6\u7684\u5149\u6e90\u90fd\u5fc5\u987b\u5df2\u7ecf\u88ab\u914d\u7f6e\u548c\u542f\u7528\u3002\u7279\u522b\u662f\uff0c\u5728\u6e32\u67d3\u4efb\u4f55\u51e0\u4f55\u5f62\u72b6\u4e4b\u524d\uff0c\u5fc5\u987b\u8bbe\u7f6e\u706f\u5149\u7684\u4f4d\u7f6e\u3002\u8fd9\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u7b80\u5355\u5730\u6309\u901a\u5e38\u7684\u65b9\u5f0f\u904d\u5386\u573a\u666f\u56fe\u6765\u8bbe\u7f6e\u573a\u666f\u56fe\u4e2d\u5149\u6e90\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u4f60\u8fd9\u6837\u505a\uff0c\u90a3\u4e48\u5728\u9047\u5230\u5149\u4e4b\u524d\u7ed8\u5236\u7684\u5bf9\u8c61\u5c06\u4e0d\u4f1a\u88ab\u5149\u6b63\u786e\u7167\u4eae\u3002\u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u5149\u8282\u70b9\u5305\u542b\u4efb\u4f55\u5176\u4ed6\u5149\u5c5e\u6027\u7684\u503c\uff0c\u5305\u62ec\u5149\u7684\u542f\u7528/\u7981\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5c5e\u6027\u4e5f\u5fc5\u987b\u5728\u6e32\u67d3\u4efb\u4f55\u51e0\u4f55\u5f62\u72b6\u4e4b\u524d\u8bbe\u7f6e\u3002</p> <p>\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u5bf9\u573a\u666f\u56fe\u8fdb\u884c\u4e24\u6b21\u904d\u5386\uff0c\u7b2c\u4e00\u6b21\u8bbe\u7f6e\u706f\u5149\uff0c\u7b2c\u4e8c\u6b21\u7ed8\u5236\u51e0\u4f55\u5f62\u72b6\u3002\u7531\u4e8e\u706f\u5149\u53d7\u5230\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u7684\u5f71\u54cd\uff0c\u4f60\u5fc5\u987b\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u4e2d\u4ee5\u4e0e\u7b2c\u4e8c\u6b21\u904d\u5386\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u8bbe\u7f6e\u5efa\u6a21\u53d8\u6362\u3002\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u4e2d\u9047\u5230\u706f\u5149\u65f6\uff0c\u4f60\u9700\u8981\u8bbe\u7f6e\u5149\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u8bbe\u7f6e\u4f4d\u7f6e\u5c31\u662f\u89e6\u53d1\u5c06\u5f53\u524d\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u5e94\u7528\u4e8e\u5149\u7684\u64cd\u4f5c\u3002\u4f60\u8fd8\u9700\u8981\u8bbe\u7f6e\u5149\u7684\u5176\u4ed6\u5c5e\u6027\u3002\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u4e2d\uff0c\u573a\u666f\u56fe\u4e2d\u7684\u51e0\u4f55\u5bf9\u8c61\u88ab\u5ffd\u7565\u3002\u5728\u7b2c\u4e8c\u6b21\u904d\u5386\u4e2d\uff0c\u5f53\u51e0\u4f55\u5f62\u72b6\u88ab\u6e32\u67d3\u65f6\uff0c\u53ef\u4ee5\u5ffd\u7565\u5149\u8282\u70b9\u3002</p> <p>It can also be useful to think of lights as objects, even as part of a complex object. Suppose that a scene includes a model of a lamp. The lamp model would include some geometry to make it visible, but if it is going to cast light on other objects in the scene, it also has to include a source of light. This means that the lamp is a complex object made up of an OpenGL light source plus some geometric objects. Any modeling transformation that is applied to the lamp should affect the light source as well as the geometry. In terms of the scene graph, the light is represented by a node in the graph, and it is affected by modeling transformations in the same way as other objects in the scene graph. You can even have animated lights\u2014or animated objects that include lights as sub-objects, such as the headlights on a car.</p> <p>Recall from Subsection 4.2.3 that a light source is subject to the modelview transform that is in effect at the time the position of the light source is set by glLightfv. If the light is represented as a node in a scene graph, then the modelview transform that we need is the one that is in effect when that node is encountered during a traversal of the scene graph. So, it seems like we should just traverse the graph and set the position of the light when we encounter it during the traversal.</p> <p>But there is a problem: Before any geometry is rendered, all the light sources that might affect that geometry must already be configured and enabled. In particular, the lights' positions must be set before rendering any geometry. This means that you can't simply set the position of light sources in the scene graph as you traverse the graph in the usual way. If you do that, objects that are drawn before the light is encountered won't be properly illuminated by the light. Similarly, if the light node contains values for any other properties of the light, including the enabled/disabled state of the light, those properties must be set before rendering any geometry.</p> <p>One solution is to do two traversals of the scene graph, the first to set up the lights and the second to draw the geometry. Since lights are affected by the modelview transformation, you have to set up the modeling transform during the first traversal in exactly the same way that you do in the second traversal. When you encounter the lights during the first traversal, you need to set the position of the light, since setting the position is what triggers the application of the current modelview transformation to the light. You also need to set any other properties of the light. During the first traversal, geometric objects in the scene graph are ignored. During the second traversal, when geometry is being rendered, light nodes can be ignored.</p>"},{"location":"cn/c5/","title":"\u7b2c 5 \u7ae0\uff1a Three.js\uff1a3D \u573a\u666f\u56fe API","text":"<p>Three.js: A 3D Scene Graph API</p> \u4e2d\u6587\u82f1\u6587 <p>\u7b2c3\u7ae0\u548c\u7b2c4\u7ae0\u4ecb\u7ecd\u4e86\u4f7f\u7528OpenGL 1.1\u76843D\u56fe\u5f62\u3002\u8fd9\u4e9b\u7ae0\u8282\u4e2d\u6db5\u76d6\u7684\u5927\u90e8\u5206\u7406\u5ff5\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u4ecd\u7136\u76f8\u5173\uff0c\u4f46\u81ea\u4eceOpenGL\u65e9\u671f\u4ee5\u6765\uff0c\u5df2\u7ecf\u53d1\u751f\u4e86\u8bb8\u591a\u53d8\u5316\u548c\u6539\u8fdb\u3002\u5728\u7b2c6\u7ae0\u548c\u7b2c7\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528WebGL\uff0c\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u5728\u7f51\u9875\u4e0a\u521b\u5efa3D\u56fe\u5f62\u5185\u5bb9\u7684\u73b0\u4ee3OpenGL\u7248\u672c\u3002\u800c\u7b2c9\u7ae0\u4ecb\u7ecd\u4e86WebGPU\uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u65b0\u7684Web\u56fe\u5f62API\u3002</p> <p>WebGL\u662f\u4e00\u79cd\u4f4e\u7ea7\u8bed\u8a00\u2014\u2014\u751a\u81f3\u6bd4OpenGL 1.1\u8fd8\u8981\u4f4e\u7ea7\uff0c\u56e0\u4e3aWebGL\u7a0b\u5e8f\u5fc5\u987b\u5904\u7406\u8bb8\u591a\u5728OpenGL\u539f\u59cb\u7248\u672c\u4e2d\u5185\u90e8\u5904\u7406\u7684\u4f4e\u7ea7\u5b9e\u73b0\u7ec6\u8282\u3002\u8fd9\u4f7f\u5f97WebGL\u66f4\u52a0\u7075\u6d3b\uff0c\u4f46\u4e5f\u66f4\u96be\u4f7f\u7528\u3002\u6211\u4eec\u5f88\u5feb\u5c06\u76f4\u63a5\u4f7f\u7528WebGL\u3002\u7136\u800c\uff0c\u5728\u6211\u4eec\u8fd9\u4e48\u505a\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u770b\u770b\u4e00\u4e2a\u6784\u5efa\u5728WebGL\u4e4b\u4e0a\u7684\u66f4\u9ad8\u7ea7\u7684API\uff0c\u7528\u4e8e3D Web\u56fe\u5f62\uff1athree.js\u3002\u4ece\u8fd9\u4e2a\u9ad8\u7ea7\u5f00\u59cb\u6709\u51e0\u4e2a\u539f\u56e0\u3002\u5b83\u5c06\u5141\u8bb8\u4f60\u770b\u5230\u4e00\u4e9b\u4f60\u5df2\u7ecf\u5b66\u5230\u7684\u4e1c\u897f\u662f\u5982\u4f55\u5728\u73b0\u4ee3\u9762\u5411\u5bf9\u8c61\u56fe\u5f62\u5305\u4e2d\u4f7f\u7528\u7684\u3002\u5b83\u5c06\u5141\u8bb8\u6211\u4ecb\u7ecd\u4e00\u4e9b\u65b0\u7279\u6027\uff0c\u5982\u9634\u5f71\u548c\u73af\u5883\u6620\u5c04\u3002\u5b83\u5c06\u8ba9\u4f60\u4f7f\u7528\u4e00\u4e2a\u4f60\u53ef\u80fd\u5728\u771f\u5b9eWeb\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u56fe\u5f62\u5e93\u3002\u5e76\u4e14\u5728\u6211\u4eec\u7ee7\u7eed\u6df1\u5165\u66f4\u5e95\u5c42\u4e4b\u524d\uff0c\u5b83\u5c06\u8ba9\u6211\u4eec\u4ece\u6211\u4eec\u4e00\u76f4\u5728\u5904\u7406\u7684\u4f4e\u7ea7\u7ec6\u8282\u4e2d\u89e3\u8131\u51fa\u6765\u3002</p> <p>\u4f60\u5f88\u53ef\u80fd\u53ef\u4ee5\u5728\u4e0d\u4e86\u89e3JavaScript\u7684\u60c5\u51b5\u4e0b\u8ddf\u968f\u672c\u7ae0\u7684\u5927\u90e8\u5206\u8ba8\u8bba\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528three.js\uff08\u6216WebGL\u6216WebGPU\uff09\u8fdb\u884c\u4efb\u4f55\u7f16\u7a0b\uff0c\u4f60\u9700\u8981\u77e5\u9053JavaScript\u3002\u8bed\u8a00\u7684\u57fa\u7840\u77e5\u8bc6\u5728\u9644\u5f55A\u7684A.3\u8282\u4e2d\u4ecb\u7ecd\u3002</p> <p>Chapter 3 and Chapter 4 introduced 3D graphics using OpenGL 1.1. Most of the ideas covered in those chapters remain relevant to modern computer graphics, but there have been many changes and improvements since the early days of OpenGL. In Chapter 6 and Chapter 7, we will be using WebGL, a modern version of OpenGL that is used to create 3D graphics content for web pages. And Chapter 9 introduces WebGPU, a newer graphics API for the Web.</p> <p>WebGL is a low level language\u2014even more so than OpenGL 1.1, since a WebGL program has to handle a lot of the low-level implementation details that were handled internally in the original version of OpenGL. This makes WebGL much more flexible, but more difficult to use. We will soon turn to working directly with WebGL. However, before we do that, we will look at a higher-level API for 3D web graphics that is built on top of WegGL: three.js. There are several reasons for starting at this high level. It will allow you to see how some of the things that you have learned are used in a modern object-oriented graphics package. It will allow me to introduce some new features such as shadows and environment mapping. It will let you work with a graphics library that you might use in real web applications. And it will be a break from the low-level detail we have been dealing with, before we move on to an even lower level.</p> <p>You can probably follow much of the discussion in this chapter without knowing JavaScript. However, if you want to do any programming with three.js (or with WebGL or WebGPU), you need to know JavaScript. The basics of the language are covered in Section A.3 in Appendix A.</p>"},{"location":"cn/c5/s1/","title":"5.1 Three.js \u57fa\u7840","text":"<p>Three.js Basics</p> \u4e2d\u6587\u82f1\u6587 <p>Three.js \u662f\u4e00\u4e2a\u7528\u4e8e 3D \u56fe\u5f62\u7684\u9762\u5411\u5bf9\u8c61 JavaScript \u5e93\u3002\u5b83\u662f\u7531 Ricardo Cabello\uff08\u5316\u540d \"mr.doob\"\uff0chttps://mrdoob.com/\uff09\u6700\u521d\u521b\u5efa\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u5176\u4ed6\u7a0b\u5e8f\u5458\u7684\u8d21\u732e\u3002\u5b83\u4f3c\u4e4e\u662f\u6700\u53d7\u6b22\u8fce\u7684\u5f00\u6e90 JavaScript \u5e93\uff0c\u7528\u4e8e 3D Web \u5e94\u7528\u7a0b\u5e8f\u3002\uff08\u53e6\u4e00\u4e2a\u53d7\u6b22\u8fce\u7684\u9009\u62e9\u662f Babylon.js\u3002\uff09Three.js \u4f7f\u7528\u4e86\u4f60\u5df2\u7ecf\u719f\u6089\u7684\u6982\u5ff5\uff0c\u6bd4\u5982\u51e0\u4f55\u5bf9\u8c61\u3001\u53d8\u6362\u3001\u706f\u5149\u3001\u6750\u8d28\u3001\u7eb9\u7406\u548c\u6444\u50cf\u673a\u3002\u4f46\u5b83\u4e5f\u6709\u989d\u5916\u7684\u7279\u6027\uff0c\u8fd9\u4e9b\u7279\u6027\u5efa\u7acb\u5728 WebGL \u7684\u5f3a\u5927\u548c\u7075\u6d3b\u6027\u4e4b\u4e0a\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728\u5b83\u7684\u4e3b\u7f51\u7ad9 https://threejs.org \u4e0b\u8f7d three.js \u5e76\u9605\u8bfb\u6587\u6863\u3002\u4e0b\u8f7d\u7684\u6587\u4ef6\u76f8\u5f53\u5927\uff0c\u56e0\u4e3a\u5b83\u5305\u62ec\u4e86\u8bb8\u591a\u793a\u4f8b\u548c\u652f\u6301\u6587\u4ef6\u3002\u8fd9\u672c\u4e66\u4f7f\u7528\u7684\u662f 2023 \u5e74 7 \u6708\u53d1\u5e03\u7684\u7248\u672c 154\u3002\u4f60\u5e94\u8be5\u610f\u8bc6\u5230\uff0c\u4f60\u53ef\u80fd\u5728\u7f51\u4e0a\u627e\u5230\u7684\u5173\u4e8e three.js \u7684\u4e00\u4e9b\u6750\u6599\u5e76\u4e0d\u9002\u7528\u4e8e\u6700\u65b0\u7248\u672c\u3002</p> <p>three.js \u7684\u5f53\u524d\u7248\u672c\u662f\u4e00\u4e2a\u201c\u6a21\u5757\u5316\u201d\u7684 JavaScript \u5e93\u3002\u65e7\u7684\u975e\u6a21\u5757\u5316\u5f62\u5f0f\u4ecd\u7136\u53ef\u7528\uff0c\u4f46\u5b83\u5df2\u88ab\u5f03\u7528\uff0c\u5e76\u8ba1\u5212\u5728\u7248\u672c 160 \u4e2d\u79fb\u9664\u3002\u8fd9\u672c\u6559\u79d1\u4e66\u7684\u4ee5\u524d\u7248\u672c\u4f7f\u7528\u4e86\u975e\u6a21\u5757\u5316\u7248\u672c\u3002\u6559\u79d1\u4e66\u7684\u7b2c 1.4 \u7248\u5df2\u7ecf\u66f4\u65b0\u4e3a\u4f7f\u7528 three.js \u6a21\u5757\uff1b\u9664\u6b64\u4e4b\u5916\uff0cthree.js \u6750\u6599\u53ea\u9488\u5bf9 three.js \u7248\u672c\u4e4b\u95f4\u7684\u4e00\u4e9b\u5c0f\u5dee\u5f02\u8fdb\u884c\u4e86\u66f4\u6539\u3002\uff08\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u53d1\u73b0\u6211\u5fc5\u987b\u663e\u8457\u589e\u52a0\u6750\u8d28\u989c\u8272\u7684\u955c\u9762\u5206\u91cf\u3002\uff09</p> <p>\u672c\u4e66\u4e2d\u4f7f\u7528\u7684\u6240\u6709 three.js \u811a\u672c\u526f\u672c\u53ef\u4ee5\u5728\u6559\u79d1\u4e66\u7f51\u7ad9\u6e90\u6587\u4ef6\u5939\u4e2d\u7684 threejs/script \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002three.js \u8bb8\u53ef\u8bc1\u5141\u8bb8\u8fd9\u4e9b\u6587\u4ef6\u81ea\u7531\u91cd\u65b0\u5206\u53d1\u3002\u4f46\u5982\u679c\u4f60\u8ba1\u5212\u8ba4\u771f\u4f7f\u7528 three.js\uff0c\u4f60\u5e94\u8be5\u9605\u8bfb\u5176\u7f51\u7ad9\u4e0a\u7684\u6587\u6863\uff0c\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u5b83\u4ee5\u53ca\u5982\u4f55\u90e8\u7f72\u5b83\u3002</p> <p>three.js \u7684\u6838\u5fc3\u7279\u6027\u5b9a\u4e49\u5728\u4e00\u4e2a\u540d\u4e3a \"three.module.js\" \u7684\u5355\u4e00\u5927\u578b JavaScript \u6587\u4ef6\u4e2d\uff0c\u8be5\u6587\u4ef6\u53ef\u4ee5\u5728 three.js \u4e0b\u8f7d\u4e2d\u7684\u6784\u5efa\u76ee\u5f55\u4e2d\u627e\u5230\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u5c0f\u7684 \"\u538b\u7f29\" \u7248\u672c\uff0cthree.module.min.js\uff0c\u5b83\u5305\u542b\u4e86\u76f8\u540c\u5b9a\u4e49\uff0c\u4f46\u683c\u5f0f\u4e0d\u9002\u5408\u4eba\u7c7b\u9605\u8bfb\u3002\u901a\u5e38\u5728\u7f51\u9875\u4e0a\u4f7f\u7528\u7684\u662f\u538b\u7f29\u7248\u672c\u3002\u9664\u4e86\u8fd9\u4e2a\u6838\u5fc3\u4e4b\u5916\uff0cthree.js \u4e0b\u8f7d\u8fd8\u6709\u4e00\u4e2a\u76ee\u5f55\uff0c\u5305\u542b\u8bb8\u591a\u793a\u4f8b\u548c\u5728\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u5404\u79cd\u652f\u6301\u6587\u4ef6\u3002\u793a\u4f8b\u4f7f\u7528\u4e86\u8bb8\u591a\u4e0d\u662f three.js \u6838\u5fc3\u90e8\u5206\u7684\u7279\u6027\u3002\u8fd9\u4e9b\u63d2\u4ef6\u53ef\u4ee5\u5728 three.js \u4e0b\u8f7d\u7684 examples \u6587\u4ef6\u5939\u5185\u7684 jsm \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002\u5176\u4e2d\u4e00\u4e9b\u63d2\u4ef6\u5728\u8fd9\u672c\u6559\u79d1\u4e66\u4e2d\u4f7f\u7528\uff0c\u5e76\u5305\u542b\u5728 threejs/script \u6587\u4ef6\u5939\u4e2d\u3002</p> <p>Three.js is an object-oriented JavaScript library for 3D graphics. It is an open-source project originally created by Ricardo Cabello (who goes by the handle \"mr.doob\", https://mrdoob.com/), with contributions from other programmers. It seems to be the most popular open-source JavaScript library for 3D web applications. (Another popular option is Babylon.js.) Three.js uses concepts that you are already familiar with, such as geometric objects, transformations, lights, materials, textures, and cameras. But it also has additional features that build on the power and flexibility of WegGL.</p> <p>You can download three.js and read the documentation at its main web site, https://threejs.org. The download is quite large, since it includes many examples and support files. This book uses Release 154 of the software, from July, 2023. You should be aware that some of the material about three.js that you might find on the Internet does not apply to the most recent release.</p> <p>The current release of three.js is a \"modular\" JavaScript library. The older, non-modular form is still available, but it is deprecated and is scheduled to be removed in Release 160. Previous versions of this textbook used the non-modular version. Version 1.4 of the textbook has been updated to use three.js modules; aside from that, the three.js material has been changed only to account for some minor differences between three.js releases. (Notably, I found that I had to significantly increase the specular component of material colors.)</p> <p>Copies of all three.js scripts that are used in this textbook can be found in the threejs/script folder in the source folder of this textbook's web site. The three.js license allows these files to be freely redistributed. But if you plan to do any serious work with three.js, you should read the documentation on its web site about how to use it and how to deploy it.</p> <p>The core features of three.js are defined in a single large JavaScript file named \"three.module.js\", which can be found in a build directory in the three.js download. There is also a smaller \"minified\" version, three.module.min.js, that contains the same definitions in a format that is not meant to be human-readable. It is the minified version that is usually used on web pages. In addition to this core, the three.js download has a directory containing many examples and a variety of support files that are used in the examples. The examples use many features that are not part of the three.js core. These add-ons can be found in a folder named jsm inside the folder named examples in the three.js download. Several of the add-ons are used in this textbook and are included in the threejs/script folder.</p>"},{"location":"cn/c5/s1/#511-\u5173\u4e8e-javascript-\u6a21\u5757","title":"5.1.1 \u5173\u4e8e JavaScript \u6a21\u5757","text":"<p>About JavaScript Modules</p> \u4e2d\u6587\u82f1\u6587 <p>\"\u6a21\u5757\"\u4e00\u8bcd\u901a\u5e38\u6307\u7684\u662f\u7cfb\u7edf\u4e2d\u76f8\u5bf9\u72ec\u7acb\u7684\u7ec4\u4ef6\u3002\u6a21\u5757\u4ee5\u6709\u9650\u4e14\u660e\u786e\u5b9a\u4e49\u7684\u65b9\u5f0f\u8fdb\u884c\u4ea4\u4e92\u3002\u5b83\u4eec\u662f\u6784\u5efa\u590d\u6742\u7cfb\u7edf\u7684\u91cd\u8981\u5de5\u5177\u3002\u5728 JavaScript \u4e2d\uff0c\u6a21\u5757\u662f\u4e00\u4e2a\u4e0e\u5176\u4ed6\u811a\u672c\u9694\u79bb\u7684\u811a\u672c\uff0c\u9664\u975e\u6a21\u5757\u53ef\u4ee5\u201c\u5bfc\u51fa\u201d\u5b83\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26\u3002\u4e00\u4e2a\u811a\u672c\u5bfc\u51fa\u7684\u6807\u8bc6\u7b26\u53ef\u4ee5\u88ab\u53e6\u4e00\u4e2a\u811a\u672c\u201c\u5bfc\u5165\u201d\u3002\u5982\u679c\u4e00\u4e2a\u6a21\u5757\u7684\u6807\u8bc6\u7b26\u6ca1\u6709\u88ab\u4e00\u4e2a\u6a21\u5757\u663e\u5f0f\u5bfc\u51fa\u5e76\u88ab\u53e6\u4e00\u4e2a\u6a21\u5757\u5bfc\u5165\uff0c\u90a3\u4e48\u6a21\u5757\u53ea\u80fd\u8bbf\u95ee\u6765\u81ea\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u6807\u8bc6\u7b26\u3002\u6a21\u5757\u8fd8\u53ef\u4ee5\u8bbf\u95ee\u975e\u6a21\u5757\u5316\u811a\u672c\u7684\u6807\u8bc6\u7b26\uff0c\u800c\u65e0\u9700\u5bfc\u5165\u5b83\u4eec\u3002</p> <p>JavaScript \u6a21\u5757\u53ef\u4ee5\u901a\u8fc7\u5728\u5176\u58f0\u660e\u4e0a\u6dfb\u52a0 export \u4fee\u9970\u7b26\u6765\u5bfc\u51fa\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\uff1a</p> <pre><code>export const RED=\"0xFF0000\";\nexport function setColor(c) { ... }\nexport class FancyDraw { ... }\n</code></pre> <p>\u6216\u8005\uff0c\u5b83\u53ef\u4ee5\u5728\u5176 export \u8bed\u53e5\u4e2d\u5217\u51fa\u5b83\u60f3\u8981\u5bfc\u51fa\u7684\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\uff1a</p> <pre><code>export { RED, setColor, FancyDraw };\n</code></pre> <p>export \u8bed\u53e5\u6709\u8bb8\u591a\u5176\u4ed6\u9009\u9879\u3002\u7136\u800c\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u611f\u5174\u8da3\u7684\u662f\u4ece three.js \u6a21\u5757\u5bfc\u5165\u3002</p> <p>\u8981\u4f7f\u7528\u6a21\u5757\u5316\u7684 three.js\uff0c\u60a8\u5c06\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u6a21\u5757\u5316\u811a\u672c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 <code>&lt;script&gt;</code> \u5143\u7d20\u4e0a\u6dfb\u52a0 type=\"module\" \u5c5e\u6027\u6765\u5728\u7f51\u9875\u4e0a\u5b9e\u73b0\uff1a</p> <pre><code>&lt;script type=\"module\"&gt;\n    .\n    .\n    .\n&lt;/script&gt;\n</code></pre> <p>\u7136\u540e\uff0c\u811a\u672c\u53ef\u4ee5\u4f7f\u7528 import \u8bed\u53e5\u6765\u8bbf\u95ee\u5176\u4ed6\u6a21\u5757\u4e2d\u7684\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\uff0c</p> <pre><code>&lt;script type=\"module\"&gt;\nimport { FancyDraw, setColor } from \"./drawutil.js\";\n.\n. // \u50cf\u5e73\u5e38\u4e00\u6837\u4f7f\u7528 FancyDraw \u548c setColor\uff01\n.\n</code></pre> <p>\u8fd9\u5047\u8bbe\u5bfc\u51fa\u6807\u8bc6\u7b26\u7684\u6a21\u5757\u5b9a\u4e49\u5728\u4e0e\u7f51\u9875\u76f8\u540c\u76ee\u5f55\u4e0b\u540d\u4e3a drawutil.js \u7684\u811a\u672c\u4e2d\u3002\u6ce8\u610f\uff0c\u5982\u679c\u811a\u672c\u8def\u5f84\u4ece\u5f53\u524d\u76ee\u5f55\u5f00\u59cb\uff0c\u90a3\u4e48\u811a\u672c\u540d\u79f0\u5fc5\u987b\u4ee5 \"./\" \u5f00\u5934\u3002</p> <p>\u6211\u7684 three.js \u793a\u4f8b\u4f7f\u7528\u4e0e\u7f51\u9875\u540c\u4e00\u76ee\u5f55\u4e0b\u540d\u4e3a script \u7684\u76ee\u5f55\u4e2d\u7684 three.module.min.js \u6587\u4ef6\u3002\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u4ece\u8be5\u6587\u4ef6\u5bfc\u5165\u6240\u6709\u5185\u5bb9\uff1a</p> <pre><code>import * as THREE from \"./script/three.module.min.js\";\n</code></pre> <p>\u8fd9\u79cd\u5f62\u5f0f\u7684 import \u8bed\u53e5\u4ece three.module.min.js \u83b7\u53d6\u6240\u6709\u5bfc\u51fa\uff0c\u5e76\u4f7f\u5b83\u4eec\u6210\u4e3a\u540d\u4e3a THREE \u7684\u65b0\u5bf9\u8c61\u7684\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u5bfc\u51fa\u7684\u6807\u8bc6\u7b26 Mesh \u88ab\u5bfc\u5165\u4e3a THREE.Mesh\u3002\u518d\u6b21\u5f3a\u8c03\uff0cimport \u8bed\u53e5\u6709\u5176\u4ed6\u5f62\u5f0f\uff0c\u8fd9\u91cc\u6ca1\u6709\u8986\u76d6\u3002</p> <p>\u6211\u7684\u8bb8\u591a\u793a\u4f8b\u4f7f\u7528\u4e0d\u5728\u4e3b\u8981 three.js \u811a\u672c\u4e2d\u7684\u63d2\u4ef6\u3002\u6211\u5df2\u7ecf\u5c06\u4f7f\u7528\u5b83\u4eec\u7684\u6587\u4ef6\u653e\u7f6e\u5728\u6211\u7684 \u811a\u672c\u76ee\u5f55 \u7684\u5b50\u76ee\u5f55\u4e2d\u3002\u6240\u6709\u6587\u4ef6\u90fd\u6765\u81ea three.js \u4e0b\u8f7d\u4e2d\u7684 examples/jsm \u6587\u4ef6\u5939\u3002\u6211\u4f7f\u7528\u4e86\u4e0e\u8be5\u6587\u4ef6\u5939\u76f8\u540c\u7684\u5b50\u76ee\u5f55\u7ed3\u6784\uff0c\u56e0\u4e3a\u4e00\u4e9b\u6587\u4ef6\u901a\u8fc7\u540d\u79f0\u5f15\u7528\u5176\u4ed6\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u5176\u4e2d\u4e00\u4e2a\u63d2\u4ef6\u811a\u672c\u662f \"controls\" \u5b50\u76ee\u5f55\u4e2d\u7684 \"OrbitControls.js\"\u3002\u5b83\u5bfc\u51fa\u4e86\u4e00\u4e2a\u540d\u4e3a OrbitControls \u7684\u7c7b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5bfc\u5165\uff1a</p> <pre><code>import { OrbitControls } from \"./script/controls/OrbitControls.js\";\n</code></pre> <p>\u63d2\u4ef6\u6a21\u5757\u4ece\u4e3b\u8981\u7684 three.js \u6a21\u5757\u5bfc\u5165\u8bb8\u591a\u8d44\u6e90\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4eec\u4e0d\u77e5\u9053\u5728\u54ea\u91cc\u627e\u5230\u8be5\u6587\u4ef6\u3002\u5b83\u4eec\u4f9d\u8d56\u4e8e\u6240\u8c13\u7684\u201cimport map\u201d\u6765\u6307\u5b9a\u5176\u4f4d\u7f6e\u3002\u53ef\u4ee5\u901a\u8fc7\u53e6\u4e00\u79cd\u7c7b\u578b\u811a\u672c\uff0ctype=\"importmap\" \u6765\u5b9a\u4e49 import map\u3002\u56e0\u6b64\uff0c\u4f60\u4f1a\u770b\u5230\u6211\u7684\u8bb8\u591a\u793a\u4f8b\u811a\u672c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5f00\u59cb\uff1a</p> <pre><code>&lt;script type=\"importmap\"&gt;\n{\n    \"imports\": {\n        \"three\": \"./script/three.module.min.js\",\n        \"addons/\": \"./script/\"\n    }\n}\n&lt;/script&gt;\n&lt;script type=\"module\"&gt;\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"addons/controls/OrbitControls.js\";\nimport { GLTFLoader } from \"addons/loaders/GLTFLoader.js\";\n</code></pre> <p>\"importmap\" \u811a\u672c\u7684\u5185\u5bb9\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\u3002\u8fd9\u91cc\u7684 import map \u5b9a\u4e49 \"three\" \u6307\u5411\u4e3b\u8981\u7684 three.js \u6587\u4ef6\uff0c\u5e76\u5b9a\u4e49 \"addons/\" \u6307\u5411\u811a\u672c\u76ee\u5f55\u3002\u63d2\u4ef6\u6a21\u5757\u5c06\u4e3b\u8981\u7684 three.js \u6a21\u5757\u5f15\u7528\u4e3a \"three\"\uff0c\u56e0\u6b64\u8be5\u6620\u5c04\u662f\u5fc5\u8981\u7684\u3002\"addons/\" \u6620\u5c04\u5b9e\u9645\u4e0a\u5bf9\u6211\u7684\u793a\u4f8b\u662f\u4e0d\u9700\u8981\u7684\u3002</p> <p>\u6211\u53ea\u7ed9\u4f60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u77ed\u7684 JavaScript \u6a21\u5757\u6982\u8ff0\u2014\u2014\u8db3\u591f\u4e86\uff0c\u6211\u5e0c\u671b\u8ba9\u4f60\u7406\u89e3\u6211\u7684\u793a\u4f8b\u7a0b\u5e8f\uff0c\u5e76\u7f16\u5199\u4e00\u4e9b\u7c7b\u4f3c\u7684\u7a0b\u5e8f\u3002\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u9879\u76ee\uff0c\u4f60\u5e94\u8be5\u770b\u770b three.js \u5f00\u53d1\u8005\u5173\u4e8e\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u8bf4\u6cd5\u3002\u8bf7\u53c2\u9605\u624b\u518c\u7684 \"Installation\" \u90e8\u5206 https://threejs.org/docs/\u3002</p> <p>The term \"module\" refers in general to a relatively independent component of a system. Modules interact in limited, well-defined ways. They are an important tool for building complex systems. In JavaScript, a module is a script that is isolated from other scripts, except that a module can \"export\" identifiers that it defines. Identifiers that are exported by one script can then be \"imported\" by another script. A module only has access to an identifier from another module if the identifier is explicitly exported by one module and imported by the other. Modules can also access identifiers from non-modular scripts, without having to import them.</p> <p>A JavaScript module can export an identifier by adding the export modifier to its declaration. For example,</p> <pre><code>export const RED=\"0xFF0000\";\nexport function setColor(c) { . . .\nexport class FancyDraw { . . .\n</code></pre> <p>Alternatively, it can list the identifiers that it wants to export in an export statement. For example,</p> <pre><code>export { RED, setColor, FancyDraw };\n</code></pre> <p>The export statement has many other options. However, here we are mostly interested in importing from three.js modules.</p> <p>To use modular three.js, you will need to write a modular script. You can do that on a web page by adding the attribute type=\"module\" to the <code>&lt;script&gt;</code> element:</p> <pre><code>&lt;script type=\"module\"&gt;\n    .\n    . \n    .\n&lt;/script&gt;\n</code></pre> <p>The script can then use import statements to access identifiers from other modules. For example,</p> <pre><code>&lt;script type=\"module\"&gt;\nimport { FancyDraw, setColor } from \"./drawutil.js\";\n.\n. // Use FancyDraw and setColor as usual!\n.\n</code></pre> <p>This assumes that the module that exports the identifiers is defined in a script named drawutil.js in the same directory as the web page. Note that if the path to the script starts in the current directory, then the script name must start with \"./\".</p> <p>My three.js examples use the file three.module.min.js from a directory named script in the same directory as the web page. They can import everything from that file using:</p> <pre><code>import * as THREE from \"./script/three.module.min.js\";\n</code></pre> <p>This form of the import statement gets all the exports from three.module.min.js and makes them properties of a new object named THREE. For example, the exported identifier Mesh is imported as THREE.Mesh. Again, the import statement has other forms, which are not covered here.</p> <p>Many of my examples use add-ons that are not part of the main three.js script. I have placed the files that use them in subdirectories of my script directory. All of the files come from the examples/jsm folder in the three.js download. I have used the same subdirectory structure as that folder, because some of the files refer to files in other subdirectories by name. One of the add-on scripts is \"OrbitControls.js\" in the \"controls\" subdirectory. It exports a class named OrbitControls, which can be imported using</p> <pre><code>import { Orbitcontrols } from \"./script/controls/OrbitControls.js\";\n</code></pre> <p>The add-on modules import many resources from the main three.js module. Unfortunately, they don't know where to find that file. They rely on something called an \"import map\" to specify its location. An import map can be defined by another kind of script, with type=\"importmap\". So, you will see that the scripts in many of my examples start something like this:</p> <pre><code>&lt;script type=\"importmap\"&gt;\n{\n    \"imports\": {\n        \"three\": \"./script/three.module.min.js\",\n        \"addons/\": \"./script/\"\n    }\n}\n&lt;/script&gt;\n&lt;script type=\"module\"&gt;\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"addons/controls/OrbitControls.js\";\nimport { GLTFLoader } from \"addons/loaders/GLTFLoader.js\";\n</code></pre> <p>The content of an \"importmap\" script is a JSON object. The import map here defines \"three\" to refer to the main three.js file, and it defines \"addons/\" to refer to the script directory. The add-on modules refer to the main three.js module as \"three\", so that mapping is necessary. The \"addons/\" mapping is actually not needed for my examples.</p> <p>I have given you only a very brief overview of JavaScript modules\u2014enough, I hope to let you understand my sample programs and write some similar programs of your own. For more complex projects, you should look at what the three.js developers have to say about setting up a development environment. See the \"Installation\" section of the Manual at https://threejs.org/docs/.</p>"},{"location":"cn/c5/s1/#512-\u573a\u666f\u6e32\u67d3\u5668\u76f8\u673a","title":"5.1.2 \u573a\u666f\u3001\u6e32\u67d3\u5668\u3001\u76f8\u673a","text":"<p>Scene, Renderer, Camera</p> \u4e2d\u6587\u82f1\u6587 <p>Three.js \u4e0e HTML <code>&lt;canvas&gt;</code> \u5143\u7d20\u4e00\u8d77\u5de5\u4f5c\uff0c\u8fd9\u662f\u6211\u4eec\u5728 \u7b2c2.6\u8282 \u4e2d\u7528\u4e8e2D\u56fe\u5f62\u7684\u76f8\u540c\u5143\u7d20\u3002\u51e0\u4e4e\u6240\u6709\u7684\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\uff0c\u9664\u4e86\u51762D\u56fe\u5f62API\u5916\uff0c\u753b\u5e03\u8fd8\u652f\u6301\u4f7f\u7528 WebGL \u8fdb\u884c3D\u7ed8\u56fe\uff0c\u8fd9\u662f three.js \u4f7f\u7528\u7684\uff0c\u5b83\u4e0e2D API\u7684\u5dee\u5f02\u975e\u5e38\u5927\u3002</p> <p>Three.js \u662f\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u573a\u666f\u56feAPI\u3002\uff08\u89c1 2.4.2\u5c0f\u8282\u3002\uff09\u57fa\u672c\u8fc7\u7a0b\u662f\u4f7f\u7528 three.js \u5bf9\u8c61\u6784\u5efa\u573a\u666f\u56fe\uff0c\u7136\u540e\u6e32\u67d3\u5b83\u6240\u4ee3\u8868\u7684\u573a\u666f\u7684\u56fe\u50cf\u3002\u901a\u8fc7\u5728\u5e27\u4e4b\u95f4\u4fee\u6539\u573a\u666f\u56fe\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u5b9e\u73b0\u52a8\u753b\u3002</p> <p>Three.js \u5e93\u7531\u5927\u91cf\u7684\u7c7b\u7ec4\u6210\u3002\u5176\u4e2d\u6700\u57fa\u7840\u7684\u4e09\u4e2a\u662f THREE.Scene\u3001THREE.Camera \u548c THREE.WebGLRenderer\u3002\uff08\u5b9e\u9645\u4e0a\u6709\u51e0\u79cd\u6e32\u67d3\u5668\u7c7b\u53ef\u7528\u3002THREE.WebGLRenderer \u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u5e38\u89c1\u7684\u3002\u4e00\u4e2a\u7528\u4e8e WebGPU \u7684\u6e32\u67d3\u5668\u5c1a\u5728\u5f00\u53d1\u4e2d\u3002\uff09\u4e00\u4e2a three.js \u7a0b\u5e8f\u81f3\u5c11\u9700\u8981\u6bcf\u79cd\u7c7b\u578b\u4e00\u4e2a\u5bf9\u8c61\u3002\u8fd9\u4e9b\u5bf9\u8c61\u901a\u5e38\u5b58\u50a8\u5728\u5168\u5c40\u53d8\u91cf\u4e2d\uff1a</p> <pre><code>let scene, renderer, camera;\n</code></pre> <p>\u6ce8\u610f\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u51e0\u4e4e\u6240\u6709 three.js \u7c7b\u548c\u5e38\u91cf\u90fd\u662f\u4e00\u4e2a\u540d\u4e3a THREE \u7684\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u540d\u79f0\u4ee5 \"THREE.\" \u5f00\u5934\u3002\uff08\u540d\u79f0 \"THREE\" \u662f\u5728\u5bfc\u5165 three.js \u7279\u6027\u7684\u5bfc\u5165\u8bed\u53e5\u4e2d\u5b9a\u4e49\u7684\uff1b\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u79f0\u3002\uff09\u6211\u6709\u65f6\u4f1a\u5728\u4e0d\u4f7f\u7528\u6b64\u524d\u7f00\u7684\u60c5\u51b5\u4e0b\u5f15\u7528\u7c7b\uff0c\u5b83\u901a\u5e38\u4e0d\u5728\u4f7f\u7528 three.js \u6587\u6863\u4e2d\uff0c\u4f46\u5728\u5b9e\u9645\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u5fc5\u987b\u59cb\u7ec8\u5305\u62ec\u524d\u7f00\u3002</p> <p>\u4e00\u4e2a Scene \u5bf9\u8c61\u662f\u4e00\u4e2a3D\u4e16\u754c\u4e2d\u6784\u6210\u6240\u6709\u5bf9\u8c61\u7684\u5bb9\u5668\uff0c\u5305\u62ec\u706f\u5149\u3001\u56fe\u5f62\u5bf9\u8c61\uff0c\u53ef\u80fd\u8fd8\u6709\u6444\u50cf\u673a\u3002\u5b83\u4f5c\u4e3a\u573a\u666f\u56fe\u7684\u6839\u8282\u70b9\u3002\u4e00\u4e2a Camera \u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4ee3\u8868\u4e00\u4e2a\u89c6\u70b9\uff0c\u53ef\u4ee5\u4ece\u8be5\u89c6\u70b9\u5236\u4f5c3D\u4e16\u754c\u7684\u56fe\u50cf\u3002\u5b83\u4ee3\u8868\u4e00\u4e2a\u89c6\u56fe\u53d8\u6362\u548c\u6295\u5f71\u7684\u7ec4\u5408\u3002\u4e00\u4e2a WebGLRenderer \u662f\u4e00\u4e2a\u53ef\u4ee5\u4ece\u573a\u666f\u56fe\u4e2d\u521b\u5efa\u56fe\u50cf\u7684\u5bf9\u8c61\u3002</p> <p>\u573a\u666f\u662f\u4e09\u4e2a\u5bf9\u8c61\u4e2d\u6700\u7b80\u5355\u7684\u3002\u53ef\u4ee5\u4f7f\u7528\u4e0d\u5e26\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u5c06\u573a\u666f\u521b\u5efa\u4e3a THREE.Scene \u7c7b\u578b\u7684\u5bf9\u8c61\uff1a</p> <pre><code>scene = new THREE.Scene();\n</code></pre> <p>scene.add(item) \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5411 scene \u6dfb\u52a0\u6444\u50cf\u673a\u3001\u706f\u5149\u548c\u56fe\u5f62\u5bf9\u8c61\u3002\u8fd9\u53ef\u80fd\u662f\u4f60\u552f\u4e00\u9700\u8981\u8c03\u7528\u7684\u573a\u666f\u51fd\u6570\u3002\u5076\u5c14\u4e5f\u6709\u7528\u7684\u662f scene.remove(item) \u51fd\u6570\uff0c\u5b83\u4ece\u573a\u666f\u4e2d\u79fb\u9664\u4e00\u4e2a\u9879\u76ee\u3002</p> <p>\u6709\u4e24\u79cd\u6444\u50cf\u673a\uff0c\u4e00\u79cd\u4f7f\u7528\u6b63\u4ea4\u6295\u5f71\uff0c\u4e00\u79cd\u4f7f\u7528\u900f\u89c6\u6295\u5f71\u3002\u5b83\u4eec\u7531\u7c7b THREE.OrthographicCamera \u548c THREE.PerspectiveCamera \u8868\u793a\uff0c\u5b83\u4eec\u662f THREE.Camera \u7684\u5b50\u7c7b\u3002\u6784\u9020\u51fd\u6570\u4f7f\u7528\u719f\u6089\u7684\u53c2\u6570\u6765\u6307\u5b9a\u6295\u5f71\uff08\u89c1 3.3.3\u5c0f\u8282\uff09\uff1a</p> <pre><code>camera = new THREE.OrthographicCamera( left, right, top, bottom, near, far );\n</code></pre> <p>\u6216</p> <pre><code>camera = new THREE.PerspectiveCamera( fieldOfViewAngle, aspect, near, far );\n</code></pre> <p>\u6b63\u4ea4\u6444\u50cf\u673a\u7684\u53c2\u6570\u6307\u5b9a\u89c6\u4f53\u7684 x\u3001y \u548c z \u9650\u5236\uff0c\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u2014\u2014\u5373\u5728\u5750\u6807\u7cfb\u4e2d\uff0c\u6444\u50cf\u673a\u4f4d\u4e8e (0,0,0)\uff0c\u671d\u5411\u8d1f z \u8f74\u65b9\u5411\uff0cy \u8f74\u6307\u5411\u89c6\u56fe\u7684\u4e0a\u65b9\u3002near \u548c far \u53c2\u6570\u4ee5\u8ddd\u79bb\u6444\u50cf\u673a\u7684\u65b9\u5f0f\u7ed9\u51fa z \u9650\u5236\u3002\u5bf9\u4e8e\u6b63\u4ea4\u6295\u5f71\uff0cnear \u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u5c06\u201c\u8fd1\u201d\u88c1\u526a\u5e73\u9762\u653e\u7f6e\u5728\u6444\u50cf\u673a\u540e\u9762\u3002\u53c2\u6570\u4e0e OpenGL \u51fd\u6570 glOrtho() \u7684\u76f8\u540c\uff0c\u53ea\u662f\u53cd\u8f6c\u4e86\u6307\u5b9a\u9876\u90e8\u548c\u5e95\u90e8\u88c1\u526a\u5e73\u9762\u7684\u4e24\u4e2a\u53c2\u6570\u7684\u987a\u5e8f\u3002</p> <p>\u900f\u89c6\u6444\u50cf\u673a\u66f4\u5e38\u89c1\u3002\u900f\u89c6\u6444\u50cf\u673a\u7684\u53c2\u6570\u6765\u81ea OpenGL \u7684 GLU \u5e93\u4e2d\u7684 gluPerspective() \u51fd\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u786e\u5b9a\u89c6\u4f53\u7684\u5782\u76f4\u8303\u56f4\uff0c\u4ee5\u5ea6\u4e3a\u5355\u4f4d\u7684\u89d2\u5ea6\u7ed9\u51fa\u3002aspect \u662f\u6c34\u5e73\u548c\u5782\u76f4\u8303\u56f4\u4e4b\u95f4\u7684\u6bd4\u7387\uff1b\u5b83\u901a\u5e38\u5e94\u8be5\u8bbe\u7f6e\u4e3a\u753b\u5e03\u7684\u5bbd\u5ea6\u9664\u4ee5\u5176\u9ad8\u5ea6\u3002near \u548c far \u7ed9\u51fa\u89c6\u4f53\u7684 z \u9650\u5236\uff0c\u4f5c\u4e3a\u8ddd\u79bb\u6444\u50cf\u673a\u7684\u8ddd\u79bb\u3002\u5bf9\u4e8e\u900f\u89c6\u6295\u5f71\uff0c\u4e24\u8005\u90fd\u5fc5\u987b\u662f\u6b63\u6570\uff0cnear \u5c0f\u4e8e far\u3002\u521b\u5efa\u900f\u89c6\u6444\u50cf\u673a\u7684\u5178\u578b\u4ee3\u7801\u5c06\u662f\uff1a</p> <pre><code>camera = new THREE.PerspectiveCamera( 45, canvas.width/canvas.height, 1, 100 );\n</code></pre> <p>\u5176\u4e2d canvas \u4fdd\u5b58\u5bf9\u56fe\u50cf\u5c06\u88ab\u6e32\u67d3\u7684 <code>&lt;canvas&gt;</code> \u5143\u7d20\u7684\u5f15\u7528\u3002\u8fd1\u548c\u8fdc\u7684\u503c\u610f\u5473\u7740\u53ea\u6709\u4f4d\u4e8e\u6444\u50cf\u673a\u524d 1 \u5230 100 \u5355\u4f4d\u4e4b\u95f4\u7684\u7269\u4f53\u88ab\u5305\u542b\u5728\u56fe\u50cf\u4e2d\u3002\u8bb0\u4f4f\uff0c\u4f7f\u7528\u8fc7\u5927\u7684 far \u503c\u6216\u8fc7\u5c0f\u7684 near \u503c\u53ef\u80fd\u4f1a\u5e72\u6270\u6df1\u5ea6\u6d4b\u8bd5\u7684\u51c6\u786e\u6027\u3002</p> <p>\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\uff0c\u6444\u50cf\u673a\u53ef\u4ee5\u88ab\u6dfb\u52a0\u5230\u573a\u666f\u4e2d\uff0c\u4f46\u5b83\u4e0d\u5fc5\u662f\u573a\u666f\u56fe\u7684\u4e00\u90e8\u5206\u624d\u80fd\u88ab\u4f7f\u7528\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u5b83\u6210\u4e3a\u56fe\u4e2d\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u7236\u5bf9\u8c61\u6216\u5b50\u5bf9\u8c61\uff0c\u4f60\u53ef\u80fd\u4f1a\u5c06\u5b83\u6dfb\u52a0\u5230\u573a\u666f\u56fe\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u4f60\u901a\u5e38\u5e0c\u671b\u5bf9\u6444\u50cf\u673a\u5e94\u7528\u5efa\u6a21\u53d8\u6362\uff0c\u4ee5\u8bbe\u7f6e\u5176\u57283D\u7a7a\u95f4\u4e2d\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\u3002\u5f53\u6211\u66f4\u4e00\u822c\u5730\u8ba8\u8bba\u53d8\u6362\u65f6\uff0c\u6211\u5c06\u5728\u540e\u9762\u4ecb\u7ecd\u8fd9\u4e00\u70b9\u3002</p> <p>\u6e32\u67d3\u5668\u662f THREE.WebGLRenderer \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u5b83\u7684\u6784\u9020\u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u5f71\u54cd\u6e32\u67d3\u5668\u8bbe\u7f6e\u7684 JavaScript \u5bf9\u8c61\u3002\u4f60\u6700\u6709\u53ef\u80fd\u6307\u5b9a\u7684\u8bbe\u7f6e\u662f canvas\uff08\u544a\u8bc9\u6e32\u67d3\u5668\u5728\u54ea\u91cc\u7ed8\u5236\uff09\u548c antialias\uff08\u8bf7\u6c42\u6e32\u67d3\u5668\u5c3d\u53ef\u80fd\u4f7f\u7528\u6297\u952f\u9f7f\uff09\uff1a</p> <pre><code>renderer = new THREE.WebGLRenderer({\n    canvas: theCanvas,\n    antialias: true\n});\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0ctheCanvas \u5c06\u662f\u6e32\u67d3\u5668\u5c06\u663e\u793a\u5b83\u4ea7\u751f\u7684\u56fe\u50cf\u7684 <code>&lt;canvas&gt;</code> \u5143\u7d20\u7684\u5f15\u7528\u3002\uff08\u6ce8\u610f\uff0c\u5c06 JavaScript \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u7684\u6280\u672f\u5728\u8bb8\u591a three.js \u51fd\u6570\u4e2d\u4f7f\u7528\u3002\u5b83\u5141\u8bb8\u652f\u6301\u5927\u91cf\u9009\u9879\uff0c\u800c\u65e0\u9700\u8981\u6c42\u4e00\u4e2a\u5fc5\u987b\u6309\u7279\u5b9a\u987a\u5e8f\u6307\u5b9a\u7684\u957f\u53c2\u6570\u5217\u8868\u3002\u76f8\u53cd\uff0c\u4f60\u53ea\u9700\u8981\u6307\u5b9a\u4f60\u60f3\u8981\u63d0\u4f9b\u975e\u9ed8\u8ba4\u503c\u7684\u9009\u9879\uff0c\u5e76\u4e14\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u901a\u8fc7\u540d\u79f0\u6307\u5b9a\u8fd9\u4e9b\u9009\u9879\u3002\uff09</p> <p>\u4f60\u60f3\u8981\u4f7f\u7528\u6e32\u67d3\u5668\u505a\u7684\u4e3b\u8981\u662f\u6e32\u67d3\u56fe\u50cf\u3002\u4e3a\u6b64\uff0c\u4f60\u8fd8\u9700\u8981\u4e00\u4e2a\u573a\u666f\u548c\u4e00\u53f0\u6444\u50cf\u673a\u3002\u8981\u6e32\u67d3\u4ece\u7ed9\u5b9a\u6444\u50cf\u673a\u7684\u89c6\u89d2\u770b\u7ed9\u5b9a\u573a\u666f\u7684\u56fe\u50cf\uff0c\u8bf7\u8c03\u7528\uff1a</p> <pre><code>renderer.render(scene, camera);\n</code></pre> <p>\u8fd9\u786e\u5b9e\u662f\u4efb\u4f55 three.js \u5e94\u7528\u4e2d\u7684\u4e2d\u5fc3\u547d\u4ee4\u3002</p> <p>\uff08\u6211\u5e94\u8be5\u6307\u51fa\uff0c\u6211\u89c1\u8fc7\u7684\u5927\u591a\u6570\u793a\u4f8b\u6ca1\u6709\u5411\u6e32\u67d3\u5668\u63d0\u4f9b canvas\uff1b\u76f8\u53cd\uff0c\u5b83\u4eec\u5141\u8bb8\u6e32\u67d3\u5668\u521b\u5efa\u5b83\u3002\u7136\u540e\u53ef\u4ee5\u4ece\u6e32\u67d3\u5668\u83b7\u53d6 canvas \u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u9875\u9762\u3002\u6b64\u5916\uff0ccanvas \u901a\u5e38\u586b\u5145\u6574\u4e2a\u6d4f\u89c8\u5668\u7a97\u53e3\u3002\u793a\u4f8b\u7a0b\u5e8f threejs/full-window.html \u5c55\u793a\u4e86\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u7136\u800c\uff0c\u6211\u7684\u6240\u6709\u5176\u4ed6\u793a\u4f8b\u90fd\u4f7f\u7528\u73b0\u6709\u7684 canvas\uff0c\u6e32\u67d3\u5668\u6784\u9020\u51fd\u6570\u5982\u4e0a\u6240\u793a\u3002\uff09</p> <p>Three.js works with the HTML <code>&lt;canvas&gt;</code> element, the same thing that we used for 2D graphics in Section 2.6. In almost all web browsers, in addition to its 2D Graphics API, a canvas also supports drawing in 3D using WebGL, which is used by three.js and which is about as different as it can be from the 2D API.</p> <p>Three.js is an object-oriented scene graph API. (See Subsection 2.4.2.) The basic procedure is to build a scene graph out of three.js objects, and then to render an image of the scene it represents. Animation can be implemented by modifying properties of the scene graph between frames.</p> <p>The three.js library is made up of a large number of classes. Three of the most basic are THREE.Scene, THREE.Camera, and THREE.WebGLRenderer. (There are actually several renderer classes available. THREE.WebGLRenderer is by far the most common. A renderer for WebGPU is available but is still under development.) A three.js program will need at least one object of each type. Those objects are often stored in global variables</p> <pre><code>let scene, renderer, camera;\n</code></pre> <p>Note that almost all of the three.js classes and constants that we will use are properties of an object named THREE, and their names begin with \"THREE.\". (The name \"THREE\" is defined in the import statement that imports the three.js features; you can use a different name.) I will sometimes refer to classes without using this prefix, and it is not usually used in the three.js documentation, but the prefix must always be included in actual program code.</p> <p>A Scene object is a holder for all the objects that make up a 3D world, including lights, graphical objects, and possibly cameras. It acts as a root node for the scene graph. A Camera is a special kind of object that represents a viewpoint from which an image of a 3D world can be made. It represents a combination of a viewing transformation and a projection. A WebGLRenderer is an object that can create an image from a scene graph.</p> <p>The scene is the simplest of the three objects. A scene can be created as an object of type THREE.Scene using a constructor with no parameters:</p> <pre><code>scene = new THREE.Scene();\n</code></pre> <p>The function scene.add(item) can be used to add cameras, lights, and graphical objects to the scene. It is probably the only scene function that you will need to call. The function scene.remove(item), which removes an item from the scene, is also occasionally useful.</p> <p>There are two kinds of camera, one using orthographic projection and one using perspective projection. They are represented by classes THREE.OrthographicCamera and THREE.PerspectiveCamera, which are subclasses of THREE.Camera. The constructors specify the projection, using parameters that are familiar from OpenGL (see Subsection 3.3.3):</p> <pre><code>camera = new THREE.OrthographicCamera( left, right, top, bottom, near, far );\n</code></pre> <p>or</p> <pre><code>camera = new THREE.PerspectiveCamera( fieldOfViewAngle, aspect, near, far );\n</code></pre> <p>The parameters for the orthographic camera specify the x, y, and z limits of the view volume, in eye coordinates\u2014that is, in a coordinate system in which the camera is at (0,0,0) looking in the direction of the negative z-axis, with the y-axis pointing up in the view. The near and far parameters give the z-limits in terms of distance from the camera. For an orthographic projection, near can be negative, putting the \"near\" clipping plane in back of the camera. The parameters are the same as for the OpenGL function glOrtho(), except for reversing the order of the two parameters that specify the top and bottom clipping planes.</p> <p>Perspective cameras are more common. The parameters for the perspective camera come from the function gluPerspective() in OpenGL's GLU library. The first parameter determines the vertical extent of the view volume, given as an angle measured in degrees. The aspect is the ratio between the horizontal and vertical extents; it should usually be set to the width of the canvas divided by its height. And near and far give the z-limits on the view volume as distances from the camera. For a perspective projection, both must be positive, with near less than far. Typical code for creating a perspective camera would be:</p> <pre><code>camera = new THREE.PerspectiveCamera( 45, canvas.width/canvas.height, 1, 100 );\n</code></pre> <p>where canvas holds a reference to the <code>&lt;canvas&gt;</code> element where the image will be rendered. The near and far values mean that only things between 1 and 100 units in front of the camera are included in the image. Remember that using an unnecessarily large value for far or an unnecessarily small value for near can interfere with the accuracy of the depth test.</p> <p>A camera, like other objects, can be added to a scene, but it does not have to be part of the scene graph to be used. You might add it to the scene graph if you want it to be a parent or child of another object in the graph. In any case, you will generally want to apply a modeling transformation to the camera to set its position and orientation in 3D space. I will cover that later when I talk about transformations more generally.</p> <p>A renderer is an instance of the class THREE.WebGLRenderer. Its constructor has one parameter, which is a JavaScript object containing settings that affect the renderer. The settings you are most likely to specify are canvas, which tells the renderer where to draw, and antialias, which asks the renderer to use antialiasing if possible:</p> <pre><code>renderer = new THREE.WebGLRenderer( {\n                        canvas: theCanvas,\n                        antialias: true\n                    } );\n</code></pre> <p>Here, theCanvas would be a reference to the <code>&lt;canvas&gt;</code> element where the renderer will display the images that it produces. (Note that the technique of having a JavaScript object as a parameter is used in many three.js functions. It makes it possible to support a large number of options without requiring a long list of parameters that must all be specified in some particular order. Instead, you only need to specify the options for which you want to provide non-default values, and you can specify those options by name, in any order.)</p> <p>The main thing that you want to do with a renderer is render an image. For that, you also need a scene and a camera. To render an image of a given scene from the point of view of a given camera, call</p> <pre><code>renderer.render( scene, camera );\n</code></pre> <p>This is really the central command in any three.js application.</p> <p>(I should note that most of the examples that I have seen do not provide a canvas to the renderer; instead, they allow the renderer to create it. The canvas can then be obtained from the renderer and added to the page. Furthermore, the canvas typically fills the entire browser window. The sample program threejs/full-window.html shows how to do that. However, all of my other examples use an existing canvas, with the renderer constructor shown above.)</p>"},{"location":"cn/c5/s1/#513-threeobject3d","title":"5.1.3 THREE.Object3D","text":"<p>THREE.Object3D</p> \u4e2d\u6587\u82f1\u6587 <p>three.js \u573a\u666f\u56fe\u7531 THREE.Object3D \u7c7b\u578b\u7684\u5bf9\u8c61\u7ec4\u6210\uff08\u5305\u62ec\u5c5e\u4e8e\u8be5\u7c7b\u7684\u5b50\u7c7b\u7684\u7269\u4f53\uff09\u3002\u6444\u50cf\u673a\u3001\u706f\u5149\u548c\u53ef\u89c1\u7269\u4f53\u90fd\u7531 Object3D \u7684\u5b50\u7c7b\u8868\u793a\u3002\u5b9e\u9645\u4e0a\uff0cTHREE.Scene \u672c\u8eab\u4e5f\u662f Object3D \u7684\u4e00\u4e2a\u5b50\u7c7b\u3002</p> <p>\u4efb\u4f55 Object3D \u90fd\u5305\u542b\u4e00\u4e2a\u5b50\u5bf9\u8c61\u5217\u8868\uff0c\u8fd9\u4e9b\u5b50\u5bf9\u8c61\u4e5f\u662f Object3D \u7c7b\u578b\u3002\u5b50\u5217\u8868\u5b9a\u4e49\u4e86\u573a\u666f\u56fe\u7684\u7ed3\u6784\u3002\u5982\u679c node \u548c object \u662f Object3D \u7c7b\u578b\uff0c\u90a3\u4e48\u65b9\u6cd5 node.add(object) \u5c06 object \u6dfb\u52a0\u5230 node \u7684\u5b50\u5217\u8868\u4e2d\u3002\u65b9\u6cd5 node.remove(object) \u53ef\u4ee5\u7528\u6765\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u4e00\u4e2a\u5bf9\u8c61\u3002</p> <p>three.js \u573a\u666f\u56fe\u5b9e\u9645\u4e0a\u662f\u4e00\u68f5\u6811\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u7236\u8282\u70b9\uff0c\u9664\u4e86\u6839\u8282\u70b9\uff0c\u5b83\u6ca1\u6709\u7236\u8282\u70b9\u3002\u4e00\u4e2a Object3D\uff0cobj\uff0c\u6709\u4e00\u4e2a\u5c5e\u6027 obj.parent\uff0c\u6307\u5411\u573a\u666f\u56fe\u4e2d obj \u7684\u7236\u8282\u70b9\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\u4f60\u6c38\u8fdc\u4e0d\u5e94\u8be5\u76f4\u63a5\u8bbe\u7f6e\u8fd9\u4e2a\u5c5e\u6027\u3002\u5f53\u8282\u70b9\u88ab\u6dfb\u52a0\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u5217\u8868\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u3002\u5982\u679c obj \u5728\u88ab\u6dfb\u52a0\u4e3a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u65f6\u5df2\u7ecf\u6709\u7236\u8282\u70b9\uff0c\u90a3\u4e48 obj \u9996\u5148\u4ece\u5f53\u524d\u7236\u8282\u70b9\u7684\u5b50\u5217\u8868\u4e2d\u79fb\u9664\uff0c\u7136\u540e\u88ab\u6dfb\u52a0\u5230 node \u7684\u5b50\u5217\u8868\u4e2d\u3002</p> <p>\u4e00\u4e2a Object3D\uff0cobj\uff0c\u7684\u5b50\u8282\u70b9\u5b58\u50a8\u5728\u4e00\u4e2a\u540d\u4e3a obj.children \u7684\u5c5e\u6027\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684 JavaScript \u6570\u7ec4\u3002\u7136\u800c\uff0c\u4f60\u5e94\u8be5\u603b\u662f\u4f7f\u7528 obj.add() \u548c obj.remove() \u65b9\u6cd5\u6765\u6dfb\u52a0\u548c\u79fb\u9664 obj \u7684\u5b50\u8282\u70b9\u3002</p> <p>\u4e3a\u4e86\u4fbf\u4e8e\u590d\u5236\u573a\u666f\u56fe\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff0cObject3D \u5b9a\u4e49\u4e86\u4e00\u4e2a clone() \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u590d\u5236\u8282\u70b9\uff0c\u5305\u62ec\u9012\u5f52\u590d\u5236\u8282\u70b9\u7684\u5b50\u8282\u70b9\u3002\u8fd9\u4f7f\u5f97\u5728\u573a\u666f\u56fe\u4e2d\u5305\u542b\u76f8\u540c\u7ed3\u6784\u7684\u591a\u4e2a\u526f\u672c\u53d8\u5f97\u5bb9\u6613\uff1a</p> <pre><code>let node = THREE.Object3D();\n    .\n    .  // \u5411 node \u6dfb\u52a0\u5b50\u8282\u70b9\u3002\n    .\nscene.add(node);\nlet nodeCopy1 = node.clone();\n    .\n    .  // \u4fee\u6539 nodeCopy1\uff0c\u53ef\u80fd\u5e94\u7528\u4e00\u4e2a\u53d8\u6362\u3002\n    .\nscene.add(nodeCopy1)\nlet nodeCopy2 = node.clone();\n    .\n    .  // \u4fee\u6539 nodeCopy2\uff0c\u53ef\u80fd\u5e94\u7528\u4e00\u4e2a\u53d8\u6362\u3002\n    .\nscene.add(nodeCopy2);\n</code></pre> <p>\u4e00\u4e2a Object3D\uff0cobj\uff0c\u6709\u4e00\u4e2a\u5173\u8054\u7684\u53d8\u6362\uff0c\u7531\u5c5e\u6027 obj.scale\u3001obj.rotation \u548c obj.position \u7ed9\u51fa\u3002\u8fd9\u4e9b\u5c5e\u6027\u8868\u793a\u5728\u6e32\u67d3\u5bf9\u8c61\u53ca\u5176\u5b50\u8282\u70b9\u65f6\u5e94\u7528\u5230\u5bf9\u8c61\u4e0a\u7684\u5efa\u6a21\u53d8\u6362\u3002\u5bf9\u8c61\u9996\u5148\u6309\u6bd4\u4f8b\u7f29\u653e\uff0c\u7136\u540e\u65cb\u8f6c\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u8fdb\u884c\u5e73\u79fb\u3002\uff08\u53d8\u6362\u5b9e\u9645\u4e0a\u6bd4\u8fd9\u66f4\u590d\u6742\uff0c\u4f46\u6211\u4eec\u73b0\u5728\u5148\u4fdd\u6301\u7b80\u5355\uff0c\u7a0d\u540e\u5c06\u56de\u5230\u8fd9\u4e2a\u8bdd\u9898\u3002\uff09</p> <p>obj.scale \u548c obj.position \u7684\u503c\u662f THREE.Vector3 \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u4e00\u4e2a Vector3 \u8868\u793a\u4e09\u7ef4\u4e2d\u7684\u5411\u91cf\u6216\u70b9\u3002\uff08\u8fd8\u6709\u7c7b\u4f3c\u7684\u7c7b THREE.Vector2 \u548c THREE.Vector4\uff0c\u7528\u4e8e2\u7ef4\u548c4\u7ef4\u7684\u5411\u91cf\u3002\uff09\u53ef\u4ee5\u4ece\u4e09\u4e2a\u6570\u5b57\u6784\u9020\u4e00\u4e2a Vector3 \u5bf9\u8c61\uff0c\u8fd9\u4e9b\u6570\u5b57\u7ed9\u51fa\u5411\u91cf\u7684\u5750\u6807\uff1a</p> <pre><code>let v = new THREE.Vector3( 17, -3.14159, 42 );\n</code></pre> <p>\u8fd9\u4e2a\u5bf9\u8c61\u6709\u5c5e\u6027 v.x\u3001v.y \u548c v.z \u8868\u793a\u5750\u6807\u3002\u8fd9\u4e9b\u5c5e\u6027\u53ef\u4ee5\u5355\u72ec\u8bbe\u7f6e\uff1b\u4f8b\u5982\uff1av.x = 10\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u4e00\u6b21\u6027\u8bbe\u7f6e\uff0c\u4f7f\u7528\u65b9\u6cd5 v.set(x,y,z)\u3002Vector3 \u7c7b\u8fd8\u6709\u8bb8\u591a\u5b9e\u73b0\u5411\u91cf\u8fd0\u7b97\u7684\u65b9\u6cd5\uff0c\u5982\u52a0\u6cd5\u3001\u70b9\u79ef\u548c\u53c9\u79ef\u3002</p> <p>\u5bf9\u4e8e Object3D\uff0c\u5c5e\u6027 obj.scale.x\u3001obj.scale.y \u548c obj.scale.z \u7ed9\u51fa\u5bf9\u8c61\u5728 x\u3001y \u548c z \u65b9\u5411\u4e0a\u7684\u7f29\u653e\u91cf\u3002\u9ed8\u8ba4\u503c\u5f53\u7136\u662f 1\u3002\u8c03\u7528</p> <pre><code>obj.scale.set(2,2,2);\n</code></pre> <p>\u610f\u5473\u7740\u5728\u6e32\u67d3\u65f6\u5bf9\u8c61\u5c06\u53d7\u5230 2 \u7684\u5747\u5300\u7f29\u653e\u56e0\u5b50\u3002\u8bbe\u7f6e</p> <pre><code>obj.scale.y = 0.5;\n</code></pre> <p>\u53ea\u4f1a\u5728 y \u65b9\u5411\u4e0a\u5c06\u5176\u7f29\u5c0f\u4e00\u534a\uff08\u5047\u8bbe obj.scale.x \u548c obj.scale.z \u4ecd\u7136\u6709\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\uff09\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u5c5e\u6027 obj.position.x\u3001obj.position.y \u548c obj.position.z \u7ed9\u51fa\u5728\u6e32\u67d3\u65f6\u5c06\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684 x\u3001y \u548c z \u65b9\u5411\u4e0a\u7684\u5e73\u79fb\u91cf\u3002\u4f8b\u5982\uff0c\u7531\u4e8e\u6444\u50cf\u673a\u662f Object3D\uff0c\u8bbe\u7f6e</p> <pre><code>camera.position.z = 20;\n</code></pre> <p>\u610f\u5473\u7740\u6444\u50cf\u673a\u5c06\u4ece\u539f\u70b9\u7684\u9ed8\u8ba4\u4f4d\u7f6e\u79fb\u52a8\u5230\u6b63 z \u8f74\u4e0a\u7684 (0,0,20) \u70b9\u3002\u5f53\u6444\u50cf\u673a\u7528\u4e8e\u6e32\u67d3\u573a\u666f\u65f6\uff0c\u6444\u50cf\u673a\u4e0a\u7684\u8fd9\u79cd\u5efa\u6a21\u53d8\u6362\u5c31\u6210\u4e3a\u4e86\u89c6\u56fe\u53d8\u6362\u3002</p> <p>\u5bf9\u8c61 obj.rotation \u6709\u5c5e\u6027 obj.rotation.x\u3001obj.rotation.y \u548c obj.rotation.z\uff0c\u4ee3\u8868\u5173\u4e8e x\u3001y \u548c z \u8f74\u7684\u65cb\u8f6c\u3002\u89d2\u5ea6\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u3002\u5bf9\u8c61\u9996\u5148\u7ed5 x \u8f74\u65cb\u8f6c\uff0c\u7136\u540e\u7ed5 y \u8f74\u65cb\u8f6c\uff0c\u7136\u540e\u7ed5 z \u8f74\u65cb\u8f6c\u3002\uff08\u53ef\u4ee5\u6539\u53d8\u8fd9\u4e2a\u987a\u5e8f\u3002\uff09obj.rotation \u7684\u503c\u4e0d\u662f\u4e00\u4e2a\u5411\u91cf\u3002\u76f8\u53cd\uff0c\u5b83\u5c5e\u4e8e\u4e00\u4e2a\u7c7b\u4f3c\u7684\u7c7b\u578b\uff0cTHREE.Euler\uff0c\u5e76\u4e14\u65cb\u8f6c\u89d2\u5ea6\u88ab\u79f0\u4e3a \u6b27\u62c9\u89d2\u3002</p> <p>A three.js scene graph is made up of objects of type THREE.Object3D (including objects that belong to subclasses of that class). Cameras, lights, and visible objects are all represented by subclasses of Object3D. In fact, THREE.Scene itself is also a subclass of Object3D.</p> <p>Any Object3D contains a list of child objects, which are also of type Object3D. The child lists define the structure of the scene graph. If node and object are of type Object3D, then the method node.add(object) adds object to the list of children of node. The method node.remove(object) can be used to remove an object from the list.</p> <p>A three.js scene graph must, in fact, be a tree. That is, every node in the graph has a unique parent node, except for the root node, which has no parent. An Object3D, obj, has a property obj.parent that points to the parent of obj in the scene graph, if any. You should never set this property directly. It is set automatically when the node is added to the child list of another node. If obj already has a parent when it is added as a child of node, then obj is first removed from the child list of its current parent before it is added to the child list of node.</p> <p>The children of an Object3D, obj, are stored in a property named obj.children, which is an ordinary JavaScript array. However, you should always add and remove children of obj using the methods obj.add() and obj.remove().</p> <p>To make it easy to duplicate parts of the structure of a scene graph, Object3D defines a clone() method. This method copies the node, including the recursive copying of the children of that node. This makes it easy to include multiple copies of the same structure in a scene graph:</p> <pre><code>let node = THREE.Object3D();\n    .\n    .  // Add children to node.\n    .\nscene.add(node);\nlet nodeCopy1 = node.clone();\n    .\n    .  // Modify nodeCopy1, maybe apply a transformation.\n    .\nscene.add(nodeCopy1)\nlet nodeCopy2 = node.clone();\n    .\n    .  // Modify nodeCopy2, maybe apply a transformation.\n    .\nscene.add(nodeCopy2);\n</code></pre> <p>An Object3D, obj, has an associated transformation, which is given by properties obj.scale, obj.rotation, and obj.position. These properties represent a modeling transformation to be applied to the object and its children when the object is rendered. The object is first scaled, then rotated, then translated according to the values of these properties. (Transformations are actually more complicated than this, but we will keep things simple for now and will return to the topic later.)</p> <p>The values of obj.scale and obj.position are objects of type THREE.Vector3. A Vector3 represents a vector or point in three dimensions. (There are similar classes THREE.Vector2 and THREE.Vector4 for vectors in 2 and 4 dimensions.) A Vector3 object can be constructed from three numbers that give the coordinates of the vector:</p> <pre><code>let v = new THREE.Vector3( 17, -3.14159, 42 );\n</code></pre> <p>This object has properties v.x, v.y, and v.z representing the coordinates. The properties can be set individually; for example: v.x = 10. They can also be set all at once, using the method v.set(x,y,z). The Vector3 class also has many methods implementing vector operations such as addition, dot product, and cross product.</p> <p>For an Object3D, the properties obj.scale.x, obj.scale.y, and obj.scale.z give the amount of scaling of the object in the x, y, and z directions. The default values, of course, are 1. Calling</p> <pre><code>obj.scale.set(2,2,2);\n</code></pre> <p>means that the object will be subjected to a uniform scaling factor of 2 when it is rendered. Setting</p> <pre><code>obj.scale.y = 0.5;\n</code></pre> <p>will shrink it to half-size in the y-direction only (assuming that obj.scale.x and obj.scale.z still have their default values).</p> <p>Similarly, the properties obj.position.x, obj.position.y, and obj.position.z give the translation amounts that will be applied to the object in the x, y, and z directions when it is rendered. For example, since a camera is an Object3D, setting</p> <pre><code>camera.position.z = 20;\n</code></pre> <p>means that the camera will be moved from its default position at the origin to the point (0,0,20) on the positive z-axis. This modeling transformation on the camera becomes a viewing transformation when the camera is used to render a scene.</p> <p>The object obj.rotation has properties obj.rotation.x, obj.rotation.y, and obj.rotation.z that represent rotations about the x-, y-, and z-axes. The angles are measured in radians. The object is rotated first about the x-axis, then about the y-axis, then about the z-axis. (It is possible to change this order.) The value of obj.rotation is not a vector. Instead, it belongs to a similar type, THREE.Euler, and the angles of rotation are called Euler angles.</p>"},{"location":"cn/c5/s1/#514-\u7269\u4f53\u51e0\u4f55\u5f62\u72b6\u6750\u6599","title":"5.1.4 \u7269\u4f53\u3001\u51e0\u4f55\u5f62\u72b6\u3001\u6750\u6599","text":"<p>Object, Geometry, Material</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 three.js \u4e2d\uff0c\u53ef\u89c1\u5bf9\u8c61\u7531\u70b9\u3001\u7ebf\u6216\u4e09\u89d2\u5f62\u7ec4\u6210\u3002\u4e00\u4e2a\u5355\u72ec\u7684\u5bf9\u8c61\u5bf9\u5e94\u4e8e OpenGL \u57fa\u5143\uff0c\u5982 GL_POINTS\u3001GL_LINES \u6216 GL_TRIANGLES\uff08\u89c1 3.1.1\u5c0f\u8282\uff09\u3002\u6709\u4e94\u4e2a\u7c7b\u6765\u8868\u793a\u8fd9\u4e9b\u53ef\u80fd\u6027\uff1aTHREE.Points \u7528\u4e8e\u70b9\uff0cTHREE.Mesh \u7528\u4e8e\u4e09\u89d2\u5f62\uff0c\u4ee5\u53ca\u4e09\u4e2a\u7c7b\u7528\u4e8e\u7ebf\uff1aTHREE.Line\uff0c\u4f7f\u7528 GL_LINE_STRIP \u57fa\u5143\uff1bTHREE.LineSegments\uff0c\u4f7f\u7528 GL_LINES \u57fa\u5143\uff1b\u548c THREE.LineLoop\uff0c\u4f7f\u7528 GL_LINE_LOOP \u57fa\u5143\u3002</p> <p>\u53ef\u89c1\u5bf9\u8c61\u7531\u4e00\u4e9b\u51e0\u4f55\u4f53\u548c\u51b3\u5b9a\u8be5\u51e0\u4f55\u4f53\u5916\u89c2\u7684\u6750\u6599\u7ec4\u6210\u3002\u5728 three.js \u4e2d\uff0c\u53ef\u89c1\u5bf9\u8c61\u7684\u51e0\u4f55\u4f53\u548c\u6750\u6599\u672c\u8eab\u7531 JavaScript \u7c7b THREE.BufferGeometry \u548c THREE.Material \u8868\u793a\u3002</p> <p>THREE.BufferGeometry \u7c7b\u578b\u7684\u5bf9\u8c61\u53ef\u4ee5\u5b58\u50a8\u9876\u70b9\u5750\u6807\u53ca\u5176\u5c5e\u6027\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u9876\u70b9\u5750\u6807\u4e5f\u88ab\u89c6\u4e3a\u51e0\u4f55\u4f53\u7684\u201c\u5c5e\u6027\u201d\u3002\uff09\u8fd9\u4e9b\u503c\u5fc5\u987b\u4ee5\u9002\u5408\u4e0e OpenGL \u51fd\u6570 glDrawArrays \u548c glDrawElements\uff08\u89c1 3.4.2\u5c0f\u8282\uff09\u4e00\u8d77\u4f7f\u7528\u7684\u5f62\u5f0f\u5b58\u50a8\u3002\u5bf9\u4e8e JavaScript\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u5fc5\u987b\u5b58\u50a8\u5728\u7c7b\u578b\u5316\u6570\u7ec4\u4e2d\u3002\u7c7b\u578b\u5316\u6570\u7ec4\u7c7b\u4f3c\u4e8e\u666e\u901a\u7684 JavaScript \u6570\u7ec4\uff0c\u53ea\u662f\u5b83\u7684\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u53ea\u80fd\u4fdd\u5b58\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u503c\u3002\u4f8b\u5982\uff0cFloat32Array \u4fdd\u5b58 32 \u4f4d\u6d6e\u70b9\u6570\uff0cUInt16Array \u4fdd\u5b58\u65e0\u7b26\u53f7 16 \u4f4d\u6574\u6570\u3002\u7c7b\u578b\u5316\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6570\u7ec4\u957f\u5ea6\u7684\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u3002\u4f8b\u5982\uff0c</p> <pre><code>vertexCoords = new Float32Array(300);  // 300\u4e2a\u6570\u5b57\u7684\u7a7a\u95f4\u3002\n</code></pre> <p>\u6216\u8005\uff0c\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u4ee5\u4e00\u4e2a\u666e\u901a JavaScript \u6570\u7ec4\u4f5c\u4e3a\u5176\u53c2\u6570\u3002\u8fd9\u4f1a\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u4ece JavaScript \u6570\u7ec4\u4e2d\u76f8\u540c\u7684\u6570\u5b57\u7684\u7c7b\u578b\u5316\u6570\u7ec4\u3002\u4f8b\u5982\uff0c</p> <pre><code>data = new Float32Array([1.3, 7, -2.89, 0, 3, 5.5]);\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdata \u7684\u957f\u5ea6\u662f\u516d\uff0c\u5b83\u5305\u542b\u6765\u81ea JavaScript \u6570\u7ec4\u7684\u6570\u5b57\u526f\u672c\u3002</p> <p>\u4e3a BufferGeometry \u6307\u5b9a\u9876\u70b9\u662f\u4e00\u4e2a\u591a\u6b65\u9aa4\u8fc7\u7a0b\u3002\u60a8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u9876\u70b9\u5750\u6807\u7684\u7c7b\u578b\u5316\u6570\u7ec4\u3002\u7136\u540e\uff0c\u60a8\u9700\u8981\u5c06\u8be5\u6570\u7ec4\u5305\u88c5\u5728\u4e00\u4e2a THREE.BufferAttribute \u7c7b\u578b\u7684\u5bf9\u8c61\u5185\u3002\u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5c5e\u6027\u6dfb\u52a0\u5230\u51e0\u4f55\u4f53\u4e2d\u3002\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>let vertexCoords = new Float32Array([0,0,0, 1,0,0, 0,1,0]);\nlet vertexAttrib = new THREE.BufferAttribute(vertexCoords, 3);\nlet geometry = new THREE.BufferGeometry();\ngeometry.setAttribute(\"position\", vertexAttrib);\n</code></pre> <p>BufferGeometry \u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5b83\u544a\u8bc9 three.js \u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\u6570\u91cf\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u4e2a\u9876\u70b9\u53ef\u4ee5\u901a\u8fc7 2\u30013 \u6216 4 \u4e2a\u5750\u6807\u6765\u6307\u5b9a\uff0c\u60a8\u9700\u8981\u6307\u5b9a\u6570\u7ec4\u4e3a\u6bcf\u4e2a\u9876\u70b9\u63d0\u4f9b\u4e86\u591a\u5c11\u4e2a\u6570\u5b57\u3002\u8f6c\u5230 setAttribute() \u51fd\u6570\uff0c\u4e00\u4e2a BufferGeometry \u53ef\u4ee5\u6709\u5c5e\u6027\u6765\u6307\u5b9a\u989c\u8272\u3001\u6cd5\u5411\u91cf\u548c\u7eb9\u7406\u5750\u6807\uff0c\u4ee5\u53ca\u5176\u4ed6\u81ea\u5b9a\u4e49\u5c5e\u6027\u3002 setAttribute() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5c5e\u6027\u7684\u540d\u79f0\u3002\u8fd9\u91cc\uff0c\u201cposition\u201d\u662f\u6307\u5b9a\u9876\u70b9\u5750\u6807\u6216\u4f4d\u7f6e\u7684\u5c5e\u6027\u540d\u79f0\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u8981\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u989c\u8272\uff0c\u60a8\u53ef\u4ee5\u5c06\u989c\u8272\u7684 RGB \u5206\u91cf\u653e\u5165\u4e00\u4e2a Float32Array \u4e2d\uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u4e3a\u540d\u4e3a\u201ccolor\u201d\u7684 BufferGeometry \u5c5e\u6027\u6307\u5b9a\u503c\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u4f7f\u7528\u7c7b\u578b\u4e3a THREE.Points \u7684 three.js \u5bf9\u8c61\u6765\u8868\u793a\u7c7b\u578b\u4e3a GL_POINTS \u7684\u539f\u7d20\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5728\u5355\u4f4d\u7403\u4f53\u5185\u90e8\u968f\u673a\u653e\u7f6e 10000 \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u81ea\u5df1\u7684\u968f\u673a\u989c\u8272\u3002\u4ee5\u4e0b\u662f\u521b\u5efa\u6240\u9700 BufferGeometry \u7684\u4e00\u4e9b\u4ee3\u7801\uff1a</p> <pre><code>let pointsBuffer = new Float32Array(30000);  // \u6bcf\u4e2a\u9876\u70b9 3 \u4e2a\u6570\u5b57\uff01\nlet colorBuffer = new Float32Array(30000);\nlet i = 0;\nwhile (i &lt; 10000) {\n    let x = 2 * Math.random() - 1;\n    let y = 2 * Math.random() - 1;\n    let z = 2 * Math.random() - 1;\n    if (x * x + y * y + z * z &lt; 1) {\n        // \u4ec5\u4f7f\u7528\u5355\u4f4d\u7403\u4f53\u5185\u90e8\u7684\u70b9\n        pointsBuffer[3 * i] = x;\n        pointsBuffer[3 * i + 1] = y;\n        pointsBuffer[3 * i + 2] = z;\n        colorBuffer[3 * i] = 0.25 + 0.75 * Math.random();\n        colorBuffer[3 * i + 1] = 0.25 + 0.75 * Math.random();\n        colorBuffer[3 * i + 2] = 0.25 + 0.75 * Math.random();\n        i++;\n    }\n}\nlet pointsGeom = new THREE.BufferGeometry();\npointsGeom.setAttribute(\"position\",\n                        new THREE.BufferAttribute(pointsBuffer, 3));\npointsGeom.setAttribute(\"color\",\n                        new THREE.BufferAttribute(colorBuffer, 3));\n</code></pre> <p>\u5728 three.js \u4e2d\uff0c\u8981\u4f7f\u4e00\u4e9b\u51e0\u4f55\u4f53\u6210\u4e3a\u53ef\u89c1\u5bf9\u8c61\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u9002\u5f53\u7684\u6750\u6599\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u7c7b\u578b\u4e3a THREE.Points \u7684\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 THREE.PointsMaterial \u7c7b\u578b\u7684\u6750\u6599\uff0c\u5b83\u662f Material \u7684\u4e00\u4e2a\u5b50\u7c7b\u3002\u6750\u6599\u53ef\u4ee5\u6307\u5b9a\u70b9\u7684\u989c\u8272\u548c\u5927\u5c0f\u7b49\u5c5e\u6027\uff1a</p> <pre><code>let pointsMat = new THREE.PointsMaterial({\n    color: \"yellow\",\n    size: 2,\n    sizeAttenuation: false\n});\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a JavaScript \u5bf9\u8c61\uff0c\u5176\u5c5e\u6027\u7528\u4e8e\u521d\u59cb\u5316\u6750\u6599\u3002\u5c06 sizeAttenuation \u5c5e\u6027\u8bbe\u7f6e\u4e3a false \u65f6\uff0c\u5927\u5c0f\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff1b\u5982\u679c\u662f true\uff0c\u5219 size \u8868\u793a\u4e16\u754c\u5750\u6807\u4e2d\u7684\u5927\u5c0f\uff0c\u5e76\u4e14\u70b9\u4f1a\u6839\u636e\u4e0e\u89c2\u5bdf\u8005\u7684\u8ddd\u79bb\u8fdb\u884c\u7f29\u653e\u3002\u5982\u679c\u7701\u7565 color\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c\u767d\u8272\u3002size \u7684\u9ed8\u8ba4\u503c\u4e3a 1\uff0csizeAttenuation \u7684\u9ed8\u8ba4\u503c\u4e3a true\u3002\u53ef\u4ee5\u5b8c\u5168\u7701\u7565\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\uff0c\u4ee5\u4f7f\u7528\u6240\u6709\u9ed8\u8ba4\u503c\u3002PointsMaterial \u4e0d\u53d7\u7167\u660e\u5f71\u54cd\uff1b\u5b83\u7b80\u5355\u5730\u663e\u793a\u7531\u5176 color \u5c5e\u6027\u6307\u5b9a\u7684\u989c\u8272\u3002</p> <p>\u4e5f\u53ef\u4ee5\u5728\u5bf9\u8c61\u521b\u5efa\u540e\u4e3a\u6750\u6599\u7684\u5c5e\u6027\u5206\u914d\u503c\u3002\u4f8b\u5982\uff0c</p> <pre><code>let pointsMat = new THREE.PointsMaterial();\npointsMat.color = new THREE.Color(\"yellow\");\npointsMat.size = 2;\npointsMat.sizeAttenuation = false;\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u989c\u8272\u662f\u4f5c\u4e3a THREE.Color \u7c7b\u578b\u7684\u503c\u8bbe\u7f6e\u7684\uff0c\u8fd9\u662f\u4ece\u5b57\u7b26\u4e32 \"yellow\" \u6784\u9020\u7684\u3002\u5f53\u5728\u6750\u6599\u6784\u9020\u51fd\u6570\u4e2d\u8bbe\u7f6e\u989c\u8272\u5c5e\u6027\u65f6\uff0c\u4f1a\u81ea\u52a8\u6267\u884c\u76f8\u540c\u7684\u4ece\u5b57\u7b26\u4e32\u5230\u989c\u8272\u7684\u8f6c\u6362\u3002</p> <p>\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u51e0\u4f55\u4f53\u548c\u6750\u6599\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u521b\u5efa\u7c7b\u578b\u4e3a THREE.Points \u7684\u53ef\u89c1\u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u5b9e\u52a0\u5230\u573a\u666f\u4e2d\uff1a</p> <pre><code>let sphereOfPoints = new THREE.Points(pointsGeom, pointsMat);\nscene.add(sphereOfPoints);\n</code></pre> <p>\u8fd9\u5c06\u663e\u793a\u4e00\u56e2\u9ec4\u8272\u7684\u70b9\u3002\u4f46\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2a\u70b9\u90fd\u6709\u81ea\u5df1\u7684\u989c\u8272\uff01\u56de\u60f3\u4e00\u4e0b\uff0c\u70b9\u7684\u989c\u8272\u5b58\u50a8\u5728\u51e0\u4f55\u4f53\u4e2d\uff0c\u800c\u4e0d\u662f\u6750\u6599\u4e2d\u3002\u6211\u4eec\u5fc5\u987b\u544a\u8bc9\u6750\u6599\u4f7f\u7528\u51e0\u4f55\u4f53\u4e2d\u7684\u989c\u8272\uff0c\u800c\u4e0d\u662f\u6750\u6599\u81ea\u5df1\u7684\u989c\u8272\u5c5e\u6027\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5c06\u6750\u6599\u5c5e\u6027 vertexColors \u7684\u503c\u8bbe\u7f6e\u4e3a true \u6765\u5b8c\u6210\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u521b\u5efa\u6750\u6599\uff1a</p> <pre><code>let pointsMat = new THREE.PointsMaterial({\n    color: \"white\",\n    size: 2,\n    sizeAttenuation: false,\n    vertexColors: true\n});\n</code></pre> <p>\u8fd9\u91cc\u4f7f\u7528\u767d\u8272\u4f5c\u4e3a\u6750\u6599\u989c\u8272\uff0c\u56e0\u4e3a\u9876\u70b9\u989c\u8272\u5b9e\u9645\u4e0a\u662f\u4e58\u4ee5\u6750\u6599\u989c\u8272\u7684\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u66ff\u6362\u5b83\u3002</p> <p>\u4ee5\u4e0b\u6f14\u793a\u663e\u793a\u4e86\u4e00\u4e2a\u70b9\u4e91\u3002\u4f60\u53ef\u4ee5\u63a7\u5236\u70b9\u662f\u5168\u90e8\u4e3a\u9ec4\u8272\u8fd8\u662f\u968f\u673a\u7740\u8272\u3002\u4f60\u53ef\u4ee5\u52a8\u753b\u5316\u70b9\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a7\u5236\u70b9\u7684\u5927\u5c0f\u548c\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0c\u70b9\u88ab\u6e32\u67d3\u4e3a\u6b63\u65b9\u5f62\u3002</p> <p></p> <p>\u5728 three.js \u4e2d\uff0c\u4e0a\u8ff0\u6750\u6599\u7684\u989c\u8272\u53c2\u6570\u662f\u901a\u8fc7\u5b57\u7b26\u4e32 \"yellow\" \u6307\u5b9a\u7684\u3002three.js \u4e2d\u7684\u989c\u8272\u53ef\u4ee5\u7531 THREE.Color* \u7c7b\u578b\u7684\u503c\u8868\u793a\u3002THREE.Color \u7c7b\u4ee3\u8868\u4e00\u4e2a RGB \u989c\u8272\u3002\u4e00\u4e2a Color \u5bf9\u8c61 c \u6709\u5c5e\u6027 c.r\u3001c.g \u548c c.b\uff0c\u5206\u522b\u7ed9\u51fa\u7ea2\u8272\u3001\u84dd\u8272\u548c\u7eff\u8272\u989c\u8272\u5206\u91cf\uff0c\u4f5c\u4e3a\u8303\u56f4\u5728 0.0 \u5230 1.0 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u3002\u8bf7\u6ce8\u610f\uff0c\u6ca1\u6709 alpha \u5206\u91cf\uff1bthree.js \u5c06\u900f\u660e\u5ea6\u4e0e\u989c\u8272\u5206\u5f00\u5904\u7406\u3002</p> <p>\u6709\u51e0\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a *THREE.Color \u5bf9\u8c61\u3002\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff0c\u7ed9\u51fa RGB \u5206\u91cf\uff0c\u4f5c\u4e3a\u8303\u56f4\u5728 0.0 \u5230 1.0 \u4e4b\u95f4\u7684\u5b9e\u6570\u3002\u5b83\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u4ee5 CSS \u989c\u8272\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u7ed9\u51fa\u989c\u8272\uff0c\u5982 2D \u753b\u5e03\u56fe\u5f62 API \u4e2d\u4f7f\u7528\u7684\uff1b\u793a\u4f8b\u5305\u62ec \"white\"\u3001\"red\"\u3001\"rgb(255,0,0)\" \u548c \"#FF0000\"\u3002\u6216\u8005\u989c\u8272\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u6574\u6570\u53c2\u6570\uff0c\u5176\u4e2d\u6bcf\u79cd\u989c\u8272\u5206\u91cf\u90fd\u4ee5\u6574\u6570\u4e2d\u7684\u4e00\u4e2a\u516b\u4f4d\u5b57\u6bb5\u7ed9\u51fa\u3002\u901a\u5e38\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8868\u793a\u989c\u8272\u7684\u6574\u6570\u4f1a\u5199\u6210\u4ee5 \"0x\" \u5f00\u5934\u7684\u5341\u516d\u8fdb\u5236\u5b57\u9762\u91cf\u3002\u793a\u4f8b\u5305\u62ec 0xff0000 \u8868\u793a\u7ea2\u8272\uff0c0x00ff00 \u8868\u793a\u7eff\u8272\uff0c0x0000ff \u8868\u793a\u84dd\u8272\uff0c0x007050 \u8868\u793a\u6df1\u84dd\u7eff\u8272\u3002\u4ee5\u4e0b\u662f\u4f7f\u7528\u989c\u8272\u6784\u9020\u51fd\u6570\u7684\u4e00\u4e9b\u793a\u4f8b\uff1a</p> <pre><code>let c1 = new THREE.Color(\"skyblue\");\nlet c2 = new THREE.Color(1,1,0);  // yellow\nlet c3 = new THREE.Color(0x98fb98);  // pale green\n</code></pre> <p>\u5728\u8bb8\u591a\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5982 THREE.Points \u6784\u9020\u51fd\u6570\uff0cthree.js* \u4f1a\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u6574\u6570\uff0c\u5f53\u9700\u8981\u4e00\u4e2a\u989c\u8272\u65f6\uff1b\u5b57\u7b26\u4e32\u6216\u6574\u6570\u5c06\u901a\u8fc7 Color \u6784\u9020\u51fd\u6570\u3002\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u4e00\u4e2a WebGLRenderer* \u5bf9\u8c61\u6709\u4e00\u4e2a \"clear color\" \u5c5e\u6027\uff0c\u5f53\u6e32\u67d3\u5668\u6e32\u67d3\u573a\u666f\u65f6\u7528\u4f5c\u80cc\u666f\u989c\u8272\u3002\u8fd9\u4e2a\u5c5e\u6027\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4efb\u4f55\u547d\u4ee4\u8bbe\u7f6e\uff1a</p> <pre><code>renderer.setClearColor( new THREE.Color(0.6, 0.4, 0.1) );\nrenderer.setClearColor( \"darkgray\" );\nrenderer.setClearColor( 0x99BBEE );\n</code></pre> <p>\u63a5\u4e0b\u6765\u662f\u7ebf\u6761\uff0c\u7c7b\u578b\u4e3a THREE.Line \u7684\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u7ebf\u5e26\u2014\u2014\u5728 OpenGL \u4e2d\u88ab\u79f0\u4e3a GL_LINE_STRIP \u7c7b\u578b\u7684\u539f\u7d20\u3002\u8981\u5f97\u5230\u76f8\u540c\u7684\u8fde\u63a5\u7ebf\u6bb5\u6761\u5e26\uff0c\u52a0\u4e0a\u4e00\u6761\u56de\u5230\u8d77\u59cb\u9876\u70b9\u7684\u7ebf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u4e3a THREE.LineLoop \u7684\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u8f6e\u5ed3\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u70b9\u5750\u6807\u7684 BufferGeometry\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a LineLoop\u3002</p> <p>\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u6750\u6599\u3002\u5bf9\u4e8e\u7ebf\u6761\uff0c\u6750\u6599\u53ef\u4ee5\u7531\u7c7b\u578b\u4e3a THREE.LineBasicMaterial \u7684\u5bf9\u8c61\u8868\u793a\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a JavaScript \u5bf9\u8c61\uff0c\u5176\u5c5e\u6027\u53ef\u4ee5\u5305\u62ec color \u548c linewidth\u3002\u4f8b\u5982\uff1a</p> <pre><code>let lineMat = new THREE.LineBasicMaterial({\n    color:  0xA000A0,  // purple; \u9ed8\u8ba4\u662f\u767d\u8272\n    linewidth: 2       // 2 \u50cf\u7d20\uff1b\u9ed8\u8ba4\u662f 1\n});\n</code></pre> <p>\uff08linewidth \u5c5e\u6027\u53ef\u80fd\u4e0d\u88ab\u5c0a\u91cd\u3002\u6839\u636e\u89c4\u8303\uff0cWebGL \u5b9e\u73b0\u53ef\u4ee5\u5c06\u6700\u5927\u7ebf\u5bbd\u8bbe\u7f6e\u4e3a 1\u3002\uff09</p> <p>\u50cf\u70b9\u4e00\u6837\uff0c\u901a\u8fc7\u5728\u51e0\u4f55\u4f53\u4e2d\u6dfb\u52a0\u4e00\u4e2a \"color\" \u5c5e\u6027\uff0c\u5e76\u5c06 vertexColors \u6750\u6599\u5c5e\u6027\u7684\u503c\u8bbe\u7f6e\u4e3a true\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u76ee\u7684\u6307\u5b9a\u4e0d\u540c\u7684\u989c\u8272\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5b83\u5236\u4f5c\u4e86\u4e00\u4e2a\u9876\u70b9\u989c\u8272\u5206\u522b\u4e3a\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u7684\u4e09\u89d2\u5f62\uff1a</p> <pre><code>let positionBuffer = new Float32Array([\n    -2, -2,   // \u7b2c\u4e00\u4e2a\u9876\u70b9\u7684\u5750\u6807\u3002\n    2, -2,   // \u7b2c\u4e8c\u4e2a\u9876\u70b9\u7684\u5750\u6807\u3002\n    0,  2    // \u7b2c\u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807\u3002\n]);\nlet colorBuffer = new Float32Array([\n    1, 0, 0,  // \u7b2c\u4e00\u4e2a\u9876\u70b9\u7684\u989c\u8272\uff08\u7ea2\u8272\uff09\u3002\n    0, 1, 0,  // \u7b2c\u4e8c\u4e2a\u9876\u70b9\u7684\u989c\u8272\uff08\u7eff\u8272\uff09\u3002\n    0, 0, 1   // \u7b2c\u4e09\u4e2a\u9876\u70b9\u7684\u989c\u8272\uff08\u84dd\u8272\uff09\u3002\n]);\nlet lineGeometry = new THREE.BufferGeometry();\nlineGeometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(positionBuffer,2)\n);\nlineGeometry.setAttribute(\n    \"color\",\n    new THREE.BufferAttribute(colorBuffer,3)\n);\nlet lineMaterial = new THREE.LineBasicMaterial({\n    linewidth: 3,\n    vertexColors: true\n});\nlet triangle = new THREE.LineLoop(lineGeometry, lineMaterial);\nscene.add(triangle);\n</code></pre> <p>\u8fd9\u4ea7\u751f\u4e86\u4ee5\u4e0b\u56fe\u50cf\uff1a</p> <p></p> <p>\"Basic\" \u5728 LineBasicMaterial \u4e2d\u8868\u793a\u8fd9\u79cd\u6750\u6599\u4f7f\u7528\u57fa\u672c\u989c\u8272\uff0c\u8fd9\u4e9b\u989c\u8272\u4e0d\u9700\u8981\u7167\u660e\u5c31\u80fd\u770b\u5230\uff0c\u4e5f\u4e0d\u4f1a\u53d7\u5230\u7167\u660e\u7684\u5f71\u54cd\u3002\u8fd9\u901a\u5e38\u662f\u7ebf\u6761\u60f3\u8981\u7684\u3002</p> <p>\u5728 three.js \u4e2d\uff0c\u7f51\u683c\u5bf9\u8c61\u5bf9\u5e94\u4e8e OpenGL \u57fa\u5143 GL_TRIANGLES\u3002\u7f51\u683c\u7684\u51e0\u4f55\u4f53\u5bf9\u8c61\u5fc5\u987b\u6307\u5b9a\u54ea\u4e9b\u9876\u70b9\u662f\u5c5e\u4e8e\u54ea\u4e9b\u4e09\u89d2\u5f62\u7684\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u770b\u5230\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u7136\u800c\uff0cthree.js \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7c7b\u6765\u8868\u793a\u5e38\u89c1\u7684\u7f51\u683c\u51e0\u4f55\u4f53\uff0c\u4f8b\u5982\u7403\u4f53\u3001\u5706\u67f1\u4f53\u548c\u5706\u73af\u9762\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u5185\u7f6e\u7c7b\uff0c\u60a8\u53ea\u9700\u8981\u8c03\u7528\u6784\u9020\u51fd\u6570\u5373\u53ef\u521b\u5efa\u9002\u5f53\u7684\u51e0\u4f55\u4f53\u3002\u4f8b\u5982\uff0c\u7c7b THREE.CylinderGeometry \u8868\u793a\u5706\u67f1\u4f53\u7684\u51e0\u4f55\u4f53\uff0c\u5176\u6784\u9020\u51fd\u6570\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>new THREE.CylinderGeometry(radiusTop, radiusBottom, height,\n        radiusSegments, heightSegments, openEnded, thetaStart, thetaLength)\n</code></pre> <p>\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u521b\u5efa\u7684\u51e0\u4f55\u4f53\u662f\u5bf9\u5706\u67f1\u4f53\u7684\u8fd1\u4f3c\u8868\u793a\uff0c\u5176\u8f74\u7ebf\u6cbf\u7740 y \u8f74\u3002\u5b83\u6cbf\u7740\u8be5\u8f74\u4ece \u2212height/2 \u5ef6\u4f38\u5230 height/2\u3002\u5176\u5706\u5f62\u9876\u90e8\u7684\u534a\u5f84\u662f radiusTop\uff0c\u5e95\u90e8\u7684\u534a\u5f84\u662f radiusBottom\u3002\u4e24\u4e2a\u534a\u5f84\u4e0d\u5fc5\u76f8\u540c\uff1b\u5f53\u5b83\u4eec\u4e0d\u540c\u65f6\uff0c\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u622a\u65ad\u7684\u5706\u9525\u800c\u4e0d\u662f\u771f\u6b63\u7684\u5706\u67f1\u4f53\u3002\u4f7f\u7528 radiusTop \u7684\u96f6\u503c\u53ef\u4ee5\u5236\u4f5c\u4e00\u4e2a\u5b9e\u9645\u7684\u5706\u9525\u3002\u53c2\u6570 radiusSegments \u548c heightSegments \u5206\u522b\u7ed9\u51fa\u5706\u67f1\u4f53\u5706\u5468\u548c\u957f\u5ea6\u4e0a\u7684\u7ec6\u5206\u6570\u2014\u2014\u5728 OpenGL \u7684 GLUT \u5e93\u4e2d\u79f0\u4e3a\u5207\u7247\u548c\u5806\u53e0\u3002\u53c2\u6570 openEnded \u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u662f\u5426\u7ed8\u5236\u5706\u67f1\u4f53\u7684\u9876\u90e8\u548c\u5e95\u90e8\uff1b\u4f7f\u7528\u503c true \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f00\u653e\u5f0f\u7684\u7ba1\u5b50\u3002\u6700\u540e\u4e24\u4e2a\u53c2\u6570\u5141\u8bb8\u60a8\u5236\u4f5c\u90e8\u5206\u5706\u67f1\u4f53\u3002\u5b83\u4eec\u7684\u503c\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\uff0c\u56f4\u7ed5 y \u8f74\u6d4b\u91cf\u3002\u4ec5\u6e32\u67d3\u4ece thetaStart \u5f00\u59cb\u5230 thetaStart \u52a0\u4e0a thetaLength \u7ed3\u675f\u7684\u5706\u67f1\u4f53\u90e8\u5206\u3002\u4f8b\u5982\uff0c\u5982\u679c thetaLength \u662f Math.PI\uff0c\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u534a\u5706\u67f1\u4f53\u3002</p> <p>\u6784\u9020\u51fd\u6570\u7684\u5927\u91cf\u53c2\u6570\u63d0\u4f9b\u4e86\u5f88\u591a\u7075\u6d3b\u6027\u3002\u6240\u6709\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\u3002\u524d\u4e09\u4e2a\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u6bcf\u4e2a\u90fd\u662f\u4e00\u3002radiusSegments \u7684\u9ed8\u8ba4\u503c\u662f 8\uff0c\u8fd9\u4e3a\u5e73\u6ed1\u5706\u67f1\u4f53\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f83\u5dee\u7684\u8fd1\u4f3c\u3002\u7701\u7565\u6700\u540e\u4e09\u4e2a\u53c2\u6570\u5c06\u5f97\u5230\u4e00\u4e2a\u4e24\u7aef\u5c01\u95ed\u7684\u5b8c\u6574\u5706\u67f1\u4f53\u3002</p> <p>\u5176\u4ed6\u6807\u51c6\u7f51\u683c\u51e0\u4f55\u4f53\u7c7b\u4f3c\u3002\u8fd9\u91cc\u662f\u4e00\u4e9b\u6784\u9020\u51fd\u6570\uff0c\u5217\u51fa\u4e86\u6240\u6709\u53c2\u6570\uff08\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5927\u591a\u6570\u53c2\u6570\u662f\u53ef\u9009\u7684\uff09\uff1a</p> <pre><code>new THREE.BoxGeometry(width, height, depth,\n                        widthSegments, heightSegments, depthSegments)\n\nnew THREE.PlaneGeometry(width, height, widthSegments, heightSegments)\n\nnew THREE.RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments,\n                        thetaStart, thetaLength)\n\nnew THREE.ConeGeometry(radiusBottom, height, radiusSegments, \n                        heightSegments, openEnded, thetaStart, thetaLength)\n\nnew THREE.SphereGeometry(radius, widthSegments, heightSegments,\n                        phiStart, phiLength, thetaStart, thetaLength)\n\nnew THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc)\n</code></pre> <p>\u7c7b BoxGeometry \u8868\u793a\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u7684\u77e9\u5f62\u76d2\u5b50\u7684\u51e0\u4f55\u4f53\u3002\u5b83\u7684\u6784\u9020\u51fd\u6570\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u7528\u4e8e\u7ed9\u51fa\u76d2\u5b50\u5728\u6bcf\u4e2a\u65b9\u5411\u4e0a\u7684\u5927\u5c0f\uff1b\u9ed8\u8ba4\u503c\u4e3a\u4e00\u3002\u6700\u540e\u4e09\u4e2a\u53c2\u6570\u7ed9\u51fa\u6bcf\u4e2a\u65b9\u5411\u4e0a\u7684\u7ec6\u5206\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a\u4e00\uff1b\u5927\u4e8e\u4e00\u7684\u503c\u5c06\u5bfc\u81f4\u76d2\u5b50\u7684\u9762\u88ab\u7ec6\u5206\u4e3a\u66f4\u5c0f\u7684\u4e09\u89d2\u5f62\u3002</p> <p>\u7c7b PlaneGeometry \u8868\u793a\u4f4d\u4e8e xy \u5e73\u9762\u4e0a\u3001\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u7684\u77e9\u5f62\u7684\u51e0\u4f55\u4f53\u3002\u5b83\u7684\u53c2\u6570\u4e0e\u7acb\u65b9\u4f53\u7c7b\u4f3c\u3002RingGeometry \u8868\u793a\u4e00\u4e2a\u5706\u73af\uff0c\u5373\u4ece\u4e2d\u5fc3\u53bb\u6389\u4e00\u4e2a\u8f83\u5c0f\u5706\u76d8\u7684\u5706\u76d8\u3002\u5706\u73af\u4f4d\u4e8e xy \u5e73\u9762\u4e0a\uff0c\u5176\u4e2d\u5fc3\u4f4d\u4e8e\u539f\u70b9\u3002\u60a8\u5e94\u8be5\u603b\u662f\u6307\u5b9a\u5706\u73af\u7684\u5185\u5916\u534a\u5f84\u3002</p> <p>ConeGeometry \u7684\u6784\u9020\u51fd\u6570\u4e0e CylinderGeometry \u7684\u6784\u9020\u51fd\u6570\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u5f62\u5f0f\u548c\u6548\u679c\uff0c\u53ea\u662f\u5c06 radiusTop \u8bbe\u7f6e\u4e3a\u96f6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u6784\u5efa\u4e86\u4e00\u4e2a\u4ee5 y \u8f74\u4e3a\u4e2d\u5fc3\u3001\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u7684\u5706\u9525\u3002</p> <p>\u5bf9\u4e8e SphereGeometry\uff0c\u6240\u6709\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\u3002\u6784\u9020\u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u3001y \u8f74\u4e3a\u8f74\u7684\u7403\u4f53\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u7ed9\u51fa\u7403\u4f53\u7684\u534a\u5f84\uff0c\u9ed8\u8ba4\u503c\u4e3a\u4e00\u3002\u63a5\u4e0b\u6765\u4e24\u4e2a\u53c2\u6570\u7ed9\u51fa\u5207\u7247\u548c\u5806\u53e0\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u503c\u5206\u522b\u4e3a 32 \u548c 16\u3002\u6700\u540e\u56db\u4e2a\u53c2\u6570\u5141\u8bb8\u60a8\u5236\u4f5c\u7403\u4f53\u7684\u4e00\u90e8\u5206\uff1b\u9ed8\u8ba4\u503c\u7ed9\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u7403\u4f53\u3002\u8fd9\u56db\u4e2a\u53c2\u6570\u662f\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\u7684\u89d2\u5ea6\u3002phiStart \u548c phiLength \u5728\u8d64\u9053\u5468\u56f4\u7684\u89d2\u5ea6\u6d4b\u91cf\uff0c\u5e76\u7ed9\u51fa\u751f\u6210\u7684\u7403\u58f3\u7684\u7ecf\u5ea6\u8303\u56f4\u3002\u4f8b\u5982\uff1a</p> <pre><code>new THREE.SphereGeometry( 5, 32, 16, 0, Math.PI )\n</code></pre> <p>\u521b\u5efa\u4e86\u7403\u4f53\u201c\u897f\u534a\u7403\u201d\u7684\u51e0\u4f55\u4f53\u3002\u6700\u540e\u4e24\u4e2a\u53c2\u6570\u662f\u6cbf\u7740\u4ece\u7403\u4f53\u5317\u6781\u5230\u5357\u6781\u7684\u7eac\u5ea6\u7ebf\u6d4b\u91cf\u7684\u89d2\u5ea6\u3002\u4f8b\u5982\uff0c\u8981\u5f97\u5230\u7403\u4f53\u7684\u201c\u5317\u534a\u7403\u201d\uff1a</p> <pre><code>new THREE.SphereGeometry( 5, 32, 16, 0, 2*Math.PI, 0, Math.PI/2 )\n</code></pre> <p>\u5bf9\u4e8e TorusGeometry\uff0c\u6784\u9020\u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u4f4d\u4e8e xy \u5e73\u9762\u4e0a\u3001\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u3001z \u8f74\u7a7f\u8fc7\u5176\u5b54\u7684\u5706\u73af\u9762\u3002\u53c2\u6570 radius \u662f\u5706\u73af\u4e2d\u5fc3\u5230\u5706\u73af\u7ba1\u4e2d\u5fc3\u7684\u8ddd\u79bb\uff0c\u800c tube \u662f\u7ba1\u7684\u534a\u5f84\u3002\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u53c2\u6570\u5206\u522b\u7ed9\u51fa\u6bcf\u4e2a\u65b9\u5411\u4e0a\u7684\u7ec6\u5206\u6570\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff0carc\uff0c\u5141\u8bb8\u60a8\u53ea\u5236\u4f5c\u5706\u73af\u7684\u4e00\u90e8\u5206\u3002\u5b83\u662f\u4e00\u4e2a\u5728 0 \u5230 2*Math.PI \u4e4b\u95f4\u7684\u89d2\u5ea6\uff0c\u6cbf\u7740\u5706\u73af\u7ba1\u4e2d\u5fc3\u7684\u5706\u5468\u6d4b\u91cf\u3002</p> <p>\u8fd8\u6709\u4ee3\u8868\u6b63\u591a\u9762\u4f53\u7684\u51e0\u4f55\u4f53\u7c7b\uff1aTHREE.TetrahedronGeometry\u3001THREE.OctahedronGeometry\u3001THREE.DodecahedronGeometry \u548c THREE.IcosahedronGeometry\u3002\uff08\u5bf9\u4e8e\u7acb\u65b9\u4f53\uff0c\u4f7f\u7528 BoxGeometry\u3002\uff09\u8fd9\u56db\u4e2a\u7c7b\u7684\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u6307\u5b9a\u591a\u9762\u4f53\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4\u503c\u4e3a 1\u3002\u5927\u5c0f\u4ee5\u5305\u542b\u591a\u9762\u4f53\u7684\u7403\u4f53\u7684\u534a\u5f84\u7ed9\u51fa\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u79f0\u4e3a detail\u3002\u9ed8\u8ba4\u503c 0 \u7ed9\u51fa\u5b9e\u9645\u7684\u6b63\u591a\u9762\u4f53\u3002\u8f83\u5927\u7684\u503c\u901a\u8fc7\u6dfb\u52a0\u989d\u5916\u7684\u9762\u6765\u589e\u52a0\u7ec6\u8282\u3002\u968f\u7740\u7ec6\u8282\u7684\u589e\u52a0\uff0c\u591a\u9762\u4f53\u6210\u4e3a\u5bf9\u7403\u4f53\u7684\u66f4\u597d\u8fd1\u4f3c\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u63d2\u56fe\u66f4\u5bb9\u6613\u7406\u89e3\uff1a</p> <p></p> <p>\u56fe\u50cf\u663e\u793a\u4e86\u4f7f\u7528\u7ec6\u8282\u53c2\u6570\u7b49\u4e8e 0\u30011\u30012 \u548c 3 \u7684\u4e8c\u5341\u9762\u4f53\u51e0\u4f55\u4f53\u7684\u56db\u4e2a\u7f51\u683c\u5bf9\u8c61\u3002</p> <p>\u8981\u521b\u5efa\u4e00\u4e2a\u7f51\u683c\u5bf9\u8c61\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u6750\u6599\u4ee5\u53ca\u4e00\u4e2a\u51e0\u4f55\u4f53\u3002\u6709\u51e0\u79cd\u6750\u6599\u9002\u5408\u7f51\u683c\u5bf9\u8c61\uff0c\u5305\u62ec THREE.MeshBasicMaterial\u3001THREE.MeshLambertMaterial \u548c THREE.MeshPhongMaterial\u3002\uff08\u8fd8\u6709\u66f4\u591a\u7f51\u683c\u6750\u6599\uff0c\u5305\u62ec\u4e24\u79cd\u8f83\u65b0\u7684\u6750\u6599\uff0cTHREE.MeshStandardMaterial \u548c THREE.MeshPhysicalMaterial\uff0c\u5b83\u4eec\u5b9e\u73b0\u4e86\u4e0e\u57fa\u4e8e\u7269\u7406\u7684\u6e32\u67d3\u76f8\u5173\u7684\u6280\u672f\uff0c\u8fd9\u662f\u4e00\u79cd\u5df2\u6210\u4e3a\u6d41\u884c\u7684\u6539\u8fdb\u6e32\u67d3\u65b9\u6cd5\u3002\u7136\u800c\uff0c\u6211\u5c06\u4e0d\u4f1a\u5728\u8fd9\u91cc\u4ecb\u7ecd\u5b83\u4eec\u3002\uff09</p> <p>MeshBasicMaterial \u8868\u793a\u4e00\u79cd\u4e0d\u53d7\u7167\u660e\u5f71\u54cd\u7684\u989c\u8272\uff1b\u65e0\u8bba\u573a\u666f\u4e2d\u662f\u5426\u6709\u706f\u5149\uff0c\u5b83\u770b\u8d77\u6765\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u5b83\u6ca1\u6709\u9634\u5f71\uff0c\u7ed9\u5b83\u4e00\u4e2a\u5e73\u5766\u7684\u800c\u4e0d\u662f3D\u7684\u5916\u89c2\u3002\u5176\u4ed6\u4e24\u4e2a\u7c7b\u4ee3\u8868\u9700\u8981\u88ab\u7167\u4eae\u624d\u80fd\u770b\u5230\u7684\u6750\u6599\u3002\u5b83\u4eec\u5b9e\u73b0\u4e86\u79f0\u4e3aLambert\u7740\u8272\u548cPhong\u7740\u8272\u7684\u7167\u660e\u6a21\u578b\u3002\u4e3b\u8981\u7684\u533a\u522b\u662f MeshPhongMaterial \u6709\u4e00\u4e2a\u955c\u9762\u989c\u8272\uff0c\u4f46 *MeshLambertMaterial \u6ca1\u6709\u3002\u5b83\u4eec\u90fd\u53ef\u4ee5\u6709\u6563\u5c04\u548c\u81ea\u53d1\u5149\u989c\u8272\u3002\u5bf9\u4e8e\u6240\u6709\u4e09\u79cd\u6750\u6599\u7c7b\uff0c\u6784\u9020\u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a JavaScript \u5bf9\u8c61\uff0c\u5b83\u6307\u5b9a\u4e86\u6750\u6599\u7684\u5c5e\u6027\u503c\u3002\u4f8b\u5982\uff1a</p> <pre><code>let mat = new THREE.MeshPhongMaterial({\n    color: 0xbbbb00,     // \u6563\u5c04\u548c\u73af\u5883\u5149\u7684\u53cd\u5c04\u7387\n    emissive: 0,         // \u81ea\u53d1\u5149\u989c\u8272\uff1b\u8fd9\u662f\u9ed8\u8ba4\u503c\uff08\u9ed1\u8272\uff09\n    specular: 0x303030,  // \u955c\u9762\u5149\u7684\u53cd\u5c04\u7387\n    shininess: 50        // \u63a7\u5236\u955c\u9762\u9ad8\u5149\u7684\u5927\u5c0f\n});\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u663e\u793a\u4e86 Phong \u6750\u6599\u7684\u56db\u4e2a\u989c\u8272\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u4e0e OpenGL \u4e2d\u7684\u4e94\u4e2a\u6750\u8d28\u5c5e\u6027\u5177\u6709\u76f8\u540c\u7684\u542b\u4e49\uff084.1.1\u5c0f\u8282\uff09\u3002Lambert \u6750\u6599\u7f3a\u5c11\u955c\u9762\u548c\u5149\u6cfd\u5ea6\uff0c\u57fa\u672c\u7f51\u683c\u6750\u6599\u53ea\u6709\u989c\u8272\u53c2\u6570\u3002</p> <p>\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u6750\u6599\u5c5e\u6027\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8bbe\u7f6e\u3002\u9664\u4e86 flatShading\uff0c\u8fd9\u4e9b\u9002\u7528\u4e8e\u6240\u6709\u4e09\u79cd\u7f51\u683c\u6750\u6599\uff1a</p> <ul> <li>vertexColors \u2014 \u4e00\u4e2a\u5e03\u5c14\u5c5e\u6027\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a true \u4ee5\u4f7f\u7528\u51e0\u4f55\u4f53\u4e2d\u7684\u9876\u70b9\u989c\u8272\u3002\u9ed8\u8ba4\u503c\u4e3a false\u3002</li> <li>wireframe \u2014 \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5e94\u5c06\u7f51\u683c\u7ed8\u5236\u4e3a\u7ebf\u6846\u6a21\u578b\uff0c\u53ea\u663e\u793a\u5176\u9762\u7684\u8f6e\u5ed3\u3002\u9ed8\u8ba4\u503c\u4e3a false\u3002\u4e00\u4e2a true \u503c\u6700\u9002\u5408\u4f7f\u7528 MeshBasicMaterial\u3002</li> <li>wireframeLinewidth \u2014 \u7528\u4e8e\u7ed8\u5236\u7ebf\u6846\u7684\u7ebf\u6761\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u3002\u9ed8\u8ba4\u503c\u4e3a 1\u3002\uff08\u975e\u9ed8\u8ba4\u503c\u53ef\u80fd\u4e0d\u88ab\u5c0a\u91cd\u3002\uff09</li> <li>visible \u2014 \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u63a7\u5236\u662f\u5426\u6e32\u67d3\u4f7f\u7528\u5b83\u7684\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u503c\u4e3a true\u3002</li> <li>side \u2014 \u503c\u4e3a THREE.FrontSide\u3001THREE.BackSide \u6216 THREE.DoubleSide\uff0c\u9ed8\u8ba4\u503c\u4e3a THREE.FrontSide\u3002\u8fd9\u51b3\u5b9a\u4e86\u662f\u5426\u6839\u636e\u9762\u53ef\u89c1\u7684\u4e00\u4fa7\u6765\u7ed8\u5236\u7f51\u683c\u9762\u3002\u4f7f\u7528\u9ed8\u8ba4\u503c THREE.FrontSide\uff0c\u53ea\u6709\u4ece\u524d\u9762\u770b\u65f6\u624d\u7ed8\u5236\u9762\u3002THREE.DoubleSide \u65e0\u8bba\u4ece\u524d\u9762\u8fd8\u662f\u4ece\u540e\u9762\u770b\u90fd\u4f1a\u7ed8\u5236\u5b83\uff0c\u800c THREE.BackSide \u4ec5\u4ece\u540e\u9762\u770b\u65f6\u7ed8\u5236\u3002\u5bf9\u4e8e\u5c01\u95ed\u5bf9\u8c61\uff0c\u5982\u7acb\u65b9\u4f53\u6216\u5b8c\u6574\u7403\u4f53\uff0c\u53ea\u8981\u89c2\u5bdf\u8005\u5728\u5bf9\u8c61\u5916\u90e8\uff0c\u9ed8\u8ba4\u503c\u5c31\u8bb2\u5f97\u901a\u3002\u5bf9\u4e8e\u5e73\u9762\u3001\u5f00\u653e\u7ba1\u6216\u90e8\u5206\u7403\u4f53\uff0c\u5e94\u8be5\u5c06\u503c\u8bbe\u7f6e\u4e3a THREE.DoubleSide\u3002\u5426\u5219\uff0c\u5e94\u8be5\u5728\u89c6\u56fe\u4e2d\u7684\u5bf9\u8c61\u90e8\u5206\u5c06\u4e0d\u4f1a\u88ab\u7ed8\u5236\u3002</li> <li>flatShading \u2014 \u4e00\u4e2a boolean \u503c\uff0c\u9ed8\u8ba4\u4e3a false\u3002\u8fd9\u5bf9 MeshBasicMaterial \u4e0d\u8d77\u4f5c\u7528\u3002\u5bf9\u4e8e\u5e94\u8be5\u770b\u8d77\u6765\u201c\u6709\u9762\u201d\u7684\u7269\u4f53\uff0c\u5177\u6709\u5e73\u5766\u4fa7\u9762\uff0c\u91cd\u8981\u7684\u662f\u5c06\u6b64\u5c5e\u6027\u8bbe\u7f6e\u4e3a true\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u7acb\u65b9\u4f53\u6216\u8fb9\u6570\u8f83\u5c11\u7684\u5706\u67f1\u4f53\uff0c\u5c31\u662f\u8fd9\u6837\u3002</li> </ul> <p>\u4f5c\u4e3a\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u5236\u4f5c\u4e00\u4e2a\u6709\u5149\u6cfd\u7684\u84dd\u7eff\u8272\u3001\u5f00\u653e\u7684\u3001\u4e94\u8fb9\u7684\u7ba1\u5b50\uff0c\u4fa7\u9762\u5e73\u5766\uff1a</p> <pre><code>let mat = new THREE.MeshPhongMaterial({\n    color: 0x0088aa,\n    specular: 0x003344,\n    shininess: 100,\n    flatShading: true,  // \u4f7f\u4fa7\u9762\u770b\u8d77\u6765\u5e73\u5766\n    side: THREE.DoubleSide  // \u7ed8\u5236\u7ba1\u5b50\u7684\u5185\u90e8\n});\nlet geom = new THREE.CylinderGeometry(3, 3, 10, 5, 1, true);\nlet obj = new THREE.Mesh(geom, mat);\nscene.add(obj);\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6f14\u793a\u6765\u67e5\u770b\u51e0\u4e2a three.js \u7f51\u683c\u5bf9\u8c61\uff0c\u4f7f\u7528\u5404\u79cd\u51e0\u4f55\u4f53\u548c\u6750\u6599\u3002\u5728\u5bf9\u8c61\u4e0a\u62d6\u52a8\u9f20\u6807\u4ee5\u65cb\u8f6c\u5b83\u3002\u60a8\u8fd8\u53ef\u4ee5\u63a2\u7d22\u6b63\u591a\u9762\u4f53\u51e0\u4f55\u4f53\u7684\u8be6\u7ec6\u7a0b\u5ea6\u3002</p> <p></p> <p>\u6f14\u793a\u53ef\u4ee5\u663e\u793a\u4e00\u4e2a\u7ebf\u6846\u7248\u672c\u7684\u7269\u4f53\uff0c\u53e0\u52a0\u5728\u5b9e\u4f53\u7248\u672c\u4e0a\u3002\u5728 three.js \u4e2d\uff0c\u7ebf\u6846\u548c\u5b9e\u4f53\u7248\u672c\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u76f8\u540c\u51e0\u4f55\u4f53\u4f46\u4e0d\u540c\u6750\u6599\u7684\u4e24\u4e2a\u5bf9\u8c61\u3002\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u6df1\u5ea6\u7ed8\u5236\u4e24\u4e2a\u5bf9\u8c61\u53ef\u80fd\u662f\u6df1\u5ea6\u6d4b\u8bd5\u7684\u95ee\u9898\u3002\u60a8\u53ef\u80fd\u8bb0\u5f97\u4ece 3.4.1\u5c0f\u8282 OpenGL \u4f7f\u7528\u591a\u8fb9\u5f62\u504f\u79fb\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5728 three.js \u4e2d\uff0c\u60a8\u53ef\u4ee5\u5c06\u591a\u8fb9\u5f62\u504f\u79fb\u5e94\u7528\u4e8e\u6750\u6599\u3002\u5728\u6f14\u793a\u4e2d\uff0c\u8fd9\u662f\u4e3a\u540c\u65f6\u663e\u793a\u7ebf\u6846\u6750\u6599\u7684\u5b9e\u4f53\u6750\u6599\u5b8c\u6210\u7684\u3002\u4f8b\u5982\uff0c</p> <pre><code>mat = new THREE.MeshLambertMaterial({\n    polygonOffset: true,\n    polygonOffsetUnits: 1,\n    polygonOffsetFactor: 1,\n    color: \"yellow\",\n    side: THREE.DoubleSide\n});\n</code></pre> <p>\u8fd9\u91cc\u663e\u793a\u7684 polygonOffset\u3001polygonOffsetUnits \u548c polygonOffsetFactor \u8bbe\u7f6e\u5c06\u7565\u5fae\u589e\u52a0\u4f7f\u7528\u6b64\u6750\u6599\u7684\u7269\u4f53\u7684\u6df1\u5ea6\uff0c\u4ee5\u4fbf\u5b83\u4e0d\u4e0e\u540c\u4e00\u7269\u4f53\u7684\u7ebf\u6846\u7248\u672c\u53d1\u751f\u5e72\u6270\u3002</p> <p>\u6700\u540e\u4e00\u70b9\uff1a\u60a8\u5e76\u4e0d\u603b\u662f\u9700\u8981\u5236\u4f5c\u65b0\u7684\u6750\u6599\u548c\u51e0\u4f55\u4f53\u6765\u5236\u4f5c\u65b0\u5bf9\u8c61\u3002\u60a8\u53ef\u4ee5\u5728\u591a\u4e2a\u5bf9\u8c61\u4e2d\u91cd\u7528\u76f8\u540c\u7684\u6750\u6599\u548c\u51e0\u4f55\u4f53\u3002</p> <p>A visible object in three.js is made up of either points, lines, or triangles. An individual object corresponds to an OpenGL primitive such as GL_POINTS, GL_LINES, or GL_TRIANGLES (see Subsection 3.1.1). There are five classes to represent these possibilities: THREE.Points for points, THREE.Mesh for triangles, and three classes for lines: THREE.Line, which uses the GL_LINE_STRIP primitive; THREE.LineSegments, which uses the GL_LINES primitive; and THREE.LineLoop, which uses the GL_LINE_LOOP primitive.</p> <p>A visible object is made up of some geometry plus a material that determines the appearance of that geometry. In three.js, the geometry and material of a visible object are themselves represented by JavaScript classes THREE.BufferGeometry and THREE.Material.</p> <p>An object of type THREE.BufferGeometry can store vertex coordinates and their attributes. (In fact, the vertex coordinates are also considered to be an \"attribute\" of the geometry.) These values must be stored in a form suitable for use with the OpenGL functions glDrawArrays and glDrawElements (see Subsection 3.4.2). For JavaScript, this means that they must be stored in typed arrays. A typed array is similar to a normal JavaScript array, except that its length is fixed and it can only hold numerical values of a certain type. For example, a Float32Array holds 32-bit floating point numbers, and a UInt16Array holds unsigned 16-bit integers. A typed array can be created with a constructor that specifies the length of the array. For example,</p> <pre><code>vertexCoords = new Float32Array(300);  // Space for 300 numbers.\n</code></pre> <p>Alternatively, the constructor can take an ordinary JavaScript array of numbers as its parameter. This creates a typed array that holds the same numbers. For example,</p> <pre><code>data = new Float32Array( [ 1.3, 7, -2.89, 0, 3, 5.5 ] );\n</code></pre> <p>In this case, the length of data is six, and it contains copies of the numbers from the JavaScript array.</p> <p>Specifying the vertices for a BufferGeometry is a multistep process. You need to create a typed array containing the coordinates of the vertices. Then you need to wrap that array inside an object of type THREE.BufferAttribute. Finally, you can add the attribute to the geometry. Here is an example:</p> <pre><code>let vertexCoords = new Float32Array([ 0,0,0, 1,0,0, 0,1,0 ]);\nlet vertexAttrib = new THREE.BufferAttribute(vertexCoords, 3);\nlet geometry = new THREE.BufferGeometry();\ngeometry.setAttribute( \"position\", vertexAttrib );\n</code></pre> <p>The second parameter to the BufferGeometry constructor is an integer that tells three.js the number of coordinates of each vertex. Recall that a vertex can be specified by 2, 3, or 4 coordinates, and you need to specify how many numbers are provided in the array for each vertex. Turning to the setAttribute() function, a BufferGeometry can have attributes specifying color, normal vectors, and texture coordinates, as well as other custom attributes. The first parameter to setAttribute() is the name of the attribute. Here, \"position\" is the name of the attribute that specifies the coordinates, or position, of the vertices.</p> <p>Similarly, to specify a color for each vertex, you can put the RGB components of the colors into a Float32Array, and use that to specify a value for the BufferGeometry attribute named \"color\".</p> <p>For a specific example, suppose that we want to represent a primitive of type GL_POINTS, using a three.js object of type THREE.Points. Let's say we want 10000 points placed at random inside the unit sphere, where each point can have its own random color. Here is some code that creates the necessary BufferGeometry:</p> <pre><code>let pointsBuffer = new Float32Array( 30000 );  // 3 numbers per vertex!\nlet colorBuffer = new Float32Array( 30000 );\nlet i = 0;\nwhile ( i &lt; 10000 ) {\n    let x = 2*Math.random() - 1;\n    let y = 2*Math.random() - 1;\n    let z = 2*Math.random() - 1;\n    if ( x*x + y*y + z*z &lt; 1 ) {  \n            // only use points inside the unit sphere\n        pointsBuffer[3*i] = x;\n        pointsBuffer[3*i+1] = y;\n        pointsBuffer[3*i+2] = z;\n        colorBuffer[3*i] = 0.25 + 0.75*Math.random();\n        colorBuffer[3*i+1] = 0.25 + 0.75*Math.random();\n        colorBuffer[3*i+2] = 0.25 + 0.75*Math.random();\n        i++;\n    }\n}\nlet pointsGeom = new THREE.BufferGeometry();\npointsGeom.setAttribute(\"position\", \n                        new THREE.BufferAttribute(pointsBuffer,3));\npointsGeom.setAttribute(\"color\", \n                        new THREE.BufferAttribute(colorBuffer,3));\n</code></pre> <p>In three.js, to make some geometry into a visible object, we also need an appropriate material. For example, for an object of type THREE.Points, we can use a material of type THREE.PointsMaterial, which is a subclass of Material. The material can specify the color and the size of the points, among other properties:</p> <pre><code>let pointsMat = new THREE.PointsMaterial( {\n            color: \"yellow\",\n            size: 2,\n            sizeAttenuation: false\n        } );\n</code></pre> <p>The parameter to the constructor is a JavaScript object whose properties are used to initialize the material. With the sizeAttenuation property set to false, the size is given in pixels; if it is true, then size represents the size in world coordinates and the point is scaled to reflect distance from the viewer. If the color is omitted, a default value of white is used. The default for size is 1 and for sizeAttenuation is true. The parameter to the constructor can be omitted entirely, to use all the defaults. A PointsMaterial is not affected by lighting; it simply shows the color specified by its color property.</p> <p>It is also possible to assign values to properties of the material after the object has been created. For example,</p> <pre><code>let pointsMat = new THREE.PointsMaterial();\npointsMat.color = new THREE.Color(\"yellow\");\npointsMat.size = 2;\npointsMat.sizeAttenuation = false;\n</code></pre> <p>Note that the color is set as a value of type THREE.Color, which is constructed from a string, \"yellow\". When the color property is set in the material constructor, the same conversion of string to color is done automatically.</p> <p>Once we have the geometry and the material, we can use them to create the visible object, of type THREE.Points, and add it to a scene:</p> <pre><code>let sphereOfPoints = new THREE.Points( pointsGeom, pointsMat );\nscene.add( sphereOfPoints );\n</code></pre> <p>This will show a cloud of yellow points. But we wanted each point to have its own color! Recall that the colors for the points are stored in the geometry, not in the material. We have to tell the material to use the colors from the geometry, not the material's own color property. This is done by setting the value of the material property vertexColors to true. So, we could create the material using</p> <pre><code>let pointsMat = new THREE.PointsMaterial( {\n            color: \"white\",\n            size: 2,\n            sizeAttenuation: false,\n            vertexColors: true\n        } );\n</code></pre> <p>White is used here as the material color because the vertex colors are actually multiplied by the material color, not simply substituted for it.</p> <p>The following demo shows a point cloud. You can control whether the points are all yellow or are randomly colored. You can animate the points, and you can control the size and number of points. Note that points are rendered as squares.</p> <p></p> <p>The color parameter in the above material was specified by the string \"yellow\". Colors in three.js can be represented by values of type THREE.Color. The class THREE.Color represents an RGB color. A Color object c has properties c.r, c.g, and c.b giving the red, blue, and green color components as floating point numbers in the range from 0.0 to 1.0. Note that there is no alpha component; three.js handles transparency separately from color.</p> <p>There are several ways to construct a THREE.Color object. The constructor can take three parameters giving the RGB components as real numbers in the range 0.0 to 1.0. It can take a single string parameter giving the color as a CSS color string, like those used in the 2D canvas graphics API; examples include \"white\", \"red\", \"rgb(255,0,0)\", and \"#FF0000\". Or the color constructor can take a single integer parameter in which each color component is given as an eight-bit field in the integer. Usually, an integer that is used to represent a color in this way is written as a hexadecimal literal, beginning with \"0x\". Examples include 0xff0000 for red, 0x00ff00 for green, 0x0000ff for blue, and 0x007050 for a dark blue-green. Here are some examples of using color constructors:</p> <pre><code>let c1 = new THREE.Color(\"skyblue\");\nlet c2 = new THREE.Color(1,1,0);  // yellow\nlet c3 = new THREE.Color(0x98fb98);  // pale green\n</code></pre> <p>In many contexts, such as the THREE.Points constructor, three.js will accept a string or integer where a color is required; the string or integer will be fed through the Color constructor. As another example, a WebGLRenderer object has a \"clear color\" property that is used as the background color when the renderer renders a scene. This property could be set using any of the following commands:</p> <pre><code>renderer.setClearColor( new THREE.Color(0.6, 0.4, 0.1) );\nrenderer.setClearColor( \"darkgray\" );\nrenderer.setClearColor( 0x99BBEE );\n</code></pre> <p>Turning next to lines, an object of type THREE.Line represents a line strip\u2014what would be a primitive of the type called GL_LINE_STRIP in OpenGL. To get the same strip of connected line segments, plus a line back to the starting vertex, we can use an object of type THREE.LineLoop. For the outline of a triangle, for example, we could provide a BufferGeometry holding coordinates for three points and use a LineLoop.</p> <p>We will also need a material. For lines, the material can be represented by an object of type THREE.LineBasicMaterial. As usual, the parameter for the constructor is a JavaScript object, whose properties can include color and linewidth. For example:</p> <pre><code>let lineMat = new THREE.LineBasicMaterial( {\n    color:  0xA000A0,  // purple; the default is white\n    linewidth: 2       // 2 pixels; the default is 1\n} );\n</code></pre> <p>(The linewidth property might not be respected. According to the specification, a WebGL implementation can set the maximum line width to 1.)</p> <p>As with points, it is possible to specify a different color for each purpose by adding a \"color\" attribute to the geometry and setting the value of the vertexColors material property to true. Here is a complete example that makes a triangle with vertices colored red, green, and blue:</p> <pre><code>let positionBuffer = new Float32Array([\n        -2, -2,   // Coordinates for first vertex.\n        2, -2,   // Coordinates for second vertex.\n        0,  2    // Coordinates for third vertex.\n    ]);\nlet colorBuffer = new Float32Array([\n        1, 0, 0,  // Color for first vertex (red).\n        0, 1, 0,  // Color for second vertex (green).\n        0, 0, 1   // Color for third vertex (blue).\n]);    \nlet lineGeometry = new THREE.BufferGeometry();\nlineGeometry.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(positionBuffer,2)\n    );\nlineGeometry.setAttribute(\n        \"color\",\n        new THREE.BufferAttribute(colorBuffer,3)\n    );\nlet lineMaterial = new THREE.LineBasicMaterial( {\n        linewidth: 3,\n        vertexColors: true\n    } );\nlet triangle = new THREE.LineLoop( lineGeometry, lineMaterial );\nscene.add(triangle);\n</code></pre> <p>This produces the image:</p> <p></p> <p>The \"Basic\" in LineBasicMaterial indicates that this material uses basic colors that do not require lighting to be visible and are not affected by lighting. This is generally what you want for lines.</p> <p>A mesh object in three.js corresponds to the OpenGL primitive GL_TRIANGLES. The geometry object for a mesh must specify which vertices are part of which triangles. We will see how to do that in the next section. However, three.js comes with classes to represent common mesh geometries, such as a sphere, a cylinder, and a torus. For these built-in classes, you just need to call a constructor to create the appropriate geometry. For example, the class THREE.CylinderGeometry represents the geometry for a cylinder, and its constructor takes the form</p> <pre><code>new THREE.CylinderGeometry(radiusTop, radiusBottom, height,\n        radiusSegments, heightSegments, openEnded, thetaStart, thetaLength)\n</code></pre> <p>The geometry created by this constructor represents an approximation for a cylinder that has its axis lying along the y-axis. It extends from \u2212height/2 to height/2 along that axis. The radius of its circular top is radiusTop and of its bottom is radiusBottom. The two radii don't have to be the same; when the are different, you get a truncated cone rather than a cylinder as such. Using a value of zero for radiusTop makes an actual cone. The parameters radiusSegments and heightSegments give the number of subdivisions around the circumference of the cylinder and along its length respectively\u2014what are called slices and stacks in the GLUT library for OpenGL. The parameter openEnded is a boolean value that indicates whether the top and bottom of the cylinder are to be drawn; use the value true to get an open-ended tube. Finally, the last two parameters allow you to make a partial cylinder. Their values are given as angles, measured in radians, about the y-axis. Only the part of the cylinder beginning at thetaStart and ending at thetaStart plus thetaLength is rendered. For example, if thetaLength is Math.PI, you will get a half-cylinder.</p> <p>The large number of parameters to the constructor gives a lot of flexibility. The parameters are all optional. The default value for each of the first three parameters is one. The default for radiusSegments is 8, which gives a poor approximation for a smooth cylinder. Leaving out the last three parameters will give a complete cylinder, closed at both ends.</p> <p>Other standard mesh geometries are similar. Here are some constructors, listing all parameters (but keep in mind that most of the parameters are optional):</p> <pre><code>new THREE.BoxGeometry(width, height, depth,\n                        widthSegments, heightSegments, depthSegments)\n\nnew THREE.PlaneGeometry(width, height, widthSegments, heightSegments)\n\nnew THREE.RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments,\n                        thetaStart, thetaLength)\n\nnew THREE.ConeGeometry(radiusBottom, height, radiusSegments, \n                        heightSegments, openEnded, thetaStart, thetaLength)\n\nnew THREE.SphereGeometry(radius, widthSegments, heightSegments,\n                        phiStart, phiLength, thetaStart, thetaLength)\n\nnew THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc)\n</code></pre> <p>The class BoxGeometry represents the geometry of a rectangular box centered at the origin. Its constructor has three parameters to give the size of the box in each direction; their default value is one. The last three parameters give the number of subdivisions in each direction, with a default of one; values greater than one will cause the faces of the box to be subdivided into smaller triangles.</p> <p>The class PlaneGeometry represents the geometry of a rectangle lying in the xy-plane, centered at the origin. Its parameters are similar to those for a cube. A RingGeometry represents an annulus, that is, a disk with a smaller disk removed from its center. The ring lies in the xy-plane, with its center at the origin. You should always specify the inner and outer radii of the ring.</p> <p>The constructor for ConeGeometry has exactly the same form and effect as the constructor for CylinderGeometry, with the radiusTop set to zero. That is, it constructs a cone with axis along the y-axis and centered at the origin.</p> <p>For SphereGeometry, all parameters are optional. The constructor creates a sphere centered at the origin, with axis along the y-axis. The first parameter, which gives the radius of the sphere, has a default of one. The next two parameters give the numbers of slices and stacks, with default values 32 and 16. The last four parameters allow you to make a piece of a sphere; the default values give a complete sphere. The four parameters are angles measured in radians. phiStart and phiLength are measured in angles around the equator and give the extent in longitude of the spherical shell that is generated. For example,</p> <pre><code>new THREE.SphereGeometry( 5, 32, 16, 0, Math.PI )\n</code></pre> <p>creates the geometry for the \"western hemisphere\" of a sphere. The last two parameters are angles measured along a line of latitude from the north pole of the sphere to the south pole. For example, to get the sphere's \"northern hemisphere\":</p> <pre><code>new THREE.SphereGeometry( 5, 32, 16, 0, 2*Math.PI, 0, Math.PI/2 )\n</code></pre> <p>For TorusGeometry, the constructor creates a torus lying in the xy-plane, centered at the origin, with the z-axis passing through its hole. The parameter radius is the distance from the center of the torus to the center of the torus's tube, while tube is the radius of the tube. The next two parameters give the number of subdivisions in each direction. The last parameter, arc, allows you to make just part of a torus. It is an angle between 0 and 2*Math.PI, measured along the circle at the center of the tube.</p> <p>There are also geometry classes representing the regular polyhedra: THREE.TetrahedronGeometry, THREE.OctahedronGeometry, THREE.DodecahedronGeometry, and THREE.IcosahedronGeometry. (For a cube use a BoxGeometry.) The constructors for these four classes take two parameters. The first specifies the size of the polyhedron, with a default of 1. The size is given as the radius of the sphere that contains the polyhedron. The second parameter is an integer called detail. The default value, 0, gives the actual regular polyhedron. Larger values add detail by adding additional faces. As the detail increases, the polyhedron becomes a better approximation for a sphere. This is easier to understand with an illustration:</p> <p></p> <p>The image shows four mesh objects that use icosahedral geometries with detail parameter equal to 0, 1, 2, and 3.</p> <p>To create a mesh object, you need a material as well as a geometry. There are several kinds of material suitable for mesh objects, including THREE.MeshBasicMaterial, THREE.MeshLambertMaterial, and THREE.MeshPhongMaterial. (There are more mesh materials, including two newer ones, THREE.MeshStandardMaterial and THREE.MeshPhysicalMaterial, that implement techniques associated with physically based rendering, an approach to improved rendering that has become popular. However, I will not cover them here.)</p> <p>A MeshBasicMaterial represents a color that is not affected by lighting; it looks the same whether or not there are lights in the scene, and it is not shaded, giving it a flat rather than 3D appearance. The other two classes represent materials that need to be lit to be seen. They implement models of lighting known as Lambert shading and Phong shading. The major difference is that MeshPhongMaterial has a specular color but MeshLambertMaterial** does not. Both can have diffuse and emissive colors. For all three material classes, the constructor has one parameter, a JavaScript object that specifies values for properties of the material. For example:</p> <pre><code>let mat = new THREE.MeshPhongMaterial( {\n        color: 0xbbbb00,     // reflectivity for diffuse and ambient light\n        emissive: 0,         // emission color; this is the default (black)\n        specular: 0x303030,  // reflectivity for specular light\n        shininess: 50        // controls size of specular highlights\n    } );\n</code></pre> <p>This example shows the four color parameters for a Phong material. The parameters have the same meaning as the five material properties in OpenGL (Subsection 4.1.1). A Lambert material lacks specular and shininess, and a basic mesh material has only the color parameter.</p> <p>There are a few other material properties that you might need to set in the constructor. Except for flatShading, these apply to all three kinds of mesh material:</p> <ul> <li>vertexColors \u2014 a boolean property that can be set to true to use vertex colors from the geometry. The default is false.</li> <li>wireframe \u2014 a boolean value that indicates whether the mesh should be drawn as a wireframe model, showing only the outlines of its faces. The default is false. A true value works best with MeshBasicMaterial.</li> <li>wireframeLinewidth \u2014 the width of the lines used to draw the wireframe, in pixels. The default is 1. (Non-default values might not be respected.)</li> <li>visible \u2014 a boolean value that controls whether the object on which it is used is rendered or not, with a default of true.</li> <li>side \u2014 has value THREE.FrontSide, THREE.BackSide, or THREE.DoubleSide, with the default being THREE.FrontSide. This determines whether faces of the mesh are drawn or not, depending on which side of the face is visible. With the default value, THREE.FrontSide, a face is drawn only if it is being viewed from the front. THREE.DoubleSide will draw it whether it is viewed from the front or from the back, and THREE.BackSide only if it is viewed from the back. For closed objects, such as a cube or a complete sphere, the default value makes sense, at least as long as the viewer is outside of the object. For a plane, an open tube, or a partial sphere, the value should be set to THREE.DoubleSide. Otherwise, parts of the object that should be in view won't be drawn.</li> <li>flatShading \u2014 a boolean value, with the default being false. This does not work for MeshBasicMaterial. For an object that is supposed to look \"faceted,\" with flat sides, it is important to set this property to true. That would be the case, for example, for a cube or for a cylinder with a small number of sides.</li> </ul> <p>As an example, let's make a shiny, blue-green, open, five-sided tube with flat sides:</p> <pre><code>let mat = new THREE.MeshPhongMaterial( {\n    color: 0x0088aa, \n    specular: 0x003344, \n    shininess: 100,\n    flatShading: true,  // for flat-looking sides\n    side: THREE.DoubleSide  // for drawing the inside of the tube\n    } );\nlet geom = new THREE.CylinderGeometry(3,3,10,5,1,true);\nlet obj = new THREE.Mesh(geom,mat);\nscene.add(obj);\n</code></pre> <p>You can use the following demo to view several three.js mesh objects, using a variety of geometries and materials. Drag your mouse on the object to rotate it. You can also explore the level of detail for the regular polyhedron geometries.</p> <p></p> <p>The demo can show a wireframe version of an object overlaid on a solid version. In three.js, the wireframe and solid versions are actually two objects that use the same geometry but different materials. Drawing two objects at exactly the same depth can be a problem for the depth test. You might remember from Subsection 3.4.1 that OpenGL uses polygon offset to solve the problem. In three.js, you can apply polygon offset to a material. In the demos, this is done for the solid materials that are shown at the same time as wireframe materials. For example,</p> <pre><code>mat = new THREE.MeshLambertMaterial({\n    polygonOffset: true,  \n    polygonOffsetUnits: 1,\n    polygonOffsetFactor: 1,\n    color: \"yellow\",\n    side: THREE.DoubleSide\n});\n</code></pre> <p>The settings shown here for polygonOffset, polygonOffsetUnits, and polygonOffsetFactor will increase the depth of the object that uses this material slightly so that it doesn't interfere with the wireframe version of the same object.</p> <p>One final note: You don't always need to make new materials and geometries to make new objects. You can reuse the same materials and geometries in multiple objects.</p>"},{"location":"cn/c5/s1/#515-\u706f\u5149","title":"5.1.5 \u706f\u5149","text":"<p>Lights</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0e\u51e0\u4f55\u4f53\u548c\u6750\u6599\u76f8\u6bd4\uff0c\u706f\u5149\u5c31\u5bb9\u6613\u591a\u4e86\uff01Three.js \u6709\u51e0\u4e2a\u7c7b\u6765\u8868\u793a\u706f\u5149\u3002\u706f\u5149\u7c7b\u662f THREE.Object3D \u7684\u5b50\u7c7b\u3002\u4e00\u4e2a\u706f\u5149\u5bf9\u8c61\u53ef\u4ee5\u88ab\u6dfb\u52a0\u5230\u573a\u666f\u4e2d\uff0c\u7136\u540e\u7167\u4eae\u573a\u666f\u4e2d\u7684\u5bf9\u8c61\u3002\u6211\u4eec\u5c06\u770b\u770b \u5b9a\u5411\u5149\u3001\u70b9\u5149\u3001\u73af\u5883\u5149 \u548c \u805a\u5149\u706f\u3002</p> <p>\u7c7b THREE.DirectionalLight \u8868\u793a\u4ece\u7ed9\u5b9a\u65b9\u5411\u5e73\u884c\u7167\u5c04\u7684\u5149\uff0c\u5c31\u50cf\u592a\u9633\u5149\u4e00\u6837\u3002\u5b9a\u5411\u5149\u7684\u4f4d\u7f6e\u5c5e\u6027\u7ed9\u51fa\u4e86\u5149\u7ebf\u7167\u5c04\u7684\u65b9\u5411\u3002\uff08\u8fd9\u662f\u6240\u6709\u573a\u666f\u56fe\u5bf9\u8c61\u90fd\u6709\u7684\u76f8\u540c \u4f4d\u7f6e \u5c5e\u6027\uff0c\u7c7b\u578b\u4e3a Vector3\uff0c\u4f46\u5bf9\u4e8e\u5b9a\u5411\u5149\uff0c\u5176\u542b\u4e49\u4e0d\u540c\u3002\uff09\u8bf7\u6ce8\u610f\uff0c\u5149\u7ebf\u4ece\u7ed9\u5b9a\u4f4d\u7f6e\u5411\u539f\u70b9\u7167\u5c04\u3002\u9ed8\u8ba4\u4f4d\u7f6e\u662f\u5411\u91cf (0,1,0)\uff0c\u5b83\u63d0\u4f9b\u4e86\u6cbf y \u8f74\u5411\u4e0b\u7167\u5c04\u7684\u5149\u3002\u8fd9\u4e2a\u7c7b\u7684\u6784\u9020\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff1a</p> <pre><code>new THREE.DirectionalLight(color, intensity)\n</code></pre> <p>\u5176\u4e2d color \u6307\u5b9a\u5149\u7684\u989c\u8272\uff0c\u53ef\u4ee5\u662f THREE.Color \u5bf9\u8c61\uff0c\u6216\u5341\u516d\u8fdb\u5236\u6574\u6570\uff0c\u6216 CSS \u989c\u8272\u5b57\u7b26\u4e32\u3002\u4e0e OpenGL \u4e2d\u4e0d\u540c\uff0c\u706f\u5149\u6ca1\u6709\u5355\u72ec\u7684\u6563\u5c04\u548c\u955c\u9762\u989c\u8272\u3002intensity \u662f\u4e00\u4e2a\u975e\u8d1f\u6570\uff0c\u63a7\u5236\u5149\u7684\u4eae\u5ea6\uff0c\u8f83\u5927\u7684\u503c\u4f7f\u5149\u66f4\u4eae\u3002\u5f3a\u5ea6\u4e3a\u96f6\u7684\u5149\u6839\u672c\u4e0d\u53d1\u5149\u3002\u53c2\u6570\u662f\u53ef\u9009\u7684\u3002\u989c\u8272\u7684\u9ed8\u8ba4\u503c\u4e3a\u767d\u8272 (0xffffff)\uff0cintensity \u7684\u9ed8\u8ba4\u503c\u4e3a 1\u3002\u5f3a\u5ea6\u53ef\u4ee5\u5927\u4e8e 1\uff0c\u4f46\u901a\u5e38\u6700\u597d\u5c0f\u4e8e 1\uff0c\u4ee5\u907f\u514d\u573a\u666f\u4e2d\u7684\u7167\u660e\u8fc7\u5f3a\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u5728\u6b63 z \u8f74\u4e0a\u6709\u4e00\u4e2a\u76f8\u673a\uff0c\u671d\u5411\u539f\u70b9\uff0c\u6211\u4eec\u5e0c\u671b\u4e00\u4e2a\u4e0e\u76f8\u673a\u671d\u5411\u76f8\u540c\u65b9\u5411\u7684\u5149\u7ebf\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6e\u5728\u6b63 z \u8f74\u4e0a\u7684\u5b9a\u5411\u5149\uff1a</p> <pre><code>let light = new THREE.DirectionalLight(); // \u9ed8\u8ba4\u767d\u8272\u5149\nlight.position.set(0, 0, 1);\nscene.add(light);\n</code></pre> <p>\u7c7b THREE.PointLight \u8868\u793a\u4ece\u70b9\u5411\u6240\u6709\u65b9\u5411\u7167\u5c04\u7684\u5149\u3002\u8be5\u70b9\u7684\u4f4d\u7f6e\u7531\u5149\u7684 position \u5c5e\u6027\u7ed9\u51fa\u3002\u6784\u9020\u51fd\u6570\u6709\u4e09\u4e2a\u53ef\u9009\u53c2\u6570\uff1a</p> <pre><code>new THREE.PointLight(color, intensity, cutoff)\n</code></pre> <p>\u524d\u4e24\u4e2a\u53c2\u6570\u4e0e\u5b9a\u5411\u5149\u76f8\u540c\uff0c\u9ed8\u8ba4\u503c\u4e5f\u76f8\u540c\u3002cutoff \u662f\u4e00\u4e2a\u975e\u8d1f\u6570\u3002\u5982\u679c\u503c\u4e3a\u96f6\uff08\u8fd9\u4e5f\u662f\u9ed8\u8ba4\u503c\uff09\uff0c\u90a3\u4e48\u5149\u7684\u7167\u660e\u8303\u56f4\u5ef6\u4f38\u5230\u65e0\u9650\u8fdc\uff0c\u5e76\u4e14\u5f3a\u5ea6\u4e0d\u4f1a\u968f\u7740\u8ddd\u79bb\u800c\u51cf\u5c11\u3002\u867d\u7136\u8fd9\u5728\u7269\u7406\u4e0a\u4e0d\u73b0\u5b9e\uff0c\u4f46\u901a\u5e38\u5728\u5b9e\u8df5\u4e2d\u6548\u679c\u826f\u597d\u3002\u5982\u679c cutoff \u5927\u4e8e\u96f6\uff0c\u90a3\u4e48\u5149\u7684\u5f3a\u5ea6\u4ece\u5149\u7684\u4f4d\u7f6e\u7684\u6700\u5927\u503c\u4e0b\u964d\u5230\u8ddd\u79bb\u5149\u7684 cutoff \u8ddd\u79bb\u5904\u7684\u5f3a\u5ea6\u4e3a\u96f6\uff1b\u5149\u5bf9\u8ddd\u79bb\u5927\u4e8e cutoff \u7684\u7269\u4f53\u6ca1\u6709\u5f71\u54cd\u3002\u8fd9\u79cd\u5149\u5f3a\u5ea6\u968f\u8ddd\u79bb\u51cf\u5c0f\u88ab\u79f0\u4e3a\u5149\u6e90\u7684 \u8870\u51cf\u3002</p> <p>\u7b2c\u4e09\u79cd\u7c7b\u578b\u7684\u5149\u662f THREE.AmbientLight\u3002\u8fd9\u4e2a\u7c7b\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u5411\u573a\u666f\u6dfb\u52a0\u73af\u5883\u5149\u3002\u73af\u5883\u5149\u53ea\u6709\u989c\u8272\uff1a</p> <pre><code>new THREE.AmbientLight(color)\n</code></pre> <p>\u5411\u573a\u666f\u4e2d\u6dfb\u52a0\u73af\u5883\u5149\u5bf9\u8c61\u4f1a\u5411\u573a\u666f\u4e2d\u6dfb\u52a0\u6307\u5b9a\u989c\u8272\u7684\u73af\u5883\u5149\u3002\u73af\u5883\u5149\u7684\u989c\u8272\u5206\u91cf\u5e94\u8be5\u76f8\u5f53\u5c0f\uff0c\u4ee5\u907f\u514d\u51b2\u6de1\u7269\u4f53\u7684\u989c\u8272\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u5728 (10,30,15) \u5904\u60f3\u8981\u4e00\u4e2a\u968f\u7740\u8ddd\u79bb\u51cf\u5c0f\u7684\u9ec4\u5149\u70b9\u5149\uff0c\u8303\u56f4\u5230 100 \u5355\u4f4d\u7684\u8ddd\u79bb\u3002\u6211\u4eec\u8fd8\u60f3\u5411\u573a\u666f\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u9ec4\u8272\u7684\u73af\u5883\u5149\uff1a</p> <pre><code>let light = new THREE.PointLight(0xffffcc, 1, 100);\nlight.position.set(10, 30, 15);\nscene.add(light);\nscene.add(new THREE.AmbientLight(0x111100));\n</code></pre> <p>\u7b2c\u56db\u79cd\u7c7b\u578b\u7684\u5149\uff0cTHREE.SpotLight\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u65b0\u4e8b\u7269\u3002\u8be5\u7c7b\u578b\u7684\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a \u805a\u5149\u706f\uff0c\u5b83\u7c7b\u4f3c\u4e8e\u70b9\u5149\uff0c\u53ea\u662f\u5b83\u4e0d\u662f\u5411\u6240\u6709\u65b9\u5411\u53d1\u5149\uff0c\u800c\u662f\u53ea\u4ea7\u751f\u4e00\u4e2a\u5149\u9525\u3002\u5149\u9525\u7684\u9876\u70b9\u4f4d\u4e8e\u5149\u7684\u4f4d\u7f6e\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5149\u9525\u7684\u8f74\u7ebf\u4ece\u8be5\u4f4d\u7f6e\u6307\u5411\u539f\u70b9\uff08\u6240\u4ee5\u9664\u975e\u4f60\u6539\u53d8\u8f74\u7ebf\u7684\u65b9\u5411\uff0c\u5426\u5219\u5e94\u8be5\u5c06\u5149\u7684\u4f4d\u7f6e\u4ece\u539f\u70b9\u79fb\u5f00\uff09\u3002\u6784\u9020\u51fd\u6570\u4e3a\u70b9\u5149\u6dfb\u52a0\u4e86\u4e24\u4e2a\u53c2\u6570\uff1a</p> <pre><code>new THREE.SpotLight(color, intensity, cutoff, coneAngle, exponent)\n</code></pre> <p>coneAngle \u662f\u4e00\u4e2a\u4ecb\u4e8e 0 \u548c Math.PI/2 \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u5b83\u51b3\u5b9a\u4e86\u5149\u9525\u7684\u5927\u5c0f\u3002\u5b83\u662f\u5149\u9525\u8f74\u7ebf\u4e0e\u5149\u9525\u4fa7\u9762\u4e4b\u95f4\u7684\u89d2\u5ea6\u3002\u9ed8\u8ba4\u503c\u662f Math.PI/3\u3002exponent \u662f\u4e00\u4e2a\u975e\u8d1f\u6570\uff0c\u5b83\u51b3\u5b9a\u4e86\u5f53\u4f60\u4ece\u5149\u9525\u8f74\u7ebf\u5411\u4fa7\u9762\u79fb\u52a8\u65f6\uff0c\u5149\u5f3a\u5ea6\u51cf\u5c11\u7684\u901f\u5ea6\u3002\u9ed8\u8ba4\u503c 10 \u7ed9\u51fa\u4e86\u5408\u7406\u7684\u7ed3\u679c\u3002exponent \u4e3a\u96f6\u5219\u6839\u672c\u6ca1\u6709\u8870\u51cf\uff0c\u4ee5\u81f3\u4e8e\u4e0e\u8f74\u7ebf\u8ddd\u79bb\u4e0d\u540c\u7684\u7269\u4f53\u88ab\u5747\u5300\u7167\u660e\u3002</p> <p>\u8bbe\u7f6e three.js \u805a\u5149\u706f\u65b9\u5411\u7684\u6280\u672f\u6709\u70b9\u5947\u602a\uff0c\u4f46\u5b83\u786e\u5b9e\u4f7f\u63a7\u5236\u65b9\u5411\u53d8\u5f97\u5bb9\u6613\u3002\u7c7b\u578b\u4e3a SpotLight \u7684\u5bf9\u8c61 spot \u6709\u4e00\u4e2a\u540d\u4e3a spot.target \u7684\u5c5e\u6027\u3002\u76ee\u6807\u662f\u573a\u666f\u56fe\u8282\u70b9\u3002\u805a\u5149\u706f\u7684\u5149\u9525\u6307\u5411\u4ece\u805a\u5149\u706f\u4f4d\u7f6e\u5230\u76ee\u6807\u4f4d\u7f6e\u7684\u65b9\u5411\u3002\u5f53\u805a\u5149\u706f\u9996\u6b21\u521b\u5efa\u65f6\uff0c\u5176\u76ee\u6807\u662f\u4e00\u4e2a\u65b0\u7684\u3001\u7a7a\u7684 Object3D\uff0c\u4f4d\u7f6e\u5728 (0,0,0)\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a\u573a\u666f\u56fe\u4e2d\u7684\u4efb\u4f55\u5bf9\u8c61\uff0c\u8fd9\u5c06\u4f7f\u805a\u5149\u706f\u671d\u5411\u8be5\u5bf9\u8c61\u53d1\u5149\u3002\u4e3a\u4e86\u8ba9 three.js \u8ba1\u7b97\u805a\u5149\u706f\u65b9\u5411\uff0c\u76ee\u6807\u7684\u4f4d\u7f6e\u9664\u4e86\u539f\u70b9\u5916\uff0c\u5b9e\u9645\u4e0a\u5fc5\u987b\u662f\u573a\u666f\u56fe\u4e2d\u7684\u8282\u70b9\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u4f4d\u4e8e\u70b9 (0,0,5) \u5e76\u6307\u5411\u70b9 (2,2,0) \u7684\u805a\u5149\u706f\uff1a</p> <pre><code>spotlight = new THREE.SpotLight();\nspotlight.position.set(0, 0, 5);\nspotlight.target.position.set(2, 2, 0);\nscene.add(spotlight);\nscene.add(spotlight.target);\n</code></pre> <p>Compared to geometries and materials, lights are easy! Three.js has several classes to represent lights. Light classes are subclasses of THREE.Object3D. A light object can be added to a scene and will then illuminate objects in the scene. We'll look at directional lights, point lights, ambient lights, and spotlights.</p> <p>The class THREE.DirectionalLight represents light that shines in parallel rays from a given direction, like the light from the sun. The position property of a directional light gives the direction from which the light shines. (This is the same position property, of type Vector3, that all scene graph objects have, but the meaning is different for directional lights.) Note that the light shines from the given position towards the origin. The default position is the vector (0,1,0), which gives a light shining down the y-axis. The constructor for this class has two parameters:</p> <pre><code>new THREE.DirectionalLight( color, intensity )\n</code></pre> <p>where color specifies the color of the light, given as a THREE.Color object, or as a hexadecimal integer, or as a CSS color string. Lights do not have separate diffuse and specular colors, as they do in OpenGL. The intensity is a non-negative number that controls the brightness of the light, with larger values making the light brighter. A light with intensity zero gives no light at all. The parameters are optional. The default for color is white (0xffffff) and for intensity is 1. The intensity can be greater than 1, but values less than 1 are usually preferable, to avoid having too much illumination in the scene.</p> <p>Suppose that we have a camera on the positive z-axis, looking towards the origin, and we would like a light that shines in the same direction that the camera is looking. We can use a directional light whose position is on the positive z-axis:</p> <pre><code>let light = new THREE.DirectionalLight(); // default white light\nlight.position.set( 0, 0, 1 );\nscene.add(light);\n</code></pre> <p>The class THREE.PointLight represents a light that shines in all directions from a point. The location of the point is given by the light's position property. The constructor has three optional parameters:</p> <pre><code>new THREE.PointLight( color, intensity, cutoff )\n</code></pre> <p>The first two parameters are the same as for a directional light, with the same defaults. The cutoff is a non-negative number. If the value is zero\u2014which is the default\u2014then the illumination from the light extends to infinity, and intensity does not decrease with distance. While this is not physically realistic, it generally works well in practice. If cutoff is greater than zero, then the intensity falls from a maximum value at the light's position down to an intensity of zero at a distance of cutoff from the light; the light has no effect on objects that are at a distance greater than cutoff. This falloff of light intensity with distance is referred to as attenuation of the light source.</p> <p>A third type of light is THREE.AmbientLight. This class exists to add ambient light to a scene. An ambient light has only a color:</p> <pre><code>new THREE.AmbientLight( color )\n</code></pre> <p>Adding an ambient light object to a scene adds ambient light of the specified color to the scene. The color components of an ambient light should be rather small to avoid washing out colors of objects.</p> <p>For example, suppose that we would like a yellowish point light at (10,30,15) whose illumination falls off with distance from that point, out to a distance of 100 units. We also want to add a bit of yellow ambient light to the scene:</p> <pre><code>let light = new THREE.PointLight( 0xffffcc, 1, 100 );\nlight.position.set( 10, 30, 15 );\nscene.add(light);\nscene.add( new THREE.AmbientLight(0x111100) );\n</code></pre> <p>The fourth type of light, THREE.SpotLight, is something new for us. An object of that type represents a spotlight, which is similar to a point light, except that instead of shining in all directions, a spotlight only produces a cone of light. The vertex of the cone is located at the position of the light. By default, the axis of the cone points from that location towards the origin (so unless you change the direction of the axis, you should move the position of the light away from the origin). The constructor adds two parameters to those for a point light:</p> <pre><code>new THREE.SpotLight( color, intensity, cutoff, coneAngle, exponent )\n</code></pre> <p>The coneAngle is a number between 0 and Math.PI/2 that determines the size of the cone of light. It is the angle between the axis of the cone and the side of the cone. The default value is Math.PI/3. The exponent is a non-negative number that determines how fast the intensity of the light decreases as you move from the axis of the cone toward the side. The default value, 10, gives a reasonable result. An exponent of zero gives no falloff at all, so that objects at all distances from the axis are evenly illuminated.</p> <p>The technique for setting the direction of a three.js spotlight is a little odd, but it does make it easy to control the direction. An object spot of type SpotLight has a property named spot.target. The target is a scene graph node. The cone of light from the spotlight is pointed in the direction from spotlight's position towards the target's position. When a spotlight is first created, its target is a new, empty Object3D, with position at (0,0,0). However, you can set the target to be any object in the scene graph, which will make the spotlight shine towards that object. For three.js to calculate the spotlight direction, a target whose position is anything other than the origin must actually be a node in the scene graph. For example, suppose we want a spotlight located at the point (0,0,5) and pointed towards the point (2,2,0):</p> <pre><code>spotlight = new THREE.SpotLight();\nspotlight.position.set(0,0,5);\nspotlight.target.position.set(2,2,0);\nscene.add(spotlight);\nscene.add(spotlight.target);\n</code></pre>"},{"location":"cn/c5/s1/#516-\u5efa\u6a21\u793a\u4f8b","title":"5.1.6 \u5efa\u6a21\u793a\u4f8b","text":"<p>A Modeling Example</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u7ae0\u7684\u5269\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u66f4\u6df1\u5165\u5730\u4e86\u89e3 three.js\uff0c\u4f46\u60a8\u5df2\u7ecf\u8db3\u591f\u4e86\u89e3\u5982\u4f55\u4ece\u57fa\u672c\u7684\u51e0\u4f55\u5bf9\u8c61\u6784\u5efa 3D \u6a21\u578b\u3002\u793a\u4f8b\u7a0b\u5e8f threejs/diskworld-1 \u5c55\u793a\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u6a21\u578b\uff0c\u4e00\u8f86\u6c7d\u8f66\u5728\u5706\u67f1\u5f62\u57fa\u5ea7\u7684\u8fb9\u7f18\u884c\u9a76\u3002\u6c7d\u8f66\u7684\u8f6e\u80ce\u662f\u65cb\u8f6c\u7684\u3002\u78c1\u76d8\u4e16\u754c\u5728\u4e0b\u9762\u7684\u5de6\u56fe\u4e2d\u663e\u793a\u3002\u53f3\u56fe\u663e\u793a\u4e86\u6c7d\u8f66\u7684\u4e00\u4e2a\u8f74\uff0c\u6bcf\u4e2a\u7aef\u70b9\u90fd\u6709\u4e00\u4e2a\u8f6e\u80ce\u3002</p> <p></p> <p>\u6211\u5c06\u8ba8\u8bba\u4e00\u4e9b\u7528\u4e8e\u6784\u5efa\u8fd9\u4e9b\u6a21\u578b\u7684\u4ee3\u7801\u3002\u5982\u679c\u60a8\u60f3\u5c1d\u8bd5\u7528\u81ea\u5df1\u7684\u6a21\u578b\u8fdb\u884c\u5b9e\u9a8c\uff0c\u53ef\u4ee5\u4f7f\u7528\u7a0b\u5e8f threejs/modeling-starter.html \u4f5c\u4e3a\u8d77\u70b9\u3002</p> <p>\u4ece\u7b80\u5355\u7684\u4e1c\u897f\u5f00\u59cb\uff0c\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u4ece\u68d5\u8272\u5706\u67f1\u4f53\u548c\u7eff\u8272\u5706\u9525\u4f53\u5236\u4f5c\u4e00\u68f5\u6811\u3002\u6211\u4f7f\u7528 Object3D \u6765\u8868\u793a\u6574\u68f5\u6811\uff0c\u8fd9\u6837\u6211\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u5355\u5143\u5904\u7406\u3002\u8fd9\u4e24\u4e2a\u51e0\u4f55\u5bf9\u8c61\u88ab\u6dfb\u52a0\u4e3a Object3D \u7684\u5b50\u8282\u70b9\u3002</p> <pre><code>let tree = new THREE.Object3D();\n\nlet trunk = new THREE.Mesh(\n    new THREE.CylinderGeometry(0.2,0.2,1,16,1),\n    new THREE.MeshLambertMaterial({\n        color: 0x885522\n    })\n);\ntrunk.position.y = 0.5;  // \u5c06\u5e95\u5ea7\u5411\u4e0a\u79fb\u52a8\u5230\u539f\u70b9\n\nlet leaves = new THREE.Mesh(\n    new THREE.ConeGeometry(.7,2,16,3),\n    new THREE.MeshPhongMaterial({\n        color: 0x00BB00,\n        specular: 0x002000,\n        shininess: 5\n    })\n);\nleaves.position.y = 2;  // \u5c06\u5706\u9525\u5e95\u90e8\u79fb\u52a8\u5230\u6811\u5e72\u9876\u90e8\n\ntree.add(trunk);\ntree.add(leaves);\n</code></pre> <p>\u6811\u5e72\u662f\u4e00\u4e2a\u9ad8\u5ea6\u7b49\u4e8e 1 \u7684\u5706\u67f1\u4f53\u3002\u5b83\u7684\u8f74\u7ebf\u6cbf\u7740 y \u8f74\uff0c\u5e76\u4e14\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u3002\u78c1\u76d8\u4e16\u754c\u7684\u5e73\u9762\u4f4d\u4e8e xz \u5e73\u9762\u4e0a\uff0c\u6240\u4ee5\u6211\u60f3\u5c06\u6811\u5e72\u7684\u5e95\u90e8\u79fb\u52a8\u5230\u8be5\u5e73\u9762\u4e0a\u3002\u8fd9\u662f\u901a\u8fc7\u8bbe\u7f6e trunk.position.y \u7684\u503c\u6765\u5b8c\u6210\u7684\uff0c\u5b83\u8868\u793a\u8981\u5e94\u7528\u4e8e\u6811\u5e72\u7684\u5e73\u79fb\u3002\u8bb0\u4f4f\uff0c\u5bf9\u8c61\u6709\u81ea\u5df1\u7684\u5efa\u6a21\u5750\u6807\u7cfb\u3002\u6307\u5b9a\u53d8\u6362\u7684\u5bf9\u8c61\u5c5e\u6027\uff0c\u5982 trunk.position\uff0c\u5728\u8be5\u5750\u6807\u7cfb\u4e2d\u53d8\u6362\u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6811\u5e72\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u590d\u5408\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\uff0c\u4ee3\u8868\u6574\u68f5\u6811\u3002\u5728\u6e32\u67d3\u573a\u666f\u65f6\uff0c\u6811\u5e72\u9996\u5148\u901a\u8fc7\u5b83\u81ea\u5df1\u7684\u5efa\u6a21\u53d8\u6362\u8fdb\u884c\u53d8\u6362\u3002\u7136\u540e\uff0c\u5b83\u4f1a\u88ab\u5e94\u7528\u4e8e\u6574\u4e2a\u6811\u7684\u4efb\u4f55\u5efa\u6a21\u53d8\u6362\u8fdb\u4e00\u6b65\u53d8\u6362\u3002\uff08\u8fd9\u79cd\u5206\u5c42\u5efa\u6a21\u9996\u6b21\u5728 2.4.1\u5c0f\u8282 \u4e2d\u4ecb\u7ecd\u3002\uff09</p> <p>\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u6811\u5bf9\u8c61\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u6dfb\u52a0\u5230\u4ee3\u8868\u78c1\u76d8\u4e16\u754c\u7684\u6a21\u578b\u4e2d\u3002\u5728\u7a0b\u5e8f\u4e2d\uff0c\u6a21\u578b\u662f\u4e00\u4e2a\u540d\u4e3a diskworldModel \u7684 Object3D \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u6a21\u578b\u5c06\u5305\u542b\u51e0\u68f5\u6811\uff0c\u4f46\u6811\u4e0d\u5fc5\u5355\u72ec\u6784\u5efa\u3002\u6211\u53ef\u4ee5\u901a\u8fc7\u514b\u9686\u5df2\u7ecf\u521b\u5efa\u7684\u6811\u6765\u5236\u4f5c\u66f4\u591a\u7684\u6811\u3002\u4f8b\u5982\uff1a</p> <pre><code>tree.position.set(-1.5,0,2);\ntree.scale.set(0.7,0.7,0.7);\ndiskworldModel.add( tree.clone() );\n\ntree.position.set(-1,0,5.2);\ntree.scale.set(0.25,0.25,0.25);\ndiskworldModel.add( tree.clone() );\n</code></pre> <p>\u8fd9\u5c06\u4e24\u68f5\u6811\u6dfb\u52a0\u5230\u6a21\u578b\u4e2d\uff0c\u5177\u6709\u4e0d\u540c\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\u5f53\u6811\u88ab\u514b\u9686\u65f6\uff0c\u514b\u9686\u5f97\u5230\u5b83\u81ea\u5df1\u7684\u5efa\u6a21\u53d8\u6362\u5c5e\u6027 position \u548c scale \u7684\u526f\u672c\u3002\u66f4\u6539\u539f\u59cb\u6811\u5bf9\u8c61\u4e2d\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u4e0d\u4f1a\u5f71\u54cd\u514b\u9686\u3002</p> <p>\u8ba9\u6211\u4eec\u8f6c\u5411\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u5bf9\u8c61\uff0c\u8f74\u548c\u8f6e\u5b50\u3002\u6211\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u8f6e\u5b50\uff0c\u4f7f\u7528\u5706\u73af\u9762\u4f5c\u4e3a\u8f6e\u80ce\uff0c\u5e76\u4f7f\u7528\u4e09\u4e2a\u5706\u67f1\u4f53\u7684\u526f\u672c\u4f5c\u4e3a\u8f90\u6761\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4e0d\u662f\u5236\u4f5c\u4e00\u4e2a\u65b0\u7684 Object3D \u6765\u5bb9\u7eb3\u8f6e\u5b50\u7684\u6240\u6709\u7ec4\u4ef6\uff0c\u800c\u662f\u5c06\u5706\u67f1\u4f53\u4f5c\u4e3a\u5706\u73af\u7684\u5b50\u8282\u70b9\u6dfb\u52a0\u3002\u8bb0\u4f4f\uff0cthree.js \u4e2d\u7684\u4efb\u4f55\u5c4f\u5e55\u56fe\u8282\u70b9\u90fd\u53ef\u4ee5\u6709\u5b50\u8282\u70b9\u3002</p> <pre><code>let wheel = new THREE.Mesh(  // \u8f6e\u80ce\uff1b\u8f90\u6761\u5c06\u4f5c\u4e3a\u5b50\u8282\u70b9\u6dfb\u52a0\n    new THREE.TorusGeometry(0.75, 0.25, 16, 32),\n    new THREE.MeshLambertMaterial({ color: 0x0000A0 })\n);\nlet yellow = new THREE.MeshPhongMaterial({\n        color: 0xffff00,\n        specular: 0x101010,\n        shininess: 16\n    });\nlet cylinder = new THREE.Mesh(  // \u9ad8\u5ea6\u4e3a 1\uff0c\u76f4\u5f84\u4e3a 1 \u7684\u5706\u67f1\u4f53\n    new THREE.CylinderGeometry(0.5,0.5,1,32,1),\n    yellow\n);\n\ncylinder.scale.set(0.15,1.2,0.15); // \u4f7f\u5176\u53d8\u7ec6\u53d8\u957f\uff0c\u7528\u4e8e\u8f90\u6761\u3002\n\nwheel.add( cylinder.clone() );  // \u6dfb\u52a0\u5706\u67f1\u4f53\u7684\u526f\u672c\u3002\ncylinder.rotation.z = Math.PI/3;  // \u65cb\u8f6c\u5b83\u7528\u4e8e\u7b2c\u4e8c\u4e2a\u8f90\u6761\u3002\nwheel.add( cylinder.clone() );\ncylinder.rotation.z = -Math.PI/3; // \u65cb\u8f6c\u5b83\u7528\u4e8e\u7b2c\u4e09\u4e2a\u8f90\u6761\u3002\nwheel.add( cylinder.clone() );\n</code></pre> <p>\u4e00\u65e6\u6211\u6709\u4e86\u8f6e\u5b50\u6a21\u578b\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528\u5b83\u548c\u4e00\u4e2a\u5706\u67f1\u4f53\u6765\u5236\u4f5c\u8f74\u3002\u5bf9\u4e8e\u8f74\uff0c\u6211\u4f7f\u7528\u4e00\u4e2a\u6cbf\u7740 z \u8f74\u7684\u5706\u67f1\u4f53\u3002\u8f6e\u5b50\u4f4d\u4e8e xy \u5e73\u9762\u4e0a\u3002\u5b83\u9762\u5411\u6b63\u786e\u7684\u65b9\u5411\uff0c\u4f46\u5b83\u4f4d\u4e8e\u8f74\u7684\u4e2d\u5fc3\u3002\u8981\u5c06\u5176\u79fb\u52a8\u5230\u8f74\u672b\u7aef\u7684\u6b63\u786e\u4f4d\u7f6e\uff0c\u53ea\u9700\u6cbf z \u8f74\u5e73\u79fb\u5373\u53ef\u3002</p> <pre><code>axleModel = new THREE.Object3D(); // \u5305\u542b\u4e24\u4e2a\u8f6e\u5b50\u548c\u4e00\u4e2a\u8f74\u7684\u6a21\u578b\u3002\ncylinder.scale.set(0.2,4.3,0.2);  // \u5c06\u5706\u67f1\u4f53\u7f29\u653e\uff0c\u7528\u4f5c\u8f74\u3002\ncylinder.rotation.set(Math.PI/2,0,0); // \u5c06\u5176\u8f74\u65cb\u8f6c\u5230 z \u8f74\u4e0a\u3002\naxleModel.add( cylinder );\nwheel.position.z = 2;  // \u8f6e\u5b50\u4f4d\u4e8e\u8f74\u7684\u4e24\u7aef\u3002\naxleModel.add( wheel.clone() );\nwheel.position.z = -2;\naxleModel.add( wheel );\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u8f6e\u5b50\uff0c\u6211\u6dfb\u52a0\u4e86\u539f\u59cb\u8f6e\u5b50\u6a21\u578b\u800c\u4e0d\u662f\u514b\u9686\u3002\u6ca1\u6709\u5fc5\u8981\u5236\u4f5c\u989d\u5916\u7684\u526f\u672c\u3002\u6709\u4e86 axleModel\uff0c\u6211\u53ef\u4ee5\u4ece\u4e24\u4e2a\u8f74\u7684\u526f\u672c\u548c\u5176\u4ed6\u4e00\u4e9b\u7ec4\u4ef6\u6784\u5efa\u6c7d\u8f66\u3002</p> <p>\u78c1\u76d8\u4e16\u754c\u53ef\u4ee5\u88ab\u52a8\u753b\u5316\u3002\u8981\u5b9e\u73b0\u52a8\u753b\uff0c\u9700\u8981\u5728\u6e32\u67d3\u52a8\u753b\u7684\u6bcf\u4e00\u5e27\u4e4b\u524d\u4fee\u6539\u9002\u5f53\u573a\u666f\u56fe\u8282\u70b9\u7684\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u8981\u4f7f\u6c7d\u8f66\u4e0a\u7684\u8f6e\u5b50\u65cb\u8f6c\uff0c\u6bcf\u5e27\u90fd\u4f1a\u589e\u52a0\u6bcf\u4e2a\u8f74\u56f4\u7ed5\u5176 z \u8f74\u7684\u65cb\u8f6c\uff1a</p> <pre><code>carAxle1.rotation.z += 0.05;\ncarAxle2.rotation.z += 0.05;\n</code></pre> <p>\u8fd9\u6539\u53d8\u4e86\u5c06\u5e94\u7528\u4e8e\u8f74\u6e32\u67d3\u65f6\u7684\u5efa\u6a21\u53d8\u6362\u3002\u5728\u5b83\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\uff0c\u8f74\u7684\u4e2d\u5fc3\u8f74\u7ebf\u6cbf\u7740 z \u8f74\u3002\u56f4\u7ed5 z \u8f74\u7684\u65cb\u8f6c\u65cb\u8f6c\u4e86\u8f74\u53ca\u5176\u9644\u7740\u7684\u8f6e\u80ce\uff0c\u56f4\u7ed5\u5176\u8f74\u7ebf\u3002</p> <p>\u6709\u5173\u793a\u4f8b\u7a0b\u5e8f\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u6e90\u4ee3\u7801\u3002</p> <p>In the rest of this chapter, we will go much deeper into three.js, but you already know enough to build 3D models from basic geometric objects. An example is in the sample program threejs/diskworld-1.html, which shows a very simple model of a car driving around the edge of a cylindrical base. The car has rotating tires. The diskworld is shown in the picture on the left below. The picture on the right shows one of the axles from the car, with a tire on each end.</p> <p></p> <p>I will discuss some of the code that is used to build these models. If you want to experiment with your own models, you can use the program threejs/modeling-starter.html as a starting point.</p> <p>To start with something simple, let's look at how to make a tree from a brown cylinder and a green cone. I use an Object3D to represent the tree as a whole, so that I can treat it as a unit. The two geometric objects are added as children of the Object3D.</p> <pre><code>let tree = new THREE.Object3D();\n\nlet trunk = new THREE.Mesh(\n    new THREE.CylinderGeometry(0.2,0.2,1,16,1),\n    new THREE.MeshLambertMaterial({\n        color: 0x885522\n    })\n);\ntrunk.position.y = 0.5;  // move base up to origin\n\nlet leaves = new THREE.Mesh(\n    new THREE.ConeGeometry(.7,2,16,3),\n    new THREE.MeshPhongMaterial({\n        color: 0x00BB00,\n        specular: 0x002000,\n        shininess: 5\n    })\n);\nleaves.position.y = 2;  // move bottom of cone to top of trunk\n\ntree.add(trunk);\ntree.add(leaves);\n</code></pre> <p>The trunk is a cylinder with height equal to 1. Its axis lies along the y-axis, and it is centered at the origin. The plane of the diskworld lies in the xz-plane, so I want to move the bottom of the trunk onto that plane. This is done by setting the value of trunk.position.y, which represents a translation to be applied to the trunk. Remember that objects have their own modeling coordinate system. The properties of objects that specify transformations, such as trunk.position, transform the object in that coordinate system. In this case, the trunk is part of a larger, compound object that represents the whole tree. When the scene is rendered, the trunk is first transformed by its own modeling transformation. It is then further transformed by any modeling transformation that is applied to the tree as a whole. (This type of hierarchical modeling was first covered in Subsection 2.4.1.)</p> <p>Once we have a tree object, it can be added to the model that represents the diskworld. In the program, the model is an object of type Object3D named diskworldModel. The model will contain several trees, but the trees don't have to be constructed individually. I can make additional trees by cloning the one that I have already created. For example:</p> <pre><code>tree.position.set(-1.5,0,2);\ntree.scale.set(0.7,0.7,0.7);\ndiskworldModel.add( tree.clone() );\n\ntree.position.set(-1,0,5.2);\ntree.scale.set(0.25,0.25,0.25);\ndiskworldModel.add( tree.clone() );\n</code></pre> <p>This adds two trees to the model, with different sizes and positions. When the tree is cloned, the clone gets its own copies of the modeling transformation properties, position and scale. Changing the values of those properties in the original tree object does not affect the clone.</p> <p>Lets turn to a more complicated object, the axle and wheels. I start by creating a wheel, using a torus for the tire and using three copies of a cylinder for the spokes. In this case, instead of making a new Object3D to hold all the components of the wheel, I add the cylinders as children of the torus. Remember that any screen graph node in three.js can have child nodes.</p> <pre><code>let wheel = new THREE.Mesh(  // the tire; spokes will be added as children\n    new THREE.TorusGeometry(0.75, 0.25, 16, 32),\n    new THREE.MeshLambertMaterial({ color: 0x0000A0 })\n);\nlet yellow = new THREE.MeshPhongMaterial({\n        color: 0xffff00,\n        specular: 0x101010,\n        shininess: 16\n    });\nlet cylinder = new THREE.Mesh(  // a cylinder with height 1 and diameter 1\n    new THREE.CylinderGeometry(0.5,0.5,1,32,1),\n    yellow\n);\n\ncylinder.scale.set(0.15,1.2,0.15); // Make it thin and tall for use as a spoke.\n\nwheel.add( cylinder.clone() );  // Add a copy of the cylinder.\ncylinder.rotation.z = Math.PI/3;  // Rotate it for the second spoke.\nwheel.add( cylinder.clone() );\ncylinder.rotation.z = -Math.PI/3; // Rotate it for the third spoke.\nwheel.add( cylinder.clone() );\n</code></pre> <p>Once I have the wheel model, I can use it along with one more cylinder to make the axle. For the axle, I use a cylinder lying along the z-axis. The wheel lies in the xy-plane. It is facing in the correct direction, but it lies in the center of the axle. To get it into its correct position at the end of the axle, it just has to be translated along the z-axis.</p> <pre><code>axleModel = new THREE.Object3D(); // A model containing two wheels and an axle.\ncylinder.scale.set(0.2,4.3,0.2);  // Scale the cylinder for use as an axle.\ncylinder.rotation.set(Math.PI/2,0,0); // Rotate its axis onto the z-axis.\naxleModel.add( cylinder );\nwheel.position.z = 2;  // Wheels are positioned at the two ends of the axle.\naxleModel.add( wheel.clone() );\nwheel.position.z = -2;\naxleModel.add( wheel );\n</code></pre> <p>Note that for the second wheel, I add the original wheel model rather than a clone. There is no need to make an extra copy. With the axleModel in hand, I can build the car from two copies of the axle plus some other components.</p> <p>The diskworld can be animated. To implement the animation, properties of the appropriate scene graph nodes are modified before each frame of the animation is rendered. For example, to make the wheels on the car rotate, the rotation of each axle about its z-axis is increased in each frame:</p> <pre><code>carAxle1.rotation.z += 0.05;\ncarAxle2.rotation.z += 0.05;\n</code></pre> <p>This changes the modeling transformation that will be applied to the axles when they are rendered. In its own coordinate system, the central axis of an axle lies along the z-axis. The rotation about the z-axis rotates the axle, with its attached tires, about its axis.</p> <p>For the full details of the sample program, see the source code.</p>"},{"location":"cn/c5/s2/","title":"5.2 \u6784\u5efa\u5bf9\u8c61","text":"<p>Building Objects</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728three.js\u4e2d\uff0c\u4e00\u4e2a\u53ef\u89c1\u5bf9\u8c61\u662f\u7531\u51e0\u4f55\u4f53\u548c\u6750\u8d28\u6784\u5efa\u7684\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u5982\u4f55\u521b\u5efa\u9002\u7528\u4e8e\u70b9\u548c\u7ebf\u539f\u8bed\u7684\u7b80\u5355\u51e0\u4f55\u4f53\uff0c\u5e76\u9047\u5230\u4e86\u4f7f\u7528GL_TRIANGLES\u539f\u8bed\u7684\u5404\u79cd\u6807\u51c6\u7f51\u683c\u51e0\u4f55\u4f53\uff0c\u4f8b\u5982THREE.CylinderGeometry\u548cTHREE.IcosahedronGeometry\u3002\u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u65b0\u7684\u7f51\u683c\u51e0\u4f55\u4f53\u3002\u6211\u4eec\u8fd8\u5c06\u770b\u770bthree.js\u4e3a\u5904\u7406\u5bf9\u8c61\u548c\u6750\u8d28\u63d0\u4f9b\u7684\u4e00\u4e9b\u5176\u4ed6\u652f\u6301\u3002</p> <p>In three.js, a visible object is constructed from a geometry and a material. We have seen how to create simple geometries that are suitable for point and line primitives, and we have encountered a variety of standard mesh geometries, such as THREE.CylinderGeometry and THREE.IcosahedronGeometry, that use the GL_TRIANGLES primitive. In this section, we will see how to create new mesh geometries from scratch. We'll also look at some of the other support that three.js provides for working with objects and materials.</p>"},{"location":"cn/c5/s2/#521-\u591a\u8fb9\u5f62\u7f51\u683c\u548c-ifs","title":"5.2.1 \u591a\u8fb9\u5f62\u7f51\u683c\u548c IFS","text":"<p>Polygonal Meshes and IFSs</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728three.js\u4e2d\uff0c\u6211\u4eec\u6240\u8bf4\u7684\u7f51\u683c\u662f\u6307\u5728\u7b2c3.4\u8282\u4e2d\u63d0\u5230\u7684\u591a\u8fb9\u5f62\u7f51\u683c\uff0c\u5c3d\u7ba1\u5728three.js\u7684\u7f51\u683c\u4e2d\uff0c\u6240\u6709\u7684\u591a\u8fb9\u5f62\u90fd\u5fc5\u987b\u662f\u4e09\u89d2\u5f62\u3002\u5728WebGL\u4e2d\u7ed8\u5236\u591a\u8fb9\u5f62\u7f51\u683c\u6709\u4e24\u79cd\u65b9\u6cd5\u3002\u4e00\u79cd\u4f7f\u7528\u7684\u662f\u51fd\u6570glDrawArrays()\uff0c\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u9876\u70b9\u5217\u8868\u3002\u53e6\u4e00\u79cd\u4f7f\u7528\u7684\u662f\u6211\u4eec\u79f0\u4e4b\u4e3a\u7d22\u5f15\u9762\u96c6\uff08IFS\uff09\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u5b83\u662f\u4f7f\u7528\u51fd\u6570glDrawElements()\u7ed8\u5236\u7684\u3002\u9664\u4e86\u9876\u70b9\u5217\u8868\uff0cIFS\u8fd8\u4f7f\u7528\u9762\u7d22\u5f15\u5217\u8868\u6765\u6307\u5b9a\u4e09\u89d2\u5f62\u3002\u6211\u4eec\u5c06\u4ee5\u8fd9\u4e2a\u91d1\u5b57\u5854\u4e3a\u4f8b\uff0c\u6765\u67e5\u770b\u4e24\u79cd\u65b9\u6cd5\uff1a</p> <p></p> <p>\u8bf7\u6ce8\u610f\uff0c\u91d1\u5b57\u5854\u7684\u5e95\u90e8\u662f\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u5fc5\u987b\u88ab\u5206\u5272\u6210\u4e24\u4e2a\u4e09\u89d2\u5f62\uff0c\u4ee5\u4fbf\u5c06\u91d1\u5b57\u5854\u8868\u793a\u4e3a\u7f51\u683c\u51e0\u4f55\u4f53\u3002\u9876\u70b9\u4ece0\u7f16\u53f7\u52304\u3002\u4e00\u4e2a\u4e09\u89d2\u5f62\u9762\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\uff0c\u8fd9\u4e09\u4e2a\u6570\u5b57\u7ed9\u51fa\u4e86\u8be5\u4e09\u89d2\u5f62\u9876\u70b9\u7684\u9876\u70b9\u7f16\u53f7\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u5f53\u4ece\u524d\u9762\uff0c\u5373\u4ece\u91d1\u5b57\u5854\u7684\u5916\u90e8\u89c2\u5bdf\u65f6\uff0c\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u5e94\u8be5\u6309\u9006\u65f6\u9488\u987a\u5e8f\u6307\u5b9a\u3002\u8fd9\u91cc\u662f\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u3002</p> <pre><code>    VERTEX COORDINATES:         FACE INDICES:\n\n    Vertex 0:   1, 0,  1        Face 1:  3, 2, 1 \n    Vertex 1:   1, 0, -1        Face 2:  3, 1, 0 \n    Vertex 2:  -1, 0, -1        Face 3:  3, 0, 4 \n    Vertex 3:  -1, 0,  1        Face 4:  0, 1, 4 \n    Vertex 4:   0, 1,  0        Face 5:  1, 2, 4 \n                                Face 6:  2, 3, 4\n</code></pre> <p>\u4e00\u4e2a\u57fa\u672c\u7684\u591a\u8fb9\u5f62\u7f51\u683c\u8868\u793a\u4e0d\u4f7f\u7528\u9762\u7d22\u5f15\u3002\u76f8\u53cd\uff0c\u5b83\u901a\u8fc7\u5217\u51fa\u9876\u70b9\u7684\u5750\u6807\u6765\u6307\u5b9a\u6bcf\u4e2a\u4e09\u89d2\u5f62\u3002\u8fd9\u9700\u8981\u4e5d\u4e2a\u6570\u5b57\u2014\u2014\u6bcf\u4e2a\u9876\u70b9\u4e09\u4e2a\u6570\u5b57\u2014\u2014\u7528\u4e8e\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\u3002\u7531\u4e8e\u4e00\u4e2a\u9876\u70b9\u53ef\u4ee5\u88ab\u51e0\u4e2a\u4e09\u89d2\u5f62\u5171\u4eab\uff0c\u6240\u4ee5\u5b58\u5728\u4e00\u4e9b\u5197\u4f59\u3002\u5bf9\u4e8e\u91d1\u5b57\u5854\uff0c\u4e00\u4e2a\u9876\u70b9\u7684\u5750\u6807\u5c06\u88ab\u91cd\u590d\u4e09\u5230\u56db\u6b21\u3002</p> <p>three.js\u7684\u7f51\u683c\u5bf9\u8c61\u9700\u8981\u4e00\u4e2a\u51e0\u4f55\u4f53\u548c\u4e00\u4e2a\u6750\u8d28\u3002\u51e0\u4f55\u4f53\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3aTHREE.BufferedGeometry\u7684\u5bf9\u8c61\uff0c\u5b83\u6709\u4e00\u4e2a\u201cposition\u201d\u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u4fdd\u5b58\u4e86\u7f51\u683c\u4e2d\u4f7f\u7528\u7684\u9876\u70b9\u7684\u5750\u6807\u3002\u8be5\u5c5e\u6027\u4f7f\u7528\u4e00\u4e2a\u7c7b\u578b\u5316\u6570\u7ec4\u6765\u4fdd\u5b58\u6784\u6210\u7f51\u683c\u7684\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u5750\u6807\u3002\u91d1\u5b57\u5854\u7684\u51e0\u4f55\u4f53\u53ef\u4ee5\u8fd9\u6837\u521b\u5efa\uff1a</p> <pre><code>let pyramidVertices = new Float32Array( [\n            // \u91d1\u5b57\u5854Geom \"position\"\u5c5e\u6027\u7684\u6570\u636e\u3002\n            // \u5305\u542b\u9876\u70b9\u7684x,y,z\u5750\u6807\u3002\n            // \u6bcf\u7ec4\u4e09\u4e2a\u6570\u5b57\u662f\u4e00\u4e2a\u9876\u70b9\uff1b\n            // \u6bcf\u7ec4\u4e09\u4e2a\u9876\u70b9\u662f\u4e00\u4e2a\u9762\u3002\n            -1,0,1,  -1,0,-1,  1,0,-1, // \u5e95\u90e8\u7684\u7b2c\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\n            -1,0,1,   1,0,-1,  1,0,1,  // \u5e95\u90e8\u7684\u7b2c\u4e8c\u4e2a\u4e09\u89d2\u5f62\u3002\n            -1,0,1,   1,0,1,   0,1,0,  // \u524d\u9762\u3002\n            1,0,1,   1,0,-1,  0,1,0,  // \u53f3\u9762\u3002\n            1,0,-1, -1,0,-1,  0,1,0,  // \u540e\u9762\u3002\n            -1,0,-1, -1,0,1,   0,1,0   // \u5de6\u9762\u3002\n        ] );\nlet pyramidGeom = new THREE.BufferGeometry();\npyramidGeom.setAttribute(\"position\",\n                new THREE.BufferAttribute(pyramidVertices,3) );\n</code></pre> <p>\u5f53\u8fd9\u4e2a\u51e0\u4f55\u4f53\u4e0eLambert\u6216Phong\u6750\u8d28\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u4e3a\u9876\u70b9\u63d0\u4f9b\u6cd5\u5411\u91cf\u3002\u5982\u679c\u51e0\u4f55\u4f53\u6ca1\u6709\u6cd5\u5411\u91cf\uff0cLambert\u548cPhong\u6750\u8d28\u5c06\u663e\u793a\u4e3a\u9ed1\u8272\u3002\u7f51\u683c\u7684\u6cd5\u5411\u91cf\u5fc5\u987b\u5b58\u50a8\u5728BufferedGeometry\u7684\u53e6\u4e00\u4e2a\u5c5e\u6027\u4e2d\u3002\u5c5e\u6027\u7684\u540d\u79f0\u662f\"normal\"\uff0c\u5b83\u4e3a\"position\"\u5c5e\u6027\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u4fdd\u5b58\u4e00\u4e2a\u6cd5\u5411\u91cf\u3002\u5b83\u53ef\u4ee5\u4ee5\u4e0e\u521b\u5efa\"position\"\u5c5e\u6027\u76f8\u540c\u7684\u65b9\u5f0f\u521b\u5efa\uff0c\u4f46BufferedGeometry\u5bf9\u8c61\u5305\u62ec\u4e00\u4e2a\u8ba1\u7b97\u6cd5\u5411\u91cf\u7684\u65b9\u6cd5\u3002\u5bf9\u4e8epyramidGeom\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u8c03\u7528</p> <pre><code>pyramidGeom.computeVertexNormals();\n</code></pre> <p>\u5bf9\u4e8e\u4e00\u4e2a\u57fa\u672c\u7684\u591a\u8fb9\u5f62\u7f51\u683c\uff0c\u8fd9\u5c06\u521b\u5efa\u5782\u76f4\u4e8e\u9762\u7684\u6cd5\u5411\u91cf\u3002\u5f53\u51e0\u4e2a\u9762\u5171\u4eab\u4e00\u4e2a\u9876\u70b9\u65f6\uff0c\u8be5\u9876\u70b9\u5c06\u4e3a\u6bcf\u4e2a\u9762\u6709\u4e00\u4e2a\u4e0d\u540c\u7684\u6cd5\u5411\u91cf\u3002\u8fd9\u5c06\u4ea7\u751f\u5e73\u9762\u770b\u8d77\u6765\u7684\u9762\uff0c\u8fd9\u5bf9\u4e8e\u591a\u9762\u4f53\u662f\u9002\u5f53\u7684\uff0c\u5176\u4fa7\u9762\u5b9e\u9645\u4e0a\u662f\u5e73\u7684\u3002\u5982\u679c\u591a\u8fb9\u5f62\u7f51\u683c\u88ab\u7528\u6765\u8fd1\u4f3c\u4e00\u4e2a\u5e73\u6ed1\u7684\u8868\u9762\uff0c\u8fd9\u662f\u4e0d\u9002\u5f53\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u5782\u76f4\u4e8e\u8868\u9762\u7684\u6cd5\u5411\u91cf\uff0c\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u624b\u5de5\u521b\u5efa\"normal\"\u5c5e\u6027\u3002\uff08\u89c14.1.3\u5c0f\u8282\u3002\uff09</p> <p>\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u91d1\u5b57\u5854\u7684\u51e0\u4f55\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5b83\u4e0e\u4e00\u4e2a\u9ec4\u8272\u7684Lambert\u6750\u8d28\u7ed3\u5408\u6765\u5728three.js\u7f51\u683c\u5bf9\u8c61\u4e2d\u4f7f\u7528\u5b83\uff1a</p> <pre><code>pyramid = new THREE.Mesh( \n            pyramidGeom,\n            new THREE.MeshLambertMaterial({ color: \"yellow\" }) \n        );\n</code></pre> <p>\u4f46\u662f\uff0c\u5982\u679c\u53ea\u6709\u4e00\u79cd\u989c\u8272\uff0c\u91d1\u5b57\u5854\u770b\u8d77\u6765\u4f1a\u6709\u70b9\u65e0\u804a\u3002\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u6750\u8d28\u5e94\u7528\u5230\u7f51\u683c\u7684\u4e0d\u540c\u9762\u4e0a\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u51e0\u4f55\u4f53\u4e2d\u7684\u9876\u70b9\u5fc5\u987b\u88ab\u5206\u6210\u7ec4\u3002BufferedGeometry\u7c7b\u7684addGroup()\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa\u8fd9\u4e9b\u7ec4\u3002\u51e0\u4f55\u4f53\u4e2d\u7684\u9876\u70b9\u6839\u636e\u5b83\u4eec\u5728\"position\"\u5c5e\u6027\u4e2d\u7684\u987a\u5e8f\u88ab\u7f16\u53f7\u4e3a0, 1, 2, ...\uff08\u8fd9\u4e0e\u4e0a\u9762\u4f7f\u7528\u7684\u7f16\u53f7\u4e0d\u540c\uff09\u3002addGroup()\u65b9\u6cd5\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u9876\u70b9\u7684\u7f16\u53f7\u3001\u7ec4\u4e2d\u7684\u9876\u70b9\u6570\u548c\u4e00\u4e2a\u6750\u8d28\u7d22\u5f15\u3002\u6750\u8d28\u7d22\u5f15\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5b83\u51b3\u5b9a\u4e86\u54ea\u4e2a\u6750\u8d28\u5c06\u88ab\u5e94\u7528\u5230\u8be5\u7ec4\u3002\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u7ec4\uff0c\u91cd\u8981\u7684\u662f\u5c06\u6240\u6709\u9876\u70b9\u90fd\u653e\u5165\u7ec4\u4e2d\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u4e3a\u91d1\u5b57\u5854\u521b\u5efa\u7ec4\uff1a</p> <pre><code>pyramidGeom.addGroup(0,6,0);  // \u5e95\u90e8\uff082\u4e2a\u4e09\u89d2\u5f62\uff09\npyramidGeom.addGroup(6,3,1);  // \u524d\u9762\u3002\npyramidGeom.addGroup(9,3,2);  // \u53f3\u9762\u3002\npyramidGeom.addGroup(12,3,3); // \u540e\u9762\u3002\npyramidGeom.addGroup(15,3,4); // \u5de6\u9762\u3002\n</code></pre> <p>\u8981\u5c06\u4e0d\u540c\u7684\u6750\u8d28\u5e94\u7528\u5230\u4e0d\u540c\u7684\u7ec4\uff0c\u5e94\u8be5\u5c06\u6750\u8d28\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u4e00\u4e2a\u7ec4\u7684\u6750\u8d28\u7d22\u5f15\u662f\u8be5\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u3002</p> <pre><code>pyramidMaterialArray= [ \n        // \u6750\u8d28\u6570\u7ec4\uff0c\u7528\u4e8e\u91d1\u5b57\u5854\u7684\u6750\u8d28\u3002\n        new THREE.MeshLambertMaterial( { color: 0xffffff } ),\n        new THREE.MeshLambertMaterial( { color: 0x99ffff } ),\n        new THREE.MeshLambertMaterial( { color: 0xff99ff } ),\n        new THREE.MeshLambertMaterial( { color: 0xffff99 } ),\n        new THREE.MeshLambertMaterial( { color: 0xff9999 } )\n    ];\n</code></pre> <p>\u8fd9\u4e2a\u6570\u7ec4\u53ef\u4ee5\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9THREE.Mesh\u6784\u9020\u51fd\u6570\uff0c\u901a\u5e38\u90a3\u91cc\u4f1a\u4f7f\u7528\u5355\u4e00\u6750\u8d28\u3002</p> <pre><code>pyramid = new THREE.Mesh( pyramidGeom, pyramidMaterialArray );\n</code></pre> <p>\uff08\u4f46\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u7f51\u683c\u51e0\u4f55\u4f53\u4f7f\u7528\u7ec4\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u5728\u7f51\u683c\u4e0a\u4f7f\u7528\u5355\u4e00\u6750\u8d28\u3002\uff09</p> <p>THREE.BoxGeometry\u5e26\u6709\u7ec4\uff0c\u4f7f\u5f97\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u9762\u5206\u914d\u4e0d\u540c\u7684\u6750\u8d28\u3002\u793a\u4f8b\u7a0b\u5e8fthreejs/vertex-groups.html\u4f7f\u7528\u672c\u8282\u4e2d\u7684\u4ee3\u7801\u521b\u5efa\u91d1\u5b57\u5854\uff0c\u5e76\u663e\u793a\u91d1\u5b57\u5854\u548c\u7acb\u65b9\u4f53\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u4e0a\u4f7f\u7528\u591a\u79cd\u6750\u8d28\u3002\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <p></p> <p>\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u989c\u8272\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u9876\u70b9\u3002BufferedGeometry\u53ef\u4ee5\u6709\u4e00\u4e2a\u540d\u4e3a\"color\"\u7684\u5c5e\u6027\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u4e00\u79cd\u989c\u8272\u3002\"color\"\u5c5e\u6027\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6bcf\u4e2a\u9876\u70b9\u7684\u4e00\u7ec4\u4e09\u4e2aRGB\u5206\u91cf\u503c\u3002\u9876\u70b9\u989c\u8272\u9ed8\u8ba4\u88ab\u5ffd\u7565\u3002\u8981\u4f7f\u7528\u5b83\u4eec\uff0c\u51e0\u4f55\u4f53\u5fc5\u987b\u4e0e\u4e00\u4e2a\u5c06vertexColors\u5c5e\u6027\u8bbe\u7f6e\u4e3atrue\u7684\u6750\u8d28\u7ed3\u5408\u4f7f\u7528\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528\u9876\u70b9\u989c\u8272\u6765\u7ed9\u91d1\u5b57\u5854\u7684\u4fa7\u9762\u4e0a\u8272\uff1a</p> <pre><code>pyramidGeom.setAttribute(\n        \"color\",\n        new THREE.BufferAttribute( new Float32Array([\n                1,1,1,  1,1,1,  1,1,1, // \u5e95\u90e8\u9876\u70b9\u662f\u767d\u8272\n                1,1,1,  1,1,1,  1,1,1,\n                1,0,0,  1,0,0,  1,0,0, // \u524d\u9762\u9876\u70b9\u662f\u7ea2\u8272\uff0c\n                0,1,0,  0,1,0,  0,1,0, // \u53f3\u9762\u9876\u70b9\u662f\u7eff\u8272\uff0c\n                0,0,1,  0,0,1,  0,0,1, // \u540e\u9762\u9876\u70b9\u662f\u84dd\u8272\uff0c\n                1,1,0,  1,1,0,  1,1,0  // \u5de6\u9762\u9876\u70b9\u662f\u9ec4\u8272\u3002\n            ]), 3)\n    );\npyramid = new THREE.Mesh( \n        pyramidGeom, \n        new THREE.MeshLambertMaterial({\n            color: \"white\",\n            vertexColors: true\n        }) \n    );\n</code></pre> <p>\u6765\u81ea\u51e0\u4f55\u4f53\u7684\u9876\u70b9\u989c\u8272\u7684\u989c\u8272\u5206\u91cf\u5b9e\u9645\u4e0a\u662f\u4e0eLambert\u6750\u8d28\u4e2d\u7684\u989c\u8272\u5206\u91cf\u76f8\u4e58\u7684\u3002\u5c06\u8be5\u989c\u8272\u8bbe\u7f6e\u4e3a\u767d\u8272\uff0c\u989c\u8272\u5206\u91cf\u7b49\u4e8e\u4e00\uff0c\u8fd9\u662f\u6709\u610f\u4e49\u7684\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9876\u70b9\u989c\u8272\u4e0d\u4f1a\u88ab\u6750\u8d28\u989c\u8272\u4fee\u6539\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u91d1\u5b57\u5854\u7684\u6bcf\u4e2a\u9762\u90fd\u662f\u4e00\u4e2a\u7eaf\u8272\u3002\u91d1\u5b57\u5854\u7684\u989c\u8272\u6570\u7ec4\u6709\u5f88\u591a\u5197\u4f59\uff0c\u56e0\u4e3a\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u989c\u8272\uff0c\u5373\u4f7f\u7ed9\u5b9a\u9762\u7684\u9876\u70b9\u989c\u8272\u90fd\u76f8\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u5e76\u4e0d\u8981\u6c42\u4e00\u4e2a\u9762\u7684\u9876\u70b9\u90fd\u6709\u76f8\u540c\u7684\u989c\u8272\u3002\u5982\u679c\u5b83\u4eec\u88ab\u5206\u914d\u4e86\u4e0d\u540c\u7684\u989c\u8272\uff0c\u989c\u8272\u5c06\u4ece\u9876\u70b9\u63d2\u503c\u5230\u9762\u7684\u5185\u90e8\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u4e3a\u4e00\u4e2a\u7403\u4f53\u7684\u4e8c\u5341\u9762\u4f53\u8fd1\u4f3c\u7684\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u4e86\u968f\u673a\u7684\u9876\u70b9\u989c\u8272\uff1a</p> <p></p> <p>\u8be5\u6f14\u793a\u53ef\u4ee5\u8fd0\u884c\u4e24\u4e2a\u6709\u70b9\u50bb\u7684\u52a8\u753b\uff1b\u9876\u70b9\u989c\u8272\u548c\u9876\u70b9\u4f4d\u7f6e\u53ef\u4ee5\u88ab\u52a8\u753b\u5316\u3002</p> <p>glDrawElements()\u51fd\u6570\u7528\u4e8e\u907f\u514d\u57fa\u672c\u591a\u8fb9\u5f62\u7f51\u683c\u8868\u793a\u4e2d\u7684\u5197\u4f59\u3002\u5b83\u4f7f\u7528\u7d22\u5f15\u9762\u96c6\uff08IFS\uff09\u6a21\u5f0f\uff0c\u8fd9\u9700\u8981\u4e00\u4e2a\u9762\u7d22\u5f15\u6570\u7ec4\u6765\u6307\u5b9a\u7f51\u683c\u9762\u7684\u9876\u70b9\u3002\u5728\u8be5\u6570\u7ec4\u4e2d\uff0c\u4e00\u4e2a\u9876\u70b9\u662f\u901a\u8fc7\u4e00\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\u7684\uff0c\u800c\u4e0d\u662f\u91cd\u590d\u6240\u6709\u5750\u6807\u548c\u5176\u4ed6\u6570\u636e\u3002\u6ce8\u610f\uff0c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u9876\u70b9\u7f16\u53f7\u6307\u7684\u662f\u8be5\u9876\u70b9\u7684\u6240\u6709\u6570\u636e\uff1a\u9876\u70b9\u5750\u6807\u3001\u6cd5\u5411\u91cf\u3001\u9876\u70b9\u989c\u8272\u4ee5\u53ca\u51e0\u4f55\u4f53\u7684\u5c5e\u6027\u4e2d\u63d0\u4f9b\u7684\u4efb\u4f55\u5176\u4ed6\u6570\u636e\u3002\u5047\u8bbe\u4e24\u4e2a\u9762\u5171\u4eab\u4e00\u4e2a\u9876\u70b9\u3002\u5982\u679c\u8be5\u9876\u70b9\u5728\u4e24\u4e2a\u9762\u4e2d\u6709\u4e0d\u540c\u7684\u6cd5\u5411\u91cf\uff0c\u6216\u8005\u67d0\u4e2a\u5176\u4ed6\u5c5e\u6027\u6709\u4e0d\u540c\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5411\u91cf\u5c06\u9700\u8981\u5728\u5c5e\u6027\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e24\u6b21\u3002\u53ea\u6709\u5f53\u9876\u70b9\u5728\u4e24\u4e2a\u9762\u4e2d\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\u65f6\uff0c\u8fd9\u4e24\u4e2a\u51fa\u73b0\u624d\u80fd\u5408\u5e76\u3002IFS\u8868\u793a\u6700\u9002\u5408\u7528\u4f5c\u5e73\u6ed1\u8868\u9762\u7684\u8fd1\u4f3c\u7684\u591a\u8fb9\u5f62\u7f51\u683c\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9876\u70b9\u5bf9\u6240\u6709\u5b83\u51fa\u73b0\u7684\u9876\u70b9\u90fd\u6709\u76f8\u540c\u7684\u6cd5\u5411\u91cf\u3002\u5b83\u4e5f\u9002\u7528\u4e8e\u4f7f\u7528MeshBasicMaterial\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a\u8fd9\u79cd\u7c7b\u578b\u7684\u6750\u8d28\u4e0d\u4f7f\u7528\u6cd5\u5411\u91cf\u3002</p> <p>\u8981\u5728\u4f7f\u7528BufferedGeometry\u65f6\u4f7f\u7528IFS\u6a21\u5f0f\uff0c\u60a8\u9700\u8981\u4e3a\u51e0\u4f55\u4f53\u63d0\u4f9b\u4e00\u4e2a\u9762\u7d22\u5f15\u6570\u7ec4\u3002\u8be5\u6570\u7ec4\u7531\u51e0\u4f55\u4f53\u7684setIndex()\u65b9\u6cd5\u6307\u5b9a\u3002\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u666e\u901a\u7684JavaScript\u6574\u6570\u6570\u7ec4\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u91d1\u5b57\u5854\u793a\u4f8b\uff0c\u51e0\u4f55\u4f53\u7684\u201cposition\u201d\u5c5e\u6027\u5c06\u53ea\u5305\u542b\u6bcf\u4e2a\u9876\u70b9\u4e00\u6b21\uff0c\u9762\u7d22\u5f15\u6570\u7ec4\u5c06\u901a\u8fc7\u5176\u5728\u8be5\u9876\u70b9\u5217\u8868\u4e2d\u7684\u4f4d\u7f6e\u6765\u5f15\u7528\u4e00\u4e2a\u9876\u70b9\uff1a</p> <pre><code>pyramidVertices = new Float32Array( [\n            1, 0,  1,  // \u9876\u70b9\u7f16\u53f70\n            1, 0, -1,  // \u9876\u70b9\u7f16\u53f71\n            -1, 0, -1,  // \u9876\u70b9\u7f16\u53f72\n            -1, 0,  1,  // \u9876\u70b9\u7f16\u53f73\n            0, 1,  0   // \u9876\u70b9\u7f16\u53f74\n] );\n\npyramidFaceIndexArray = [\n            3, 2, 1,  // \u5e95\u90e8\u7684\u7b2c\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\n            3, 1, 0,  // \u5e95\u90e8\u7684\u7b2c\u4e8c\u4e2a\u4e09\u89d2\u5f62\u3002\n            3, 0, 4,  // \u524d\u9762\u3002\n            0, 1, 4,  // \u53f3\u9762\u3002\n            1, 2, 4,  // \u540e\u9762\u3002\n            2, 3, 4   // \u5de6\u9762\u3002\n];\n\npyramidGeom = new THREE.BufferGeometry();\npyramidGeom.setAttribute(\"position\",\n                new THREE.BufferAttribute(pyramidVertices,3) );\npyramidGeom.setIndex( pyramidFaceIndexArray );\n</code></pre> <p>\u8fd9\u5c06\u4e0eMeshBasicMaterial\u4e00\u8d77\u5de5\u4f5c\u3002\u793a\u4f8b\u7a0b\u5e8fthreejs/vertex-groups-indexed.html\u662fthreejs/vertex-groups.html\u7684\u4e00\u4e2a\u53d8\u4f53\uff0c\u5b83\u4f7f\u7528\u4e86\u8fd9\u79cd\u65b9\u6cd5\u3002</p> <p>computeVertexNormals()\u65b9\u6cd5\u4ecd\u7136\u53ef\u4ee5\u7528\u4e8e\u5177\u6709\u7d22\u5f15\u6570\u7ec4\u7684BufferedGeometry\u3002\u8981\u8ba1\u7b97\u4e00\u4e2a\u9876\u70b9\u7684\u6cd5\u5411\u91cf\uff0c\u5b83\u627e\u5230\u8be5\u9876\u70b9\u51fa\u73b0\u7684\u6240\u6709\u7684\u9762\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u9762\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u5b83\u8ba1\u7b97\u4e00\u4e2a\u5782\u76f4\u4e8e\u9762\u7684\u5411\u91cf\u3002\u7136\u540e\u5b83\u5e73\u5747\u8fd9\u4e9b\u5411\u91cf\u4ee5\u5f97\u5230\u9876\u70b9\u6cd5\u5411\u91cf\u3002\uff08\u6211\u4f1a\u6307\u51fa\uff0c\u5982\u679c\u4f60\u5bf9\u6211\u4eec\u7684\u91d1\u5b57\u5854\u5c1d\u8bd5\u8fd9\u4e2a\uff0c\u5b83\u770b\u8d77\u6765\u4f1a\u975e\u5e38\u7cdf\u7cd5\u3002\u5b83\u771f\u7684\u53ea\u9002\u7528\u4e8e\u5e73\u6ed1\u8868\u9762\u3002\uff09</p> <p>A mesh in three.js is what we called a polygonal mesh in Section 3.4, although in a three.js mesh, all of the polygons must be triangles. There are two ways to draw polygonal meshes in WebGL. One uses the function glDrawArrays(), which requires just a list of vertices. The other uses the representation that we called an indexed face set (IFS), which is drawn using the function glDrawElements(). In addition to a list of vertices, an IFS uses a list of face indices to specify the triangles. We will look at both methods, using this pyramid as an example:</p> <p></p> <p>Note that the bottom face of the pyramid, which is a square, has to be divided into two triangles in order for the pyramid to be represented as a mesh geometry. The vertices are numbered from 0 to 4. A triangular face can be specified by the three numbers that give the vertex numbers of the vertices of that triangle. As usual, the vertices of a triangle should be specified in counterclockwise order when viewed from the front, that is, from outside the pyramid. Here is the data that we need.</p> <pre><code>    VERTEX COORDINATES:         FACE INDICES:\n\n    Vertex 0:   1, 0,  1        Face 1:  3, 2, 1 \n    Vertex 1:   1, 0, -1        Face 2:  3, 1, 0 \n    Vertex 2:  -1, 0, -1        Face 3:  3, 0, 4 \n    Vertex 3:  -1, 0,  1        Face 4:  0, 1, 4 \n    Vertex 4:   0, 1,  0        Face 5:  1, 2, 4 \n                                Face 6:  2, 3, 4\n</code></pre> <p>A basic polygonal mesh representation does not use face indices. Instead, it specifies each triangle by listing the coordinates of the vertices. This requires nine numbers\u2014three numbers per vertex\u2014for the three vertices of the triangle. Since a vertex can be shared by several triangles, there is some redundancy. For the pyramid, the coordinates for a vertex will be repeated three or four times.</p> <p>A three.js mesh object requires a geometry and a material. The geometry is an object of type THREE.BufferedGeometry, which has a \"position\" attribute that holds the coordinates of the vertices that are used in the mesh. The attribute uses a typed array that holds the coordinates of the vertices of the triangles that make up the mesh. Geometry for the pyramid can be created like this:</p> <pre><code>let pyramidVertices = new Float32Array( [\n            // Data for the pyramidGeom \"position\" attribute.\n            // Contains the x,y,z coordinates for the vertices.\n            // Each group of three numbers is a vertex;\n            // each group of three vertices is one face.\n            -1,0,1,  -1,0,-1,  1,0,-1, // First triangle in the base.\n            -1,0,1,   1,0,-1,  1,0,1,  // Second triangle in the base.\n            -1,0,1,   1,0,1,   0,1,0,  // Front face.\n            1,0,1,   1,0,-1,  0,1,0,  // Right face.\n            1,0,-1, -1,0,-1,  0,1,0,  // Back face.\n            -1,0,-1, -1,0,1,   0,1,0   // Left face.\n        ] );\nlet pyramidGeom = new THREE.BufferGeometry();\npyramidGeom.setAttribute(\"position\",\n                new THREE.BufferAttribute(pyramidVertices,3) );\n</code></pre> <p>When this geometry is used with a Lambert or Phong material, normal vectors are required for the vertices. If the geometry has no normal vectors, Lambert and Phong materials will appear black. The normal vectors for a mesh have to be stored in another attribute of the BufferedGeometry. The name of the attribute is \"normal\", and it holds a normal vector for each vertex in the \"position\" attribute. It could be created in the same way that the \"position\" attribute is created, but a BufferedGeometry object includes a method for calculating normal vectors. For the pyramidGeom, we can simply call</p> <pre><code>pyramidGeom.computeVertexNormals();\n</code></pre> <p>For a basic polygonal mesh, this will create normal vectors that are perpendicular to the faces. When several faces share a vertex, that vertex will have a different normal vector for each face. This will produce flat-looking faces, which are appropriate for a polyhedron, whose sides are in fact flat. It is not appropriate if the polygonal mesh is being used to approximate a smooth surface. In that case, we should be using normal vectors that are perpendicular to the surface, which would mean creating the \"normal\" attribute by hand. (See Subsection 4.1.3.)</p> <p>Once we have the geometry for our pyramid, we can use it in a three.js mesh object by combining it with, say, a yellow Lambert material:</p> <pre><code>pyramid = new THREE.Mesh( \n            pyramidGeom,\n            new THREE.MeshLambertMaterial({ color: \"yellow\" }) \n        );\n</code></pre> <p>But the pyramid would look a little boring with just one color. It is possible to use different materials on different faces of a mesh. For that to work, the vertices in the geometry must be divided into groups. The addGroup() method in the BufferedGeometry class is used to create the groups. The vertices in the geometry are numbered 0, 1, 2, ..., according their sequence in the \"position\" attribute. (This is not the same numbering used above.) The addGroup() method takes three parameters: the number of the first vertex in the group, the number of vertices in the group, and a material index. The material index is an integer that determines which material will be applied to the group. If you are using groups, it is important to put all of the vertices into groups. Here is how groups can be created for the pyramid:</p> <pre><code>pyramidGeom.addGroup(0,6,0);  // The base (2 triangles)\npyramidGeom.addGroup(6,3,1);  // Front face.\npyramidGeom.addGroup(9,3,2);  // Right face.\npyramidGeom.addGroup(12,3,3); // Back face.\npyramidGeom.addGroup(15,3,4); // Left face.\n</code></pre> <p>To apply different materials to different groups, the materials should be put into an array. The material index of a group is an index into that array.</p> <pre><code>pyramidMaterialArray= [ \n        // Array of materials, for use as pyramids's material.\n        new THREE.MeshLambertMaterial( { color: 0xffffff } ),\n        new THREE.MeshLambertMaterial( { color: 0x99ffff } ),\n        new THREE.MeshLambertMaterial( { color: 0xff99ff } ),\n        new THREE.MeshLambertMaterial( { color: 0xffff99 } ),\n        new THREE.MeshLambertMaterial( { color: 0xff9999 } )\n    ];\n</code></pre> <p>This array can be passed as the second parameter to the THREE.Mesh constructor, where a single material would ordinarily be used.</p> <pre><code>pyramid = new THREE.Mesh( pyramidGeom, pyramidMaterialArray );\n</code></pre> <p>(But note that you can still use a single material on a mesh, even if the mesh geometry uses groups.)</p> <p>A THREE.BoxGeometry comes with groups that make it possible to assign a different material to each face. The sample program threejs/vertex-groups.html uses the code from this section to create a pyramid, and it displays both the pyramid and a cube, using multiple materials on each object. Here's what they look like:</p> <p></p> <p>There is another way to assign different colors to different vertices. A BufferedGeometry can have an attribute named \"color\" that specifies a color for each vertex. The \"color\" attribute uses an array containing a set of three RGB component values for each vertex. The vertex colors are ignored by default. To use them, the geometry must be combined with a material in which the vertexColors property is set to true. Here is how vertex colors could be used to color the sides of the pyramid:</p> <pre><code>pyramidGeom.setAttribute(\n        \"color\",\n        new THREE.BufferAttribute( new Float32Array([\n                1,1,1,  1,1,1,  1,1,1, // Base vertices are white\n                1,1,1,  1,1,1,  1,1,1,\n                1,0,0,  1,0,0,  1,0,0, // Front face vertices are red,\n                0,1,0,  0,1,0,  0,1,0, // Right face vertices are green,\n                0,0,1,  0,0,1,  0,0,1, // Back face vertices are blue,\n                1,1,0,  1,1,0,  1,1,0  // Left face vertices are yellow.\n            ]), 3)\n    );\npyramid = new THREE.Mesh( \n        pyramidGeom, \n        new THREE.MeshLambertMaterial({\n            color: \"white\",\n            vertexColors: true\n        }) \n    );\n</code></pre> <p>The color components of the vertex colors from the geometry are actually multiplied by the color components of the color in the Lambert material. It makes sense for that color to be white, with color components equal to one; in that case the vertex colors are not modified by the material color.</p> <p>In this example, each face of the pyramid is a solid color. There is a lot of redundancy in the color array for the pyramid, because a color must be specified for every vertex, even if all of the vertex colors for a given face are the same. In fact, it's not required that all of the vertices of a face have the same color. If they are assigned different colors, colors will be interpolated from the vertices to the interior of the face. As an example, in the following demo, a random vertex color was specified for each vertex of an icosahedral approximation for a sphere:</p> <p></p> <p>The demo can run two somewhat silly animations; the vertex colors and the vertex positions can be animated.</p> <p>The glDrawElements() function is used to avoid the redundancy of the basic polygonal mesh representation. It uses the indexed face set pattern, which requires an array of face indices to specify the vertices for the faces of the mesh. In that array, a vertex is specified by a single number, rather than repeating all of the coordinates and other data for that vertex. Note that a given vertex number refers to all of the data for that vertex: vertex coordinates, normal vector, vertex color, and any other data that are provided in attributes of the geometry. Suppose that two faces share a vertex. If that vertex has a different normal vector, or a different value for some other attribute, in the two faces, then that vector will need to occur twice in the attribute arrays. The two occurrences can be combined only if the vertex has identical properties in the two faces. The IFS representation is most suitable for a polygonal mesh that is being used as an approximation for a smooth surface, since in that case a vertex has the same normal vector for all of the vertices in which it occurs. It can also be appropriate for an object that uses a MeshBasicMaterial, since normal vectors are not used with that type of material.</p> <p>To use the IFS pattern with a BufferedGeometry, you need to provide a face index array for the geometry. The array is specified by the geometry's setIndex() method. The parameter can be an ordinary JavaScript array of integers. For our pyramid example the \"position\" attribute of the geometry would contain each vertex just once, and the face index array would refer to a vertex by its position in that list of vertices:</p> <pre><code>pyramidVertices = new Float32Array( [\n            1, 0,  1,  // vertex number 0\n            1, 0, -1,  // vertex number 1\n            -1, 0, -1,  // vertex number 2\n            -1, 0,  1,  // vertex number 3\n            0, 1,  0   // vertex number 4\n] );\n\npyramidFaceIndexArray = [\n            3, 2, 1,  // First triangle in the base.\n            3, 1, 0,  // Second Triangle in the base.\n            3, 0, 4,  // Front face.\n            0, 1, 4,  // Right face.\n            1, 2, 4,  // Back face.\n            2, 3, 4   // Left face.\n];\n\npyramidGeom = new THREE.BufferGeometry();\npyramidGeom.setAttribute(\"position\",\n                new THREE.BufferAttribute(pyramidVertices,3) );\npyramidGeom.setIndex( pyramidFaceIndexArray );\n</code></pre> <p>This would work with a MeshBasicMaterial. The sample program threejs/vertex-groups-indexed.html is a variation on threejs/vertex-groups.html that uses this approach.</p> <p>The computeVertexNormals() method can still be used for a BufferedGeometry that has an index array. To compute a normal vector for a vertex, it finds all of the faces in which that vertex occurs. For each of those faces, it computes a vector perpendicular to the face. Then it averages those vectors to get the vertex normal. (I will note if you tried this for our pyramid, it would look pretty bad. It's really only appropriate for smooth surfaces.)</p>"},{"location":"cn/c5/s2/#522-\u66f2\u7ebf\u548c\u66f2\u9762","title":"5.2.2 \u66f2\u7ebf\u548c\u66f2\u9762","text":"<p>Curves and Surfaces</p> \u4e2d\u6587\u82f1\u6587 <p>\u9664\u4e86\u5141\u8bb8\u4f60\u6784\u5efa\u7d22\u5f15\u9762\u96c6\uff0cthree.js\u8fd8\u652f\u6301\u4f7f\u7528\u6570\u5b66\u5b9a\u4e49\u7684\u66f2\u7ebf\u548c\u66f2\u9762\u3002\u4e00\u4e9b\u53ef\u80fd\u6027\u5728\u793a\u4f8b\u7a0b\u5e8fthreejs/curves-and-surfaces.html\u4e2d\u8fdb\u884c\u4e86\u8bf4\u660e\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u8ba8\u8bba\u5176\u4e2d\u7684\u4e00\u4e9b\u3002</p> <p>\u53c2\u6570\u5316\u66f2\u9762\u662f\u6700\u5bb9\u6613\u5904\u7406\u7684\u3002\u5b83\u4eec\u7531\u4e00\u4e2a\u540d\u4e3aParametricGeometry\u7684three.js\u63d2\u4ef6\u8868\u793a\u3002\u4f5c\u4e3a\u4e00\u4e2a\u63d2\u4ef6\uff0c\u5b83\u5fc5\u987b\u4ece\u4e3b\u8981\u7684three.js\u6a21\u5757\u4e2d\u5355\u72ec\u5bfc\u5165\u3002\u5728\u6211\u7684\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u5b83\u662f\u8fd9\u6837\u5bfc\u5165\u7684\uff1a</p> <pre><code>import {ParametricGeometry} from \"addons/geometries/ParametricGeometry.js\";\n</code></pre> <p>\u53c2\u6570\u5316\u66f2\u9762\u7531\u4e00\u4e2a\u6570\u5b66\u51fd\u6570\u5b9a\u4e49\uff0c\u8be5\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570(u,v)\uff0c\u5176\u4e2du\u548cv\u662f\u6570\u5b57\uff0c\u51fd\u6570\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\u3002\u66f2\u9762\u7531\u51fd\u6570\u5728\u67d0\u4e9b\u6307\u5b9a\u8303\u56f4\u5185\u5bf9u\u548cv\u7684\u503c\u6784\u6210\u7684\u6240\u6709\u70b9\u7ec4\u6210\u3002\u5bf9\u4e8ethree.js\uff0c\u8be5\u51fd\u6570\u662f\u4e00\u4e2a\u5e38\u89c4\u7684JavaScript\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1au, v\u548c\u4e00\u4e2a\u7c7b\u578b\u4e3aTHREE.Vector3\u7684\u5bf9\u8c61\u3002\u8be5\u51fd\u6570\u5fc5\u987b\u4fee\u6539\u5411\u91cf\u4ee5\u8868\u793a\u5bf9\u5e94\u4e8eu\u548cv\u53c2\u6570\u503c\u7684\u7a7a\u95f4\u4e2d\u7684\u70b9\u3002\u901a\u8fc7\u5728(u,v)\u70b9\u7684\u7f51\u683c\u4e0a\u8c03\u7528\u51fd\u6570\u6765\u521b\u5efa\u53c2\u6570\u5316\u66f2\u9762\u51e0\u4f55\u4f53\u3002\u8fd9\u63d0\u4f9b\u4e86\u66f2\u9762\u4e0a\u7684\u4e00\u7ec4\u70b9\uff0c\u7136\u540e\u8fd9\u4e9b\u70b9\u88ab\u8fde\u63a5\u8d77\u6765\uff0c\u4ee5\u7ed9\u51fa\u66f2\u9762\u7684\u591a\u8fb9\u5f62\u8fd1\u4f3c\u3002\u5728three.js\u4e2d\uff0cu\u548cv\u7684\u503c\u603b\u662f\u57280.0\u52301.0\u7684\u8303\u56f4\u5185\u3002\u51e0\u4f55\u4f53\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u521b\u5efa\u7684\uff1a</p> <pre><code>new ParametricGeometry( func, slices, stacks )\n</code></pre> <p>\u5176\u4e2dfunc\u662f\u5b9a\u4e49\u66f2\u9762\u7684JavaScript\u51fd\u6570\uff0cslices\u548cstacks\u786e\u5b9a\u7f51\u683c\u4e2d\u7684\u70b9\u6570\uff1bslices\u7ed9\u51fa\u4e86\u4ece0\u52301\u7684\u533a\u95f4\u5728u\u65b9\u5411\u4e0a\u7684\u7ec6\u5206\u6570\u91cf\uff0c\u800cstacks\u5728v\u65b9\u5411\u4e0a\u3002\u4e00\u65e6\u6709\u4e86\u51e0\u4f55\u4f53\uff0c\u5c31\u53ef\u4ee5\u50cf\u901a\u5e38\u4e00\u6837\u4f7f\u7528\u5b83\u6765\u5236\u4f5c\u7f51\u683c\u3002\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8f\uff1a</p> <p></p> <p>\u8fd9\u4e2a\u66f2\u9762\u7531\u51fd\u6570\u5b9a\u4e49\uff1a</p> <pre><code>function surfaceFunction( u, v, vector ) {\n    let x,y,z;  // \u66f2\u9762\u4e0a\u7684\u70b9\u7684\u5750\u6807\uff0c\n                // \u6839\u636eu,v\u8ba1\u7b97\uff0c\u5176\u4e2du\u548cv\u7684\u8303\u56f4\u4ece0.0\u52301.0\u3002\n    x = 20 * (u - 0.5);  // x\u548cz\u7684\u8303\u56f4\u4ece-10\u523010\n    z = 20 * (v - 0.5);\n    y = 2*(Math.sin(x/2) * Math.cos(z));\n    vector.set( x, y, z );\n}\n</code></pre> <p>\u4ee3\u8868\u66f2\u9762\u7684three.js\u7f51\u683c\u662f\u4f7f\u7528\u521b\u5efa\u7684\uff1a</p> <pre><code>let surfaceGeometry = new THREE.ParametricGeometry(surfaceFunction, 64, 64);\nlet surface = new THREE.Mesh( surfaceGeometry, material );\n</code></pre> <p>\u66f2\u7ebf\u5728three.js\u4e2d\u66f4\u590d\u6742\u3002THREE.Curve\u7c7b\u8868\u793a\u4e8c\u7ef4\u6216\u4e09\u7ef4\u53c2\u6570\u5316\u66f2\u7ebf\u7684\u62bd\u8c61\u6982\u5ff5\u3002\uff08\u5b83\u4e0d\u8868\u793athree.js\u51e0\u4f55\u4f53\u3002\uff09\u53c2\u6570\u5316\u66f2\u7ebf\u7531\u4e00\u4e2a\u6570\u503c\u53d8\u91cft\u7684\u51fd\u6570\u5b9a\u4e49\u3002\u51fd\u6570\u8fd4\u56de\u7684\u503c\u7c7b\u578b\u4e3aTHREE.Vector2\u5bf9\u4e8e2D\u66f2\u7ebf\u6216THREE.Vector3\u5bf9\u4e8e3D\u66f2\u7ebf\u3002\u5bf9\u4e8e\u7c7b\u578b\u4e3aTHREE.Curve\u7684\u5bf9\u8c61\uff0c\u66f2\u7ebf\uff0c\u65b9\u6cd5curve.getPoint(t)\u5e94\u8be5\u8fd4\u56de\u5bf9\u5e94\u4e8e\u53c2\u6570t\u7684\u66f2\u7ebf\u4e0a\u7684\u70b9\u3002\u66f2\u7ebf\u7531\u8fd9\u4e2a\u51fd\u6570\u751f\u6210\u7684\u70b9\u7ec4\u6210\uff0c\u5bf9\u4e8et\u7684\u503c\u8303\u56f4\u4ece0.0\u52301.0\u3002\u7136\u800c\uff0c\u5728Curve\u7c7b\u672c\u8eab\u4e2d\uff0cgetPoint()\u662f\u672a\u5b9a\u4e49\u7684\u3002\u8981\u5f97\u5230\u4e00\u4e2a\u5b9e\u9645\u7684\u66f2\u7ebf\uff0c\u4f60\u5fc5\u987b\u5b9a\u4e49\u5b83\u3002\u4f8b\u5982\uff0c</p> <pre><code>let helix = new THREE.Curve();\nhelix.getPoint = function(t) {\nlet s = (t - 0.5) * 12*Math.PI;\n        // \u5f53t\u4ece0\u52301\u53d8\u5316\u65f6\uff0cs\u7684\u8303\u56f4\u4ece-6*PI\u52306*PI\nreturn new THREE.Vector3(\n        5*Math.cos(s),\n        s,\n        5*Math.sin(s)\n);\n}\n</code></pre> <p>\u4e00\u65e6getPoint\u88ab\u5b9a\u4e49\uff0c\u4f60\u5c31\u6709\u4e00\u4e2a\u53ef\u7528\u7684\u66f2\u7ebf\u3002\u4f60\u53ef\u4ee5\u7528\u5b83\u505a\u7684\u4e00\u4ef6\u4e8b\u662f\u521b\u5efa\u4e00\u4e2a\u7ba1\u72b6\u51e0\u4f55\u4f53\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4ee5\u5706\u622a\u9762\u548c\u66f2\u7ebf\u6cbf\u7ba1\u4e2d\u5fc3\u8fd0\u884c\u7684\u7ba1\u72b6\u8868\u9762\u3002\u793a\u4f8b\u7a0b\u5e8f\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684helix\u66f2\u7ebf\u6765\u521b\u5efa\u4e24\u4e2a\u7ba1\u5b50\uff1a</p> <p></p> <p>\u8f83\u5bbd\u7ba1\u5b50\u7684\u51e0\u4f55\u4f53\u662f\u8fd9\u6837\u521b\u5efa\u7684\uff1a</p> <pre><code>tubeGeometry1 = new THREE.TubeGeometry( helix, 128, 2.5, 32 );\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6cbf\u66f2\u7ebf\u957f\u5ea6\u7684\u66f2\u9762\u7ec6\u5206\u6570\u91cf\u3002\u7b2c\u4e09\u4e2a\u662f\u7ba1\u7684\u5706\u622a\u9762\u534a\u5f84\uff0c\u7b2c\u56db\u4e2a\u662f\u622a\u9762\u5468\u957f\u4e0a\u7684\u7ec6\u5206\u6570\u91cf\u3002</p> <p>\u8981\u5236\u4f5c\u4e00\u4e2a\u7ba1\u5b50\uff0c\u4f60\u9700\u8981\u4e00\u4e2a3D\u66f2\u7ebf\u3002\u4e5f\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ece2D\u66f2\u7ebf\u521b\u5efa\u4e00\u4e2a\u66f2\u9762\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u56f4\u7ed5\u4e00\u6761\u7ebf\u65cb\u8f6c\u66f2\u7ebf\uff0c\u751f\u6210\u4e00\u4e2a\u65cb\u8f6c\u66f2\u9762\u3002\u66f2\u9762\u7531\u66f2\u7ebf\u5728\u65cb\u8f6c\u65f6\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\u7ec4\u6210\u3002\u8fd9\u79f0\u4e3a\u8f66\u524a\u3002\u8fd9\u5f20\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8f\u7684\u56fe\u50cf\u663e\u793a\u4e86\u901a\u8fc7\u8f66\u524a\u4f59\u5f26\u66f2\u7ebf\u751f\u6210\u7684\u66f2\u9762\u3002\uff08\u56fe\u50cf\u65cb\u8f6c\u4e8690\u5ea6\uff0c\u4ee5\u4fbfy\u8f74\u662f\u6c34\u5e73\u7684\u3002\uff09\u66f2\u7ebf\u672c\u8eab\u663e\u793a\u5728\u66f2\u9762\u4e0a\u65b9\uff1a</p> <p></p> <p>\u5728three.js\u4e2d\uff0c\u4f7f\u7528THREE.LatheGeometry\u5bf9\u8c61\u521b\u5efa\u66f2\u9762\u3002\u4e00\u4e2aLatheGeometry\u4e0d\u662f\u4ece\u4e00\u4e2a\u66f2\u7ebf\u800c\u662f\u4ece\u4e00\u4e2a\u4f4d\u4e8e\u66f2\u7ebf\u4e0a\u7684\u70b9\u7684\u6570\u7ec4\u6784\u5efa\u7684\u3002\u8fd9\u4e9b\u70b9\u662fVector2\u7c7b\u578b\u7684\uff0c\u66f2\u7ebf\u4f4d\u4e8exy\u5e73\u9762\u5185\u3002\u66f2\u9762\u662f\u901a\u8fc7\u56f4\u7ed5y\u8f74\u65cb\u8f6c\u66f2\u7ebf\u751f\u6210\u7684\u3002LatheGeometry\u6784\u9020\u51fd\u6570\u7684\u5f62\u5f0f\u4e3a\uff1a</p> <pre><code>new THREE.LatheGeometry( points, slices )\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fVector2\u6570\u7ec4\u3002\u7b2c\u4e8c\u4e2a\u662f\u6cbf\u751f\u6210\u7684\u5706\u5708\u7684\u66f2\u9762\u7ec6\u5206\u6570\u91cf\u3002\uff08\u66f2\u9762\u7684\u201c\u5806\u6808\u201d\u6570\u91cf\u7531\u70b9\u6570\u7ec4\u7684\u957f\u5ea6\u7ed9\u51fa\u3002\uff09\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6211\u901a\u8fc7\u8c03\u7528cosine.getPoints(128)\uff0c\u4ece\u7c7b\u578b\u4e3aCurve\u7684\u5bf9\u8c61cosine\u521b\u5efa\u70b9\u7684\u6570\u7ec4\u3002\u8fd9\u4e2a\u51fd\u6570\u521b\u5efa\u4e86\u66f2\u7ebf\u4e0a\u7684128\u4e2a\u70b9\uff0c\u4f7f\u7528\u7684\u53c2\u6570\u503c\u8303\u56f4\u4ece0.0\u52301.0\u3002</p> <p>\u4f60\u53ef\u4ee5\u75282D\u66f2\u7ebf\u505a\u7684\u53e6\u4e00\u4ef6\u4e8b\u5c31\u662f\u7b80\u5355\u5730\u586b\u5145\u66f2\u7ebf\u7684\u5185\u90e8\uff0c\u7ed9\u51fa\u4e00\u4e2a2D\u586b\u5145\u5f62\u72b6\u3002\u5728three.js\u4e2d\uff0c\u8981\u8fd9\u6837\u505a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u4e3aTHREE.Shape\u7684\u5bf9\u8c61\uff0c\u5b83\u662fTHREE.Curve\u7684\u4e00\u4e2a\u5b50\u7c7b\u3002\u4e00\u4e2aShape\u53ef\u4ee5\u50cf\u5728\u7b2c2.6\u8282\u4e2d\u4ecb\u7ecd\u76842D Canvas API\u4e2d\u7684\u8def\u5f84\u4e00\u6837\u5b9a\u4e49\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u7c7b\u578b\u4e3aTHREE.Shape\u7684\u5bf9\u8c61shape\u5177\u6709\u65b9\u6cd5shape.moveTo, shape.lineTo, shape.quadraticCurveTo\u548cshape.bezierCurveTo\uff0c\u53ef\u4ee5\u7528\u6765\u5b9a\u4e49\u8def\u5f84\u3002\u6709\u5173\u8fd9\u4e9b\u51fd\u6570\u5982\u4f55\u5de5\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u96052.6.2\u5c0f\u8282\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6cea\u6ef4\u5f62\u72b6\uff1a</p> <pre><code>let path = new THREE.Shape();\npath.moveTo(0,10);\npath.bezierCurveTo( 0,5, 20,-10, 0,-10 );\npath.bezierCurveTo( -20,-10, 0,5, 0,10 );\n</code></pre> <p>\u8981\u4f7f\u7528\u8def\u5f84\u5728three.js\u4e2d\u521b\u5efa\u4e00\u4e2a\u586b\u5145\u5f62\u72b6\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2aShapeGeometry\u5bf9\u8c61\uff1a</p> <pre><code>let shapeGeom = new THREE.ShapeGeometry( path );\n</code></pre> <p>\u4f7f\u7528\u6b64\u51e0\u4f55\u4f53\u521b\u5efa\u76842D\u5f62\u72b6\u663e\u793a\u5728\u8fd9\u5f20\u56fe\u7247\u7684\u5de6\u4fa7\uff1a</p> <p></p> <p>\u56fe\u7247\u4e2d\u7684\u5176\u4ed6\u4e24\u4e2a\u5bf9\u8c61\u662f\u901a\u8fc7\u62c9\u4f38\u5f62\u72b6\u521b\u5efa\u7684\u3002\u5728\u62c9\u4f38\u4e2d\uff0c\u4e00\u4e2a\u586b\u5145\u76842D\u5f62\u72b6\u6cbf\u77403D\u4e2d\u7684\u8def\u5f84\u79fb\u52a8\u3002\u5f62\u72b6\u7ecf\u8fc7\u7684\u70b9\u7ec4\u6210\u4e86\u4e00\u4e2a3D\u5b9e\u4f53\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f62\u72b6\u6cbf\u7740\u5782\u76f4\u4e8e\u5f62\u72b6\u7684\u7ebf\u6bb5\u62c9\u4f38\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u3002\u57fa\u672c\u62c9\u4f38\u5f62\u72b6\u5728\u63d2\u56fe\u7684\u53f3\u4fa7\u663e\u793a\u3002\u4e2d\u95f4\u7684\u5bf9\u8c61\u662f\u5177\u6709\u201c\u659c\u9762\u201d\u8fb9\u7f18\u7684\u76f8\u540c\u5f62\u72b6\u3002\u6709\u5173\u62c9\u4f38\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605THREE.ExtrudeGeometry\u7684\u6587\u6863\u548c\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u3002</p> <p>In addition to letting you build indexed face sets, three.js has support for working with curves and surfaces that are defined mathematically. Some of the possibilities are illustrated in the sample program threejs/curves-and-surfaces.html, and I will discuss a few of them here.</p> <p>Parametric surfaces are the easiest to work with. They are represented by a three.js add-on named ParametricGeometry. As an add-on, it must be imported separately from the main three.js module. In my sample program, it is imported with</p> <pre><code>import {ParametricGeometry} from \"addons/geometries/ParametricGeometry.js\";\n</code></pre> <p>A parametric surface is defined by a mathematical function of two parameters (u,v), where u and v are numbers, and each value of the function is a point in space. The surface consists of all the points that are values of the function for u and v in some specified ranges. For three.js, the function is a regular JavaScript function that takes three parameters: u, v, and an object of type THREE.Vector3. The function must modify the vector to represent the point in space that corresponds to the values of the u and v parameters. A parametric surface geometry is created by calling the function at a grid of (u,v) points. This gives a collection of points on the surface, which are then connected to give a polygonal approximation of the surface. In three.js, the values of both u and v are always in the range 0.0 to 1.0. The geometry is created by a constructor</p> <pre><code>new ParametricGeometry( func, slices, stacks )\n</code></pre> <p>where func is the JavaScript function that defines the surface, and slices and stacks determine the number of points in the grid; slices gives the number of subdivisions of the interval from 0 to 1 in the u direction, and stacks, in the v direction. Once you have the geometry, you can use it to make a mesh in the usual way. Here is an example, from the sample program:</p> <p></p> <p>This surface is defined by the function</p> <pre><code>function surfaceFunction( u, v, vector ) {\n    let x,y,z;  // Coordinates for a point on the surface, \n                // calculated from u,v, where u and v\n                // range from 0.0 to 1.0.\n    x = 20 * (u - 0.5);  // x and z range from -10 to 10\n    z = 20 * (v - 0.5);\n    y = 2*(Math.sin(x/2) * Math.cos(z));\n    vector.set( x, y, z );\n}\n</code></pre> <p>and the three.js mesh that represents the surface is created using</p> <pre><code>let surfaceGeometry = new THREE.ParametricGeometry(surfaceFunction, 64, 64);\nlet surface = new THREE.Mesh( surfaceGeometry, material );\n</code></pre> <p>Curves are more complicated in three.js. The class THREE.Curve represents the abstract idea of a parametric curve in two or three dimensions. (It does not represent a three.js geometry.) A parametric curve is defined by a function of one numeric variable t. The value returned by the function is of type THREE.Vector2 for a 2D curve or THREE.Vector3 for a 3D curve. For an object, curve, of type THREE.Curve, the method curve.getPoint(t) should return the point on the curve corresponding to the value of the parameter t. The curve consists of points generated by this function for values of t ranging from 0.0 to 1.0. However, in the Curve class itself, getPoint() is undefined. To get an actual curve, you have to define it. For example,</p> <pre><code>let helix = new THREE.Curve();\nhelix.getPoint = function(t) {\nlet s = (t - 0.5) * 12*Math.PI;\n        // As t ranges from 0 to 1, s ranges from -6*PI to 6*PI\nreturn new THREE.Vector3(\n        5*Math.cos(s),\n        s,\n        5*Math.sin(s)\n);\n}\n</code></pre> <p>Once getPoint is defined, you have a usable curve. One thing that you can do with it is create a tube geometry, which defines a surface that is a tube with a circular cross-section and with the curve running along the center of the tube. The sample program uses the helix curve, defined above, to create two tubes:</p> <p></p> <p>The geometry for the wider tube is created with</p> <pre><code>tubeGeometry1 = new THREE.TubeGeometry( helix, 128, 2.5, 32 );\n</code></pre> <p>The second parameter to the constructor is the number of subdivisions of the surface along the length of the curve. The third is the radius of the circular cross-section of the tube, and the fourth is the number of subdivisions around the circumference of the cross-section.</p> <p>To make a tube, you need a 3D curve. There are also several ways to make a surface from a 2D curve. One way is to rotate the curve about a line, generating a surface of rotation. The surface consists of all the points that the curve passes through as it rotates. This is called lathing. This image from the sample program shows the surface generated by lathing a cosine curve. (The image is rotated 90 degrees, so that the y-axis is horizontal.) The curve itself is shown above the surface:</p> <p></p> <p>The surface is created in three.js using a THREE.LatheGeometry object. A LatheGeometry is constructed not from a curve but from an array of points that lie on the curve. The points are objects of type Vector2, and the curve lies in the xy-plane. The surface is generated by rotating the curve about the y-axis. The LatheGeometry constructor takes the form</p> <pre><code>new THREE.LatheGeometry( points, slices )\n</code></pre> <p>The first parameter is the array of Vector2. The second is the number of subdivisions of the surface along the circle generated when a point is rotated about the axis. (The number of \"stacks\" for the surface is given by the length of the points array.) In the sample program, I create the array of points from an object, cosine, of type Curve by calling cosine.getPoints(128). This function creates an array of 128 points on the curve, using values of the parameter that range from 0.0 to 1.0.</p> <p>Another thing that you can do with a 2D curve is simply to fill in the inside of the curve, giving a 2D filled shape. To do that in three.js, you can use an object of type THREE.Shape, which is a subclass of THREE.Curve. A Shape can be defined in the same way as a path in the 2D Canvas API that was covered in Section 2.6. That is, an object shape of type THREE.Shape has methods shape.moveTo, shape.lineTo, shape.quadraticCurveTo and shape.bezierCurveTo that can be used to define the path. See Subsection 2.6.2 for details of how these functions work. As an example, we can create a teardrop shape:</p> <pre><code>let path = new THREE.Shape();\npath.moveTo(0,10);\npath.bezierCurveTo( 0,5, 20,-10, 0,-10 );\npath.bezierCurveTo( -20,-10, 0,5, 0,10 );\n</code></pre> <p>To use the path to create a filled shape in three.js, we need a ShapeGeometry object:</p> <pre><code>let shapeGeom = new THREE.ShapeGeometry( path );\n</code></pre> <p>The 2D shape created with this geometry is shown on the left in this picture:</p> <p></p> <p>The other two objects in the picture were created by extruding the shape. In extrusion, a filled 2D shape is moved along a path in 3D. The points that the shape passes through make up a 3D solid. In this case, the shape was extruded along a line segment perpendicular to the shape, which is the most common case. The basic extruded shape is shown on the right in the illustration. The middle object is the same shape with \"beveled\" edges. For more details on extrusion, see the documentation for THREE.ExtrudeGeometry and the source code for the sample program.</p>"},{"location":"cn/c5/s2/#523-\u7eb9\u7406","title":"5.2.3 \u7eb9\u7406","text":"<p>Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u7eb9\u7406\u53ef\u4ee5\u7528\u6765\u4e3a\u5bf9\u8c61\u6dfb\u52a0\u89c6\u89c9\u5174\u8da3\u548c\u7ec6\u8282\u3002\u5728three.js\u4e2d\uff0c\u56fe\u50cf\u7eb9\u7406\u7531\u7c7b\u578b\u4e3aTHREE.Texture\u7684\u5bf9\u8c61\u8868\u793a\u3002\u7531\u4e8e\u6211\u4eec\u8c08\u8bba\u7684\u662f\u7f51\u9875\uff0cthree.js\u7684\u56fe\u50cf\u901a\u5e38\u4ece\u7f51\u7edc\u5730\u5740\u52a0\u8f7d\u3002\u56fe\u50cf\u7eb9\u7406\u901a\u5e38\u4f7f\u7528\u7c7b\u578b\u4e3aTHREE.TextureLoader\u7684\u5bf9\u8c61\u4e2d\u7684load\u51fd\u6570\u521b\u5efa\u3002\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2aURL\uff08\u4e00\u4e2a\u7f51\u7edc\u5730\u5740\uff0c\u901a\u5e38\u662f\u76f8\u5bf9\u5730\u5740\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aTexture\u5bf9\u8c61\uff1a</p> <pre><code>let loader = new THREE.TextureLoader();\nlet texture = loader.load( imageURL );\n</code></pre> <p>\uff08\u5efa\u8bae\u4e5f\u8bbe\u7f6e</p> <pre><code>tex.colorSpace = THREE.SRGBColorSpace;\n</code></pre> <p>\u4ee5\u6b63\u786e\u663e\u793a\u989c\u8272\u3002three.js\u6587\u6863\u8868\u793a\uff0c\u201c\u5305\u542b\u989c\u8272\u4fe1\u606f\u7684PNG\u6216JPEG\u7eb9\u7406\uff08\u5982.map\u6216.emissiveMap\uff09\u4f7f\u7528\u5c01\u95ed\u7684sRGB\u989c\u8272\u7a7a\u95f4\uff0c\u5e76\u4e14\u5fc5\u987b\u7528texture.colorSpace = SRGBColorSpace\u8fdb\u884c\u6ce8\u91ca\u3002\")</p> <p>\u5728three.js\u4e2d\uff0c\u7eb9\u7406\u88ab\u89c6\u4e3a\u6750\u8d28\u7684\u4e00\u90e8\u5206\u3002\u8981\u5c06\u7eb9\u7406\u5e94\u7528\u4e8e\u7f51\u683c\uff0c\u53ea\u9700\u5c06Texture\u5bf9\u8c61\u5206\u914d\u7ed9\u7528\u4e8e\u7f51\u683c\u7684\u7f51\u683c\u6750\u8d28\u4e0a\u7684map\u5c5e\u6027\uff1a</p> <pre><code>material.map = texture;\n</code></pre> <p>map\u5c5e\u6027\u4e5f\u53ef\u4ee5\u5728\u6750\u8d28\u6784\u9020\u51fd\u6570\u4e2d\u8bbe\u7f6e\u3002\u6240\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u7f51\u683c\u6750\u8d28\uff08Basic\u3001Lambert\u548cPhong\uff09\u90fd\u53ef\u4ee5\u4f7f\u7528\u7eb9\u7406\u3002\u901a\u5e38\uff0c\u6750\u8d28\u57fa\u7840\u989c\u8272\u5c06\u662f\u767d\u8272\uff0c\u56e0\u4e3a\u6750\u8d28\u989c\u8272\u5c06\u4e0e\u7eb9\u7406\u4e2d\u7684\u989c\u8272\u76f8\u4e58\u3002\u975e\u767d\u8272\u6750\u8d28\u989c\u8272\u5c06\u4e3a\u7eb9\u7406\u989c\u8272\u6dfb\u52a0\u201c\u8272\u5f69\u201d\u3002\u5c06\u56fe\u50cf\u6620\u5c04\u5230\u7f51\u683c\u6240\u9700\u7684\u7eb9\u7406\u5750\u6807\u662f\u7f51\u683c\u51e0\u4f55\u4f53\u7684\u4e00\u90e8\u5206\u3002\u6807\u51c6\u7f51\u683c\u51e0\u4f55\u4f53\uff0c\u5982THREE.SphereGeometry\uff0c\u5df2\u7ecf\u5b9a\u4e49\u4e86\u7eb9\u7406\u5750\u6807\u3002</p> <p>\u8fd9\u5c31\u662f\u57fa\u672c\u601d\u60f3\u2014\u2014\u4ece\u56fe\u50cfURL\u521b\u5efa\u7eb9\u7406\u5bf9\u8c61\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u6750\u8d28\u7684map\u5c5e\u6027\u3002\u7136\u800c\uff0c\u4e5f\u6709\u590d\u6742\u6027\u3002\u9996\u5148\uff0c\u56fe\u50cf\u52a0\u8f7d\u662f\u201c\u5f02\u6b65\u7684\u201d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8c03\u7528load\u51fd\u6570\u53ea\u542f\u52a8\u4e86\u56fe\u50cf\u52a0\u8f7d\u7684\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u53ef\u80fd\u5728\u51fd\u6570\u8fd4\u56de\u540e\u7684\u67d0\u4e2a\u65f6\u5019\u5b8c\u6210\u3002\u5728\u56fe\u50cf\u52a0\u8f7d\u5b8c\u6210\u4e4b\u524d\u5728\u5bf9\u8c61\u4e0a\u4f7f\u7528\u7eb9\u7406\u4e0d\u4f1a\u5bfc\u81f4\u9519\u8bef\uff0c\u4f46\u5bf9\u8c61\u5c06\u88ab\u6e32\u67d3\u4e3a\u5b8c\u5168\u9ed1\u8272\u3002\u4e00\u65e6\u56fe\u50cf\u52a0\u8f7d\u5b8c\u6210\uff0c\u5fc5\u987b\u91cd\u65b0\u6e32\u67d3\u573a\u666f\u4ee5\u663e\u793a\u56fe\u50cf\u7eb9\u7406\u3002\u5982\u679c\u52a8\u753b\u6b63\u5728\u8fd0\u884c\uff0c\u8fd9\u5c06\u81ea\u52a8\u53d1\u751f\uff1b\u56fe\u50cf\u5c06\u5728\u52a0\u8f7d\u5b8c\u6210\u540e\u7684\u7b2c\u4e00\u5e27\u4e2d\u51fa\u73b0\u3002\u4f46\u662f\u5982\u679c\u6ca1\u6709\u52a8\u753b\uff0c\u4f60\u9700\u8981\u4e00\u79cd\u5728\u56fe\u50cf\u52a0\u8f7d\u5b8c\u6210\u540e\u6e32\u67d3\u573a\u666f\u7684\u65b9\u6cd5\u3002\u5b9e\u9645\u4e0a\uff0cTextureLoader\u4e2d\u7684load\u51fd\u6570\u6709\u51e0\u4e2a\u53ef\u9009\u53c2\u6570\uff1a</p> <pre><code>loader.load( imageURL, onLoad, undefined, onError );\n</code></pre> <p>\u8fd9\u91cc\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u7ed9\u51fa\u4e3aundefined\uff0c\u56e0\u4e3a\u90a3\u4e2a\u53c2\u6570\u4e0d\u518d\u4f7f\u7528\u3002onLoad\u548conError\u53c2\u6570\u662f\u56de\u8c03\u51fd\u6570\u3002\u5982\u679c\u5b9a\u4e49\u4e86onLoad\u51fd\u6570\uff0c\u5b83\u5c06\u5728\u56fe\u50cf\u6210\u529f\u52a0\u8f7d\u540e\u88ab\u8c03\u7528\u3002\u5982\u679c\u52a0\u8f7d\u56fe\u50cf\u7684\u5c1d\u8bd5\u5931\u8d25\uff0c\u5c06\u8c03\u7528onError\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u51fd\u6570render()\u6e32\u67d3\u573a\u666f\uff0c\u90a3\u4e48render\u672c\u8eab\u5c31\u53ef\u4ee5\u4f5c\u4e3aonLoad\u51fd\u6570\u4f7f\u7528\uff1a</p> <pre><code>texture = new THREE.TextureLoader().load( \"brick.png\", render );\n</code></pre> <p>onLoad\u7684\u53e6\u4e00\u4e2a\u53ef\u80fd\u7528\u9014\u662f\u5728\u56fe\u50cf\u52a0\u8f7d\u5b8c\u6210\u540e\u5ef6\u8fdf\u5c06\u7eb9\u7406\u5206\u914d\u7ed9\u6750\u8d28\u3002\u5982\u679c\u4f60\u7a0d\u540e\u6dfb\u52a0\u7eb9\u7406\uff0c\u8bf7\u786e\u4fdd\u8bbe\u7f6e</p> <pre><code>material.needsUpdate = true;\n</code></pre> <p>\u4ee5\u786e\u4fdd\u66f4\u6539\u5728\u5bf9\u8c61\u91cd\u65b0\u7ed8\u5236\u65f6\u751f\u6548\u3002\uff08needsUpdate\u9700\u8981\u5728\u5404\u79cd\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u7684\u786e\u5207\u65f6\u95f4\u5e76\u4e0d\u603b\u662f\u6e05\u695a\u7684\u3002\u8bf7\u53c2\u9605three.js\u6587\u6863\u4e2d\u7684\u66f4\u65b0\u8d44\u6e90\u90e8\u5206\u3002\uff09</p> <p>Texture\u6709\u51e0\u4e2a\u53ef\u4ee5\u8bbe\u7f6e\u7684\u5c5e\u6027\uff0c\u5305\u62ec\u8bbe\u7f6e\u7eb9\u7406\u7684\u6700\u5c0f\u5316\u548c\u653e\u5927\u6ee4\u955c\u5c5e\u6027\u4ee5\u53ca\u63a7\u5236mipmap\u751f\u6210\u7684\u5c5e\u6027\uff0cmipmap\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u751f\u6210\u3002\u4f60\u6700\u6709\u53ef\u80fd\u60f3\u8981\u66f4\u6539\u7684\u5c5e\u6027\u662f\u7eb9\u7406\u5750\u6807\u8d85\u51fa\u8303\u56f40\u52301\u7684\u5305\u88c5\u6a21\u5f0f\u548c\u7eb9\u7406\u8f6c\u6362\u3002\uff08\u6709\u5173\u8fd9\u4e9b\u5c5e\u6027\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7b2c4.3\u8282\u3002\uff09</p> <p>\u5bf9\u4e8eTexture\u5bf9\u8c61tex\uff0c\u5c5e\u6027tex.wrapS\u548ctex.wrapT\u63a7\u5236s\u548ct\u7eb9\u7406\u5750\u6807\u8d85\u51fa\u8303\u56f40\u52301\u65f6\u7684\u5904\u7406\u65b9\u5f0f\u3002\u9ed8\u8ba4\u503c\u662f\u201cclamp to edge\u201d\u3002\u4f60\u6700\u6709\u53ef\u80fd\u60f3\u8981\u901a\u8fc7\u5c06\u5c5e\u6027\u503c\u8bbe\u7f6e\u4e3aTHREE.RepeatWrapping\u6765\u4f7f\u7eb9\u7406\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u91cd\u590d\uff1a</p> <pre><code>tex.wrapS = THREE.RepeatWrapping;\ntex.wrapT = THREE.RepeatWrapping;\n</code></pre> <p>RepeatWrapping\u6700\u9002\u5408\u4f7f\u7528\u201c\u65e0\u7f1d\u201d\u7eb9\u7406\uff0c\u5176\u4e2d\u56fe\u50cf\u7684\u4e0a\u8fb9\u7f18\u4e0e\u4e0b\u8fb9\u7f18\u5bf9\u9f50\uff0c\u5de6\u8fb9\u7f18\u4e0e\u53f3\u8fb9\u7f18\u5bf9\u9f50\u3002Three.js\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u53d8\u4f53\uff0c\u79f0\u4e3a\u201c\u955c\u50cf\u91cd\u590d\u201d\uff0c\u5176\u4e2d\u91cd\u590d\u56fe\u50cf\u7684\u6bcf\u4e2a\u5176\u4ed6\u526f\u672c\u90fd\u88ab\u7ffb\u8f6c\u3002\u8fd9\u6d88\u9664\u4e86\u56fe\u50cf\u526f\u672c\u4e4b\u95f4\u7684\u63a5\u7f1d\u3002\u8981\u8fdb\u884c\u955c\u50cf\u91cd\u590d\uff0c\u8bf7\u4f7f\u7528\u5c5e\u6027\u503cTHREE.MirroredRepeatWrapping\uff1a</p> <pre><code>tex.wrapS = THREE.MirroredRepeatWrapping;\ntex.wrapT = THREE.MirroredRepeatWrapping;\n</code></pre> <p>\u7eb9\u7406\u5c5e\u6027repeat\u3001offset\u548crotation\u63a7\u5236\u5e94\u7528\u4e8e\u7eb9\u7406\u7684\u7f29\u653e\u3001\u5e73\u79fb\u548c\u65cb\u8f6c\u4f5c\u4e3a\u7eb9\u7406\u8f6c\u6362\u3002repeat\u548coffset\u7684\u503c\u662f\u7c7b\u578b\u4e3aTHREE.Vector2\u7684\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u4e00\u4e2ax\u548cy\u7ec4\u4ef6\u3002rotation\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\uff0c\u7ed9\u51fa\u7eb9\u7406\u5173\u4e8e\u70b9(0,0)\u7684\u65cb\u8f6c\u3002\uff08\u4f46\u5b9e\u9645\u4e0a\uff0c\u65cb\u8f6c\u4e2d\u5fc3\u7531\u53e6\u4e00\u4e2a\u540d\u4e3acenter\u7684\u5c5e\u6027\u7ed9\u51fa\u3002\uff09\u5bf9\u4e8eTexture\uff0ctex\uff0ctex.offset\u7684\u4e24\u4e2a\u7ec4\u4ef6\u5206\u522b\u7ed9\u51fa\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u7eb9\u7406\u5e73\u79fb\u3002\u8981\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u5c06\u7eb9\u7406\u504f\u79fb0.5\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u8bf4\uff1a</p> <pre><code>tex.offset.x = 0.5;\n</code></pre> <p>\u6216\u8005</p> <pre><code>tex.offset.set( 0.5, 0 );\n</code></pre> <p>\u8bb0\u4f4f\uff0c\u6c34\u5e73\u504f\u79fb\u7684\u6b63\u503c\u4f1a\u5c06\u7eb9\u7406\u5411\u5bf9\u8c61\u7684\u5de6\u4fa7\u79fb\u52a8\uff0c\u56e0\u4e3a\u504f\u79fb\u662f\u5e94\u7528\u4e8e\u7eb9\u7406\u5750\u6807\u672c\u8eab\u800c\u4e0d\u662f\u7eb9\u7406\u56fe\u50cf\u3002</p> <p>\u5c5e\u6027tex.repeat\u7684\u7ec4\u4ef6\u5728\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u4e0a\u7ed9\u51fa\u7eb9\u7406\u7f29\u653e\u3002\u4f8b\u5982\uff0c</p> <pre><code>tex.repeat.set(2,3);\n</code></pre> <p>\u5c06\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u5c06\u7eb9\u7406\u5750\u6807\u7f29\u653e2\u500d\uff0c\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u7f29\u653e3\u500d\u3002\u540c\u6837\uff0c\u5bf9\u56fe\u50cf\u7684\u5f71\u54cd\u662f\u76f8\u53cd\u7684\uff0c\u6240\u4ee5\u56fe\u50cf\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u7f29\u5c0f2\u500d\uff0c\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u7f29\u5c0f3\u500d\u3002\u7ed3\u679c\u662f\uff0c\u4f60\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u5f97\u5230\u4e24\u4e2a\u56fe\u50cf\u526f\u672c\uff0c\u800c\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u5f97\u5230\u4e09\u4e2a\u526f\u672c\u3002\u8fd9\u89e3\u91ca\u4e86\u201crepeat\u201d\u7684\u540d\u79f0\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u503c\u4e0d\u4ec5\u9650\u4e8e\u6574\u6570\u3002</p> <p>\u8fd9\u4e2a\u6f14\u793a\u8ba9\u4f60\u53ef\u4ee5\u67e5\u770b\u4e00\u4e9b\u5e26\u6709\u7eb9\u7406\u7684three.js\u5bf9\u8c61\u3002\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u6f14\u793a\u4e2d\u7684\u201cPill\u201d\u5bf9\u8c61\u662f\u4e00\u4e2a\u7531\u4e00\u4e2a\u5706\u67f1\u4f53\u548c\u4e24\u4e2a\u534a\u7403\u4f53\u7ec4\u6210\u7684\u590d\u5408\u5bf9\u8c61\u3002</p> <p></p> <p>\u5047\u8bbe\u6211\u4eec\u60f3\u5728\u672c\u8282\u5f00\u5934\u521b\u5efa\u7684\u91d1\u5b57\u5854\u4e0a\u4f7f\u7528\u56fe\u50cf\u7eb9\u7406\u3002\u4e3a\u4e86\u5c06\u7eb9\u7406\u56fe\u50cf\u5e94\u7528\u4e8e\u5bf9\u8c61\uff0cWebGL\u9700\u8981\u8be5\u5bf9\u8c61\u7684\u7eb9\u7406\u5750\u6807\u3002\u5f53\u6211\u4eec\u4ece\u5934\u5f00\u59cb\u6784\u5efa\u7f51\u683c\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u7eb9\u7406\u5750\u6807\u4f5c\u4e3a\u7f51\u683c\u7684\u51e0\u4f55\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u5728\u6211\u4eec\u7684\u91d1\u5b57\u5854\u793a\u4f8b\u4e0a\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u50cf\u793a\u4f8b\u4e2d\u7684pyramidGeom\u8fd9\u6837\u7684BufferedGeometry\u5bf9\u8c61\u6709\u4e00\u4e2a\u540d\u4e3a\"uv\"\u7684\u5c5e\u6027\uff0c\u7528\u4e8e\u4fdd\u5b58\u7eb9\u7406\u5750\u6807\u3002\uff08\u540d\u79f0\"uv\"\u6307\u7684\u662f\u6620\u5c04\u5230\u7eb9\u7406\u4e2d\u7684s\u548ct\u5750\u6807\u7684\u5bf9\u8c61\u4e0a\u7684\u5750\u6807\u3002\u8868\u9762\u7684\u7eb9\u7406\u5750\u6807\u901a\u5e38\u88ab\u79f0\u4e3a\"uv\u5750\u6807\u3002\"\uff09\"uv\"\u5c5e\u6027\u7684BufferAttribute\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5305\u542b\u6bcf\u4e2a\u9876\u70b9\u7684\u4e00\u5bf9\u7eb9\u7406\u5750\u6807\u7684\u7c7b\u578b\u5316\u6570\u7ec4\u4e2d\u521b\u5efa\u3002</p> <p>\u6211\u4eec\u7684\u91d1\u5b57\u5854\u793a\u4f8b\u6709\u516d\u4e2a\u4e09\u89d2\u5f62\u9762\uff0c\u603b\u5171\u670918\u4e2a\u9876\u70b9\u3002\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5305\u542b18\u4e2a\u9876\u70b9\u7684\u9876\u70b9\u5750\u6807\u6570\u7ec4\u3002\u5750\u6807\u5fc5\u987b\u88ab\u9009\u62e9\u4ee5\u5408\u7406\u7684\u65b9\u5f0f\u5c06\u56fe\u50cf\u6620\u5c04\u5230\u9762\u4e0a\u3002\u6211\u9009\u62e9\u7684\u5750\u6807\u5c06\u6574\u4e2a\u7eb9\u7406\u56fe\u50cf\u6620\u5c04\u5230\u91d1\u5b57\u5854\u7684\u6b63\u65b9\u5f62\u57fa\u5ea7\u4e0a\uff0c\u5e76\u4ece\u56fe\u50cf\u4e2d\u5207\u51fa\u4e00\u4e2a\u4e09\u89d2\u5f62\u5e94\u7528\u5230\u6bcf\u4e2a\u4fa7\u9762\u4e0a\u3002\u60f3\u51fa\u6b63\u786e\u7684\u5750\u6807\u9700\u8981\u4e00\u4e9b\u6ce8\u610f\u3002\u6211\u4e3a\u91d1\u5b57\u5854\u51e0\u4f55\u4f53\u5b9a\u4e49\u7eb9\u7406\u5750\u6807\u5982\u4e0b\uff1a</p> <pre><code>let pyramidUVs = new Float32Array([\n        0,0,  0,1,  1,1,   // \u5e95\u90e8\u7b2c\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684uv\u5750\u6807\u3002\n        0,0,  1,1,  1,0,   // \u5e95\u90e8\u7b2c\u4e8c\u4e2a\u4e09\u89d2\u5f62\u7684uv\u5750\u6807\u3002\n        0,0,  1,0,  0.5,1, // \u524d\u9762\u7684uv\u5750\u6807\u3002\n        1,0,  0,0,  0.5,1, // \u53f3\u9762\u7684uv\u5750\u6807\u3002\n        0,0,  1,0,  0.5,1, // \u540e\u9762\u7684uv\u5750\u6807\u3002\n        1,0,  0,0,  0.5,1  // \u5de6\u9762\u7684uv\u5750\u6807\u3002\n]);\npyramidGeom.setAttribute(\"uv\",\n                        new THREE.BufferAttribute(pyramidUVs,2) );\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8fthreejs/textured-pyramid.html\u663e\u793a\u4e86\u4e00\u4e2a\u5e26\u6709\u7816\u7eb9\u7406\u7684\u91d1\u5b57\u5854\u3002\u8fd9\u662f\u7a0b\u5e8f\u4e2d\u7684\u4e00\u5f20\u56fe\u50cf\uff1a</p> <p></p> <p>A texture can be used to add visual interest and detail to an object. In three.js, an image texture is represented by an object of type THREE.Texture. Since we are talking about web pages, the image for a three.js texture is generally loaded from a web address. Image textures are usually created using the load function in an object of type THREE.TextureLoader. The function takes a URL (a web address, usually a relative address) as parameter and returns a Texture object:</p> <pre><code>let loader = new THREE.TextureLoader();\nlet texture = loader.load( imageURL );\n</code></pre> <p>(It is also advisable to set</p> <pre><code>tex.colorSpace = THREE.SRGBColorSpace;\n</code></pre> <p>to display the colors correctly. The three.js documentation says, \"PNG or JPEG Textures containing color information (like .map or .emissiveMap) use the closed domain sRGB color space, and must be annotated with texture.colorSpace = SRGBColorSpace.\")</p> <p>A texture in three.js is considered to be part of a material. To apply a texture to a mesh, just assign the Texture object to the map property of the mesh material that is used on the mesh:</p> <pre><code>material.map = texture;\n</code></pre> <p>The map property can also be set in the material constructor. All three types of mesh material (Basic, Lambert, and Phong) can use a texture. In general, the material base color will be white, since the material color will be multiplied by colors from the texture. A non-white material color will add a \"tint\" to the texture colors. The texture coordinates that are needed to map the image to a mesh are part of the mesh geometry. The standard mesh geometries such as THREE.SphereGeometry come with texture coordinates already defined.</p> <p>That's the basic idea\u2014create a texture object from an image URL and assign it to the map property of a material. However, there are complications. First of all, image loading is \"asynchronous.\" That is, calling the load function only starts the process of loading the image, and the process can complete sometime after the function returns. Using a texture on an object before the image has finished loading does not cause an error, but the object will be rendered as completely black. Once the image has been loaded, the scene has to be rendered again to show the image texture. If an animation is running, this will happen automatically; the image will appear in the first frame after it has finished loading. But if there is no animation, you need a way to render the scene once the image has loaded. In fact, the load function in a TextureLoader has several optional parameters:</p> <pre><code>loader.load( imageURL, onLoad, undefined, onError );\n</code></pre> <p>The third parameter here is given as undefined because that parameter is no longer used. The onLoad and onError parameters are callback functions. The onLoad function, if defined, will be called once the image has been successfully loaded. The onError function will be called if the attempt to load the image fails. For example, if there is a function render() that renders the scene, then render itself could be used as the onLoad function:</p> <pre><code>texture = new THREE.TextureLoader().load( \"brick.png\", render );\n</code></pre> <p>Another possible use of onLoad would be to delay assigning the texture to a material until the image has finished loading. If you do add the texture later, be sure to set</p> <pre><code>material.needsUpdate = true;\n</code></pre> <p>to make sure that the change will take effect when the object is redrawn. (When exactly needsUpdate needs to be set on various objects is not always clear. See the \"Updating Resources\" section of the three.js documentation.)</p> <p>A Texture has a number of properties that can be set, including properties to set the minification and magnification filters for the texture and a property to control the generation of mipmaps, which is done automatically by default. The properties that you are most likely to want to change are the wrap mode for texture coordinates outside the range 0 to 1 and the texture transformation. (See Section 4.3 for more information about these properties.)</p> <p>For a Texture object tex, the properties tex.wrapS and tex.wrapT control how s and t texture coordinates outside the range 0 to 1 are treated. The default is \"clamp to edge.\" You will most likely want to make the texture repeat in both directions by setting the property values to THREE.RepeatWrapping:</p> <pre><code>tex.wrapS = THREE.RepeatWrapping;\ntex.wrapT = THREE.RepeatWrapping;\n</code></pre> <p>RepeatWrapping works best with \"seamless\" textures, where the top edge of the image matches up with the bottom edge and the left edge with the right. Three.js also offers an interesting variation called \"mirrored repeat\" in which every other copy of the repeated image is flipped. This eliminates the seam between copies of the image. For mirrored repetition, use the property value THREE.MirroredRepeatWrapping:</p> <pre><code>tex.wrapS = THREE.MirroredRepeatWrapping;\ntex.wrapT = THREE.MirroredRepeatWrapping;\n</code></pre> <p>The texture properties repeat, offset, and rotation control the scaling, translation, and rotation that are applied to the texture as texture transformations. The values of repeat and offset are of type THREE.Vector2, so that each property has an x and a y component. The rotation is a number, measured in radians, giving the rotation of the texture about the point (0,0). (But the center of rotation is actually given by another property named center.) For a Texture, tex, the two components of tex.offset give the texture translation in the horizontal and vertical directions. To offset the texture by 0.5 horizontally, you can say either</p> <pre><code>tex.offset.x = 0.5;\n</code></pre> <p>or</p> <pre><code>tex.offset.set( 0.5, 0 );\n</code></pre> <p>Remember that a positive horizontal offset will move the texture to the left on the objects, because the offset is applied to the texture coordinates not to the texture image itself.</p> <p>The components of the property tex.repeat give the texture scaling in the horizontal and vertical directions. For example,</p> <pre><code>tex.repeat.set(2,3);\n</code></pre> <p>will scale the texture coordinates by a factor of 2 horizontally and 3 vertically. Again, the effect on the image is the inverse, so that the image is shrunk by a factor of 2 horizontally and 3 vertically. The result is that you get two copies of the image in the horizontal direction where you would have had one, and three vertically. This explains the name \"repeat,\" but note that the values are not limited to be integers.</p> <p>This demo lets you view some textured three.js objects. The \"Pill\" object in the demo, by the way, is a compound object consisting of a cylinder and two hemispheres.</p> <p></p> <p>Suppose that we want to use an image texture on the pyramid that was created at the beginning of this section. In order to apply a texture image to an object, WebGL needs texture coordinates for that object. When we build a mesh from scratch, we have to supply the texture coordinates as part of the mesh's geometry object.</p> <p>Let's see how to do this on our pyramid example. A BufferedGeometry object such as pyramidGeom in the example has an attribute named \"uv\" to hold texture coordinates. (The name \"uv\" refers to the coordinates on an object that are mapped to the s and t coordinates in a texture. The texture coordinates for a surface are often referred to as \"uv coordinates.\") The BufferAttribute for a \"uv\" attribute can be made from a typed array containing a pair of texture coordinates for each vertex.</p> <p>Our pyramid example has six triangular faces, with a total of 18 vertices. We need an array containing vertex coordinates for 18 vertices. The coordinates have to be chosen to map the image in a reasonable way onto the faces. My choice of coordinates maps the entire texture image onto the square base of the pyramid, and it cuts a triangle out of the image to apply to each of the sides. It takes some care to come up with the correct coordinates. I define the texture coordinates for the pyramid geometry as follows:</p> <pre><code>let pyramidUVs = new Float32Array([\n        0,0,  0,1,  1,1,   // uv coords for first triangle in base.\n        0,0,  1,1,  1,0,   // uv coords for second triangle in base.\n        0,0,  1,0,  0.5,1, // uv coords for front face.\n        1,0,  0,0,  0.5,1, // uv coords for right face.\n        0,0,  1,0,  0.5,1, // uv coords for back face.\n        1,0,  0,0,  0.5,1  // uv coords for left face.\n]);\npyramidGeom.setAttribute(\"uv\",\n                        new THREE.BufferAttribute(pyramidUVs,2) );\n</code></pre> <p>The sample program threejs/textured-pyramid.html shows the pyramid with a brick texture. Here is an image from the program:</p> <p></p>"},{"location":"cn/c5/s2/#524-\u53d8\u6362","title":"5.2.4 \u53d8\u6362","text":"<p>Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e3a\u4e86\u7406\u89e3\u5982\u4f55\u5728three.js\u4e2d\u6709\u6548\u5730\u4f7f\u7528\u5bf9\u8c61\uff0c\u4e86\u89e3\u5b83\u5982\u4f55\u5b9e\u73b0\u53d8\u6362\u662f\u5f88\u6709\u7528\u7684\u3002\u6211\u5df2\u7ecf\u89e3\u91ca\u4e86Object3D\uff0cobj\uff0c\u5177\u6709\u5c5e\u6027obj.position\u3001obj.scale\u548cobj.rotation\uff0c\u8fd9\u4e9b\u5c5e\u6027\u6307\u5b9a\u4e86\u5b83\u5728\u81ea\u5df1\u7684\u5c40\u90e8\u5750\u6807\u7cfb\u4e2d\u7684\u5efa\u6a21\u53d8\u6362\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5728\u6e32\u67d3\u5bf9\u8c61\u65f6\u5e76\u6ca1\u6709\u76f4\u63a5\u4f7f\u7528\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u88ab\u7ec4\u5408\u8d77\u6765\u8ba1\u7b97\u53e6\u4e00\u4e2a\u5c5e\u6027\uff0cobj.matrix\uff0c\u5b83\u8868\u793a\u53d8\u6362\u4e3a\u4e00\u4e2a\u77e9\u9635\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u77e9\u9635\u5728\u6bcf\u6b21\u6e32\u67d3\u573a\u666f\u65f6\u90fd\u4f1a\u81ea\u52a8\u91cd\u65b0\u8ba1\u7b97\u3002\u5982\u679c\u53d8\u6362\u4ece\u4e0d\u6539\u53d8\uff0c\u8fd9\u53ef\u80fd\u662f\u4f4e\u6548\u7684\uff0c\u6240\u4ee5obj\u6709\u53e6\u4e00\u4e2a\u5c5e\u6027\uff0cobj.matrixAutoUpdate\uff0c\u5b83\u63a7\u5236\u662f\u5426\u81ea\u52a8\u8ba1\u7b97obj.matrix\u3002\u5982\u679c\u5c06obj.matrixAutoUpdate\u8bbe\u7f6e\u4e3afalse\uff0c\u5219\u4e0d\u4f1a\u8fdb\u884c\u66f4\u65b0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u786e\u5b9e\u60f3\u66f4\u6539\u5efa\u6a21\u53d8\u6362\uff0c\u53ef\u4ee5\u8c03\u7528obj.updateMatrix()\u4ece\u5f53\u524d\u503c\u8ba1\u7b97\u77e9\u9635obj.position\u3001obj.scale\u548cobj.rotation\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u5982\u4f55\u901a\u8fc7\u76f4\u63a5\u66f4\u6539\u5c5e\u6027\u7684\u503c\u6765\u4fee\u6539obj\u7684\u5efa\u6a21\u53d8\u6362obj.position\u3001obj.scale\u548cobj.rotation\u3002\u7136\u800c\uff0c\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u51fd\u6570obj.translateX(dx)\u3001obj.translateY(dy)\u6216obj.translateZ(dz)\u6765\u66f4\u6539\u4f4d\u7f6e\uff0c\u4ee5\u5c06\u5bf9\u8c61\u6cbf\u5750\u6807\u8f74\u7684\u65b9\u5411\u79fb\u52a8\u6307\u5b9a\u7684\u6570\u91cf\u3002\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570obj.translateOnAxis(axis,amount)\uff0c\u5176\u4e2daxis\u662f\u4e00\u4e2aVector3\uff0camount\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7ed9\u51fa\u5e73\u79fb\u5bf9\u8c61\u7684\u8ddd\u79bb\u3002\u5bf9\u8c61\u6cbf\u7740\u5411\u91cf\u7684\u65b9\u5411\u79fb\u52a8\uff0caxis\u3002\u8be5\u5411\u91cf\u5fc5\u987b\u88ab\u89c4\u8303\u5316\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5fc5\u987b\u957f\u5ea6\u4e3a1\u3002\u4f8b\u5982\uff0c\u8981\u5c06obj\u6cbf\u7740\u5411\u91cf(1,1,1)\u7684\u65b9\u5411\u5e73\u79fb5\u4e2a\u5355\u4f4d\uff0c\u53ef\u4ee5\u8bf4</p> <pre><code>obj.translateOnAxis( new THREE.Vector3(1,1,1).normalize(), 5 );\n</code></pre> <p>\u6ca1\u6709\u7528\u4e8e\u66f4\u6539\u7f29\u653e\u53d8\u6362\u7684\u51fd\u6570\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570obj.rotateX(angle)\u3001obj.rotateY(angle)\u548cobj.rotateZ(angle)\u6765\u66f4\u6539\u5bf9\u8c61\u7684\u65cb\u8f6c\uff0c\u4f7f\u5bf9\u8c61\u7ed5\u5750\u6807\u8f74\u65cb\u8f6c\u3002\uff08\u8bb0\u4f4f\uff0c\u89d2\u5ea6\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u3002\uff09\u8c03\u7528obj.rotateX(angle)\u4e0e\u5c06angle\u52a0\u5230obj.rotation.x\u7684\u503c\u4e0a\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u5728\u53ef\u80fd\u5df2\u7ecf\u5e94\u7528\u7684\u5176\u4ed6\u65cb\u8f6c\u4e4b\u4e0a\u5e94\u7528\u4e86\u5173\u4e8ex\u8f74\u7684\u65cb\u8f6c\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570obj.rotateOnAxis(axis,angle)\uff0c\u5176\u4e2daxis\u662f\u4e00\u4e2aVector3\u3002\u8fd9\u4e2a\u51fd\u6570\u5c06\u5bf9\u8c61\u7ed5\u5411\u91cf\u65cb\u8f6c\u89d2\u5ea6angle\uff08\u5373\uff0c\u7ed5\u539f\u70b9\u548c\u7531axis\u7ed9\u51fa\u7684\u70b9\u4e4b\u95f4\u7684\u7ebf\uff09\u3002\u8be5\u8f74\u5fc5\u987b\u662f\u4e00\u4e2a\u89c4\u8303\u5316\u7684\u5411\u91cf\u3002</p> <p>\uff08\u65cb\u8f6c\u5b9e\u9645\u4e0a\u66f4\u52a0\u590d\u6742\u3002\u5bf9\u8c61obj\u7684\u65cb\u8f6c\u5b9e\u9645\u4e0a\u662f\u7531\u5c5e\u6027obj.quaternion\u8868\u793a\u7684\uff0c\u800c\u4e0d\u662f\u7531\u5c5e\u6027obj.rotation\u8868\u793a\u7684\u3002\u56db\u5143\u6570\u662f\u6570\u5b66\u5bf9\u8c61\uff0c\u901a\u5e38\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u4f5c\u4e3a\u6b27\u62c9\u89d2\u7684\u66ff\u4ee3\u54c1\uff0c\u7528\u4e8e\u8868\u793a\u65cb\u8f6c\u3002\u7136\u800c\uff0c\u5f53\u60a8\u66f4\u6539\u5c5e\u6027obj.rotation\u6216obj.quaternion\u4e4b\u4e00\u65f6\uff0c\u53e6\u4e00\u4e2a\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u4ee5\u786e\u4fdd\u4e24\u4e2a\u5c5e\u6027\u8868\u793a\u76f8\u540c\u7684\u65cb\u8f6c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u56db\u5143\u6570\u3002\uff09</p> <p>\u6211\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u5e73\u79fb\u548c\u65cb\u8f6c\u51fd\u6570\u4fee\u6539\u4e86\u5bf9\u8c61\u7684\u4f4d\u7f6e\u548c\u65cb\u8f6c\u5c5e\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u4ee5\u5bf9\u8c61\u5750\u6807\u5e94\u7528\uff0c\u800c\u4e0d\u662f\u4e16\u754c\u5750\u6807\uff0c\u5e76\u4e14\u5728\u6e32\u67d3\u5bf9\u8c61\u65f6\u4f5c\u4e3a\u5bf9\u8c61\u4e0a\u7684\u7b2c\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u4e16\u754c\u5750\u6807\u4e2d\u7684\u65cb\u8f6c\u53ef\u4ee5\u6539\u53d8\u5bf9\u8c61\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u5b83\u6ca1\u6709\u5b9a\u4f4d\u5728\u539f\u70b9\u3002\u7136\u800c\uff0c\u66f4\u6539\u5bf9\u8c61\u7684rotation\u5c5e\u6027\u7684\u503c\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\u5176\u4f4d\u7f6e\u3002</p> <p>\u5728\u6e32\u67d3\u5bf9\u8c61\u65f6\u5b9e\u9645\u5e94\u7528\u5230\u5bf9\u8c61\u7684\u53d8\u6362\u662f\u8be5\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\u4e0e\u573a\u666f\u56fe\u4e2d\u5176\u6240\u6709\u7956\u5148\u7684\u5efa\u6a21\u53d8\u6362\u7684\u7ec4\u5408\u3002\u5728three.js\u4e2d\uff0c\u8be5\u53d8\u6362\u5b58\u50a8\u5728\u5bf9\u8c61\u540d\u4e3aobj.matrixWorld\u7684\u5c5e\u6027\u4e2d\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\u6765\u8bbe\u7f6e\u65cb\u8f6c\uff1aobj.lookAt(vec)\uff0c\u5b83\u5c06\u5bf9\u8c61\u65cb\u8f6c\uff0c\u4f7f\u5176\u9762\u5411\u7ed9\u5b9a\u7684\u70b9\u3002\u53c2\u6570\uff0cvec\uff0c\u662f\u4e00\u4e2aVector3\uff0c\u5fc5\u987b\u4ee5\u5bf9\u8c61\u81ea\u5df1\u7684\u5c40\u90e8\u5750\u6807\u7cfb\u8868\u793a\u3002\uff08\u5bf9\u4e8e\u6ca1\u6709\u7236\u5bf9\u8c61\u6216\u5176\u7956\u5148\u6ca1\u6709\u5efa\u6a21\u53d8\u6362\u7684\u5bf9\u8c61\uff0c\u8fd9\u5c06\u4e0e\u4e16\u754c\u5750\u6807\u76f8\u540c\u3002\uff09\u5bf9\u8c61\u8fd8\u88ab\u65cb\u8f6c\uff0c\u4f7f\u5176\u201c\u5411\u4e0a\u201d\u65b9\u5411\u7b49\u4e8e\u5c5e\u6027obj.up\u7684\u503c\uff0c\u9ed8\u8ba4\u4e3a(0,1,0)\u3002\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u5bf9\u8c61\uff0c\u4f46\u5bf9\u76f8\u673a\u6700\u6709\u7528\u3002</p> <p>In order to understand how to work with objects effectively in three.js, it can be useful to know more about how it implements transforms. I have explained that an Object3D, obj, has properties obj.position, obj.scale, and obj.rotation that specify its modeling transformation in its own local coordinate system. But these properties are not used directly when the object is rendered. Instead, they are combined to compute another property, obj.matrix, that represents the transformation as a matrix. By default, this matrix is recomputed automatically every time the scene is rendered. This can be inefficient if the transformation never changes, so obj has another property, obj.matrixAutoUpdate, that controls whether obj.matrix is computed automatically. If you set obj.matrixAutoUpdate to false, the update is not done. In that case, if you do want to change the modeling transformation, you can call obj.updateMatrix() to compute the matrix from the current values of obj.position, obj.scale, and obj.rotation.</p> <p>We have seen how to modify obj's modeling transformation by directly changing the values of the properties obj.position, obj.scale, and obj.rotation. However, you can also change the position by calling the function obj.translateX(dx), obj.translateY(dy), or obj.translateZ(dz) to move the object by a specified amount in the direction of a coordinate axis. There is also a function obj.translateOnAxis(axis,amount), where axis is a Vector3 and amount is a number giving the distance to translate the object. The object is moved in the direction of the vector, axis. The vector must be normalized; that is, it must have length 1. For example, to translate obj by 5 units in the direction of the vector (1,1,1), you could say</p> <pre><code>obj.translateOnAxis( new THREE.Vector3(1,1,1).normalize(), 5 );\n</code></pre> <p>There are no functions for changing the scaling transform. But you can change the object's rotation with the functions obj.rotateX(angle), obj.rotateY(angle), and obj.rotateZ(angle) to rotate the object about the coordinate axes. (Remember that angles are measured in radians.) Calling obj.rotateX(angle) is not the same as adding angle onto the value of obj.rotation.x, since it applies a rotation about the x-axis on top of other rotations that might already have been applied.</p> <p>There is also a function obj.rotateOnAxis(axis,angle), where axis is a Vector3. This function rotates the object through the angle angle about the vector (that is, about the line between the origin and the point given by axis). The axis must be a normalized vector.</p> <p>(Rotation is actually even more complicated. The rotation of an object, obj, is actually represented by the property obj.quaternion, not by the property obj.rotation. Quaternions are mathematical objects that are often used in computer graphics as an alternative to Euler angles, to represent rotations. However, when you change one of the properties obj.rotation or obj.quaternion, the other is automatically updated to make sure that both properties represent the same rotation. So, we don't need to work directly with the quaternions.)</p> <p>I should emphasize that the translation and rotation functions modify the position and rotation properties of the object. That is, they apply in object coordinates, not world coordinates, and they are applied as the first modeling transformation on the object when the object is rendered. For example, a rotation in world coordinates can change the position of an object, if it is not positioned at the origin. However, changing the value of the rotation property of an object will never change its position.</p> <p>The actual transformation that is applied to an object when it is rendered is a combination of the modeling transformation of that object, combined with the modeling transformation on all of its ancestors in the scene graph. In three.js, that transformation is stored in a property of the object named obj.matrixWorld.</p> <p>There is one more useful method for setting the rotation: obj.lookAt(vec), which rotates the object so that it is facing towards a given point. The parameter, vec, is a Vector3, which must be expressed in the object's own local coordinate system. (For an object that has no parent, or whose ancestors have no modeling transformations, that will be the same as world coordinates.) The object is also rotated so that its \"up\" direction is equal to the value of the property obj.up, which by default is (0,1,0). This function can be used with any object, but it is most useful for a camera.</p>"},{"location":"cn/c5/s2/#525-\u52a0\u8f7d\u6a21\u578b","title":"5.2.5 \u52a0\u8f7d\u6a21\u578b","text":"<p>Loading Models</p> \u4e2d\u6587\u82f1\u6587 <p>\u5c3d\u7ba1\u901a\u8fc7\u5217\u51fa\u7f51\u683c\u5bf9\u8c61\u7684\u9876\u70b9\u548c\u9762\u6765\u521b\u5efa\u5b83\u4eec\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u9664\u4e86\u975e\u5e38\u7b80\u5355\u7684\u5bf9\u8c61\u5916\uff0c\u624b\u5de5\u5236\u4f5c\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\u4f8b\u5982\uff0c\u5728Blender\u8fd9\u6837\u7684\u4ea4\u4e92\u5f0f\u5efa\u6a21\u7a0b\u5e8f\u4e2d\u8bbe\u8ba1\u5bf9\u8c61\u8981\u5bb9\u6613\u5f97\u591a\uff08\u89c1\u9644\u5f55B\uff09\u3002\u50cfBlender\u8fd9\u6837\u7684\u5efa\u6a21\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u8bb8\u591a\u4e0d\u540c\u7684\u6587\u4ef6\u683c\u5f0f\u5bfc\u51fa\u5bf9\u8c61\u3002Three.js\u62e5\u6709\u7528\u4e8e\u4ece\u5404\u79cd\u6587\u4ef6\u683c\u5f0f\u52a0\u8f7d\u6a21\u578b\u7684\u5b9e\u7528\u51fd\u6570\u3002\u8fd9\u4e9b\u5b9e\u7528\u7a0b\u5e8f\u4e0d\u662fthree.js\u6838\u5fc3\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5b9a\u4e49\u5b83\u4eec\u7684JavaScript\u6587\u4ef6\u53ef\u4ee5\u5728three.js\u4e0b\u8f7d\u5305\u7684examples\u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002</p> <p>\u6a21\u578b\u6587\u4ef6\u7684\u9996\u9009\u683c\u5f0f\u662fGLTF\u3002GLTF\u6a21\u578b\u53ef\u4ee5\u5b58\u50a8\u5728\u6269\u5c55\u540d\u4e3a.gltf\u7684\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5b58\u50a8\u5728\u6269\u5c55\u540d\u4e3a.glb\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u66f4\u5c0f\u3001\u66f4\u9ad8\u6548\uff0c\u4f46\u4e0d\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\u3002Three.js\u7528\u4e8e\u52a0\u8f7dGLTF\u6587\u4ef6\u7684\u52a0\u8f7d\u5668\u7531GLTFLoader\u7c7b\u5b9a\u4e49\uff0c\u53ef\u4ee5\u4eceGLTFLoader.js\u6a21\u5757\u4e2d\u5bfc\u5165\uff0c\u8be5\u6a21\u5757\u53ef\u5728three.js\u4e0b\u8f7d\u5305\u4e2d\u627e\u5230\u3002\u8be5\u811a\u672c\u7684\u526f\u672c\u4ee5\u53ca\u5176\u4ed6\u6a21\u578b\u52a0\u8f7d\u5668\u7684\u811a\u672c\u53ef\u4ee5\u5728\u6559\u79d1\u4e66\u7684\u6e90\u6587\u4ef6\u5939\u7684threejs/script/loaders\u6587\u4ef6\u5939\u4e2d\u627e\u5230\uff0c\u6216\u8005\u5728three.js\u4e0b\u8f7d\u5305\u7684examples/jsm/loaders\u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002\uff08\u6ce8\u610f\uff0cGLTFLoader\u4e0d\u662f\u5bf9\u8c61THREE\u7684\u4e00\u90e8\u5206\u3002\uff09</p> <p>\u5982\u679cloader\u662f\u7c7b\u578b\u4e3aGLTFLoader\u7684\u5bf9\u8c61\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u7684load()\u65b9\u6cd5\u5f00\u59cb\u52a0\u8f7d\u6a21\u578b\u7684\u8fc7\u7a0b\uff1a</p> <pre><code>loader = new GLTFLoader()\nloader.load( url, onLoad, onProgress, onError );\n</code></pre> <p>\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff1b\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u6a21\u578b\u7684\u6587\u4ef6\u7684URL\u3002\u5176\u4ed6\u4e09\u4e2a\u53c2\u6570\u662f\u56de\u8c03\u51fd\u6570\uff1aonLoad\u5c06\u5728\u52a0\u8f7d\u5b8c\u6210\u65f6\u88ab\u8c03\u7528\uff0c\u53c2\u6570\u8868\u793a\u6765\u81ea\u6587\u4ef6\u7684\u6570\u636e\uff1bonProgress\u5728\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u5b9a\u671f\u88ab\u8c03\u7528\uff0c\u53c2\u6570\u5305\u542b\u6709\u5173\u6a21\u578b\u5927\u5c0f\u4ee5\u53ca\u5df2\u52a0\u8f7d\u591a\u5c11\u7684\u4fe1\u606f\uff1b\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9519\u8bef\uff0c\u5c06\u8c03\u7528onError\u3002\uff08\u6211\u81ea\u5df1\u5b9e\u9645\u4e0a\u6ca1\u6709\u4f7f\u7528\u8fc7onProgress\u3002\uff09\u8bf7\u6ce8\u610f\uff0c\u4e0e\u7eb9\u7406\u4e00\u6837\uff0c\u52a0\u8f7d\u662f\u5f02\u6b65\u5b8c\u6210\u7684\u3002</p> <p>GLTF\u6587\u4ef6\u53ef\u80fd\u76f8\u5f53\u590d\u6742\uff0c\u53ef\u4ee5\u5305\u542b\u6574\u4e2a3D\u573a\u666f\uff0c\u5305\u542b\u591a\u4e2a\u5bf9\u8c61\u3001\u706f\u5149\u548c\u5176\u4ed6\u4e1c\u897f\u3002GLTFLoader\u8fd4\u56de\u7684\u6570\u636e\u5305\u542b\u4e00\u4e2athree.js Scene\u3002\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55\u5bf9\u8c61\u90fd\u5c06\u662f\u8be5\u573a\u666f\u7684\u573a\u666f\u56fe\u7684\u4e00\u90e8\u5206\u3002\u6559\u79d1\u4e66\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u6a21\u578b\u6587\u4ef6\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2aMesh\u5bf9\u8c61\uff0c\u662fScene\u5bf9\u8c61\u7684\u7b2c\u4e00\u4e2a\u5b50\u5bf9\u8c61\u3002\u6b64\u5bf9\u8c61\u5e26\u6709\u5b8c\u6574\u7684\u51e0\u4f55\u4f53\u548c\u6750\u8d28\u3002onLoad\u56de\u8c03\u51fd\u6570\u53ef\u4ee5\u5c06\u8be5\u5bf9\u8c61\u6dfb\u52a0\u5230\u573a\u666f\u4e2d\uff0c\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>function onLoad(data) { // \u53c2\u6570\u662f\u52a0\u8f7d\u7684\u6a21\u578b\u6570\u636e\n    let object = data.scene.children[0];\n    // \u4e5f\u8bb8\u4fee\u6539\u5efa\u6a21\u53d8\u6362\u6216\u6750\u8d28...\n    scene.add(object);  // \u5c06\u52a0\u8f7d\u7684\u5bf9\u8c61\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u573a\u666f\u4e2d\n    render();  // \u8c03\u7528render\u4ee5\u663e\u793a\u5e26\u6709\u65b0\u5bf9\u8c61\u7684\u573a\u666f\n}\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8fthreejs/model-viewer.html\u4f7f\u7528GLTFLoader\u52a0\u8f7d\u4e86\u51e0\u4e2a\u6a21\u578b\u3002\u5b83\u8fd8\u4f7f\u7528Collada\u548cOBJ\u4e24\u79cd\u5176\u4ed6\u683c\u5f0f\u7684\u6a21\u578b\u7684\u52a0\u8f7d\u5668\uff0c\u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u76f8\u4f3c\u3002\u5b9e\u9645\u4e0a\uff0c\u52a0\u8f7d\u6a21\u578b\u7684\u6280\u672f\u6bd4\u6211\u5728\u8fd9\u91cc\u63cf\u8ff0\u7684\u66f4\u901a\u7528\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u3002</p> <p>\u6211\u8fd8\u8981\u63d0\u5230\uff0cGLTF\u6a21\u578b\u53ef\u4ee5\u5305\u62ec\u52a8\u753b\u3002Three.js\u6709\u51e0\u4e2a\u652f\u6301\u52a8\u753b\u7684\u7c7b\uff0c\u5305\u62ecTHREE.AnimationMixer\u3001THREE.AnimationAction\u548cTHREE.AnimationClip\u3002\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u52a8\u753b\uff0c\u4f46\u662f\u8fd9\u4e09\u4e2a\u7c7b\u7528\u4e8e\u5728\u8fd9\u4e2a\u6f14\u793a\u4e2d\u52a8\u753b\u5316\u9a6c\u548c\u9e73\u7684\u6a21\u578b\uff1a</p> <p></p> <p>Although it is possible to create mesh objects by listing their vertices and faces, it would be difficult to do it by hand for all but very simple objects. It's much easier, for example, to design an object in an interactive modeling program such as Blender (Appendix B). Modeling programs like Blender can export objects using many different file formats. Three.js has utility functions for loading models from files in a variety of file formats. These utilities are not part of the three.js core, but JavaScript files that define them can be found in the examples folder in the three.js download.</p> <p>The preferred format for model files is GLTF. A GLTF model can be stored in a text file with extension .gltf or in a binary file with extension .glb. Binary files are smaller and more efficient, but not human-readable. A three.js loader for GLTF files is defined by the class GLTFLoader, which can be imported from the module GLTFLoader.js. from the three.js download. Copies of that script, as well as scripts for other model loaders, can be found in the threejs/script/loaders folder in the source folder for this textbook, or in the examples/jsm/loaders folder in the three.js download. (Note that GLTFLoader is not part of the object THREE.)</p> <p>If loader is an object of type GLTFLoader, you can use its load() method to start the process of loading a model:</p> <pre><code>loader = new GLTFLoader()\nloader.load( url, onLoad, onProgress, onError );\n</code></pre> <p>Only the first parameter is required; it is a URL for the file that contains the model. The other three parameters are callback functions: onLoad will be called when the loading is complete, with a parameter that represents the data from the file; onProgress is called periodically during the loading with a parameter that contains information about the size of the model and how much of it has be loaded; and onError is called if any error occurs. (I have not actually used onProgress myself.) Note that, as for textures, the loading is done asynchronously.</p> <p>A GLTF file can be quite complicated and can contain an entire 3D scene, containing multiple objects, lights, and other things. The data returned by a GLTFLoader contains a three.js Scene. Any objects defined by the file will be part of the scene graph for that scene. All of the model files used in this textbook define a Mesh object that is the first child of the Scene object. This object comes complete with both geometry and material. The onLoad callback function can add that object to the scene and might look something like this:</p> <pre><code>function onLoad(data) { // the parameter is the loaded model data\n    let object = data.scene.children[0];\n    // maybe modify the modeling transformation or material...\n    scene.add(object);  // add the loaded object to our scene\n    render();  // call render to show the scene with the new object\n}\n</code></pre> <p>The sample program threejs/model-viewer.html uses GLTFLoader to load several models. It also uses loaders for models in two other formats, Collada and OBJ, that work much the same way. The technique for loading the models is actually a little more general that what I've described here. See the source code for the example program for details.</p> <p>I'll also mention that GLTF models can include animations. Three.js has several classes that support animation, including THREE.AnimationMixer, THREE.AnimationAction, and THREE.AnimationClip. I won't discuss animation here, but these three classes are used to animate the horse and stork models in this demo:</p> <p></p>"},{"location":"cn/c5/s3/","title":"5.3 \u5176\u4ed6\u529f\u80fd","text":"<p>Other Features</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5c06\u4ee5\u5bf9three.js\u7684\u4e00\u4e9b\u989d\u5916\u529f\u80fd\u7684\u5ba1\u89c6\u6765\u7ed3\u675f\u8fd9\u4e00\u7ae0\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u5c06\u4e86\u89e3\u5230\u4e00\u4e9b3D\u56fe\u5f62\u7684\u65b0\u65b9\u9762\u3002</p> <p>We will finish this chapter with a look at a few additional features of three.js. In the process, you will learn about some new aspects of 3D graphics.</p>"},{"location":"cn/c5/s3/#531-\u5b9e\u4f8b\u5316\u7f51\u683c","title":"5.3.1 \u5b9e\u4f8b\u5316\u7f51\u683c","text":"<p>Instanced Meshes</p> \u4e2d\u6587\u82f1\u6587 <p>THREE.InstancedMesh \u7c7b\u4f7f\u5f97\u80fd\u591f\u5feb\u901f\u6e32\u67d3\u591a\u4e2a\u5bf9\u8c61\uff0c\u53ef\u80fd\u662f\u5927\u91cf\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u4f7f\u7528\u76f8\u540c\u7684\u51e0\u4f55\u4f53\uff0c\u4f46\u5728\u5e94\u7528\u5230\u5b83\u4eec\u7684\u53d8\u6362\u4e0a\u6709\u6240\u4e0d\u540c\uff0c\u5e76\u4e14\u5728\u6750\u8d28\u989c\u8272\u4e0a\u4e5f\u53ef\u80fd\u6709\u6240\u4e0d\u540c\u3002\u6bcf\u4e2a\u5bf9\u8c61\u7684\u526f\u672c\u88ab\u79f0\u4e3a\u4e00\u4e2a\u201c\u5b9e\u4f8b\u201d\uff0c\u521b\u5efa\u6240\u6709\u526f\u672c\u7684\u8fc7\u7a0b\u79f0\u4e3a\u5b9e\u4f8b\u5316\u7ed8\u5236\u6216\u5b9e\u4f8b\u5316\u3002\u5728 WebGL 2.0\uff08\u4ee5\u53ca\u5728 WebGL 1.0 \u4e2d\u4f7f\u7528\u6269\u5c55\uff09\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u51fd\u6570\u8c03\u7528\u6765\u7ed8\u5236\u6240\u6709\u5b9e\u4f8b\uff0c\u8fd9\u975e\u5e38\u9ad8\u6548\u3002</p> <p>InstancedMesh \u4f7f\u7528\u8d77\u6765\u76f8\u5f53\u5bb9\u6613\u3002\u5728\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u9664\u4e86\u7f51\u683c\u7684\u51e0\u4f55\u4f53\u548c\u6750\u8d28\u5916\uff0c\u8fd8\u9700\u8981\u6307\u5b9a\u5b83\u652f\u6301\u7684\u6700\u5927\u5b9e\u4f8b\u6570\u91cf\uff1a</p> <pre><code>instances = new THREE.InstancedMesh(geometry, material, count)\n</code></pre> <p>\u8981\u4e3a\u7b2c i \u4e2a\u5b9e\u4f8b\u8bbe\u7f6e\u53d8\u6362\uff0c\u53ef\u4ee5\u8c03\u7528\uff1a</p> <pre><code>instances.setMatrixAt( i, matrix );\n</code></pre> <p>\u5176\u4e2d matrix \u662f\u7c7b\u578b\u4e3a THREE.Matrix4 \u7684\u5bf9\u8c61\uff0c\u8868\u793a\u5efa\u6a21\u53d8\u6362\u3002\u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u4e3a\u7b2c i \u4e2a\u5b9e\u4f8b\u8bbe\u7f6e\u989c\u8272\uff1a</p> <pre><code>instances.setColorAt( i, color );\n</code></pre> <p>\u5176\u4e2d color \u662f\u7c7b\u578b\u4e3a THREE.Color \u7684\u5bf9\u8c61\u3002\u5b9e\u4f8b\u989c\u8272\u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u5b83\u4eec\uff0c\u5b83\u4eec\u5c06\u66ff\u6362\u6750\u8d28\u7684\u989c\u8272\u5c5e\u6027\u3002</p> <p>Matrix4 \u7c7b\u5305\u62ec\u4e00\u4e9b\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efa\u53d8\u6362\u77e9\u9635\u3002\u6784\u9020\u51fd\u6570\uff1a</p> <pre><code>matrix = new THREE.Matrix4();\n</code></pre> <p>\u521b\u5efa\u4e86\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\uff0c\u7136\u540e\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u65b9\u6cd5 matrix.makeTranslation(dx,dy,dz) \u5c06\u5f53\u524d\u77e9\u9635\u66ff\u6362\u4e3a\u5e73\u79fb\u53d8\u6362\u77e9\u9635\uff0c\u5e73\u79fb\u5411\u91cf\u4e3a (dx,dy,dz)\u3002\u6709\u7528\u4e8e\u5236\u4f5c\u7f29\u653e\u548c\u65cb\u8f6c\u77e9\u9635\u7684\u51fd\u6570\u3002\u8981\u5236\u4f5c\u66f4\u590d\u6742\u7684\u53d8\u6362\uff0c\u6709\u4e00\u4e2a\u7528\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684\u51fd\u6570\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f threejs/instanced-mesh.html \u4f7f\u7528\u5355\u4e2a InstancedMesh \u521b\u5efa\u4e86 1331 \u4e2a\u7403\u4f53\uff0c\u6392\u5217\u5728\u4e00\u4e2a 11x11x11 \u7684\u7acb\u65b9\u4f53\u4e2d\u3002\u8981\u5c06\u7403\u4f53\u79fb\u52a8\u5230\u4f4d\u7f6e\uff0c\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u5e94\u7528\u4e86\u4e0d\u540c\u7684\u5e73\u79fb\u3002\u8fd8\u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u8bbe\u7f6e\u4e86\u5b9e\u4f8b\u989c\u8272\u3002</p> <p></p> <p>The class THREE.InstancedMesh makes it possible to quickly render several objects, possibly a large number of objects, that use the same geometry but differ in the transformations that are applied to them and, possibly, in their material color. Each copy of the object is called an \"instance,\" and the process of creating all of the copies is called instanced drawing or instancing. In WebGL 2.0 (and in WebGL 1.0 with an extension), it is possible to draw all of the instances with a single function call, making it very efficient.</p> <p>InstancedMesh is fairly easy to use. Along with the geometry and material for the mesh, the constructor specifies the maximum number of instances that it can support:</p> <pre><code>instances = new THREE.InstancedMesh(geometry, material, count)\n</code></pre> <p>To set the transformation for instance number i, you can call</p> <pre><code>instances.setMatrixAt( i, matrix );\n</code></pre> <p>where matrix is an object of type THREE.Matrix4 representing the modeling transformation. Similarly, you can set the color for instance number i with</p> <pre><code>instances.setColorAt( i, color );\n</code></pre> <p>where color is of type THREE.Color. Instance colors are optional. If provided, they replace the color property of material.</p> <p>The Matrix4 class includes methods that make it easy to create a transformation matrix. The constructor</p> <pre><code>matrix = new THREE.Matrix4();\n</code></pre> <p>creates an identity matrix, which can then be modified. For example, the method matrix.makeTranslation(dx,dy,dz) replaces the current matrix with the transformation matrix for a translation by the vector (dx,dy,dz). There are functions for making scaling and rotation matrices. To make more complex transformations, there is a function for multiplying matrices.</p> <p>The sample program threejs/instanced-mesh.html uses a single InstancedMesh to make 1331 spheres, arranged in an 11-by-11-by-11 cube. To move the spheres into position, different translations are applied to each instance. An instance color is also set for each instance.</p> <p></p>"},{"location":"cn/c5/s3/#532-\u7528\u6237\u8f93\u5165","title":"5.3.2 \u7528\u6237\u8f93\u5165","text":"<p>User Input</p> \u4e2d\u6587\u82f1\u6587 <p>\u5927\u591a\u6570\u5b9e\u9645\u7a0b\u5e8f\u9700\u8981\u67d0\u79cd\u5f62\u5f0f\u7684\u7528\u6237\u4ea4\u4e92\u3002\u5bf9\u4e8eWeb\u5e94\u7528\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528HTML\u5c0f\u90e8\u4ef6\uff08\u5982\u6309\u94ae\u548c\u6587\u672c\u8f93\u5165\u6846\uff09\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002\u4f46\u5728\u8bb8\u591a\u7a0b\u5e8f\u4e2d\uff0c\u76f4\u63a5\u4f7f\u7528\u9f20\u6807\u4e0e3D\u4e16\u754c\u7684\u4ea4\u4e92\u66f4\u4e3a\u81ea\u7136\u3002</p> <p>\u6700\u57fa\u7840\u7684\u4f8b\u5b50\u662f\u4f7f\u7528\u9f20\u6807\u65cb\u8f6c\u573a\u666f\u3002\u5728three.js\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528TrackballControls\u7c7b\u6216OrbitControls\u7c7b\u5b9e\u73b0\u65cb\u8f6c\u3002\u6ce8\u610f\uff0c\u8fd9\u4e24\u4e2a\u7c7b\u90fd\u652f\u6301\u89e6\u6478\u5c4f\u4ee5\u53ca\u9f20\u6807\u4ea4\u4e92\u3002\u7c7b\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u4f7f\u7528OrbitControls\u65f6\uff0c\u65cb\u8f6c\u53d7\u5230\u9650\u5236\uff0c\u4f7f\u5f97\u6b63y\u8f74\u59cb\u7ec8\u662f\u89c6\u56fe\u4e2d\u7684\u4e0a\u65b9\u3002\u800cTrackballControls\u5219\u5141\u8bb8\u5b8c\u5168\u81ea\u7531\u7684\u65cb\u8f6c\u3002\u53e6\u4e00\u4e2a\u533a\u522b\u662f\uff0cTrackballControls\u65e8\u5728\u4ec5\u4e0e\u8fde\u7eed\u52a8\u753b\u7684\u573a\u666f\u4e00\u8d77\u4f7f\u7528\u3002OrbitControls\u7528\u4e8e\u5927\u591a\u6570\u793a\u4f8b\u7a0b\u5e8f\u548c\u6f14\u793a\u4e2d\u7684\u65cb\u8f6c\u3002TrackballControls\u4ec5\u5728threejs/full-window.html\u548cthreejs/curves-and-surfaces.html\u4e2d\u4f7f\u7528\u3002</p> <p>\u8fd9\u4e24\u4e2a\u63a7\u5236\u7c7b\u4e0d\u662f\u4e3b\u8981three.js JavaScript\u6587\u4ef6\u7684\u4e00\u90e8\u5206\u3002\u5b83\u4eec\u53ef\u4ee5\u4ece\u6a21\u5757\"OrbitControls.js\"\u548c\"TrackballControls.js\"\u5bfc\u5165\uff0c\u8fd9\u4e9b\u6a21\u5757\u53ef\u4ee5\u5728\u6559\u79d1\u4e66\u6e90\u6587\u4ef6\u5939\u7684threejs/script/controls\u6587\u4ef6\u5939\u4e2d\u627e\u5230\uff0c\u6216\u5728three.js\u4e0b\u8f7d\u5305\u7684examples/jsm/loaders\u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002</p> <p>\u8fd9\u4e24\u4e2a\u7c7b\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u4f7f\u7528\u3002\u6211\u5c06\u9996\u5148\u8ba8\u8bbaOrbitControls\u3002\u5728\u6211\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u76f8\u673a\u5e76\u5c06\u5176\u4ece\u539f\u70b9\u79fb\u5f00\u3002\u6211\u901a\u5e38\u5411\u76f8\u673a\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u706f\u5149\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u706f\u5149\u968f\u7740\u76f8\u673a\u79fb\u52a8\uff0c\u4e3a\u76f8\u673a\u53ef\u89c1\u7684\u4efb\u4f55\u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e9b\u7167\u660e\u3002OrbitControls\u5bf9\u8c61\u7528\u4e8e\u56f4\u7ed5\u573a\u666f\u65cb\u8f6c\u76f8\u673a\u3002\u63a7\u5236\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u76f8\u673a\u548c\u6e32\u67d3\u573a\u666f\u7684\u753b\u5e03\u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u8bbe\u7f6e\uff1a</p> <pre><code>camera = new THREE.PerspectiveCamera(45, canvas.width/canvas.height, 0.1, 100);\ncamera.position.set(0,15,35);\ncamera.lookAt( new THREE.Vector3(0,0,0) ); // \u76f8\u673a\u671d\u5411\u539f\u70b9\n\nlet light = new THREE.PointLight(0xffffff, 0.6);\ncamera.add(light);  // \u89c6\u70b9\u706f\u5149\u968f\u76f8\u673a\u79fb\u52a8\nscene.add(camera);\n\ncontrols = new OrbitControls( camera, canvas );\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u5728canvas\u4e0a\u5b89\u88c5\u4e86\u4fa6\u542c\u5668\uff0c\u4ee5\u4fbf\u63a7\u4ef6\u53ef\u4ee5\u54cd\u5e94\u9f20\u6807\u4e8b\u4ef6\u3002\u5982\u679c\u6b63\u5728\u8fd0\u884c\u52a8\u753b\uff0c\u4f60\u9700\u8981\u505a\u7684\u5176\u4ed6\u4e8b\u60c5\u5c31\u662f\u5728\u6e32\u67d3\u573a\u666f\u4e4b\u524d\u8c03\u7528\uff1a</p> <pre><code>controls.update();\n</code></pre> <p>\u7528\u6237\u5c06\u80fd\u591f\u901a\u8fc7\u4f7f\u7528\u5de6\u952e\u70b9\u51fb\u5e76\u62d6\u52a8\u6765\u65cb\u8f6c\u573a\u666f\u3002\u63a7\u4ef6\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u53f3\u952e\u70b9\u51fb\u5e76\u62d6\u52a8\u6765\u201c\u5e73\u79fb\u201d\uff08\u5728\u5c4f\u5e55\u5e73\u9762\u4e0a\u62d6\u52a8\u573a\u666f\uff09\u548c\u4f7f\u7528\u4e2d\u952e\u6216\u6eda\u8f6e\u6765\u201c\u7f29\u653e\u201d\uff08\u5411\u524d\u548c\u5411\u540e\u79fb\u52a8\u76f8\u673a\uff09\u3002\u8981\u7981\u7528\u7f29\u653e\u548c\u5e73\u79fb\uff0c\u53ef\u4ee5\u8bbe\u7f6e\uff1a</p> <pre><code>controls.enablePan = false;\ncontrols.enableZoom = false;\n</code></pre> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528controls.reset()\u6765\u6062\u590d\u573a\u666f\u7684\u539f\u59cb\u89c6\u56fe\u3002</p> <p>\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u6ca1\u6709\u8fd0\u884c\u8fde\u7eed\u7684\u52a8\u753b\uff0c\u4f60\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u54cd\u5e94\u7528\u6237\u64cd\u4f5c\u91cd\u65b0\u6e32\u67d3\u573a\u666f\u3002\u5f53\u7528\u6237\u62d6\u52a8\u9f20\u6807\u65f6\uff0ccontrols\u5bf9\u8c61\u4f1a\u751f\u6210\u4e00\u4e2a\u201cchange\u201d\u4e8b\u4ef6\u3002\u4f60\u53ef\u4ee5\u4e3a\u8be5\u4e8b\u4ef6\u6dfb\u52a0\u4e00\u4e2a\u4fa6\u542c\u5668\uff0c\u901a\u8fc7\u91cd\u7ed8\u573a\u666f\u6765\u54cd\u5e94\u4e8b\u4ef6\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u53ea\u9700\u8c03\u7528\uff1a</p> <pre><code>controls.addEventListener( \"change\", callback );\n</code></pre> <p>\u5176\u4e2dcallback()\u662f\u5728\u4e8b\u4ef6\u53d1\u751f\u65f6\u5e94\u8be5\u8c03\u7528\u7684\u51fd\u6570\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u51fd\u6570render()\u6765\u6e32\u67d3\u4f60\u7684\u573a\u666f\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u5c06render\u4f5c\u4e3acallback\u7684\u503c\u4f20\u9012\u3002</p> <p>\u9057\u61be\u7684\u662f\uff0cTrackballControls\u5bf9\u8c61\u4e0d\u53d1\u51fa\u201cchange\u201d\u4e8b\u4ef6\uff0c\u4f3c\u4e4e\u6ca1\u6709\u529e\u6cd5\u5728\u6ca1\u6709\u8fd0\u884c\u52a8\u753b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b83\u3002\u6709\u4e86\u52a8\u753b\uff0cTrackballControls\u7684\u4f7f\u7528\u65b9\u6cd5\u4e0eOrbitControls\u76f8\u540c\uff0c\u53ea\u662f\u5e73\u79fb\u548c\u7f29\u653e\u7684\u5c5e\u6027\u662fcontrols.noPan\u548ccontrols.noZoom\uff1b\u5e94\u8be5\u5c06\u5b83\u4eec\u8bbe\u7f6e\u4e3atrue\u4ee5\u7981\u7528\u5e73\u79fb\u548c\u7f29\u653e\u3002TrackballControls\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u7279\u6027\u662f\u5b83\u4eec\u5b9e\u73b0\u4e86\u60ef\u6027\uff1a\u5f53\u7528\u6237\u5728\u62d6\u52a8\u540e\u91ca\u653e\u9f20\u6807\u65f6\uff0c\u573a\u666f\u7684\u8fd0\u52a8\u4f1a\u9010\u6e10\u505c\u6b62\uff0c\u800c\u4e0d\u662f\u7a81\u7136\u505c\u6b62\u3002</p> <p>\u4e00\u79cd\u66f4\u6709\u8da3\u7684\u9f20\u6807\u4ea4\u4e92\u5f62\u5f0f\u662f\u8ba9\u7528\u6237\u901a\u8fc7\u70b9\u51fb\u573a\u666f\u4e2d\u7684\u5bf9\u8c61\u6765\u9009\u62e9\u5b83\u4eec\u3002\u95ee\u9898\u5728\u4e8e\u786e\u5b9a\u7528\u6237\u70b9\u51fb\u4e86\u54ea\u4e2a\u5bf9\u8c61\u3002\u4e00\u822c\u7a0b\u5e8f\u5982\u4e0b\uff1a\u4ece\u76f8\u673a\u901a\u8fc7\u7528\u6237\u5728\u5c4f\u5e55\u4e0a\u70b9\u51fb\u7684\u70b9\u53d1\u51fa\u4e00\u6761\u5c04\u7ebf\uff0c\u5e76\u627e\u5230\u573a\u666f\u4e2d\u7b2c\u4e00\u6761\u88ab\u8be5\u5c04\u7ebf\u76f8\u4ea4\u7684\u5bf9\u8c61\u3002\u90a3\u5c31\u662f\u5728\u7528\u6237\u70b9\u51fb\u70b9\u53ef\u89c1\u7684\u5bf9\u8c61\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u5927\u91cf\u8ba1\u7b97\u3002\u5e78\u8fd0\u7684\u662f\uff0cthree.js\u6709\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u4e3a\u4f60\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff1aTHREE.Raycaster\u3002</p> <p>Raycaster\u53ef\u4ee5\u7528\u6765\u627e\u5230\u5c04\u7ebf\u4e0e\u573a\u666f\u4e2d\u5bf9\u8c61\u7684\u4ea4\u70b9\u3002\uff08\u5c04\u7ebf\u53ea\u662f\u4e00\u6761\u7ebf\u7684\u4e00\u534a\uff0c\u4ece\u67d0\u4e2a\u7ed9\u5b9a\u7684\u8d77\u59cb\u70b9\u5411\u7ed9\u5b9a\u65b9\u5411\u65e0\u9650\u5ef6\u4f38\u3002\uff09\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5c04\u7ebf\u6295\u5c04\u5668\u5bf9\u8c61\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff1a</p> <pre><code>raycaster = new THREE.Raycaster();\n</code></pre> <p>\u8981\u544a\u8bc9\u5b83\u4f7f\u7528\u54ea\u4e2a\u5c04\u7ebf\uff0c\u53ef\u4ee5\u8c03\u7528</p> <pre><code>raycaster.set( startingPoint, direction );\n</code></pre> <p>\u5176\u4e2d\u4e24\u4e2a\u53c2\u6570\u90fd\u662fTHREE.Vector3\u7c7b\u578b\u3002\u5b83\u4eec\u7684\u503c\u4ee5\u4e16\u754c\u5750\u6807\u4e3a\u51c6\uff0c\u8fd9\u662f\u4f60\u7528\u4e8e\u6574\u4e2a\u573a\u666f\u7684\u5750\u6807\u7cfb\u7edf\u3002direction\u5fc5\u987b\u662f\u89c4\u8303\u5316\u7684\u5411\u91cf\uff0c\u957f\u5ea6\u7b49\u4e8e\u4e00\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u8981\u53d1\u5c04\u6fc0\u5149\u67aa....startingPoint\u662f\u67aa\u7684\u4f4d\u7f6e\uff0cdirection\u662f\u67aa\u6307\u5411\u7684\u65b9\u5411\u3002\u4f7f\u7528\u8fd9\u4e9b\u53c2\u6570\u914d\u7f6e\u5c04\u7ebf\u6295\u5c04\u5668\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u627e\u51fa\u54ea\u4e2a\u5bf9\u8c61\u88ab\u6fc0\u5149\u675f\u51fb\u4e2d\u3002</p> <p>\u6216\u8005\uff0c\u66f4\u65b9\u4fbf\u5730\u5904\u7406\u7528\u6237\u8f93\u5165\uff0c\u4f60\u53ef\u4ee5\u57fa\u4e8e\u76f8\u673a\u548c\u5c4f\u5e55\u4e0a\u7684\u70b9\u8868\u8fbe\u5c04\u7ebf\uff1a</p> <pre><code>raycaster.setFromCamera( screenCoords, camera );\n</code></pre> <p>screenCoords\u4ee5THREE.Vector2\u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u4ee5\u88c1\u526a\u5750\u6807\u8868\u793a\u3002\u8fd9\u610f\u5473\u7740\u6c34\u5e73\u5750\u6807\u4ece\u89c6\u53e3\u5de6\u4fa7\u7684-1\u5230\u53f3\u4fa7\u76841\uff0c\u5782\u76f4\u5750\u6807\u4ece\u5e95\u90e8\u7684-1\u5230\u9876\u90e8\u76841\u3002\uff08\u5728three.js\u4e2d\uff0c\u88c1\u526a\u5750\u6807\u79f0\u4e3a\u201c\u89c4\u8303\u5316\u8bbe\u5907\u5750\u6807\u201d\u3002\uff09\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u5c06\u753b\u5e03\u4e0a\u7684\u50cf\u7d20\u5750\u6807\u8f6c\u6362\u4e3a\u88c1\u526a\u5750\u6807\u3002\u8fd9\u91cc\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u9f20\u6807\u4e8b\u4ef6\uff0cevt\uff1a</p> <pre><code>let r = canvas.getBoundingClientRect();\nlet x = evt.clientX - r.left; // \u5c06\u9f20\u6807\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u753b\u5e03\u50cf\u7d20\u5750\u6807\nlet y = evt.clientY - r.top;\n\nlet a = 2*x/canvas.width - 1; // \u5c06\u753b\u5e03\u50cf\u7d20\u5750\u6807\u8f6c\u6362\u4e3a\u88c1\u526a\u5750\u6807\nlet b = 1 - 2*y/canvas.height;\n\nraycaster.setFromCamera( new THREE.Vector2(a,b), camera );\n</code></pre> <p>\u4e00\u65e6\u4f60\u544a\u8bc9\u4e86\u5c04\u7ebf\u6295\u5c04\u5668\u4f7f\u7528\u54ea\u4e2a\u5c04\u7ebf\uff0c\u5b83\u5c31\u51c6\u5907\u597d\u627e\u5230\u5c04\u7ebf\u4e0e\u573a\u666f\u4e2d\u5bf9\u8c61\u7684\u4ea4\u70b9\u4e86\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u5b8c\u6210\uff1a</p> <pre><code>raycaster.intersectObjects( objectArray, recursive );\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2aObject3D\u6570\u7ec4\u3002\u5c04\u7ebf\u6295\u5c04\u5668\u5c06\u5728\u6570\u7ec4\u4e2d\u641c\u7d22\u5176\u5f53\u524d\u5c04\u7ebf\u4e0e\u5bf9\u8c61\u7684\u4ea4\u70b9\u3002\u5982\u679c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662ftrue\uff0c\u5b83\u8fd8\u5c06\u641c\u7d22\u573a\u666f\u56fe\u4e2d\u90a3\u4e9b\u5bf9\u8c61\u7684\u540e\u4ee3\uff1b\u5982\u679c\u662ffalse\u6216\u7701\u7565\uff0c\u5219\u53ea\u641c\u7d22\u6570\u7ec4\u4e2d\u7684\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u8981\u641c\u7d22\u4e0e\u573a\u666f\u4e2d\u6240\u6709\u5bf9\u8c61\u7684\u4ea4\u70b9\uff0c\u8bf7\u4f7f\u7528\uff1a</p> <pre><code>raycaster.intersectObjects( scene.children, true );\n</code></pre> <p>intersectObjects\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2aJavaScript\u5bf9\u8c61\u6570\u7ec4\u3002\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u9879\u76ee\u4ee3\u8868\u5c04\u7ebf\u4e0eObject3D\u7684\u4ea4\u70b9\u3002\u8be5\u51fd\u6570\u627e\u5230\u6240\u6709\u8fd9\u6837\u7684\u4ea4\u70b9\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7b2c\u4e00\u4e2a\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u4ea4\u70b9\uff0c\u6570\u7ec4\u4e3a\u7a7a\u3002\u6570\u7ec4\u6309\u4ece\u5c04\u7ebf\u8d77\u59cb\u70b9\u8d77\u7684\u8ddd\u79bb\u9012\u589e\u6392\u5e8f\u3002\u5982\u679c\u4f60\u53ea\u60f3\u8981\u7b2c\u4e00\u4e2a\u4ea4\u70b9\uff0c\u4f7f\u7528\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5176\u5c5e\u6027\u5305\u542b\u6709\u5173\u4ea4\u70b9\u7684\u4fe1\u606f\u3002\u5047\u8bbe\u9879\u76ee\u662f\u6570\u7ec4\u5143\u7d20\u4e4b\u4e00\u3002\u90a3\u4e48\u6700\u6709\u7528\u5c5e\u6027\u662f\uff1aitem.object\uff0c\u88ab\u5c04\u7ebf\u76f8\u4ea4\u7684Object3D\uff1b\u548citem.point\uff0c\u4ea4\u70b9\uff0c\u4ee5\u4e16\u754c\u5750\u6807\u4e2d\u7684Vector3\u7ed9\u51fa\u3002\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u6709\u8da3\u7684\u7528\u6237\u4ea4\u4e92\u3002</p> <p>\u4e0b\u9762\u7684\u6f14\u793a\u4f7f\u7528\u4e00\u4e9b\u57fa\u672c\u7684\u9f20\u6807\u4ea4\u4e92\uff0c\u8ba9\u7528\u6237\u7f16\u8f91\u573a\u666f\u3002\u573a\u666f\u663e\u793a\u4e86\u4e00\u4e9b\u7ec6\u53e3\u9ec4\u8272\u5706\u67f1\u4f53\u7ad9\u5728\u7eff\u8272\u57fa\u5ea7\u4e0a\u3002\u7528\u6237\u53ef\u4ee5\u62d6\u52a8\u5706\u67f1\u4f53\uff0c\u6dfb\u52a0\u548c\u5220\u9664\u5706\u67f1\u4f53\uff0c\u4ee5\u53ca\u65cb\u8f6c\u573a\u666f\u3002\u4e00\u7ec4\u5355\u9009\u6309\u94ae\u8ba9\u7528\u6237\u9009\u62e9\u9f20\u6807\u6267\u884c\u7684\u64cd\u4f5c\u3002</p> <p></p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u4e9b\u64cd\u4f5c\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u7a0b\u5e8f\u4e2d\u552f\u4e00\u7684\u5bf9\u8c61\u662f\u57fa\u5ea7\u548c\u5706\u67f1\u4f53\u3002\u5728\u7a0b\u5e8f\u4e2d\uff0c\u57fa\u5ea7\u88ab\u79f0\u4e3aground\uff0c\u6240\u6709\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2a\u540d\u4e3aworld\u7684Object3D\u7684\u5b50\u5bf9\u8c61\u3002\uff08\u6211\u4f7f\u7528world\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u65cb\u8f6c\u6240\u6709\u53ef\u89c1\u5bf9\u8c61\u7684\u96c6\u5408\uff0c\u800c\u4e0d\u9700\u8981\u79fb\u52a8\u76f8\u673a\u6216\u706f\u5149\u3002\uff09\u5bf9\u4e8e\u6240\u6709\u62d6\u52a8\u3001\u6dfb\u52a0\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u5bfb\u627e\u8fd9\u4e9b\u5bf9\u8c61\u4e0e\u4ece\u76f8\u673a\u901a\u8fc7\u9f20\u6807\u4f4d\u7f6e\u7684\u5c04\u7ebf\u7684\u4ea4\u70b9\uff1a</p> <pre><code>raycaster.setFromCamera( new THREE.Vector2(a,b), camera );\nlet intersects = raycaster.intersectObjects( world.children );\n</code></pre> <p>\u5982\u679cintersects.length\u4e3a\u96f6\uff0c\u5219\u6ca1\u6709\u4ea4\u70b9\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u505a\u7684\u3002\u5426\u5219\uff0c\u6211\u67e5\u770bintersects[0]\uff0c\u5b83\u8868\u793a\u4e0e\u9f20\u6807\u4f4d\u7f6e\u53ef\u89c1\u7684\u5bf9\u8c61\u7684\u4ea4\u70b9\u3002\u6240\u4ee5\uff0cintersects[0].object\u662f\u7528\u6237\u70b9\u51fb\u7684\u5bf9\u8c61\uff0cintersects[0].point\u662f\u4ea4\u70b9\u3002</p> <p>\u5220\u9664\u64cd\u4f5c\u6700\u5bb9\u6613\u5b9e\u73b0\uff1a\u5f53\u7528\u6237\u70b9\u51fb\u4e00\u4e2a\u5706\u67f1\u4f53\u65f6\uff0c\u5706\u67f1\u4f53\u5e94\u8be5\u4ece\u573a\u666f\u4e2d\u5220\u9664\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u4ea4\u70b9\u662f\u4e0eground\uff0c\u90a3\u4e48\u4ec0\u4e48\u90fd\u4e0d\u5220\u9664\u3002\u5426\u5219\uff0c\u88ab\u70b9\u51fb\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u5706\u67f1\u4f53\uff0c\u5e94\u8be5\u88ab\u5220\u9664\uff1a</p> <pre><code>if ( intersects[0].object != ground ) {\n    world.remove( intersects[0].object );\n    render();\n}\n</code></pre> <p>\u5bf9\u4e8e\u6dfb\u52a0\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u6709\u5728\u7528\u6237\u70b9\u51fb\u5730\u9762\u65f6\u624d\u5e94\u8be5\u6dfb\u52a0\u4e00\u4e2a\u5706\u67f1\u4f53\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ea4\u70b9\u544a\u8bc9\u4e86\u6211\u4eec\u5e94\u8be5\u5728\u54ea\u91cc\u6dfb\u52a0\u5706\u67f1\u4f53\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u662f\uff0c\u6211\u4eec\u4ee5\u4e16\u754c\u5750\u6807\u7684\u5f62\u5f0f\u83b7\u5f97\u4e86\u4ea4\u70b9\uff0c\u4f46\u4e3a\u4e86\u5c06\u5706\u67f1\u4f53\u4f5c\u4e3aworld\u7684\u5b50\u5bf9\u8c61\u6dfb\u52a0\uff0c\u6211\u9700\u8981\u77e5\u9053\u4ea4\u70b9\u5728world\u7684\u5c40\u90e8\u5750\u6807\u7cfb\u4e2d\u7684\u4f4d\u7f6e\u3002\u5982\u679cworld\u5df2\u7ecf\u65cb\u8f6c\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5750\u6807\u7cfb\u5c06\u4f1a\u4e0d\u540c\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6bcf\u4e2aObject3D\u90fd\u6709\u4e00\u4e2aworldToLocal(v)\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u6765\u5c06Vector3 v\u4ece\u4e16\u754c\u5750\u6807\u8f6c\u6362\u4e3a\u8be5\u5bf9\u8c61\u7684\u5c40\u90e8\u5750\u6807\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\uff1b\u5b83\u4fee\u6539\u5411\u91cfv\u7684\u5750\u6807\u3002\uff08\u8fd8\u6709\u4e00\u4e2alocalToWorld\u65b9\u6cd5\u3002\uff09\u6240\u4ee5\uff0c\u6dfb\u52a0\u64cd\u4f5c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a</p> <pre><code>item = intersects[0];\nif (item.object == ground) {\n    let locationX = item.point.x;  // \u4ea4\u70b9\u7684\u4e16\u754c\u5750\u6807\n    let locationZ = item.point.z;\n    let coords = new THREE.Vector3(locationX, 0, locationZ); // y\u603b\u662f0\n    world.worldToLocal(coords); // \u8f6c\u6362\u4e3a\u5c40\u90e8\u5750\u6807\n    addCylinder(coords.x, coords.z); // \u5728\u6821\u6b63\u540e\u7684\u4f4d\u7f6e\u6dfb\u52a0\u5706\u67f1\u4f53\n    render();\n}\n</code></pre> <p>\u5bf9\u4e8e\u62d6\u52a8\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e\u5220\u9664\u76f8\u540c\u7684\u6d4b\u8bd5\u6765\u786e\u5b9a\u54ea\u4e2a\u5706\u67f1\u4f53\u88ab\u70b9\u51fb\u3002\u7136\u800c\uff0c\u968f\u7740\u7528\u6237\u62d6\u52a8\u9f20\u6807\u79fb\u52a8\u5706\u67f1\u4f53\u7684\u95ee\u9898\u5f15\u53d1\u4e86\u4e00\u4e2a\u65b0\u95ee\u9898\uff1a\u6211\u4eec\u600e\u4e48\u77e5\u9053\u5728\u9f20\u6807\u79fb\u52a8\u65f6\u8981\u5c06\u5706\u67f1\u4f53\u653e\u5728\u54ea\u91cc\uff1f\u6211\u4eec\u4e0d\u77e5\u4f55\u6545\u5fc5\u987b\u5c06\u65b0\u9f20\u6807\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u5706\u67f1\u4f53\u7684\u65b0\u4f4d\u7f6e\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528\u5c04\u7ebf\u6295\u5c04\u5668\u3002\u6211\u6700\u521d\u7684\u60f3\u6cd5\u662f\u4ece\u76f8\u673a\u901a\u8fc7\u65b0\u9f20\u6807\u4f4d\u7f6e\u521b\u5efa\u4e00\u6761\u5c04\u7ebf\uff0c\u4f7f\u7528\u8be5\u5c04\u7ebf\u627e\u5230\u5b83\u4e0e\u5730\u9762\u7684\u4ea4\u70b9\uff0c\u7136\u540e\u5c06\u5706\u67f1\u4f53\u79fb\u52a8\u5230\u90a3\u4e2a\u4ea4\u70b9\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4f1a\u628a\u5706\u67f1\u4f53\u7684\u5e95\u90e8\u653e\u5728\u9f20\u6807\u4f4d\u7f6e\uff0c\u5f53\u6211\u4e00\u5f00\u59cb\u79fb\u52a8\u9f20\u6807\u65f6\uff0c\u5706\u67f1\u4f53\u5c31\u4f1a\u8df3\u5230\u9519\u8bef\u7684\u4f4d\u7f6e\u3002\u6211\u610f\u8bc6\u5230\u6211\u4e0d\u60f3\u8ffd\u8e2a\u4e0e\u5730\u9762\u7684\u4ea4\u70b9\uff1b\u6211\u9700\u8981\u8ffd\u8e2a\u4e0e\u539f\u59cb\u4ea4\u70b9\u9ad8\u5ea6\u76f8\u540c\u7684\u5e73\u9762\u7684\u4ea4\u70b9\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u5728\u62d6\u52a8\u671f\u95f4\u6dfb\u52a0\u4e86\u4e00\u4e2a\u90a3\u4e2a\u9ad8\u5ea6\u7684\u4e0d\u53ef\u89c1\u5e73\u9762\uff0c\u5e76\u4f7f\u7528\u4e0e\u8be5\u5e73\u9762\u7684\u4ea4\u70b9\u4ee3\u66ff\u4e0e\u5730\u9762\u7684\u4ea4\u70b9\u3002\uff08\u4f60\u53ef\u4ee5\u5728three.js\u4e2d\u62e5\u6709\u4e0d\u53ef\u89c1\u7684\u5bf9\u8c61\u2014\u2014\u53ea\u9700\u5c06\u6750\u8d28\u7684visible\u5c5e\u6027\u8bbe\u7f6e\u4e3afalse\u3002\uff09</p> <p>Most real programs require some kind of user interaction. For a web application, of course, the program can get user input using HTML widgets such as buttons and text input boxes. But direct mouse interaction with a 3D world is more natural in many programs.</p> <p>The most basic example is using the mouse to rotate the scene. In three.js, rotation can be implemented using the class TrackballControls or the class OrbitControls. Note that both classes support touchscreen as well as mouse interaction. The main difference between the classes is that with OrbitControls, the rotation is constrained so that the positive y-axis is always the up direction in the view. TrackballControls, on the other hand, allows completely free rotation. Another difference is that TrackballControls is meant to be used only with a scene that is continuously animated. OrbitControls is used for rotation in most of my sample programs and demos. TrackballControls is used only in threejs/full-window.html and threejs/curves-and-surfaces.html.</p> <p>The two control classes are not part of the main three.js JavaScript file. They can be imported from the modules \"OrbitControls.js\" and \"TrackballControls.js\", which can be found in the threejs/script/controls folder in the source folder for this textbook, or in the examples/jsm/loaders folder in the three.js download.</p> <p>The two classes are used in a similar way. I will discuss OrbitControls first. In my examples, I create a camera and move it away from the origin. I usually add a light object to the camera object, so that the light will move along with the camera, providing some illumination to anything that is visible to the camera. The OrbitControls object is used to rotate the camera around the scene. The constructor for the control object has two parameters, the camera and the canvas on which the scene is rendered. Here is typical setup:</p> <pre><code>camera = new THREE.PerspectiveCamera(45, canvas.width/canvas.height, 0.1, 100);\ncamera.position.set(0,15,35);\ncamera.lookAt( new THREE.Vector3(0,0,0) ); // camera looks toward origin\n\nlet light = new THREE.PointLight(0xffffff, 0.6);\ncamera.add(light);  // viewpoint light moves with camera\nscene.add(camera);\n\ncontrols = new OrbitControls( camera, canvas );\n</code></pre> <p>The constructor installs listeners on the canvas so that the controls can respond to mouse events. If an animation is running, the only other thing that you need to do is call</p> <pre><code>controls.update();\n</code></pre> <p>before rendering the scene. The user will be able to rotate the scene by dragging on it with the left mouse button. The controls will also do \"panning\" (dragging the scene in the plane of the screen) with the right mouse button and \"zooming\" (moving the camera forward and backward) with the middle mouse button or scroll wheel. To disable zooming and panning, you can set</p> <pre><code>controls.enablePan = false;\ncontrols.enableZoom = false;\n</code></pre> <p>And you can return the original view of the scene by calling controls.reset().</p> <p>If your program is not running a continuous animation, you need a way to re-render the scene in response to user actions. When the user drags the mouse, the controls object generates a \"change\" event. You can add a listener for that event, to respond to the event by redrawing the scene. To do that, just call</p> <pre><code>controls.addEventListener( \"change\", callback );\n</code></pre> <p>Where callback() is the function that should be called when the event occurs. If you have a function render() that renders your scene, you can simply pass render as the value of callback.</p> <p>Unfortunately, a TrackballControls object does not emit \"change\" events, and there does not seem to be any way to use it without having an animation running. With an animation, TrackballControls are used in the same way as OrbitControls, except that the properties for panning and zooming are controls.noPan and controls.noZoom; they should be set to true to disable panning and zooming. One nice feature of TrackballControls is that they implement inertia: When the user releases the mouse after dragging, the motion of the scene will slow to a stop instead of stopping abruptly.</p> <p>A much more interesting form of mouse interaction is to let the user select objects in the scene by clicking on them. The problem is to determine which object the user is clicking. The general procedure is something like this: Follow a ray from the camera through the point on the screen where the user clicked and find the first object in the scene that is intersected by that ray. That's the object that is visible at the point where the user clicked. Unfortunately, the procedure involves a lot of calculations. Fortunately, three.js has a class that can do the work for you: THREE.Raycaster.</p> <p>A Raycaster can be used to find intersections of a ray with objects in a scene. (A ray is just half of a line, stretching from some given starting point in a given direction towards infinity.) You can make one raycaster object to use throughout your program:</p> <pre><code>raycaster = new THREE.Raycaster();\n</code></pre> <p>To tell it which ray to use, you can call</p> <pre><code>raycaster.set( startingPoint, direction );\n</code></pre> <p>where both of the parameters are of type THREE.Vector3. Their values are in terms of world coordinates, the same coordinate system that you use for the scene as a whole. The direction must be a normalized vector, with length equal to one. For example, suppose that you want to fire a laser gun.... The startingPoint is the location of the gun, and the direction is the direction that the gun is pointing. Configure the raycaster with those parameters, and you can use it to find out what object is struck by the laser beam.</p> <p>Alternatively, and more conveniently for processing user input, you can express the ray in terms of the camera and a point on the screen:</p> <pre><code>raycaster.setFromCamera( screenCoords, camera );\n</code></pre> <p>The screenCoords are given as a THREE.Vector2 expressed in clip coordinates. This means the horizontal coordinate ranges from \u22121 on the left edge of the viewport to 1 on the right, and the vertical coordinate ranges from \u22121 at the bottom to 1 on the top. (Clip coordinates are called \"normalized device coordinates\" in three.js.) So, we need to convert from pixel coordinates on a canvas to clip coordinates. Here's one way to do it, given a mouse event, evt:</p> <pre><code>let r = canvas.getBoundingClientRect();\nlet x = evt.clientX - r.left; // convert mouse location to canvas pixel coords\nlet y = evt.clientY - r.top;\n\nlet a = 2*x/canvas.width - 1; // convert canvas pixel coords to clip coords\nlet b = 1 - 2*y/canvas.height;\n\nraycaster.setFromCamera( new THREE.Vector2(a,b), camera );\n</code></pre> <p>Once you have told the raycaster which ray to use, it is ready to find intersections of that ray with objects in the scene. This can be done with the function</p> <pre><code>raycaster.intersectObjects( objectArray, recursive );\n</code></pre> <p>The first parameter is an array of Object3D. The raycaster will search for intersections of its current ray with objects in the array. If the second parameter is true, it will also search descendants of those objects in the scene graph; if it is false or is omitted, then only the objects in the array will be searched. For example, to search for intersections with all objects in the scene, use</p> <pre><code>raycaster.intersectObjects( scene.children, true );\n</code></pre> <p>The return value from intersectObjects is an array of JavaScript objects. Each item in the array represents an intersection of the ray with an Object3D. The function finds all such intersections, not just the first. If no intersection is found, the array is empty. The array is sorted by increasing distance from the starting point of the ray. If you just want the first intersection, use the first element of the array.</p> <p>Each element in the array is an object whose properties contain information about the intersection. Suppose that item is one of the array elements. Then the most useful properties are: item.object, which is the Object3D that was intersected by the ray; and item.point, which is the point of intersection, given as a Vector3 in world coordinates. That information is enough to implement some interesting user interaction.</p> <p>The following demo uses some basic mouse interaction to let the user edit a scene. The scene shows a number of tapered yellow cylinders standing on a green base. The user can drag the cylinders, add and delete cylinders, and rotate the scene. A set of radio buttons lets the user select which action should be performed by the mouse.</p> <p></p> <p>Let's look at how the actions are implemented. The only objects are the base and the cylinders. In the program, the base is referred to as ground, and all the objects are children of an Object3D named world. (I use the world object to make it easy to rotate the set of all visible objects without moving the camera or lights.) For all drag, add, and delete actions, I look for intersections of these objects with a ray that extends from the camera through the mouse position:</p> <pre><code>raycaster.setFromCamera( new THREE.Vector2(a,b), camera );\nlet intersects = raycaster.intersectObjects( world.children );\n</code></pre> <p>If intersects.length is zero, there are no intersections, and there is nothing to do. Otherwise, I look at intersects[0], which represents an intersection with the object that is visible at the mouse position. So, intersects[0].object is the object that the user clicked, and intersects[0].point is the point of intersection.</p> <p>The Delete action is the simplest to implement: When the user clicks a cylinder, the cylinder should be removed from the scene. If the first intersection is with the ground, then nothing is deleted. Otherwise, the clicked object was a cylinder and should be deleted:</p> <pre><code>if ( intersects[0].object != ground ) {\n    world.remove( intersects[0].object );\n    render();\n}\n</code></pre> <p>For an Add action, we should add a cylinder only if the user clicked the ground. In that case, the point of intersection tells where the cylinder should be added. An interesting issue here is that we get the point of intersection in world coordinates, but in order to add the cylinder as a child of world, I need to know the point of intersection in the local coordinate system for world. The two coordinate systems will be different if the world has been rotated. Fortunately, every Object3D has a method worldToLocal(v) that can be used to transform a Vector3, v, from world coordinates to local coordinates for that object. This method does not return a value; it modifies the coordinates of the vector v. (There is also a localToWorld method.) So, the Add action can be implemented like this:</p> <pre><code>item = intersects[0];\nif (item.object == ground) {\n    let locationX = item.point.x;  // world coords of intersection point\n    let locationZ = item.point.z;\n    let coords = new THREE.Vector3(locationX, 0, locationZ); // y is always 0\n    world.worldToLocal(coords); // transform to local coords\n    addCylinder(coords.x, coords.z); // adds a cylinder at corrected location\n    render();\n}\n</code></pre> <p>For a Drag action, we can determine which cylinder was clicked using the same test as for delete. However, the problem of moving the cylinder as the user drags the mouse raises a new issue: how do we know where to put the cylinder when the mouse moves? We somehow have to transform a new mouse position into a new position for the cylinder. For that, we can use the raycaster again. My first thought was to create a ray from the camera through the new mouse position, use that ray to find its intersection with the ground, and then to move the cylinder to that point of intersection. Unfortunately, this puts the base of the cylinder at the mouse position, and it made the cylinder jump to the wrong position as soon as I started moving the mouse. I realized that I didn't want to track the intersection with the ground; I needed to track the intersection with a plane that lies at the same height as the original point of intersection. To implement this, I add an invisible plane at that height just during dragging, and I use intersections with that plane instead of intersections with the ground. (You can have invisible objects in three.js\u2014just set the visible property of the material to false.)</p>"},{"location":"cn/c5/s3/#533-\u9634\u5f71","title":"5.3.3 \u9634\u5f71","text":"<p>Shadows</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6211\u4eec\u76843D\u56fe\u50cf\u4e2d\uff0c\u6709\u4e00\u4ef6\u4e8b\u60c5\u4e00\u76f4\u6ca1\u6709\u51fa\u73b0\uff0c\u90a3\u5c31\u662f\u9634\u5f71\u3002\u5373\u4f7f\u4f60\u6ca1\u6709\u610f\u8bc6\u5230\u7f3a\u5c11\u4e86\u9634\u5f71\uff0c\u5b83\u4e5f\u4f1a\u8ba9\u8bb8\u591a\u56fe\u50cf\u770b\u8d77\u6765\u4e0d\u5bf9\u52b2\u3002\u9634\u5f71\u53ef\u4ee5\u4e3a\u573a\u666f\u589e\u6dfb\u4e00\u4e1d\u903c\u771f\u611f\uff0c\u4f46OpenGL\uff0c\u5305\u62ecWebGL\uff0c\u4e0d\u80fd\u81ea\u52a8\u751f\u6210\u9634\u5f71\u3002\u6709\u4e00\u4e9b\u8ba1\u7b97\u9634\u5f71\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728OpenGL\u4e2d\u5b9e\u73b0\uff0c\u4f46\u5b83\u4eec\u4f7f\u7528\u8d77\u6765\u5f88\u68d8\u624b\uff0c\u5e76\u4e14\u5728\u7269\u7406\u4e0a\u4e5f\u4e0d\u5b8c\u5168\u771f\u5b9e\u3002\u4e00\u79cd\u79f0\u4e3a\u9634\u5f71\u6620\u5c04\u7684\u65b9\u6cd5\u5728three.js\u4e2d\u5f97\u5230\u4e86\u5b9e\u73b0\u3002\u5728three.js\u4e2d\u7684\u9634\u5f71\u6620\u5c04\u4f7f\u7528\u8d77\u6765\u5f53\u7136\u4e0d\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u4f46\u5b83\u6bd4\u4ece\u5934\u5f00\u59cb\u5c1d\u8bd5\u505a\u540c\u6837\u7684\u4e8b\u60c5\u8981\u5bb9\u6613\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u6f14\u793a\uff0c\u5c55\u793a\u4e86\u4f7f\u7528\u9634\u5f71\u6620\u5c04\u7684three.js\u573a\u666f\u3002\u6295\u5c04\u9634\u5f71\u7684\u706f\u5149\u53ef\u4ee5\u88ab\u52a8\u753b\u5316\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u770b\u5230\u968f\u7740\u706f\u5149\u79fb\u52a8\u9634\u5f71\u7684\u53d8\u5316\u3002</p> <p></p> <p>\u9634\u5f71\u6620\u5c04\u7684\u57fa\u672c\u601d\u60f3\u76f8\u5f53\u76f4\u63a5\uff1a\u8981\u786e\u5b9a\u573a\u666f\u4e2d\u54ea\u4e9b\u90e8\u5206\u5904\u4e8e\u9634\u5f71\u4e2d\uff0c\u4f60\u5fc5\u987b\u4ece\u5149\u6e90\u7684\u89d2\u5ea6\u6765\u770b\u5f85\u573a\u666f\u3002\u4ece\u5149\u6e90\u7684\u89c6\u89d2\u53ef\u4ee5\u770b\u5230\u7684\u4e1c\u897f\u4f1a\u88ab\u8be5\u5149\u6e90\u7167\u4eae\u3002\u4ece\u5149\u6e90\u770b\u4e0d\u5230\u7684\u4e1c\u897f\u5219\u5904\u4e8e\u9634\u5f71\u4e2d\u3002\uff08\u8fd9\u662f\u5ffd\u7565\u4e86\u900f\u660e\u5ea6\u548c\u95f4\u63a5\u53cd\u5c04\u5149\u7684\u53ef\u80fd\u6027\uff0c\u9634\u5f71\u6620\u5c04\u65e0\u6cd5\u5904\u7406\u3002\uff09\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u5728\u5149\u6e90\u5904\u653e\u7f6e\u4e00\u4e2a\u76f8\u673a\u5e76\u62cd\u7167\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u4e0d\u9700\u8981\u7167\u7247\u672c\u8eab\u3002\u4f60\u9700\u8981\u7684\u662f\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u5728\u6e32\u67d3\u5b8c\u7167\u7247\u540e\uff0c\u5b58\u50a8\u5728\u6df1\u5ea6\u7f13\u51b2\u533a\u4e2d\u67d0\u4e2a\u50cf\u7d20\u7684\u503c\u672c\u8d28\u4e0a\u662f\u4ece\u5149\u6e90\u5230\u90a3\u4e2a\u70b9\u4ece\u5149\u6e90\u53ef\u89c1\u7684\u7269\u4f53\u7684\u8ddd\u79bb\u3002\u90a3\u4e2a\u7269\u4f53\u88ab\u5149\u6e90\u7167\u4eae\u3002\u5982\u679c\u4e00\u4e2a\u7269\u4f53\u7684\u6df1\u5ea6\u5927\u4e8e\u5b58\u50a8\u5728\u6df1\u5ea6\u7f13\u51b2\u533a\u4e2d\u7684\u503c\uff0c\u90a3\u4e48\u90a3\u4e2a\u7269\u4f53\u5c31\u5728\u9634\u5f71\u4e2d\u3002\u6df1\u5ea6\u7f13\u51b2\u533a\u5c31\u662f\u9634\u5f71\u6620\u5c04\u3002\u73b0\u5728\uff0c\u56de\u5230\u76f8\u673a\u7684\u89c6\u89d2\uff0c\u5e76\u8003\u8651\u5728\u4ece\u76f8\u673a\u7684\u89c6\u89d2\u6e32\u67d3\u67d0\u4e2a\u7269\u4f53\u4e0a\u7684\u4e00\u4e2a\u70b9\u65f6\uff0c\u90a3\u4e2a\u70b9\u662f\u5426\u5728\u9634\u5f71\u4e2d\uff1f\u4f60\u53ea\u9700\u8981\u5c06\u90a3\u4e2a\u70b9\u4ece\u76f8\u673a\u7684\u89c6\u56fe\u5750\u6807\u53d8\u6362\u5230\u5149\u6e90\u7684\u89c6\u56fe\u5750\u6807\uff0c\u5e76\u68c0\u67e5\u53d8\u6362\u70b9\u7684\u6df1\u5ea6\u3002\u5982\u679c\u8fd9\u4e2a\u6df1\u5ea6\u5927\u4e8e\u9634\u5f71\u6620\u5c04\u4e2d\u7684\u76f8\u5e94\u503c\uff0c\u90a3\u4e48\u90a3\u4e2a\u70b9\u5c31\u5728\u9634\u5f71\u4e2d\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6709\u591a\u4e2a\u5149\u6e90\uff0c\u6bcf\u4e2a\u5149\u6e90\u90fd\u4f1a\u6295\u5c04\u81ea\u5df1\u7684\u9634\u5f71\uff0c\u4f60\u9700\u8981\u4e3a\u6bcf\u4e2a\u5149\u6e90\u51c6\u5907\u4e00\u4e2a\u9634\u5f71\u6620\u5c04\u3002</p> <p>\u8ba1\u7b97\u9634\u5f71\u6620\u5c04\u5e76\u5e94\u7528\u5b83\u4eec\u5728\u8ba1\u7b97\u4e0a\u662f\u6602\u8d35\u7684\uff0c\u9634\u5f71\u5728three.js\u4e2d\u9ed8\u8ba4\u662f\u7981\u7528\u7684\u3002\u8981\u83b7\u5f97\u9634\u5f71\uff0c\u4f60\u9700\u8981\u505a\u51e0\u4ef6\u4e8b\u60c5\u3002\u4f60\u9700\u8981\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5728WebGL\u6e32\u67d3\u5668\u4e2d\u542f\u7528\u9634\u5f71\u8ba1\u7b97\uff1a</p> <pre><code>renderer.shadowMap.enabled = true;\n</code></pre> <p>\u53ea\u6709DirectionalLights\u548cSpotLights\u624d\u80fd\u6295\u5c04\u9634\u5f71\u3002\u5373\u4f7f\u5728\u6e32\u67d3\u5668\u4e2d\u542f\u7528\u4e86\u9634\u5f71\uff0c\u8981\u4ece\u4e00\u4e2a\u5149\u6e90\u83b7\u5f97\u9634\u5f71\uff0c\u4f60\u4e5f\u5fc5\u987b\u5c06\u5149\u6e90\u7684castShadow\u5c5e\u6027\u8bbe\u7f6e\u4e3atrue\uff1a</p> <pre><code>light.castShadow = true;  // \u8fd9\u4e2a\u5149\u6e90\u5c06\u6295\u5c04\u9634\u5f71\u3002\n</code></pre> <p>\u6b64\u5916\uff0c\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u5c06\u8981\u6295\u5c04\u6216\u63a5\u6536\u9634\u5f71\u7684\u5bf9\u8c61\u542f\u7528\u9634\u5f71\u3002\u201c\u63a5\u6536\u201d\u9634\u5f71\u610f\u5473\u7740\u9634\u5f71\u5c06\u663e\u793a\u5728\u8be5\u5bf9\u8c61\u4e0a\u3002\u6295\u5c04\u548c\u63a5\u6536\u662f\u4e3a\u5bf9\u8c61\u5355\u72ec\u542f\u7528\u7684\u3002</p> <pre><code>object.castShadow = true;     // \u8fd9\u4e2a\u5bf9\u8c61\u5c06\u6295\u5c04\u9634\u5f71\u3002\nobject.receiveShadow = true;  // \u9634\u5f71\u5c06\u663e\u793a\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u3002\n</code></pre> <p>\u5373\u4f7f\u8fd9\u6837\u505a\u4e86\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u9634\u5f71\u663e\u793a\u51fa\u6765\uff0c\u5982\u679c\u663e\u793a\u51fa\u6765\uff0c\u5b83\u4eec\u53ef\u80fd\u770b\u8d77\u6765\u4e5f\u5f88\u7cdf\u7cd5\u3002\u95ee\u9898\u662f\u4f60\u901a\u5e38\u9700\u8981\u914d\u7f6e\u7528\u4e8e\u5236\u4f5c\u9634\u5f71\u6620\u5c04\u7684\u76f8\u673a\u3002</p> <p>\u6bcf\u4e2aDirectionalLight\u6216SpotLight*\u90fd\u6709\u81ea\u5df1\u7684\u9634\u5f71\u76f8\u673a\uff0c\u7528\u4e8e\u4ece\u8be5\u5149\u6e90\u7684\u89c6\u89d2\u521b\u5efa\u9634\u5f71\u6620\u5c04\u3002\uff08DirectionalLight\u6709\u4e00\u4e2a\u540d\u4e3ashadow\u7684\u5c5e\u6027\uff0c\u7c7b\u578b\u4e3aTHREE.DirectionalLightShadow\uff0c\u5b83\u53c8\u6709\u4e00\u4e2a\u540d\u4e3acamera\u7684\u5c5e\u6027\uff0c\u7c7b\u578b\u4e3aTHREE.OrthographicCamera\uff0c\u4fdd\u5b58\u9634\u5f71\u76f8\u673a\u3002\u6240\u4ee5\uff0c\u5b9a\u5411\u5149dl\u7684\u9634\u5f71\u76f8\u673a\u662fdl.shadow.camera\u3002\uff09\u5b9a\u5411\u5149\u7684\u9634\u5f71\u76f8\u673a\u4f7f\u7528\u6b63\u4ea4\u6295\u5f71\u3002\u6b63\u4ea4\u6295\u5f71\u7531\u89c6\u4f53\u79ef\u9650\u5236xmin, xmax, ymin, ymax, near, \u548c far\u914d\u7f6e\uff08\u89c13.3.3\u5c0f\u8282\uff09\u3002\u5bf9\u4e8e\u5b9a\u5411\u5149dl\uff0c\u8fd9\u4e9b\u9650\u5236\u5bf9\u5e94\u4e8e\u5c5e\u6027dl.shadow.camera.left, dl.shadow.camera.right, dl.shadow.camera.bottom, dl.shadow.camera.top, dl.shadow.camera.near, \u548c dl.shadow.camera.far\u3002\u8fd9\u4e9b\u503c\u5728\u9634\u5f71\u76f8\u673a\u7684\u89c6\u56fe\u4e2d\uff1b\u5373\uff0c\u5b83\u4eec\u76f8\u5bf9\u4e8edl.position\u3002\u91cd\u8981\u7684\u662f\u786e\u4fdd\u4f60\u573a\u666f\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\uff0c\u6216\u8005\u81f3\u5c11\u90a3\u4e9b\u6295\u5c04\u9634\u5f71\u7684\u5bf9\u8c61\uff0c\u90fd\u5728\u9634\u5f71\u76f8\u673a\u7684\u89c6\u4f53\u79ef\u5185\u3002\u6b64\u5916\uff0c\u4f60\u4e0d\u5e0c\u671b\u9650\u5236\u592a\u5927\uff1a\u5982\u679c\u573a\u666f\u53ea\u5360\u636e\u4e86\u76f8\u673a\u89c6\u4f53\u79ef\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u9634\u5f71\u6620\u5c04\u5305\u542b\u6709\u7528\u4fe1\u606f\u2014\u2014\u7136\u540e\u7531\u4e8e\u5173\u4e8e\u9634\u5f71\u7684\u4fe1\u606f\u5982\u6b64\u4e4b\u5c11\uff0c\u4f60\u7684\u9634\u5f71\u5c31\u4e0d\u4f1a\u975e\u5e38\u51c6\u786e\u3002\u9ed8\u8ba4\u503c\u5047\u8bbe\u4e86\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u573a\u666f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u76f8\u5bf9\u8f83\u5c0f\u7684\u573a\u666f\uff0c\u4f60\u53ef\u80fd\u4f1a\u8bbe\u7f6e\uff1a</p> <pre><code>dl.shadow.camera.left = -20;\ndl.shadow.camera.right = 20;\ndl.shadow.camera.bottom = -20;\ndl.shadow.camera.top = 20;\ndl.shadow.camera.near = 1;\ndl.shadow.camera.far = 30;\n</code></pre> <p>\u805a\u5149\u706f\u7684\u9634\u5f71\u76f8\u673a\u7c7b\u578b\u4e3aTHREE.PerspectiveCamera\uff0c\u4f7f\u7528\u900f\u89c6\u6295\u5f71\u3002\uff08\u4f7f\u7528\u89c6\u573a\u6709\u9650\u7684\u76f8\u673a\u662f\u4f60\u53ef\u4ee5\u6709\u805a\u5149\u706f\u7684\u9634\u5f71\uff0c\u4f46\u6ca1\u6709\u70b9\u5149\u6e90\u7684\u9634\u5f71\u7684\u539f\u56e0\u3002\uff09\u5bf9\u4e8e\u805a\u5149\u706fsl\uff0c\u9634\u5f71\u76f8\u673a\u7531\u5c5e\u6027sl.shadow.camera.near, sl.shadow.camera.far, \u548c sl.shadow.camera.fov\uff08\u5176\u4e2d\"fov\"\u662f\u5782\u76f4\u89c6\u573a\u89d2\u5ea6\uff0c\u4ee5\u5ea6\u800c\u4e0d\u662f\u5f27\u5ea6\u7ed9\u51fa\uff09\u914d\u7f6e\u3002fov\u7684\u9ed8\u8ba4\u503c\u53ef\u80fd\u6ca1\u95ee\u9898\uff0c\u53ea\u662f\u5982\u679c\u4f60\u6539\u53d8\u4e86\u805a\u5149\u706f\u7684\u622a\u6b62\u89d2\u5ea6\uff0c\u4f60\u5c06\u60f3\u8981\u6539\u53d8fov\u4ee5\u5339\u914d\u3002\u4f46\u4f60\u5e94\u8be5\u786e\u4fdd\u4e3a\u8fd1\u548c\u8fdc\u8bbe\u7f6e\u9002\u5f53\u7684\u503c\uff0c\u4ee5\u5305\u542b\u4f60\u7684\u573a\u666f\u548c\u5c3d\u53ef\u80fd\u5c11\u7684\u989d\u5916\u90e8\u5206\u3002\u540c\u6837\uff0c\u8fd1\u548c\u8fdc\u662f\u4ecesl.position\u7684\u8ddd\u79bb\u3002</p> <p>\u8981\u83b7\u5f97\u66f4\u51c6\u786e\u7684\u9634\u5f71\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u589e\u52a0\u9634\u5f71\u6620\u5c04\u7684\u5927\u5c0f\u3002\u9634\u5f71\u6620\u5c04\u662f\u4e00\u79cd\u7eb9\u7406\u56fe\u50cf\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f512x512\u50cf\u7d20\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u66f4\u5927\u7684\u9634\u5f71\u6620\u5c04\u6765\u63d0\u9ad8\u9634\u5f71\u7684\u7cbe\u5ea6\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5149\u6e90\uff0clight\uff0c\u8bbe\u7f6e\u5c5e\u6027light.shadow.mapSize.width\u548clight.shadow.mapSize.height\u7684\u503c\u3002\u4f8b\u5982\uff0c</p> <pre><code>light.shadow.mapSize.width = 1024;\nlight.shadow.mapSize.height = 1024;\n</code></pre> <p>\u6211\u4e0d\u786e\u5b9a\u8fd9\u91cc\u662f\u5426\u7edd\u5bf9\u9700\u8981\u5e42\u6b21\u65b9\u503c\uff0c\u4f46\u5b83\u4eec\u901a\u5e38\u7528\u4e8e\u7eb9\u7406\u3002</p> <p>One thing that has been missing in our 3D images is shadows. Even if you didn't notice the lack consciously, it made many of the images look wrong. Shadows can add a nice touch of realism to a scene, but OpenGL, including WebGL, cannot generate shadows automatically. There are ways to compute shadows that can be implemented in OpenGL, but they are tricky to use and they are not completely realistic physically. One method, which is called shadow mapping, is implemented in three.js. Shadow mapping in three.js is certainly not trivial to use, but it is easier than trying to do the same thing from scratch.</p> <p>Here is a demo that shows a three.js scene that uses shadow mapping. The lights that cast the shadows can be animated, so you can watch the shadows change as the lights move.</p> <p></p> <p>The basic idea of shadow mapping is fairly straightforward: To tell what parts of a scene are in shadow, you have to look at the scene from the point of view of the light source. Things that are visible from the point of view of the light are illuminated by that light. Things that are not visible from the light are in shadow. (This is ignoring the possibility of transparency and indirect, reflected light, which cannot be handled by shadow mapping.) To implement this idea, place a camera at the light source and take a picture. In fact, you don't need the picture itself. What you need is the depth buffer. After the picture has been rendered, the value stored in the depth buffer for a given pixel contains, essentially, the distance from the light to the object that is visible from the light at that point. That object is illuminated by the light. If an object is at greater depth than the value stored in the depth buffer, then that object is in shadow. The depth buffer is the shadow map. Now, go back to the point of view of the camera, and consider a point on some object as it is rendered from the camera's point of view. Is that point in shadow or not? You just have to transform that point from the camera's viewing coordinates to the light's viewing coordinates and check the depth of the transformed point. If that depth is greater than the corresponding value in the shadow map, then the point is in shadow. Note that if there are several lights, each light casts its own shadows, and you need a shadow map for each light.</p> <p>It is computationally expensive to compute shadow maps and to apply them, and shadows are disabled by default in three.js. To get shadows, you need to do several things. You need to enable shadow computations in the WebGL renderer by saying</p> <pre><code>renderer.shadowMap.enabled = true;\n</code></pre> <p>Only DirectionalLights and SpotLights can cast shadows. To get shadows from a light, even after enabling shadows in the renderer, you have to set the light's castShadow property to true:</p> <pre><code>light.castShadow = true;  // This light will cast shadows.\n</code></pre> <p>Furthermore, shadows have to be enabled for each object that will cast or receive shadows. \"Receiving\" a shadow means that shadows will be visible on that object. Casting and receiving are enabled separately for an object.</p> <pre><code>object.castShadow = true;     // This object will cast shadows.\nobject.receiveShadow = true;  // Shadows will show up on this object.\n</code></pre> <p>Even this might not make any shadows show up, and if they do they might look pretty bad. The problem is that you usually have to configure the cameras that are used to make the shadow maps.</p> <p>Each DirectionalLight or SpotLight has its own shadow camera, which is used to create the shadow map from the point of view of that light. (A DirectionalLight has a property named shadow of type THREE.DirectionalLightShadow, which in turn has a property named camera of type THREE.OrthographicCamera that holds the shadow camera. So, the shadow camera for a directional light dl is dl.shadow.camera.) The shadow camera for a directional light uses an orthographic projection. An orthographic projection is configured by view volume limits xmin, xmax, ymin, ymax, near, and far (see Subsection 3.3.3). For a directional light, dl, these limits correspond to the properties dl.shadow.camera.left, dl.shadow.camera.right, dl.shadow.camera.bottom, dl.shadow.camera.top, dl.shadow.camera.near, and dl.shadow.camera.far. These values are in view coordinates for the shadow camera; that is, they are relative to dl.position. It is important to make sure that all the objects in your scene, or at least those that cast shadows, are within the view volume of the shadow camera. Furthermore, you don't want the limits to be too big: If the scene occupies only a small part of the camera's view volume, then only a small part of the shadow map contains useful information\u2014and then since there is so little information about shadows, your shadows won't be very accurate. The default values assume a very large scene. For a relatively small scene, you might set:</p> <pre><code>dl.shadow.camera.left = -20;\ndl.shadow.camera.right = 20;\ndl.shadow.camera.bottom = -20;\ndl.shadow.camera.top = 20;\ndl.shadow.camera.near = 1;\ndl.shadow.camera.far = 30;\n</code></pre> <p>The shadow camera for a spotlight is of type THREE.PerspectiveCamera and uses a perspective projection. (The use of a camera with a limited view is why you can have shadows from spotlights but not from point lights.) For a spotlight sl, the shadow camera is configured by the properties sl.shadow.camera.near, sl.shadow.camera.far, and sl.shadow.camera.fov (where \"fov\" is the vertical field of view angle, given in degrees rather than radians). The default value for fov is probably OK, except that if you change the spotlight's cutoff angle, you will want to change the fov to match. But you should be sure to set appropriate values for near and far, to include all of your scene and as little extra as is practical. Again, near and far are distances from sl.position.</p> <p>To get more accurate shadows, you might want to increase the size of the shadow map. The shadow map is a kind of texture image which by default is 512 by 512 pixels. You can increase the accuracy of the shadows by using a larger shadow map. To do that for a light, light, set the values of the properties light.shadow.mapSize.width and light.shadow.mapSize.height. For example,</p> <pre><code>light.shadow.mapSize.width = 1024;\nlight.shadow.mapSize.height = 1024;\n</code></pre> <p>I'm not sure whether power-of-two values are absolutely required here, but they are commonly used for textures.</p>"},{"location":"cn/c5/s3/#534-\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u548c\u5929\u7a7a\u76d2","title":"5.3.4 \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u548c\u5929\u7a7a\u76d2","text":"<p>Cubemap Textures and Skyboxes</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u5e76\u67e5\u770b\u4e86\u7b80\u5355\u7684\u573a\u666f\uff0c\u5b83\u4eec\u663e\u793a\u5728\u7eaf\u8272\u80cc\u666f\u4e0a\u3002\u5982\u679c\u6211\u4eec\u80fd\u628a\u573a\u666f\u653e\u5728\u4e00\u4e2a\u201c\u73af\u5883\u201d\u4e2d\uff0c\u6bd4\u5982\u5efa\u7b51\u7269\u5185\u90e8\u3001\u81ea\u7136\u98ce\u5149\u6216\u516c\u5171\u5e7f\u573a\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\u7528\u51e0\u4f55\u57fa\u5143\u6784\u5efa\u8fd9\u6837\u590d\u6742\u7684\u73af\u5883\u7684\u8868\u793a\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7eb9\u7406\u83b7\u5f97\u76f8\u5f53\u597d\u7684\u6548\u679c\u3002\u5728three.js\u4e2d\u4f7f\u7528\u7684\u6280\u672f\u88ab\u79f0\u4e3askybox\u3002Skybox\u662f\u4e00\u4e2a\u5927\u7acb\u65b9\u4f53\u2014\u2014\u5b9e\u9645\u4e0a\u662f\u65e0\u9650\u5927\u2014\u2014\u7acb\u65b9\u4f53\u7684\u6bcf\u4e2a\u9762\u90fd\u5e94\u7528\u4e86\u4e0d\u540c\u7684\u7eb9\u7406\u3002\u8fd9\u4e9b\u7eb9\u7406\u662f\u67d0\u4e9b\u73af\u5883\u7684\u56fe\u50cf\u3002\u5bf9\u4e8e\u7acb\u65b9\u4f53\u5185\u90e8\u7684\u89c2\u5bdf\u8005\u6765\u8bf4\uff0c\u7acb\u65b9\u4f53\u4e0a\u7684\u516d\u5f20\u7eb9\u7406\u56fe\u50cf\u62fc\u5408\u5728\u4e00\u8d77\uff0c\u63d0\u4f9b\u4e86\u6bcf\u4e2a\u65b9\u5411\u4e0a\u73af\u5883\u7684\u5b8c\u6574\u89c6\u56fe\u3002\u8fd9\u516d\u5f20\u7eb9\u7406\u56fe\u50cf\u4e00\u8d77\u6784\u6210\u4e86\u6240\u8c13\u7684cubemap texture\u3002\u8fd9\u4e9b\u56fe\u50cf\u5fc5\u987b\u6cbf\u7740\u7acb\u65b9\u4f53\u7684\u8fb9\u7f18\u5339\u914d\uff0c\u5f62\u6210\u4e00\u4e2a\u65e0\u7f1d\u7684\u73af\u5883\u89c6\u56fe\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7\u5728\u516d\u4e2a\u65b9\u5411\uff1a\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u3001\u524d\u3001\u540e\u62cd\u6444\u73af\u5883\u7684\u516d\u5f20\u7167\u7247\u6765\u5236\u4f5c\u5b9e\u9645\u7269\u7406\u73af\u5883\u7684\u7acb\u65b9\u56fe\u3002\uff08\u66f4\u73b0\u5b9e\u7684\u505a\u6cd5\u662f\u62cd\u6444\u8db3\u591f\u591a\u7684\u7167\u7247\u6765\u8986\u76d6\u6240\u6709\u65b9\u5411\uff0c\u6709\u91cd\u53e0\uff0c\u7136\u540e\u4f7f\u7528\u8f6f\u4ef6\u5c06\u56fe\u50cf\u201c\u62fc\u63a5\u201d\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u7acb\u65b9\u56fe\u3002\uff09\u8fd9\u516d\u4e2a\u65b9\u5411\u6309\u4e0e\u5750\u6807\u8f74\u7684\u5173\u7cfb\u79f0\u4e3a\uff1a\u6b63x\u3001\u8d1fx\u3001\u6b63y\u3001\u8d1fy\u3001\u6b63z\u548c\u8d1fz\uff0c\u5f53\u4f60\u6307\u5b9a\u7acb\u65b9\u56fe\u65f6\uff0c\u56fe\u50cf\u5fc5\u987b\u6309\u987a\u5e8f\u5217\u51fa\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50\u3002\u7b2c\u4e00\u5f20\u56fe\u7247\u663e\u793a\u4e86\u5e76\u6392\u653e\u7f6e\u7684\u516d\u5f20\u7acb\u65b9\u56fe\u56fe\u50cf\u3002\u6b63y\u56fe\u50cf\u5728\u9876\u90e8\uff0c\u8d1fy\u56fe\u50cf\u5728\u5e95\u90e8\u3002\u4e2d\u95f4\u662f\u8d1fx\u3001\u6b63z\u3001\u6b63x\u548c\u8d1fz\u56fe\u50cf\u6392\u6210\u4e00\u884c\u3002\u7b2c\u4e8c\u5f20\u56fe\u7247\u663e\u793a\u4e86\u7528\u4e8e\u5bf9\u7acb\u65b9\u4f53\u8fdb\u884c\u7eb9\u7406\u5904\u7406\u7684\u56fe\u50cf\uff0c\u4ece\u5916\u90e8\u67e5\u770b\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u56fe\u50cf\u5982\u4f55\u6cbf\u7740\u7acb\u65b9\u4f53\u7684\u8fb9\u7f18\u5339\u914d\uff1a</p> <p></p> <p>\uff08\u8fd9\u5f20\u7acb\u65b9\u56fe\u548c\u672c\u8282\u4e2d\u4f7f\u7528\u7684\u5176\u4ed6\u7acb\u65b9\u56fe\u662f\u7531Emil Persson\u5236\u4f5c\u7684\uff0c\u4ed6\u5728http://www.humus.name/index.php?page=Textures \u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7acb\u65b9\u56fe\u4e0b\u8f7d\uff0c\u9075\u5faa\u521b\u610f\u5171\u4eab\u8bb8\u53ef\u3002\uff09</p> <p>\u5bf9\u4e8eskybox\uff0c\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u5c06\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u7acb\u65b9\u4f53\u3002\u76f8\u673a\u3001\u706f\u5149\u548c\u4efb\u4f55\u8981\u6210\u4e3a\u573a\u666f\u4e00\u90e8\u5206\u7684\u5bf9\u8c61\u90fd\u5728\u7acb\u65b9\u4f53\u5185\u3002\u53ef\u4ee5\u624b\u5de5\u6784\u5efa\u4e00\u4e2askybox\u3002</p> <p>\u7136\u800c\uff0cThree.js\u975e\u5e38\u5bb9\u6613\u5730\u4f7f\u7528skybox\u4f5c\u4e3a\u573a\u666f\u7684\u80cc\u666f\u3002\u5b83\u6709\u7c7bTHREE.CubeTexture\u6765\u8868\u793a\u7acb\u65b9\u56fe\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06CubeTexture\u8d4b\u503c\u4e3a\u5c5e\u6027scene.background\u7684\u503c\u6765\u7b80\u5355\u5730\u5c06\u4f60\u7684scene\u5c01\u88c5\u5728\u4e00\u4e2askybox\u4e2d\u3002\uff08\u8be5\u5c5e\u6027\u7684\u503c\u4e5f\u53ef\u4ee5\u662f\u666e\u901a\u7684Texture\u6216Color\u3002\uff09</p> <p>CubeTexture\u53ef\u4ee5\u901a\u8fc7CubeTextureLoader\u521b\u5efa\uff0c\u5b83\u53ef\u4ee5\u52a0\u8f7d\u6784\u6210\u7acb\u65b9\u56fe\u7684\u516d\u5f20\u56fe\u50cf\u3002\u52a0\u8f7d\u5668\u6709\u4e00\u4e2a\u540d\u4e3aload()\u7684\u65b9\u6cd5\uff0c\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0eTextureLoader\u7684load()\u65b9\u6cd5\u76f8\u540c\uff08\u89c15.2.3\u5c0f\u8282\uff09\uff0c\u9664\u4e86\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5305\u542b\u516d\u5f20\u7acb\u65b9\u56fe\u56fe\u50cfURL\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u3002\u4f8b\u5982\uff1a</p> <pre><code>let textureURLs = [  // \u7acb\u65b9\u56fe\u516d\u4e2a\u9762\u7684URL\n        \"cubemap-textures/park/posx.jpg\",   // \u6ce8\u610f\uff1a\u56fe\u50cf\u5217\u51fa\u7684\u987a\u5e8f\n        \"cubemap-textures/park/negx.jpg\",   // \u5f88\u91cd\u8981\uff01\n        \"cubemap-textures/park/posy.jpg\",\n        \"cubemap-textures/park/negy.jpg\",\n        \"cubemap-textures/park/posz.jpg\",\n        \"cubemap-textures/park/negz.jpg\"\n];\nloader = new THREE.CubeTextureLoader();\ncubeTexture = loader.load( textureURLs, onLoad, undefined, onError );\n</code></pre> <p>\u8fd9\u91cc\uff0conLoad\u662f\u4e00\u4e2a\u5728\u7eb9\u7406\u52a0\u8f7d\u5b8c\u6210\u540e\u5c06\u88ab\u8c03\u7528\u7684\u51fd\u6570\u3002\u8be5\u51fd\u6570\u53ef\u4ee5\uff0c\u4f8b\u5982\uff0c\u5c06scene.background\u8bbe\u7f6e\u4e3acubeTexture\uff0c\u5e76\u4f7f\u7528\u65b0\u7684\u80cc\u666f\u91cd\u65b0\u6e32\u67d3\u573a\u666f\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570onError\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c\u65e0\u6cd5\u52a0\u8f7d\u7eb9\u7406\uff0c\u5c06\u8c03\u7528\u8be5\u51fd\u6570\u3002\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fthreejs/skybox.html\u663e\u793a\u4e86\u4e24\u4e2aWebGL\u573a\u666f\u3002\u7b2c\u4e00\u4e2a\u573a\u666f\u663e\u793a\u4e86\u4e00\u4e2a\u7acb\u65b9\u4f53\uff0c\u7acb\u65b9\u56fe\u7684\u516d\u5f20\u56fe\u50cf\u4f5c\u4e3a\u666e\u901a\u7eb9\u7406\u5e94\u7528\u5230\u7acb\u65b9\u4f53\u7684\u516d\u4e2a\u9762\u4e0a\u3002\u7b2c\u4e8c\u4e2a\u573a\u666f\u4f7f\u7528\u76f8\u540c\u7684\u7acb\u65b9\u56fe\u4f5c\u4e3askybox\u3002\u5982\u679c\u4f60\u65cb\u8f6c\u7b2c\u4e8c\u4e2a\u573a\u666f\u7684\u89c6\u56fe\uff0c\u4f60\u53ef\u4ee5\u67e5\u770bskybox\u7684\u6240\u6709\u90e8\u5206\uff0c\u5e76\u770b\u5230\u5b83\u5982\u4f55\u5f62\u6210\u4e00\u4e2a\u65e0\u7f1d\u7684\u73af\u5883\uff0c\u5b8c\u5168\u5305\u56f4\u4e86\u573a\u666f\u3002</p> <p>We have created and viewed simple scenes, shown on a solid-colored background. It would be nice to put our scenes in an \"environment\" such as the interior of a building, a nature scene, or a public square. It's not practical to build representations of such complex environments out of geometric primitives, but we can get a reasonably good effect using textures. The technique that is used in three.js is called a skybox. A skybox is a large cube \u2014 effectively, infinitely large \u2014 where a different texture is applied to each face of the cube. The textures are images of some environment. For a viewer inside the cube, the six texture images on the cube fit together to provide a complete view of the environment in every direction. The six texture images together make up what is called a cubemap texture. The images must match up along the edges of the cube to form a seamless view of the environment.</p> <p>A cube map of an actual physical environment can be made by taking six pictures of the environment in six directions: left, right, up, down, forward, and back. (More realistically, it is made by taking enough photographs to cover all directions, with overlaps, and then using software to \"stitch\" the images together into a complete cube map.) The six directions are referred to by their relation to the coordinate axes as: positive x, negative x, positive y, negative y, positive z, and negative z, and the images must be listed in that order when you specify the cube map. Here is an example. The first picture shows the six images of a cube map laid out next to each other. The positive y image is at the top, the negative y image is at the bottom. In between are the negative x, positive z, positive x, and negative z images laid out in a row. The second picture shows the images used to texture a cube, viewed here from the outside. You can see how the images match up along the edges of the cube:</p> <p></p> <p>(This cube map, and others used in this section, are by Emil Persson, who has made a large number of cube maps available for download at http://www.humus.name/index.php?page=Textures under a creative commons license.)</p> <p>For a skybox, conceptually, a very large cube would be used. The camera, lights, and any objects that are to be part of the scene would be inside the cube. It is possible to construct a skybox by hand in just this way.</p> <p>However, Three.js makes it very easy to use a skybox as the background for a scene. It has the class THREE.CubeTexture to represent cube maps, and you can enclose your scene in a skybox simply by assigning a CubeTexture as the value of the property scene.background. (The value of that property could also be a normal Texture or a Color.)</p> <p>A CubeTexture can be created by a CubeTextureLoader, which can load the six images that make up the cube map. The loader has a method named load() that works in the same way as the load() method of a TextureLoader (Subsection 5.2.3), except that the first parameter to the method is an array of six strings giving the URLs of the six images for the cube map. For example:</p> <pre><code>let textureURLs = [  // URLs of the six faces of the cube map\n        \"cubemap-textures/park/posx.jpg\",   // Note:  The order in which\n        \"cubemap-textures/park/negx.jpg\",   //   the images are listed is\n        \"cubemap-textures/park/posy.jpg\",   //   important!\n        \"cubemap-textures/park/negy.jpg\",  \n        \"cubemap-textures/park/posz.jpg\",\n        \"cubemap-textures/park/negz.jpg\"\n];\nloader = new THREE.CubeTextureLoader();\ncubeTexture = loader.load( textureURLs, onLoad, undefined, onError );\n</code></pre> <p>Here, onLoad is a function that will be called after the texture has finished loading. The function could, for example, set scene.background equal to cubeTexture and re-render the scene with the new background. The last parameter onError is a function that will be called if the texture cannot be loaded. Only the first parameter is required.</p> <p>The sample program threejs/skybox.html shows two WebGL scenes. The first scene shows a cube with the six images from a cube map applied as normal textures to the six faces of a cube. The second scene uses the same cube map as a skybox. If you rotate the view of the second scene, you can look at all parts of the skybox and see how it forms a seamless environment that completely encloses the scene.</p>"},{"location":"cn/c5/s3/#535-\u53cd\u5c04\u548c\u6298\u5c04","title":"5.3.5 \u53cd\u5c04\u548c\u6298\u5c04","text":"<p>Reflection and Refraction</p> \u4e2d\u6587\u82f1\u6587 <p>\u53cd\u5c04\u9762\u4e0d\u5e94\u8be5\u4ec5\u4ec5\u53cd\u5c04\u5149\u7ebf\u2014\u2014\u5b83\u5e94\u8be5\u53cd\u5c04\u5176\u73af\u5883\u3002Three.js\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u6620\u5c04\u6765\u6a21\u62df\u53cd\u5c04\u3002\uff08\u73af\u5883\u6620\u5c04\u4e5f\u79f0\u4e3a\u201c\u53cd\u5c04\u6620\u5c04\u3002\u201d\uff09\u73af\u5883\u6620\u5c04\u4f7f\u7528\u7acb\u65b9\u4f53\u8d34\u56fe\u3002\u7ed9\u5b9a\u8868\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u4ece\u76f8\u673a\u4f4d\u7f6e\u5411\u8be5\u70b9\u6295\u5c04\u4e00\u6761\u5c04\u7ebf\uff0c\u7136\u540e\u5c04\u7ebf\u4ece\u8868\u9762\u53cd\u5c04\u3002\u53cd\u5c04\u5c04\u7ebf\u51fb\u4e2d\u7acb\u65b9\u4f53\u7684\u70b9\u51b3\u5b9a\u4e86\u5e94\u8be5\u5c06\u7eb9\u7406\u4e2d\u7684\u54ea\u4e2a\u70b9\u6620\u5c04\u5230\u8868\u9762\u4e0a\u7684\u70b9\u3002\u5bf9\u4e8e\u5b8c\u7f8e\u955c\u9762\u53cd\u5c04\u7684\u6a21\u62df\uff0c\u8868\u9762\u70b9\u7b80\u5355\u5730\u7528\u6765\u81ea\u7eb9\u7406\u7684\u989c\u8272\u7ed8\u5236\u3002\u6ce8\u610f\uff0c\u8868\u9762\u5e76\u4e0d\u4f1a\u5b57\u9762\u610f\u4e49\u4e0a\u53cd\u5c04\u573a\u666f\u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u3002\u5b83\u53cd\u5c04\u7684\u662f\u7acb\u65b9\u4f53\u8d34\u56fe\u4e2d\u7684\u5185\u5bb9\u3002\u7136\u800c\uff0c\u5982\u679c\u76f8\u540c\u7684\u7acb\u65b9\u4f53\u8d34\u56fe\u5728skybox\u4e2d\u4f7f\u7528\uff0c\u5e76\u4e14skybox\u662f\u573a\u666f\u4e2d\u552f\u4e00\u7684\u5176\u4ed6\u5bf9\u8c61\uff0c\u90a3\u4e48\u770b\u8d77\u6765\u8868\u9762\u5c31\u50cf\u662f\u4e00\u4e2a\u5b8c\u7f8e\u53cd\u5c04\u5176\u73af\u5883\u7684\u955c\u5b50\u3002</p> <p>\u8fd9\u79cd\u7c7b\u578b\u7684\u53cd\u5c04\u5728three.js\u4e2d\u975e\u5e38\u5bb9\u6613\u5b9e\u73b0\u3002\u4f60\u53ea\u9700\u8981\u5236\u4f5c\u4e00\u4e2a\u7f51\u683c\u6750\u8d28\uff0c\u5e76\u5c06\u5176envMap\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u7acb\u65b9\u4f53\u8d34\u56fe\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u5982\u679ccubeTexture\u662f\u4f7f\u7528THREE.CubeTextureLoader\u83b7\u5f97\u7684\u7eb9\u7406\u5bf9\u8c61\uff0c\u5c31\u50cf\u4e0a\u9762\u7684skybox\u793a\u4f8b\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5236\u4f5c\u4e00\u4e2a\u5b8c\u7f8e\u53cd\u5c04\u7eb9\u7406\u7684\u7403\u4f53\uff1a</p> <pre><code>let geometry = new THREE.SphereGeometry(1,32,16);\nlet material = new THREE.MeshBasicMaterial( { \n        color: \"white\",  // \u989c\u8272\u5c06\u4e58\u4ee5\u73af\u5883\u8d34\u56fe\u3002\n        envMap: cubeTexture  // \u7528\u4f5c\u73af\u5883\u8d34\u56fe\u7684CubeTexture\u3002\n    } );\nlet mirrorSphere = new THREE.Mesh( geometry, material );\n</code></pre> <p>\u4e3a\u4e86\u4f7f\u6548\u679c\u770b\u8d77\u6765\u597d\uff0c\u4f60\u4f1a\u60f3\u4f7f\u7528\u4e0e\u573a\u666f\u80cc\u666f\u76f8\u540c\u7684\u7eb9\u7406\u3002\u6ce8\u610f\uff0c\u573a\u666f\u4e2d\u4e0d\u9700\u8981\u7167\u660e\uff0c\u56e0\u4e3a\u7403\u4f53\u4f7f\u7528MeshBasicMaterial\u3002\u5728\u7403\u4f53\u4e0a\u770b\u5230\u7684\u989c\u8272\u5b8c\u5168\u6765\u81ea\u73af\u5883\u8d34\u56fe\u548c\u7403\u4f53\u6750\u8d28\u7684\u57fa\u672c\u989c\u8272\u3002\u73af\u5883\u8d34\u56fe\u989c\u8272\u4e58\u4ee5\u57fa\u672c\u989c\u8272\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6750\u8d28\u7684\u57fa\u672c\u989c\u8272\u662f\u767d\u8272\u7684\uff0c\u7403\u4f53\u7684\u989c\u8272\u4e0e\u7eb9\u7406\u4e2d\u7684\u989c\u8272\u5b8c\u5168\u76f8\u540c\u3002\u4f7f\u7528\u4e0d\u540c\u7684\u57fa\u7840\u989c\u8272\uff0c\u73af\u5883\u8d34\u56fe\u7eb9\u7406\u5c06\u88ab\u8be5\u989c\u8272\u201c\u67d3\u8272\u201d\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u7ed9\u7403\u4f53\u5e94\u7528\u4e00\u4e2a\u5e38\u89c4\u7684\u7eb9\u7406\u6620\u5c04\uff0c\u4ee5\u4ee3\u66ff\u989c\u8272\uff0c\u4ee5\u4fbfskybox\u7684\u53cd\u5c04\u4e0e\u7eb9\u7406\u7ed3\u5408\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fthreejs/reflection.html\u6f14\u793a\u4e86\u73af\u5883\u6620\u5c04\u3002\u5b83\u53ef\u4ee5\u663e\u793a\u5404\u79cd\u73af\u5883\u6620\u5c04\u7684\u5bf9\u8c61\uff0c\u5177\u6709\u5404\u79cdskybox\u7eb9\u7406\uff0c\u5e76\u4e14\u5b83\u6709\u51e0\u4e2a\u9009\u9879\u7528\u4e8e\u5bf9\u8c61\u7684\u57fa\u672c\u989c\u8272\u3002\u8fd9\u91cc\u6709\u4e24\u4e2a\u6765\u81ea\u8be5\u7a0b\u5e8f\u7684\u56fe\u50cf\u3002\u5de6\u8fb9\u7684\u4e00\u4e2a\u663e\u793a\u4e86\u4e00\u4e2a\u767d\u8272\u57fa\u7840\u989c\u8272\u7684\u53cd\u5c04\u7bad\u5934\u5f62\u72b6\u3002\u53f3\u8fb9\u7684\u5bf9\u8c61\u662f\u4e00\u5339\u9a6c\u7684\u6a21\u578b\uff08\u6765\u81eathree.js\u4e0b\u8f7d\uff09\uff0c\u5176\u57fa\u7840\u989c\u8272\u662f\u7c89\u8272\uff1a</p> <p></p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u4e0e\u793a\u4f8b\u7a0b\u5e8f\u975e\u5e38\u76f8\u4f3c\u7684\u6f14\u793a\u3002\u5728\u6f14\u793a\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u53ea\u67e5\u770bskybox\u6216\u53ea\u67e5\u770b\u53cd\u5c04\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5bf9\u8c61\u4f3c\u4e4e\u53ea\u53cd\u5c04\u5176\u5b9e\u9645\u73af\u5883\u3002\u4f7f\u7528\u9f20\u6807\u65cb\u8f6c\u573a\u666f\uff0c\u4ee5\u67e5\u770b\u968f\u7740\u5bf9\u8c61\u65b9\u5411\u53d8\u5316\u53cd\u5c04\u5982\u4f55\u53d8\u5316\u3002</p> <p></p> <p>Three.js\u4e5f\u53ef\u4ee5\u8fdb\u884c\u6298\u5c04\u3002\u6298\u5c04\u53d1\u751f\u5728\u5149\u7ebf\u901a\u8fc7\u900f\u660e\u6216\u534a\u900f\u660e\u7269\u4f53\u65f6\u3002\u5f53\u5149\u7ebf\u5728\u7269\u4f53\u5185\u90e8\u548c\u5916\u90e8\u4e4b\u95f4\u901a\u8fc7\u65f6\uff0c\u5149\u7ebf\u4f1a\u88ab\u5f2f\u66f2\u3002\u5f2f\u66f2\u7684\u7a0b\u5ea6\u53d6\u51b3\u4e8e\u6240\u8c13\u7269\u4f53\u5916\u90e8\u548c\u5185\u90e8\u6750\u6599\u7684\u201c\u6298\u5c04\u7387\u201d\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5b83\u53d6\u51b3\u4e8e\u4e24\u4e2a\u6298\u5c04\u7387\u4e4b\u95f4\u7684\u6bd4\u7387\u3002\u5373\u4f7f\u662f\u5b8c\u5168\u900f\u660e\u7684\u7269\u4f53\u4e5f\u4f1a\u56e0\u4e3a\u8fd9\u79cd\u5f2f\u66f2\u5f15\u8d77\u7684\u7578\u53d8\u800c\u53ef\u89c1\uff08\u9664\u975e\u6bd4\u7387\u662f1\uff0c\u8fd9\u610f\u5473\u7740\u5149\u7ebf\u6839\u672c\u6ca1\u6709\u5f2f\u66f2\uff09\u3002</p> <p>\u5728three.js\u4e2d\uff0c\u6298\u5c04\u4f7f\u7528\u73af\u5883\u6620\u5c04\u6765\u5b9e\u73b0\u3002\u4e0e\u53cd\u5c04\u4e00\u6837\uff0c\u6298\u5c04\u7269\u4f53\u4e0d\u4f1a\u663e\u793a\u5176\u5b9e\u9645\u73af\u5883\uff1b\u5b83\u6298\u5c04\u7528\u4f5c\u73af\u5883\u6620\u5c04\u7684\u7acb\u65b9\u4f53\u8d34\u56fe\u3002\u5bf9\u4e8e\u6298\u5c04\uff0c\u5fc5\u987b\u4e3a\u73af\u5883\u8d34\u56fe\u7eb9\u7406\u4f7f\u7528\u7279\u6b8a\u7684\u201c\u6620\u5c04\u201d\u3002\u7eb9\u7406\u7684mapping\u5c5e\u6027\u544a\u8bc9\u5982\u4f55\u5c06\u8be5\u7eb9\u7406\u6620\u5c04\u5230\u8868\u9762\u4e0a\u3002\u5bf9\u4e8e\u7528\u4e8e\u6298\u5c04\u7684\u7acb\u65b9\u4f53\u8d34\u56fe\uff0c\u5b83\u5e94\u8be5\u8bbe\u7f6e\u4e3aTHREE.CubeRefractionMapping\u3002\uff08\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u8fd9\u4e2a\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u9002\u7528\u4e8e\u53cd\u5c04\u800c\u4e0d\u662f\u6298\u5c04\u3002\uff09\u4ee5\u4e0b\u662f\u4e00\u4e2a\u52a0\u8f7d\u7acb\u65b9\u4f53\u8d34\u56fe\u5e76\u4e3a\u5176\u6298\u5c04\u4f7f\u7528\u8bbe\u7f6e\u6620\u5c04\u5c5e\u6027\u7684\u793a\u4f8b\uff1a</p> <pre><code>cubeTexture = new THREE.CubeTextureLoader().load( textureURLs );\ncubeTexture.mapping = THREE.CubeRefractionMapping;\n</code></pre> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u5e94\u7528\u4e8e\u6298\u5c04\u7269\u4f53\u7684\u6750\u8d28\u7684refractionRatio\u5c5e\u6027\u8fd8\u5e94\u8be5\u8bbe\u7f6e\u3002\u8be5\u503c\u662f\u4e00\u4e2a\u4ecb\u4e8e0\u548c1\u4e4b\u95f4\u7684\u6570\u5b57\uff1b\u8d8a\u63a5\u8fd11\uff0c\u5149\u7ebf\u7684\u5f2f\u66f2\u5c31\u8d8a\u5c11\u3002\u9ed8\u8ba4\u503c\u975e\u5e38\u63a5\u8fd11\uff0c\u4ee5\u81f3\u4e8e\u7269\u4f53\u51e0\u4e4e\u770b\u4e0d\u89c1\u3002\u8fd9\u4e2a\u793a\u4f8b\u4f7f\u75280.6\u7684\u503c\uff1a</p> <pre><code>let material = new THREE.MeshBasicMaterial( { \n        color: \"white\",\n        envMap: cubeTexture,\n        refractionRatio: 0.6\n    } );\n</code></pre> <p>\u8fd9\u4f1a\u4ea7\u751f\u5f3a\u70c8\u7684\u6298\u5c04\u6548\u679c\u3002\u5982\u679c\u4f60\u5c06\u6750\u8d28\u989c\u8272\u8bbe\u7f6e\u4e3a\u767d\u8272\u4ee5\u5916\u7684\u5176\u4ed6\u989c\u8272\uff0c\u4f60\u5c06\u5f97\u5230\u770b\u8d77\u6765\u50cf\u6709\u8272\u73bb\u7483\u7684\u4e1c\u897f\u3002\u53e6\u4e00\u4e2a\u53ef\u80fd\u8bbe\u7f6e\u7684\u5c5e\u6027\u662freflectivity\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6298\u5c04\u7269\u4f53\uff0c\u8fd9\u4e2a\u503c\u544a\u8bc9\u6709\u591a\u5c11\u5149\u7ebf\u901a\u8fc7\u7269\u4f53\u4f20\u8f93\u800c\u4e0d\u662f\u4ece\u5176\u8868\u9762\u53cd\u5c04\u3002\u9ed8\u8ba4\u503c1\u4f7f\u5149\u7ebf\u4f20\u8f93\u8fbe\u5230100%\uff1b\u8f83\u5c0f\u7684\u503c\u4f7f\u7269\u4f53\u770b\u8d77\u6765\u50cf\u662f\u7528\u201c\u591a\u4e91\u201d\u7684\u73bb\u7483\u5236\u6210\u7684\uff0c\u8fd9\u79cd\u73bb\u7483\u4f1a\u963b\u6321\u4e00\u4e9b\u5149\u7ebf\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fthreejs/refraction.html\u662freflection.html\u7684\u526f\u672c\uff0c\u5df2\u4fee\u6539\u4e3a\u8fdb\u884c\u6298\u5c04\u800c\u4e0d\u662f\u53cd\u5c04\u3002\u7269\u4f53\u770b\u8d77\u6765\u50cf\u662f\u7528\u73bb\u7483\u800c\u4e0d\u662f\u955c\u5b50\u5236\u6210\u7684\u3002\u8be5\u7a0b\u5e8f\u6709\u4e00\u4e2a\u590d\u9009\u6846\uff0c\u4f7f\u73bb\u7483\u770b\u8d77\u6765\u591a\u4e91\uff0c\u8fd8\u6709\u4e00\u4e2a\u5c06refractionRatio\u4ece0.6\u589e\u52a0\u52300.9\u7684\u590d\u9009\u6846\u3002\u4ee5\u4e0b\u56fe\u50cf\u6765\u81ea\u8be5\u7a0b\u5e8f\u3002\u7b2c\u4e00\u5f20\u56fe\u50cf\u663e\u793a\u4e86\u4e00\u4e2a\u5b8c\u5168\u900f\u660e\u7684\u7bad\u5934\uff0c\u7b2c\u4e8c\u5f20\u662f\u4e00\u4e2a\u591a\u4e91\u7684\u7403\u4f53\u3002\u6ce8\u610f\u7403\u4f53\u5982\u4f55\u663e\u793a\u5b83\u80cc\u540e\u7684\u7269\u4f53\u7684\u5012\u50cf\uff1a</p> <p></p> <p>\u5728\u6211\u7684\u53cd\u5c04\u548c\u6298\u5c04\u793a\u4f8b\u4e2d\uff0c\u73af\u5883\u662f\u4e00\u4e2askybox\uff0c\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u7269\u4f53\u53cd\u5c04\u6216\u6298\u5c04\u8be5\u73af\u5883\u3002\u4f46\u662f\uff0c\u5982\u679c\u4e00\u4e2a\u573a\u666f\u5305\u62ec\u591a\u4e2a\u5bf9\u8c61\u600e\u4e48\u529e\uff1f\u7269\u4f53\u4e0d\u4f1a\u51fa\u73b0\u5728\u7acb\u65b9\u4f53\u8d34\u56fe\u4e2d\u3002\u5982\u679c\u4f60\u5728\u7269\u4f53\u4e0a\u4f7f\u7528\u7acb\u65b9\u4f53\u8d34\u56fe\uff0c\u5b83\u4eec\u5c31\u4e0d\u4f1a\u76f8\u4e92\u53cd\u5c04\u6216\u6298\u5c04\u3002WebGL\u4e2d\u8fd9\u4e2a\u95ee\u9898\u6ca1\u6709\u5b8c\u6574\u7684\u89e3\u51b3\u65b9\u6848\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5236\u4f5c\u5305\u62ec\u8fd9\u4e9b\u7269\u4f53\u7684\u73af\u5883\u8d34\u56fe\u6765\u4f7f\u4e00\u4e2a\u7269\u4f53\u53cd\u5c04\u6216\u6298\u5c04\u5176\u4ed6\u7269\u4f53\u3002\u5982\u679c\u7269\u4f53\u5728\u79fb\u52a8\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5fc5\u987b\u4e3a\u6bcf\u4e00\u5e27\u5236\u4f5c\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u8d34\u56fe\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u73af\u5883\u8d34\u56fe\u53ef\u4ee5\u901a\u8fc7\u4ece\u4e0d\u540c\u65b9\u5411\u62cd\u6444\u73af\u5883\u7684\u516d\u5f20\u7167\u7247\u6765\u5236\u4f5c\u3002Three.js\u6709\u4e00\u79cd\u53ef\u4ee5\u8fd9\u6837\u505a\u7684\u76f8\u673a\uff0cTHREE.CubeCamera\u3002\u6211\u4e0d\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u4f46CubeCamera\u53ef\u4ee5\u4ece\u7ed9\u5b9a\u7684\u89c6\u89d2\u62cd\u6444\u573a\u666f\u7684\u516d\u91cd\u56fe\u50cf\uff0c\u5e76\u4ece\u8fd9\u4e9b\u56fe\u50cf\u4e2d\u5236\u4f5c\u7acb\u65b9\u4f53\u8d34\u56fe\u3002\u8981\u4f7f\u7528\u76f8\u673a\uff0c\u4f60\u5fc5\u987b\u5c06\u5176\u653e\u7f6e\u5728\u7269\u4f53\u7684\u4f4d\u7f6e\u2014\u2014\u5e76\u4f7f\u7269\u4f53\u770b\u4e0d\u89c1\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u4f1a\u51fa\u73b0\u5728\u56fe\u7247\u4e2d\u3002\u62cd\u7167\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u73af\u5883\u8d34\u56fe\u5e94\u7528\u4e8e\u7269\u4f53\u3002\u5bf9\u4e8e\u52a8\u753b\u573a\u666f\uff0c\u4f60\u5fc5\u987b\u5728\u6bcf\u4e00\u5e27\u90fd\u8fd9\u6837\u505a\uff0c\u4f60\u9700\u8981\u4e3a\u573a\u666f\u4e2d\u7684\u6bcf\u4e2a\u53cd\u5c04/\u6298\u5c04\u7269\u4f53\u90fd\u8fd9\u6837\u505a\u3002\u663e\u7136\uff0c\u8fd9\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u8ba1\u7b97\u5bc6\u96c6\uff01\u5e76\u4e14\u7ed3\u679c\u4ecd\u7136\u4e0d\u662f\u5b8c\u7f8e\u7684\u3002\u9996\u5148\uff0c\u4f60\u4e0d\u4f1a\u770b\u5230\u591a\u91cd\u53cd\u5c04\uff0c\u7269\u4f53\u5f7c\u6b64\u4e4b\u95f4\u6765\u56de\u53cd\u5c04\u51e0\u6b21\u3002\u4e3a\u6b64\uff0c\u4f60\u9700\u8981\u4f7f\u7528OpenGL\u4f7f\u7528\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u6e32\u67d3\u3002\u6211\u4eec\u5c06\u57287.4.4\u5c0f\u8282\u4e2d\u56de\u5230\u52a8\u6001\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u8bdd\u9898\uff0c\u5e76\u5728\u7b2c8\u7ae0\u4e2d\u56de\u5230\u66ff\u4ee3\u6e32\u67d3\u6280\u672f\u7684\u8bdd\u9898\u3002</p> <p>A reflective surface shouldn't just reflect light\u2014it should reflect its environment. Three.js can use environment mapping to simulate reflection. (Environment mapping is also called \"reflection mapping.\") Environment mapping uses a cube map texture. Given a point on a surface, a ray is cast from the camera position to that point, and then the ray is reflected off the surface. The point where the reflected ray hits the cube determines which point from the texture should be mapped to the point on the surface. For a simulation of perfect, mirror-like reflection, the surface point is simply painted with the color from the texture. Note that the surface does not literally reflect other objects in the scene. It reflects the contents of the cube map texture. However, if the same cube map texture is used on a skybox, and if the skybox is the only other object in the scene, then it will look like the surface is a mirror that perfectly reflects its environment.</p> <p>This type of reflection is very easy to do in three.js. You only need to make a mesh material and set its envMap property equal to the cubemap texture object. For example, if cubeTexture is the texture object obtained using a THREE.CubeTextureLoader, as in the skybox example above, we can make a sphere that perfectly reflects the texture by saying:</p> <pre><code>let geometry = new THREE.SphereGeometry(1,32,16);\nlet material = new THREE.MeshBasicMaterial( { \n        color: \"white\",  // Color will be multiplied by the environment map. \n        envMap: cubeTexture  // CubeTexture to be used as an environment map.\n    } );\nlet mirrorSphere = new THREE.Mesh( geometry, material );\n</code></pre> <p>For the effect to look good, you would want to use the same texture as the scene background. Note that no lighting would be necessary in the scene, since the sphere uses a MeshBasicMaterial. The colors seen on the sphere come entirely from the environment map and the basic color of the sphere material. The environment map color is multiplied by the basic color. In this example, the basic color of the material is white, and the sphere color is exactly equal to the color from the texture. With a different base color, the environment map texture would be \"tinted\" with that color. You could even apply a regular texture map to the sphere, to be used in place of the color, so that the reflection of the skybox would be combined with the texture.</p> <p>The sample program threejs/reflection.html demonstrates environment mapping. It can show a variety of environment-mapped objects, with a variety of skybox textures, and it has several options for the base color of the object. Here are two images from that program. The one on the left shows a reflective arrowhead shape with a white base color. On the right, the object is a model of a horse (taken from the three.js download) whose base color is pink:</p> <p></p> <p>Here is a demo that is very similar to the sample program. In the demo, you can choose to view just the skybox or just the reflective object, and you can see that the object only seems to be reflecting its actual environment. Use your mouse to rotate the scene to see how the reflection changes as the orientation of the object changes.</p> <p></p> <p>Three.js can also do refraction. Refraction occurs when light passes through a transparent or translucent object. A ray of light will be bent as it passes between the inside of the object and the outside. The amount of bending depends on the so-called \"indices of refraction\" of the material outside and the material inside the object. More exactly, it depends on the ratio between the two indices. Even a perfectly transparent object will be visible because of the distortion induced by this bending (unless the ratio is 1, meaning that there is no bending of light at all).</p> <p>In three.js, refraction is implemented using environment maps. As with reflection, a refracting object does not show its actual environment; it refracts the cubemap texture that is used as the environment map. For refraction, a special \"mapping\" must be used for the environment map texture. The mapping property of a texture tells how that texture will be mapped to a surface. For a cubemap texture being used for refraction, it should be set to THREE.CubeRefractionMapping. (The default value of this property in a cubemap texture is appropriate for reflection rather than refraction.) Here is an example of loading a cubemap texture and setting its mapping property for use with refraction:</p> <pre><code>cubeTexture = new THREE.CubeTextureLoader().load( textureURLs );\ncubeTexture.mapping = THREE.CubeRefractionMapping;\n</code></pre> <p>In addition to this, the refractionRatio property of the material that is applied to the refracting object should be set. The value is a number between 0 and 1; the closer to 1, the less bending of light. The default value is so close to 1 that the object will be almost invisible. This example uses a value of 0.6:</p> <pre><code>let material = new THREE.MeshBasicMaterial( { \n        color: \"white\",\n        envMap: cubeTexture,\n        refractionRatio: 0.6\n    } );\n</code></pre> <p>This gives a strong refractive effect. If you set the material color to something other than white, you will get something that looks like tinted glass. Another property that you might set is the reflectivity. For a refractive object, this value tells how much light is transmitted through the object rather than reflected from its surface. The default value, 1, gives 100% transmission of light; smaller values make objects look like they are made out of \"cloudy\" glass that blocks some of the light.</p> <p>The sample program threejs/refraction.html is a copy of reflection.html that has been modified to do refraction instead of reflection. The objects look like they are made of glass instead of mirrors. The program has a checkbox that makes the glass look cloudy and one that increases the refractionRatio from 0.6 to 0.9. The following images are from that program. A perfectly transmissive arrowhead is shown in the first image, and a cloudy sphere in the second. Notice how the sphere shows an inverted image of the objects behind it:</p> <p></p> <p>In my reflection and refraction examples, the environment is a skybox, and there is a single object that reflects or refracts that environment. But what if a scene includes more than one object? The objects won't be in the cubemap texture. If you use the cubemap texture on the objects, they won't reflect or refract each other. There is no complete solution to this problem in WebGL. However, you can make an object reflect or refract other objects by making an environment map that includes those objects. If the objects are moving, this means that you have to make a new environment map for every frame. Recall that an environment map can be made by taking six pictures of the environment from different directions. Three.js has a kind of camera that can do just that, THREE.CubeCamera. I won't go into the full details, but a CubeCamera can take a six-fold picture of a scene from a given point of view and make a cubemap texture from those images. To use the camera, you have to place it at the location of an object\u2014and make the object invisible so it doesn't show up in the pictures. Snap the picture, and apply it as an environment map on the object. For animated scenes, you have to do this in every frame, and you need to do it for every reflective/refractive object in the scene. Obviously, this can get very computationally expensive! And the result still isn't perfect. For one thing, you won't see multiple reflections, where objects reflect back and forth on each other several times. For that, you need a different kind of rendering from the one used by OpenGL. We will return to the topic of dynamic cubemaps in Subsection 7.4.4 and to alternative rendering techniques in Chapter 8.</p>"},{"location":"cn/c6/","title":"\u7b2c 6 \u7ae0\uff1a WebGL \u7b80\u4ecb","text":"<p>Introduction to WebGL</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u8f6c\u5411WebGL\uff0c\u8fd9\u662fOpenGL\u7684\u7f51\u7edc\u7248\u672c\u3002\u5728\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u7684Three.js\u4f7f\u7528WebGL\u8fdb\u884c3D\u56fe\u5f62\u5904\u7406\u3002\u5f53\u7136\uff0c\u76f4\u63a5\u4f7f\u7528WebGL\u4f1a\u66f4\u56f0\u96be\uff0c\u4f46\u8fd9\u6837\u505a\u53ef\u4ee5\u8ba9\u4f60\u5b8c\u5168\u63a7\u5236\u56fe\u5f62\u786c\u4ef6\u3002\u5b66\u4e60\u5b83\u5c06\u662f\u4e86\u89e3\u73b0\u4ee3\u56fe\u5f62\u7f16\u7a0b\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5165\u95e8\u3002WebGL\u4e0e\u6211\u4eec\u5728\u7b2c3\u7ae0\u548c\u7b2c4\u7ae0\u4e2d\u5b66\u4e60\u7684OpenGL 1.1\u975e\u5e38\u4e0d\u540c\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4f60\u4f1a\u53d1\u73b0\u4f60\u5728\u524d\u51e0\u7ae0\u5b66\u5230\u7684\u5f88\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u5e94\u7528\u5230WebGL\u4e0a\u3002</p> <p>\u6211\u5e76\u4e0d\u6253\u7b97\u5168\u9762\u4ecb\u7ecdWebGL\u3002\u6709\u8bb8\u591aWebGL\u7279\u6027\u6211\u751a\u81f3\u90fd\u4e0d\u4f1a\u63d0\u53ca\uff0c\u5176\u4e2d\u8bb8\u591a\u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u5f88\u91cd\u8981\u3002\u7136\u800c\uff0c\u6211\u5c06\u6db5\u76d6\u6240\u9700\u7684\u6838\u5fc3\u7279\u6027\uff0c\u7528\u4e8e2D\u548c3D\u56fe\u5f62\uff0c\u4ee5\u53ca\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u7279\u6027\u4f5c\u4e3a\u989d\u5916\u5185\u5bb9\u3002</p> <p>WebGL\u6709\u4e24\u4e2a\u7248\u672c\uff0c\u76ee\u524d\u90fd\u8fd8\u5728\u4f7f\u7528\u3002WebGL 1.0\u57fa\u4e8eOpenGL ES 2.0\uff0c\u8fd9\u662f\u4e3a\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff08\u5982\u667a\u80fd\u624b\u673a\u548c\u5e73\u677f\u7535\u8111\uff09\u8bbe\u8ba1\u7684OpenGL\u7248\u672c\u3002OpenGL ES 1.0\uff0c\u5373\u6700\u521d\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edfOpenGL\uff0c\u4e0eOpenGL 1.1\u975e\u5e38\u76f8\u4f3c\u3002\u7136\u800c\uff0cOpenGL ES\u76842.0\u7248\u672c\u5f15\u5165\u4e86\u91cd\u5927\u53d8\u5316\u3002\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u66f4\u5c0f\u3001\u66f4\u7b80\u5355\u7684API\uff0c\u5b83\u5c06\u66f4\u591a\u7684\u8d23\u4efb\u653e\u5728\u7a0b\u5e8f\u5458\u8eab\u4e0a\u3002\u4f8b\u5982\uff0c\u7528\u4e8e\u5904\u7406\u53d8\u6362\u7684\u51fd\u6570\uff0c\u5982glRotatef\u548cglPushMatrix\uff0c\u5df2\u4eceAPI\u4e2d\u79fb\u9664\uff0c\u4f7f\u7a0b\u5e8f\u5458\u8d1f\u8d23\u8ddf\u8e2a\u53d8\u6362\u3002WebGL\u4e0d\u4f7f\u7528glBegin/glEnd\u751f\u6210\u51e0\u4f55\u4f53\uff0c\u4e5f\u4e0d\u4f7f\u7528\u8bf8\u5982glColor\u6216glNormal\u4e4b\u7c7b\u7684\u51fd\u6570\u6765\u6307\u5b9a\u9876\u70b9\u7684\u5c5e\u6027\u3002WebGL 1.0\u51e0\u4e4e\u5728\u6bcf\u4e2a\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u90fd\u5f97\u5230\u652f\u6301\u3002\uff08\u5728\u67d0\u4e9b\u8bbe\u5907\u4e0a\uff0c\u7531\u4e8e\u786c\u4ef6\u9650\u5236\uff0cWebGL\u53ef\u80fd\u88ab\u7981\u7528\u3002\uff09</p> <p>\u57fa\u4e8eOpenGL ES 3.0\u7684WebGL 2.0\u73b0\u5728\u51e0\u4e4e\u5728\u6240\u6709\u652f\u6301WebGL 1.0\u7684\u8bbe\u5907\u4e0a\u90fd\u5f97\u5230\u652f\u6301\u3002\u5927\u591a\u6570\u4e3aWebGL 1.0\u7f16\u5199\u7684\u7a0b\u5e8f\u5728WebGL 2.0\u4e0b\u4e5f\u80fd\u5de5\u4f5c\uff0c\u6240\u4ee5\u4f60\u57281.0\u7248\u672c\u4e2d\u5b66\u5230\u7684\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u90fd\u53ef\u4ee5\u5e94\u7528\u5230\u65b0\u7248\u672c\u4e0a\u3002\u5728\u8fd9\u672c\u6559\u79d1\u4e66\u4e2d\uff0c\u6211\u5c06\u4e13\u6ce8\u4e8eWebGL 1.0\uff0c\u4f46\u6211\u4e5f\u4f1a\u4ecb\u7ecdWebGL 2.0\u7684\u4e00\u4e9b\u65b0\u7279\u6027\u3002\u6211\u4f1a\u5c3d\u91cf\u6e05\u695a\u5730\u8bf4\u660e\u6211\u8c08\u8bba\u7684\u4ec5\u9002\u7528\u4e8eWebGL 2.0\u7684\u7279\u6027\u3002</p> <p>\u4efb\u4f55WebGL\u7a0b\u5e8f\u90fd\u6709\u4e24\u4e2a\u65b9\u9762\u3002\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u662f\u7528JavaScript\u7f16\u5199\u7684\uff0c\u8fd9\u662f\u7f51\u7edc\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u7b2c\u4e8c\u90e8\u5206\u662f\u7528GLSL\u7f16\u5199\u7684\uff0c\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e\u7f16\u5199\u5728GPU\u4e0a\u8fd0\u884c\u7684\u201c\u7740\u8272\u5668\u201d\u7a0b\u5e8f\u7684\u8bed\u8a00\u3002WebGL 1.0\u4f7f\u7528GLSL ES 1.00\uff08\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684OpenGL\u7740\u8272\u5668\u8bed\u8a00\uff0c\u7248\u672c1.00\uff09\u3002WebGL 2.0\u53ef\u4ee5\u4f7f\u7528GLSL ES 1.00\u7f16\u5199\u7684\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u4f7f\u7528GLSL ES 3.00\uff0c\u540e\u8005\u6709\u4e00\u4e9b\u91cd\u5927\u5dee\u5f02\u4ee5\u53ca\u65b0\u7279\u6027\u3002\u6211\u4f1a\u5c3d\u91cf\u6e05\u695a\u5730\u8bf4\u660e\u6211\u6b63\u5728\u8ba8\u8bba\u7684\u8bed\u8a00\u3002</p> <p>\u5bf9\u4e8e\u8fd9\u672c\u5173\u4e8eWebGL\u7684\u4ecb\u7ecd\u6027\u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u575a\u6301\u57fa\u672c\u76842D\u56fe\u5f62\u3002\u4f60\u5c06\u4e86\u89e3WebGL\u7a0b\u5e8f\u7684\u7ed3\u6784\u3002\u4f60\u5c06\u5b66\u5230API\u7684JavaScript\u65b9\u9762\u7684\u5927\u90e8\u5206\u5185\u5bb9\uff0c\u4f60\u5c06\u5b66\u4f1a\u5982\u4f55\u7f16\u5199\u548c\u4f7f\u7528\u7b80\u5355\u7684\u7740\u8272\u5668\u3002\u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u8f6c\u54113D\u56fe\u5f62\uff0c\u4f60\u5c06\u4e86\u89e3\u66f4\u591a\u5173\u4e8eGLSL\u7684\u77e5\u8bc6\u3002</p> <p>In this chapter, we turn to WebGL, the version of OpenGL for the Web. Three.js, which was covered in the previous chapter, uses WebGL for 3D graphics. Of course, it is more difficult to use WebGL directly, but doing so gives you full control over the graphics hardware. And learning it will be a good introduction to modern graphics programming. WebGL is very different from OpenGL 1.1, which we studied in Chapter 3 and Chapter 4. Nevertheless, it will turn out that much of what you learned in previous chapters will carry over to WebGL.</p> <p>It is not my intention to cover WebGL in its entirety. There are many WebGL features that I will not even mention, and many of those are important for more advanced computer graphics. However, I will cover the core features that are needed for 2D and 3D graphics, along with a few of the more advanced aspects, as a bonus.</p> <p>There are two versions of WebGL, both of them still in use. WebGL 1.0 is based on OpenGL ES 2.0, a version of OpenGL designed for use on embedded systems such as smart phones and tablets. OpenGL ES 1.0, the original OpenGL for embedded systems, was very similar to OpenGL 1.1. However, the 2.0 version of OpenGL ES introduced major changes. It is actually a smaller, simpler API that puts more responsibility on the programmer. For example, functions for working with transformations, such as glRotatef and glPushMatrix, were eliminated from the API, making the programmer responsible for keeping track of transformations. WebGL does not use glBegin/glEnd to generate geometry, and it doesn't use function such as glColoror glNormal to specify attributes of vertices. WebGL 1.0 is supported in almost every web browser. (On some devices, WebGL might be disabled because of hardware limitations.)</p> <p>WebGL 2.0, which is based on OpenGL ES 3.0, is now supported on almost all devices that suport WebGL 1.0. Most programs written for WebGL 1.0 will also work under WebGL 2.0, so almost everything that you learn about the 1.0 version will carry over to the newer version. In this textbook, I will concentrate on WebGL 1.0, but I will also cover some of the new features of WebGL 2.0. I will try to make it clear when I am talking about features that only apply to WebGL 2.0.</p> <p>There are two sides to any WebGL program. Part of the program is written in JavaScript, the programming language for the web. The second part is written in GLSL, a language for writing \"shader\" programs that run on the GPU. WebGL 1.0 uses GLSL ES 1.00 (the OpenGL Shader Language for Embedded Systems, version 1.00). WebGL 2.0 can use shader programs written in GLSL ES 1.00, but it can also use GLSL ES 3.00, which has some significant differences as well as new features. I will try to always be clear about which language I am discussing.</p> <p>For this introductory chapter about WebGL, we will stick to basic 2D graphics. You will learn about the structure of WebGL programs. You will learn most of the JavaScript side of the API, and you will learn how to write and use simple shaders. In the next chapter, we will move on to 3D graphics, and you will learn a great deal more about GLSL.</p>"},{"location":"cn/c6/s1/","title":"6.1 \u53ef\u7f16\u7a0b\u6d41\u6c34\u7ebf","text":"<p>The Programmable Pipeline</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL 1.1 \u4f7f\u7528 \u56fa\u5b9a\u529f\u80fd\u7ba1\u7ebf \u8fdb\u884c\u56fe\u5f62\u5904\u7406\u3002\u6570\u636e\u7531\u7a0b\u5e8f\u63d0\u4f9b\uff0c\u5e76\u901a\u8fc7\u4e00\u7cfb\u5217\u5904\u7406\u9636\u6bb5\uff0c\u6700\u7ec8\u4ea7\u751f\u6700\u7ec8\u56fe\u50cf\u4e2d\u770b\u5230\u7684\u50cf\u7d20\u989c\u8272\u3002\u7a0b\u5e8f\u53ef\u4ee5\u542f\u7528\u548c\u7981\u7528\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u6b65\u9aa4\uff0c\u4f8b\u5982\u6df1\u5ea6\u6d4b\u8bd5\u548c\u5149\u7167\u8ba1\u7b97\u3002\u4f46\u662f\uff0c\u5b83\u65e0\u6cd5\u6539\u53d8\u6bcf\u4e2a\u9636\u6bb5\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u529f\u80fd\u662f\u56fa\u5b9a\u7684\u3002</p> <p>OpenGL 2.0 \u5f15\u5165\u4e86 \u53ef\u7f16\u7a0b\u7ba1\u7ebf\u3002\u7a0b\u5e8f\u5458\u53ef\u4ee5\u66ff\u6362\u7ba1\u7ebf\u4e2d\u7684\u67d0\u4e9b\u9636\u6bb5\u4e3a\u81ea\u5df1\u7684\u7a0b\u5e8f\u3002\u8fd9\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u4e86\u5bf9\u53d1\u751f\u8be5\u9636\u6bb5\u7684\u5b8c\u5168\u63a7\u5236\u3002\u5728 OpenGL 2.0 \u4e2d\uff0c\u53ef\u7f16\u7a0b\u6027\u662f\u53ef\u9009\u7684\uff1b\u5bf9\u4e8e\u4e0d\u9700\u8981\u53ef\u7f16\u7a0b\u7075\u6d3b\u6027\u7684\u7a0b\u5e8f\uff0c\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u5b8c\u6574\u7684\u56fa\u5b9a\u529f\u80fd\u7ba1\u7ebf\u3002WebGL \u4f7f\u7528\u53ef\u7f16\u7a0b\u7ba1\u7ebf\uff0c\u5e76\u4e14\u662f \u5f3a\u5236\u6027\u7684\u3002\u6ca1\u6709\u529e\u6cd5\u5728\u4e0d\u7f16\u5199\u7a0b\u5e8f\u6765\u5b9e\u73b0\u56fe\u5f62\u5904\u7406\u7ba1\u7ebf\u7684\u4e00\u90e8\u5206\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 WebGL\u3002</p> <p>\u4f5c\u4e3a\u7ba1\u7ebf\u4e00\u90e8\u5206\u7f16\u5199\u7684\u7a0b\u5e8f\u79f0\u4e3a \u7740\u8272\u5668\u3002\u5bf9\u4e8e WebGL\uff0c\u4f60\u9700\u8981\u7f16\u5199\u4e00\u4e2a \u9876\u70b9\u7740\u8272\u5668\uff0c\u5b83\u5c06\u4e3a\u539f\u8bed\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u8c03\u7528\u4e00\u6b21\uff0c\u4ee5\u53ca\u4e00\u4e2a \u7247\u6bb5\u7740\u8272\u5668\uff0c\u5b83\u5c06\u4e3a\u539f\u8bed\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u8c03\u7528\u4e00\u6b21\u3002\u9664\u4e86\u8fd9\u4e24\u4e2a\u53ef\u7f16\u7a0b\u9636\u6bb5\u5916\uff0cWebGL \u7ba1\u7ebf\u8fd8\u5305\u542b\u539f\u59cb\u56fa\u5b9a\u529f\u80fd\u7ba1\u7ebf\u7684\u51e0\u4e2a\u9636\u6bb5\u3002\u4f8b\u5982\uff0c\u6df1\u5ea6\u6d4b\u8bd5\u4ecd\u7136\u662f\u56fa\u5b9a\u529f\u80fd\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728 WebGL \u4e2d\u4ee5\u4e0e OpenGL 1.1 \u4e2d\u76f8\u540c\u7684\u65b9\u5f0f\u542f\u7528\u6216\u7981\u7528\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd WebGL \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u4ee5\u53ca\u6570\u636e\u5982\u4f55\u4ece\u7a0b\u5e8f\u7684 JavaScript \u90e8\u5206\u6d41\u5165\u56fe\u5f62\u7ba1\u7ebf\uff0c\u5e76\u901a\u8fc7\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u3002</p> <p>\u6211\u5e94\u8be5\u6ce8\u610f\uff0cOpenGL \u7684\u540e\u7eed\u7248\u672c\u5f15\u5165\u4e86\u65b0\u7684\u53ef\u7f16\u7a0b\u9636\u6bb5\uff0c\u9664\u4e86\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e4b\u5916\uff0c\u4f46\u5b83\u4eec\u4e0d\u662f WebGL 1.0 \u6216 2.0 \u7684\u4e00\u90e8\u5206\uff0c\u672c\u4e66\u4e2d\u4e5f\u6ca1\u6709\u6db5\u76d6\u3002</p> <p>OpenGL 1.1 uses a fixed-function pipeline for graphics processing. Data is provided by a program and passes through a series of processing stages that ultimately produce the pixel colors seen in the final image. The program can enable and disable some of the steps in the process, such as the depth test and lighting calculations. But there is no way for it to change what happens at each stage. The functionality is fixed.</p> <p>OpenGL 2.0 introduced a programmable pipeline. It became possible for the programmer to replace certain stages in the pipeline with their own programs. This gives the programmer complete control over what happens at that stage. In OpenGL 2.0, the programmability was optional; the complete fixed-function pipeline was still available for programs that didn't need the flexibility of programmability. WebGL uses a programmable pipeline, and it is mandatory. There is no way to use WebGL without writing programs to implement part of the graphics processing pipeline.</p> <p>The programs that are written as part of the pipeline are called shaders. For WebGL, you need to write a vertex shader, which is called once for each vertex in a primitive, and a fragment shader, which is called once for each pixel in the primitive. Aside from these two programmable stages, the WebGL pipeline also contains several stages from the original fixed-function pipeline. For example, the depth test is still part of the fixed functionality, and it can be enabled or disabled in WebGL in the same way as in OpenGL 1.1.</p> <p>In this section, we will cover the basic structure of a WebGL program and how data flows from the JavaScript side of the program into the graphics pipeline and through the vertex and fragment shaders.</p> <p>I should note that later versions of OpenGL have introduced new programmable stages, in addition to the vertex and fragment shaders, but they are not part of WebGL 1.0 or 2.0, and they are not covered in this book.</p>"},{"location":"cn/c6/s1/#611-webgl-\u56fe\u5f62\u4e0a\u4e0b\u6587","title":"6.1.1 WebGL \u56fe\u5f62\u4e0a\u4e0b\u6587","text":"<p>The WebGL Graphics Context</p> \u4e2d\u6587\u82f1\u6587 <p>\u8981\u4f7f\u7528WebGL\uff0c\u4f60\u9700\u8981\u4e00\u4e2aWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u56fe\u5f62\u4e0a\u4e0b\u6587\u662f\u4e00\u4e2aJavaScript\u5bf9\u8c61\uff0c\u5176\u65b9\u6cd5\u5b9e\u73b0\u4e86WebGL API\u7684JavaScript\u90e8\u5206\u3002WebGL\u5728HTML\u753b\u5e03\u4e2d\u7ed8\u5236\u56fe\u50cf\uff0c\u8fd9\u662f\u4e0e\u7b2c2.6\u8282\u4e2d\u4ecb\u7ecd\u76842D API\u76f8\u540c\u7684<code>&lt;canvas&gt;</code>\u5143\u7d20\u3002\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e0e\u7279\u5b9a\u753b\u5e03\u76f8\u5173\u8054\u3002WebGL 1.0\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u51fd\u6570canvas.getContext(\"webgl\")\u83b7\u5f97\uff0c\u5176\u4e2dcanvas\u662f\u8868\u793a\u753b\u5e03\u7684DOM\u5bf9\u8c61\u3002\u5bf9\u4e8eWebGL 2.0\uff0c\u4f60\u53ea\u9700\u7b80\u5355\u5730\u4f7f\u7528canvas.getContext(\"webgl2\")\u3002\u5982\u679c\u65e0\u6cd5\u521b\u5efa\u4e0a\u4e0b\u6587\uff0cgetContext()\u7684\u8fd4\u56de\u503c\u5c06\u4e3anull\u3002\u56e0\u6b64\uff0c\u83b7\u53d6WebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u901a\u5e38\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>canvas = document.getElementById(\"webglcanvas\");\ngl = canvas.getContext(\"webgl\");  // \u6216\u8bb8\u662f canvas.getContext(\"webgl2\")\nif ( ! gl ) {\n    throw new Error(\"WebGL not supported; can't create graphics context.\");\n}\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u7b2c\u4e00\u884c\u83b7\u53d6HTML\u753b\u5e03\u7684\u5f15\u7528\uff0cWebGL\u5c06\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u7528\u4e8e\u7ed8\u56fe\u3002\u53d8\u91cf\u540dgl\u7531\u4f60\u51b3\u5b9a\uff0c\u4f46\u5728\u6211\u7684\u8ba8\u8bba\u4e2d\uff0c\u6211\u5c06\u59cb\u7ec8\u4f7f\u7528gl\u6765\u8868\u793aWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u6b64\u4ee3\u7801\u5047\u5b9a\u7f51\u9875\u7684HTML\u6e90\u5305\u542b\u4e00\u4e2aid=\"webglcanvas\"\u7684\u753b\u5e03\u5143\u7d20\uff0c\u4f8b\u5982\uff1a</p> <pre><code>&lt;canvas width=\"800\" height=\"600\" id=\"webglcanvas\"&gt;&lt;/canvas&gt;\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u7b2c\u4e8c\u884c\u4e2d\uff0c\u5982\u679c\u7f51\u7edc\u6d4f\u89c8\u5668\u4e0d\u652f\u6301getContext\u7684\"webgl\"\u53c2\u6570\uff0ccanvas.getContext(\"webgl\")\u5c06\u8fd4\u56denull\u3002\u7531\u4e8e\u5728JavaScript\u4e2d\uff0cnull\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u88ab\u89c6\u4e3afalse\uff0c\u7b2c\u4e09\u884c\u6d4b\u8bd5\u8fd4\u56de\u503c\u662f\u5426\u4e3anull\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7801\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u8fd9\u53ef\u4ee5\u5728\u5176\u4ed6\u5730\u65b9\u5904\u7406\uff0c\u53ef\u80fd\u662f\u901a\u8fc7\u5411\u7528\u6237\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u6b64\u5916\uff0c\u5982\u679c\u6d4f\u89c8\u5668\u6839\u672c\u6ca1\u6709\u5bf9<code>&lt;canvas&gt;</code>\u7684\u652f\u6301\uff0c\u4ee3\u7801\u5c06\u629b\u51fa\u5f02\u5e38\u3002\u6211\u7684\u7a0b\u5e8f\u901a\u5e38\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684\u521d\u59cb\u5316\u51fd\u6570\uff1a</p> <pre><code>function init() {\n    try {\n        canvas = document.getElementById(\"webglcanvas\");\n        gl = canvas.getContext(\"webgl\");  // \u6216 \"webgl2\"\n        if ( ! gl ) {\n            throw new Error(\"WebGL not supported.\");\n        }\n    }\n    catch (e) {\n        .\n        .  // \u62a5\u544a\u9519\u8bef\n        .\n        return;\n    }\n    initGL();  // \u4e00\u4e2a\u521d\u59cb\u5316WebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u51fd\u6570\n    .\n    .  // \u5176\u4ed6JavaScript\u521d\u59cb\u5316\n    .\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0ccanvas\u548cgl\u662f\u5168\u5c40\u53d8\u91cf\u3002initGL()\u662f\u5728\u811a\u672c\u4e2d\u5176\u4ed6\u5730\u65b9\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u56fe\u5f62\u4e0a\u4e0b\u6587\uff0c\u5305\u62ec\u521b\u5efa\u548c\u5b89\u88c5\u7740\u8272\u5668\u7a0b\u5e8f\u3002init()\u51fd\u6570\u5e94\u5728\u9875\u9762\u52a0\u8f7d\u65f6\u8c03\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u811a\u672c\u4e2d\u5206\u914d\"window.onload = init;\"\u6765\u5b89\u6392\u3002</p> <p>\u4e00\u65e6\u521b\u5efa\u4e86\u56fe\u5f62\u4e0a\u4e0b\u6587gl\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u8c03\u7528WebGL API\u4e2d\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\u7684\u547d\u4ee4\uff0c\u5728OpenGL\u4e2d\u5199\u4e3aglEnable(GL_DEPTH_TEST)\uff0c\u53d8\u6210\u4e86\uff1a</p> <pre><code>gl.enable( gl.DEPTH_TEST );\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0cAPI\u4e2d\u7684\u51fd\u6570\u548c\u5e38\u91cf\u90fd\u662f\u901a\u8fc7\u56fe\u5f62\u4e0a\u4e0b\u6587\u5f15\u7528\u7684\u3002\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u540d\u79f0\"gl\"\u662f\u7ea6\u5b9a\u4fd7\u6210\u7684\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684JavaScript\u53d8\u91cf\uff0c\u5176\u540d\u79f0\u7531\u7a0b\u5e8f\u5458\u51b3\u5b9a\u3002</p> <p>\uff08\u4e00\u4e9b\u975e\u5e38\u65e7\u7684\u6d4f\u89c8\u5668\u9700\u8981canvas.getContext(\"experimental-webgl\")\u6765\u521b\u5efaWebGL 1.0\u4e0a\u4e0b\u6587\u3002\u8fd9\u5305\u62ecInternet Explorer 11\uff0c\u4f46\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u6ca1\u6709\u4eba\u5e94\u8be5\u4f7f\u7528Internet Explorer\u3002\uff09</p> <p>To use WebGL, you need a WebGL graphics context. The graphics context is a JavaScript object whose methods implement the JavaScript side of the WebGL API. WebGL draws its images in an HTML canvas, the same kind of <code>&lt;canvas&gt;</code> element that is used for the 2D API that was covered in Section 2.6. A graphics context is associated with a particular canvas. A graphics context for WebGL 1.0 can be obtained by calling the function canvas.getContext(\"webgl\"), where canvas is a DOM object representing the canvas. For WebGL 2.0, you would simply use canvas.getContext(\"webgl2\") instead. The return value of getContext() will be null if the context cannot be created. So, getting a WebGL graphics context often looks something like this:</p> <pre><code>canvas = document.getElementById(\"webglcanvas\");\ngl = canvas.getContext(\"webgl\");  // or maybe canvas.getContext(\"webgl2\")\nif ( ! gl ) {\n    throw new Error(\"WebGL not supported; can't create graphics context.\");\n}\n</code></pre> <p>Here, the first line gets a reference to the HTML canvas that WebGL will used throughout the program for drawing. The name gl for the variable is up to you, but I will always use gl for the WebGL graphics context in my discussion. This code assumes that the HTML source for the web page includes a canvas element with id=\"webglcanvas\", such as</p> <pre><code>&lt;canvas width=\"800\" height=\"600\" id=\"webglcanvas\"&gt;&lt;/canvas&gt;\n</code></pre> <p>In the second line of the above code, canvas.getContext(\"webgl\") will return null if the web browser does not support \"webgl\" as a parameter to getContext. Since null is considered to be false in JavaScript when used in a boolean context, the third line tests whether the return value is null. In that case, the code throws an error, which can be handled elsewhere, probably by showing an error message to the user. Furthermore, the code will throw an exception if the browser has no support at all for <code>&lt;canvas&gt;</code>. My programs often use an initialization function of the form</p> <pre><code>function init() {\n    try {\n        canvas = document.getElementById(\"webglcanvas\");\n        gl = canvas.getContext(\"webgl\");  // or \"webgl2\"\n        if ( ! gl ) {\n            throw new Error(\"WebGL not supported.\");\n        }\n    }\n    catch (e) {\n        .\n        .  // report the error\n        .\n        return;\n    }\n    initGL();  // a function that initializes the WebGL graphics context\n    .\n    .  // other JavaScript initialization\n    .\n}\n</code></pre> <p>In this function, canvas and gl are global variables. And initGL() is a function defined elsewhere in the script that initializes the graphics context, including creating and installing the shader programs. The init() function should be called when the page is loaded. This can be arranged, for example, by assigning \"window.onload = init;\" in the script.</p> <p>Once the graphics context, gl, has been created, it can be used to call functions in the WebGL API. For example, the command for enabling the depth test, which was written as glEnable(GL_DEPTH_TEST) in OpenGL, becomes</p> <pre><code>gl.enable( gl.DEPTH_TEST );\n</code></pre> <p>Note that both functions and constants in the API are referenced through the graphics context. The name \"gl\" for the graphics context is conventional, but remember that it is just an ordinary JavaScript variable whose name is up to the programmer.</p> <p>(Some very old browsers required canvas.getContext(\"experimental-webgl\") to create a WebGL 1.0 context. This includes Internet Explorer 11, but at this point, no one should be using Internet Explorer.)</p>"},{"location":"cn/c6/s1/#612-\u7740\u8272\u5668\u7a0b\u5e8f","title":"6.1.2 \u7740\u8272\u5668\u7a0b\u5e8f","text":"<p>The Shader Program</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528WebGL\u7ed8\u56fe\u9700\u8981\u4e00\u4e2a\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u5b83\u7531\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u7ec4\u6210\u3002\u7740\u8272\u5668\u662f\u7528GLSL\u7f16\u7a0b\u8bed\u8a00\u7684\u67d0\u4e2a\u7248\u672c\u7f16\u5199\u7684\u3002WebGL 1.0\u4f7f\u7528GLSL ES 1.00\uff0c\u800cWebGL 2.0\u53ef\u4ee5\u4f7f\u7528GLSL ES 1.00\u6216GLSL ES 3.00\u3002\u8fd9\u91cc\u7684\u8ba8\u8bba\u662f\u5173\u4e8eGLSL ES 1.00\u7684\uff1b\u6211\u7a0d\u540e\u4f1a\u89e3\u91ca3.00\u7248\u672c\u4e2d\u7684\u4e00\u4e9b\u53d8\u5316\u3002</p> <p>GLSL\u57fa\u4e8eC\u7f16\u7a0b\u8bed\u8a00\u3002\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u662f\u5206\u5f00\u7684\u7a0b\u5e8f\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u6709\u81ea\u5df1\u7684main()\u51fd\u6570\u3002\u8fd9\u4e24\u4e2a\u7740\u8272\u5668\u5206\u522b\u7f16\u8bd1\uff0c\u7136\u540e\u201c\u94fe\u63a5\u201d\u4ee5\u4ea7\u751f\u5b8c\u6574\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u3002WebGL\u7684JavaScript API\u5305\u62ec\u7528\u4e8e\u7f16\u8bd1\u7740\u8272\u5668\u7136\u540e\u94fe\u63a5\u5b83\u4eec\u7684\u51fd\u6570\u3002\u8981\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u7740\u8272\u5668\u7684\u6e90\u4ee3\u7801\u5fc5\u987b\u662fJavaScript\u5b57\u7b26\u4e32\u3002\u8ba9\u6211\u4eec\u770b\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u521b\u5efa\u9876\u70b9\u7740\u8272\u5668\u9700\u8981\u4e09\u4e2a\u6b65\u9aa4\u3002</p> <pre><code>let vertexShader = gl.createShader( gl.VERTEX_SHADER );\ngl.shaderSource( vertexShader, vertexShaderSource );\ngl.compileShader( vertexShader );\n</code></pre> <p>\u8fd9\u91cc\u4f7f\u7528\u7684\u51fd\u6570\u662fWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587gl\u7684\u4e00\u90e8\u5206\uff0c\u53c2\u6570vertexShaderSource\u662f\u5305\u542b\u7740\u8272\u5668\u6e90\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u3002\u6e90\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\uff0c\u4f46\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u63d0\u793a\u3002\u4f60\u9700\u8981\u901a\u8fc7\u8c03\u7528\u51fd\u6570</p> <pre><code>gl.getShaderParameter( vertexShader, gl.COMPILE_STATUS )\n</code></pre> <p>\u6765\u68c0\u67e5\u7f16\u8bd1\u662f\u5426\u6210\u529f\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u7f16\u8bd1\u662f\u5426\u6210\u529f\u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528</p> <pre><code>gl.getShaderInfoLog( vertexShader )\n</code></pre> <p>\u6765\u68c0\u7d22\u9519\u8bef\u6d88\u606f\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u542b\u7f16\u8bd1\u7ed3\u679c\u3002\uff08\u5b57\u7b26\u4e32\u7684\u786e\u5207\u683c\u5f0f\u6ca1\u6709\u88abWebGL\u6807\u51c6\u6307\u5b9a\u3002\u8be5\u5b57\u7b26\u4e32\u65e8\u5728\u6613\u4e8e\u4eba\u7c7b\u9605\u8bfb\u3002\uff09</p> <p>\u53ef\u4ee5\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u521b\u5efa\u7247\u6bb5\u7740\u8272\u5668\u3002\u6709\u4e86\u8fd9\u4e24\u4e2a\u7740\u8272\u5668\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u5e76\u94fe\u63a5\u7a0b\u5e8f\u3002\u5728\u94fe\u63a5\u4e4b\u524d\uff0c\u9700\u8981\u5c06\u7740\u8272\u5668\u201c\u9644\u52a0\u201d\u5230\u7a0b\u5e8f\u5bf9\u8c61\u4e0a\u3002\u4ee3\u7801\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>let prog = gl.createProgram();\ngl.attachShader( prog, vertexShader );\ngl.attachShader( prog, fragmentShader );\ngl.linkProgram( prog );\n</code></pre> <p>\u5373\u4f7f\u7740\u8272\u5668\u5df2\u6210\u529f\u7f16\u8bd1\uff0c\u5f53\u5b83\u4eec\u94fe\u63a5\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\u65f6\u4e5f\u53ef\u80fd\u53d1\u751f\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u5171\u4eab\u67d0\u4e9b\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u5982\u679c\u4e24\u4e2a\u7a0b\u5e8f\u58f0\u660e\u4e86\u540c\u540d\u4f46\u7c7b\u578b\u4e0d\u540c\u7684\u53d8\u91cf\uff0c\u94fe\u63a5\u65f6\u5c31\u4f1a\u53d1\u751f\u9519\u8bef\u3002\u68c0\u67e5\u94fe\u63a5\u9519\u8bef\u4e0e\u68c0\u67e5\u7740\u8272\u5668\u7f16\u8bd1\u9519\u8bef\u7c7b\u4f3c\u3002</p> <p>\u521b\u5efa\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u4ee3\u7801\u603b\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff0c\u56e0\u6b64\u5c06\u5176\u6253\u5305\u5230\u4e00\u4e2a\u53ef\u91cd\u7528\u7684\u51fd\u6570\u4e2d\u975e\u5e38\u65b9\u4fbf\u3002\u4ee5\u4e0b\u662f\u6211\u5728\u6b64\u7ae0\u8282\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u51fd\u6570\uff1a</p> <pre><code>/**\n * Creates a program for use in the WebGL context gl, and returns the\n * identifier for that program.  If an error occurs while compiling or\n * linking the program, an exception of type Error is thrown.  The error\n * string contains the compilation or linking error. \n */\nfunction createProgram(gl, vertexShaderSource, fragmentShaderSource) {\nlet vsh = gl.createShader( gl.VERTEX_SHADER );\ngl.shaderSource( vsh, vertexShaderSource );\ngl.compileShader( vsh );\nif ( ! gl.getShaderParameter(vsh, gl.COMPILE_STATUS) ) {\n    throw new Error(\"Error in vertex shader:  \" + gl.getShaderInfoLog(vsh));\n}\nlet fsh = gl.createShader( gl.FRAGMENT_SHADER );\ngl.shaderSource( fsh, fragmentShaderSource );\ngl.compileShader( fsh );\nif ( ! gl.getShaderParameter(fsh, gl.COMPILE_STATUS) ) {\n    throw new Error(\"Error in fragment shader:  \" + gl.getShaderInfoLog(fsh));\n}\nlet prog = gl.createProgram();\ngl.attachShader( prog, vsh );\ngl.attachShader( prog, fsh );\ngl.linkProgram( prog );\nif ( ! gl.getProgramParameter( prog, gl.LINK_STATUS) ) {\n    throw new Error(\"Link error in program:  \" + gl.getProgramInfoLog(prog));\n}\nreturn prog;\n}\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u6b65\u9aa4\uff1a\u4f60\u5fc5\u987b\u544a\u8bc9WebGL\u4e0a\u4e0b\u6587\u4f7f\u7528\u7a0b\u5e8f\u3002\u5982\u679cprog\u662f\u7531\u4e0a\u8ff0\u51fd\u6570\u8fd4\u56de\u7684\u7a0b\u5e8f\u6807\u8bc6\u7b26\uff0c\u8fd9\u662f\u901a\u8fc7\u8c03\u7528</p> <pre><code>gl.useProgram( prog );\n</code></pre> <p>\u5b8c\u6210\u7684\u3002</p> <p>\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u968f\u65f6\u901a\u8fc7\u8c03\u7528gl.useProgram\u5728\u4e0d\u540c\u7a0b\u5e8f\u4e4b\u95f4\u5207\u6362\uff0c\u751a\u81f3\u5728\u6e32\u67d3\u56fe\u50cf\u7684\u8fc7\u7a0b\u4e2d\u3002\uff08\u4f8b\u5982\uff0cThree.js\u4e3a\u6bcf\u79cd\u7c7b\u578b\u7684Material\u4f7f\u7528\u4e0d\u540c\u7684\u7a0b\u5e8f\u3002\uff09</p> <p>\u5efa\u8bae\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u521b\u5efa\u6240\u9700\u7684\u4efb\u4f55\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u867d\u7136gl.useProgram\u662f\u4e00\u4e2a\u5feb\u901f\u64cd\u4f5c\uff0c\u4f46\u7f16\u8bd1\u548c\u94fe\u63a5\u76f8\u5f53\u6162\uff0c\u6240\u4ee5\u6700\u597d\u907f\u514d\u5728\u7ed8\u5236\u56fe\u50cf\u7684\u8fc7\u7a0b\u4e2d\u521b\u5efa\u65b0\u7a0b\u5e8f\u3002</p> <p>\u4e0d\u518d\u9700\u8981\u7684\u7740\u8272\u5668\u548c\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u5220\u9664\u4ee5\u91ca\u653e\u5b83\u4eec\u6d88\u8017\u7684\u8d44\u6e90\u3002\u4f7f\u7528\u51fd\u6570gl.deleteShader(shader)\u548cgl.deleteProgram(program)\u3002</p> <p>Drawing with WebGL requires a shader program, which consists of a vertex shader and a fragment shader. Shaders are written in some version of the GLSL programming language. WebGL 1.0 used GLSL ES 1.00, while WebGL 2.0 can use either GLSL ES 1.00 or GLSL ES 3.00. The discussion here is about GLSL ES 1.00; I will explain some of the changes in the 3.00 version later.</p> <p>GLSL is based on the C programming language. The vertex shader and fragment shader are separate programs, each with its own main() function. The two shaders are compiled separately and then \"linked\" to produce a complete shader program. The JavaScript API for WebGL includes functions for compiling the shaders and then linking them. To use the functions, the source code for the shaders must be JavaScript strings. Let's see how it works. It takes three steps to create the vertex shader.</p> <pre><code>let vertexShader = gl.createShader( gl.VERTEX_SHADER );\ngl.shaderSource( vertexShader, vertexShaderSource );\ngl.compileShader( vertexShader );\n</code></pre> <p>The functions that are used here are part of the WebGL graphics context, gl, and the parameter vertexShaderSource is the string that contains the source code for the shader. Errors in the source code will cause the compilation to fail silently. You need to check for compilation errors by calling the function</p> <pre><code>gl.getShaderParameter( vertexShader, gl.COMPILE_STATUS )\n</code></pre> <p>which returns a boolean value to indicate whether the compilation succeeded. In the event that an error occurred, you can retrieve an error message with</p> <pre><code>gl.getShaderInfoLog( vertexShader )\n</code></pre> <p>which returns a string containing the result of the compilation. (The exact format of the string is not specified by the WebGL standard. The string is meant to be human-readable.)</p> <p>The fragment shader can be created in a similar way. With both shaders in hand, you can create and link the program. The shaders need to be \"attached\" to the program object before linking. The code takes the form:</p> <pre><code>let prog = gl.createProgram();\ngl.attachShader( prog, vertexShader );\ngl.attachShader( prog, fragmentShader );\ngl.linkProgram( prog );\n</code></pre> <p>Even if the shaders have been successfully compiled, errors can occur when they are linked into a complete program. For example, the vertex and fragment shader can share certain kinds of variable. If the two programs declare such variables with the same name but with different types, an error will occur at link time. Checking for link errors is similar to checking for compilation errors in the shaders.</p> <p>The code for creating a shader program is always pretty much the same, so it is convenient to pack it into a reusable function. Here is the function that I use for the examples in this chapter:</p> <pre><code>/**\n * Creates a program for use in the WebGL context gl, and returns the\n * identifier for that program.  If an error occurs while compiling or\n * linking the program, an exception of type Error is thrown.  The error\n * string contains the compilation or linking error. \n */\nfunction createProgram(gl, vertexShaderSource, fragmentShaderSource) {\nlet vsh = gl.createShader( gl.VERTEX_SHADER );\ngl.shaderSource( vsh, vertexShaderSource );\ngl.compileShader( vsh );\nif ( ! gl.getShaderParameter(vsh, gl.COMPILE_STATUS) ) {\n    throw new Error(\"Error in vertex shader:  \" + gl.getShaderInfoLog(vsh));\n}\nlet fsh = gl.createShader( gl.FRAGMENT_SHADER );\ngl.shaderSource( fsh, fragmentShaderSource );\ngl.compileShader( fsh );\nif ( ! gl.getShaderParameter(fsh, gl.COMPILE_STATUS) ) {\n    throw new Error(\"Error in fragment shader:  \" + gl.getShaderInfoLog(fsh));\n}\nlet prog = gl.createProgram();\ngl.attachShader( prog, vsh );\ngl.attachShader( prog, fsh );\ngl.linkProgram( prog );\nif ( ! gl.getProgramParameter( prog, gl.LINK_STATUS) ) {\n    throw new Error(\"Link error in program:  \" + gl.getProgramInfoLog(prog));\n}\nreturn prog;\n}\n</code></pre> <p>There is one more step: You have to tell the WebGL context to use the program. If prog is a program identifier returned by the above function, this is done by calling</p> <pre><code>gl.useProgram( prog );\n</code></pre> <p>It is possible to create several shader programs. You can then switch from one program to another at any time by calling gl.useProgram, even in the middle of rendering an image. (Three.js, for example, uses a different program for each type of Material.)</p> <p>It is advisable to create any shader programs that you need as part of initialization. Although gl.useProgram is a fast operation, compiling and linking are rather slow, so it's better to avoid creating new programs while in the process of drawing an image.</p> <p>Shaders and programs that are no longer needed can be deleted to free up the resources they consume. Use the functions gl.deleteShader(shader) and gl.deleteProgram(program).</p>"},{"location":"cn/c6/s1/#613-\u7ba1\u9053\u4e2d\u7684\u6570\u636e\u6d41","title":"6.1.3 \u7ba1\u9053\u4e2d\u7684\u6570\u636e\u6d41","text":"<p>Data Flow in the Pipeline</p> \u4e2d\u6587\u82f1\u6587 <p>WebGL\u56fe\u5f62\u7ba1\u7ebf\u6e32\u67d3\u56fe\u50cf\u3002\u5b9a\u4e49\u56fe\u50cf\u7684\u6570\u636e\u6765\u81eaJavaScript\u3002\u5f53\u5b83\u901a\u8fc7\u7ba1\u7ebf\u65f6\uff0c\u5b83\u4f1a\u88ab\u5f53\u524d\u7684\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u4ee5\u53ca\u7ba1\u7ebf\u7684\u56fa\u5b9a\u529f\u80fd\u9636\u6bb5\u5904\u7406\u3002\u4f60\u9700\u8981\u4e86\u89e3\u5982\u4f55\u5c06\u6570\u636e\u901a\u8fc7JavaScript\u653e\u7f6e\u5230\u7ba1\u7ebf\u4e2d\uff0c\u4ee5\u53ca\u6570\u636e\u5728\u901a\u8fc7\u7ba1\u7ebf\u65f6\u662f\u5982\u4f55\u88ab\u5904\u7406\u7684\u3002</p> <p>WebGL\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u662f\u7ed8\u5236\u4e00\u4e2a\u51e0\u4f55\u539f\u8bed\u3002WebGL\u53ea\u4f7f\u7528\u57283.1.1\u5c0f\u8282\u4e2d\u4ecb\u7ecd\u7684OpenGL\u539f\u8bed\u4e2d\u7684\u4e03\u4e2a\u3002\u7528\u4e8e\u7ed8\u5236\u56db\u8fb9\u5f62\u548c\u591a\u8fb9\u5f62\u7684\u539f\u8bed\u5df2\u88ab\u79fb\u9664\u3002\u5269\u4f59\u7684\u539f\u8bed\u7ed8\u5236\u70b9\u3001\u7ebf\u6bb5\u548c\u4e09\u89d2\u5f62\u3002\u5728WebGL\u4e2d\uff0c\u4e03\u79cd\u7c7b\u578b\u7684\u539f\u8bed\u7531\u5e38\u91cfgl.POINTS\u3001gl.LINES\u3001gl.LINE_STRIP\u3001gl.LINE_LOOP\u3001gl.TRIANGLES\u3001gl.TRIANGLE_STRIP\u548cgl.TRIANGLE_FAN\u6807\u8bc6\uff0c\u5176\u4e2dgl\u662fWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002</p> <p>\u5f53WebGL\u7528\u4e8e\u7ed8\u5236\u4e00\u4e2a\u539f\u8bed\u65f6\uff0c\u53ef\u4ee5\u4e3a\u539f\u8bed\u63d0\u4f9b\u4e24\u7c7b\u6570\u636e\u3002\u8fd9\u4e24\u79cd\u6570\u636e\u5206\u522b\u79f0\u4e3a\u5c5e\u6027\u53d8\u91cf\uff08\u6216\u7b80\u79f0\u201c\u5c5e\u6027\u201d\uff09\u548c\u7edf\u4e00\u53d8\u91cf\uff08\u6216\u7b80\u79f0\u201c\u7edf\u4e00\u201d\uff09\u3002\u4e00\u4e2a\u539f\u8bed\u7531\u5176\u7c7b\u578b\u548c\u9876\u70b9\u5217\u8868\u5b9a\u4e49\u3002\u5c5e\u6027\u548c\u7edf\u4e00\u7684\u533a\u522b\u5728\u4e8e\uff0c\u7edf\u4e00\u53d8\u91cf\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u503c\uff0c\u5bf9\u6574\u4e2a\u539f\u8bed\u90fd\u662f\u76f8\u540c\u7684\uff0c\u800c\u5c5e\u6027\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u5bf9\u4e0d\u540c\u7684\u9876\u70b9\u4e0d\u540c\u3002</p> <p>\u5e94\u8be5\u59cb\u7ec8\u6307\u5b9a\u7684\u4e00\u4e2a\u5c5e\u6027\u662f\u9876\u70b9\u7684\u5750\u6807\u3002\u9876\u70b9\u5750\u6807\u5fc5\u987b\u662f\u5c5e\u6027\uff0c\u56e0\u4e3a\u539f\u8bed\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u90fd\u6709\u81ea\u5df1\u7684\u5750\u6807\u96c6\u3002\u53e6\u4e00\u4e2a\u53ef\u80fd\u7684\u5c5e\u6027\u662f\u989c\u8272\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0cOpenGL\u5141\u8bb8\u4f60\u4e3a\u539f\u8bed\u7684\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u4e0d\u540c\u7684\u989c\u8272\u3002\u5728WebGL\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u989c\u8272\u5c06\u662f\u4e00\u4e2a\u5c5e\u6027\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u6574\u4e2a\u539f\u8bed\u5177\u6709\u76f8\u540c\u7684\u201c\u7edf\u4e00\u201d\u989c\u8272\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u989c\u8272\u53ef\u4ee5\u662f\u7edf\u4e00\u53d8\u91cf\u3002\u5176\u4ed6\u53ef\u80fd\u6839\u636e\u9700\u8981\u662f\u5c5e\u6027\u6216\u7edf\u4e00\u7684\u6570\u91cf\u5305\u62ec\u6cd5\u5411\u91cf\u548c\u6750\u8d28\u5c5e\u6027\u3002\u5982\u679c\u4f7f\u7528\uff0c\u7eb9\u7406\u5750\u6807\u51e0\u4e4e\u80af\u5b9a\u662f\u5c5e\u6027\uff0c\u56e0\u4e3a\u8ba9\u539f\u8bed\u4e2d\u7684\u6240\u6709\u9876\u70b9\u5177\u6709\u76f8\u540c\u7684\u7eb9\u7406\u5750\u6807\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u5982\u679c\u5bf9\u539f\u8bed\u5e94\u7528\u51e0\u4f55\u53d8\u6362\uff0c\u5b83\u5f88\u81ea\u7136\u5730\u88ab\u8868\u793a\u4e3a\u7edf\u4e00\u53d8\u91cf\u3002</p> <p>\u7136\u800c\uff0c\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0cWebGL\u6ca1\u6709\u4efb\u4f55\u9884\u5b9a\u4e49\u7684\u5c5e\u6027\uff0c\u751a\u81f3\u6ca1\u6709\u9876\u70b9\u5750\u6807\u7684\u5c5e\u6027\u3002\u5728\u53ef\u7f16\u7a0b\u7ba1\u7ebf\u4e2d\uff0c\u4f7f\u7528\u54ea\u4e9b\u5c5e\u6027\u548c\u7edf\u4e00\u5b8c\u5168\u53d6\u51b3\u4e8e\u7a0b\u5e8f\u5458\u3002\u5c31WebGL\u800c\u8a00\uff0c\u5c5e\u6027\u53ea\u662f\u4f20\u9012\u5230\u9876\u70b9\u7740\u8272\u5668\u7684\u503c\u3002\u7edf\u4e00\u53ef\u4ee5\u4f20\u9012\u5230\u9876\u70b9\u7740\u8272\u5668\u3001\u7247\u6bb5\u7740\u8272\u5668\u6216\u4e24\u8005\u3002WebGL\u4e0d\u8d4b\u4e88\u503c\u4efb\u4f55\u610f\u4e49\u3002\u610f\u4e49\u5b8c\u5168\u7531\u7740\u8272\u5668\u5bf9\u503c\u7684\u5904\u7406\u51b3\u5b9a\u3002\u5728\u7ed8\u5236\u539f\u8bed\u65f6\u4f7f\u7528\u7684\u5c5e\u6027\u548c\u7edf\u4e00\u7684\u96c6\u5408\u7531\u7ed8\u5236\u539f\u8bed\u65f6\u4f7f\u7528\u7684\u7740\u8272\u5668\u7684\u6e90\u4ee3\u7801\u786e\u5b9a\u3002</p> <p>\u4e3a\u4e86\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u66f4\u8be6\u7ec6\u5730\u770b\u770b\u7ba1\u7ebf\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u5728\u7ed8\u5236\u539f\u8bed\u65f6\uff0cJavaScript\u7a0b\u5e8f\u4f1a\u4e3a\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u5c5e\u6027\u548c\u7edf\u4e00\u6307\u5b9a\u503c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5c5e\u6027\uff0c\u5b83\u5c06\u6307\u5b9a\u4e00\u4e2a\u503c\u6570\u7ec4\uff0c\u6bcf\u4e2a\u9876\u70b9\u4e00\u4e2a\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7edf\u4e00\uff0c\u5b83\u5c06\u6307\u5b9a\u4e00\u4e2a\u5355\u4e00\u7684\u503c\u3002\u5b83\u5fc5\u987b\u5728\u7ed8\u5236\u539f\u8bed\u4e4b\u524d\u5c06\u8fd9\u4e9b\u503c\u53d1\u9001\u5230GPU\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u5355\u4e2aJavaScript\u51fd\u6570\u6765\u7ed8\u5236\u539f\u8bed\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0cGPU\u63a5\u7ba1\u5e76\u6267\u884c\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u5728\u7ed8\u5236\u539f\u8bed\u65f6\uff0cGPU\u4f1a\u4e3a\u6bcf\u4e2a\u9876\u70b9\u8c03\u7528\u4e00\u6b21\u9876\u70b9\u7740\u8272\u5668\u3002\u8981\u5904\u7406\u7684\u9876\u70b9\u7684\u5c5e\u6027\u503c\u88ab\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u5230\u9876\u70b9\u7740\u8272\u5668\u3002\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u4e5f\u4f1a\u4f20\u9012\u5230\u9876\u70b9\u7740\u8272\u5668\u3002\u8fd9\u662f\u901a\u8fc7\u5c06\u5c5e\u6027\u548c\u7edf\u4e00\u8868\u793a\u4e3a\u9876\u70b9\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u6765\u5b9e\u73b0\u7684\u3002\u5728\u8c03\u7528\u7ed9\u5b9a\u9876\u70b9\u7684\u7740\u8272\u5668\u4e4b\u524d\uff0cGPU\u4f1a\u9002\u5f53\u5730\u8bbe\u7f6e\u8fd9\u4e9b\u53d8\u91cf\u7684\u503c\u3002</p> <p>\u4f5c\u4e3a\u5176\u8f93\u51fa\u4e4b\u4e00\uff0c\u9876\u70b9\u7740\u8272\u5668\u5fc5\u987b\u6307\u5b9a\u9876\u70b9\u5728\u88c1\u526a\u5750\u6807\u7cfb\u4e2d\u7684\u5750\u6807\uff08\u89c13.3.1\u5c0f\u8282\uff09\u3002\u5b83\u901a\u8fc7\u7ed9\u4e00\u4e2a\u540d\u4e3agl_Position\u7684\u7279\u6b8a\u53d8\u91cf\u8d4b\u503c\u6765\u5b9e\u73b0\u3002\u4f4d\u7f6e\u901a\u5e38\u901a\u8fc7\u5bf9\u8868\u793a\u5bf9\u8c61\u5750\u6807\u7cfb\u4e2d\u5750\u6807\u7684\u5c5e\u6027\u5e94\u7528\u53d8\u6362\u6765\u8ba1\u7b97\uff0c\u4f46\u4f4d\u7f6e\u7684\u8ba1\u7b97\u65b9\u5f0f\u5b8c\u5168\u53d6\u51b3\u4e8e\u7a0b\u5e8f\u5458\u3002</p> <p>\u5728\u8ba1\u7b97\u4e86\u539f\u8bed\u4e2d\u6240\u6709\u9876\u70b9\u7684\u4f4d\u7f6e\u4e4b\u540e\uff0c\u7ba1\u7ebf\u4e2d\u7684\u4e00\u4e2a\u56fa\u5b9a\u529f\u80fd\u9636\u6bb5\u4f1a\u88c1\u526a\u6389\u5750\u6807\u8d85\u51fa\u6709\u6548\u88c1\u526a\u5750\u6807\u8303\u56f4\uff08\u6bcf\u4e2a\u5750\u6807\u8f74\u4e0a\u7684-1\u52301\uff09\u7684\u539f\u8bed\u90e8\u5206\u3002\u7136\u540e\uff0c\u539f\u8bed\u88ab\u5149\u6805\u5316\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u786e\u5b9a\u54ea\u4e9b\u50cf\u7d20\u4f4d\u4e8e\u539f\u8bed\u5185\u90e8\u3002\u7136\u540e\uff0cGPU\u4f1a\u4e3a\u539f\u8bed\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u8c03\u7528\u4e00\u6b21\u7247\u6bb5\u7740\u8272\u5668\u3002\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u8bbf\u95ee\u7edf\u4e00\u53d8\u91cf\uff08\u4f46\u4e0d\u80fd\u8bbf\u95ee\u5c5e\u6027\uff09\u3002\u5b83\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3agl_FragCoord\u7684\u7279\u6b8a\u53d8\u91cf\uff0c\u5176\u4e2d\u5305\u542b\u50cf\u7d20\u7684\u88c1\u526a\u5750\u6807\u3002\u50cf\u7d20\u5750\u6807\u662f\u901a\u8fc7\u63d2\u503c\u9876\u70b9\u7740\u8272\u5668\u6307\u5b9a\u7684gl_Position\u503c\u6765\u8ba1\u7b97\u7684\u3002\u63d2\u503c\u662f\u7531\u4f4d\u4e8e\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e4b\u95f4\u7684\u53e6\u4e00\u4e2a\u56fa\u5b9a\u529f\u80fd\u9636\u6bb5\u5b8c\u6210\u7684\u3002</p> <p>\u9664\u4e86\u5750\u6807\u4e4b\u5916\uff0c\u5176\u4ed6\u6570\u91cf\u4e5f\u53ef\u4ee5\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9876\u70b9\u7740\u8272\u5668\u4e3a\u539f\u8bed\u7684\u6bcf\u4e2a\u9876\u70b9\u8ba1\u7b97\u6570\u91cf\u7684\u503c\u3002\u63d2\u503c\u5668\u91c7\u7528\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4e3a\u539f\u8bed\u7684\u6bcf\u4e2a\u9876\u70b9\u751f\u6210\u7684\u503c\uff0c\u5e76\u8ba1\u7b97\u539f\u8bed\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u503c\u3002\u5f53\u7247\u6bb5\u7740\u8272\u5668\u88ab\u8c03\u7528\u4ee5\u5904\u7406\u7ed9\u5b9a\u50cf\u7d20\u65f6\uff0c\u53d8\u5316\u53d8\u91cf\u7684\u503c\u5c31\u662f\u8be5\u50cf\u7d20\u7684\u63d2\u503c\u503c\u3002\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u4e2d\u4f7f\u7528\u8be5\u503c\u3002</p> <p>\u53d8\u5316\u53d8\u91cf\u5b58\u5728\u4e8e\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u3002\u9876\u70b9\u7740\u8272\u5668\u8d1f\u8d23\u7ed9\u53d8\u5316\u53d8\u91cf\u8d4b\u503c\u3002\u539f\u8bed\u7684\u6bcf\u4e2a\u9876\u70b9\u53ef\u4ee5\u7ed9\u53d8\u91cf\u5206\u914d\u4e0d\u540c\u7684\u503c\u3002\u63d2\u503c\u5668\u91c7\u7528\u6267\u884c\u9876\u70b9\u7740\u8272\u5668\u4e3a\u539f\u8bed\u7684\u6bcf\u4e2a\u9876\u70b9\u4ea7\u751f\u7684\u6240\u6709\u503c\uff0c\u5e76\u63d2\u503c\u8fd9\u4e9b\u503c\u4ee5\u4ea7\u751f\u6bcf\u4e2a\u50cf\u7d20\u7684\u503c\u3002\u5f53\u7247\u6bb5\u7740\u8272\u5668\u88ab\u6267\u884c\u4ee5\u5904\u7406\u7ed9\u5b9a\u50cf\u7d20\u65f6\uff0c\u53d8\u5316\u53d8\u91cf\u7684\u503c\u5c31\u662f\u8be5\u50cf\u7d20\u7684\u63d2\u503c\u503c\u3002\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u4e2d\u4f7f\u7528\u8be5\u503c\u3002</p> <p>\u53d8\u5316\u53d8\u91cf\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u4ece\u9876\u70b9\u7740\u8272\u5668\u5411\u7247\u6bb5\u7740\u8272\u5668\u901a\u4fe1\u6570\u636e\u3002\u5b83\u4eec\u5728\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\u5b9a\u4e49\u3002\u5b83\u4eec\u4e0d\u5728\u4f7f\u7528API\u7684JavaScript\u65b9\u9762\u4f7f\u7528\u6216\u5f15\u7528\u3002\u8bf7\u6ce8\u610f\uff0c\u51b3\u5b9a\u5b9a\u4e49\u54ea\u4e9b\u53d8\u5316\u53d8\u91cf\u4ee5\u53ca\u5982\u4f55\u5904\u7406\u5b83\u4eec\u5b8c\u5168\u53d6\u51b3\u4e8e\u7a0b\u5e8f\u5458\u3002</p> <p>\u6211\u4eec\u51e0\u4e4e\u5df2\u7ecf\u5230\u4e86\u7ba1\u7ebf\u7684\u672b\u5c3e\u3002\u5728\u6240\u6709\u8fd9\u4e9b\u4e4b\u540e\uff0c\u7247\u6bb5\u7740\u8272\u5668\u7684\u5de5\u4f5c\u4ec5\u4ec5\u662f\u4e3a\u50cf\u7d20\u6307\u5b9a\u4e00\u79cd\u989c\u8272\u3002\u5b83\u901a\u8fc7\u7ed9\u4e00\u4e2a\u540d\u4e3agl_FragColor\u7684\u7279\u6b8a\u53d8\u91cf\u8d4b\u503c\u6765\u5b9e\u73b0\u3002\u7136\u540e\uff0c\u8be5\u503c\u5c06\u88ab\u7528\u5728\u7ba1\u7ebf\u7684\u5269\u4f59\u56fa\u5b9a\u529f\u80fd\u9636\u6bb5\u4e2d\u3002</p> <p>\u603b\u7ed3\uff1a\u7a0b\u5e8f\u7684JavaScript\u65b9\u9762\u5c06\u5c5e\u6027\u548c\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u53d1\u9001\u5230GPU\uff0c\u7136\u540e\u53d1\u51fa\u7ed8\u5236\u539f\u8bed\u7684\u547d\u4ee4\u3002GPU\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6267\u884c\u4e00\u6b21\u9876\u70b9\u7740\u8272\u5668\u3002\u9876\u70b9\u7740\u8272\u5668\u53ef\u4ee5\u4f7f\u7528\u5c5e\u6027\u548c\u7edf\u4e00\u7684\u503c\u3002\u5b83\u7ed9gl_Position\u548c\u7740\u8272\u5668\u4e2d\u7684\u4efb\u4f55\u53d8\u5316\u53d8\u91cf\u8d4b\u503c\u3002\u5728\u88c1\u526a\u3001\u5149\u6805\u5316\u548c\u63d2\u503c\u4e4b\u540e\uff0cGPU\u4e3a\u539f\u8bed\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u6267\u884c\u4e00\u6b21\u7247\u6bb5\u7740\u8272\u5668\u3002\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u4f7f\u7528\u53d8\u5316\u53d8\u91cf\u3001\u7edf\u4e00\u548cgl_FragCoord\u7684\u503c\u3002\u5b83\u8ba1\u7b97gl_FragColor\u7684\u503c\u3002\u8fd9\u5f20\u56fe\u603b\u7ed3\u4e86\u6570\u636e\u7684\u6d41\u5411\uff1a</p> <p></p> <p>\u8fd9\u5f20\u56fe\u4e0d\u5b8c\u6574\u3002\u8fd8\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u53d8\u91cf\u6211\u8fd8\u6ca1\u6709\u63d0\u5230\u3002\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u7eb9\u7406\u7684\u91cd\u8981\u95ee\u9898\u3002\u4f46\u662f\u5982\u679c\u4f60\u7406\u89e3\u4e86\u8fd9\u5f20\u56fe\uff0c\u4f60\u5c31\u5bf9\u7406\u89e3WebGL\u6709\u4e86\u4e00\u4e2a\u826f\u597d\u7684\u5f00\u7aef\u3002</p> <p>\u5bf9\u4e8eGLSL ES 3.00\uff0c\u76f8\u540c\u7684\u56fe\u9002\u7528\uff0c\u53ea\u662f\u6ca1\u6709\u7279\u6b8a\u7684\u53d8\u91cfgl_FragColor\u3002\u76f8\u53cd\uff0c\u7247\u6bb5\u7740\u8272\u5668\u5fc5\u987b\u5b9a\u4e49\u81ea\u5df1\u7684\u8f93\u51fa\u53d8\u91cf\u6765\u8868\u793a\u989c\u8272\u3002\u5728GLSL ES 1.00\u4e2d\uff0c\u58f0\u660e\u5b9e\u9645\u7740\u8272\u5668\u7a0b\u5e8f\u6e90\u4ee3\u7801\u4e2d\u7684\u53d8\u91cf\u65f6\u4f7f\u7528\u201cattribute\u201d\u548c\u201cvarying\u201d\u3002\u57283.00\u7248\u672c\u7684\u6e90\u4ee3\u7801\u4e2d\uff0c\u5c5e\u6027\u53d8\u91cf\u53d8\u4e3a\u201cin\u201d\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u9876\u70b9\u7740\u8272\u5668\u7684\u8f93\u5165\uff0c\u800c\u53d8\u5316\u53d8\u91cf\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u53d8\u4e3a\u201cout\u201d\u53d8\u91cf\uff0c\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u53d8\u4e3a\u201cin\u201d\u53d8\u91cf\u3002\u53d8\u91cfgl_FragColor\u88ab\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u201cout\u201d\u53d8\u91cf\u66ff\u6362\u3002\u5b9e\u9645\u4e0a\uff0c\u201cin\u201d\u548c\u201cout\u201d\u7684\u4f7f\u7528\u66f4\u9002\u5408\u5177\u6709\u9644\u52a0\u7ba1\u7ebf\u9636\u6bb5\u7684\u7cfb\u7edf\uff0c\u5176\u4e2d\u4e00\u4e2a\u9636\u6bb5\u7684\u201cout\u201d\u53d8\u91cf\u53ef\u4ee5\u6210\u4e3a\u4e0b\u4e00\u4e2a\u9636\u6bb5\u7684\u201cin\u201d\u53d8\u91cf\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u5728\u8ba8\u8bbaWebGL\u65f6\uff0c\u5373\u4f7f\u4f7f\u7528GLSL ES 3.00\uff0c\u4eba\u4eec\u4ecd\u7136\u4f7f\u7528\u5c5e\u6027\u548c\u53d8\u5316\u8fd9\u4e9b\u672f\u8bed\u3002</p> <p>The WebGL graphics pipeline renders an image. The data that defines the image comes from JavaScript. As it passes through the pipeline, it is processed by the current vertex shader and fragment shader as well as by the fixed-function stages of the pipeline. You need to understand how data is placed by JavaScript into the pipeline and how the data is processed as it passes through the pipeline.</p> <p>The basic operation in WebGL is to draw a geometric primitive. WebGL uses just seven of the OpenGL primitives that were introduced in Subsection 3.1.1. The primitives for drawing quads and polygons have been removed. The remaining primitives draw points, line segments, and triangles. In WegGL, the seven types of primitive are identified by the constants gl.POINTS, gl.LINES, gl.LINE_STRIP, gl.LINE_LOOP, gl.TRIANGLES, gl.TRIANGLE_STRIP, and gl.TRIANGLE_FAN, where gl is a WebGL graphics context.</p> <p>When WebGL is used to draw a primitive, there are two general categories of data that can be provided for the primitive. The two kinds of data are referred to as attribute variables (or just \"attributes\") and uniform variables (or just \"uniforms\"). A primitive is defined by its type and by a list of vertices. The difference between attributes and uniforms is that a uniform variable has a single value that is the same for the entire primitive, while the value of an attribute variable can be different for different vertices.</p> <p>One attribute that should always be specified is the coordinates of the vertex. The vertex coordinates must be an attribute since each vertex in a primitive will have its own set of coordinates. Another possible attribute is color. We have seen that OpenGL allows you to specify a different color for each vertex of a primitive. You can do the same thing in WebGL, and in that case the color will be an attribute. On the other hand, maybe you want the entire primitive to have the same, \"uniform\" color; in that case, color can be a uniform variable. Other quantities that could be either attributes or uniforms, depending on your needs, include normal vectors and material properties. Texture coordinates, if they are used, are almost certain to be an attribute, since it doesn't really make sense for all the vertices in a primitive to have the same texture coordinates. If a geometric transform is to be applied to the primitive, it would naturally be represented as a uniform variable.</p> <p>It is important to understand, however, that WebGL does not come with any predefined attributes, not even one for vertex coordinates. In the programmable pipeline, the attributes and uniforms that are used are entirely up to the programmer. As far as WebGL is concerned, attributes are just values that are passed into the vertex shader. Uniforms can be passed into the vertex shader, the fragment shader, or both. WebGL does not assign a meaning to the values. The meaning is entirely determined by what the shaders do with the values. The set of attributes and uniforms that are used in drawing a primitive is determined by the source code of the shaders that are in use when the primitive is drawn.</p> <p>To understand this, we need to look at what happens in the pipeline in a more detail. When drawing a primitive, the JavaScript program specifies values for any attributes and uniforms in the shader program. For each attribute, it will specify an array of values, one for each vertex. For each uniform, it will specify a single value. It must send these values to the GPU before drawing the primitive. The primitive can then be drawn by calling a single JavaScript function. At that point, the GPU takes over, and executes the shader programs. When drawing the primitive, the GPU calls the vertex shader once for each vertex. The attribute values for the vertex that is to be processed are passed as input into the vertex shader. Values of uniform variables are also passed to the vertex shader. The way this works is that both attributes and uniforms are represented as global variables in the vertex shader program. Before calling the shader for a given vertex, the GPU sets the values of those variables appropriately for that specific vertex.</p> <p>As one of its outputs, the vertex shader must specify the coordinates of the vertex in the clip coordinate system (see Subsection 3.3.1). It does that by assigning a value to a special variable named gl_Position. The position is often computed by applying a transformation to the attribute that represents the coordinates in the object coordinate system, but exactly how the position is computed is up to the programmer.</p> <p>After the positions of all the vertices in the primitive have been computed, a fixed-function stage in the pipeline clips away the parts of the primitive whose coordinates are outside the range of valid clip coordinates (\u22121 to 1 along each coordinate axis). The primitive is then rasterized; that is, it is determined which pixels lie inside the primitive. The GPU then calls the fragment shader once for each pixel that lies in the primitive. The fragment shader has access to uniform variables (but not attributes). It can also use a special variable named gl_FragCoord that contains the clip coordinates of the pixel. Pixel coordinates are computed by interpolating the values of gl_Position that were specified by the vertex shader. The interpolation is done by another fixed-function stage that comes between the vertex shader and the fragment shader.</p> <p>Other quantities besides coordinates can work in much that same way. That is, the vertex shader computes a value for the quantity at each vertex of a primitive. An interpolator takes the values at the vertices and computes a value for each pixel in the primitive. The value for a given pixel is then input into the fragment shader when the shader is called to process that pixel. For example, color in OpenGL follows this pattern: The color of an interior pixel of a primitive is computed by interpolating the color at the vertices. In GLSL, this pattern is implemented using varying variables.</p> <p>A varying variable is declared both in the vertex shader and in the fragment shader. The vertex shader is responsible for assigning a value to the varying variable. Each vertex of a primitive can assign a different value to the variable. The interpolator takes all the values produced by executing the vertex shader for each vertex of the primitive, and it interpolates those values to produce a value for each pixel. When the fragment shader is executed for a given pixel, the value of the varying variable is the interpolated value for that pixel. The fragment shader can use the value in its own computations.</p> <p>Varying variables exist to communicate data from the vertex shader to the fragment shader. They are defined in the shader source code. They are not used or referred to in the JavaScript side of the API. Note that it is entirely up to the programmer to decide what varying variables to define and what to do with them.</p> <p>We have almost gotten to the end of the pipeline. After all that, the job of the fragment shader is simply to specify a color for the pixel. It does that by assigning a value to a special variable named gl_FragColor. That value will then be used in the remaining fixed-function stages of the pipeline.</p> <p>To summarize: The JavaScript side of the program sends values for attributes and uniform variables to the GPU and then issues a command to draw a primitive. The GPU executes the vertex shader once for each vertex. The vertex shader can use the values of attributes and uniforms. It assigns values to gl_Position and to any varying variables that exist in the shader. After clipping, rasterization, and interpolation, the GPU executes the fragment shader once for each pixel in the primitive. The fragment shader can use the values of varying variables, uniform variables, and gl_FragCoord. It computes a value for gl_FragColor. This diagram summarizes the flow of data:</p> <p></p> <p>The diagram is not complete. There are a few more special variables that I haven't mentioned. And there is the important question of how textures are used. But if you understand the diagram, you have a good start on understanding WebGL.</p> <p>For GLSL ES 3.00, the same diagram applies, except that there is no special variable gl_FragColor. Instead, the fragment shader must define its own output variable to represent the color. In GLSL ES 1.00, the words \"attribute\" and \"varying\" are used when declaring variables in the actual shader program source code. In source code for the 3.00 version, attribute variables become \"in\" variables, since they are inputs to the vertex shader, and varying variables become \"out\" variables in the vertex shader and \"in\" variables in the fragment shader. And the variable gl_FragColor is replaced by an \"out\" variable in the fragment shader. The use of the terms \"in\" and \"out\" are actually more appropriate to systems with additional pipeline stages, where \"out\" variables from one stage can become \"in\" variables to the next stage. In any case, people still use the terms attribute and varying when discussing WebGL, even if it is using GLSL ES 3.00.</p>"},{"location":"cn/c6/s1/#614-\u7edf\u4e00\u53d8\u91cf\u7684\u503c","title":"6.1.4 \u7edf\u4e00\u53d8\u91cf\u7684\u503c","text":"<p>Values for Uniform Variables</p> \u4e2d\u6587\u82f1\u6587 <p>\u662f\u65f6\u5019\u5f00\u59cb\u770b\u4e00\u4e9b\u5b9e\u9645\u7684WebGL\u4ee3\u7801\u4e86\u3002\u6211\u4eec\u5c06\u9996\u5148\u5173\u6ce8JavaScript\u65b9\u9762\uff0c\u4f46\u4f60\u8fd8\u9700\u8981\u4e86\u89e3\u4e00\u4e9bGLSL\u7684\u57fa\u672c\u77e5\u8bc6\u3002GLSL\u6709\u4e00\u4e9b\u719f\u6089\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff1afloat\u3001int\u548cbool\u3002\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u65b0\u7684\u9884\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u6765\u8868\u793a\u5411\u91cf\u548c\u77e9\u9635\u3002\u4f8b\u5982\uff0c\u6570\u636e\u7c7b\u578bvec3\u8868\u793a3D\u4e2d\u7684\u5411\u91cf\u3002vec3\u53d8\u91cf\u7684\u503c\u662f\u4e09\u4e2a\u6d6e\u70b9\u6570\u7684\u5217\u8868\u3002\u7c7b\u4f3c\u5730\uff0c\u8fd8\u6709\u6570\u636e\u7c7b\u578bvec2\u548cvec4\u6765\u8868\u793a2D\u548c4D\u5411\u91cf\u3002</p> <p>\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u58f0\u660e\u53ef\u4ee5\u6807\u8bb0\u4e3aattribute\u3001varying\u6216uniform\uff08\u6216\u8005\u5728GLSL ES 3.00\u4e2d\u4f5c\u4e3ain\u3001out\u6216uniform\uff0c\u4f46\u518d\u8bf4\u4e00\u6b21\uff0c\u6211\u4eec\u5c06\u6682\u65f6\u575a\u6301\u4f7f\u75281.00\u7248\u672c\uff09\u3002\u6ca1\u6709\u4efb\u4f55\u8fd9\u4e9b\u4fee\u9970\u7b26\u7684\u53d8\u91cf\u58f0\u660e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c40\u90e8\u4e8e\u9876\u70b9\u7740\u8272\u5668\u7684\u53d8\u91cf\u3002\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u662funiform\u6216varying\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u4fee\u9970\u7b26\u58f0\u660e\u3002\u5e94\u5728\u4e24\u4e2a\u7740\u8272\u5668\u4e2d\u58f0\u660e\u53d8\u5316\u53d8\u91cf\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u540d\u79f0\u548c\u7c7b\u578b\u3002\u8fd9\u5141\u8bb8GLSL\u7f16\u8bd1\u5668\u786e\u5b9a\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u4e86\u54ea\u4e9b\u5c5e\u6027\u3001\u7edf\u4e00\u548c\u53d8\u5316\u53d8\u91cf\u3002</p> <p>\u7a0b\u5e8f\u7684JavaScript\u65b9\u9762\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u5f15\u7528\u7279\u5b9a\u7684\u5c5e\u6027\u548c\u7edf\u4e00\u53d8\u91cf\u3002\u51fd\u6570gl.getUniformLocation\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7edf\u4e00\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u5176\u4e2dgl\u6307\u7684\u662fWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u7531gl.createProgram\u8fd4\u56de\u7684\u7f16\u8bd1\u7a0b\u5e8f\u7684\u6807\u8bc6\u7b26\uff0c\u4ee5\u53ca\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\u7edf\u4e00\u53d8\u91cf\u7684\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u5982\u679cprog\u6807\u8bc6\u4e86\u4e00\u4e2a\u5177\u6709\u540d\u4e3acolor\u7684\u7edf\u4e00\u53d8\u91cf\u7684\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0bJavaScript\u8bed\u53e5\u83b7\u53d6color\u53d8\u91cf\u7684\u4f4d\u7f6e\uff1a</p> <pre><code>colorUniformLoc = gl.getUniformLocation( prog, \"color\" );\n</code></pre> <p>\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6ecolorUniformLoc\u6765\u8bbe\u7f6e\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u3002\u4f8b\u5982\uff1a</p> <pre><code>gl.uniform3f( colorUniformLoc, 1, 0, 0 );\n</code></pre> <p>\u51fd\u6570gl.uniform3f\u662f\u4e00\u7cfb\u5217\u53ef\u4ee5\u4f5c\u4e3agl.uniform\u7ec4\u7684\u51fd\u6570\u4e4b\u4e00\u3002\u8fd9\u7c7b\u4f3c\u4e8eOpenGL 1.1\u4e2d\u7684glVertex\u7cfb\u5217\u3002\u4ee3\u8868\u4e00\u4e2a\u540e\u7f00\uff0c\u8868\u793a\u4e3a\u53d8\u91cf\u63d0\u4f9b\u7684\u503c\u7684\u6570\u91cf\u548c\u7c7b\u578b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cgl.uniform3f\u63a5\u53d7\u4e09\u4e2a\u6d6e\u70b9\u503c\uff0c\u9002\u7528\u4e8e\u8bbe\u7f6e\u7c7b\u578b\u4e3avec3\u7684\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u3002\u503c\u7684\u6570\u91cf\u53ef\u4ee5\u662f1\u30012\u30013\u62164\u3002\u7c7b\u578b\u53ef\u4ee5\u662f\u201cf\u201d\u8868\u793a\u6d6e\u70b9\u6570\u6216\u201ci\u201d\u8868\u793a\u6574\u6570\u3002\uff08\u5bf9\u4e8e\u5e03\u5c14\u7edf\u4e00\u53d8\u91cf\uff0c\u5e94\u4f7f\u7528gl.uniform1i\u5e76\u5c060\u4f20\u9012\u4ee5\u8868\u793afalse\u62161\u4ee5\u8868\u793atrue*\u3002\uff09\u5982\u679c\u5728\u540e\u7f00\u4e2d\u6dfb\u52a0\u201cv\u201d\uff0c\u5219\u503c\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u4f20\u9012\u3002\u4f8b\u5982\uff0c</p> <pre><code>gl.uniform3fv( colorUniformLoc, [ 1, 0, 0 ] );\n</code></pre> <p>\u8fd8\u6709\u53e6\u4e00\u7ec4\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7edf\u4e00\u77e9\u9635\u53d8\u91cf\u7684\u503c\u3002\u6211\u4eec\u7a0d\u540e\u4f1a\u8bb2\u5230\u3002</p> <p>\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u7f16\u8bd1\u540e\u7684\u4efb\u4f55\u65f6\u95f4\u8bbe\u7f6e\uff0c\u5e76\u4e14\u8be5\u503c\u4e00\u76f4\u6709\u6548\uff0c\u76f4\u5230\u901a\u8fc7\u53e6\u4e00\u6b21\u8c03\u7528gl.uniform*\u6765\u66f4\u6539\u3002</p> <p>\u5982\u679c\u4f20\u9012\u7ed9gl.getUniformLocation\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u7edf\u4e00\u53d8\u91cf\u540d\u79f0\uff0c\u90a3\u4e48\u8fd4\u56de\u503c\u5c06\u662fnull\u3002\u5982\u679c\u7edf\u4e00\u53d8\u91cf\u5728\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\u58f0\u660e\u4f46\u4e0d\u5728\u7a0b\u5e8f\u4e2d\u201c\u6d3b\u8dc3\u201d\uff0c\u5219\u8fd4\u56de\u503c\u4e5f\u53ef\u80fd\u662fnull\u3002\u4e00\u4e2a\u58f0\u660e\u4f46\u6ca1\u6709\u5b9e\u9645\u4f7f\u7528\u7684\u53d8\u91cf\u4e0d\u662f\u6d3b\u8dc3\u7684\uff0c\u5b83\u5728\u7f16\u8bd1\u7a0b\u5e8f\u4e2d\u4e0d\u4f1a\u83b7\u5f97\u4f4d\u7f6e\u3002\u8fd9\u5076\u5c14\u7ed9\u6211\u5e26\u6765\u4e86\u95ee\u9898\uff0c\u5f53\u6211\u4e3a\u4e86\u8c03\u8bd5\u76ee\u7684\u6ce8\u91ca\u6389\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u5e76\u4e0d\u5c0f\u5fc3\u901a\u8fc7\u8fd9\u6837\u505a\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53d8\u4e3a\u975e\u6d3b\u8dc3\u72b6\u6001\u3002</p> <p>It's time to start looking at some actual WebGL code. We will concentrate on the JavaScript side first, but you need to know a little about GLSL. GLSL has some familiar basic data types: float, int, and bool. But it also has some new predefined data types to represent vectors and matrices. For example, the data type vec3 represents a vector in 3D. The value of a vec3 variable is a list of three floating-point numbers. Similarly, there are data types vec2 and vec4 to represent 2D and 4D vectors.</p> <p>Global variable declarations in a vertex shader can be marked as attribute, varying, or uniform (or as in, out, or uniform in GLSL ES 3.00, but again, we will stick to the 1.00 version for the time being). A variable declaration with none of these modifiers defines a variable that is local to the vertex shader. Global variables in a fragment can optionally be uniform or varying, or they can be declared without a modifier. A varying variable should be declared in both shaders, with the same name and type. This allows the GLSL compiler to determine what attribute, uniform, and varying variables are used in a shader program.</p> <p>The JavaScript side of the program needs a way to refer to particular attributes and uniform variables. The function gl.getUniformLocation can be used to get a reference to a uniform variable in a shader program, where gl refers to the WebGL graphics context. It takes as parameters the identifier for the compiled program, which was returned by gl.createProgram, and the name of the uniform variable in the shader source code. For example, if prog identifies a shader program that has a uniform variable named color, then the location of the color variable can be obtained with the JavaScript statement</p> <pre><code>colorUniformLoc = gl.getUniformLocation( prog, \"color\" );\n</code></pre> <p>The location colorUniformLoc can then be used to set the value of the uniform variable. For example:</p> <pre><code>gl.uniform3f( colorUniformLoc, 1, 0, 0 );\n</code></pre> <p>The function gl.uniform3f is one of a family of functions that can be referred to as a group as gl.uniform*. This is similar to the family glVertex* in OpenGL 1.1. The * represents a suffix that tells the number and type of values that are provided for the variable. In this case, gl.uniform3f takes three floating point values, and it is appropriate for setting the value of a uniform variable of type vec3. The number of values can be 1, 2, 3, or 4. The type can be \"f\" for floating point or \"i\" for integer. (For a boolean uniform, you should use gl.uniform1i and pass 0 to represent false or 1 to represent true.) If a \"v\" is added to the suffix, then the values are passed in an array. For example,</p> <pre><code>gl.uniform3fv( colorUniformLoc, [ 1, 0, 0 ] );\n</code></pre> <p>There is another family of functions for setting the value of uniform matrix variables. We will get to that later.</p> <p>The value of a uniform variable can be set any time after the shader program has been compiled, and the value remains in effect until it is changed by another call to gl.uniform*.</p> <p>If the string that is passed as the second parameter gl.getUniformLocation is not the name of a uniform variable in the shader programs, then the return value is null. The return value can also be null if the uniform variable is declared in the shader source code but is not \"active\" in the program. A variable that is declared but not actually used is not active, and it does not get a location in the compiled program. This has occasionally caused problems for me, when I commented out part of a shader program for debugging purposes, and accidentally made a variable inactive by doing so.</p>"},{"location":"cn/c6/s1/#615-\u5c5e\u6027\u503c","title":"6.1.5 \u5c5e\u6027\u503c","text":"<p>Values for Attributes</p> \u4e2d\u6587\u82f1\u6587 <p>\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u5b9e\u9645\u7684WebGL\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u9996\u5148\u5173\u6ce8JavaScript\u65b9\u9762\uff0c\u4f46\u4f60\u8fd8\u9700\u8981\u4e86\u89e3\u4e00\u4e9bGLSL\u7684\u57fa\u672c\u77e5\u8bc6\u3002GLSL\u6709\u4e00\u4e9b\u719f\u6089\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff1afloat\u3001int\u548cbool\u3002\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u65b0\u7684\u9884\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u6765\u8868\u793a\u5411\u91cf\u548c\u77e9\u9635\u3002\u4f8b\u5982\uff0c\u6570\u636e\u7c7b\u578bvec3\u8868\u793a3D\u4e2d\u7684\u5411\u91cf\u3002vec3\u53d8\u91cf\u7684\u503c\u662f\u4e09\u4e2a\u6d6e\u70b9\u6570\u7684\u5217\u8868\u3002\u7c7b\u4f3c\u5730\uff0c\u8fd8\u6709\u6570\u636e\u7c7b\u578bvec2\u548cvec4\u6765\u8868\u793a2D\u548c4D\u5411\u91cf\u3002</p> <p>\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u58f0\u660e\u53ef\u4ee5\u6807\u8bb0\u4e3aattribute\u3001varying\u6216uniform\uff08\u6216\u8005\u5728GLSL ES 3.00\u4e2d\u4f5c\u4e3ain\u3001out\u6216uniform\uff0c\u4f46\u518d\u8bf4\u4e00\u6b21\uff0c\u6211\u4eec\u5c06\u6682\u65f6\u575a\u6301\u4f7f\u75281.00\u7248\u672c\uff09\u3002\u6ca1\u6709\u4efb\u4f55\u8fd9\u4e9b\u4fee\u9970\u7b26\u7684\u53d8\u91cf\u58f0\u660e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c40\u90e8\u4e8e\u9876\u70b9\u7740\u8272\u5668\u7684\u53d8\u91cf\u3002\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u662funiform\u6216varying\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u4fee\u9970\u7b26\u58f0\u660e\u3002\u5e94\u5728\u4e24\u4e2a\u7740\u8272\u5668\u4e2d\u58f0\u660e\u53d8\u5316\u53d8\u91cf\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u540d\u79f0\u548c\u7c7b\u578b\u3002\u8fd9\u5141\u8bb8GLSL\u7f16\u8bd1\u5668\u786e\u5b9a\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u4e86\u54ea\u4e9b\u5c5e\u6027\u3001\u7edf\u4e00\u548c\u53d8\u5316\u53d8\u91cf\u3002</p> <p>\u7a0b\u5e8f\u7684JavaScript\u65b9\u9762\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u5f15\u7528\u7279\u5b9a\u7684\u5c5e\u6027\u548c\u7edf\u4e00\u53d8\u91cf\u3002\u51fd\u6570gl.getUniformLocation\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7edf\u4e00\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u5176\u4e2dgl\u6307\u7684\u662fWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u7531gl.createProgram\u8fd4\u56de\u7684\u7f16\u8bd1\u7a0b\u5e8f\u7684\u6807\u8bc6\u7b26\uff0c\u4ee5\u53ca\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\u7edf\u4e00\u53d8\u91cf\u7684\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u5982\u679cprog\u6807\u8bc6\u4e86\u4e00\u4e2a\u5177\u6709\u540d\u4e3acolor\u7684\u7edf\u4e00\u53d8\u91cf\u7684\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0bJavaScript\u8bed\u53e5\u83b7\u53d6color\u53d8\u91cf\u7684\u4f4d\u7f6e\uff1a</p> <pre><code>colorUniformLoc = gl.getUniformLocation( prog, \"color\" );\n</code></pre> <p>\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6ecolorUniformLoc\u6765\u8bbe\u7f6e\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u3002\u4f8b\u5982\uff1a</p> <pre><code>gl.uniform3f( colorUniformLoc, 1, 0, 0 );\n</code></pre> <p>\u51fd\u6570gl.uniform3f\u662f\u4e00\u7cfb\u5217\u53ef\u4ee5\u4f5c\u4e3agl.uniform\u7ec4\u7684\u51fd\u6570\u4e4b\u4e00\u3002\u8fd9\u7c7b\u4f3c\u4e8eOpenGL 1.1\u4e2d\u7684glVertex\u7cfb\u5217\u3002\u4ee3\u8868\u4e00\u4e2a\u540e\u7f00\uff0c\u8868\u793a\u4e3a\u53d8\u91cf\u63d0\u4f9b\u7684\u503c\u7684\u6570\u91cf\u548c\u7c7b\u578b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cgl.uniform3f\u63a5\u53d7\u4e09\u4e2a\u6d6e\u70b9\u503c\uff0c\u9002\u7528\u4e8e\u8bbe\u7f6e\u7c7b\u578b\u4e3avec3\u7684\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u3002\u503c\u7684\u6570\u91cf\u53ef\u4ee5\u662f1\u30012\u30013\u62164\u3002\u7c7b\u578b\u53ef\u4ee5\u662f\u201cf\u201d\u8868\u793a\u6d6e\u70b9\u6570\u6216\u201ci\u201d\u8868\u793a\u6574\u6570\u3002\uff08\u5bf9\u4e8e\u5e03\u5c14\u7edf\u4e00\u53d8\u91cf\uff0c\u5e94\u4f7f\u7528gl.uniform1i\u5e76\u5c060\u4f20\u9012\u4ee5\u8868\u793afalse\u62161\u4ee5\u8868\u793atrue*\u3002\uff09\u5982\u679c\u5728\u540e\u7f00\u4e2d\u6dfb\u52a0\u201cv\u201d\uff0c\u5219\u503c\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u4f20\u9012\u3002\u4f8b\u5982\uff0c</p> <pre><code>gl.uniform3fv( colorUniformLoc, [ 1, 0, 0 ] );\n</code></pre> <p>\u8fd8\u6709\u53e6\u4e00\u7ec4\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7edf\u4e00\u77e9\u9635\u53d8\u91cf\u7684\u503c\u3002\u6211\u4eec\u7a0d\u540e\u4f1a\u8bb2\u5230\u3002</p> <p>\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u7f16\u8bd1\u540e\u7684\u4efb\u4f55\u65f6\u95f4\u8bbe\u7f6e\uff0c\u5e76\u4e14\u8be5\u503c\u4e00\u76f4\u6709\u6548\uff0c\u76f4\u5230\u901a\u8fc7\u53e6\u4e00\u6b21\u8c03\u7528gl.uniform*\u6765\u66f4\u6539\u3002</p> <p>\u5982\u679c\u4f20\u9012\u7ed9gl.getUniformLocation\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u7edf\u4e00\u53d8\u91cf\u540d\u79f0\uff0c\u90a3\u4e48\u8fd4\u56de\u503c\u5c06\u662fnull\u3002\u5982\u679c\u7edf\u4e00\u53d8\u91cf\u5728\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\u58f0\u660e\u4f46\u4e0d\u5728\u7a0b\u5e8f\u4e2d\u201c\u6d3b\u8dc3\u201d\uff0c\u5219\u8fd4\u56de\u503c\u4e5f\u53ef\u80fd\u662fnull\u3002\u4e00\u4e2a\u58f0\u660e\u4f46\u6ca1\u6709\u5b9e\u9645\u4f7f\u7528\u7684\u53d8\u91cf\u4e0d\u662f\u6d3b\u8dc3\u7684\uff0c\u5b83\u5728\u7f16\u8bd1\u7a0b\u5e8f\u4e2d\u4e0d\u4f1a\u83b7\u5f97\u4f4d\u7f6e\u3002\u8fd9\u5076\u5c14\u7ed9\u6211\u5e26\u6765\u4e86\u95ee\u9898\uff0c\u5f53\u6211\u4e3a\u4e86\u8c03\u8bd5\u76ee\u7684\u6ce8\u91ca\u6389\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u5e76\u4e0d\u5c0f\u5fc3\u901a\u8fc7\u8fd9\u6837\u505a\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53d8\u4e3a\u975e\u6d3b\u8dc3\u72b6\u6001\u3002</p> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5c5e\u6027\uff0c\u60c5\u51b5\u5c31\u66f4\u52a0\u590d\u6742\u4e86\uff0c\u56e0\u4e3a\u5c5e\u6027\u5728\u539f\u8bed\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c\u3002\u57fa\u672c\u601d\u60f3\u662f\u5728\u5355\u4e2a\u64cd\u4f5c\u4e2d\u5c06\u5c5e\u6027\u7684\u5b8c\u6574\u6570\u636e\u96c6\u4eceJavaScript\u6570\u7ec4\u590d\u5236\u5230GPU\u53ef\u4ee5\u8bbf\u95ee\u7684\u5185\u5b58\u4e2d\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8bbe\u7f6e\u4f7f\u8be5\u64cd\u4f5c\u6210\u4e3a\u53ef\u80fd\u7684\u8fc7\u7a0b\u5e76\u4e0d\u7b80\u5355\u3002</p> <p>\u9996\u5148\uff0c\u666e\u901a\u7684JavaScript\u6570\u7ec4\u4e0d\u9002\u5408\u8fd9\u4e2a\u76ee\u7684\u3002\u4e3a\u4e86\u6548\u7387\uff0c\u6211\u4eec\u9700\u8981\u6570\u636e\u5b58\u50a8\u5728\u8fde\u7eed\u5185\u5b58\u4f4d\u7f6e\u7684\u6570\u503c\u5757\u4e2d\uff0c\u800c\u5e38\u89c4\u7684JavaScript\u6570\u7ec4\u6ca1\u6709\u8fd9\u79cd\u5f62\u5f0f\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cJavaScript\u5f15\u5165\u4e86\u4e00\u79cd\u65b0\u578b\u6570\u7ec4\uff0c\u79f0\u4e3a\u7c7b\u578b\u5316\u6570\u7ec4\u3002\u6211\u4eec\u5728\u7b2c5\u7ae0\u4e2d\u4f7f\u7528three.js\u65f6\u9047\u5230\u4e86\u7c7b\u578b\u5316\u6570\u7ec4\u3002\u57285.1.4\u5c0f\u8282\u4e2d\u6709\u7c7b\u578b\u5316\u6570\u7ec4\u7684\u7b80\u77ed\u4ecb\u7ecd\u3002\u7c7b\u578b\u5316\u6570\u7ec4\u6709\u56fa\u5b9a\u957f\u5ea6\uff0c\u5728\u521b\u5efa\u65f6\u5206\u914d\uff0c\u5e76\u4e14\u53ea\u80fd\u4fdd\u5b58\u6307\u5b9a\u7c7b\u578b\u7684\u6570\u5b57\u3002\u4e0d\u540c\u7c7b\u578b\u7684\u7c7b\u578b\u5316\u6570\u7ec4\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u503c\u6570\u636e\u3002\u73b0\u5728\u6211\u4eec\u5c06\u4f7f\u7528Float32Array\uff0c\u5b83\u4fdd\u5b5832\u4f4d\u6d6e\u70b9\u6570\u3002\u4e00\u65e6\u4f60\u6709\u4e86\u7c7b\u578b\u5316\u6570\u7ec4\uff0c\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528\u5e38\u89c4\u6570\u7ec4\u4e00\u6837\u4f7f\u7528\u5b83\uff0c\u4f46\u662f\u5f53\u4f60\u7ed9Float32Array\u7684\u5143\u7d20\u5206\u914d\u4efb\u4f55\u503c\u65f6\uff0c\u8be5\u503c\u4f1a\u88ab\u8f6c\u6362\u4e3a32\u4f4d\u6d6e\u70b9\u6570\u3002\u5982\u679c\u503c\u4e0d\u80fd\u88ab\u89e3\u91ca\u4e3a\u6570\u5b57\uff0c\u5b83\u5c06\u88ab\u8f6c\u6362\u4e3aNaN\uff0c\u5373\u201c\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\u201d\u7684\u503c\u3002</p> <p>\u5728\u6570\u636e\u53ef\u4ee5\u4eceJavaScript\u4f20\u8f93\u5230\u5c5e\u6027\u53d8\u91cf\u4e4b\u524d\uff0c\u5b83\u5fc5\u987b\u88ab\u653e\u7f6e\u5230\u7c7b\u578b\u5316\u6570\u7ec4\u4e2d\u3002\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u4e3a\u4e86\u6548\u7387\uff0c\u4f60\u5e94\u8be5\u76f4\u63a5\u4f7f\u7528\u7c7b\u578b\u5316\u6570\u7ec4\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5e38\u89c4\u7684JavaScript\u6570\u7ec4\uff0c\u7136\u540e\u590d\u5236\u6570\u636e\u5230\u7c7b\u578b\u5316\u6570\u7ec4\u4e2d\u3002</p> <p>\u5728WebGL\u4e2d\u4f7f\u7528\u5c5e\u6027\u6570\u636e\uff0c\u5fc5\u987b\u5c06\u5176\u4f20\u8f93\u5230VBO\uff08\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61\uff09\u3002VBO\u5728OpenGL 1.5\u4e2d\u5f15\u5165\uff0c\u5e76\u57283.4.4\u5c0f\u8282\u4e2d\u7b80\u8981\u8ba8\u8bba\u8fc7\u3002VBO\u662fGPU\u53ef\u4ee5\u8bbf\u95ee\u7684\u5185\u5b58\u5757\u3002\u8981\u4f7f\u7528VBO\uff0c\u4f60\u5fc5\u987b\u9996\u5148\u8c03\u7528\u51fd\u6570gl.createBuffer()\u6765\u521b\u5efa\u5b83\u3002\u4f8b\u5982\uff0c</p> <pre><code>colorBuffer = gl.createBuffer();\n</code></pre> <p>\u5728\u5c06\u6570\u636e\u4f20\u8f93\u5230VBO\u4e4b\u524d\uff0c\u4f60\u5fc5\u987b\u201c\u7ed1\u5b9a\u201dVBO\uff1a</p> <pre><code>gl.bindBuffer( gl.ARRAY_BUFFER, colorBuffer );\n</code></pre> <p>gl.bindBuffer\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u79f0\u4e3a\u201c\u76ee\u6807\u201d\u3002\u5b83\u6307\u5b9a\u4e86VBO\u7684\u7528\u9014\u3002\u76ee\u6807gl.ARRAY_BUFFER\u7528\u4e8e\u5b58\u50a8\u5c5e\u6027\u7684\u503c\u3002\u4e00\u6b21\u53ea\u80fd\u5c06\u4e00\u4e2aVBO\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u76ee\u6807\u3002</p> <p>\u4f20\u8f93\u6570\u636e\u5230VBO\u7684\u51fd\u6570\u6ca1\u6709\u63d0\u5230VBO\u2014\u2014\u800c\u662f\u4f7f\u7528\u5f53\u524d\u7ed1\u5b9a\u7684VBO\u3002\u8981\u5c06\u6570\u636e\u590d\u5236\u5230\u8be5\u7f13\u51b2\u533a\uff0c\u4f7f\u7528gl.bufferData()\u3002\u4f8b\u5982\uff1a</p> <pre><code>gl.bufferData(gl.ARRAY_BUFFER, colorArray, gl.STATIC_DRAW);\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u518d\u6b21\u662f\u76ee\u6807\u3002\u6570\u636e\u88ab\u4f20\u8f93\u5230\u7ed1\u5b9a\u5230\u8be5\u76ee\u6807\u7684VBO\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5728JavaScript\u65b9\u9762\u6301\u6709\u6570\u636e\u7684\u7c7b\u578b\u5316\u6570\u7ec4\u3002\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u88ab\u590d\u5236\u5230\u7f13\u51b2\u533a\uff0c\u6570\u7ec4\u7684\u5927\u5c0f\u51b3\u5b9a\u4e86\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3002\u6ce8\u610f\uff0c\u8fd9\u662f\u539f\u59cb\u6570\u636e\u5b57\u8282\u7684\u76f4\u63a5\u4f20\u8f93\uff1bWebGL\u4e0d\u8bb0\u5f97\u6570\u636e\u662f\u5426\u8868\u793a\u6d6e\u70b9\u6570\u6216\u6574\u6570\u6216\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u3002</p> <p>gl.bufferData\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5e38\u91cfgl.STATIC_DRAW\u3001gl.STREAM_DRAW\u6216gl.DYNAMIC_DRAW\u4e4b\u4e00\u3002\u5b83\u662f\u5bf9WebGL\u7684\u63d0\u793a\uff0c\u8bf4\u660e\u6570\u636e\u5c06\u5982\u4f55\u4f7f\u7528\uff0c\u5b83\u5e2e\u52a9WebGL\u4ee5\u6700\u6709\u6548\u7684\u65b9\u5f0f\u7ba1\u7406\u6570\u636e\u3002\u503cgl.STATIC_DRAW\u610f\u5473\u7740\u60a8\u6253\u7b97\u591a\u6b21\u4f7f\u7528\u6570\u636e\u800c\u4e0d\u66f4\u6539\u5b83\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5c06\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u671f\u95f4\u4f7f\u7528gl.STATIC_DRAW\u5c06\u5176\u52a0\u8f7d\u5230\u7f13\u51b2\u533a\u4e00\u6b21\u3002WebGL\u53ef\u80fd\u4f1a\u5c06\u6570\u636e\u5b58\u50a8\u5728\u56fe\u5f62\u5361\u672c\u8eab\u4e0a\uff0c\u4ee5\u4fbf\u56fe\u5f62\u786c\u4ef6\u53ef\u4ee5\u6700\u5feb\u901f\u5730\u8bbf\u95ee\u3002\u7b2c\u4e8c\u4e2a\u503cgl.STEAM_DRAW\u7528\u4e8e\u4ec5\u4f7f\u7528\u4e00\u6b21\u6216\u6700\u591a\u51e0\u6b21\u7684\u6570\u636e\u3002\uff08\u5f53\u9700\u8981\u65f6\uff0c\u5b83\u53ef\u4ee5\u201c\u6d41\u5f0f\u4f20\u8f93\u201d\u5230\u5361\u4e0a\u3002\uff09\u503cgl.DYNAMIC_DRAW\u4ecb\u4e8e\u5176\u4ed6\u4e24\u4e2a\u503c\u4e4b\u95f4\uff1b\u5b83\u9002\u7528\u4e8e\u5c06\u591a\u6b21\u4f7f\u7528\u4f46\u4f1a\u4fee\u6539\u7684\u6570\u636e\u3002</p> <p>\u5c06\u5c5e\u6027\u6570\u636e\u653e\u5165VBO\u53ea\u662f\u6545\u4e8b\u7684\u4e00\u90e8\u5206\u3002\u60a8\u8fd8\u5fc5\u987b\u544a\u8bc9WebGL\u5c06VBO\u7528\u4f5c\u5c5e\u6027\u7684\u503c\u6e90\u3002\u9996\u5148\uff0c\u60a8\u9700\u8981\u77e5\u9053\u5c5e\u6027\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4f4d\u7f6e\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528gl.getAttribLocation\u6765\u786e\u5b9a\u3002\u4f8b\u5982\uff0c</p> <pre><code>colorAttribLoc = gl.getAttribLocation(prog, \"a_color\");\n</code></pre> <p>\u8fd9\u5047\u8bbeprog\u662f\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u201ca_color\u201d\u662f\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7684\u5c5e\u6027\u53d8\u91cf\u7684\u540d\u79f0\u3002\u8fd9\u4e0egl.getUniformLocation\u5b8c\u5168\u7c7b\u4f3c\uff08\u9664\u4e86\u8fd4\u56de\u503c\u662f\u6574\u6570\uff0c\u5982\u679c\u8bf7\u6c42\u7684\u5c5e\u6027\u4e0d\u5b58\u5728\u6216\u4e0d\u6d3b\u8dc3\uff0c\u5219\u4e3a-1\uff09\u3002</p> <p>\u5c3d\u7ba1\u5c5e\u6027\u901a\u5e38\u5728\u4e0d\u540c\u9876\u70b9\u5904\u53d6\u4e0d\u540c\u7684\u503c\uff0c\u4f46\u6709\u53ef\u80fd\u5728\u6bcf\u4e2a\u9876\u70b9\u5904\u4f7f\u7528\u76f8\u540c\u7684\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u9ed8\u8ba4\u884c\u4e3a\u3002\u53ef\u4ee5\u901a\u8fc7gl.vertexAttrib\u7cfb\u5217\u51fd\u6570\u4e3a\u6240\u6709\u9876\u70b9\u8bbe\u7f6e\u5355\u4e00\u5c5e\u6027\u503c\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8egl.uniform**\u3002\u5728\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u60f3\u8981\u4eceVBO\u4e2d\u83b7\u53d6\u5c5e\u6027\u7684\u503c\uff0c\u60a8\u5fc5\u987b\u542f\u7528\u8be5\u5c5e\u6027\u7684VBO\u4f7f\u7528\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528</p> <pre><code>gl.enableVertexAttribArray( colorAttribLoc );\n</code></pre> <p>\u6765\u5b8c\u6210\uff0c\u53c2\u6570\u662f\u5c5e\u6027\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7531gl.getAttribLocation()\u8c03\u7528\u8fd4\u56de\u3002\u6b64\u547d\u4ee4\u4e0e\u4efb\u4f55\u7279\u5b9a\u7684VBO\u65e0\u5173\u3002\u5b83\u53ea\u662f\u6253\u5f00\u4e86\u6307\u5b9a\u5c5e\u6027\u7684\u7f13\u51b2\u533a\u4f7f\u7528\u3002\u901a\u5e38\uff0c\u5728\u521d\u59cb\u5316\u671f\u95f4\u53ea\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u4e00\u6b21\u662f\u5408\u7406\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528</p> <pre><code>gl.disableVertexAttribArray( colorAttribLoc );\n</code></pre> <p>\u6765\u5173\u95edVBO\u6570\u636e\u7684\u4f7f\u7528\u3002\u6700\u540e\uff0c\u5728\u60a8\u7ed8\u5236\u4f7f\u7528VBO\u5c5e\u6027\u6570\u636e\u7684\u539f\u8bed\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u544a\u8bc9WebGL\u54ea\u4e2a\u7f13\u51b2\u533a\u5305\u542b\u6570\u636e\u4ee5\u53ca\u5982\u4f55\u89e3\u91ca\u8be5\u7f13\u51b2\u533a\u4e2d\u7684\u4f4d\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7gl.vertexAttribPointer()\u6765\u5b8c\u6210\u3002\u8c03\u7528\u6b64\u51fd\u6570\u65f6\uff0cVBO\u5fc5\u987b\u7ed1\u5b9a\u5230ARRAY_BUFFER\u76ee\u6807\u3002\u4f8b\u5982\uff0c</p> <pre><code>gl.bindBuffer( gl.ARRAY_BUFFER, colorBuffer );\ngl.vertexAttribPointer( colorAttribLoc, 3, gl.FLOAT, false, 0, 0 );\n</code></pre> <p>\u5047\u8bbecolorBuffer\u6307\u4ee3VBO\uff0c\u800ccolorAttribLoc\u662f\u5c5e\u6027\u7684\u4f4d\u7f6e\uff0c\u8fd9\u544a\u8bc9WebGL\u4ece\u8be5\u7f13\u51b2\u533a\u83b7\u53d6\u5c5e\u6027\u7684\u503c\u3002\u901a\u5e38\uff0c\u4f60\u4f1a\u5728\u8c03\u7528gl.vertexAttribPointer()\u4e4b\u524d\u8c03\u7528gl.bindBuffer()\uff0c\u4f46\u5982\u679c\u6240\u9700\u7684\u7f13\u51b2\u533a\u5df2\u7ecf\u88ab\u7ed1\u5b9a\uff0c\u90a3\u5c31\u4e0d\u5fc5\u4e86\u3002</p> <p>gl.vertexAttribPointer\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5c5e\u6027\u4f4d\u7f6e\u3002\u7b2c\u4e8c\u4e2a\u662f\u6bcf\u4e2a\u9876\u70b9\u7684\u503c\u7684\u6570\u91cf\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4e3avec2\u63d0\u4f9b\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u662f2\uff0c\u4f60\u5c06\u4e3a\u6bcf\u4e2a\u9876\u70b9\u63d0\u4f9b\u4e24\u4e2a\u6570\u5b57\uff1b\u5bf9\u4e8evec3\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u662f3\uff1b\u5bf9\u4e8efloat\uff0c\u5b83\u5c06\u662f1\u3002\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86\u6bcf\u4e2a\u503c\u7684\u7c7b\u578b\u3002\u5728\u8fd9\u91cc\uff0cgl.FLOAT\u8868\u793a\u6bcf\u4e2a\u503c\u662f\u4e00\u4e2a32\u4f4d\u6d6e\u70b9\u6570\u3002\u5176\u4ed6\u503c\u5305\u62ecgl.BYTE\u3001gl.UNSIGNED_BYTE\u3001gl.UNSIGNED_SHORT\u548cgl.SHORT\uff0c\u7528\u4e8e\u6574\u6570\u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u5728WebGL 1.0\u4e2d\uff0c\u6240\u6709\u5c5e\u6027\u90fd\u662f\u6d6e\u70b9\u503c\uff1b\u5982\u679c\u4f60\u4e3a\u5c5e\u6027\u63d0\u4f9b\u6574\u6570\u503c\uff0c\u5b83\u4eec\u5c06\u88ab\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u3002\u53c2\u6570\u503c\u5e94\u4e0e\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u76f8\u5339\u914d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6570\u636e\u6765\u81eaFloat32Array\uff0c\u90a3\u4e48\u53c2\u6570\u5e94\u8be5\u662fgl.FLOAT\u3002\u5728\u8c03\u7528gl.vertexAttribPointer\u65f6\uff0c\u6211\u603b\u662f\u4f1a\u4f7f\u7528false\u30010\u548c0\u4f5c\u4e3a\u6700\u540e\u4e09\u4e2a\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u589e\u52a0\u4e86\u6211\u4e0d\u9700\u8981\u7684\u7075\u6d3b\u6027\uff1b\u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u5728\u6587\u6863\u4e2d\u67e5\u627e\u5b83\u4eec\u3002\uff08false\u53c2\u6570\u4e0e\u6574\u6570\u503c\u5982\u4f55\u8f6c\u6362\u4e3a\u6d6e\u70b9\u503c\u6709\u5173\u3002\uff09</p> <p>\u5728WebGL 2.0\u4e2d\uff0c\u5c5e\u6027\u53d8\u91cf\u53ef\u4ee5\u662f\u6574\u578b\u3002\u5f53\u4f7f\u7528gl.vertexAttribPointer()\u914d\u7f6e\u5c5e\u6027\u65f6\uff0c\u4e3a\u5c5e\u6027\u63d0\u4f9b\u7684\u503c\u603b\u662f\u88ab\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\uff0c\u6240\u4ee5\u5b83\u4e0d\u9002\u5408\u6574\u578b\u5c5e\u6027\u3002\u5bf9\u4e8e\u6574\u578b\u5c5e\u6027\u7684\u4f7f\u7528\uff0cWebGL 2.0\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570gl.vertexAttribIPointer()\uff0c\u5b83\u6b63\u786e\u5730\u5904\u7406\u6574\u578b\u6570\u636e\u3002</p> <p>\u8fd9\u91cc\u6709\u5f88\u591a\u4e1c\u897f\u9700\u8981\u7406\u89e3\u3002\u4f7f\u7528VBO\u4e3a\u5c5e\u6027\u63d0\u4f9b\u503c\u9700\u8981\u516d\u4e2a\u5355\u72ec\u7684\u547d\u4ee4\uff0c\u8fd9\u662f\u5728\u751f\u6210\u6570\u636e\u5e76\u5c06\u5176\u653e\u5165\u7c7b\u578b\u5316\u6570\u7ec4\u4e4b\u5916\u7684\u3002\u8fd9\u91cc\u662f\u5168\u90e8\u7684\u547d\u4ee4\u96c6\uff1a</p> <pre><code>colorAttribLoc = gl.getAttribLocation( prog, \"a_color\" );\ncolorBuffer = gl.createBuffer();\ngl.enableVertexAttribArray( colorAttribLoc );\n\ngl.bindBuffer( gl.ARRAY_BUFFER, colorBuffer );\ngl.vertexAttribPointer( colorAttribLoc, 3, gl.FLOAT, false, 0, 0 );\ngl.bufferData( gl.ARRAY_BUFFER, colorArray, gl.STATIC_DRAW );\n</code></pre> <p>\u7136\u800c\uff0c\u8fd9\u516d\u4e2a\u547d\u4ee4\u5e76\u4e0d\u603b\u662f\u5728JavaScript\u4ee3\u7801\u7684\u540c\u4e00\u70b9\u51fa\u73b0\u3002\u524d\u4e09\u4e2a\u547d\u4ee4\u901a\u5e38\u4f5c\u4e3a\u521d\u59cb\u5316\u7684\u4e00\u90e8\u5206\u5b8c\u6210\u3002gl.bufferData\u5c06\u5728\u9700\u8981\u66f4\u6539\u5c5e\u6027\u6570\u636e\u65f6\u8c03\u7528\uff1b\u5b83\u53ef\u80fd\u53ea\u5728\u521d\u59cb\u5316\u671f\u95f4\u4f7f\u7528\u4e00\u6b21\uff0c\u6216\u8005\u5728\u9700\u8981\u4fee\u6539\u6570\u636e\u65f6\u4f7f\u7528\u3002gl.bindBuffer\u5fc5\u987b\u5728\u8c03\u7528gl.vertexAttribPointer\u6216gl.bufferData\u4e4b\u524d\u8c03\u7528\uff0c\u56e0\u4e3a\u5b83\u5efa\u7acb\u4e86\u8fd9\u4e24\u4e2a\u547d\u4ee4\u4f7f\u7528\u7684VBO\u3002\u8bb0\u4f4f\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5fc5\u987b\u4e3a\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u6bcf\u4e2a\u5c5e\u6027\u5b8c\u6210\u3002</p> <p>Turning now to attributes, the situation is more complicated, because an attribute can take a different value for each vertex in a primitive. The basic idea is that the complete set of data for the attribute is copied in a single operation from a JavaScript array into memory that is accessible to the GPU. Unfortunately, setting things up to make that operation possible is nontrivial.</p> <p>First of all, a regular JavaScript array is not suitable for this purpose. For efficiency, we need the data to be in a block of memory holding numerical values in successive memory locations, and regular JavaScript arrays don't have that form. To fix this problem, a new kind of array, called typed arrays, was introduced into JavaScript. We encountered typed arrays when working with three.js in the Chapter 5. There is a short introduction to typed arrays in Subsection 5.1.4. A typed array has a fixed length, which is assigned when it is created, and it can only hold numbers of a specified type. There are different kinds of typed array for different kinds of numerical data. For now we will use Float32Array, which holds 32-bit floating point numbers. Once you have a typed array, you can use it much like a regular array, but when you assign any value to an element of a Float32Array, the value is converted into a 32-bit floating point number. If the value cannot be interpreted as a number, it will be converted to NaN, the \"not-a-number\" value.</p> <p>Before data can be transferred from JavaScript into an attribute variable, it must be placed into a typed array. When possible, for efficiency, you should work with typed arrays directly, rather than working with regular JavaScript arrays and then copying the data into typed arrays.</p> <p>For use in WebGL, the attribute data must be transferred into a VBO (vertex buffer object). VBOs were introduced in OpenGL 1.5 and were discussed briefly in Subsection 3.4.4. A VBO is a block of memory that is accessible to the GPU. To use a VBO, you must first call the function gl.createBuffer() to create it. For example,</p> <pre><code>colorBuffer = gl.createBuffer();\n</code></pre> <p>Before transferring data into the VBO, you must \"bind\" the VBO:</p> <pre><code>gl.bindBuffer( gl.ARRAY_BUFFER, colorBuffer );\n</code></pre> <p>The first parameter to gl.bindBuffer is called the \"target.\" It specifies how the VBO will be used. The target gl.ARRAY_BUFFER is used when the buffer is being used to store values for an attribute. Only one VBO at a time can be bound to a given target.</p> <p>The function that transfers data into a VBO doesn't mention the VBO\u2014instead, it uses the VBO that is currently bound. To copy data into that buffer, use gl.bufferData(). For example:</p> <pre><code>gl.bufferData(gl.ARRAY_BUFFER, colorArray, gl.STATIC_DRAW);\n</code></pre> <p>The first parameter is, again, the target. The data is transferred into the VBO that is bound to that target. The second parameter is the typed array that holds the data on the JavaScript side. All the elements of the array are copied into the buffer, and the size of the array determines the size of the buffer. Note that this is a straightforward transfer of raw data bytes; WebGL does not remember whether the data represents floats or ints or some other kind of data.</p> <p>The third parameter to gl.bufferData is one of the constants gl.STATIC_DRAW, gl.STREAM_DRAW, or gl.DYNAMIC_DRAW. It is a hint to WebGL about how the data will be used, and it helps WebGL to manage the data in the most efficient way. The value gl.STATIC_DRAW means that you intend to use the data many times without changing it. For example, if you will use the same data throughout the program, you can load it into a buffer once, during initialization, using gl.STATIC_DRAW. WebGL will probably store the data on the graphics card itself where it can be accessed most quickly by the graphics hardware. The second value, gl.STEAM_DRAW, is for data that will be used only once, or at most a few times. (It can be \"streamed\" to the card when it is needed.) The value gl.DYNAMIC_DRAW is somewhere between the other two values; it is meant for data that will be used multiple times, but with modifications.</p> <p>Getting attribute data into VBOs is only part of the story. You also have to tell WebGL to use the VBO as the source of values for the attribute. To do so, first of all, you need to know the location of the attribute in the shader program. You can determine that using gl.getAttribLocation. For example,</p> <pre><code>colorAttribLoc = gl.getAttribLocation(prog, \"a_color\");\n</code></pre> <p>This assumes that prog is the shader program and \"a_color\" is the name of the attribute variable in the vertex shader. This is entirely analogous to gl.getUniformLocation (except that the return value is an integer, and is -1 if the requested attribute does not exist or is not active).</p> <p>Although an attribute usually takes different values at different vertices, it is possible to use the same value at every vertex. In fact, that is the default behavior. The single attribute value for all vertices can be set using the family of functions gl.vertexAttrib*, which work similarly to gl.uniform*. In the more usual case, where you want to take the values of an attribute from a VBO, you must enable the use of a VBO for that attribute. This is done by calling</p> <pre><code>gl.enableVertexAttribArray( colorAttribLoc );\n</code></pre> <p>where the parameter is the location of the attribute in the shader program, as returned by a call to gl.getAttribLocation(). This command has nothing to do with any particular VBO. It just turns on the use of buffers for the specified attribute. Often, it is reasonable to call this method just once, during initialization. Use of data from the VBO can be turned off by calling</p> <pre><code>gl.disableVertexAttribArray( colorAttribLoc );\n</code></pre> <p>Finally, before you draw a primitive that uses the attribute data from a VBO, you have to tell WebGL which buffer contains the data and how the bits in that buffer are to be interpreted. This is done with gl.vertexAttribPointer(). The VBO must be bound to the ARRAY_BUFFER target when this function is called. For example,</p> <pre><code>gl.bindBuffer( gl.ARRAY_BUFFER, colorBuffer );\ngl.vertexAttribPointer( colorAttribLoc, 3, gl.FLOAT, false, 0, 0 );\n</code></pre> <p>Assuming that colorBuffer refers to the VBO and colorAttribLoc is the location of the attribute, this tells WebGL to take values for the attribute from that buffer. Often, you will call gl.bindBuffer() just before calling gl.vertexAttribPointer(), but that is not necessary if the desired buffer is already bound.</p> <p>The first parameter to gl.vertexAttribPointer is the attribute location. The second is the number of values per vertex. For example, if you are providing values for a vec2, the second parameter will be 2 and you will provide two numbers per vertex; for a vec3, the second parameter would be 3; for a float, it would be 1. The third parameter specifies the type of each value. Here, gl.FLOAT indicates that each value is a 32-bit floating point number. Other values include gl.BYTE, gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, and gl.SHORT for integer values. Note that in WebGL 1.0, all attributes are floating point values; if you provide integer values for an attribute, they will be converted to floating point. The parameter value should match the data type in the buffer. For example, if the data came from a Float32Array, then the parameter should be gl.FLOAT. For the last three parameters in a call to gl.vertexAttribPointer, I will always use false, 0, and 0. These parameters add flexibility that I won't need; you can look them up in the documentation if you are interested. (The false parameter has to do with how integer values are converted into floating point values.)</p> <p>In WebGL 2.0, attribute variables can have integer type. When gl.vertexAttribPointer() is used to configure an attribute, the values provided for the attribute will always be converted to floating point, so it is inappropriate for integer-valued attributes. For use with integer-valued attributes, WebGL 2.0 introduces a new function, gl.vertexAttribIPointer() that works correctly with integer data.</p> <p>There is a lot to take in here. Using a VBO to provide values for an attribute requires six separate commands, and that is in addition to generating the data and placing it in a typed array. Here is the full set of commands:</p> <pre><code>colorAttribLoc = gl.getAttribLocation( prog, \"a_color\" );\ncolorBuffer = gl.createBuffer();\ngl.enableVertexAttribArray( colorAttribLoc );\n\ngl.bindBuffer( gl.ARRAY_BUFFER, colorBuffer );\ngl.vertexAttribPointer( colorAttribLoc, 3, gl.FLOAT, false, 0, 0 );\ngl.bufferData( gl.ARRAY_BUFFER, colorArray, gl.STATIC_DRAW );\n</code></pre> <p>However, the six commands will not always occur at the same point in the JavaScript code. The first three commands are often done as part of initialization. gl.bufferData would be called whenever the data for the attribute needs to be changed; it might be used just once during initialization, or it might be used whenever the data needs to be modified. gl.bindBuffer must be called before gl.vertexAttribPointer or gl.bufferData, since it establishes the VBO that is used by those two commands. Remember that all of this must be done for every attribute that is used in the shader program.</p>"},{"location":"cn/c6/s1/#616-\u7ed8\u5236\u57fa\u5143","title":"6.1.6 \u7ed8\u5236\u57fa\u5143","text":"<p>Drawing a Primitive</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u88ab\u521b\u5efa\u5e76\u4e14\u4e3a\u7edf\u4e00\u53d8\u91cf\u548c\u5c5e\u6027\u8bbe\u7f6e\u4e86\u503c\u4e4b\u540e\uff0c\u7ed8\u5236\u4e00\u4e2a\u539f\u8bed\u53ea\u9700\u8981\u518d\u4e00\u4e2a\u547d\u4ee4\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u51fd\u6570gl.drawArrays\uff1a</p> <pre><code>gl.drawArrays(primitiveType, startVertex, vertexCount);\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e03\u4e2a\u5e38\u91cf\u4e4b\u4e00\uff0c\u7528\u4e8e\u6807\u8bc6WebGL\u539f\u8bed\u7c7b\u578b\uff0c\u4f8b\u5982gl.TRIANGLES\u3001gl.LINE_LOOP\u548cgl_POINTS\u3002\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u6574\u6570\uff0c\u7528\u4e8e\u786e\u5b9a\u7528\u4e8e\u539f\u8bed\u7684\u9876\u70b9\u7684\u5b50\u96c6\u3002\u5728\u8c03\u7528gl.drawArrays\u4e4b\u524d\uff0c\u4f60\u4f1a\u5c06\u4e00\u4e9b\u9876\u70b9\u7684\u5c5e\u6027\u503c\u653e\u5165\u4e00\u4e2a\u6216\u591a\u4e2aVBO\u4e2d\u3002\u5f53\u539f\u8bed\u88ab\u6e32\u67d3\u65f6\uff0c\u542f\u7528\u7684\u5c5e\u6027\u7684\u5c5e\u6027\u503c\u4f1a\u4eceVBO\u4e2d\u83b7\u53d6\u3002startVertex\u662f\u5728VBO\u4e2d\u6570\u636e\u7684\u8d77\u59cb\u9876\u70b9\u53f7\uff0cvertexCount\u662f\u539f\u8bed\u4e2d\u7684\u9876\u70b9\u6570\u3002\u901a\u5e38\uff0cstartVertex\u662f\u96f6\uff0cvertexCount\u662f\u53ef\u7528\u6570\u636e\u7684\u9876\u70b9\u603b\u6570\u3002\u4f8b\u5982\uff0c\u7ed8\u5236\u4e00\u4e2a\u5355\u72ec\u4e09\u89d2\u5f62\u7684\u547d\u4ee4\u53ef\u80fd\u662f\uff1a</p> <pre><code>gl.drawArrays(gl.TRIANGLES, 0, 3);\n</code></pre> <p>gl.drawArrays\u548cgl.ARRAY_BUFFER\u4e2d\u201carray\u201d\u8fd9\u4e2a\u8bcd\u53ef\u80fd\u6709\u70b9\u4ee4\u4eba\u56f0\u60d1\uff0c\u56e0\u4e3a\u6570\u636e\u5b58\u50a8\u5728\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61\u4e2d\uff0c\u800c\u4e0d\u662fJavaScript\u6570\u7ec4\u4e2d\u3002\u5f53glDrawArrays\u6700\u521d\u5728OpenGL 1.1\u4e2d\u5f15\u5165\u65f6\uff0c\u5b83\u4f7f\u7528\u7684\u662f\u666e\u901a\u6570\u7ec4\uff0c\u800c\u4e0d\u662fVBO\u3002\u4eceOpenGL 1.5\u5f00\u59cb\uff0cglDrawArrays\u53ef\u4ee5\u4e0e\u666e\u901a\u6570\u7ec4\u6216VBO\u4e00\u8d77\u4f7f\u7528\u3002\u5728WebGL\u4e2d\uff0c\u653e\u5f03\u4e86\u5bf9\u666e\u901a\u6570\u7ec4\u7684\u652f\u6301\uff0cgl.drawArrays\u53ea\u80fd\u4e0eVBO\u4e00\u8d77\u5de5\u4f5c\uff0c\u5373\u4f7f\u540d\u79f0\u4ecd\u7136\u63d0\u5230\u6570\u7ec4\u3002</p> <p>\u6211\u4eec\u57283.4.2\u5c0f\u8282\u4e2d\u9047\u5230\u4e86glDrawArrays\u7684\u539f\u59cb\u7248\u672c\u3002\u8be5\u90e8\u5206\u8fd8\u4ecb\u7ecd\u4e86\u7528\u4e8e\u7ed8\u5236\u539f\u8bed\u7684\u53e6\u4e00\u79cd\u51fd\u6570glDrawElements\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u7ed8\u5236\u7d22\u5f15\u9762\u96c6\u3002\u5728WebGL\u4e2d\u4e5f\u53ef\u7528gl.drawElements\u51fd\u6570\u3002\u4f7f\u7528gl.drawElements\u65f6\uff0c\u5c5e\u6027\u6570\u636e\u4e0d\u662f\u6309\u7167\u5728VBO\u4e2d\u7684\u987a\u5e8f\u4f7f\u7528\u7684\u3002\u76f8\u53cd\uff0c\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u7d22\u5f15\u5217\u8868\uff0c\u786e\u5b9a\u8bbf\u95ee\u6570\u636e\u7684\u987a\u5e8f\u3002</p> <p>\u8981\u4f7f\u7528gl.drawElements\uff0c\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684VBO\u6765\u4fdd\u5b58\u7d22\u5f15\u5217\u8868\u3002\u5f53\u7528\u4e8e\u6b64\u76ee\u7684\u65f6\uff0cVBO\u5fc5\u987b\u7ed1\u5b9a\u5230\u76ee\u6807gl.ELEMENT_ARRAY_BUFFER\u800c\u4e0d\u662fgl.ARRAY_BUFFER\u3002VBO\u5c06\u4fdd\u5b58\u6574\u6570\u503c\uff0c\u53ef\u4ee5\u662fgl.UNSIGNED_BYTE\u6216gl.UNSIGNED_SHORT\u7c7b\u578b\uff08\u6216\u8005\u5bf9\u4e8eWebGL 2.0\uff0c\u662fgl.UNSIGNED_INT\uff09\u3002\u503c\u53ef\u4ee5\u4eceJavaScript\u7c7b\u578b\u5316\u6570\u7ec4\u52a0\u8f7d\uff0c\u5bf9\u4e8egl.UNSIGNED_BYTE\u4f7f\u7528Uint8Array\uff0c\u5bf9\u4e8egl.UNSIGNED_SHORT\u4f7f\u7528Uint16Array\u3002\u521b\u5efaVBO\u5e76\u7528\u6570\u636e\u586b\u5145\u5b83\u662f\u4e00\u4e2a\u591a\u6b65\u9aa4\u8fc7\u7a0b\u3002\u4f8b\u5982\uff1a</p> <pre><code>elementBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\nlet data = new Uint8Array([2, 0, 3, 2, 1, 3, 1, 4, 3]);\ngl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STREAM_DRAW);\n</code></pre> <p>\u5047\u8bbe\u5c5e\u6027\u6570\u636e\u4e5f\u5df2\u7ecf\u52a0\u8f7d\u5230VBO\u4e2d\uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528gl.drawElements\u6765\u7ed8\u5236\u539f\u8bed\u3002\u8c03\u7528gl.drawElements\u7684\u5f62\u5f0f\u662f</p> <pre><code>gl.drawElements(primitiveType, count, dataType, startByte);\n</code></pre> <p>\u5f53\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0c\u5305\u542b\u9876\u70b9\u7d22\u5f15\u7684VBO\u5fc5\u987b\u7ed1\u5b9a\u5230ELEMENT_ARRAY_BUFFER\u76ee\u6807\u3002gl.drawElements\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u539f\u8bed\u7c7b\u578b\uff0c\u5982gl.TRIANGLE_FAN\u3002\u8ba1\u6570\u662f\u539f\u8bed\u4e2d\u7684\u9876\u70b9\u6570\u3002dataType\u6307\u5b9a\u4e86\u52a0\u8f7d\u5230VBO\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff1b\u5b83\u5c06\u662fgl.UNSIGNED_SHORT\u6216gl.UNSIGNED_BYTE\u3002startByte\u662fVBO\u4e2d\u539f\u8bed\u6570\u636e\u7684\u8d77\u59cb\u70b9\uff1b\u5b83\u901a\u5e38\u662f\u96f6\u3002\uff08\u6ce8\u610f\uff0c\u8d77\u59cb\u70b9\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7ed9\u51fa\uff0c\u800c\u4e0d\u662f\u9876\u70b9\u53f7\u3002\uff09\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u662f</p> <pre><code>gl.drawElements(gl.TRIANGLES, 9, gl.UNSIGNED_BYTE, 0);\n</code></pre> <p>\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u573a\u5408\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\u5982\u679c\u4f60\u53d1\u73b0\u5b83\u4ee4\u4eba\u56f0\u60d1\uff0c\u4f60\u5e94\u8be5\u56de\u987e3.4.2\u5c0f\u8282\u3002WebGL\u4e2d\u7684\u60c5\u51b5\u4e0eOpenGL 1.1\u4e2d\u7684\u60c5\u51b5\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>After the shader program has been created and values have been set up for the uniform variables and attributes, it takes just one more command to draw a primitive. One way to do that is with the function gl.drawArrays:</p> <pre><code>gl.drawArrays( primitiveType, startVertex, vertexCount );\n</code></pre> <p>The first parameter is one of the seven constants that identify WebGL primitive types, such as gl.TRIANGLES, gl.LINE_LOOP, and gl_POINTS. The second and third parameters are integers that determine which subset of available vertices is used for the primitive. Before calling gl.drawArrays, you will have placed attribute values for some number of vertices into one or more VBOs. When the primitive is rendered, the attribute values for enabled attributes are pulled from the VBOs. The startVertex is the starting vertex number of the data within the VBOs, and vertexCount is the number of vertices in the primitive. Often, startVertex is zero, and vertexCount is the total number of vertices for which data is available. For example, the command for drawing a single triangle might be</p> <pre><code>gl.drawArrays( gl.TRIANGLES, 0, 3 );\n</code></pre> <p>The use of the word \"array\" in gl.drawArrays and gl.ARRAY_BUFFER might be a little confusing, since the data is stored in vertex buffer objects rather than in JavaScript arrays. When glDrawArrays was first introduced in OpenGL 1.1, it used ordinary arrays rather than VBOs. Starting with OpenGL 1.5, glDrawArrays could be used either with ordinary arrays or VBOs. In WebGL, support for ordinary arrays was dropped, and gl.drawArrays can only work with VBOs, even though the name still refers to arrays.</p> <p>We encountered the original version of glDrawArrays in Subsection 3.4.2. That section also introduced an alternative function for drawing primitives, glDrawElements, which can be used for drawing indexed face sets. A gl.drawElements function is also available in WebGL. With gl.drawElements, attribute data is not used in the order in which it occurs in the VBOs. Instead, there is a separate list of indices that determines the order in which the data is accessed.</p> <p>To use gl.drawElements, an extra VBO is required to hold the list of indices. When used for this purpose, the VBO must be bound to the target gl.ELEMENT_ARRAY_BUFFER rather than gl.ARRAY_BUFFER. The VBO will hold integer values, which can be of type gl.UNSIGNED_BYTE or gl.UNSIGNED_SHORT (or, for WebGL 2.0, gl.UNSIGNED_INT). The values can be loaded from a JavaScript typed array of type Uint8Array, for gl.UNSIGNED_BYTE, or Uint16Array, for gl.UNSIGNED_SHORT. Creating the VBO and filling it with data is again a multistep process. For example,</p> <pre><code>elementBuffer = gl.createBuffer();\ngl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\nlet data = new Uint8Array( [ 2,0,3, 2,1,3, 1,4,3 ] );\ngl.bufferData( gl.ELEMENT_ARRAY_BUFFER, data, gl.STREAM_DRAW );\n</code></pre> <p>Assuming that the attribute data has also been loaded into VBOs, gl.drawElements can then be used to draw the primitive. A call to gl.drawElements takes the form</p> <pre><code>gl.drawElements( primitiveType, count, dataType, startByte );\n</code></pre> <p>The VBO that contains the vertex indices must be bound to the ELEMENT_ARRAY_BUFFER target when this function is called. The first parameter to gl.drawElements is a primitive type such as gl.TRIANGLE_FAN. The count is the number of vertices in the primitive. The dataType specifies the type of data that was loaded into the VBO; it will be either gl.UNSIGNED_SHORT or gl.UNSIGNED_BYTE. The startByte is the starting point in the VBO of the data for the primitive; it is usually zero. (Note that the starting point is given in terms of bytes, not vertex numbers.) A typical example would be</p> <pre><code>gl.drawElements( gl.TRIANGLES, 9, gl.UNSIGNED_BYTE, 0 );\n</code></pre> <p>We will have occasion to use this function later. If you find it confusing, you should review Subsection 3.4.2. The situation is much the same in WebGL as it was in OpenGL 1.1.</p>"},{"location":"cn/c6/s1/#617-webgl-20\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61","title":"6.1.7 WebGL 2.0\uff1a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61","text":"<p>WebGL 2.0: Vertex Array Objects</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0e\u5c5e\u6027\u4e00\u8d77\u5de5\u4f5c\u7684\u5927\u91cf\u51fd\u6570\u53ef\u80fd\u770b\u8d77\u6765\u6709\u4e9b\u8fc7\u5206\u3002\u5728\u7ed8\u5236\u51e0\u4e2a\u4e0d\u540c\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e2d\uff0c\u60c5\u51b5\u66f4\u7cdf\u3002\u6bcf\u4e2a\u5bf9\u8c61\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u7684\u7f13\u51b2\u533a\u548c\u81ea\u5df1\u7684\u5c5e\u6027\u6307\u9488\u8bbe\u7f6e\u3002\u5728\u7ed8\u5236\u6bcf\u4e2a\u5bf9\u8c61\u4e4b\u524d\uff0c\u90fd\u9700\u8981\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u8c03\u7528gl.bindBuffer()\u548cgl.vertexAttribPointer()\u3002\u4e00\u4e2a\u5178\u578b\u76843D\u56fe\u5f62\u7a0b\u5e8f\u4f1a\u4f7f\u7528\u5c5e\u6027\u6765\u8868\u793a\u9876\u70b9\u5750\u6807\u3001\u6cd5\u5411\u91cf\u3001\u6750\u8d28\u5c5e\u6027\u548c\u7eb9\u7406\u5750\u6807\u3002\u6240\u4ee5\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u4f1a\u6709\u5927\u91cf\u7684\u51fd\u6570\u8c03\u7528\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cWebGL 2.0\u5f15\u5165\u4e86\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\uff08VAOs\uff09\u3002VAO\u662f\u4e00\u5757\u5185\u5b58\u533a\u57df\uff0c\u901a\u5e38\u5b58\u50a8\u5728\u663e\u5361\u4e0a\u3002\u5b83\u4fdd\u5b58\u4e86\u7531\u6e32\u67d3\u51fd\u6570\uff08\u5982gl.drawArrays()\uff09\u4f7f\u7528\u7684\u8bbe\u7f6e\u3002\u8fd9\u5305\u62ec\u6bcf\u4e2a\u5c5e\u6027\u7684\u542f\u7528\u72b6\u6001\u3001\u7528\u4e8e\u5c5e\u6027\u6570\u636e\u7684\u7f13\u51b2\u533a\u5f15\u7528\uff0c\u4ee5\u53ca\u901a\u8fc7\u8c03\u7528gl.vertexAttribPointer()\u8bbe\u7f6e\u7684\u6240\u6709\u5c5e\u6027\u7684\u503c\u3002\u5b83\u8fd8\u5305\u62ec\u8bbe\u7f6e\u548c\u5bf9\u7531gl.drawElements()\u4f7f\u7528\u7684\u7f13\u51b2\u533a\u7684\u5f15\u7528\uff0c\u4ee5\u53ca\u4e0b\u4e00\u8282\u4e2d\u8ba8\u8bba\u7684\u5c5e\u6027\u9664\u6570\u3002</p> <p>WebGL 2.0\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684VAO\uff0c\u5f53\u6ca1\u6709\u9009\u62e9\u5176\u4ed6VAO\u65f6\uff0c\u5b83\u5c06\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4VAO\u3002\u8981\u4f7f\u7528\u66ff\u4ee3VAO\uff0c\u9996\u5148\u9700\u8981\u901a\u8fc7\u8c03\u7528gl.createVertexArray()\u6765\u521b\u5efa\u5b83\uff1a</p> <pre><code>vao = gl.createVertexArray();\n</code></pre> <p>\u8fd4\u56de\u503cvao\u662f\u5df2\u521b\u5efaVAO\u7684\u6807\u8bc6\u7b26\u3002\u5728\u65b0\u7684VAO\u4e2d\uff0c\u6240\u6709\u5c5e\u6027\u90fd\u5177\u6709\u9ed8\u8ba4\u503c\u3002\u7279\u522b\u662f\uff0c\u6240\u6709\u9876\u70b9\u5c5e\u6027\u90fd\u88ab\u7981\u7528\uff0c\u5e76\u4e14\u6ca1\u6709\u5173\u8054\u7684\u7f13\u51b2\u533a\u3002\u8981\u5b9e\u9645\u4f7f\u7528VAO\uff0c\u9700\u8981\u7ed1\u5b9a\u5b83\uff1a</p> <pre><code>gl.bindVertexArray(vao);\n</code></pre> <p>\u5f71\u54cd\u6216\u4f7f\u7528\u5c5e\u6027\u7684\u51fd\u6570\u9002\u7528\u4e8e\u5f53\u524d\u7ed1\u5b9a\u7684VAO\u3002\u4f8b\u5982\uff0c\u5728\u8c03\u7528gl.vertexAttribPointer()\u65f6\u7684\u8bbe\u7f6e\u5b58\u50a8\u5728\u5f53\u524dVAO\u4e2d\u3002\u8c03\u7528gl.drawArrays()\u65f6\uff0c\u5b83\u9700\u8981\u7ed8\u5236\u539f\u8bed\u7684\u6240\u6709\u6570\u636e\u90fd\u6765\u81ea\u5f53\u524dVAO\u3002\u7a0b\u5e8f\u53ef\u4ee5\u968f\u65f6\u901a\u8fc7\u8c03\u7528gl.bindVertexArray\u4ece\u4e00\u4e2aVAO\u5207\u6362\u5230\u53e6\u4e00\u4e2aVAO\u3002\u8981\u56de\u5230\u4f7f\u7528\u9ed8\u8ba4VAO\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528gl.bindVertexArray(0)\u3002</p> <p>\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u7ed8\u5236\u51e0\u4e2a\u5bf9\u8c61\u7684\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e2a\u5bf9\u8c61\u7684\u4e0d\u540cVAO\u3002\u5bf9\u8c61\u7684VAO\u5fc5\u987b\u5728\u914d\u7f6e\u5bf9\u8c61\u7684\u8bbe\u7f6e\u65f6\u7ed1\u5b9a\u3002\u4f46\u5728\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d\uff0c\u7a0b\u5e8f\u53ea\u9700\u8981\u7ed1\u5b9a\u8be5\u5bf9\u8c61\u7684VAO\u3002\u8fd9\u4e2a\u5355\u4e00\u7684\u51fd\u6570\u8c03\u7528\u53ef\u4ee5\u66ff\u4ee3\u53ef\u80fd\u9700\u8981\u6062\u590d\u6bcf\u4e2a\u5c5e\u6027\u7684\u9002\u5f53\u8bbe\u7f6e\u7684\u5927\u91cf\u51fd\u6570\u8c03\u7528\u3002\u4f18\u52bf\u4e0d\u4ec5\u4ec5\u662f\u66f4\u6574\u6d01\u7684\u7a0b\u5e8f\u7ec4\u7ec7\u2014\u2014\u4e5f\u66f4\u6709\u6548\u7387\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u5230GPU\u6765\u914d\u7f6e\u6240\u6709\u5c5e\u6027\u3002</p> <p>\u793a\u4f8bWebGL 2.0\u7a0b\u5e8fwebgl/VAO-test-webgl2.html\u4e3a\u516d\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u4f7f\u7528\u4e0d\u540c\u7684VAO\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528\u4e86\u8bb8\u591a\u6211\u4eec\u5c1a\u672a\u6db5\u76d6\u7684\u6280\u672f\uff0c\u4f46\u4f60\u53ef\u4ee5\u67e5\u770bdrawModel()\u51fd\u6570\uff0c\u770b\u770b\u5b83\u5982\u4f55\u4f7f\u7528VAOs\u548cVBOs\u3002</p> <p>The large number of functions needed to work with attributes can seem excessive. The situation is worse in a program that draws several different objects. Each object can require its own buffers and its own settings for attribute pointers. Before drawing each object, it would be necessary to call gl.bindBuffer() and gl.vertexAttribPointer() for each attribute. A typical 3D graphics program would use attributes for vertex coordinates, normal vectors, material properties, and texture coordinates. So, there would be a lot of function calls for each object.</p> <p>To help with this situation, WebGL 2.0 introduced Vertex Array Objects (VAOs). A VAO is a section of memory, typically stored on the graphics card. It holds settings that are used by rendering functions such as gl.drawArrays(). This includes the enabled state of each attribute, references to the buffers used for the attribute data, and the values of all properties that are set by calling gl.vertexAttribPointer(). It also includes the settings and a reference to the buffer used by gl.drawElements(), as well as the attribute divisors that are discussed in the next subsection.</p> <p>WebGL 2.0 has a default VAO, which it uses when no other VAO has been selected. To use an alternative VAO, you first have to create it, by calling gl.createVertexArray():</p> <pre><code>vao = gl.createVertexArray();\n</code></pre> <p>The return value, vao, is an identifier for the VAO that has been created. In the new VAO, all properties have their default values. In particular, all vertex attributes are disabled and have no associated buffers. To actually use a VAO, you need to bind it:</p> <pre><code>gl.bindVertexArray(vao);\n</code></pre> <p>Functions that affect or use attributes apply to the VAO that is currently bound. For example, the settings in a call to gl.vertexAttribPointer() are stored in the current VAO. And a call to gl.drawArrays() gets all the data that it needs to draw a primitive from the current VAO. A program can switch from one VAO to another at any time simply by calling gl.bindVertexArray. To go back to using the default VAO, a program can call gl.bindVertexArray(0).</p> <p>The idea is that a program that draws several objects can use a different VAO for each object. The VAO for an object must be bound when the settings for the object are configured. But before drawing the object, the program simply needs to bind the VAO for that object. That single function call replaces a potentially a large number of function calls that would be needed to restore the appropriate settings for each attribute individually. The advantage is more than just a more nicely organized program\u2014it is also much more efficient, since only one command needs to be sent to the GPU to configure all of the attributes.</p> <p>The sample WebGL 2.0 program webgl/VAO-test-webgl2.html uses a different VAO for each of six different objects. That program uses many techniques that we have not yet covered, but you can look at the drawModel() function to see how it uses VAOs and VBOs.</p>"},{"location":"cn/c6/s1/#618-webgl-20\u5b9e\u4f8b\u5316\u7ed8\u56fe","title":"6.1.8 WebGL 2.0\uff1a\u5b9e\u4f8b\u5316\u7ed8\u56fe","text":"<p>WebGL 2.0: Instanced Drawing</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u4e00\u4e2a\u573a\u666f\u4e2d\uff0c\u901a\u5e38\u5305\u542b\u4f7f\u7528\u76f8\u540c\u9876\u70b9\u5750\u6807\u7684\u540c\u4e00\u539f\u8bed\u7684\u591a\u4e2a\u526f\u672c\uff0c\u4f46\u6bcf\u4e2a\u526f\u672c\u5177\u6709\u4e0d\u540c\u7684\u53d8\u6362\u3001\u989c\u8272\u6216\u5176\u4ed6\u5c5e\u6027\u3002WebGL 2.0\u4f7f\u5f97\u53ea\u9700\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u5373\u53ef\u7ed8\u5236\u6240\u6709\u8fd9\u4e9b\u526f\u672c\u3002\u8fd9\u79f0\u4e3a\u5b9e\u4f8b\u5316\u7ed8\u5236\u6216\u5b9e\u4f8b\u5316\uff0c\u539f\u8bed\u7684\u4e2a\u522b\u526f\u672c\u79f0\u4e3a\u5b9e\u4f8b\u3002\u4f7f\u7528\u5b9e\u4f8b\u5316\u7ed8\u5236\u7684\u51fd\u6570\u662fgl.drawArraysInstanced()\u548cgl.drawElementsInstanced()\u3002</p> <p>\u5b9e\u4f8b\u5316\u5c5e\u6027\u2014\u2014\u4ece\u4e00\u4e2a\u5b9e\u4f8b\u5230\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u5316\u7684\u5c5e\u6027\u2014\u2014\u5f53\u5206\u522b\u7ed8\u5236\u6bcf\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u5f88\u53ef\u80fd\u662f\u7edf\u4e00\u53d8\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u6709\u4e00\u4e2a\u9002\u7528\u4e8e\u5b9e\u4f8b\u4e2d\u6240\u6709\u9876\u70b9\u7684\u5c5e\u6027\u503c\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5c5e\u6027\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7531\u5c5e\u6027\u53d8\u91cf\u8868\u793a\uff0c\u800c\u4e0d\u662f\u7edf\u4e00\u53d8\u91cf\uff0c\u5e76\u4e14\u5b83\u4eec\u88ab\u914d\u7f6e\u4e3a\u5c5e\u6027\u3002</p> <p>\u8981\u6307\u5b9a\u4e00\u4e2a\u5c5e\u6027\u662f\u5b9e\u4f8b\u5316\u5c5e\u6027\uff0c\u53ea\u9700\u8981\u4e3a\u8be5\u5c5e\u6027\u6307\u5b9a\u4e00\u4e2a\u201c\u9664\u6570\u201d\u3002\u8fd9\u662f\u901a\u8fc7\u8c03\u7528gl.vertexAttribDivisor\u5b8c\u6210\u7684\uff1a</p> <pre><code>gl.vertexAttribDivisor(attribID, divisor);\n</code></pre> <p>\u8fd9\u91cc\uff0cattribID\u662f\u7531gl.getAttribLocation()\u8fd4\u56de\u7684\u5c5e\u6027\u6807\u8bc6\u7b26\u3002\u9664\u6570\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u5c06\u9664\u6570\u4f20\u9012\u4e3a\u96f6\u5c06\u5173\u95ed\u8be5\u5c5e\u6027\u7684\u5b9e\u4f8b\u5316\u3002\u5982\u679cdivisor\u662f\u6b63\u6570\uff0c\u90a3\u4e48\u5c5e\u6027\u7684\u6bcf\u4e2a\u503c\u5c06\u9002\u7528\u4e8e\u90a3\u4e48\u591a\u5b9e\u4f8b\u3002\u4f8b\u5982\uff0c\u5982\u679cdivisor\u662f3\uff0c\u90a3\u4e48\u5c5e\u6027\u503c\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6761\u76ee\u9002\u7528\u4e8e\u7b2c\u4e00\u3001\u7b2c\u4e8c\u548c\u7b2c\u4e09\u4e2a\u5b9e\u4f8b\uff1b\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u503c\u9002\u7528\u4e8e\u7b2c\u56db\u3001\u7b2c\u4e94\u548c\u7b2c\u516d\u4e2a\u5b9e\u4f8b\uff1b\u4ee5\u6b64\u7c7b\u63a8\u3002\u5b9e\u9645\u4e0a\uff0c\u9664\u6570\u7684\u503c\u901a\u5e38\u662f1\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u5b9e\u4f8b\u5728\u5c5e\u6027\u503c\u6570\u7ec4\u4e2d\u90fd\u6709\u81ea\u5df1\u7684\u6761\u76ee\u3002</p> <p>\u5bf9\u4e8e\u5b9e\u4f8b\u5316\u5c5e\u6027\uff0c\u9664\u4e86\u8bbe\u7f6e\u9664\u6570\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u542f\u7528\u5c5e\u6027\uff0c\u5c06\u6570\u636e\u52a0\u8f7d\u5230VBO\u4e2d\uff0c\u5e76\u4f7f\u7528gl.vertexAttribPointer\u8fdb\u884c\u914d\u7f6e\u3002\u5f53\u7136\uff0c\u8fd8\u9700\u8981\u4f7f\u7528gl.drawArraysInstanced()\u6216gl.drawElementsInstanced()\u7ed8\u5236\u539f\u8bed\uff0c\u800c\u4e0d\u662f\u4f7f\u7528gl.drawArrays()\u6216gl.drawElements()\u3002</p> <p>\u793a\u4f8bWebGL 2.0\u7a0b\u5e8fwebgl/instancing-test-webgl2.html\u662f\u5b9e\u4f8b\u5316\u7ed8\u5236\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\uff08\u518d\u8bf4\u4e00\u6b21\uff0c\u7a0b\u5e8f\u4e2d\u6709\u5f88\u591a\u5185\u5bb9\u5728\u6211\u4eec\u8986\u76d6\u66f4\u591aWebGL\u4e4b\u524d\u4f60\u662f\u4e0d\u4f1a\u7406\u89e3\u7684\uff09\u3002\u8be5\u7a0b\u5e8f\u7ed8\u5236\u4e8630\u4e2a\u5f69\u8272\u5706\u76d8\uff0c\u5176\u4e2d\u5706\u76d8\u7531gl.TRIANGLE_FAN\u7c7b\u578b\u7684\u539f\u8bed\u8fd1\u4f3c\u3002\u4f7f\u7528\u4e86\u4e09\u4e2a\u5c5e\u6027\uff1a\u4e00\u4e2a\u5c5e\u6027\u4fdd\u5b58\u9876\u70b9\u7684\u5750\u6807\uff0c\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5c5e\u6027\u4fdd\u5b58\u5706\u76d8\u7684\u989c\u8272\uff0c\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5c5e\u6027\u4fdd\u5b58\u6bcf\u4e2a\u5706\u76d8\u7684\u4e0d\u540c\u5e73\u79fb\u3002</p> <p>\u7a0b\u5e8f\u4e2d\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u70b9\u662f\u5b83\u5bf9\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61\u7684\u4f7f\u7528\u3002\u5706\u76d8\u53ef\u4ee5\u88ab\u52a8\u753b\u5316\u3002\u5706\u76d8\u5728\u79fb\u52a8\uff0c\u4f46\u5b83\u4eec\u7684\u989c\u8272\u4e0d\u4f1a\u6539\u53d8\u3002\u7531\u4e8e\u989c\u8272\u4e0d\u4f1a\u6539\u53d8\uff0c\u5706\u76d8\u7684\u989c\u8272\u503c\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u671f\u95f4\u4e00\u6b21\u6027\u52a0\u8f7d\u5230VBO\u4e2d\u3002gl.bufferData\u4e2d\u7684\u4f7f\u7528\u53c2\u6570\u8bbe\u7f6e\u4e3agl.STATIC_DRAW\uff0c\u56e0\u4e3a\u6570\u636e\u4e0d\u4f1a\u88ab\u4fee\u6539\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5706\u76d8\u5728\u79fb\u52a8\uff0c\u5706\u76d8\u7684\u5e73\u79fb\u503c\u5fc5\u987b\u5728\u6bcf\u4e00\u5e27\u4e2d\u66f4\u6539\u3002\u6240\u4ee5\uff0c\u6bcf\u4e00\u5e27\u90fd\u4f1a\u5c06\u65b0\u6570\u636e\u52a0\u8f7d\u5230\u76f8\u5e94\u7684VBO\u4e2d\uff0c\u4f7f\u7528gl.STREAM_DRAW\uff0c\u56e0\u4e3a\u6b63\u5728\u52a0\u8f7d\u7684\u6570\u636e\u53ea\u4f1a\u4f7f\u7528\u4e00\u6b21\u3002</p> <p>\u6700\u540e\uff0c\u6211\u5e94\u8be5\u6ce8\u610f\uff0cVAO\u548c\u5b9e\u4f8b\u5316\u9700\u8981WebGL 2.0\uff0c\u4f46\u8bb8\u591aWebGL 1.0\u7684\u5b9e\u73b0\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u76f8\u540c\u7684\u529f\u80fd\u4f5c\u4e3a\u53ef\u9009\u6269\u5c55\u3002WebGL\u6269\u5c55\u5c06\u5728\u7b2c7.5\u8282\u4e2d\u8ba8\u8bba\u3002</p> <p>It's common for a scene to contain multiple copies of the same primitive (that is, using the same vertex coordinates), but with different transformations, colors, or other properties for each copy. WebGL 2.0 makes it possible to draw all those copies with a single function call. This is called instanced drawing or instancing, and the individual copies of the primitive are called instances. The functions that use instanced drawing are gl.drawArraysInstanced() and gl.drawElementsInstanced().</p> <p>Instanced properties\u2014the properties that vary from one instance to another\u2014are things that would likely be uniform variables when drawing each instance separately. That is, each instance gets just one value of the property that applies to all the vertices of the instance. Nevertheless, the properties are represented by attribute variables in the shader program, not uniform variables, and they are configured as attributes.</p> <p>To specify that an attribute is an instanced property, you just need to specify a \"divisor\" for that attribute. This is done by calling gl.vertexAttribDivisor:</p> <pre><code>g.vertexAttribDivisor( attribID, divisor );\n</code></pre> <p>Here, attribID is the identifier for the attribute, as returned by gl.getAttribLocation(). The divisor is a non-negative integer. Passing zero as the divisor will turn off instancing for the attribute. If divisor is positive, then each value of the attribute will apply to that many instances. For example, if divisor is 3, then the first entry in the attribute value array applies to the first, second, and third instances; the second value in the array applies to the fourth, fifth, and sixth instances; and so on. In practice, the value of divisor is usually one, meaning that each instance has its own entry in the attribute value array.</p> <p>For an instanced property, in addition to setting the divisor, it is still necessary to enable the attribute, load data for it into a VBO, and configure it with gl.vertexAttribPointer. And, of course, it is necessary to draw the primitive using gl.drawArraysInstanced() or gl.drawElementsInstanced(), and not with gl.drawArrays() or gl.drawElements().</p> <p>The sample WebGL 2.0 program webgl/instancing-test-webgl2.html is an example of instanced drawing. (Again, there is a lot in the program that you won't understand until we have covered more of WebGL). The program draws 30 colored disks, where a disk is approximated by a primitive of type gl.TRIANGLE_FAN. Three attributes are used: an attribute that holds the coordinates of the vertices, an instanced attribute that holds the colors for the disks, and an instanced attribute that holds a different translation for each disk.</p> <p>Another point of interest in the program is its used of vertex buffer objects. The disks can be animated. The disks move, but their colors don't change. Since the colors don't change, the color values for the disks are loaded into a VBO once, during program initialization. The usage parameter in gl.bufferData is set to gl.STATIC_DRAW because the data will not be modified. However, because the disks are moving, the values for the translations of the disks have to change in each frame. So, new data is loaded into the corresponding VBO for each frame, with usage gl.STREAM_DRAW because the data that is being loaded will only be used once.</p> <p>Finally, I should note that VAOs and instancing require WebGL 2.0, but the same functionality is available in many implementations of WebGL 1.0 as optional extensions. Webgl extensions will be discussed in Section 7.5.</p>"},{"location":"cn/c6/s2/","title":"6.2 \u7b2c\u4e00\u4e2a\u4f8b\u5b50","text":"<p>First Examples</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u5f00\u59cb\u6211\u4eec\u7684\u7b2c\u4e00\u6279WebGL\u7a0b\u5e8f\u3002\u672c\u8282\u9996\u5148\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8eWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u7136\u540e\u662f\u5bf9GLSL\uff08WebGL\u7740\u8272\u5668\u7684\u7f16\u7a0b\u8bed\u8a00\uff09\u7684\u7b80\u77ed\u4ecb\u7ecd\u3002\u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u8f6c\u5411\u6807\u51c6\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff1aRGB\u989c\u8272\u4e09\u89d2\u5f62\u3002</p> <p>We are ready to start working towards our first WebGL programs. This section begins with a few more details about the WebGL graphics context, followed by a short introduction to GLSL, the programming language for WebGL shaders. With that in hand, we can turn to the standard first example: the RGB color triangle.</p>"},{"location":"cn/c6/s2/#621-webgl-\u4e0a\u4e0b\u6587\u9009\u9879","title":"6.2.1 WebGL \u4e0a\u4e0b\u6587\u9009\u9879","text":"<p>WebGL Context Options</p> \u4e2d\u6587\u82f1\u6587 <p>\u57286.1.1\u5c0f\u8282\u4e2d\u6211\u4eec\u770b\u5230\u4e86\uff0cWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u662f\u901a\u8fc7\u51fd\u6570canvas.getContext\u521b\u5efa\u7684\uff0c\u5176\u4e2dcanvas\u662f\u5bf9\u5c06\u8981\u7ed8\u5236\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684<code>&lt;canvas&gt;</code>\u5143\u7d20\u7684\u5f15\u7528\u3002\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u67d0\u4e9b\u9009\u9879\u7684\u503c\u3002\u53ea\u6709\u5f53\u4f60\u60f3\u8981\u4e3a\u81f3\u5c11\u4e00\u4e2a\u9009\u9879\u8bbe\u7f6e\u975e\u9ed8\u8ba4\u503c\u65f6\uff0c\u624d\u9700\u8981\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u8be5\u53c2\u6570\u662f\u4e00\u4e2aJavaScript\u5bf9\u8c61\uff0c\u5176\u5c5e\u6027\u662f\u9009\u9879\u7684\u540d\u79f0\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5e26\u9009\u9879\u7684\u4e0a\u4e0b\u6587\u521b\u5efa\u793a\u4f8b\uff1a</p> <pre><code>let options = {\n    alpha: false,\n    depth: false\n};\ngl = canvas.getContext(\"webgl\", options);  // \u6216\u8005 \"webgl2\"\n</code></pre> <p>\u6240\u6709\u9009\u9879\u90fd\u662f\u5e03\u5c14\u503c\u3002\u6211\u5c06\u5728\u8fd9\u91cc\u8ba8\u8bba\u6700\u6709\u7528\u7684\u51e0\u4e2a\uff1a</p> <p>alpha \u2014 \u51b3\u5b9a\u7ed8\u56fe\u7f13\u51b2\u533a\u662f\u5426\u6709alpha\u5206\u91cf\u3002\u8fd9\u662f\u6574\u4e2a\u56fe\u50cf\u753b\u5e03\u7684alpha\u5206\u91cf\u3002\u5982\u679c\u6709alpha\u5206\u91cf\uff0c\u90a3\u4e48\u753b\u5e03\u4e0a\u7684\u50cf\u7d20\u5c31\u53ef\u4ee5\u662f\u900f\u660e\u7684\u6216\u534a\u900f\u660e\u7684\uff0c\u5141\u8bb8\u80cc\u666f\uff08\u5728\u753b\u5e03\u540e\u9762\u7684\u7f51\u9875\uff09\u900f\u8fc7\u6765\u3002\u9ed8\u8ba4\u503c\u662ftrue\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u753b\u5e03\u5b8c\u5168\u4e0d\u900f\u660e\uff0c\u5c06\u503c\u8bbe\u7f6e\u4e3afalse\u662f\u5b89\u5168\u7684\u3002\u5c06\u503c\u8bbe\u7f6e\u4e3afalse\u4e0d\u4f1a\u963b\u6b62\u4f60\u8fdb\u884c\u7ed8\u56fe\u989c\u8272\u4e0e\u56fe\u50cf\u989c\u8272\u7684alpha\u6df7\u5408\uff1bRGB\u989c\u8272\u5206\u91cf\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u6df7\u5408\u8ba1\u7b97\u51fa\u6765\u3002\u7136\u800c\uff0c\u53ea\u6709\u5728\u4f60\u7684\u7a0b\u5e8f\u8f93\u51faalpha\u5206\u91cf\u5c0f\u4e8e1.0\u7684\u50cf\u7d20\uff0c\u5e76\u4e14\u4f60\u4e0d\u5e0c\u671b\u56fe\u50cf\u4e0e\u753b\u5e03\u7684\u80cc\u666f\u6df7\u5408\u65f6\uff0c\u8bbe\u7f6e\u4e3afalse\u624d\u6709\u5fc5\u8981\u3002\uff08\u4f46\u8bf7\u6ce8\u610f\uff0c\u5177\u6709alpha\u5206\u91cf\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u53ef\u80fd\u5904\u7406\u5f97\u66f4\u9ad8\u6548\uff0c\u56e0\u4e3a\u7f51\u9875\u4f7f\u7528RGBA\u989c\u8272\u8fdb\u884c\u663e\u793a\u3002\uff09</p> <p>depth \u2014 \u51b3\u5b9a\u662f\u5426\u5206\u914d\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u9ed8\u8ba4\u503c\u662ftrue\u3002\u53ea\u6709\u5728\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\u65f6\u624d\u9700\u8981\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u6df1\u5ea6\u7f13\u51b2\u533a\u901a\u5e38\u5bf92D\u56fe\u5f62\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u5982\u679c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u9700\u8981\u5b83\uff0c\u6d88\u9664\u6df1\u5ea6\u7f13\u51b2\u533a\u53ef\u4ee5\u8282\u7701GPU\u4e2d\u7684\u4e00\u4e9b\u5185\u5b58\u3002</p> <p>antialias \u2014 \u7528\u4e8e\u8bf7\u6c42\u5bf9\u56fe\u50cf\u5e94\u7528\u53cd\u952f\u9f7f\u3002WebGL\u5b9e\u73b0\u53ef\u80fd\u4f1a\u5ffd\u7565\u8bf7\u6c42\uff0c\u4f8b\u5982\u5982\u679cGPU\u4e0d\u652f\u6301\u53cd\u952f\u9f7f\u3002\u9ed8\u8ba4\u503c\u662ftrue\u3002\u53cd\u952f\u9f7f\u53ef\u4ee5\u63d0\u9ad8\u56fe\u50cf\u8d28\u91cf\uff0c\u4f46\u5b83\u4e5f\u53ef\u80fd\u663e\u8457\u589e\u52a0\u8ba1\u7b97\u65f6\u95f4\u3002</p> <p>preserveDrawingBuffer \u2014 \u51b3\u5b9a\u5728\u56fe\u50cf\u88ab\u590d\u5236\u5230\u7f51\u9875\u540e\uff0c\u662f\u5426\u4e22\u5f03\u7ed8\u56fe\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u3002\u9ed8\u8ba4\u503c\u662ffalse\u3002\u7ed8\u56fe\u7f13\u51b2\u533a\u662fWebGL\u5185\u90e8\u7684\u3002\u53ea\u6709\u5f53Web\u6d4f\u89c8\u5668\u5c06\u56fe\u50cf\u590d\u5236\u5230\u7f51\u9875\u4e0a\u65f6\uff0c\u5b83\u7684\u5185\u5bb9\u624d\u4f1a\u5728\u5c4f\u5e55\u4e0a\u53d8\u5f97\u53ef\u89c1\u3002preserveDrawingBuffer\u7684\u9ed8\u8ba4\u503c\u610f\u5473\u7740\u4e00\u65e6\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0cWebGL\u53ef\u4ee5\u4e22\u5f03\u5b83\u81ea\u5df1\u7684\u56fe\u50cf\u526f\u672c\uff0c\u8fd9\u5141\u8bb8GPU\u91ca\u653e\u8d44\u6e90\u4ee5\u4f9b\u5176\u4ed6\u64cd\u4f5c\u4f7f\u7528\u3002\u53ea\u8981\u4f60\u7684\u6e32\u67d3\u51fd\u6570\u6bcf\u6b21\u88ab\u8c03\u7528\u65f6\u90fd\u5b8c\u5168\u91cd\u7ed8\u56fe\u50cf\uff0c\u9ed8\u8ba4\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\u53ea\u6709\u5728\u4f60\u9700\u8981\u4fdd\u7559\u56fe\u50cf\u4ee5\u4fbf\u968f\u7740\u65f6\u95f4\u63a8\u79fb\u9010\u6b65\u6dfb\u52a0\u5185\u5bb9\u65f6\uff0c\u624d\u5e94\u8be5\u5c06\u503c\u8bbe\u7f6e\u4e3atrue\u3002</p> <p>We saw in Subsection 6.1.1 that a WebGL graphics context is created by the function canvas.getContext, where canvas is a reference to the <code>&lt;canvas&gt;</code> element where the graphics context will draw. This function takes an optional second parameter that can be used to set the value of certain options in the graphics context. The second parameter is only needed if you want to give a non-default value to at least one of the options. The parameter is a JavaScript object whose properties are the names of the options. Here is an example of context creation with options:</p> <pre><code>let options = {\n    alpha: false,\n    depth: false\n};\ngl = canvas.getContext( \"webgl\", options );  // (or \"webgl2\")\n</code></pre> <p>All of the options are boolean-valued. I will discuss the most useful ones here:</p> <p>alpha \u2014 determines whether the drawing buffer has an alpha component. This is the alpha component for the image canvas as a whole. If there is an alpha component, then it is possible for pixels in the canvas to be transparent or translucent, letting the background (on the web page behind the canvas) show through. The default value is true. It is safe to set the value to false, if you want the canvas to be fully opaque. Setting it to false does not stop you from doing alpha blending of the drawing color with the image color; the RGB color components can still be computed by blending. However, setting the value to false is only necessary if your program outputs pixels with alpha component less than 1.0, and you don't want your image to blend with the background of the canvas. (Note however that a graphics context with an alpha component might be handled more efficiently, because web pages use RGBA colors for their display.)</p> <p>depth \u2014 determines whether a depth buffer is allocated. The default value is true. You only need a depth buffer if you enable the depth test. The depth buffer is generally not needed for 2D graphics. If your application doesn't need it, eliminating the depth buffer can save some memory in the GPU.</p> <p>antialias \u2014 is used to request that antialiasing be applied to the image. A WebGL implementation might ignore the request, for example if antialiasing is not supported by the GPU. The default value is true. Antialiasing can improve the quality of an image, but it can also significantly increase the computation time.</p> <p>preserveDrawingBuffer \u2014 determines whether the contents of the drawing buffer are discarded after the image has been copied to the web page. The default value is false. The drawing buffer is internal to WebGL. Its contents only become visible on the screen when the web browser copies the image onto the web page. The default value for preserveDrawingBuffer means that once that happens, WebGL can discard its own copy of the image, which allows the GPU to free up resources for other operations. As long as your rendering functions completely redraw the image every time they called, the default is fine. You should set the value to true only if you need to keep the image around so that you can add to it incrementally over time.</p>"},{"location":"cn/c6/s2/#622-glsl-\u7b80\u4ecb","title":"6.2.2 GLSL \u7b80\u4ecb","text":"<p>A Bit of GLSL</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0b\u4e00\u8282\u5c06\u66f4\u5168\u9762\u5730\u4ecb\u7ecdGLSL\u3002\u4f46\u4f60\u5c06\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e\u8fd9\u95e8\u8bed\u8a00\u7684\u77e5\u8bc6\uff0c\u4ee5\u7406\u89e3\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u3002\u672c\u8282\u4ec5\u8ba8\u8bbaGLSL ES 1.00\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u95e8\u8bed\u8a00\u53ef\u4ee5\u4e0eWebGL 1.0\u548cWebGL 2.0\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>\u9876\u70b9\u6216\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u5305\u542b\u5168\u5c40\u53d8\u91cf\u58f0\u660e\u3001\u7c7b\u578b\u5b9a\u4e49\u548c\u51fd\u6570\u5b9a\u4e49\u3002\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u5fc5\u987b\u662fmain()\uff0c\u8fd9\u662f\u7740\u8272\u5668\u7684\u5165\u53e3\u70b9\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u662fGPU\u5904\u7406\u9876\u70b9\u6216\u7247\u6bb5\u65f6\u8c03\u7528\u7684\u51fd\u6570\u3002main()\u4f8b\u7a0b\u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\uff0c\u4e5f\u4e0d\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u5b83\u7684\u5f62\u5f0f\u662f</p> <pre><code>void main() {\n    .\n    .\n    .\n}\n</code></pre> <p>\uff08\u6216\u8005\uff0c\u5b83\u53ef\u4ee5\u88ab\u58f0\u660e\u4e3avoid main(void)\u3002\uff09</p> <p>\u63a7\u5236\u7ed3\u6784\u662f\u6709\u9650\u7684\u3002if\u8bed\u53e5\u4e0eC\u6216Java\u4e2d\u7684\u683c\u5f0f\u76f8\u540c\u3002\u4f46\u5bf9for\u5faa\u73af\u8bed\u6cd5\u65bd\u52a0\u4e86\u4e00\u4e9b\u9650\u5236\uff0c\u4e0d\u5141\u8bb8\u4f7f\u7528while\u548cdo...while\u5faa\u73af\u3002\u6570\u636e\u7ed3\u6784\u5305\u62ec\u6570\u7ec4\u548cstructs\uff0c\u4e5f\u6709\u4e00\u4e9b\u9650\u5236\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u6240\u6709\u8fd9\u4e9b\u3002</p> <p>GLSL\u7684\u4f18\u52bf\u5728\u4e8e\u5176\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\u548c\u7528\u4e8e\u5904\u7406\u5411\u91cf\u548c\u77e9\u9635\u7684\u51fd\u6570\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6570\u636e\u7c7b\u578bfloat\u3001vec2\u3001vec3\u548cvec4\u3002\u8fd9\u4e9b\u7c7b\u578b\u5206\u522b\u8868\u793a1\u30012\u30013\u62164\u4e2a\u6d6e\u70b9\u6570\u3002\u53d8\u91cf\u58f0\u660e\u4e0eC\u7c7b\u4f3c\u3002\u4e00\u4e9b\u793a\u4f8b\u662f\uff1a</p> <pre><code>attribute vec3 a_coords;  // \uff08\u4ec5\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\uff09\nvec3 rgb;\nfloat width, height;\nuniform vec2 u_size;\nvarying vec4 v_color;\n</code></pre> <p>Attribute\u3001uniform\u548cvarying\u53d8\u91cf\u5728\u7b2c6.1\u8282\u4e2d\u8ba8\u8bba\u8fc7\u3002\u5b83\u4eec\u7528\u4e8e\u5728JavaScript\u4e0e\u7740\u8272\u5668\u7a0b\u5e8f\u4e4b\u95f4\u4ee5\u53ca\u9876\u70b9\u7740\u8272\u5668\u4e0e\u7247\u6bb5\u7740\u8272\u5668\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u5728\u53d8\u91cf\u540d\u4e2d\u4f7f\u7528\u4e86\u524d\u7f00\"a_\"\u3001\"u_\"\u548c\"v_\"\uff0c\u4f46\u8fd9\u4e0d\u662f\u5fc5\u987b\u7684\u3002</p> <p>\u901a\u5e38\uff0c\u6211\u4eec\u4f1a\u4ece\u5355\u72ec\u7684\u6570\u5b57\u6216\u8f83\u77ed\u7684\u5411\u91cf\u6784\u9020\u5411\u91cf\u7684\u503c\u3002GLSL\u5177\u6709\u7075\u6d3b\u7684\u7b26\u53f7\u8868\u793a\u6cd5\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u4f7f\u7528\u4e0a\u8ff0\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199</p> <pre><code>rgb = vec3(1.0, 0.7, 0.0);  // \u4ece\u5e38\u6570\u6784\u9020vec3\nv_color = vec4(rgb, 1.0);  // \u4ecevec3\u548c\u5e38\u6570\u6784\u9020vec4\ngl_Position = vec4(a_coords, 0.0, 1.0);  // \u4ecevec2\u548c2\u4e2a\u5e38\u6570\u6784\u9020vec4\n</code></pre> <p>\u5728\u6700\u540e\u4e00\u4e2a\u8d4b\u503c\u8bed\u53e5\u4e2d\uff0cgl_Position\u662f\u7279\u6b8a\u5185\u7f6e\u53d8\u91cf\uff0c\u7528\u4e8e\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7ed9\u51fa\u9876\u70b9\u7684\u5750\u6807\u3002gl_Position\u662fvec4\u7c7b\u578b\uff0c\u9700\u8981\u56db\u4e2a\u6570\u5b57\uff0c\u56e0\u4e3a\u5750\u6807\u662f\u4ee5\u9f50\u6b21\u5750\u68073.5.3\u5c0f\u8282\u6307\u5b9a\u7684\u3002\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u7279\u6b8a\u53d8\u91cfgl_FragCoord\u4e5f\u662fvec4\u7c7b\u578b\uff0c\u7ed9\u51fa\u50cf\u7d20\u7684\u5750\u6807\u4f5c\u4e3a\u9f50\u6b21\u5750\u6807\u3002\u800cgl_FragColor\u662fvec4\u7c7b\u578b\uff0c\u7ed9\u51fa\u50cf\u7d20\u7684\u56db\u4e2aRGBA\u989c\u8272\u5206\u91cf\u3002</p> <p>\u9876\u70b9\u7740\u8272\u5668\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u5c5e\u6027\u6765\u7ed9\u51fa\u9876\u70b9\u7684\u5750\u6807\u3002\u5bf9\u4e8e2D\u7ed8\u56fe\uff0c\u5f88\u81ea\u7136\u5730\u8be5\u5c5e\u6027\u662fvec2\u7c7b\u578b\u3002\u5982\u679c\u6211\u4eec\u5047\u8bbe\u5c5e\u6027\u7684\u503c\u5df2\u7ecf\u7528\u88c1\u526a\u5750\u6807\u8868\u793a\uff0c\u90a3\u4e48\u9876\u70b9\u7740\u8272\u5668\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\u53ef\u80fd\u975e\u5e38\u7b80\u5355\uff1a</p> <pre><code>attribute vec2 coords;\nvoid main() {\n    gl_Position = vec4(coords, 0.0, 1.0);\n}\n</code></pre> <p>\u5bf9\u4e8e\u76f8\u5e94\u7684\u6700\u5c0f\u7247\u6bb5\u7740\u8272\u5668\uff0c\u6211\u4eec\u53ef\u80fd\u53ea\u662f\u7b80\u5355\u5730\u5c06\u6240\u6709\u5185\u5bb9\u7ed8\u5236\u4e3a\u9ec4\u8272\u3002</p> <pre><code>precision mediump float;\nvoid main() {\n    gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n}\n</code></pre> <p>\u8fd9\u6bb5\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u7b2c\u4e00\u884c\u770b\u8d77\u6765\u6709\u4e9b\u5947\u602a\uff0c\u8fd8\u6ca1\u6709\u89e3\u91ca\uff0c\u4f46\u9700\u8981\u7c7b\u4f3c\u7684\u8bed\u53e5\u3002\u5b83\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u89e3\u91ca\u3002</p> <p>The next section will cover GLSL more thoroughly. But you will need to know something about the language to understand the examples in this section. This section discusses GLSL ES 1.00 only, but remember that that language can be used with both WebGL 1.0 and WebGL 2.0.</p> <p>A vertex or fragment shader can contain global variable declarations, type definitions, and function definitions. One of the functions must be main(), which is the entry point for the shader; that is, it is the function that is called by the GPU to process the vertex or fragment. The main() routine takes no parameters and does not return a value, so it takes the form</p> <pre><code>void main() {\n    .\n    .\n    .\n}\n</code></pre> <p>(Alternatively, it can be declared as void main(void).)</p> <p>Control structures are limited. If statements take the same form as in C or Java. But some limitations are placed on the for loop syntax, and while and do...while loops are not allowed. Data structures include arrays and structs, again with some limitations. We will cover all this in some detail in the next section.</p> <p>GLSL's strength lies in its built-in data types and functions for working with vectors and matrices. In this section, we will only need the data types float, vec2, vec3, and vec4. These types represent, respectively, 1, 2, 3, or 4 floating point numbers. Variable declarations are similar to C. Some examples are:</p> <pre><code>attribute vec3 a_coords;  // (only in vertex shader)\nvec3 rgb;\nfloat width, height;\nuniform vec2 u_size;\nvarying vec4 v_color;\n</code></pre> <p>Attribute, uniform, and varying variables were discussed in Section 6.1. They are used for communication between JavaScript and the shader program and between the vertex shader and the fragment shader. In the above examples, I used the prefixes \"a_\", \"u_\", and \"v_\" in the names of the variables, but that is not required.</p> <p>It is common to construct a value for a vector from individual numbers or from shorter vectors. GLSL has a flexible notation for doing this. Using the variables declared in the above examples, we can write</p> <pre><code>rgb = vec3( 1.0, 0.7, 0.0 );  // construct a vec3 from constants\nv_color = vec4( rgb, 1.0 );  // construct a vec4 from a vec3 and a constant\ngl_Position = vec4( a_coords, 0.0, 1.0 );  // vec4 from a vec2 and 2 constants\n</code></pre> <p>In the last assignment statement, gl_Position is the special built-in variable that is used in the vertex shader to give the coordinates of the vertex. gl_Position is of type vec4, requiring four numbers, because the coordinates are specified as homogeneous coordinates (Subsection 3.5.3). The special variable gl_FragCoord in the fragment shader is also a vec4, giving the coordinates of the pixel as homogeneous coordinates. And gl_FragColor is a vec4, giving the four RGBA color components for the pixel.</p> <p>A vertex shader needs, at a minimum, an attribute to give the coordinates of the vertex. For 2D drawing, it's natural for that attribute to be of type vec2. If we assume that the values for the attribute are already expressed in clip coordinates, then the complete source code for the vertex shader could be as simple as:</p> <pre><code>attribute vec2 coords;\nvoid main() {\n    gl_Position = vec4( coords, 0.0, 1.0 );\n}\n</code></pre> <p>For a corresponding minimal fragment shader, we might simply draw everything in yellow.</p> <pre><code>precision mediump float;\nvoid main() {\n    gl_FragColor = vec4( 1.0, 1.0, 0.0, 1.0 );  \n}\n</code></pre> <p>The strange first line in this fragment shader has not been explained, but something like it is required. It will be explained in the next section.</p>"},{"location":"cn/c6/s2/#623-webgl-\u4e2d\u7684-rgb-\u4e09\u89d2\u5f62","title":"6.2.3 WebGL \u4e2d\u7684 RGB \u4e09\u89d2\u5f62","text":"<p>The RGB Triangle in WebGL</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u67e5\u770b\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5b8c\u6574\u7684WebGL\u793a\u4f8b\uff0c\u5b83\u5c06\u7ed8\u5236\u4e00\u4e2a\u5e38\u89c1\u7684RGB\u989c\u8272\u4e09\u89d2\u5f62\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <p>123</p> <p>\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728 webgl/webgl-rgb-triangle.html \u4e2d\u627e\u5230\u3002\u8be5\u4ee3\u7801\u5305\u62ec\u4e86\u57286.1.1\u5c0f\u8282\u548c6.1.2\u5c0f\u8282\u4e2d\u8ba8\u8bba\u7684\u901a\u5e38\u7684init()\u548ccreateProgram()\u51fd\u6570\uff0c\u53ea\u662f\u6211\u5df2\u5173\u95ed\u4e86WebGL\u4e0a\u4e0b\u6587\u4e2d\u7684\u201calpha\u201d\u548c\u201cdepth\u201d\u9009\u9879\u3002\u6211\u5c06\u4e0d\u518d\u8fdb\u4e00\u6b65\u8ba8\u8bba\u8fd9\u4e24\u4e2a\u51fd\u6570\u3002</p> <p>\u8be5\u793a\u4f8b\u4f7f\u7528\u7c7b\u578b\u4e3avec2\u7684\u5c5e\u6027\u6765\u6307\u5b9a\u4e09\u89d2\u5f62\u9876\u70b9\u7684\u5750\u6807\u3002\u5728\u9ed8\u8ba4\u7684WebGL\u5750\u6807\u7cfb\u4e2d\uff0c\u5750\u6807\u8303\u56f4\u4ece-1\u52301\u3002\u5bf9\u4e8e\u4e09\u89d2\u5f62\uff0c\u6211\u4f7f\u7528\u7684\u9876\u70b9\u5750\u6807\u5728\u8be5\u8303\u56f4\u5185\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u5750\u6807\u53d8\u6362\u3002\u7531\u4e8e\u4e09\u89d2\u5f62\u7684\u6bcf\u4e2a\u9876\u70b9\u5904\u7684\u989c\u8272\u90fd\u4e0d\u540c\uff0c\u9876\u70b9\u989c\u8272\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u3002\u7531\u4e8e\u6b64\u7a0b\u5e8f\u4e0d\u9700\u8981alpha\u5206\u91cf\uff0c\u56e0\u6b64\u6211\u4f7f\u7528\u7c7b\u578b\u4e3avec3\u7684\u5c5e\u6027\u6765\u8868\u793a\u9876\u70b9\u989c\u8272\u3002</p> <p>\u4e09\u89d2\u5f62\u5185\u90e8\u50cf\u7d20\u7684\u989c\u8272\u662f\u901a\u8fc7\u63d2\u503c\u9876\u70b9\u5904\u7684\u989c\u8272\u6765\u786e\u5b9a\u7684\u3002\u63d2\u503c\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53d8\u5316\u53d8\u91cf\u6765\u8868\u793a\u989c\u8272\u3002\u53d8\u5316\u53d8\u91cf\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u88ab\u8d4b\u503c\uff0c\u5e76\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u5176\u503c\u3002</p> <p>\u770b\u8d77\u6765\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u989c\u8272\u53d8\u91cf\uff1a\u4e00\u4e2a\u5c5e\u6027\u548c\u4e00\u4e2a\u53d8\u5316\u53d8\u91cf\u3002\u6211\u4eec\u4e0d\u80fd\u5c06\u540c\u4e00\u4e2a\u53d8\u91cf\u7528\u4e8e\u4e24\u4e2a\u76ee\u7684\u3002\u5c5e\u6027\u5c06\u9876\u70b9\u989c\u8272\u4eceJavaScript\u4f20\u5165\u9876\u70b9\u7740\u8272\u5668\uff1b\u53d8\u5316\u53d8\u91cf\u5c06\u989c\u8272\u4ece\u9876\u70b9\u7740\u8272\u5668\u4f20\u5165\u7247\u6bb5\u7740\u8272\u5668\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ece\u9876\u70b9\u7740\u8272\u5668\u4f20\u51fa\u7684\u989c\u8272\u503c\u4e0e\u4f20\u5165\u7684\u503c\u76f8\u540c\uff0c\u56e0\u6b64\u7740\u8272\u5668\u53ea\u9700\u8981\u5c06\u989c\u8272\u5c5e\u6027\u7684\u503c\u590d\u5236\u5230\u53d8\u5316\u53d8\u91cf\u4e2d\u3002\u8fd9\u79cd\u6a21\u5f0f\u5b9e\u9645\u4e0a\u76f8\u5f53\u5e38\u89c1\u3002\u4ee5\u4e0b\u662f\u9876\u70b9\u7740\u8272\u5668\uff1a</p> <pre><code>attribute vec2 a_coords;\nattribute vec3 a_color;\nvarying vec3 v_color;\n\nvoid main() {\n    gl_Position = vec4(a_coords, 0.0, 1.0);\n    v_color = a_color;\n}\n</code></pre> <p>\u7247\u6bb5\u7740\u8272\u5668\u53ea\u9700\u8981\u5c06\u6765\u81ea\u53d8\u5316\u53d8\u91cf\u7684\u4f20\u5165\u989c\u8272\u503c\u590d\u5236\u5230gl_FragColor\u4e2d\uff0c\u540e\u8005\u6307\u5b9a\u4e86\u7247\u6bb5\u7684\u989c\u8272\uff1a</p> <pre><code>precision mediump float;\nvarying vec3 v_color;\n\nvoid main() {\n    gl_FragColor = vec4(v_color, 1.0);\n}\n</code></pre> <p>\u4e3a\u4e86\u7f16\u8bd1\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u7740\u8272\u5668\u7684\u6e90\u4ee3\u7801\u5fc5\u987b\u5728JavaScript\u5b57\u7b26\u4e32\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u901a\u8fc7\u8fde\u63a5\u4ee3\u8868\u4ee3\u7801\u5404\u884c\u7684\u5e38\u91cf\u5b57\u7b26\u4e32\u6765\u6784\u9020\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff0c\u7247\u6bb5\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u5305\u542b\u5728JavaScript\u811a\u672c\u4e2d\uff1a</p> <pre><code>const fragmentShaderSource =\n            \"precision mediump float;\\n\" +\n            \"varying vec3 v_color;\\n\" +\n            \"void main() {\\n\" +\n            \"   gl_FragColor = vec4(v_color, 1.0);\\n\" +\n            \"}\\n\";\n</code></pre> <p>\u6bcf\u884c\u672b\u5c3e\u7684\u6362\u884c\u7b26\"\\n\"\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u5b83\u5141\u8bb8GLSL\u7f16\u8bd1\u5668\u5728\u5176\u751f\u6210\u7684\u4efb\u4f55\u9519\u8bef\u6d88\u606f\u4e2d\u5305\u542b\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u884c\u53f7\u3002</p> <p>\u5728JavaScript\u65b9\u9762\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6765\u8868\u793aWebGL\u4e0a\u4e0b\u6587\u3002\u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u5c5e\u6027\u53d8\u91cf\u63d0\u4f9b\u503c\u3002\u57286.1.5\u5c0f\u8282\u4e2d\u8ba8\u8bba\u4e86\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u9700\u8981\u5168\u5c40\u53d8\u91cf\u6765\u8868\u793a\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u5c5e\u6027\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u8868\u793a\u5c06\u4fdd\u5b58\u5c5e\u6027\u503c\u7684VBO\u3002\u6211\u4f7f\u7528\u4ee5\u4e0b\u53d8\u91cf\uff1a</p> <pre><code>let gl;  // WebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002\n\nlet attributeCoords;  // \u5c5e\u6027 \"a_coords\" \u7684\u4f4d\u7f6e\u3002\nlet bufferCoords;     // \u4e00\u4e2a\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61\uff0c\u7528\u4e8e\u4fdd\u5b58 a_coords \u7684\u503c\u3002\n\nlet attributeColor;   // \u5c5e\u6027 \"a_color\" \u7684\u4f4d\u7f6e\u3002\nlet bufferColor;      // \u4e00\u4e2a\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61\uff0c\u7528\u4e8e\u4fdd\u5b58 a_color \u7684\u503c\u3002\n</code></pre> <p>\u56fe\u5f62\u4e0a\u4e0b\u6587\u662f\u5728init()\u51fd\u6570\u4e2d\u521b\u5efa\u7684\u3002\u5176\u4ed6\u53d8\u91cf\u5728\u4eceinit()\u8c03\u7528\u7684initGL()\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u3002\u8be5\u51fd\u6570\u8fd8\u4f7f\u75286.1.2\u5c0f\u8282\u4e2d\u7684createProgram()\u51fd\u6570\u521b\u5efa\u7740\u8272\u5668\u7a0b\u5e8f\uff1a</p> <pre><code>function initGL() {\n    let prog = createProgram(gl, vertexShaderSource, fragmentShaderSource);\n    gl.useProgram(prog);\n\n    attributeCoords = gl.getAttribLocation(prog, \"a_coords\");\n    bufferCoords = gl.createBuffer();\n\n    attributeColor = gl.getAttribLocation(prog, \"a_color\");\n    bufferColor = gl.createBuffer();\n}\n</code></pre> <p>\u8981\u8bbe\u7f6e\u5c5e\u6027\u7684\u503c\uff0c\u6211\u4eec\u9700\u8981\u516d\u4e2a\u4e0d\u540c\u7684JavaScript\u547d\u4ee4\uff08\u5982\u679c\u8fd8\u8981\u8ba1\u7b97\u5c06\u5c5e\u6027\u503c\u653e\u5165\u7c7b\u578b\u5316\u6570\u7ec4\uff0c\u9700\u8981\u66f4\u591a\u7684\u547d\u4ee4\uff09\u3002getAttribLocation\u548ccreateBuffer\u547d\u4ee4\u5f88\u53ef\u80fd\u53ea\u9700\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u8c03\u7528\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u5c06\u5b83\u4eec\u653e\u5728\u6211\u7684\u521d\u59cb\u5316\u7a0b\u5e8f\u4e2d\u3002\u5176\u4ed6\u56db\u4e2a\u547d\u4ee4\u5728draw()\u4e2d\uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u4e8e\u7ed8\u5236\u56fe\u50cf\u3002\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0cdraw()\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u6240\u4ee5\u5c06\u4ee3\u7801\u5206\u6210\u4e24\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u771f\u7684\u5fc5\u8981\uff0c\u4f46\u901a\u5e38\uff0c\u7ed8\u5236\u51fd\u6570\u65e8\u5728\u88ab\u591a\u6b21\u8c03\u7528\u3002\uff08\u6bcf\u6b21\u8c03\u7528draw()\u65f6\u90fd\u521b\u5efa\u4e00\u4e2a\u65b0\u7684VBO\u5c06\u662f\u4e00\u4e2a\u7279\u522b\u7cdf\u7cd5\u7684\u4e3b\u610f\uff01\uff09</p> <p>\u5728\u7ed8\u5236\u4e09\u89d2\u5f62\u4e4b\u524d\uff0cdraw()\u51fd\u6570\u7528\u9ed1\u8272\u80cc\u666f\u586b\u5145\u753b\u5e03\u3002\u8fd9\u662f\u4f7f\u7528WebGL\u51fd\u6570gl.clearColor\u548cgl.clear\u5b8c\u6210\u7684\uff0c\u5b83\u4eec\u4e0eOpenGL 1.1\u51fd\u6570glClearColor\u548cglClear\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u529f\u80fd\u3002\u4ee5\u4e0b\u662f\u4ee3\u7801\uff1a</p> <pre><code>function draw() { \n\n    gl.clearColor(0,0,0,1);  // \u6307\u5b9a\u7528\u4e8e\u6e05\u9664\u7684\u989c\u8272\n    gl.clear(gl.COLOR_BUFFER_BIT);  // \u6e05\u9664\u753b\u5e03\uff08\u53d8\u4e3a\u9ed1\u8272\uff09\n\n    /* \u8bbe\u7f6e \"a_coords\" \u5c5e\u6027\u7684\u503c */\n\n    let coords = new Float32Array( [-0.9,-0.8, 0.9,-0.8, 0,0.9] );\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufferCoords);\n    gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STREAM_DRAW);\n    gl.vertexAttribPointer(attributeCoords, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(attributeCoords); \n\n    /* \u8bbe\u7f6e \"a_color\" \u5c5e\u6027\u7684\u503c */\n\n    let color = new Float32Array( [0,0,1, 0,1,0, 1,0,0] );\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufferColor);\n    gl.bufferData(gl.ARRAY_BUFFER, color, gl.STREAM_DRAW);\n    gl.vertexAttribPointer(attributeColor, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(attributeColor); \n\n    /* \u7ed8\u5236\u4e09\u89d2\u5f62 */\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u53d8\u91cfcoords\u5305\u542b\u9876\u70b9\u7740\u8272\u5668\u4e2d\u540d\u4e3a\"a_coords\"\u7684\u5c5e\u6027\u7684\u503c\u3002\u8be5\u5c5e\u6027\u8868\u793a\u9876\u70b9\u7684x\u548cy\u5750\u6807\u3002\u7531\u4e8e\u5c5e\u6027\u662fvec2\u7c7b\u578b\uff0c\u6bcf\u4e2a\u9876\u70b9\u9700\u8981\u4e24\u4e2a\u6570\u5b57\u3002coords\u7684\u503c\u662f\u5728\u8fd9\u91cc\u4f7f\u7528\u5e26\u666e\u901aJavaScript\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u7684Float32Array\u6784\u9020\u51fd\u6570\u521b\u5efa\u7684\uff1bJavaScript\u6570\u7ec4\u4e2d\u7684\u503c\u88ab\u590d\u5236\u5230\u65b0\u521b\u5efa\u7684\u7c7b\u578b\u5316\u6570\u7ec4\u4e2d\u3002\u7c7b\u4f3c\u5730\uff0c\u53d8\u91cfcolor\u5305\u542b\u9876\u70b9\u7740\u8272\u5668\u4e2d\"a_color\"\u5c5e\u6027\u7684\u503c\uff0c\u6bcf\u4e2a\u9876\u70b9\u6709\u4e09\u4e2a\u6570\u5b57\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u89e3\u91ca\u4e86RGB\u4e09\u89d2\u5f62\u7a0b\u5e8f\u7684\u6240\u6709\u90e8\u5206\u3002\u9605\u8bfb\u5b8c\u6574\u7684\u6e90\u4ee3\u7801\u4ee5\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u3002</p> <p>We are ready to look at our first full WebGL example, which will draw the usual RGB color triangle, as shown here:</p> <p>123</p> <p>The source code can be found in webgl/webgl-rgb-triangle.html. The code includes the usual init() and createProgram() functions as discussed in Subsection 6.1.1 and Subsection 6.1.2, except that I have turned off the \"alpha\" and \"depth\" options in the WebGL context. I won't discuss those two functions further.</p> <p>The example uses an attribute of type vec2 to specify the coordinates of the vertices of the triangle. Coordinates range from \u22121 to 1 in the default WebGL coordinate system. For the triangle, the vertex coordinates that I use are in that range, so no coordinate transformation is needed. Since the color is different at each vertex of the triangle, the vertex color is also an attribute. I use an attribute of type vec3 for the vertex colors, since no alpha component is needed in this program.</p> <p>The color of interior pixels in the triangle is interpolated from the colors at the vertices. The interpolation means that we need a varying variable to represent the color. A varying variable is assigned a value in the vertex shader, and its value is used in the fragment shader.</p> <p>It looks like we need two color variables: an attribute and a varying variable. We can't use the same variable for both purposes. The attribute carries the vertex color from JavaScript into the vertex shader; the varying variable carries the color from the vertex shader to the fragment shader. In this case, the color value going out of the vertex shader is the same as the value coming in, so the shader just has to copy the value from the color attribute to the varying variable. This pattern is actually fairly common. Here is the vertex shader:</p> <pre><code>attribute vec2 a_coords;\nattribute vec3 a_color;\nvarying vec3 v_color;\n\nvoid main() {\ngl_Position = vec4(a_coords, 0.0, 1.0);\nv_color = a_color;\n}\n</code></pre> <p>The fragment shader only has to copy the incoming color value from the varying variable into gl_FragColor, which specifies the outgoing color for the fragment:</p> <pre><code>precision mediump float;\nvarying vec3 v_color;\n\nvoid main() {\ngl_FragColor = vec4(v_color, 1.0);\n}\n</code></pre> <p>In order to compile the shader program, the source code for the shaders has to be in JavaScript strings. In this case, I construct the strings by concatenating constant strings representing the individual lines of code. For example, the fragment shader source code is included in the JavaScript script as the global variable</p> <pre><code>const fragmentShaderSource =\n            \"precision mediump float;\\n\" +\n            \"varying vec3 v_color;\\n\" +\n            \"void main() {\\n\" +\n            \"   gl_FragColor = vec4(v_color, 1.0);\\n\" +\n            \"}\\n\";\n</code></pre> <p>The line feed character, \"\\n\", at the end of each line is not required, but it allows the GLSL compiler to include a meaningful line number in any error message that it generates.</p> <p>Also on the JavaScript side, we need a global variable for the WebGL context. And we need to provide values for the attribute variables. The rather complicated process was discussed in Subsection 6.1.5. We need global variables to represent the location of each attribute in the shader program, and to represent the VBOs that will hold the attribute values. I use the variables</p> <pre><code>let gl;  // The WebGL graphics context.\n\nlet attributeCoords;  // Location of the attribute named \"a_coords\".\nlet bufferCoords;     // A vertex buffer object to hold the values for a_coords.\n\nlet attributeColor;   // Location of the attribute named \"a_color\".\nlet bufferColor;      // A vertex buffer object to hold the values for a_color.\n</code></pre> <p>The graphics context is created in the init() function. The other variables are initialized in a function initGL() that is called from init(). That function also creates the shader program, using the createProgram() function from Subsection 6.1.2:</p> <pre><code>function initGL() {\n    let prog = createProgram( gl, vertexShaderSource, fragmentShaderSource );\n    gl.useProgram(prog);\n\n    attributeCoords = gl.getAttribLocation(prog, \"a_coords\");\n    bufferCoords = gl.createBuffer();\n\n    attributeColor = gl.getAttribLocation(prog, \"a_color\");\n    bufferColor = gl.createBuffer();\n}\n</code></pre> <p>To set up the values for an attribute, we need six different JavaScript commands (and more if you count placing the attribute values into a typed array). The commands getAttribLocation and createBuffer will most likely be called just once for each attribute, so I put them in my initialization routine. The other four commands are in draw(), the function that draws the image. In this program, draw() is called just once, so the division of the code into two functions is not really necessary, but in general, a draw function is meant to be called many times. (It would be a particularly bad idea to create a new VBO every time draw() is called!)</p> <p>Before drawing the triangle, the draw() function fills the canvas with a black background. This is done using the WebGL functions gl.clearColor and gl.clear, which have exactly the same functionality as the OpenGL 1.1 functions glClearColor and glClear. Here is the code:</p> <pre><code>function draw() { \n\n    gl.clearColor(0,0,0,1);  // specify the color to be used for clearing\n    gl.clear(gl.COLOR_BUFFER_BIT);  // clear the canvas (to black)\n\n    /* Set up values for the \"a_coords\" attribute */\n\n    let coords = new Float32Array( [ -0.9,-0.8, 0.9,-0.8, 0,0.9 ] );\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufferCoords);\n    gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STREAM_DRAW);\n    gl.vertexAttribPointer(attributeCoords, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(attributeCoords); \n\n    /* Set up values for the \"a_color\" attribute */\n\n    let color = new Float32Array( [ 0,0,1, 0,1,0, 1,0,0 ] );\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufferColor);\n    gl.bufferData(gl.ARRAY_BUFFER, color, gl.STREAM_DRAW);\n    gl.vertexAttribPointer(attributeColor, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(attributeColor); \n\n    /* Draw the triangle. */\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n\n}\n</code></pre> <p>In this function, the variable coords contains values for the attribute named \"a_coords\" in the vertex shader. That attribute represents the x and y coordinates of the vertex. Since the attribute is of type vec2, two numbers are required for each vertex. The value for coords is created here with a Float32Array constructor that takes an ordinary JavaScript array as its parameter; the values from the JavaScript array are copied into the newly created typed array. Similarly, the variable color contains values for the \"a_color\" attribute in the vertex shader, with three numbers per vertex.</p> <p>We have now accounted for all the pieces of the RGB triangle program. Read the complete source code to see how it fits together.</p>"},{"location":"cn/c6/s2/#624-\u5f62\u72b6\u538b\u6a21","title":"6.2.4 \u5f62\u72b6\u538b\u6a21","text":"<p>Shape Stamper</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u7684\u4e0b\u4e00\u4e2a\u793a\u4f8b\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u65b0\u7279\u6027\u3002\u8fd9\u4e2a\u793a\u4f8b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4ea4\u4e92\u5f0f\u7a0b\u5e8f\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u753b\u5e03\u653e\u7f6e\u5f62\u72b6\u3002\u5f62\u72b6\u7684\u5c5e\u6027\u6765\u81ea\u4e00\u7ec4\u5f39\u51fa\u83dc\u5355\u3002\u5c5e\u6027\u5305\u62ec\u5f62\u72b6\u7684\u989c\u8272\u548c\u900f\u660e\u5ea6\uff0c\u4ee5\u53ca\u7ed8\u5236\u7684\u51e0\u79cd\u53ef\u80fd\u5f62\u72b6\u4e2d\u7684\u54ea\u4e00\u79cd\u3002\u5f62\u72b6\u4ee5\u7528\u6237\u70b9\u51fb\u7684\u70b9\u4e3a\u4e2d\u5fc3\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u662f webgl/shape-stamper.html\u3002\u8fd9\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6f14\u793a\u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <p></p> <p>\u5728RGB\u4e09\u89d2\u5f62\u793a\u4f8b\u4e2d\uff0ccolor\u662f\u4e00\u4e2a\u5c5e\u6027\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4e09\u89d2\u5f62\u539f\u8bed\u7684\u9876\u70b9\u90fd\u88ab\u5206\u914d\u4e86\u4e0d\u540c\u7684\u989c\u8272\u3002\u5728shape-stamper\u7a0b\u5e8f\u4e2d\uff0c\u6240\u6709\u9876\u70b9\uff0c\u5b9e\u9645\u4e0a\u6240\u6709\u50cf\u7d20\uff0c\u5728\u539f\u8bed\u4e2d\u90fd\u6709\u76f8\u540c\u7684\u989c\u8272\u3002\u8fd9\u610f\u5473\u7740\u989c\u8272\u53ef\u4ee5\u662f\u4e00\u4e2a\u7edf\u4e00\u53d8\u91cf\u3002\u793a\u4f8b\u8fd8\u5141\u8bb8\u900f\u660e\u5ea6\uff0c\u6240\u4ee5\u989c\u8272\u9700\u8981alpha\u5206\u91cf\u4ee5\u53caRGB\u5206\u91cf\u3002\u5728\u7a0b\u5e8f\u4e2d\u5c06alpha\u548cRGB\u5206\u91cf\u4f5c\u4e3a\u5355\u72ec\u7684\u6570\u91cf\u5904\u7406\u662f\u65b9\u4fbf\u7684\uff0c\u6240\u4ee5\u6211\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u5c06\u5b83\u4eec\u8868\u793a\u4e3a\u4e24\u4e2a\u5355\u72ec\u7684\u7edf\u4e00\u53d8\u91cf\u3002\u989c\u8272\u548calpha\u7edf\u4e00\u53d8\u91cf\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7528\u4e8e\u5206\u914d\u7247\u6bb5\u7684\u989c\u8272\u3002\u5b9e\u9645\u4e0a\uff0c\u7247\u6bb5\u7740\u8272\u5668\u53ea\u505a\u8fd9\u4ef6\u4e8b\uff0c\u6240\u4ee5\u5b8c\u6574\u7684\u6e90\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>precision mediump float;\nuniform vec3 u_color;\nuniform float u_alpha;\nvoid main() {\n    gl_FragColor = vec4(u_color, u_alpha);\n}\n</code></pre> <p>\u8981\u5728JavaScript\u65b9\u9762\u4f7f\u7528\u7edf\u4e00\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5b83\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4f4d\u7f6e\u3002\u7a0b\u5e8f\u4f7f\u7528\u547d\u4ee4\u5728initGL()\u51fd\u6570\u4e2d\u83b7\u53d6\u4e24\u4e2a\u7edf\u4e00\u53d8\u91cf\u7684\u4f4d\u7f6e\uff1a</p> <pre><code>uniformColor = gl.getUniformLocation(prog, \"u_color\");\nuniformAlpha = gl.getUniformLocation(prog, \"u_alpha\");\n</code></pre> <p>\u7a0b\u5e8f\u6709\u4e24\u4e2a\u5f39\u51fa\u83dc\u5355\uff0c\u8ba9\u7528\u6237\u9009\u62e9\u7528\u4e8e\u7ed8\u5236\u539f\u8bed\u7684\u989c\u8272\u548calpha\u3002\u7ed8\u5236\u5f62\u72b6\u65f6\uff0c\u83dc\u5355\u4e2d\u7684\u503c\u51b3\u5b9a\u4e86\u7edf\u4e00\u53d8\u91cf\u7684\u503c\uff1a</p> <pre><code>let colorNumber = Number(document.getElementById(\"colorChoice\").value);\nlet alpha = Number(document.getElementById(\"opacityChoice\").value);\n\ngl.uniform3fv(uniformColor, colorList[colorNumber]);\ngl.uniform1f(uniformAlpha, alpha);\n</code></pre> <p>\u4f7f\u7528gl.uniform*\u7cfb\u5217\u51fd\u6570\u8bbe\u7f6e\u7edf\u4e00\u53d8\u91cf\u7684\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0ccolorList[colorNumber]\u662f\u4e00\u4e2a\u5305\u542b\u989c\u8272\u7684RGB\u989c\u8272\u5206\u91cf\u7684\u4e09\u4e2a\u6570\u5b57\u6570\u7ec4\uff0c\u6240\u4ee5\u4f7f\u7528\u51fd\u6570gl.uniform3fv\u6765\u8bbe\u7f6e\u503c\uff1a\"3f\"\u610f\u5473\u7740\u63d0\u4f9b\u4e863\u4e2a\u6d6e\u70b9\u503c\uff0c\"v\"\u610f\u5473\u7740\u8fd9\u4e09\u4e2a\u503c\u5728\u6570\u7ec4\u4e2d\u3002\u8bf7\u6ce8\u610f\uff0c\u9700\u8981\u4e09\u4e2a\u6d6e\u70b9\u503c\u6765\u5339\u914d\u7740\u8272\u5668\u4e2d\u7edf\u4e00\u53d8\u91cf\u7684\u7c7b\u578b\uff0cvec3\u3002alpha\u7684\u503c\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6d6e\u70b9\u6570\uff0c\u6240\u4ee5\u4f7f\u7528gl.uniform1f\u8bbe\u7f6e\u76f8\u5e94\u7684\u7edf\u4e00\u53d8\u91cf\u3002</p> <p>\u4e3a\u4e86\u8ba9\u989c\u8272\u7684alpha\u5206\u91cf\u4ea7\u751f\u4efb\u4f55\u6548\u679c\uff0c\u5fc5\u987b\u542f\u7528alpha\u6df7\u5408\u3002\u8fd9\u662f\u901a\u8fc7\u521d\u59cb\u5316\u5b8c\u6210\u7684\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u547d\u4ee4\uff1a</p> <pre><code>gl.enable(gl.BLEND);\ngl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n</code></pre> <p>\u7b2c\u4e00\u884c\u542f\u7528\u4e86alpha\u5206\u91cf\u7684\u4f7f\u7528\u3002\u7b2c\u4e8c\u884c\u544a\u8bc9\u5982\u4f55\u4f7f\u7528alpha\u5206\u91cf\u3002\u8fd9\u91cc\u4f7f\u7528\u7684\"blendFunc\"\u9002\u7528\u4e8e2D\u4e2d\u7684\u900f\u660e\u5ea6\u3002\u5728OpenGL 1.1\u76843.1.2\u5c0f\u8282\u4e2d\u4e5f\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u547d\u4ee4\u3002</p> <p>\u5f53\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u7528\u6237\u770b\u5230\u4e00\u4e2a\u7a7a\u767d\u7684\u767d\u8272\u753b\u5e03\u3002\u5f53\u7528\u6237\u70b9\u51fb\u753b\u5e03\u65f6\uff0c\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u5f62\u72b6\u3002\u5f53\u7528\u6237\u518d\u6b21\u70b9\u51fb\u65f6\uff0c\u4f1a\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u5f62\u72b6\u2014\u2014\u7b2c\u4e00\u4e2a\u5f62\u72b6\u6700\u597d\u8fd8\u5728\u90a3\u91cc\uff01\u7136\u800c\uff0c\u8fd9\u4e0d\u662fWebGL\u7684\u9ed8\u8ba4\u884c\u4e3a\uff01</p> <p>\u5f53\u7528\u6237\u70b9\u51fb\u753b\u5e03\u65f6\uff0c\u4f1a\u8c03\u7528mousedown\u4e8b\u4ef6\u7684\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\u3002\u8be5\u51fd\u6570\u4e2d\u7ed8\u5236\u4e86\u5f62\u72b6\u3002\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0cWebGL\u544a\u8bc9\u7f51\u7edc\u6d4f\u89c8\u5668\u56fe\u50cf\u5df2\u88ab\u4fee\u6539\uff0c\u7f51\u7edc\u6d4f\u89c8\u5668\u5c06\u65b0\u56fe\u50cf\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u3002\u4e00\u65e6\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u6b63\u5982\u672c\u8282\u524d\u9762\u8ba8\u8bba\u7684\uff0cWebGL\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u4e22\u5f03\u56fe\u50cf\u3002\u4f46\u8fd9\u610f\u5473\u7740\u7b2c\u4e8c\u6b21\u9f20\u6807\u70b9\u51fb\u662f\u5728\u7a7a\u767d\u753b\u5e03\u4e0a\u7ed8\u5236\uff0c\u56e0\u4e3a\u7b2c\u4e00\u6b21\u9f20\u6807\u70b9\u51fb\u7684\u5f62\u72b6\u5df2\u88ab\u64e6\u9664\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5fc5\u987b\u5c06WebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u7684preserveDrawingBuffer\u9009\u9879\u8bbe\u7f6e\u4e3atrue\u3002shape-stamper\u7a0b\u5e8f\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\u4e0a\u4e0b\u6587\uff1a</p> <pre><code>let options = {  // \u4e0d\u9700\u8981alpha\u901a\u9053\u6216\u6df1\u5ea6\u7f13\u51b2\u533a\uff0c\u4f46\u6211\u4eec\u9700\u8981\u4fdd\u7559\u7ed8\u56fe\u7f13\u51b2\u533a\u4e2d\u7684\u56fe\u50cf\u3002\n    alpha: false,\n    depth: false,\n    preserveDrawingBuffer: true\n};\ngl = canvas.getContext(\"webgl\", options);\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u6ca1\u6709\u4e00\u4e2adraw()\u51fd\u6570\u6765\u91cd\u65b0\u7ed8\u5236\u6574\u4e2a\u56fe\u50cf\u3002\u6240\u6709\u7684\u7ed8\u5236\u90fd\u5728\u9f20\u6807\u5904\u7406\u51fd\u6570doMouseDown\u4e2d\u5b8c\u6210\u3002\u4e8b\u60c5\u53ef\u4ee5\u505a\u5f97\u4e0d\u540c\u3002\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\u6709\u5173\u5df2\u7ed8\u5236\u5f62\u72b6\u7684\u4fe1\u606f\u3002\u70b9\u51fb\u753b\u5e03\u5c06\u5411\u5217\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u9879\u76ee\uff0c\u7136\u540e\u91cd\u65b0\u7ed8\u5236\u6574\u4e2a\u56fe\u50cf\uff0c\u5305\u62ec\u65b0\u5f62\u72b6\u3002\u7136\u800c\u5728\u5b9e\u9645\u7a0b\u5e8f\u4e2d\uff0c\u56fe\u50cf\u4e2d\u7684\u5185\u5bb9\u7684\u552f\u4e00\u8bb0\u5f55\u5c31\u662f\u56fe\u50cf\u672c\u8eab\u3002\uff08\u7528\u7b2c1.1\u8282\u7684\u672f\u8bed\u6765\u8bf4\uff0c\u5b83\u662f\u4e00\u4e2a\u7ed8\u753b\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u7ed8\u56fe\u7a0b\u5e8f\u3002\uff09</p> <p>WebGL\u4f7f\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5750\u6807\u7cfb\u7edf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5750\u6807\u7684\u8303\u56f4\u662f-1\u52301\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u66f4\u65b9\u4fbf\u7684\u5750\u6807\u7cfb\u7edf\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u5e94\u7528\u5750\u6807\u53d8\u6362\uff0c\u5c06\u6211\u4eec\u4f7f\u7528\u7684\u5750\u6807\u8f6c\u6362\u4e3a\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\u3002\u5728shape-stamper\u7a0b\u5e8f\u4e2d\uff0c\u81ea\u7136\u5750\u6807\u7cfb\u7edf\u662f\u753b\u5e03\u4e0a\u7684\u50cf\u7d20\u5750\u6807\u3002\u5728\u50cf\u7d20\u5750\u6807\u7cfb\u7edf\u4e2d\uff0cx\u5750\u6807\u4ece\u5de6\u4fa7\u76840\u5230\u53f3\u4fa7\u7684canvas.width\uff0cy\u5750\u6807\u4ece\u9876\u90e8\u76840\u5230\u5e95\u90e8\u7684canvas.height\u3002\u5c06\u50cf\u7d20\u5750\u6807(x1,y1)\u8f6c\u6362\u4e3a\u9ed8\u8ba4\u5750\u6807(x2,y2)\u7684\u65b9\u7a0b\u662f\uff1a</p> <pre><code>x2 = -1 + 2*( x1 / canvas.width );\ny2 = 1 - 2*( y1 / canvas.height );\n</code></pre> <p>\u5728WebGL\u4e2d\uff0c\u5750\u6807\u53d8\u6362\u901a\u5e38\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u5e94\u7528\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u5b9e\u73b0\u53d8\u6362\uff0c\u9876\u70b9\u7740\u8272\u5668\u53ea\u9700\u8981\u77e5\u9053\u753b\u5e03\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u3002\u7a0b\u5e8f\u5c06\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4f5c\u4e3a\u7edf\u4e00\u53d8\u91cf\u63d0\u4f9b\u7ed9\u9876\u70b9\u7740\u8272\u5668\u3002\u9876\u70b9\u7684\u539f\u59cb\u50cf\u7d20\u5750\u6807\u4f5c\u4e3a\u5c5e\u6027\u8f93\u5165\u5230\u9876\u70b9\u7740\u8272\u5668\u3002\u7740\u8272\u5668\u5e94\u7528\u5750\u6807\u53d8\u6362\u6765\u8ba1\u7b97gl_Position\u7684\u503c\uff0c\u8be5\u503c\u5fc5\u987b\u4ee5\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\u8868\u793a\u3002\u4ee5\u4e0b\u662f\u9876\u70b9\u7740\u8272\u5668\u6e90\u4ee3\u7801\uff1a</p> <pre><code>attribute vec2 a_coords;   // \u50cf\u7d20\u5750\u6807\nuniform float u_width;     // \u753b\u5e03\u5bbd\u5ea6\nuniform float u_height;    // \u753b\u5e03\u9ad8\u5ea6\nvoid main() {\n    float x = -1.0 + 2.0*(a_coords.x / u_width);\n    float y = 1.0 - 2.0*(a_coords.y / u_height);\n    gl_Position = vec4(x, y, 0.0, 1.0);\n}\n</code></pre> <p>\u53d8\u6362\u53ef\u80fd\u6bd4\u8fd9\u66f4\u590d\u6742\uff0c\u7279\u522b\u662f\u57283D\u4e2d\uff0c\u4f46\u4e00\u822c\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff1a\u53d8\u6362\u7531\u7edf\u4e00\u53d8\u91cf\u8868\u793a\uff0c\u5e76\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u5e94\u7528\u3002\u901a\u5e38\uff0c\u53d8\u6362\u4ee5\u77e9\u9635\u5f62\u5f0f\u5b9e\u73b0\u3002\u6211\u4eec\u5c06\u5728\u540e\u9762\u770b\u5230\uff0c\u7edf\u4e00\u53d8\u91cf\u53ef\u4ee5\u662f\u77e9\u9635\uff0c\u7740\u8272\u5668\u8bed\u8a00GLSL\u5bf9\u77e9\u9635\u64cd\u4f5c\u6709\u826f\u597d\u7684\u652f\u6301\u3002</p> <p>\u4e3a\u4e86\u7ed8\u5236\u4e00\u4e2a\u5f62\u72b6\uff0c\u6211\u4eec\u9700\u8981\u5728Float32Array\u4e2d\u5b58\u50a8\u8be5\u5f62\u72b6\u7684\u50cf\u7d20\u5750\u6807\uff1b\u7136\u540e\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u8be5\u6570\u7ec4\u4e2d\u7684\u503c\u52a0\u8f7d\u5230\u4e0e\u201ca_coords\u201d\u5c5e\u6027\u76f8\u5173\u8054\u7684\u7f13\u51b2\u533a\u4e2d\uff1b\u6700\u540e\uff0c\u6211\u4eec\u5fc5\u987b\u8c03\u7528gl.drawArrays\u8fdb\u884c\u5b9e\u9645\u7ed8\u5236\u3002\u5f62\u72b6\u7684\u5750\u6807\u53ef\u4ee5\u6839\u636e\u6b63\u5728\u7ed8\u5236\u7684\u5f62\u72b6\u7c7b\u578b\u4ee5\u53ca\u7528\u6237\u70b9\u51fb\u7684\u70b9\u6765\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u662f\u521b\u5efa\u5706\u5f62\u5750\u6807\u6570\u7ec4\u7684\u4ee3\u7801\uff0c\u5176\u4e2dx\u548cy\u662f\u88ab\u70b9\u51fb\u7684\u70b9\u7684\u50cf\u7d20\u5750\u6807\uff1a</p> <pre><code>coords = new Float32Array(64);\nk = 0;\nfor (let i = 0; i &lt; 32; i++) {\n    let angle = i/32 * 2*Math.PI;\n    coords[k++] = x + 50*Math.cos(angle);  // \u9876\u70b9i\u7684x\u5750\u6807\n    coords[k++] = y + 50*Math.sin(angle);  // \u9876\u70b9i\u7684y\u5750\u6807\n}\n</code></pre> <p>\u5706\u88ab\u8fd1\u4f3c\u4e3a\u4e00\u4e2a32\u8fb9\u7684\u89c4\u5219\u591a\u8fb9\u5f62\uff0c\u534a\u5f84\u4e3a50\u50cf\u7d20\u3002\u6bcf\u4e2a\u9876\u70b9\u9700\u8981\u4e24\u4e2a\u5750\u6807\uff0c\u6240\u4ee5\u6570\u7ec4\u7684\u957f\u5ea6\u662f64\u3002\u5176\u4ed6\u5f62\u72b6\u7684\u4ee3\u7801\u7c7b\u4f3c\u3002\u4e00\u65e6\u6570\u7ec4\u88ab\u521b\u5efa\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u7ed8\u5236\u5f62\u72b6\uff1a</p> <pre><code>gl.bindBuffer(gl.ARRAY_BUFFER, bufferCoords);\ngl.bufferData(gl.ARRAY_BUFFER, coords, gl.STREAM_DRAW);\ngl.vertexAttribPointer(attributeCoords, 2, gl.FLOAT, false, 0, 0);\n\ngl.drawArrays(gl.TRIANGLE_FAN, 0, coords.length/2);\n</code></pre> <p>\u5728\u6700\u540e\u4e00\u884c\u4e2d\uff0ccoords.length/2\u662f\u5f62\u72b6\u4e2d\u7684\u9876\u70b9\u6570\uff0c\u56e0\u4e3a\u6570\u7ec4\u6bcf\u4e2a\u9876\u70b9\u4fdd\u5b58\u4e24\u4e2a\u6570\u5b57\u3002\u8fd8\u8981\u6ce8\u610f\uff0cgl.bufferData\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662fgl.STREAM_DRAW\uff0c\u5f53VBO\u4e2d\u7684\u6570\u636e\u53ea\u4f7f\u7528\u4e00\u6b21\u6216\u51e0\u6b21\u540e\u5c31\u88ab\u4e22\u5f03\u65f6\uff0c\u8fd9\u662f\u5408\u9002\u7684\u3002</p> <p>\u5c3d\u7ba1\u793a\u4f8b\u7a0b\u5e8f\u7684\u6f14\u793a\u7248\u672c\u5177\u6709\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4f46\u6211\u5728\u4e24\u4e2a\u7248\u672c\u4e2d\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\u4e86\u5f62\u72b6\u7ed8\u5236\u3002\u6ce8\u610f\uff0c\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u5706\u90fd\u662f\u76f8\u540c\u7684\uff1b\u5b83\u4eec\u53ea\u662f\u4f4d\u4e8e\u4e0d\u540c\u7684\u5730\u70b9\u3002\u5e94\u8be5\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u5bf9\u8c61\u5750\u6807\u4e2d\u7ed8\u5236\u5706\uff0c\u7136\u540e\u5e94\u7528\u5efa\u6a21\u53d8\u6362\u5c06\u5706\u79fb\u52a8\u5230\u573a\u666f\u4e2d\u6240\u9700\u4f4d\u7f6e\u3002\u8fd9\u662f\u6211\u5728\u7a0b\u5e8f\u7684\u6f14\u793a\u7248\u672c\u4e2d\u91c7\u7528\u7684\u65b9\u6cd5\u3002</p> <p>\u6709\u56db\u79cd\u5f62\u72b6\uff1a\u5706\u5f62\u3001\u6b63\u65b9\u5f62\u3001\u4e09\u89d2\u5f62\u548c\u661f\u5f62\u3002\u5728\u6f14\u793a\u7248\u672c\u4e2d\uff0c\u6211\u4e3a\u6bcf\u79cd\u5f62\u72b6\u521b\u5efa\u4e86\u4e00\u4e2a\u5355\u72ec\u7684VBO\u3002\u4e00\u4e2a\u5f62\u72b6\u7684VBO\u5305\u542b\u8be5\u5f62\u72b6\u5728\u5bf9\u8c61\u5750\u6807\u4e2d\u7684\u9876\u70b9\u5750\u6807\uff0c\u5f62\u72b6\u4ee5(0,0)\u4e3a\u4e2d\u5fc3\u3002\u7531\u4e8e\u5bf9\u8c61\u5750\u6807\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\uff0cVBO\u53ef\u4ee5\u4e00\u6b21\u6027\u521b\u5efa\uff0c\u5e76\u4f5c\u4e3a\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u4e00\u90e8\u5206\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u5706\u7684VBO\uff1a</p> <pre><code>coords = new Float32Array(64); \nlet k = 0;  // \u7d22\u5f15\u5230coords\u6570\u7ec4\nfor (let i = 0; i &lt; 32; i++) {\n    let angle = i/32 * 2*Math.PI;\n    coords[k++] = 50*Math.cos(angle);  // \u9876\u70b9\u7684x\u5750\u6807\n    coords[k++] = 50*Math.sin(angle);  // \u9876\u70b9\u7684y\u5750\u6807\n}\n\nbufferCoordsCircle = gl.createBuffer();\ngl.bindBuffer( gl.ARRAY_BUFFER, bufferCoordsCircle );\ngl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);\n</code></pre> <p>\u6ce8\u610f\u6700\u540e\u4e00\u884c\u4e2d\u4f7f\u7528\u4e86gl.STATIC_DRAW\u3002\u7531\u4e8e\u6570\u636e\u53ef\u4ee5\u91cd\u7528\u6765\u7ed8\u5236\u8bb8\u591a\u4e0d\u540c\u7684\u5706\uff0c\u8fd9\u662f\u5408\u9002\u7684\u3002</p> <p>\u8981\u7ed8\u5236\u4e00\u4e2a\u4e2d\u5fc3\u4f4d\u4e8e(x,y)\u7684\u5f62\u72b6\uff0c\u5fc5\u987b\u5bf9VBO\u4e2d\u7684\u5750\u6807\u5e94\u7528\u5e73\u79fb\u3002\u6211\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u6dfb\u52a0\u4e86\u5e73\u79fb\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684\u7edf\u4e00\u53d8\u91cf\u6765\u8868\u793a\u5e73\u79fb\u91cf\uff1a</p> <pre><code>attribute vec2 a_coords;\nuniform float u_width;\nuniform float u_height;\nuniform vec2 u_translation;\nvoid main() {\n    float x = -1.0 + 2.0*((a_coords.x + u_translation.x) / u_width);\n    float y = 1.0 - 2.0*((a_coords.y + u_translation.y) / u_height);\n    gl_Position = vec4(x, y, 0.0, 1.0);\n}\n</code></pre> <p>\u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u9605\u8bfb\u6f14\u793a\u548c\u793a\u4f8b\u7a0b\u5e8f\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\u662f\u503c\u5f97\u7684\u3002</p> <p>Our next example will introduce a few new features. The example is a simple interactive program where the user can place shapes in a canvas by clicking the canvas with the mouse. Properties of the shape are taken from a set of popup menus. The properties include the color and degree of transparency of the shape, as well as which of several possible shapes is drawn. The shape is centered at the point where the user clicks.</p> <p>The sample program is webgl/shape-stamper.html. Here is a demo version of the program so you can see how it works.</p> <p></p> <p>In the RGB triangle example, color is an attribute, since a different color is assigned to each vertex of the triangle primitive. In the shape-stamper program, all vertices, and in fact all pixels, in a primitive have the same color. That means that color can be a uniform variable. The example also allows transparency, so colors need an alpha component as well as the RGB components. It was convenient in the program to treat the alpha and RGB components as separate quantities, so I represent them as two separate uniform variables in the shader program. The color and alpha uniforms are used in the fragment shader to assign the fragment's color. In fact, that's the only thing the fragment shader does, so the complete source code is as follows:</p> <pre><code>precision mediump float;\nuniform vec3 u_color;\nuniform float u_alpha;\nvoid main() {\ngl_FragColor = vec4(u_color, u_alpha);\n}\n</code></pre> <p>To work with a uniform variable on the JavaScript side, we need to know its location in the shader program. The program gets the locations of the two uniform variables in the intiGL() function using the commands</p> <pre><code>uniformColor = gl.getUniformLocation(prog, \"u_color\");\nuniformAlpha = gl.getUniformLocation(prog, \"u_alpha\");\n</code></pre> <p>The program has two popup menus that let the user select the color and alpha that are to be used for drawing a primitive. When a shape is drawn, the values from the menus determine the values of the uniforms:</p> <pre><code>let colorNumber = Number(document.getElementById(\"colorChoice\").value);\nlet alpha = Number(document.getElementById(\"opacityChoice\").value);\n\ngl.uniform3fv( uniformColor, colorList[colorNumber] );\ngl.uniform1f( uniformAlpha, alpha );\n</code></pre> <p>Values for uniform variables are set using the gl.uniform* family of functions. In this case, colorList[colorNumber] is an array of three numbers holding the RGB color components for the color, so the function gl.uniform3fv is used to set the value: The \"3f\" means that 3 floating point values are provided, and the \"v\" means that the three values are in an array. Note that three floating point values are required to match the type, vec3, of the uniform variable in the shader. The value of alpha is a single floating point number, so the corresponding uniform variable is set using gl.uniform1f.</p> <p>In order for the alpha component of the color to have any effect, alpha blending must be enabled. This is done as part of initialization with the two commands</p> <pre><code>gl.enable( gl.BLEND );\ngl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\n</code></pre> <p>The first line enables use of the alpha component. The second tells how the alpha component is to be used. The \"blendFunc\" used here is appropriate for transparency in 2D. The same commands were used in Subsection 3.1.2 in OpenGL 1.1.</p> <p>When the program starts, the user sees a blank white canvas. When the user clicks the canvas, a shape is added. When the user clicks again, a second shape is added\u2014and the first shape better still be there! However, this is not the default behavior for WebGL!</p> <p>When the user clicks the canvas, an event-handler function for the mousedown event is called. The shape is drawn in that function. When the function returns, WebGL tells the web browser that the image has been modified, and the web browser copies the new image to the screen. Once that happens, as discussed earlier in this section, the default behavior for WebGL is to discard the image. But this means that the second mouse click is drawing on a blank canvas, since the shape from the first mouse click has been erased.</p> <p>To fix this problem, the preserveDrawingBuffer option in the WebGL graphics context must be set to true. The shape-stamper program creates the context with</p> <pre><code>let options = {  // No need for alpha channel or depth buffer, but we\n                // need to preserve the image in the drawing buffer.\n            alpha: false,\n            depth: false,\n            preserveDrawingBuffer: true\n    };\ngl = canvas.getContext(\"webgl\", options);\n</code></pre> <p>Note that this program does not have a draw() function that redraws the entire image. All the drawing is done in the mouse-handling function, doMouseDown. Things could have been done differently. The program could have used a data structure to store information about the shapes that have been drawn. Clicking the canvas would add an item to the list, and the entire image would then be redrawn, including the new shape. In the actual program, however, the only record of what's in the image is the image itself. (In the terminology of Section 1.1, it is a painting program rather than a drawing program.)</p> <p>WebGL uses a default coordinate system in which each of the coordinates ranges from \u22121 to 1. Of course, we would like to use a more convenient coordinate system, which means that we need to apply a coordinate transformation to transform the coordinates that we use into the default coordinate system. In the shape-stamper program, the natural coordinate system is pixel coordinates on the canvas. In the pixel coordinate system, the x-coordinate ranges from 0 at the left to canvas.width at the right, and y ranges from 0 at the top to canvas.height at the bottom. The equations for transforming pixel coordinates (x1,y1) to default coordinates (x2,y2) are</p> <pre><code>x2 = -1 + 2*( x1 / canvas.width );\ny2 = 1 - 2*( y1 / canvas.height );\n</code></pre> <p>In WebGL, the coordinate transformation is usually applied in the vertex shader. In this case, to implement the transformation, the vertex shader just needs to know the width and height of the canvas. The program provides the width and height to the vertex shader as uniform variables. The original pixel coordinates of the vertex are input to the vertex shader as an attribute. The shader applies the coordinate transformation to compute the value of gl_Position, which must be expressed in the default coordinate system. Here is the vertex shader source code:</p> <pre><code>attribute vec2 a_coords;   // pixel coordinates\nuniform float u_width;     // width of canvas\nuniform float u_height;    // height of canvas\nvoid main() {\nfloat x = -1.0 + 2.0*(a_coords.x / u_width);\nfloat y = 1.0 - 2.0*(a_coords.y / u_height);\ngl_Position = vec4(x, y, 0.0, 1.0);\n}\n</code></pre> <p>Transformations can be much more complicated than this, especially in 3D, but the general pattern holds: Transformations are represented by uniform variables and are applied in the vertex shader. In general, transformations are implemented as matrices. We will see later that uniform variables can be matrices and that the shader language GLSL has good support for matrix operations.</p> <p>In order to draw a shape, we need to store the pixel coordinates for that shape in a Float32Array; then, we have to load the values from that array into the buffer associated with the \"a_coords\" attribute; and finally, we must call gl.drawArrays to do the actual drawing. The coordinates for the shape can be computed based on what type of shape is being drawn and on the point where the user clicked. For example, the coordinate array for a circle is created by the following code, where x and y are the pixel coordinates for the point that was clicked:</p> <pre><code>coords = new Float32Array(64);\nk = 0;\nfor (let i = 0; i &lt; 32; i++) {\n    let angle = i/32 * 2*Math.PI;\n    coords[k++] = x + 50*Math.cos(angle);  // x-coord of vertex i\n    coords[k++] = y + 50*Math.sin(angle);  // y-coord of vertex i\n}\n</code></pre> <p>The circle is approximated as a 32-sided regular polygon, with a radius of 50 pixels. Two coordinates are required for each vertex, so the length of the array is 64. The code for the other shapes is similar. Once the array has been created, the shape is drawn using</p> <pre><code>gl.bindBuffer(gl.ARRAY_BUFFER, bufferCoords);\ngl.bufferData(gl.ARRAY_BUFFER, coords, gl.STREAM_DRAW);\ngl.vertexAttribPointer(attributeCoords, 2, gl.FLOAT, false, 0, 0);\n\ngl.drawArrays(gl.TRIANGLE_FAN, 0, coords.length/2);\n</code></pre> <p>In the last line, coords.length/2 is the number of vertices in the shape, since the array holds two numbers per vertex. Note also that the last parameter to gl.bufferData is gl.STREAM_DRAW, which is appropriate when the data in the VBO will only be used once or a few times before being discarded.</p> <p>Although the demo version of the sample program has the same functionality, I implemented shape drawing differently in the two versions. Notice that all circles in the program are the same; they are just in different locations. It should be possible to draw the circle in its own object coordinates, and then apply a modeling transformation to move the circle to its desired position in the scene. This is the approach that I take in the demo version of the program.</p> <p>There are four kinds of shape: circles, squares, triangles, and stars. In the demo version, I create a separate VBO for each kind of shape. The VBO for a shape contains vertex coordinates for that shape in object coordinates, with the shape centered at (0,0). Since the object coordinates will never change, the VBO can be created once and for all as part of program initialization. For example, the VBO for the circle is created with</p> <pre><code>coords = new Float32Array(64); \nlet k = 0;  // index into the coords array\nfor (let i = 0; i &lt; 32; i++) {\n    let angle = i/32 * 2*Math.PI;\n    coords[k++] = 50*Math.cos(angle);  // x-coord of vertex\n    coords[k++] = 50*Math.sin(angle);  // y-coord of vertex\n}\n\nbufferCoordsCircle = gl.createBuffer();\ngl.bindBuffer( gl.ARRAY_BUFFER, bufferCoordsCircle );\ngl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);\n</code></pre> <p>Note the use of gl.STATIC_DRAW in the last line. It is appropriate since the data can be reused to draw many different circles.</p> <p>To draw a shape with its center at (x,y), a translation must be applied to the coordinates in the VBO. I added the translation to the vertex shader, with a new uniform variable to represent the translation amount:</p> <pre><code>attribute vec2 a_coords;\nuniform float u_width;\nuniform float u_height;\nuniform vec2 u_translation;\nvoid main() {\nfloat x = -1.0 + 2.0*((a_coords.x + u_translation.x) / u_width);\nfloat y = 1.0 - 2.0*((a_coords.y + u_translation.y) / u_height);\ngl_Position = vec4(x, y, 0.0, 1.0);\n}\n</code></pre> <p>You would probably find it worthwhile to read the full source code for the demo as well as the sample program.</p>"},{"location":"cn/c6/s2/#625-points\u539f\u8bed","title":"6.2.5 POINTS\u539f\u8bed","text":"<p>The POINTS Primitive</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e00\u8282\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86gl.POINTS\u539f\u8bed\u3002POINTS\u539f\u8bed\u57fa\u672c\u4e0a\u662f\u4e00\u7ec4\u4e0d\u76f8\u8fde\u7684\u9876\u70b9\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u9876\u70b9\u88ab\u6e32\u67d3\u4e3a\u4e00\u4e2a\u50cf\u7d20\u3002\u7136\u800c\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6307\u5b9a\u66f4\u5927\u7684\u5927\u5c0f\u3002\u5728OpenGL 1.1\u4e2d\uff0c\u8fd9\u662f\u901a\u8fc7\u51fd\u6570gl_PointSize()\u5b8c\u6210\u7684\u3002\u5728WebGL\u4e2d\uff0c\u90a3\u4e2a\u51fd\u6570\u4e0d\u5b58\u5728\u3002\u76f8\u53cd\uff0c\u5927\u5c0f\u7531\u9876\u70b9\u7740\u8272\u5668\u63a7\u5236\u3002</p> <p>\u5728\u5904\u7406POINTS\u539f\u8bed\u7684\u9876\u70b9\u65f6\uff0c\u9876\u70b9\u7740\u8272\u5668\u5e94\u8be5\u7ed9\u7279\u6b8a\u7684\u5185\u7f6e\u53d8\u91cfgl_PointSize\u8d4b\u503c\u3002\u8be5\u53d8\u91cf\u662ffloat\u7c7b\u578b\u3002\u5b83\u7ed9\u51fa\u4e86\u9876\u70b9\u7684\u5927\u5c0f\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u3002\u9876\u70b9\u88ab\u6e32\u67d3\u4e3a\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u4e2d\u5fc3\u4f4d\u4e8e\u9876\u70b9\u4f4d\u7f6e\uff0c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7531gl_PointSize\u7ed9\u51fa\u3002\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\uff0c\u7247\u6bb5\u7740\u8272\u5668\u5c06\u4e3a\u6b63\u65b9\u5f62\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u8c03\u7528\u4e00\u6b21\u3002\u6ce8\u610f\uff0c\u6709\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u5b9e\u73b0\u7684\u9650\u5236\uff0c\u5927\u5c0f\u53ef\u80fd\u76f8\u5f53\u5c0f\u3002\u552f\u4e00\u4fdd\u8bc1\u5b58\u5728\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u50cf\u7d20\uff0c\u4f46\u5927\u591a\u6570\u5b9e\u73b0\u4f3c\u4e4e\u652f\u6301\u81f3\u5c11\u523064\u50cf\u7d20\u7684\u70b9\u5927\u5c0f\uff0c\u53ef\u80fd\u66f4\u5927\u3002</p> <p>\u5f53\u7247\u6bb5\u7740\u8272\u5668\u88ab\u8c03\u7528\u5904\u7406POINTS\u539f\u8bed\u65f6\uff0c\u5b83\u6b63\u5728\u5904\u7406\u56f4\u7ed5\u9876\u70b9\u7684\u50cf\u7d20\u6b63\u65b9\u5f62\u4e2d\u7684\u4e00\u4e2a\u50cf\u7d20\u3002\u7279\u6b8a\u7684\u7247\u6bb5\u7740\u8272\u5668\u53d8\u91cfgl_PointCoord\u544a\u8bc9\u7740\u8272\u5668\u50cf\u7d20\u5728\u6b63\u65b9\u5f62\u5185\u7684\u4f4d\u7f6e\u3002gl_PointCoord\u7684\u503c\u662f\u7740\u8272\u5668\u7684\u8f93\u5165\u3002gl_PointCoord\u7684\u7c7b\u578b\u662fvec2\uff0c\u6240\u4ee5\u5b83\u6709\u4e24\u4e2a\u6d6e\u70b9\u5206\u91cf\u3002\u6bcf\u4e2a\u5206\u91cf\u7684\u503c\u57280\u52301\u7684\u8303\u56f4\u5185\u3002\u7b2c\u4e00\u4e2a\u5206\u91cf\uff0cgl_PointCoord.x\uff0c\u5728\u6b63\u65b9\u5f62\u7684\u5de6\u8fb9\u7f18\u4e3a0\uff0c\u5728\u53f3\u8fb9\u7f18\u4e3a1\u3002\u7b2c\u4e8c\u4e2a\u5206\u91cf\uff0cgl_PointCoord.y\uff0c\u5728\u6b63\u65b9\u5f62\u7684\u9876\u90e8\u4e3a0\uff0c\u5728\u5e95\u90e8\u4e3a1\u3002\u4f8b\u5982\uff0c\u8be5\u503c\u5728\u5de6\u4e0a\u89d2\u4e3a(0,0)\uff0c\u5728\u53f3\u4e0a\u89d2\u4e3a(1,0)\uff0c\u5728\u6b63\u65b9\u5f62\u4e2d\u5fc3\u4e3a(0.5,0.5)\u3002\uff08\u81f3\u5c11\uff0c\u89c4\u683c\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u6211\u9047\u5230\u8fc7\u5b9e\u73b0\u9519\u8bef\u5730\u5c06(0,0)\u653e\u5728\u5de6\u4e0b\u89d2\u3002\u5e0c\u671b\u73b0\u4ee3\u7f51\u7edc\u6d4f\u89c8\u5668\u5df2\u7ecf\u4fee\u590d\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\uff09</p> <p>\u5982\u679c\u7247\u6bb5\u7740\u8272\u5668\u5728\u5176\u8ba1\u7b97\u4e2d\u4f7f\u7528gl_PointCoord\uff0c\u6b63\u65b9\u5f62\u7684\u989c\u8272\u53ef\u4ee5\u9010\u50cf\u7d20\u53d8\u5316\u3002\u4f5c\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u8bbe\u7f6e</p> <pre><code>gl_FragColor = vec4( gl_PointCoord.x, 0.0, 0.0, 1.0 );\n</code></pre> <p>\u5c06\u628a\u539f\u8bed\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u6e32\u67d3\u4e3a\u4e00\u4e2a\u6b63\u65b9\u5f62\u989c\u8272\u6e10\u53d8\uff0c\u989c\u8272\u4ece\u6b63\u65b9\u5f62\u5de6\u8fb9\u7f18\u7684\u9ed1\u8272\u6c34\u5e73\u53d8\u5316\u5230\u53f3\u8fb9\u7f18\u7684\u7ea2\u8272\u3002\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4f7f\u7528gl_PointCoord\u5c06\u9876\u70b9\u6e32\u67d3\u4e3a\u5706\u76d8\u800c\u4e0d\u662f\u6b63\u65b9\u5f62\u3002\u8be5\u6280\u672f\u4f7f\u7528\u4e86\u4e00\u4e2a\u65b0\u7684GLSL\u8bed\u53e5\uff0cdiscard\uff0c\u4ec5\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u53ef\u7528\u3002\u5f53\u7247\u6bb5\u7740\u8272\u5668\u6267\u884c\u8bed\u53e5</p> <pre><code>discard;\n</code></pre> <p>\u7247\u6bb5\u7740\u8272\u5668\u7ec8\u6b62\uff0c\u963b\u6b62\u5bf9\u50cf\u7d20\u7684\u6240\u6709\u8fdb\u4e00\u6b65\u5904\u7406\u3002\u7279\u522b\u662f\uff0c\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u989c\u8272\u4e0d\u4f1a\u6539\u53d8\u3002\u6211\u4f7f\u7528discard\uff0c\u5982\u679c\u4ecegl_PointCoord\u5230\u4e2d\u5fc3(0.5,0.5)\u7684\u8ddd\u79bb\u5927\u4e8e0.5\u3002\u8fd9\u5c06\u4e22\u5f03\u4e0d\u4f4d\u4e8e\u534a\u5f84\u4e3a0.5\u7684\u5706\u76d8\u5185\u7684\u50cf\u7d20\u3002GLSL\u6709\u4e00\u4e2a\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u6d4b\u8bd5\u7f16\u5199\u4e3a</p> <pre><code>float distanceFromCenter = distance( gl_PointCoord, vec2(0.5,0.5) );\nif ( distanceFromCenter &gt;= 0.5 ) {\n    discard;  // \u4e0d\u7ed8\u5236\u6b64\u50cf\u7d20\uff01\n}\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8f\u662fwebgl/moving-points.html\u3002\u5b83\u5c55\u793a\u4e86\u4e00\u4e2a\u52a8\u753b\uff0c\u5f69\u8272\u5706\u76d8\u5728\u753b\u5e03\u4e2d\u79fb\u52a8\u5e76\u4ece\u8fb9\u7f18\u53cd\u5f39\u3002\u6240\u6709\u5706\u76d8\u90fd\u662f\u4e00\u6b65\u4e2d\u4f5c\u4e3agl.POINTS\u7c7b\u578b\u7684\u5355\u4e2a\u539f\u8bed\u7ed8\u5236\u7684\u3002\u5706\u76d8\u7684\u5927\u5c0f\u5b9e\u73b0\u4e3a\u7edf\u4e00\u53d8\u91cf\uff0c\u4ee5\u4fbf\u6240\u6709\u5706\u76d8\u5177\u6709\u76f8\u540c\u7684\u5927\u5c0f\uff0c\u4f46\u7edf\u4e00\u5927\u5c0f\u5728\u52a8\u753b\u7684\u4e0d\u540c\u5e27\u4e2d\u53ef\u4ee5\u4e0d\u540c\u3002\u5728\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5f39\u51fa\u83dc\u5355\u63a7\u5236\u5927\u5c0f\u3002\u8fd9\u662f\u7a0b\u5e8f\u7684\u6f14\u793a\u7248\u672c\uff0c\u529f\u80fd\u76f8\u540c\uff1a</p> <p></p> <p>\u5728\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5706\u76d8\u662f\u968f\u673a\u989c\u8272\u8fd8\u662f\u5168\u90e8\u4e3a\u7ea2\u8272\u3002\u7531\u4e8e\u6bcf\u4e2a\u5706\u76d8\u662f\u4e00\u4e2a\u5355\u4e2aPOINTS\u539f\u8bed\u7684\u9876\u70b9\uff0c\u5706\u76d8\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u989c\u8272\u610f\u5473\u7740\u989c\u8272\u5fc5\u987b\u7531\u5c5e\u6027\u53d8\u91cf\u7ed9\u51fa\u3002\u8981\u5b9e\u73b0\u968f\u673a\u989c\u8272\uff0c\u4e00\u4e2aFloat32Array\u7528\u968f\u673a\u6570\u5b57\u586b\u5145\uff0c\u6bcf\u4e2a\u9876\u70b9\u4e09\u4e2a\u3002\u503c\u88ab\u52a0\u8f7d\u5230VBO\u4e2d\uff0c\u989c\u8272\u5c5e\u6027\u7684\u503c\u6765\u81eaVBO\u3002\u4f46\u662f\u5f53\u6240\u6709\u5706\u76d8\u90fd\u662f\u7ea2\u8272\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u6211\u4eec\u5fc5\u987b\u7528\u591a\u4e2a\u201c1, 0, 0\u201d\u7684\u526f\u672c\u586b\u5145\u6570\u7ec4\uff0c\u5e76\u4f7f\u7528\u8be5\u6570\u636e\u4f5c\u4e3a\u5c5e\u6027\u5417\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u4e0d\u5fc5\u3002\u5982\u679c\u6211\u4eec\u7981\u7528\u989c\u8272\u5c5e\u6027\u7684VertexAttribArray\uff0c\u90a3\u4e48\u8be5\u5c5e\u6027\u5c06\u5bf9\u6bcf\u4e2a\u9876\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\u8be5\u503c\u7531gl.vertexAttrib*\u7cfb\u5217\u51fd\u6570\u6307\u5b9a\u3002\u6240\u4ee5\uff0c\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u63d0\u4f9b\u989c\u8272\u5c5e\u6027\u503c\u7684\u4ee3\u7801\u662f</p> <pre><code>if ( randomColors ) { \n    // \u4f7f\u7528\u5728\u521d\u59cb\u5316\u671f\u95f4\u586b\u5145\u7684\u989c\u8272VBO\u4e2d\u7684\u5c5e\u6027\u503c\u3002\n    gl.enableVertexAttribArray( attributeColor ); \n}\nelse { \n    // \u5173\u95edVertexAttribArray\uff0c\n    //     \u5e76\u8bbe\u7f6e\u4e00\u4e2a\u6052\u5b9a\u7684\u5c5e\u6027\u989c\u8272\u3002\n    gl.disableVertexAttribArray( attributeColor );\n    gl.vertexAttrib3f( attributeColor, 1, 0, 0 );\n}\n</code></pre> <p>\u67e5\u770b\u6e90\u4ee3\u7801\u4e86\u89e3\u793a\u4f8b\u7684\u5b8c\u6574\u7ec6\u8282\u3002</p> <p>The final example in this section demonstrates the gl.POINTS primitive. A POINTS primitive is basically a set of disconnected vertices. By default, each vertex is rendered as a single pixel. However, a program can specify a larger size. In OpenGL 1.1, this was done with the function gl_PointSize(). In WebGL, that function does not exist. Instead, the size is under the control of the vertex shader.</p> <p>When working on one of the vertices of a POINTS primitive, the vertex shader should assign a value to the special built-in variable gl_PointSize. The variable is of type float. It gives the size of the vertex, in pixels. The vertex is rendered as a square, centered at the vertex position, whose width and height are given by gl_PointSize. What this really means is that the fragment shader will be called once for each pixel in that square. Note that there is an implementation-dependent limit on the size of points, which can be fairly small. The only size that is guaranteed to exist is one pixel, but most implementations seem to support point sizes at least up to 64 pixels, and possibly much larger.</p> <p>When the fragment shader is called for a POINTS primitive, it is processing one pixel in the square of pixels surrounding the vertex. The special fragment shader variable gl_PointCoord tells the shader the location of the pixel within that square. The value of gl_PointCoord is an input to the shader. The type of gl_PointCoord is vec2, so it has two floating point components. The value of each component is in the range 0 to 1. The first component, gl_PointCoord.x, is 0 at the left edge of the square and 1 at the right. The second component, gl_PointCoord.y, is 0 at the top of the square and 1 at the bottom. So, for example, the value is (0,0) at the top-left corner, (1,0) at the top-right corner, and (0.5,0.5) at the center of the square. (That, at least, is what the specification says, but I have encountered implementations that incorrectly put (0,0) at the bottom left corner. Hopefully that is fixed in modern web browsers.)</p> <p>If the fragment shader uses gl_PointCoord in its computation, the color of the square can vary from pixel to pixel. As a simple example, setting</p> <pre><code>gl_FragColor = vec4( gl_PointCoord.x, 0.0, 0.0, 1.0 );\n</code></pre> <p>would render each vertex in the primitive as a square color gradient whose color varies horizontally from black on the left edge of the square to red on the right edge. In the sample program, I use gl_PointCoord to render the vertex as a disk instead of a square. The technique uses a new GLSL statement, discard, which is available only in the fragment shader. When the fragment shader executes the statement</p> <pre><code>discard;\n</code></pre> <p>the fragment shader terminates, and all further processing of the pixel is prevented. In particular, the color of the pixel in the image does not change. I use discard if the distance from gl_PointCoord to the center, (0.5,0.5), is greater than 0.5. This discards pixels that do not lie in the disk of radius 0.5. GLSL has a function for computing the distance between two vectors, so the test in the fragment shader is written</p> <pre><code>float distanceFromCenter = distance( gl_PointCoord, vec2(0.5,0.5) );\nif ( distanceFromCenter &gt;= 0.5 ) {\ndiscard;  // don't draw this pixel!\n}\n</code></pre> <p>The sample program is webgl/moving-points.html. It shows an animation of colored disks moving in the canvas and bouncing off the edges. All of the disks are drawn in one step as a single primitive of type gl.POINTS. The size of the disks is implemented as a uniform variable, so that all the disks have the same size, but the uniform size can be different in different frames of the animation. In the program, the user controls the size with a popup menu. Here is a demo version of the program, with the same functionality:</p> <p></p> <p>In the program, the user can select whether the disks have random colors or are all colored red. Since each disk is a vertex of a single POINTS primitive, the fact that the disks can have different colors means that the color has to be given by an attribute variable. To implement random colors, a Float32Array is filled with random numbers, three for each vertex. The values are loaded into a VBO, and the values for the color attribute are taken from the VBO. But what happens when all the disks are red? Do we have to fill an array with multiple copies of \"1, 0, 0\" and use that data for the attribute? In fact, we don't. If we disable the VertexAttribArray for the color attribute, then that attribute will have the same value for every vertex. The value is specified by the gl.vertexAttrib* family of functions. So, in the sample program, the code for providing values for the color attribute is</p> <pre><code>if ( randomColors ) { \n        // Use the attribute values from the color VBO, \n        //     which was filled during initialization.\n    gl.enableVertexAttribArray( attributeColor ); \n}\nelse { \n        // Turn off VertexAttribArray,\n        //     and set a constant attribute color.\n    gl.disableVertexAttribArray( attributeColor );\n    gl.vertexAttrib3f( attributeColor, 1, 0, 0 );\n}\n</code></pre> <p>See the source code for full details of the example.</p>"},{"location":"cn/c6/s2/#626-webgl-\u9519\u8bef\u5904\u7406","title":"6.2.6 WebGL \u9519\u8bef\u5904\u7406","text":"<p>WebGL Error Handling</p> \u4e2d\u6587\u82f1\u6587 <p>OpenGL\u7a0b\u5e8f\u5458\u7ecf\u5e38\u53d1\u73b0\u81ea\u5df1\u9762\u5bf9\u4e00\u4e2a\u7a7a\u767d\u5c4f\u5e55\uff0c\u6ca1\u6709\u6e05\u695a\u5730\u6307\u793a\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u7531\u4e8e\u7f16\u7a0b\u903b\u8f91\u9519\u8bef\uff0c\u4f8b\u5982\u610f\u5916\u5730\u7ed8\u5236\u4e86\u4e00\u4e2a\u4e0d\u5305\u542b\u4efb\u4f55\u51e0\u4f55\u4f53\u76843D\u7a7a\u95f4\u533a\u57df\u3002\u7136\u800c\uff0c\u6709\u65f6\u8fd9\u662f\u7531\u4e8eAPI\u4f7f\u7528\u9519\u8bef\u3002\u5728WebGL\u4e2d\uff0c\u4ee5\u53ca\u66f4\u666e\u904d\u7684OpenGL\u4e2d\uff0c\u50cf\u975e\u6cd5\u53c2\u6570\u503c\u8fd9\u6837\u7684\u9519\u8bef\u901a\u5e38\u4e0d\u4f1a\u4f7f\u7a0b\u5e8f\u5d29\u6e83\u6216\u4ea7\u751f\u4efb\u4f55\u81ea\u52a8\u7684\u9519\u8bef\u901a\u77e5\u3002\u76f8\u53cd\uff0c\u5f53WebGL\u68c0\u6d4b\u5230\u8fd9\u6837\u7684\u9519\u8bef\u65f6\uff0c\u5b83\u4f1a\u5ffd\u7565\u975e\u6cd5\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u9519\u8bef\u4ee3\u7801\u7684\u503c\uff0c\u8be5\u503c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5173\u4e8e\u9519\u8bef\u6027\u8d28\u7684\u6307\u793a\u3002</p> <p>\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528gl.getError()\u6765\u68c0\u67e5\u5f53\u524d\u7684\u9519\u8bef\u4ee3\u7801\u503c\u3002\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u9519\u8bef\u4ee3\u7801\u3002\u5982\u679c\u6ca1\u6709\u53d1\u751f\u9519\u8bef\uff0c\u8fd4\u56de\u503c\u662fgl.NO_ERROR\u3002\u4efb\u4f55\u5176\u4ed6\u8fd4\u56de\u503c\u610f\u5473\u7740\u53d1\u751f\u4e86\u9519\u8bef\u3002\u4e00\u65e6\u8bbe\u7f6e\u4e86\u9519\u8bef\u4ee3\u7801\uff0c\u5b83\u5c31\u4f1a\u4e00\u76f4\u4fdd\u6301\u8bbe\u7f6e\u72b6\u6001\uff0c\u76f4\u5230\u8c03\u7528gl.getError()\uff0c\u5373\u4f7f\u5728\u6b64\u671f\u95f4\u6267\u884c\u4e86\u5176\u4ed6\u6b63\u786e\u7684WebGL\u64cd\u4f5c\u3002\u8c03\u7528gl.getError()\u68c0\u7d22\u9519\u8bef\u4ee3\u7801\u7684\u503c\uff0c\u5e76\u5c06\u503c\u91cd\u7f6e\u4e3agl.NO_ERROR\u3002\uff08\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u8fde\u7eed\u4e24\u6b21\u8c03\u7528gl.getError()\uff0c\u7b2c\u4e8c\u6b21\u8c03\u7528\u603b\u662f\u8fd4\u56degl.NO_ERROR\u3002\uff09\u8fd9\u610f\u5473\u7740\u5f53gl.getError()\u8fd4\u56de\u9519\u8bef\u65f6\uff0c\u9519\u8bef\u5b9e\u9645\u4e0a\u53ef\u80fd\u662f\u7531\u4e4b\u524d\u6267\u884c\u7684\u67d0\u4e2a\u6307\u4ee4\u751f\u6210\u7684\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8003\u8651\u8c03\u7528gl.drawArrays(primitive,first,count)\u3002\u5982\u679cprimitive\u4e0d\u662f\u4e03\u4e2a\u5408\u6cd5\u7684WebGL\u539f\u8bed\u4e4b\u4e00\uff0c\u90a3\u4e48WebGL\u5c06\u628a\u9519\u8bef\u4ee3\u7801\u8bbe\u7f6e\u4e3agl.INVALID_ENUM\u3002\u5982\u679cfirst\u6216count\u662f\u8d1f\u6570\uff0c\u9519\u8bef\u4ee3\u7801\u8bbe\u7f6e\u4e3agl.INVALID_VALUE\u3002\u5982\u679c\u6ca1\u6709\u4f7f\u7528gl.useProgram\u5b89\u88c5\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u9519\u8bef\u662fgl.INVALID_OPERATION\u3002\u5982\u679c\u6ca1\u6709\u4e3a\u542f\u7528\u7684\u9876\u70b9\u5c5e\u6027\u6307\u5b9a\u6570\u636e\uff0c\u5c31\u4f1a\u53d1\u751fgl.INVALID_STATE\u7c7b\u578b\u7684\u9519\u8bef\u3002\u8fd9\u56db\u4e2a\u9519\u8bef\u4ee3\u7801\u5b9e\u9645\u4e0a\u662f\u6700\u5e38\u89c1\u7684\u3002</p> <p>\u5728\u6bcf\u4e2aWebGL\u51fd\u6570\u8c03\u7528\u540e\u8c03\u7528gl.getError\u65e2\u4e0d\u5207\u5b9e\u9645\u4e5f\u4e0d\u9ad8\u6548\u3002\u7136\u800c\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u8c03\u8bd5\u5de5\u5177\u3002\u5f53\u6211\u6000\u7591\u6709\u9519\u8bef\u65f6\uff0c\u6211\u53ef\u80fd\u4f1a\u5728\u4ee3\u7801\u7684\u51e0\u4e2a\u70b9\u63d2\u5165\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>console.log(\"Error code is \" + gl.getError());\n</code></pre> <p>gl.NO_ERROR\u7684\u6570\u503c\u662f\u96f6\u3002\u4efb\u4f55\u975e\u96f6\u503c\u610f\u5473\u7740\u5728\u8c03\u7528gl.getError()\u4e4b\u524d\u7684\u67d0\u4e2a\u70b9\u53d1\u751f\u4e86\u9519\u8bef\u3002\u901a\u8fc7\u5728\u4ee3\u7801\u4e2d\u79fb\u52a8\u8f93\u51fa\u8bed\u53e5\uff0c\u6211\u53ef\u4ee5\u7f29\u5c0f\u5230\u5b9e\u9645\u4ea7\u751f\u9519\u8bef\u7684\u8bed\u53e5\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9b\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u5c06\u6709\u5173WebGL\u4e0d\u6b63\u786e\u4f7f\u7528\u7684\u67d0\u4e9b\u4fe1\u606f\u8f93\u51fa\u5230\u5b83\u4eec\u7684JavaScript\u63a7\u5236\u53f0\uff0c\u8fd9\u662f\u8bb8\u591a\u6d4f\u89c8\u5668\u5185\u7f6e\u7684\u5f00\u53d1\u5de5\u5177\u7684\u4e00\u90e8\u5206\u3002\u90a3\u4e2a\u63a7\u5236\u53f0\u4e5f\u662f\u4f7f\u7528console.log()\u5199\u5165\u6d88\u606f\u7684\u76ee\u7684\u5730\u3002\u5728\u8fd0\u884c\u6b63\u5728\u5f00\u53d1\u7684WebGL\u7a0b\u5e8f\u65f6\uff0c\u59cb\u7ec8\u68c0\u67e5\u63a7\u5236\u53f0\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff01</p> <p>It is a sad fact that OpenGL programmers often find themselves looking at a blank screen, with no clear indication of what went wrong. In many cases, this is due to a programming logic error, such as accidentally drawing a region of 3D space that contains no geometry. However, sometimes it's due to an error in the use of the API. In WebGL, and in OpenGL more generally, an error such as an illegal parameter value will not in general crash the program or produce any automatic notification of the error. Instead, when WebGL detects such an error, it ignores the illegal function call, and it sets the value of an error code that gives some indication of the nature of the error.</p> <p>A program can check the current value of the error code by calling gl.getError(). This function returns an integer error code. The return value is gl.NO_ERROR if no error has occurred. Any other return value means that an error has occurred. Once an error code has been set, it stays set until gl.getError() is called, even if other, correct WebGL operations have been executed in the meantime. Calling gl.getError() retrieves the value of the error code and resets its value to gl.NO_ERROR. (So, if you call gl.getError() twice in a row, the second call will always return gl.NO_ERROR.) This means that when gl.getError() returns an error, the error might actually have been generated by an instruction that was executed some time ago.</p> <p>As an example, consider a call to gl.drawArrays(primitive,first,count). If primitive is not one of the seven legal WebGL primitives, then WebGL will set the error code to gl.INVALID_ENUM. If first or count is negative, the error code is set to gl.INVALID_VALUE. If no shader program has been installed with gl.useProgram, the error is gl.INVALID_OPERATION. If no data has been specified for an enabled vertex attribute, an error of type gl.INVALID_STATE occurs. These four error codes are, in fact, the most common.</p> <p>It is both impractical and inefficient to call gl.getError after each WebGL function call. However, when something goes wrong, it can be used as a debugging aid. When I suspect an error, I might insert code such as</p> <pre><code>console.log(\"Error code is \" + gl.getError());\n</code></pre> <p>at several points in my code. The numeric value of gl.NO_ERROR is zero. Any non-zero value means that an error occurred at some point before the call to gl.getError. By moving the output statements around in the code, I can narrow in on the statement that actually produced the error.</p> <p>Note that some browsers automatically output certain information about incorrect use of WebGL to their JavaScript console, which is part of the development tools built into many browsers. That console is also the destination for messages written using console.log(). It's always a good idea to check the console when running a WebGL program that is under development!</p>"},{"location":"cn/c6/s3/","title":"6.3 GLSL","text":"<p>GLSL</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u5df2\u7ecf\u770b\u5230\u4e86\u4e00\u4e9b\u7528GLSL\u7f16\u5199\u7684\u7b80\u77ed\u7b80\u5355\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u793a\u4f8b\u3002\u5b9e\u9645\u4e0a\uff0c\u7740\u8272\u5668\u7a0b\u5e8f\u901a\u5e38\u76f8\u5f53\u7b80\u77ed\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u90a3\u4e48\u7b80\u5355\u3002\u4e3a\u4e86\u7406\u89e3\u6211\u4eec\u5c06\u5728\u672c\u4e66\u7684\u5176\u4f59\u90e8\u5206\u4e2d\u4f7f\u7528\u7684\u66f4\u590d\u6742\u7684\u7740\u8272\u5668\uff0c\u4f60\u9700\u8981\u66f4\u591a\u5730\u4e86\u89e3GLSL\u3002\u672c\u8282\u65e8\u5728\u7b80\u8981\u4ecb\u7ecd\u8be5\u8bed\u8a00\u7684\u4e3b\u8981\u7279\u70b9\u3002\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u6280\u672f\u6027\u7684\u7ae0\u8282\u3002\u4f60\u5e94\u8be5\u9605\u8bfb\u5b83\u4ee5\u719f\u6089GLSL\uff0c\u5e76\u5728\u9700\u8981\u65f6\u5c06\u5176\u4f5c\u4e3a\u53c2\u8003\u3002</p> <p>\u5bf9\u4e8eWebGL 1.0\uff0c\u7740\u8272\u5668\u5fc5\u987b\u7528GLSL ES 1.00\u7248\u672c\u7f16\u5199\u3002WebGL 2.0\u53ef\u4ee5\u4f7f\u75281.00\u7248\u672c\u62163.00\u7248\u672c\uff0c\u4f46\u67d0\u4e9bWebGL 2.0\u7684\u529f\u80fd\u53ea\u6709\u5728\u7528GLSL ES 3.00\u7f16\u5199\u7740\u8272\u5668\u65f6\u624d\u53ef\u7528\u3002\u5c3d\u7ba1\u4e24\u4e2a\u7248\u672c\u7684GLSL\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u5b58\u5728\u91cd\u5927\u5dee\u5f02\u548c\u4e0d\u517c\u5bb9\u6027\u3002\u9664\u975e\u53e6\u6709\u8bf4\u660e\uff0c\u8fd9\u91cc\u7684\u8ba8\u8bba\u9002\u7528\u4e8e\u4e24\u4e2a\u7248\u672c\u3002</p> <p>\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u5fc5\u987b\u4f7f\u7528\u76f8\u540c\u7248\u672c\u7684GLSL\u7f16\u5199\u3002GLSL ES 3.00\u7740\u8272\u5668\u7a0b\u5e8f\u5fc5\u987b\u4ee5\u4ee5\u4e0b\u884c\u5f00\u59cb\uff1a</p> <pre><code>#version 300 es\n</code></pre> <p>\u8fd9\u5fc5\u987b\u662f\u7740\u8272\u5668\u6e90\u4ee3\u7801\u7684\u975e\u5e38\u7b2c\u4e00\u884c\u3002\u5b83\u751a\u81f3\u4e0d\u80fd\u7531\u7a7a\u884c\u6216\u6ce8\u91ca\u5148\u884c\u3002\u4e0d\u4ee5\u8fd9\u884c\u5f00\u59cb\u7684\u7740\u8272\u5668\u662f1.00\u7248\u672c\u7684\u7740\u8272\u5668\u30021.00\u7248\u672c\u7684\u7740\u8272\u5668\u4e0d\u5305\u62ec\u7248\u672c\u53f7\u7684\u58f0\u660e\u3002</p> <p>You have seen a few short, simple examples of shader programs written in GLSL. In fact, shader programs are often fairly short, but they are not always so simple. To understand the more complex shaders that we will be using in the rest of this book, you will need to know more about GLSL. This section aims to give a short introduction to the major features of the language. This is a rather technical section. You should read it to get some familiarity with GLSL, and then use it as a reference when needed.</p> <p>For WebGL 1.0, shaders must be written in version 1.00 of GLSL ES. WebGL 2.0 can use either version 1.00 or version 3.00, but some features of WebGL 2.0 are only available when shaders are written in GLSL ES 3.00. Although the two versions of GLSL are very similar, there are major differences and incompatibilities. Unless otherwise noted, the discussion here applies to both versions.</p> <p>The vertex shader and the fragment shader in a shader program must be written using the same version of GLSL. A GLSL ES 3.00 shader program must begin with the line</p> <pre><code>#version 300 es\n</code></pre> <p>This must be the very first line of the shader source code. It cannot even be preceded by blank lines or comments. A shader program that does not start with this line is a version 1.00 shader. A version 1.00 shader does not include a declaration of the version number.</p>"},{"location":"cn/c6/s3/#631-\u57fa\u672c\u7c7b\u578b","title":"6.3.1 \u57fa\u672c\u7c7b\u578b","text":"<p>Basic Types</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728GLSL\u4e2d\uff0c\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u58f0\u660e\u3002GLSL\u662f\u4e00\u79cd\u4e25\u683c\u7c7b\u578b\u5316\u7684\u8bed\u8a00\uff0c\u6bcf\u4e2a\u53d8\u91cf\u5728\u58f0\u660e\u65f6\u90fd\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u7c7b\u578b\u3002</p> <p>GLSL\u6709\u5185\u7f6e\u7c7b\u578b\u6765\u8868\u793a\u6807\u91cf\uff08\u5373\u5355\u4e2a\u503c\uff09\u3001\u5411\u91cf\u548c\u77e9\u9635\u3002\u6807\u91cf\u7c7b\u578b\u6709float\u3001int\u548cbool\u30023.00\u7248\u672c\u589e\u52a0\u4e86\u65e0\u7b26\u53f7\u6574\u578b\uff0cuint\u3002GPU\u53ef\u80fd\u4e0d\u4f1a\u5728\u786c\u4ef6\u5c42\u9762\u652f\u6301\u6574\u6570\u6216\u5e03\u5c14\u503c\uff0c\u56e0\u6b64int\u548cbool\u7c7b\u578b\u5b9e\u9645\u4e0a\u662f\u7528\u6d6e\u70b9\u503c\u8868\u793a\u7684\u3002</p> <p>vec2\u3001vec3\u548cvec4\u7c7b\u578b\u5206\u522b\u8868\u793a\u4e24\u4e2a\u3001\u4e09\u4e2a\u548c\u56db\u4e2afloats\u7684\u5411\u91cf\u3002\u8fd8\u6709\u8868\u793aints\u7684\u5411\u91cf\u7c7b\u578b\uff08ivec2\u3001ivec3\u548civec4\uff09\u548c\u5e03\u5c14\u503c\u7684\u5411\u91cf\u7c7b\u578b\uff08bvec2\u3001bvec3\u548cbvec4\uff09\u2014\u2014\u4ee5\u53ca\u57283.00\u7248\u672c\u4e2d\uff0c\u8868\u793a\u65e0\u7b26\u53f7\u6574\u6570\u7684\u5411\u91cf\u7c7b\u578b\uff08uvec2\u3001uvec3\u548cuvec4\uff09\u3002GLSL\u5bf9\u4e8e\u5f15\u7528\u5411\u91cf\u5206\u91cf\u7684\u7b26\u53f7\u975e\u5e38\u7075\u6d3b\u3002\u8bbf\u95ee\u5b83\u4eec\u7684\u4e00\u79cd\u662f\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u5982\u679cv\u662f\u4e00\u4e2a\u56db\u5206\u91cf\u5411\u91cf\uff0c\u90a3\u4e48\u5b83\u7684\u5206\u91cf\u53ef\u4ee5\u4f5c\u4e3av[0]\u3001v[1]\u3001v[2]\u548cv[3]\u8bbf\u95ee\u3002\u4f46\u5b83\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u70b9\u7b26\u53f7\u4f5c\u4e3av.x\u3001v.y\u3001v.z\u548cv.w\u8bbf\u95ee\u3002\u5206\u91cf\u540d\u79f0x\u3001y\u3001z\u548cw\u9002\u7528\u4e8e\u4fdd\u5b58\u5750\u6807\u7684\u5411\u91cf\u3002\u7136\u800c\uff0c\u5411\u91cf\u4e5f\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u989c\u8272\uff0cv\u7684\u5206\u91cf\u4e5f\u53ef\u4ee5\u79f0\u4e3av.r\u3001v.g\u3001v.b\u548cv.a\u3002\u6700\u540e\uff0c\u5b83\u4eec\u53ef\u4ee5\u79f0\u4e3av.s\u3001v.t\u3001v.p\u548cv.q\u2014\u2014\u9002\u7528\u4e8e\u7eb9\u7406\u5750\u6807\u7684\u540d\u79f0\u3002</p> <p>\u6b64\u5916\uff0cGLSL\u5141\u8bb8\u4f60\u5728\u70b9\u540e\u9762\u4f7f\u7528\u591a\u4e2a\u5206\u91cf\u540d\u79f0\uff0c\u5982v.rgb\u6216v.zx\u751a\u81f3v.yyy\u3002\u540d\u79f0\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u6392\u5217\uff0c\u5141\u8bb8\u91cd\u590d\u3002\u8fd9\u79f0\u4e3aswizzling\uff0cv.zx\u662fswizzler\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002v.zx\u7b26\u53f7\u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f5c\u4e3a\u4e00\u4e2a\u4e24\u5206\u91cf\u5411\u91cf\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679cv\u662fvec4(1.0,2.0,3.0,4.0)\uff0c\u90a3\u4e48v.zx\u7b49\u540c\u4e8evec2(3.0,1.0)\uff0c\u800cv.yyy\u5c31\u50cfvec3(2.0,2.0,2.0)\u3002\u53ea\u8981\u5b83\u4eec\u4e0d\u5305\u542b\u91cd\u590d\u7684\u5206\u91cf\uff0cswizzlers\u751a\u81f3\u53ef\u4ee5\u7528\u5728\u8d4b\u503c\u7684\u5de6\u4fa7\u3002\u4f8b\u5982\uff0c</p> <pre><code>vec4 coords = vec4(1.0, 2.0, 3.0, 4.0);\nvec3 point = vec3(5.0, 6.0, 7.0);\ncoords.yzw = coords.wyz;  // \u73b0\u5728\uff0ccoords\u662f(1.0, 4.0, 2.0, 3.0)\npoint.xy = coords.xx;     // \u73b0\u5728\uff0cpoint\u662f(1.0, 1.0, 7.0)\n</code></pre> <p>\u50cfvec2(1.0, 2.0)\u8fd9\u6837\u7684\u7b26\u53f7\u88ab\u79f0\u4e3a\u201c\u6784\u9020\u51fd\u6570\u201d\uff0c\u5c3d\u7ba1\u5b83\u4e0d\u662fJava\u6216C++\u4e2d\u7684\u610f\u4e49\u4e0a\u7684\u6784\u9020\u51fd\u6570\uff0c\u56e0\u4e3aGLSL\u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u7684\uff0c\u4e5f\u6ca1\u6709new\u8fd0\u7b97\u7b26\u3002GLSL\u4e2d\u7684\u6784\u9020\u51fd\u6570\u7531\u7c7b\u578b\u540d\u79f0\u540e\u8ddf\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\u5217\u8868\u7ec4\u6210\uff0c\u5b83\u8868\u793a\u7531\u7c7b\u578b\u540d\u79f0\u6307\u5b9a\u7684\u7c7b\u578b\u7684\u503c\u3002\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u540d\u79f0\uff0c\u5305\u62ec\u6807\u91cf\u7c7b\u578b\u3002\u8be5\u503c\u7531\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\u7684\u503c\u6784\u5efa\u3002\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4e3a\u6784\u5efa\u7684\u503c\u8d21\u732e\u591a\u4e2a\u503c\uff1b\u6211\u4eec\u5df2\u7ecf\u5728\u50cf</p> <pre><code>vec2 v = vec2( 1.0, 2.0 );\nvec4 w = vec4( v, v );  // w\u662f( 1.0, 2.0, 1.0, 2.0 )\n</code></pre> <p>\u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662fswizzlers\uff1a</p> <pre><code>vec3 v = vec3( 1.0, 2.0, 3.0 );\nvec3 w = vec3( v.zx, 4.0 );  // w\u662f( 3.0, 1.0, 4.0 )\n</code></pre> <p>\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u7684\u989d\u5916\u503c\u5c06\u88ab\u4e22\u5f03\u3002\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u51fd\u6570\u6765\u7f29\u77ed\u5411\u91cf\u3002\u7136\u800c\uff0c\u62e5\u6709\u4e00\u4e9b\u6839\u672c\u6ca1\u6709\u4e3a\u7ed3\u679c\u8d21\u732e\u503c\u7684\u989d\u5916\u53c2\u6570\u662f\u4e0d\u5408\u6cd5\u7684\uff1a</p> <pre><code>vec4 rgba = vec4( 0.1, 0.2, 0.3, 0.4 );\nvec3 rgb = vec3( rgba );  // \u4ecergba\u4e2d\u53d63\u4e2a\u9879\u76ee\uff1brgb\u662f(0.1, 0.2, 0.3)\nfloat r = float( rgba );  // r\u662f0.1\nvec2 v = vec2( rgb, rgba );    // \u9519\u8bef\uff1a\u6ca1\u6709\u4f7f\u7528rgba\u4e2d\u7684\u503c\u3002\n</code></pre> <p>\u4f5c\u4e3a\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5f53\u4ece\u4e00\u4e2a\u5355\u4e00\u7684\u6807\u91cf\u503c\u6784\u9020\u5411\u91cf\u65f6\uff0c\u5411\u91cf\u7684\u6240\u6709\u5206\u91cf\u90fd\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u8be5\u503c\uff1a</p> <pre><code>vec4 black = vec4( 1.0 );  // black\u662f( 1.0, 1.0, 1.0, 1.0 )\n</code></pre> <p>\u5f53\u6784\u9020\u5185\u7f6e\u7c7b\u578b\u65f6\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c06\u5e94\u7528\u7c7b\u578b\u8f6c\u6362\u3002\u5c31\u8f6c\u6362\u800c\u8a00\uff0c\u5e03\u5c14\u503ctrue/false\u8f6c\u6362\u4e3a\u6570\u503c\u96f6\u548c\u4e00\uff1b\u53cd\u8fc7\u6765\uff0c\u96f6\u8f6c\u6362\u4e3afalse\uff0c\u4efb\u4f55\u5176\u4ed6\u6570\u503c\u8f6c\u6362\u4e3atrue\u3002\u636e\u6211\u6240\u77e5\uff0c\u6784\u9020\u51fd\u6570\u662fGLSL\u4e2d\u552f\u4e00\u7684\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u7684\u4e0a\u4e0b\u6587\u3002\u4f8b\u5982\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6784\u9020\u51fd\u6570\u5c06int\u503c\u8d4b\u7ed9float\u53d8\u91cf\uff0c\u76f4\u63a5\u5c06int\u52a0\u5230float\u662f\u975e\u6cd5\u7684\uff1a</p> <pre><code>int k = 1;\nfloat x = float(k);  // \u597d\u7684\uff1b\"x = k\"\u5c06\u662f\u7c7b\u578b\u4e0d\u5339\u914d\u9519\u8bef\nx = x + 1.0;         // \u597d\u7684\nx = x + 1;           // \u9519\u8bef\uff1a\u4e0d\u80fd\u6dfb\u52a0\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u3002\n</code></pre> <p>\u5185\u7f6e\u7684\u77e9\u9635\u7c7b\u578b\u662fmat2\u3001mat3\u548cmat4\u3002\u5b83\u4eec\u5206\u522b\u8868\u793a\u4e8c\u4e58\u4e8c\u3001\u4e09\u4e58\u4e09\u548c\u56db\u4e58\u56db\u7684\u6d6e\u70b9\u6570\u77e9\u9635\u3002\uff08\u6ca1\u6709\u6574\u6570\u6216\u5e03\u5c14\u503c\u7684\u77e9\u9635\uff0c\u4f46\u6709\u4e00\u4e9b\u989d\u5916\u7684\u77e9\u9635\u7c7b\u578b\u7528\u4e8e\u8868\u793a\u975e\u65b9\u9635\u3002\uff09\u77e9\u9635\u7684\u5143\u7d20\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u8bbf\u95ee\uff0c\u5982M[2][1]\u3002\u5982\u679c\u4f7f\u7528\u5355\u4e00\u7d22\u5f15\uff0c\u5982M[2]\uff0c\u7ed3\u679c\u662f\u5411\u91cf\u3002\u4f8b\u5982\uff0c\u5982\u679cM\u662fmat4\u7c7b\u578b\uff0c\u90a3\u4e48M[2]\u662fvec4\u3002GLSL\u4e2d\u7684\u6570\u7ec4\uff0c\u50cfOpenGL\u4e2d\u7684\u4e00\u6837\uff0c\u4f7f\u7528\u5217\u4e3b\u5e8f\u3002\u8fd9\u610f\u5473\u7740M[2]\u662fM\u4e2d\u7684\u7b2c\u4e8c\u5217\uff0c\u800c\u4e0d\u662f\u7b2c\u4e8c\u884c\uff08\u5c31\u50cf\u5728Java\u4e2d\u4e00\u6837\uff09\uff0cM[2][1]\u662f\u7b2c\u4e8c\u5217\u548c\u7b2c\u4e00\u884c\u7684\u5143\u7d20\u3002</p> <p>\u77e9\u9635\u53ef\u4ee5\u4ece\u9002\u5f53\u6570\u91cf\u7684\u503c\u6784\u9020\uff0c\u8fd9\u4e9b\u503c\u53ef\u4ee5\u4f5c\u4e3a\u6807\u91cf\u3001\u5411\u91cf\u6216\u77e9\u9635\u63d0\u4f9b\u3002\u4f8b\u5982\uff0cmat3\u53ef\u4ee5\u4ece\u4e5d\u4e2afloat\u6216\u4e09\u4e2avec3\u53c2\u6570\u6784\u9020\uff1a</p> <pre><code>mat3 m1 = mat3( 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 );\nvec3 v = vec3( 1, 2, 3 );\nmat3 m2 = mat3( v, v, v );\n</code></pre> <p>\u8bf7\u8bb0\u4f4f\uff0c\u77e9\u9635\u662f\u4ee5\u5217\u4e3b\u5e8f\u586b\u5145\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u524d\u4e09\u4e2a\u6570\u5b57\u8fdb\u5165\u7b2c0\u5217\uff0c\u63a5\u4e0b\u6765\u7684\u4e09\u4e2a\u8fdb\u5165\u7b2c1\u5217\uff0c\u6700\u540e\u4e09\u4e2a\u8fdb\u5165\u7b2c2\u5217\u3002</p> <p>\u4f5c\u4e3a\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5982\u679c\u77e9\u9635M\u4ece\u4e00\u4e2a\u5355\u4e00\u7684\u6807\u91cf\u503c\u6784\u9020\uff0c\u90a3\u4e48\u8be5\u503c\u5c06\u653e\u5165M\u7684\u6240\u6709\u5bf9\u89d2\u5143\u7d20\u4e2d\uff08M[0][0]\u3001M[1][1]\u7b49\uff09\u3002\u975e\u5bf9\u89d2\u5143\u7d20\u90fd\u8bbe\u7f6e\u4e3a\u96f6\u3002\u4f8b\u5982\uff0cmat4(1.0)\u6784\u9020\u4e86\u56db\u4e58\u56db\u7684\u5355\u4f4d\u77e9\u9635\u3002</p> <p>\u552f\u4e00\u5176\u4ed6\u5185\u7f6e\u7c7b\u578b\u662f\u6240\u8c13\u7684\u201c\u91c7\u6837\u5668\u7c7b\u578b\u201d\uff0c\u7528\u4e8e\u8bbf\u95ee\u7eb9\u7406\u3002\u91c7\u6837\u5668\u7c7b\u578b\u53ea\u80fd\u4ee5\u6709\u9650\u7684\u65b9\u5f0f\u4f7f\u7528\u3002\u5b83\u4eec\u4e0d\u662f\u6570\u503c\u7c7b\u578b\uff0c\u4e5f\u4e0d\u80fd\u8f6c\u6362\u4e3a\u6570\u503c\u7c7b\u578b\u3002\u5b83\u4eec\u5c06\u5728\u4e0b\u4e00\u90e8\u5206\u4e2d\u4ecb\u7ecd\u3002</p> <p>Variables in GLSL must be declared before they are used. GLSL is a strictly typed language, and every variable is given a type when it is declared.</p> <p>GLSL has built-in types to represent scalars (that is, single values), vectors, and matrices. The scalar types are float, int, and bool. Version 3.00 adds an unsigned integer type, uint. A GPU might not support integers or booleans on the hardware level, so it is possible that the int and bool types are actually represented as floating point values.</p> <p>The types vec2, vec3, and vec4 represent vectors of two, three, and four floats. There are also types to represent vectors of ints (ivec2, ivec3, and ivec4) and bools (bvec2, bvec3, and bvec4) \u2014 and, in version 3.00, of unsigned integers (uvec2, uvec3, and uvec4). GLSL has very flexible notation for referring to the components of a vector. One way to access them is with array notation. For example, if v is a four-component vector, then its components can be accessed as v[0], v[1], v[2], and v[3]. But they can also be accessed using the dot notation as v.x, v.y, v.z, andv.w. The component names x, y, z, and w are appropriate for a vector that holds coordinates. However, vectors can also be used to represent colors, and the components of v can alternatively be referred to as v.r, v.g, v.b, and v.a. Finally, they can be referred to as v.s, v.t, v.p, and v.q \u2014 names appropriate for texture coordinates.</p> <p>Furthermore, GLSL allows you to use multiple component names after the dot, as in v.rgb or v.zx or even v.yyy. The names can be in any order, and repetition is allowed. This is called swizzling, and v.zx is an example of a swizzler. The notation v.zx can be used in an expression as a two-component vector. For example, if v is vec4(1.0,2.0,3.0,4.0), then v.zx is equivalent to vec2(3.0,1.0), and v.yyy is like vec3(2.0,2.0,2.0). Swizzlers can even be used on the left-hand side of an assignment, as long as they don't contain repeated components. For example,</p> <pre><code>vec4 coords = vec4(1.0, 2.0, 3.0, 4.0);\nvec3 point = vec3(5.0, 6.0, 7.0);\ncoords.yzw = coords.wyz;  // Now, coords is (1.0, 4.0, 2.0, 3.0)\npoint.xy = coords.xx;     // Now, point is (1.0, 1.0, 7.0)\n</code></pre> <p>A notation such as vec2(1.0, 2.0) is referred to as a \"constructor,\" although it is not a constructor in the sense of Java or C++, since GLSL is not object-oriented, and there is no new operator. A constructor in GLSL consists of a type name followed by a list of expressions in parentheses, and it represents a value of the type specified by the type name. Any type name can be used, including the scalar types. The value is constructed from the values of the expressions in parentheses. An expression can contribute more than one value to the constructed value; we have already seen this in examples such as</p> <pre><code>vec2 v = vec2( 1.0, 2.0 );\nvec4 w = vec4( v, v );  // w is ( 1.0, 2.0, 1.0, 2.0 )\n</code></pre> <p>Note that the expressions can be swizzlers:</p> <pre><code>vec3 v = vec3( 1.0, 2.0, 3.0 );\nvec3 w = vec3( v.zx, 4.0 );  // w is ( 3.0, 1.0, 4.0 )\n</code></pre> <p>Extra values from the last parameter will be dropped. This makes is possible to use a constructor to shorten a vector. However, it is not legal to have extra parameters that contribute no values at all to the result:</p> <pre><code>vec4 rgba = vec4( 0.1, 0.2, 0.3, 0.4 );\nvec3 rgb = vec3( rgba );  // takes 3 items from rgba; rgb is (0.1, 0.2, 0.3)\nfloat r = float( rgba );  // r is 0.1\nvec2 v = vec2( rgb, rgba );    // ERROR: No values from rgba are used.\n</code></pre> <p>As a special case, when a vector is constructed from a single scalar value, all components of the vector will be set equal to that value:</p> <pre><code>vec4 black = vec4( 1.0 );  // black is ( 1.0, 1.0, 1.0, 1.0 )\n</code></pre> <p>When constructing one of the built-in types, type conversion will be applied if necessary. For purposes of conversion, the boolean values true/false convert to the numeric values zero and one; in the other direction, zero converts to false and any other numeric value converts to true. As far as I know, constructors are the only context in which GLSL does automatic type conversion. For example, you need to use a constructor to assign an int value to a float variable, and it is illegal to add an int to a float:</p> <pre><code>int k = 1;\nfloat x = float(k);  // OK; \"x = k\" would be a type mismatch error\nx = x + 1.0;         // OK\nx = x + 1;           // ERROR: Can't add values of different types.\n</code></pre> <p>The built-in matrix types are mat2, mat3, and mat4. They represent, respectively, two-by-two, three-by-three, and four-by-four matrices of floating point numbers. (There are no matrices of integers or booleans, but there are some additional matrix types for representing non-square matrices.) The elements of a matrix can be accessed using array notation, such as M[2][1]. If a single index is used, as in M[2], the result is a vector. For example, if M is of type mat4, then M[2] is a vec4. Arrays in GLSL, as in OpenGL, use column-major order. This means that M[2] is column number 2 in M rather than row number 2 (as it would be in Java), and M[2][1] is the element in column 2 and row 1.</p> <p>A matrix can be constructed from the appropriate number of values, which can be provided as scalars, vectors or matrices. For example, a mat3 can be constructed from nine float or from three vec3 parameters:</p> <pre><code>mat3 m1 = mat3( 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 );\nvec3 v = vec3( 1, 2, 3 );\nmat3 m2 = mat3( v, v, v );\n</code></pre> <p>Keep in mind that the matrix is filled in column-major order; that is, the first three numbers go into column 0, the next three into column 1, and the last three into column 2.</p> <p>As a special case, if a matrix M is constructed from a single scalar value, then that value is put into all the diagonal elements of M (M[0][0], M[1][1], and so on). The non-diagonal elements are all set equal to zero. For example, mat4(1.0) constructs the four-by-four identity matrix.</p> <p>The only other built-in types are the so-called \"sampler types\", which are used for accessing textures. The sampler types can be used only in limited ways. They are not numeric types and cannot be converted to or from numeric types. The will be covered in the next section.</p>"},{"location":"cn/c6/s3/#632-\u6570\u636e\u7ed3\u6784","title":"6.3.2 \u6570\u636e\u7ed3\u6784","text":"<p>Data Structures</p> \u4e2d\u6587\u82f1\u6587 <p>GLSL\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528struct\u5173\u952e\u5b57\u5b9a\u4e49\u65b0\u7c7b\u578b\u3002\u8bed\u6cd5\u4e0eC\u8bed\u8a00\u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e9b\u9650\u5236\u3002\u4e00\u4e2a\u7ed3\u6784\u7531\u4e00\u7cfb\u5217\u547d\u540d\u6210\u5458\u7ec4\u6210\uff0c\u8fd9\u4e9b\u6210\u5458\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u3002\u6210\u5458\u7684\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u4f55\u5185\u7f6e\u7c7b\u578b\u3001\u6570\u7ec4\u7c7b\u578b\u6216\u4e4b\u524d\u5b9a\u4e49\u7684\u7ed3\u6784\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p> <pre><code>struct LightProperties {\n    vec4 position;\n    vec3 color;\n    float intensity;\n};\n</code></pre> <p>\u8fd9\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3aLightProperties\u7684\u7c7b\u578b\u3002\u8fd9\u4e2a\u7c7b\u578b\u53ef\u4ee5\u7528\u6765\u58f0\u660e\u53d8\u91cf\uff1a</p> <pre><code>LightProperties light;\n</code></pre> <p>\u7136\u540e\uff0c\u53d8\u91cflight\u7684\u6210\u5458\u88ab\u79f0\u4e3alight.position\u3001light.color\u548clight.intensity\u3002\u7ed3\u6784\u7c7b\u578b\u6709\u6784\u9020\u51fd\u6570\uff0c\u4f46\u5b83\u4eec\u7684\u6784\u9020\u51fd\u6570\u4e0d\u652f\u6301\u7c7b\u578b\u8f6c\u6362\uff1a\u6784\u9020\u51fd\u6570\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u503c\u5217\u8868\uff0c\u5176\u7c7b\u578b\u4e0e\u7ed3\u6784\u4e2d\u76f8\u5e94\u6210\u5458\u7684\u7c7b\u578b\u5b8c\u5168\u5339\u914d\u3002\u4f8b\u5982\uff1a</p> <pre><code>light = LightProperties( vec4(0.0, 0.0, 0.0, 1.0), vec3(1.0), 1.0 );\n</code></pre> <p>GLSL\u8fd8\u652f\u6301\u6570\u7ec4\u3002\u53ea\u5141\u8bb8\u4e00\u7ef4\u6570\u7ec4\u3002\u6570\u7ec4\u7684\u57fa\u7840\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u4f55\u57fa\u672c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u7ed3\u6784\u7c7b\u578b\u3002\u6570\u7ec4\u7684\u5927\u5c0f\u5fc5\u987b\u5728\u53d8\u91cf\u58f0\u660e\u4e2d\u6307\u5b9a\u4e3a\u6574\u578b\u5e38\u91cf\u3002\u4f8b\u5982\uff1a</p> <pre><code>int A[10];\nvec3 palette[8];\nLightProperties lights[3];\n</code></pre> <p>\u57281.00\u7248\u672c\u4e2d\uff0c\u6ca1\u6709\u6570\u7ec4\u6784\u9020\u51fd\u6570\uff0c\u4e5f\u4e0d\u80fd\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\u6570\u7ec4\u30023.00\u7248\u672c\u786e\u5b9e\u6709\u6570\u7ec4\u6784\u9020\u51fd\u6570\uff0c\u5e76\u5141\u8bb8\u4f7f\u7528\u7c7b\u578b\u540d\u79f0\uff0c\u5982\u201cint[10]\u201d\uff0c\u8868\u793a\u4e00\u4e2a\u5305\u542b10\u4e2a\u6574\u6570\u7684\u6570\u7ec4\uff1a</p> <pre><code>int[4] B; // B\u662f\u4e00\u4e2a\u5305\u542b4\u4e2aint\u7684\u6570\u7ec4\uff1b\u4ec5\u9650GLSL ES 3.00\uff01\nB = int[4] (2, 3, 5, 7);  // \u6570\u7ec4\u6784\u9020\u51fd\u6570\uff1b\u4ec5\u9650GLSL ES 3.00\uff01\n</code></pre> <p>\u6570\u7ec4\u7d22\u5f15\u4f7f\u7528\u901a\u5e38\u7684\u8bed\u6cd5\uff0c\u5982A[0]\u6216palette[i+1]\u6216lights[3].color\u3002\u5728GLSL ES 1.00\u4e2d\uff0c\u5bf9\u4e8e\u53ef\u4ee5\u7528\u4f5c\u6570\u7ec4\u7d22\u5f15\u7684\u8868\u8fbe\u5f0f\u6709\u4e00\u4e9b\u4e25\u683c\u7684\u9650\u5236\u3002\u9664\u4e86\u4e00\u4e2a\u4f8b\u5916\uff0c\u7528\u4f5c\u6570\u7ec4\u7d22\u5f15\u7684\u8868\u8fbe\u5f0f\u53ea\u80fd\u5305\u542b\u6574\u578b\u5e38\u91cf\u548cfor\u5faa\u73af\u53d8\u91cf\uff08\u5373\u5728for\u5faa\u73af\u4e2d\u7528\u4f5c\u5faa\u73af\u63a7\u5236\u53d8\u91cf\u7684\u53d8\u91cf\uff09\u3002\u4f8b\u5982\uff0c\u8868\u8fbe\u5f0fpalette[i+1]\u53ea\u6709\u5728\u5f62\u5f0f\u4e3afor (int i = ....\u7684for\u5faa\u73af\u4e2d\u624d\u662f\u5408\u6cd5\u7684\u3002\u552f\u4e00\u7684\u4f8b\u5916\u662f\uff0c\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7684uniforms\u6570\u7ec4\uff08\u4e14\u4ec5\u5f53\u6570\u7ec4\u4e0d\u5305\u542b\u91c7\u6837\u5668\u65f6\uff09\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7d22\u5f15\u8868\u8fbe\u5f0f\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u9650\u5236\u5728GLSL ES 3.00\u4e2d\u4e0d\u9002\u7528\u3002</p> <p>\u5c31\u50cf\u5728C\u8bed\u8a00\u4e2d\u4e00\u6837\uff0c\u6ca1\u6709\u5bf9\u6570\u7ec4\u7d22\u5f15\u8d8a\u754c\u9519\u8bef\u8fdb\u884c\u68c0\u67e5\u3002\u7a0b\u5e8f\u5458\u9700\u8981\u786e\u4fdd\u6570\u7ec4\u7d22\u5f15\u662f\u6709\u6548\u7684\u3002</p> <p>A GLSL program can define new types using the struct keyword. The syntax is the same as in C, with some limitations. A struct is made up of a sequence of named members, which can be of different types. The type of a member can be any of the built-in types, an array type, or a previously defined struct type. For example,</p> <pre><code>struct LightProperties {\n    vec4 position;\n    vec3 color;\n    float intensity;\n};\n</code></pre> <p>This defines a type named LightProperties. The type can be used to declare variables:</p> <pre><code>LightProperties light;\n</code></pre> <p>The members of the variable light are then referred to as light.position, light.color, and light.intensity. Struct types have constructors, but their constructors do not support type conversion: The constructor must contain a list of values whose types exactly match the types of the corresponding members in the struct. For example,</p> <pre><code>light = LightProperties( vec4(0.0, 0.0, 0.0, 1.0), vec3(1.0), 1.0 );\n</code></pre> <p>GLSL also supports arrays. Only one-dimensional arrays are allowed. The base type of an array can be any of the basic types or it can be a struct type. The size of the array must be specified in the variable declaration as an integer constant. For example</p> <pre><code>int A[10];\nvec3 palette[8];\nLightProperties lights[3];\n</code></pre> <p>In version 1.00, there are no array constructors, and it is not possible to initialize an array as part of its declaration. Version 3.00 does have array constructors, and it allows type names such as \"int[10], representing an array of 10 integers:</p> <pre><code>int[4] B; // B is an array of 4 ints; GLSL ES 3.00 only!\nB = int[4] (2, 3, 5, 7);  // Array constructor; GLSL ES 3.00 only!\n</code></pre> <p>Array indexing uses the usual syntax, such as A[0] or palette[i+1] or lights[3].color. In GLSL ES 1.00, there are some strong limitations on the expressions that can be used as array indices. With one exception, an expression that is used as the index for an array can contain only integer constants and for loop variables (that is, variables that are used as loop control variables in for loops). For example, the expression palette[i+1] would only be legal inside a for of the form for (int i = .... The single exception is that arbitrary index expressions can be used for arrays of uniforms in a vertex shader (and then only if the array does not contain samplers). Note that these restrictions do not apply in GLSL ES 3.00.</p> <p>Just as in C, there is no check for array index out of bounds errors. It is up to the programmer to make sure that array indices are valid.</p>"},{"location":"cn/c6/s3/#633-\u9884\u9009\u8d5b","title":"6.3.3 \u9884\u9009\u8d5b","text":"<p>Qualifiers</p> \u4e2d\u6587\u82f1\u6587 <p>\u53d8\u91cf\u58f0\u660e\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u9650\u5b9a\u7b26\u8fdb\u884c\u4fee\u6539\u3002\u4f60\u5df2\u7ecf\u770b\u5230\u4e86\u9650\u5b9a\u7b26attribute\u3001uniform\u548cvarying\u7684\u4f8b\u5b50\u3002\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u5b58\u50a8\u9650\u5b9a\u7b26\u3002\u57283.00\u7248\u672c\u4e2d\uff0c\u6ca1\u6709attribute\u548cvarying\u9650\u5b9a\u7b26\uff1b\u76f8\u53cd\uff0c\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u5b58\u50a8\u9650\u5b9a\u7b26in\u58f0\u660e\u5c5e\u6027\uff0c\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4f7f\u7528out\u58f0\u660e\u53d8\u5316\u53d8\u91cf\uff0c\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4f7f\u7528in\u3002uniform\u9650\u5b9a\u7b26\u5728\u4e24\u4e2a\u7248\u672c\u4e2d\u90fd\u4f7f\u7528\u3002\u53ea\u6709\u5168\u5c40\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u624d\u80fd\u662f\u5c5e\u6027\u3001\u7edf\u4e00\u6216\u53d8\u5316\u53d8\u91cf\u3002</p> <p>attribute\u9650\u5b9a\u7b26\u53ea\u80fd\u5728GLSL ES 1.00\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4f7f\u7528\uff0c\u5e76\u4e14\u5b83\u53ea\u9002\u7528\u4e8e\u5185\u7f6e\u6d6e\u70b9\u7c7b\u578bfloat\u3001vec2\u3001vec3\u3001vec4\u3001mat2\u3001mat3\u548cmat4\u3002\uff08\u77e9\u9635\u5c5e\u6027\u5728JavaScript\u65b9\u9762\u6ca1\u6709\u76f4\u63a5\u652f\u6301\u3002\u77e9\u9635\u5c5e\u6027\u5fc5\u987b\u88ab\u89c6\u4e3a\u4e00\u7ec4\u5411\u91cf\u5c5e\u6027\uff0c\u6bcf\u4e2a\u77e9\u9635\u5217\u4e00\u4e2a\u3002\u5217\u7684\u5c5e\u6027\u4f4d\u7f6e\u662f\u8fde\u7eed\u7684\u6574\u6570\uff0cWebGL\u51fd\u6570gl.getAttribLocation\u5c06\u8fd4\u56de\u7b2c\u4e00\u5217\u7684\u4f4d\u7f6e\u3002\u77e9\u9635\u5c5e\u6027\u53ef\u80fd\u5f88\u5c11\u89c1\uff0c\u4f46\u5bf9\u4e8e\u5b9e\u4f8b\u5316\u7ed8\u5236\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8be6\u7ec6\u4ecb\u7ecd\u5b83\u4eec\u3002\uff09</p> <p>\u5728GLSL ES 3.00\u4e2d\uff0c\u9876\u70b9\u7740\u8272\u5668\u53d8\u91cf\u4e0a\u7684in\u9650\u5b9a\u7b26\u5c06\u5176\u5b9a\u4e49\u4e3a\u5c5e\u6027\u53d8\u91cf\uff0c\u5e76\u4e14\u5b83\u53ef\u4ee5\u5e94\u7528\u4e8e\u6574\u6570\u548c\u65e0\u7b26\u53f7\u6574\u6570\u6807\u91cf\u548c\u5411\u91cf\uff0c\u4ee5\u53ca\u6d6e\u70b9\u7c7b\u578b\u3002</p> <p>\u540c\u6837\u5728GLSL ES 3.00\u4e2d\uff0cout\u9650\u5b9a\u7b26\u53ef\u4ee5\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u6574\u6570\u548c\u6d6e\u70b9\u6807\u91cf\u548c\u5411\u91cf\u4e0a\u4f7f\u7528\u3002\u57281.00\u7248\u672c\u4e2d\uff0c\u7247\u6bb5\u7740\u8272\u5668\u6709\u9884\u5b9a\u4e49\u53d8\u91cfgl_FragColor\uff0c\u7c7b\u578b\u4e3avec4\uff0c\u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u7684\u989c\u8272\u3002\u57283.00\u7248\u672c\u4e2d\uff0c\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u51fa\uff0c\u8f93\u51fa\u4e0d\u4e00\u5b9a\u662f\u989c\u8272\u3002\u56e0\u4e3a\u8f93\u51fa\u7c7b\u578b\u4e0d\u4e00\u5b9a\u662fvec4\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u6709\u4e00\u4e2a\u9884\u5b9a\u4e49\u7684\u8f93\u51fa\u53d8\u91cf\u3002\u76ee\u524d\uff0c\u6211\u4eec\u53ea\u4f1a\u4f7f\u7528\u4e00\u4e2a\u4ee3\u8868\u989c\u8272\u7684\u7247\u6bb5\u7740\u8272\u5668\u8f93\u51fa\u3002\u6240\u4ee5\uff0c3.00\u7248\u672c\u7684\u7247\u6bb5\u7740\u8272\u5668\u5c06\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3avec4\u7684\u8f93\u51fa\u53d8\u91cf\u3002\uff08\u5f53\u6211\u4eec\u5728\u7b2c7.4\u8282\u8ba8\u8bba\u5e27\u7f13\u51b2\u533a\u65f6\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u8f93\u51fa\u3002\uff09</p> <p>\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u90fd\u53ef\u4ee5\u4f7f\u7528uniform\u53d8\u91cf\u3002\u53ea\u8981\u4e24\u4e2a\u7740\u8272\u5668\u4e2d\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u540c\u4e00\u4e2a\u53d8\u91cf\u5c31\u53ef\u4ee5\u51fa\u73b0\u5728\u4e24\u4e2a\u7740\u8272\u5668\u4e2d\u3002\u7edf\u4e00\u53d8\u91cf\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u5305\u62ec\u6570\u7ec4\u548c\u7ed3\u6784\u7c7b\u578b\u3002\u73b0\u5728\uff0cJavaScript\u53ea\u6709\u7528\u4e8e\u8bbe\u7f6e\u6807\u91cf\u53d8\u91cf\u3001\u5411\u91cf\u6216\u77e9\u9635\u7684\u7edf\u4e00\u503c\u7684\u51fd\u6570\u3002\u6ca1\u6709\u7528\u4e8e\u8bbe\u7f6e\u7ed3\u6784\u6216\u6570\u7ec4\u503c\u7684\u51fd\u6570\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u5c06\u7ed3\u6784\u6216\u6570\u7ec4\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u89c6\u4e3a\u5355\u72ec\u7684\u7edf\u4e00\u503c\u3002\u4f8b\u5982\uff0c\u8003\u8651\u58f0\u660e\uff1a</p> <pre><code>struct LightProperties {\n    vec4 position;\n    vec3 color;\n    float intensity;\n};\nuniform LightProperties light[4];\n</code></pre> <p>\u53d8\u91cflight\u5305\u542b\u5341\u4e8c\u4e2a\u57fa\u672c\u503c\uff0c\u7c7b\u578b\u4e3avec4\u3001vec3\u6216float\u3002\u8981\u5728JavaScript\u4e2d\u4f7f\u7528light\u7edf\u4e00\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u5341\u4e8c\u4e2a\u53d8\u91cf\u6765\u8868\u793a\u7edf\u4e00\u53d8\u91cf\u768412\u4e2a\u7ec4\u4ef6\u7684\u4f4d\u7f6e\u3002\u5f53\u4f7f\u7528gl.getUniformLocation\u83b7\u53d612\u4e2a\u7ec4\u4ef6\u4e4b\u4e00\u7684\u4f4d\u7f6e\u65f6\uff0c\u4f60\u9700\u8981\u5728GLSL\u7a0b\u5e8f\u4e2d\u7ed9\u51fa\u7ec4\u4ef6\u7684\u5b8c\u6574\u540d\u79f0\u3002\u4f8b\u5982\uff1agl.getUniformLocation(prog, \"light[2].color\")\u3002\u5f88\u81ea\u7136\u5730\u5c0612\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u5728\u4e0eGLSL\u7aef\u7684\u7ed3\u6784\u6570\u7ec4\u5e73\u884c\u7684JavaScript\u5bf9\u8c61\u6570\u7ec4\u4e2d\u3002\u4ee5\u4e0b\u662f\u521b\u5efa\u7ed3\u6784\u5e76\u4f7f\u7528\u5b83\u521d\u59cb\u5316\u7edf\u4e00\u53d8\u91cf\u7684\u5178\u578bJavaScript\u4ee3\u7801\uff1a</p> <pre><code>lightLocations = new Array(4);\nfor (i = 0; i &lt; light.length; i++) {\n    lightLocations[i] = {\n        position: gl.getUniformLocation(prog, \"light[\" + i + \"].position\" ),\n        color: gl.getUniformLocation(prog, \"light[\" + i + \"].color\" ),\n        intensity: gl.getUniformLocation(prog, \"light[\" + i + \"].intensity\" )\n    };\n}\n\nfor (i = 0; i &lt; light.length; i++) {\n    gl.uniform4f( lightLocations[i].position, 0, 0, 0, 1 );\n    gl.uniform3f( lightLocations[i].color, 1, 1, 1 );\n    gl.uniform1f( lightLocations[i].intensity, 0 );    \n}\n</code></pre> <p>\u5bf9\u4e8e\u77e9\u9635\u7edf\u4e00\u7740\u8272\u5668\u53d8\u91cf\uff0c\u7528\u4e8e\u8bbe\u7f6e\u7edf\u4e00\u503c\u7684JavaScript\u51fd\u6570\u662fgl.uniformMatrix2fv\u7528\u4e8emat2\uff0cgl.uniformMatrix3fv\u7528\u4e8emat3\uff0c\u6216gl.uniformMatrix4fv\u7528\u4e8emat4\u3002\u5373\u4f7f\u77e9\u9635\u662f\u4e8c\u7ef4\u7684\uff0c\u503c\u4e5f\u5b58\u50a8\u5728\u4e00\u7ef4\u6570\u7ec4\u4e2d\u3002\u503c\u4ee5\u5217\u4e3b\u5e8f\u7684\u65b9\u5f0f\u52a0\u8f7d\u5230\u6570\u7ec4\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679ctransform\u662f\u7740\u8272\u5668\u4e2d\u7684\u7edf\u4e00mat3\uff0c\u5219JavaScript\u53ef\u4ee5\u5c06\u5176\u503c\u8bbe\u7f6e\u4e3a\u5355\u4f4d\u77e9\u9635\uff1a</p> <pre><code>transformLoc = gl.getUniformLocation(prog, \"transform\");\ngl.uniformMatrix3fv( transformLoc, false, [ 1,0,0, 0,1,0, 0,0,1 ] );\n</code></pre> <p>\u57281.00\u7248\u672c\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5fc5\u987b\u662ffalse\u3002\u57283.00\u7248\u672c\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u662ftrue\uff0c\u8868\u793a\u77e9\u9635\u7684\u6761\u76ee\u4ee5\u884c\u4e3b\u5e8f\u800c\u4e0d\u662f\u5217\u4e3b\u5e8f\u63d0\u4f9b\u3002\u6ce8\u610f\uff0cuniformMatrix3fv\u4e2d\u76843\u6307\u7684\u662f\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u6570\u7ec4\u7684\u957f\u5ea6\u5fc5\u987b\u662f9\u3002\uff08\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u7edf\u4e00\u53d8\u91cf\u7684\u503c\uff0c\u4f7f\u7528\u7c7b\u578b\u5316\u6570\u7ec4\u800c\u4e0d\u662f\u666e\u901a\u7684JavaScript\u6570\u7ec4\u662f\u53ef\u4ee5\u7684\u3002\uff09</p> <p>\u53d8\u5316\u53d8\u91cf\u5e94\u5728\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4ee5\u76f8\u540c\u7684\u540d\u79f0\u548c\u7c7b\u578b\u58f0\u660e\u3002\u57281.00\u7248\u672c\u4e2d\uff0c\u58f0\u660e\u53d8\u5316\u53d8\u91cf\u7684\u5b58\u50a8\u9650\u5b9a\u7b26\u662fvarying\uff0c\u5b83\u53ea\u80fd\u7528\u4e8e\u5185\u7f6e\u6d6e\u70b9\u7c7b\u578b\uff08float\u3001vec2\u3001vec3\u3001vec4\u3001mat2\u3001mat3\u548cmat4\uff09\u548c\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u7ec4\u3002</p> <p>\u57283.00\u7248\u672c\u4e2d\uff0c\u53d8\u5316\u53d8\u91cf\u4e5f\u53ef\u4ee5\u662f\u6574\u6570\u6216\u65e0\u7b26\u53f7\u6574\u6570\u6807\u91cf\u6216\u5411\u91cf\u3002\u4f46\u6709\u4e00\u4e2a\u590d\u6742\u60c5\u51b5\uff0c\u56e0\u4e3a\u5bf9\u6574\u6570\u503c\u5e94\u7528\u63d2\u503c\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u6240\u4ee5\uff0c\u6574\u578b\u53d8\u5316\u53d8\u91cf\u5fc5\u987b\u7528\u989d\u5916\u7684\u9650\u5b9a\u7b26flat\u58f0\u660e\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u4f1a\u88ab\u63d2\u503c\u3002\u76f8\u53cd\uff0c\u4e09\u89d2\u5f62\u6216\u7ebf\u6bb5\u7684\u7b2c\u4e00\u4e2a\u9876\u70b9\u7684\u503c\u5c06\u7528\u4e8e\u6bcf\u4e2a\u50cf\u7d20\u3002\uff08\u6d6e\u70b9\u53d8\u5316\u53d8\u91cf\u4e5f\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u58f0\u660e\u4e3aflat\u3002\uff09\u4f8b\u5982\uff1a</p> <pre><code>flat in ivec3 A;  // \u4ec5\u9650GLSL ES 3.00\u7247\u6bb5\u7740\u8272\u5668\uff01\n</code></pre> <p>\u53e6\u4e00\u79cd\u53ef\u80fd\u7684\u5b58\u50a8\u9650\u5b9a\u7b26\u662fconst\uff0c\u8fd9\u610f\u5473\u7740\u53d8\u91cf\u7684\u503c\u5728\u521d\u59cb\u5316\u540e\u4e0d\u80fd\u66f4\u6539\u3002const\u53d8\u91cf\u7684\u58f0\u660e\u5fc5\u987b\u5305\u62ec\u521d\u59cb\u5316\u3002</p> <p>\u53d8\u91cf\u58f0\u660e\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7cbe\u5ea6\u9650\u5b9a\u7b26\u8fdb\u884c\u4fee\u6539\u3002\u53ef\u80fd\u7684\u7cbe\u5ea6\u9650\u5b9a\u7b26\u662fhighp\u3001mediump\u548clowp\u3002\u7cbe\u5ea6\u9650\u5b9a\u7b26\u4e3a\u6574\u578b\u53d8\u91cf\u8bbe\u7f6e\u4e86\u6700\u5c0f\u503c\u8303\u56f4\uff0c\u6216\u4e3a\u6d6e\u70b9\u53d8\u91cf\u8bbe\u7f6e\u4e86\u6700\u5c0f\u503c\u8303\u56f4\u548c\u6700\u5c0f\u5c0f\u6570\u4f4d\u6570\u3002GLSL\u6ca1\u6709\u4e3a\u7cbe\u5ea6\u9650\u5b9a\u7b26\u5206\u914d\u786e\u5207\u7684\u542b\u4e49\uff0c\u4f46\u89c4\u5b9a\u4e86\u4e00\u4e9b\u6700\u4f4e\u8981\u6c42\u3002\u4f8b\u5982\uff0c\u57281.00\u7248\u672c\u4e2d\uff0clowp\u6574\u6570\u5fc5\u987b\u80fd\u591f\u8868\u793a\u81f3\u5c11\u5728-2<sup>8\u52302</sup>8\u8303\u56f4\u5185\u7684\u503c\uff1bmediump\u6574\u6570\uff0c\u5728-2<sup>10\u52302</sup>10\u8303\u56f4\u5185\uff1bhighp\u6574\u6570\uff0c\u5728-2<sup>16\u52302</sup>16\u8303\u56f4\u5185\u3002\u5bf9\u4e8e3.00\u7248\u672c\uff0chighp\u53d8\u91cf\u59cb\u7ec8\u4f7f\u752832\u4f4d\uff0cmediump\u548clowp\u7684\u8981\u6c42\u66f4\u9ad8\u3002\u751a\u81f3\u53ef\u80fd\u6240\u6709\u503c\u90fd\u662f32\u4f4d\u503c\uff0c\u7cbe\u5ea6\u9650\u5b9a\u7b26\u6ca1\u6709\u5b9e\u9645\u6548\u679c\u3002\u4f46\u662f\uff0c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684GPU\u53ef\u80fd\u66f4\u6709\u9650\u3002</p> <p>\u7cbe\u5ea6\u9650\u5b9a\u7b26\u53ef\u7528\u4e8e\u4efb\u4f55\u53d8\u91cf\u58f0\u660e\uff0c\u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u548c\u51fd\u6570\u53c2\u6570\u3002\u5982\u679c\u53d8\u91cf\u8fd8\u6709\u5b58\u50a8\u9650\u5b9a\u7b26\uff0c\u5219\u5b58\u50a8\u9650\u5b9a\u7b26\u653e\u5728\u7b2c\u4e00\u4f4d\u3002\u4f8b\u5982</p> <pre><code>lowp int n;\nvarying highp float v;\nuniform mediump vec3 colors[3];\n</code></pre> <p>\u53d8\u5316\u53d8\u91cf\u5728\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u7cbe\u5ea6\u3002\u9876\u70b9\u7740\u8272\u5668\u4e2d\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u9ed8\u8ba4\u7cbe\u5ea6\u662fhighp\u3002\u7247\u6bb5\u7740\u8272\u5668\u4e0d\u4e00\u5b9a\u652f\u6301highp\uff0c\u5c3d\u7ba1\u5b83\u4eec\u5f88\u53ef\u80fd\u4f1a\u8fd9\u6837\u505a\uff0c\u9664\u975e\u53ef\u80fd\u662f\u5728\u65e7\u7684\u79fb\u52a8\u786c\u4ef6\u4e0a\u3002\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\uff0c\u6574\u6570\u7684\u9ed8\u8ba4\u7cbe\u5ea6\u662fmediump\uff0c\u4f46\u6d6e\u70b9\u6570\u6ca1\u6709\u9ed8\u8ba4\u7cbe\u5ea6\u3002\u8fd9\u610f\u5473\u7740\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u6bcf\u4e2a\u6d6e\u70b9\u53d8\u91cf\u90fd\u5fc5\u987b\u663e\u5f0f\u5206\u914d\u7cbe\u5ea6\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bed\u53e5\u4e3a\u6d6e\u70b9\u6570\u8bbe\u7f6e\u9ed8\u8ba4\u7cbe\u5ea6</p> <pre><code>precision mediump float;\n</code></pre> <p>\u8fd9\u5728\u4e0a\u4e00\u8282\u7684\u6bcf\u4e2a\u7247\u6bb5\u7740\u8272\u5668\u5f00\u5934\u90fd\u4f7f\u7528\u4e86\u3002\u5f53\u7136\uff0c\u5982\u679c\u7247\u6bb5\u7740\u8272\u5668\u786e\u5b9e\u652f\u6301highp\uff0c\u8fd9\u4f1a\u4e0d\u5fc5\u8981\u5730\u9650\u5236\u7cbe\u5ea6\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7247\u6bb5\u7740\u8272\u5668\u5f00\u5934\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff1a</p> <pre><code>#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\n</code></pre> <p>\u5982\u679c\u53ef\u7528\uff0c\u5219\u5c06\u9ed8\u8ba4\u7cbe\u5ea6\u8bbe\u7f6e\u4e3ahighp\uff0c\u5982\u679c\u4e0d\u53ef\u7528\uff0c\u5219\u8bbe\u7f6e\u4e3amediump\u3002\u4ee5\"#\"\u5f00\u5934\u7684\u884c\u662f\u9884\u5904\u7406\u5668\u6307\u4ee4\u2014\u2014GLSL\u7684\u4e00\u4e2a\u65b9\u9762\uff0c\u6211\u4e0d\u60f3\u6df1\u5165\u3002</p> <p>\u4e0b\u4e00\u4e2a\u9650\u5b9a\u7b26\uff0cinvariant\uff0c\u66f4\u96be\u4ee5\u89e3\u91ca\uff0c\u5b83\u7684\u7528\u9014\u4e5f\u6709\u9650\u3002\u4e0d\u53d8\u6027\u6307\u7684\u662f\u5f53\u76f8\u540c\u7684\u8868\u8fbe\u5f0f\u7528\u4e8e\u8ba1\u7b97\u540c\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\uff08\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u7740\u8272\u5668\u4e2d\uff09\u65f6\uff0c\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u503c\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u5e94\u8be5\u5b8c\u5168\u76f8\u540c\u3002\u8fd9\u5e76\u4e0d\u81ea\u52a8\u6210\u7acb\u3002\u4f8b\u5982\uff0c\u5982\u679c\u7f16\u8bd1\u5668\u5728\u4e24\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u4f18\u5316\u6216\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u8bc4\u4f30\u64cd\u4f5c\u6570\uff0c\u5f97\u5230\u7684\u503c\u53ef\u80fd\u4f1a\u4e0d\u540c\u3002\u53d8\u91cf\u4e0a\u7684\u4e0d\u53d8\u6027\u9650\u5b9a\u7b26\u5c06\u5f3a\u5236\u7f16\u8bd1\u5668\u5bf9\u4e24\u4e2a\u8d4b\u503c\u8bed\u53e5\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7684\u8ba1\u7b97\u3002\u8fd9\u4e2a\u9650\u5b9a\u7b26\u53ea\u80fd\u7528\u5728\u53d8\u5316\u53d8\u91cf\u7684\u58f0\u660e\u4e0a\u3002\u5b83\u5fc5\u987b\u662f\u58f0\u660e\u4e2d\u7684\u7b2c\u4e00\u4e2a\u9650\u5b9a\u7b26\u3002\u4f8b\u5982\uff1a</p> <pre><code>invariant varying mediump vec3 color;\n</code></pre> <p>\u4e0d\u53d8\u6027\u9650\u5b9a\u7b26\u4e5f\u53ef\u4ee5\u7528\u4e8e\u4f7f\u5185\u7f6e\u53d8\u91cf\uff08\u5982 <code>gl_Position</code> \u548c <code>gl_FragCoord</code>\uff09\u4e0d\u53d8\uff0c\u4f7f\u7528\u5982\u4e0b\u8bed\u53e5\uff1a</p> <pre><code>invariant gl_Position;\n</code></pre> <p>\u5728\u591a\u9636\u6bb5\u7b97\u6cd5\u4e2d\uff0c\u4e0d\u53d8\u6027\u53ef\u80fd\u5f88\u91cd\u8981\uff0c\u8be5\u7b97\u6cd5\u8fde\u7eed\u5e94\u7528\u4e24\u4e2a\u6216\u66f4\u591a\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u6765\u8ba1\u7b97\u56fe\u50cf\u3002\u4f8b\u5982\uff0c\u5f53\u4e24\u4e2a\u7740\u8272\u5668\u4f7f\u7528\u76f8\u540c\u7684\u8868\u8fbe\u5f0f\u8ba1\u7b97\u540c\u4e00\u4e2a\u9876\u70b9\u7684 <code>gl_Position</code> \u65f6\uff0c\u786e\u4fdd\u5b83\u4eec\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u662f\u5f88\u91cd\u8981\u7684\u3002\u5728\u7740\u8272\u5668\u4e2d\u4f7f <code>gl_Position</code> \u4e0d\u53d8\u5c06\u786e\u4fdd\u8fd9\u4e00\u70b9\u3002</p> <p>\u6700\u540e\uff0c\"\u5e03\u5c40\"\uff08layout\uff09\u9650\u5b9a\u7b26\u4ec5\u57283.00\u7248\u672c\u4e2d\u53ef\u7528\u3002\u5b83\u53ef\u4ee5\u7528\u6765\u6307\u5b9a\u5c5e\u6027\u53d8\u91cf\u7684\u6574\u578bID\uff0c\u4f5c\u4e3a\u4f7f\u7528 JavaScript \u51fd\u6570 <code>gl.getAttribLocation()</code> \u67e5\u8be2ID\u7684\u66ff\u4ee3\u3002\u4f8b\u5982\uff1a</p> <pre><code>layout(location = 0) in vec3 a_coords; // \u4ec5\u9650 GLSL ES 3.00 \u9876\u70b9\u7740\u8272\u5668\uff01\n</code></pre> <p>\u5728 GLSL ES 3.00 \u7247\u6bb5\u7740\u8272\u5668\u4e2d\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u7684\u5e03\u5c40\u9650\u5b9a\u7b26\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u6307\u5b9a\u4e86\u8be5\u53d8\u91cf\u5e94\u8be5\u4f7f\u7528\u7684\u51e0\u4e2a\u8f93\u51fa\u76ee\u6807\u4e2d\u7684\u54ea\u4e00\u4e2a\u3002</p> <p>\u5e0c\u671b\u8fd9\u4e9b\u4fe1\u606f\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u3002\u5982\u679c\u4f60\u6709\u66f4\u591a\u5173\u4e8e GLSL \u6216\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u63d0\u95ee\u3002</p> <p>Variable declarations can be modified by various qualifiers. You have seen examples of the qualifiers attribute, uniform, and varying. These are called storage qualifiers. The qualifiers attribute and varying do not exist in version 3.00; instead, an attribute is declared in the vertex shader using the storage qualifier in, and a varying variable is declared using out in the vertex shader and in in the fragment shader. The uniform qualifier is used in both versions. Only global variables, not local variables in function definition, can be attribute, uniform, or varying variables.</p> <p>The attribute qualifier can only be used in a GLSL ES 1.00 vertex shader, and it only applies to the built-in floating point types float, vec2, vec3, vec4, mat2, mat3, and mat4. (Matrix attributes are not supported directly on the JavaScript side. A matrix attribute has to be treated as a set of vector attributes, one for each column. The attribute locations for the columns are successive integers, and the WebGL function gl.getAttribLocation will return the location for the first column. Matrix attributes would be rare, though perhaps useful for instanced drawing, and I won't go into further detail about them here.)</p> <p>In GLSL ES 3.00, the in qualifier on a vertex shader variable defines it to be an attribute variable, and it can be applied to integer and unsigned integer scalars and vectors, as well as to the floating point types.</p> <p>Also in GLSL ES 3.00, the out qualifier can be used on integer and floating point scalars and vectors in the fragment shader. In version 1.00, a fragment shader has the predefined variable gl_FragColor of type vec4 to specify the color of the pixel. In version 3.00, a fragment shader can have multiple outputs, and the outputs are not necessarily colors. Because the output type does not have to be vec4, it is not possible to have a predefined output variable. For now, we will only use one fragment shader output representing a color. So, a version 3.00 fragment shader will have one out variable of type vec4. (When we discuss framebuffers in Section 7.4, we will see how multiple outputs can be used.)</p> <p>Both the vertex shader and the fragment shader can use uniform variables. The same variable can occur in both shaders, as long as the types in the two shaders are the same. Uniform variables can be of any type, including array and structure types. Now, JavaScript only has functions for setting uniform values that are scalar variables, vectors, or matrices. There are no functions for setting the values of structs or arrays. The solution to this problem requires treating every component of a struct or array as a separate uniform value. For example, consider the declarations</p> <pre><code>struct LightProperties {\n    vec4 position;\n    vec3 color;\n    float intensity;\n};\nuniform LightProperties light[4];\n</code></pre> <p>The variable light contains twelve basic values, which are of type vec4, vec3, or float. To work with the light uniform in JavaScript, we need twelve variables to represent the locations of the 12 components of the uniform variable. When using gl.getUniformLocation to get the location of one of the 12 components, you need to give the full name of the component in the GLSL program. For example: gl.getUniformLocation(prog, \"light[2].color\"). It is natural to store the 12 locations in an array of JavaScript objects that parallels the structure of the array of structs on the GLSL side. Here is typical JavaScript code to create the structure and use it to initialize the uniform variables:</p> <pre><code>lightLocations = new Array(4);\nfor (i = 0; i &lt; light.length; i++) {\n    lightLocations[i] = {\n        position: gl.getUniformLocation(prog, \"light[\" + i + \"].position\" );\n        color: gl.getUniformLocation(prog, \"light[\" + i + \"].color\" );\n        intensity: gl.getUniformLocation(prog, \"light[\" + i + \"].intensity\" );\n    };\n}\n\nfor (i = 0; i &lt; light.length; i++) {\n    gl.uniform4f( lightLocations[i].position, 0, 0, 0, 1 );\n    gl.uniform3f( lightLocations[i].color, 1, 1, 1 );\n    gl.uniform1f( lightLocations[i].intensity, 0 );    \n}\n</code></pre> <p>For uniform shader variables that are matrices, the JavaScript function that is used to set the value of the uniform is gl.uniformMatrix2fv for a mat2, gl.uniformMatrix3fv for a mat3, or gl.uniformMatrix4fv for a mat4. Even though the matrix is two-dimensional, the values are stored in a one dimensional array. The values are loaded into the array in column-major order. For example, if transform is a uniform mat3 in the shader, then JavaScript can set its value to be the identity matrix with</p> <pre><code>transformLoc = gl.getUniformLocation(prog, \"transform\");\ngl.uniformMatrix3fv( transformLoc, false, [ 1,0,0, 0,1,0, 0,0,1 ] );\n</code></pre> <p>In Version 1.00, the second parameter must be false. In Version 3.00, the second parameter can be true to indicate that the entries of the matrix are provided in row-major rather than column-major order. Note that the 3 in uniformMatrix3fv refers to the number of rows and columns in the matrix, not to the length of the array, which must be 9. (By the way, it is OK to use a typed array rather than a normal JavaScript array for the value of a uniform.)</p> <p>A varying variable should be declared with the same name and type in both the vertex shader and fragment shader. In version 1.00, the storage qualifier for declaring varying variables is varying, and it can only be used for the built-in floating point types (float, vec2, vec3, vec4, mat2, mat3, and mat4) and for arrays of those types.</p> <p>In version 3.00, a varying variable can also be an integer or unsigned integer scalar or vector. But there is a complication because it doesn't make sense to apply interpolation to integer values. So, a varying variable of integer type must be declared with the additional qualifier flat, which means it will not be interpolated. Instead, the value from the first vertex of a triangle or line segment will be used for every pixel. (Floating point varying variables can also, optionally, be declared as flat.) For example:</p> <pre><code>flat in ivec3 A;  // GLSL ES 3.00 fragment shader only!\n</code></pre> <p>Another possible storage qualifier is const, which means that the value of the variable cannot be changed after it has been initialized. The declaration of a const variable must include initialization.</p> <p>A variable declaration can also be modified by precision qualifiers. The possible precision qualifiers are highp, mediump, and lowp. A precision qualifier sets the minimum range of possible values for an integer variable or the minimum range of values and number of decimal places for a floating point variable. GLSL doesn't assign a definite meaning to the precision qualifiers, but mandates some minimum requirements. For example, in version 1.00, lowp integers must be able to represent values in at least the range \u22122<sup>8</sup> to 2<sup>8</sup>; mediump integers, in the range \u22122<sup>10</sup> to 2<sup>10</sup>; and highp integers, in the range \u22122<sup>16</sup> to 2<sup>16</sup>. For version 3.00, highp variables always use 32 bits, and the requirements for mediump and lowp are higher. It is even possible that all values are 32-bit values and the precision qualifiers have no real effect. But GPUs in embedded systems can be more limited.</p> <p>A precision qualifier can be used on any variable declaration, including local variables and function parameters. If the variable also has a storage qualifier, the storage qualifier comes first. For example</p> <pre><code>lowp int n;\nvarying highp float v;\nuniform mediump vec3 colors[3];\n</code></pre> <p>A varying variable can have different precisions in the vertex and in the fragment shader. The default precision for integers and floats in the vertex shader is highp. Fragment shaders are not required to support highp, although it is likely that they do so, except perhaps on older mobile hardware. In the fragment shader, the default precision for integers is mediump, but floats do not have a default precision. This means that every floating point variable in the fragment shader has to be explicitly assigned a precision. Alternatively, it is possible to set a default precision for floats with the statement</p> <pre><code>precision mediump float;\n</code></pre> <p>This statement was used at the start of each of the fragment shaders in the previous section. Of course, if the fragment shader does support highp, this restricts the precision unnecessarily. You can avoid that by using this code at the start of the fragment shader:</p> <pre><code>#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\n</code></pre> <p>This sets the default precision to highp if it is available and to mediump if not. The lines starting with \"#\" are preprocessor directives\u2014an aspect of GLSL that I don't want to get into.</p> <p>The next qualifier, invariant, is even more difficult to explain, and it has only a limited use. Invariance refers to the requirement that when the same expression is used to compute the value of the same variable (possibly in different shaders), then the value that is assigned to the variable should be exactly the same in both cases. This is not automatically the case. For example, the values can be different if a compiler uses different optimizations or evaluates the operands in a different order in the two expressions. The invariant qualifier on the variable will force the compiler to use exactly the same calculations for the two assignment statements. The qualifier can only be used on declarations of varying variables. It must be the first qualifier in the declaration. For example,</p> <pre><code>invariant varying mediump vec3 color;\n</code></pre> <p>It can also be used to make the predefined variables such as gl_Position and gl_FragCoord invariant, using a statement such as</p> <pre><code>invariant gl_Position;\n</code></pre> <p>Invariance can be important in a multi-pass algorithm that applies two or more shader programs in succession to compute an image. It is important, for example, that both shaders get the same answer when they compute gl_Position for the same vertex, using the same expression in both vertex shaders. Making gl_Position invariant in the shaders will ensure that.</p> <p>The last type of qualifier, a \"layout\" qualifier, is only available in version 3.00. It can be used to specify the integer ID of an attribute variable, as an alternative to using the JavaScript function gl.getAttribLocation() to query the ID. An example would be</p> <pre><code>layout(location = 0) in vec3 a_coords; // GLSL ES 3.00 vertex shader only!\n</code></pre> <p>The same kind of layout qualifier can be used on an out variable in a GLSL ES 3.00 fragment shader that has multiple outputs. In that case, it specifies which of several output destinations should be used for that variable.</p>"},{"location":"cn/c6/s3/#634-\u8868\u8fbe\u5f0f","title":"6.3.4 \u8868\u8fbe\u5f0f","text":"<p>Expressions</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728GLSL\u4e2d\uff0c\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f7f\u7528\u7b97\u672f\u8fd0\u7b97\u7b26+\u3001-\u3001\u3001/\u3001++\u548c--\uff0c\u7528\u4e8e\u6574\u6570\u548c\u6d6e\u70b9\u6570\u503c\u3002\u57283.00\u7248\u672c\u4e2d\uff0c\u8fd8\u4e3a\u6574\u6570\u7c7b\u578b\u63d0\u4f9b\u4e86\u4f59\u6570\u8fd0\u7b97\u7b26%\uff0c\u4ee5\u53ca\u5de6\u79fb\u548c\u53f3\u79fb\u4f4d\u8fd0\u7b97\u7b26\u548c\u4f4d\u903b\u8f91\u8fd0\u7b97\u7b26\u3002\u8868\u8fbe\u5f0f\u4e2d\u6ca1\u6709\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u3002\u5982\u679cx\u662ffloat\u7c7b\u578b\uff0c\u8868\u8fbe\u5f0fx+1\u662f\u975e\u6cd5\u7684\u3002\u4f60\u5fc5\u987b\u8bf4x+1.0\u6216x+float(1)*\u3002</p> <p>\u7b97\u672f\u8fd0\u7b97\u7b26\u5df2\u7ecf\u4ee5\u5404\u79cd\u65b9\u5f0f\u6269\u5c55\uff0c\u4ee5\u9002\u5e94\u5411\u91cf\u548c\u77e9\u9635\u8fd0\u7b97\u3002\u5982\u679c\u4f60\u4f7f\u7528\u6765\u4e58\u4ee5\u4e00\u4e2a\u77e9\u9635\u548c\u4e00\u4e2a\u5411\u91cf\uff0c\u65e0\u8bba\u662f\u54ea\u79cd\u987a\u5e8f\uff0c\u5b83\u90fd\u4f1a\u4ee5\u7ebf\u6027\u4ee3\u6570\u7684\u65b9\u5f0f\u8fdb\u884c\u4e58\u6cd5\uff0c\u5f97\u5230\u4e00\u4e2a\u5411\u91cf\u4f5c\u4e3a\u7ed3\u679c\u3002\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u5fc5\u987b\u4ee5\u663e\u800c\u6613\u89c1\u7684\u65b9\u5f0f\u5339\u914d\uff1b\u4f8b\u5982\uff0cvec3\u53ea\u80fd\u4e0emat3\u76f8\u4e58\uff0c\u7ed3\u679c\u662fvec3\u3002\u5f53\u7528\u4e8e\u4e24\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u77e9\u9635\u65f6\uff0c\u6267\u884c\u77e9\u9635\u4e58\u6cd5\u3002</p> <p>\u5982\u679c\u5bf9\u5177\u6709\u76f8\u540c\u57fa\u672c\u7c7b\u578b\u7684\u5411\u91cf\u548c\u6807\u91cf\u4f7f\u7528+\u3001-\u3001\u6216/\uff0c\u5219\u5bf9\u5411\u91cf\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u64cd\u4f5c\u3002\u4f8b\u5982\uff0cvec2(3.0,3.0) / 2.0\u662f\u5411\u91cfvec2(1.5,1.5)\uff0c2ivec3(1,2,3)\u662f\u5411\u91cfivec3(2,4,6)\u3002\u5f53\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u5e94\u7528\u4e8e\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u5411\u91cf\u65f6\uff0c\u5bf9\u6bcf\u5bf9\u5206\u91cf\u6267\u884c\u64cd\u4f5c\uff0c\u7ed3\u679c\u662f\u5411\u91cf\u3002\u4f8b\u5982\uff0c\u8868\u8fbe\u5f0f\u7684\u503c</p> <pre><code>vec3( 1.0, 2.0, 3.0 ) + vec3( 4.2, -7.0, 1.7 )\n</code></pre> <p>\u662f\u5411\u91cfvec3(5.2,-5.0,4.7)\u3002\u7279\u522b\u6ce8\u610f\uff0c\u901a\u5e38\u7684\u5411\u91cf\u8fd0\u7b97\u64cd\u4f5c\u2014\u2014\u5411\u91cf\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\u3001\u5411\u91cf\u4e58\u4ee5\u6807\u91cf\u3001\u5411\u91cf\u4e58\u4ee5\u77e9\u9635\u2014\u2014\u5728GLSL\u4e2d\u4ee5\u81ea\u7136\u7684\u65b9\u5f0f\u4e66\u5199\u3002</p> <p>\u5173\u7cfb\u8fd0\u7b97\u7b26&lt;\u3001&gt;\u3001&lt;=\u548c&gt;=\u53ea\u80fd\u5e94\u7528\u4e8e\u6574\u6570\u548c\u6d6e\u70b9\u6807\u91cf\uff0c\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u5fc5\u987b\u5b8c\u5168\u5339\u914d\u3002\u7136\u800c\uff0c\u7b49\u5f0f\u8fd0\u7b97\u7b26==\u548c!=\u5df2\u6269\u5c55\u5230\u9002\u7528\u4e8e\u9664\u91c7\u6837\u5668\u7c7b\u578b\u4e4b\u5916\u7684\u6240\u6709\u5185\u7f6e\u7c7b\u578b\u3002\u4e24\u4e2a\u5411\u91cf\u53ea\u6709\u5728\u76f8\u5e94\u7684\u5206\u91cf\u5bf9\u90fd\u76f8\u7b49\u65f6\u624d\u76f8\u7b49\u3002\u77e9\u9635\u4e5f\u662f\u5982\u6b64\u3002\u7b49\u5f0f\u8fd0\u7b97\u7b26\u4e0d\u80fd\u7528\u4e8e\u6570\u7ec4\uff0c\u4f46\u5b83\u4eec\u9002\u7528\u4e8e\u7ed3\u6784\u4f53\uff0c\u53ea\u8981\u7ed3\u6784\u4f53\u4e0d\u5305\u542b\u4efb\u4f55\u6570\u7ec4\u6216\u91c7\u6837\u5668\uff1b\u540c\u6837\uff0c\u4e24\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u6bcf\u5bf9\u6210\u5458\u5fc5\u987b\u76f8\u7b49\uff0c\u7ed3\u6784\u4f53\u624d\u88ab\u89c6\u4e3a\u76f8\u7b49\u3002</p> <p>GLSL\u6709\u903b\u8f91\u8fd0\u7b97\u7b26!\u3001&amp;&amp;\u3001||\u548c^^\uff08\u6700\u540e\u4e00\u4e2a\u662f\u5f02\u6216\u64cd\u4f5c\uff09\u3002\u64cd\u4f5c\u6570\u5fc5\u987b\u662fbool\u7c7b\u578b\u3002</p> <p>\u6700\u540e\uff0c\u8fd8\u6709\u8d4b\u503c\u8fd0\u7b97\u7b26=\u3001+=\u3001-=\u3001*=\u548c/=\uff0c\u5177\u6709\u901a\u5e38\u7684\u542b\u4e49\u3002</p> <p>GLSL\u8fd8\u6709\u5927\u91cf\u7684\u9884\u5b9a\u4e49\u51fd\u6570\uff0c\u6211\u5728\u8fd9\u91cc\u65e0\u6cd5\u5168\u90e8\u8ba8\u8bba\u3002\u6211\u5c06\u5728\u8fd9\u91cc\u63d0\u5230\u7684\u6240\u6709\u51fd\u6570\u90fd\u9700\u8981\u6d6e\u70b9\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u5373\u4f7f\u8be5\u51fd\u6570\u5bf9\u6574\u6570\u503c\u4e5f\u6709\u610f\u4e49\u3002</p> <p>\u4e5f\u8bb8\u6700\u6709\u8da3\u7684\u662f\u5411\u91cf\u4ee3\u6570\u51fd\u6570\u3002\u89c1\u7b2c3.5\u8282\u4e86\u89e3\u8fd9\u4e9b\u8fd0\u7b97\u7684\u5b9a\u4e49\u3002\u8fd9\u4e9b\u51fd\u6570\u6709\u7b80\u5355\u7684\u516c\u5f0f\uff0c\u4f46\u5b83\u4eec\u4f5c\u4e3a\u51fd\u6570\u63d0\u4f9b\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5e76\u4e14\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u5728GPU\u4e2d\u6709\u9ad8\u6548\u7684\u786c\u4ef6\u5b9e\u73b0\u3002\u51fd\u6570dot(x,y)\u8ba1\u7b97\u4e24\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u5411\u91cf\u7684\u70b9\u79efx\u00b7y\u3002\u8fd4\u56de\u503c\u662ffloat\uff1bcross(x,y)\u8ba1\u7b97\u53c9\u79efx\u00d7y\uff0c\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u4e3avec3\uff1blength(x)\u662f\u5411\u91cfx\u7684\u957f\u5ea6\uff0cdistance(x,y)\u7ed9\u51fa\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1bnormalize(x)\u8fd4\u56de\u6307\u5411\u4e0ex\u76f8\u540c\u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\u3002\u8fd8\u6709\u540d\u4e3areflect\u548crefract\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u53cd\u5c04\u548c\u6298\u5c04\u5149\u7ebf\u7684\u65b9\u5411\uff1b\u6211\u5c06\u5728\u9700\u8981\u4f7f\u7528\u5b83\u4eec\u65f6\u4ecb\u7ecd\u3002</p> <p>\u51fd\u6570mix(x,y,t)\u8ba1\u7b97x(1\u2212t) + yt\u3002\u5982\u679ct\u662f\u4e00\u4e2a\u57280.0\u52301.0\u8303\u56f4\u5185\u7684float\uff0c\u90a3\u4e48\u8fd4\u56de\u503c\u662fx\u548cy\u7684\u7ebf\u6027\u6df7\u5408\u6216\u52a0\u6743\u5e73\u5747\u3002\u8fd9\u4e2a\u51fd\u6570\u53ef\u80fd\u7528\u4e8e\u4f8b\u5982\u4e24\u79cd\u989c\u8272\u7684alpha\u6df7\u5408\u3002\u51fd\u6570clamp(x,low,high)\u5c06x\u9650\u5236\u5728low\u5230high\u7684\u8303\u56f4\u5185\uff1b\u8fd4\u56de\u503c\u53ef\u4ee5\u8ba1\u7b97\u4e3amin(max(x,low),high)\u3002\u5982\u679crgb*\u662f\u4e00\u4e2a\u8868\u793a\u989c\u8272\u7684\u5411\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4</p> <pre><code>rgb = clamp( rgb, 0.0, 1.0 );\n</code></pre> <p>\u786e\u4fdd\u5411\u91cf\u7684\u6240\u6709\u5206\u91cf\u90fd\u57280\u52301\u7684\u8303\u56f4\u5185\u3002</p> <p>\u5982\u679cs\u548ct\u662ffloat\uff0c\u4e14s &lt; t\uff0c\u90a3\u4e48smoothstep(s,t,x)\u5728x\u5c0f\u4e8es\u65f6\u8fd4\u56de0.0\uff0c\u5728x\u5927\u4e8et\u65f6\u8fd4\u56de1.0\u3002\u5bf9\u4e8ex\u5728s\u548ct\u4e4b\u95f4\u7684\u503c\uff0c\u8fd4\u56de\u503c\u4ece0.0\u52301.0\u5e73\u6ed1\u63d2\u503c\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u53ef\u80fd\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7528\u4e8e\u6e32\u67d3\u542f\u7528\u900f\u660e\u5ea6\u7684gl.POINTS\u539f\u8bed\uff1a</p> <pre><code>float dist = distance( gl_PointCoord, vec2(0.5) );\nfloat alpha = 1.0 - smoothstep( 0.45, 0.5, dist );\nif (alpha == 0.0) {\n    discard; // \u4e22\u5f03\u5b8c\u5168\u900f\u660e\u7684\u50cf\u7d20\n}\ngl_FragColor = vec4( 1.0, 0.0, 0.0, alpha );\n</code></pre> <p>\u8fd9\u5c06\u628a\u70b9\u6e32\u67d3\u6210\u4e00\u4e2a\u7ea2\u8272\u7684\u5706\u76d8\uff0c\u989c\u8272\u4ece\u5706\u76d8\u8fb9\u7f18\u7684\u4e0d\u900f\u660e\u5230\u900f\u660e\u5e73\u6ed1\u8fc7\u6e21\uff0c\u968f\u7740dist\u4ece0.45\u589e\u52a0\u52300.5\u3002\u6ce8\u610f\uff0c\u5bf9\u4e8e\u51fd\u6570mix\u3001clamp\u548csmoothstep\uff0cx\u548cy\u53c2\u6570\u53ef\u4ee5\u662f\u5411\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662ffloat\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u5206\u522b\u5bf9\u5411\u91cf\u7684\u6bcf\u4e2a\u5206\u91cf\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>GLSL\u63d0\u4f9b\u4e86\u901a\u5e38\u7684\u6570\u5b66\u51fd\u6570\uff0c\u5305\u62ecsin\u3001cos\u3001tan\u3001asin\u3001acos\u3001atan\u3001log\u3001exp\u3001pow\u3001sqrt\u3001abs\u3001floor\u3001ceil\u3001min\u548cmax\u3002\uff08\u57283.00\u7248\u672c\u4e2d\uff0cabs\u3001min\u548cmax\u4e5f\u9002\u7528\u4e8e\u6574\u6570\u7c7b\u578b\u3002\uff09\u5bf9\u4e8e\u8fd9\u4e9b\u51fd\u6570\uff0c\u53c2\u6570\u53ef\u4ee5\u662f\u4efb\u4f55float\u3001vec2\u3001vec3\u6216vec4\u7c7b\u578b\u3002\u8fd4\u56de\u503c\u662f\u76f8\u540c\u7c7b\u578b\uff0c\u5e76\u4e14\u5206\u522b\u5bf9\u6bcf\u4e2a\u5206\u91cf\u5e94\u7528\u51fd\u6570\u3002\u4f8b\u5982\uff0csqrt(vec3(16.0,9.0,4.0))\u7684\u503c\u662f\u5411\u91cfvec3(4.0,3.0,2.0)\u3002\u5bf9\u4e8emin\u548cmax\uff0c\u8fd8\u6709\u4e00\u4e2a\u7b2c\u4e8c\u4e2a\u7248\u672c\u7684\u51fd\u6570\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5411\u91cf\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662ffloat\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u7248\u672c\uff0c\u5411\u91cf\u7684\u6bcf\u4e2a\u5206\u91cf\u90fd\u4e0efloat\u8fdb\u884c\u6bd4\u8f83\uff1b\u4f8b\u5982\uff0cmax(vec3(1.0,2.0,3.0),2.5)\u662fvec3(2.5,2.5,3.0)\u3002</p> <p>\u51fd\u6570mod(x,y)\u8ba1\u7b97\u4f59\u6570\uff0c\u5f53x\u9664\u4ee5y\u65f6\u3002\u8fd4\u56de\u503c\u8ba1\u7b97\u4e3ax \u2212 yfloor(x/y)\u3002\u4e0emin\u548cmax\u4e00\u6837\uff0cy\u53ef\u4ee5\u662f\u5411\u91cf\u6216float\u3002mod*\u51fd\u6570\u53ef\u4ee5\u7528\u4f5c%\u8fd0\u7b97\u7b26\u7684\u66ff\u4ee3\u54c1\uff0c\u540e\u8005\u5728GLSL ES 1.00\u4e2d\u4e0d\u53d7\u652f\u6301\u3002</p> <p>\u8fd8\u6709\u7528\u4e8e\u5904\u7406\u91c7\u6837\u5668\u53d8\u91cf\u7684\u51fd\u6570\u3002\u6211\u5c06\u5728\u4e0b\u4e00\u90e8\u5206\u4e2d\u8ba8\u8bba\u5176\u4e2d\u7684\u4e00\u4e9b\u3002</p> <p>Expressions in GLSL can use the arithmetic operators +, \u2212, *, /, ++ and \u2212\u2212 for integer and floating point values. In version 3.00, the remainder operator, %, as well as left and right shift and bitwise logical operators, are also available for integer types. There is no automatic type conversion in expressions. If x is of type float, the expression x+1 is illegal. You have to say x+1.0 or x+float(1).</p> <p>The arithmetic operators have been extended in various ways to work with vectors and matrices. If you use * to multiply a matrix and a vector, in either order, it multiplies them in the linear algebra sense, giving a vector as the result. The types of the operands must match in the obvious way; for example, a vec3 can only be multiplied by a mat3, and the result is a vec3. When used with two matrices of the same size, * does matrix multiplication.</p> <p>If +, \u2212, *, or \\/ is used on a vector and a scalar of the same basic type, then the operation is performed on each element of the vector. For example, vec2(3.0,3.0) / 2.0 is the vector vec2(1.5,1.5), and 2ivec3(1,2,3) is the vector ivec3(2,4,6)*. When one of these operators is applied to two vectors of the same type, the operation is applied to each pair of components, and the result is a vector. For example, the value of</p> <pre><code>vec3( 1.0, 2.0, 3.0 ) + vec3( 4.2, -7.0, 1.7 )\n</code></pre> <p>is the vector vec3(5.2,-5.0,4.7). Note in particular that the usual vector arithmetic operations\u2014addition and subtraction of vectors, multiplication of a vector by a scalar, and multiplication of a vector by a matrix\u2014are written in the natural way is GLSL.</p> <p>The relational operators &lt;, &gt;, &lt;=, and &gt;= can only be applied to integer and floating point scalars, and the types of the two operands must match exactly. However, the equality operators == and != have been extended to work on all of the built-in types except sampler types. Two vectors are equal only if the corresponding pairs of components are all equal. The same is true for matrices. The equality operators cannot be used with arrays, but they do work for structs, as long as the structs don't contain any arrays or samplers; again, every pair of members in two structs must be equal for the structs to be considered equal.</p> <p>GLSL has logical operators !, &amp;&amp;, ||, and ^^ (the last one being an exclusive or operation). The operands must be of type bool.</p> <p>Finally, there are the assignment operators =, +=, \u2212=, *=, and /=, with the usual meanings.</p> <p>GLSL also has a large number of predefined functions, more than I can discuss here. All of the functions that I will mention here require floating-point values as parameters, even if the function would also make sense for integer values.</p> <p>Most interesting, perhaps, are functions for vector algebra. See Section 3.5 for the definitions of these operations. These functions have simple formulas, but they are provided as functions for convenience and because they might have efficient hardware implementations in a GPU. The function dot(x,y) computes the dot product x\u00b7y of two vectors of the same length. The return value is a float; cross(x,y) computes the cross product x\u00d7y, where the parameters and return value are of type vec3; length(x) is the length of the vector x and distance(x,y) gives the distance between two vectors; normalize(x) returns a unit vector that points in the same direction as x. There are also functions named reflect and refract that can be used to compute the direction of reflected and refracted light rays; I will cover them when I need to use them.</p> <p>The function mix(x,y,t) computes x*(1\u2212t) + y*t. If t is a float in the range 0.0 to 1.0, then the return value is a linear mixture, or weighted average, of x and y. This function might be used, for example, to do alpha-blending of two colors. The function clamp(x,low,high) clamps x to the range low to high; the return value could be computed as min(max(x,low),high). If rgb is a vector representing a color, we could ensure that all of the components of the vector lie in the range 0 to 1 with the command</p> <pre><code>rgb = clamp( rgb, 0.0, 1.0 );\n</code></pre> <p>If s and t are floats, with s &lt; t, then smoothstep(s,t,x) returns 0.0 for x less than s and returns 1.0 for x greater than t. For values of x between s and t, the return value is smoothly interpolated from 0.0 to 1.0. Here is an example that might be used in a fragment shader for rendering a gl.POINTS primitive, with transparency enabled:</p> <pre><code>float dist = distance( gl_PointCoord, vec2(0.5) );\nfloat alpha = 1.0 - smoothstep( 0.45, 0.5, dist );\nif (alpha == 0.0) {\n    discard; // discard fully transparent pixels\n}\ngl_FragColor = vec4( 1.0, 0.0, 0.0, alpha );\n</code></pre> <p>This would render the point as a red disk, with the color fading smoothly from opaque to transparent around the edge of the disk, as dist increases from 0.45 to 0.5. Note that for the functions mix, clamp, and smoothstep, the x and y parameters can be vectors as well as floats. In that case, they operate on each component of the vector individually.</p> <p>The usual mathematical functions are available in GLSL, including sin, cos, tan, asin, acos, atan, log, exp, pow, sqrt, abs, floor, ceil, min, and max. (In version 3.00, abs, min, and max also apply to integer types.) For these functions, the parameters can be any of the types float, vec2, vec3, or vec4. The return value is of the same type, and the function is applied to each component separately. For example, the value of sqrt(vec3(16.0,9.0,4.0)) is the vector vec3(4.0,3.0,2.0). For min and max, there is also a second version of the function in which the first parameter is a vector and the second parameter is a float. For those versions, each component of the vector is compared to the float; for example, max(vec3(1.0,2.0,3.0),2.5) is vec3(2.5,2.5,3.0).</p> <p>The function mod(x,y) computes the modulus, or remainder, when x is divided by y. The return value is computed as x \u2212 yfloor(x/y). As with min and max, y can be either a vector or a float. The mod* function can be used as a substitute for the % operator, which is not supported in GLSL ES 1.00.</p> <p>There are also functions for working with sampler variables. I will discuss some of them in the next section.</p>"},{"location":"cn/c6/s3/#635-\u51fd\u6570\u5b9a\u4e49","title":"6.3.5 \u51fd\u6570\u5b9a\u4e49","text":"<p>Function Definitions</p> \u4e2d\u6587\u82f1\u6587 <p>GLSL\u7a0b\u5e8f\u53ef\u4ee5\u5b9a\u4e49\u65b0\u51fd\u6570\uff0c\u8bed\u6cd5\u4e0eC\u8bed\u8a00\u7c7b\u4f3c\u3002\u4e0eC\u8bed\u8a00\u4e0d\u540c\uff0c\u51fd\u6570\u540d\u79f0\u53ef\u4ee5\u91cd\u8f7d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u540d\u79f0\uff0c\u53ea\u8981\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u53c2\u6570\u6570\u91cf\u6216\u7c7b\u578b\u3002\u5728\u4f7f\u7528\u51fd\u6570\u4e4b\u524d\u5fc5\u987b\u5148\u58f0\u660e\u5b83\u3002\u50cf\u5728C\u8bed\u8a00\u4e2d\u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u5b8c\u6574\u7684\u5b9a\u4e49\u6216\u51fd\u6570\u539f\u578b\u6765\u58f0\u660e\u5b83\u3002</p> <p>\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u3002\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u662f\u9664\u6570\u7ec4\u7c7b\u578b\u4e4b\u5916\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u7ed3\u6784\u4f53\u7c7b\u578b\u53ef\u4ee5\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\uff0c\u53ea\u8981\u7ed3\u6784\u4f53\u4e2d\u4e0d\u5305\u542b\u4efb\u4f55\u6570\u7ec4\u3002\u5f53\u6570\u7ec4\u4f5c\u4e3a\u5f62\u5f0f\u53c2\u6570\u4f7f\u7528\u65f6\uff0c\u5fc5\u987b\u901a\u8fc7\u6574\u578b\u5e38\u91cf\u6307\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u4f8b\u5982\uff1a</p> <pre><code>float arraySum10( float A[10] ) {\n    float sum = 0.0;\n    for ( int i = 0; i &lt; 10; i++ ) {\n        sum += A[i];\n    }\n    return sum;\n}\n</code></pre> <p>\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7\u9650\u5b9a\u7b26in\u3001out\u6216inout\u8fdb\u884c\u4fee\u6539\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u9650\u5b9a\u7b26\uff0c\u9ed8\u8ba4\u4e3ain\u3002\u9650\u5b9a\u7b26\u8868\u793a\u53c2\u6570\u662f\u7528\u4e8e\u51fd\u6570\u7684\u8f93\u5165\u3001\u51fd\u6570\u7684\u8f93\u51fa\uff0c\u8fd8\u662f\u4e24\u8005\u517c\u6709\u3002\u5bf9\u4e8e\u8f93\u5165\u53c2\u6570\uff0c\u51fd\u6570\u8c03\u7528\u4e2d\u5b9e\u9645\u53c2\u6570\u7684\u503c\u4f1a\u590d\u5236\u5230\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u5f62\u5f0f\u53c2\u6570\uff0c\u5e76\u4e14\u5f62\u5f0f\u53c2\u6570\u548c\u5b9e\u9645\u53c2\u6570\u4e4b\u95f4\u6ca1\u6709\u8fdb\u4e00\u6b65\u7684\u4ea4\u4e92\u3002\u5bf9\u4e8e\u8f93\u51fa\u53c2\u6570\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u5f62\u5f0f\u53c2\u6570\u7684\u503c\u4f1a\u590d\u5236\u5230\u5b9e\u9645\u53c2\u6570\u3002\u5bf9\u4e8einout\u53c2\u6570\uff0c\u503c\u4f1a\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u590d\u5236\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u53c2\u6570\u4f20\u9012\u88ab\u79f0\u4e3a\u201c\u6309\u503c/\u8fd4\u56de\u8c03\u7528\u201d\u3002\u6ce8\u610f\uff0c\u5bf9\u4e8e\u8f93\u51fa\u6216inout\u53c2\u6570\uff0c\u5b9e\u9645\u53c2\u6570\u5fc5\u987b\u662f\u53ef\u4ee5\u8d4b\u503c\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u53d8\u91cf\u6216swizzler\uff08C\u3001Java\u548cJavaScript\u4e2d\u7684\u6240\u6709\u53c2\u6570\u90fd\u662f\u8f93\u5165\u53c2\u6570\uff0c\u4f46\u5c06\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u53ef\u4ee5\u5177\u6709\u7c7b\u4f3c\u4e8einout\u53c2\u6570\u7684\u6548\u679c\u3002\u5f53\u7136\uff0cGLSL\u6ca1\u6709\u6307\u9488\uff09\u3002\u4f8b\u5982\uff1a</p> <pre><code>void cumulativeSum( in float A[10], out float B[10]) {\n    B[0] = A[0];\n    for ( int i = 1; i &lt; 10; i++ ) {\n        B[i] = B[i-1] + A[i];\n    }\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0cGLSL\u4e2d\u7684\u51fd\u6570\u4e0d\u652f\u6301\u9012\u5f52\u3002</p> <p>A GLSL program can define new functions, with a syntax similar to C. Unlike C, function names can be overloaded; that is, two functions can have the same name, as long as they have different numbers or types of parameters. A function must be declared before it is used. As in C, it can be declared by giving either a full definition or a function prototype.</p> <p>Function parameters can be of any type. The return type for a function can be any type except for array types. A struct type can be a return type, as long as the structure does not include any arrays. When an array is used a formal parameter, the length of the array must be specified by an integer constant. For example,</p> <pre><code>float arraySum10( float A[10] ) {\nfloat sum = 0.0;\nfor ( int i = 0; i &lt; 10; i++ ) {\n    sum += A[i];\n}\nreturn sum;\n}\n</code></pre> <p>Function parameters can be modified by the qualifiers in, out, or inout. The default, if no qualifier is specified, is in. The qualifier indicates whether the parameter is used for input to the function, output from the function, or both. For input parameters, the value of the actual parameter in the function call is copied into the formal parameter in the function definition, and there is no further interaction between the formal and actual parameters. For output parameters, the value of the formal parameter is copied to the actual parameter when the function returns. For an inout parameter, the value is copied in both directions. This type of parameter passing is referred to as \"call by value/return.\" Note that the actual parameter for an out or inout parameter must be something to which a value can be assigned, such as a variable or swizzler. (All parameters in C, Java, and JavaScript are input parameters, but passing a pointer as a parameter can have an effect similar to an inout parameter. GLSL, of course, has no pointers.) For example,</p> <pre><code>void cumulativeSum( in float A[10], out float B[10]) {\n    B[0] = A[0];\n    for ( int i = 1; i &lt; 10; i++ ) {\n        B[i] = B[i-1] + A[i];\n    }\n}\n</code></pre> <p>Note that recursion is not supported for functions in GLSL.</p>"},{"location":"cn/c6/s3/#636-\u63a7\u5236\u7ed3\u6784","title":"6.3.6 \u63a7\u5236\u7ed3\u6784","text":"<p>Control Structures</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728WebGL\u7684GLSL ES 1.00\u4e2d\uff0c\u552f\u4e00\u7684\u63a7\u5236\u7ed3\u6784\u662fif\u8bed\u53e5\u548c\u975e\u5e38\u53d7\u9650\u5f62\u5f0f\u7684for\u5faa\u73af\u3002\u6ca1\u6709while\u6216do..while\u5faa\u73af\uff0c\u4e5f\u6ca1\u6709switch\u8bed\u53e5\u3002\u7136\u800c\uff0cGLSL ES 3.00\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u3002</p> <p>if\u8bed\u53e5\u652f\u6301C\u8bed\u8a00\u7684\u5b8c\u6574\u8bed\u6cd5\uff0c\u5305\u62ecelse\u548celse if\u3002\u57283.00\u7248\u672c\u4e2d\uff0c\u6240\u6709\u63a7\u5236\u7ed3\u6784\u7684\u8bed\u6cd5\u4e0eC\u8bed\u8a00\u51e0\u4e4e\u76f8\u540c\u3002</p> <p>\u57281.00\u7248\u672c\u7740\u8272\u5668\u4e2d\u7684for\u5faa\u73af\uff0c\u5faa\u73af\u63a7\u5236\u53d8\u91cf\u5fc5\u987b\u5728\u5faa\u73af\u4e2d\u58f0\u660e\uff0c\u5e76\u4e14\u5fc5\u987b\u662fint\u6216float\u7c7b\u578b\u3002\u5faa\u73af\u63a7\u5236\u53d8\u91cf\u7684\u521d\u59cb\u503c\u5fc5\u987b\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff08\u5373\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u8fd0\u7b97\u7b26\uff0c\u4f46\u6240\u6709\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u5b57\u9762\u91cf\u5e38\u91cf\u6216const\u53d8\u91cf\uff09\u3002\u5faa\u73af\u5185\u7684\u4ee3\u7801\u4e0d\u5141\u8bb8\u66f4\u6539\u5faa\u73af\u63a7\u5236\u53d8\u91cf\u7684\u503c\u3002\u7ed3\u675f\u5faa\u73af\u7684\u6d4b\u8bd5\u53ea\u80fd\u6709\u5f62\u5f0fvar op expression\uff0c\u5176\u4e2dvar\u662f\u5faa\u73af\u63a7\u5236\u53d8\u91cf\uff0cop\u662f\u5173\u7cfb\u6216\u7b49\u5f0f\u8fd0\u7b97\u7b26\u4e4b\u4e00\uff0cexpression\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002\u6700\u540e\uff0c\u66f4\u65b0\u8868\u8fbe\u5f0f\u5fc5\u987b\u5177\u6709var++\u3001var--\u3001var+=expression\u6216var-=expression\u7684\u5f62\u5f0f\uff0c\u5176\u4e2dvar\u662f\u5faa\u73af\u63a7\u5236\u53d8\u91cf\uff0cexpression\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002\u5f53\u7136\uff0c\u8fd9\u662f\u5176\u4ed6\u8bed\u8a00\u4e2dfor\u5faa\u73af\u6700\u5178\u578b\u7684\u5f62\u5f0f\u3002\u4e00\u4e9b\u5408\u6cd5\u7684for\u5faa\u73af\u7684\u9996\u884c\u793a\u4f8b\uff1a</p> <pre><code>for (int i = 0; i &lt; 10; i++)\n\nfor (float x = 1.0; x &lt; 2.0; x += 0.1)\n\nfor (int k = 10; k != 0; k -= 1)\n</code></pre> <p>\u57283.00\u7248\u672c\u4e2d\uff0c\u8fd9\u4e9b\u9650\u5236\u4e0d\u9002\u7528\u3002\u8bf7\u6ce8\u610f\uff0c\u6240\u6709\u5faa\u73af\u90fd\u53ef\u4ee5\u5305\u542bbreak\u548ccontinue\u8bed\u53e5\u3002</p> <p>The only control structures in GLSL ES 1.00 for WebGL are the if statement and a very restricted form of the for loop. There is no while or do..while loop, and there is no switch statement. However, all of these are supported in GLSL ES 3.00.</p> <p>If statements are supported with the full syntax from C, including else and else if. In version 3.00, the syntax for all control structures is pretty much the same as in C.</p> <p>In a for loop in a version 1.00 shader, the loop control variable must be declared in the loop, and it must be of type int or float. The initial value for the loop control variable must be a constant expression (that is, it can include operators, but all the operands must be literal constants or const variables) The code inside the loop is not allowed to change the value of the loop control variable. The test for ending the loop can only have the form var op expression, where var is the loop control variable, the op is one of the relational or equality operators, and the expression is a constant expression. Finally, the update expression must have one of the forms var++, var--, var+=expression, or var-=expression, where var is the loop control variable, and expression is a constant expression. Of course, this is the most typical form for for loops in other languages. Some examples of legal first lines for for loops:</p> <pre><code>for (int i = 0; i &lt; 10; i++)\n\nfor (float x = 1.0; x &lt; 2.0; x += 0.1)\n\nfor (int k = 10; k != 0; k -= 1)\n</code></pre> <p>In version 3.00, these restrictions do not apply. Note that all loops can include break and continue statements.</p>"},{"location":"cn/c6/s3/#637-\u9650\u5236","title":"6.3.7 \u9650\u5236","text":"<p>Limits</p> \u4e2d\u6587\u82f1\u6587 <p>WebGL\u5bf9WebGL\u53ca\u5176GLSL\u7a0b\u5e8f\u4f7f\u7528\u7684\u67d0\u4e9b\u8d44\u6e90\u8bbe\u7f6e\u4e86\u9650\u5236\uff0c\u4f8b\u5982\u5c5e\u6027\u53d8\u91cf\u7684\u6570\u91cf\u6216\u7eb9\u7406\u56fe\u50cf\u7684\u5927\u5c0f\u3002\u8fd9\u4e9b\u9650\u5236\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u662f\u7531\u4e8eGPU\u7684\u786c\u4ef6\u9650\u5236\uff0c\u5b83\u4eec\u53d6\u51b3\u4e8e\u7a0b\u5e8f\u8fd0\u884c\u7684\u8bbe\u5907\u4ee5\u53ca\u8be5\u8bbe\u5907\u4e0aWebGL\u7684\u5b9e\u73b0\u3002\u79fb\u52a8\u8bbe\u5907\uff08\u5982\u5e73\u677f\u7535\u8111\u548c\u624b\u673a\uff09\u7684\u786c\u4ef6\u9650\u5236\u53ef\u80fd\u8f83\u4f4e\uff0c\u4f46\u73b0\u4ee3\u5e73\u677f\u7535\u8111\u548c\u624b\u673a\u62e5\u6709\u76f8\u5f53\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684GPU\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u9650\u5236\u53ef\u80fd\u6709\u6240\u4e0d\u540c\uff0c\u4f46WebGL\u89c4\u5b9a\u4e86\u6240\u6709\u5b9e\u73b0\u90fd\u5fc5\u987b\u6ee1\u8db3\u7684\u4e00\u7ec4\u6700\u4f4e\u8981\u6c42\u3002\u6211\u5c06\u7ed9\u51faWebGL 1.0\u7684\u6700\u4f4e\u503c\u3002WebGL 2.0\u7684\u6700\u4f4e\u503c\u66f4\u9ad8\u3002</p> <p>\u4f8b\u5982\uff0c\u4efb\u4f55WebGL\u5b9e\u73b0\u90fd\u5fc5\u987b\u5141\u8bb8\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u81f3\u5c11\u67098\u4e2a\u5c5e\u6027\u3002\u7279\u5b9a\u5b9e\u73b0\u7684\u5b9e\u9645\u9650\u5236\u53ef\u80fd\u66f4\u591a\uff0c\u4f46\u4e0d\u80fd\u66f4\u5c11\u3002\u5b9e\u9645\u9650\u5236\u5728GLSL\u7a0b\u5e8f\u4e2d\u4f5c\u4e3a\u9884\u5b9a\u4e49\u5e38\u91cfgl_MaxVertexAttribs\u7684\u503c\u63d0\u4f9b\u3002\u66f4\u65b9\u4fbf\u7684\u662f\uff0c\u5728JavaScript\u65b9\u9762\uff0c\u5b83\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u503c\u63d0\u4f9b</p> <pre><code>gl.getParameter( gl.MAX_VERTEX_ATTRIBS )\n</code></pre> <p>\u7c7b\u578b\u4e3afloat\u3001vec2\u3001vec3\u548cvec4\u7684\u5c5e\u6027\u53d8\u91cf\u90fd\u8ba1\u4e3a\u5bf9\u9650\u5236\u7684\u4e00\u4e2a\u5c5e\u6027\u3002\u5bf9\u4e8e\u77e9\u9635\u503c\u5c5e\u6027\uff0c\u6bcf\u4e2a\u5217\u5728\u9650\u5236\u65b9\u9762\u90fd\u8ba1\u4e3a\u5355\u72ec\u7684\u5c5e\u6027\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u53d8\u5316\u53d8\u91cf\u6709\u9650\u5236\uff0c\u5e76\u4e14\u5728\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u5bf9\u7edf\u4e00\u53d8\u91cf\u6709\u5355\u72ec\u7684\u9650\u5236\u3002\uff08\u9650\u5236\u662f\u9488\u5bf9\u56db\u4e2a\u5206\u91cf\u7684\u201c\u5411\u91cf\u201d\u7684\u6570\u91cf\u3002\u53ef\u4ee5\u5c06\u5355\u72ec\u7684\u53d8\u91cf\u6253\u5305\u5230\u4e00\u4e2a\u5411\u91cf\u4e2d\uff0c\u4f46\u4f7f\u7528\u7684\u6253\u5305\u4e0d\u5fc5\u662f\u6700\u4f18\u7684\u3002\u5c5e\u6027\u53d8\u91cf\u4e0d\u6267\u884c\u6253\u5305\u3002\uff09\u9650\u5236\u5fc5\u987b\u6ee1\u8db3</p> <pre><code>gl_MaxVertexAttribs &gt;= 8;\ngl_MaxVertexUniformVectors &gt;= 128;\ngl_MaxFragmentUniformVectors &gt;= 16;\ngl_MaxVaryingVectors &gt;= 8;\n</code></pre> <p>GLSL\u4e2d\u8fd8\u6709\u7eb9\u7406\u5355\u5143\u7684\u6570\u91cf\u9650\u5236\uff0c\u8fd9\u57fa\u672c\u4e0a\u610f\u5473\u7740\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u7684\u7eb9\u7406\u6570\u91cf\u3002\u8fd9\u4e9b\u9650\u5236\u5fc5\u987b\u6ee1\u8db3</p> <pre><code>gl_MaxTextureImageUnits &gt;= 8;         // \u7247\u6bb5\u7740\u8272\u5668\u7684\u9650\u5236\ngl_MaxVertexTextureImageUnits &gt;= 0;   // \u9876\u70b9\u7740\u8272\u5668\u7684\u9650\u5236\ngl_MaxCombinedTextureImageUnits &gt;= 8; // \u4e24\u4e2a\u7740\u8272\u5668\u7684\u603b\u9650\u5236\n</code></pre> <p>\u7eb9\u7406\u901a\u5e38\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4f7f\u7528\uff0c\u4f46\u6709\u65f6\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4e5f\u53ef\u80fd\u6709\u7528\u3002\u4f46\u8bf7\u6ce8\u610f\uff0cgl_MaxVertexTextureImageUnits\u53ef\u4ee5\u662f\u96f6\uff0c\u8fd9\u610f\u5473\u7740\u5b9e\u73b0\u4e0d\u9700\u8981\u5141\u8bb8\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u7eb9\u7406\u5355\u5143\u3002\uff08\u8fd9\u79cd\u53ef\u80fd\u6027\u4ec5\u9002\u7528\u4e8eWebGL 1.0\u3002\uff09</p> <p>\u8fd8\u6709\u5176\u4ed6\u4e8b\u60c5\u7684\u9650\u5236\uff0c\u5305\u62ec\u89c6\u53e3\u5927\u5c0f\u3001\u7eb9\u7406\u56fe\u50cf\u5927\u5c0f\u3001\u7ebf\u539f\u8bed\u7684\u7ebf\u5bbd\u548cPOINTS\u539f\u8bed\u7684\u70b9\u5927\u5c0f\u3002\u6240\u6709\u9650\u5236\u90fd\u53ef\u4ee5\u4f7f\u7528gl.getParameter()\u4eceJavaScript\u65b9\u9762\u67e5\u8be2\u3002</p> <p>\u4ee5\u4e0b\u6f14\u793a\u663e\u793a\u4e86\u60a8\u6b63\u5728\u67e5\u770b\u6b64\u9875\u9762\u7684\u8bbe\u5907\u4e0a\u8d44\u6e90\u9650\u5236\u7684\u5b9e\u9645\u503c\u3002\u6f14\u793a\u663e\u793a\u4e86WebGL 1.0\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684\u9650\u5236\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u68c0\u67e5\u60a8\u5e0c\u671b\u60a8\u7684WebGL\u7a0b\u5e8f\u8fd0\u884c\u7684\u5404\u79cd\u8bbe\u5907\u7684\u529f\u80fd\u3002\u901a\u5e38\uff0c\u5b9e\u9645\u9650\u5236\u5c06\u660e\u663e\u5927\u4e8e\u6240\u9700\u7684\u6700\u5c0f\u503c\u503c\u3002</p> <p></p> <p>WebGL puts limits on certain resources that are used by WebGL and its GLSL programs, such as the number of attribute variables or the size of a texture image. The limits are due in many cases to hardware limits in the GPU, and they depend on the device on which the program is running, and on the implementation of WebGL on that device. The hardware limits can be lower on mobile devices such as tablets and phones, but modern tablets and phones have pretty impressive GPUs. Although the limits can vary, WebGL imposes a set of minimum requirements that all implementations must satisfy. I will give the minimums for WebGL 1.0. The minimums for WebGL 2.0 are greater.</p> <p>For example, any WebGL implementation must allow at least 8 attributes in a vertex shader. The actual limit for a particular implementation might be more, but cannot be less. The actual limit is available in a GLSL program as the value of a predefined constant, gl_MaxVertexAttribs. More conveniently, it is available on the JavaScript side as the value of the expression</p> <pre><code>gl.getParameter( gl.MAX_VERTEX_ATTRIBS )\n</code></pre> <p>Attribute variables of type float, vec2, vec3, and vec4 all count as one attribute against the limit. For a matrix-valued attribute, each column counts as a separate attribute as far as the limit goes.</p> <p>Similarly, there are limits on varying variables, and there are separate limits on uniform variables in the vertex and fragment shaders. (The limits are on the number of four-component \"vectors.\" There can be some packing of separate variables into a single vector, but the packing that is used does not have to be optimal. No packing is done for attribute variables.) The limits must satisfy</p> <pre><code>gl_MaxVertexAttribs &gt;= 8;\ngl_MaxVertexUniformVectors &gt;= 128;\ngl_MaxFragmentUniformVectors &gt;= 16;\ngl_MaxVaryingVectors &gt;= 8;\n</code></pre> <p>There are also limits in GLSL on the number of texture units, which means essentially the number of textures that can be used simultaneously. These limits must satisfy</p> <pre><code>gl_MaxTextureImageUnits &gt;= 8;         // limit for fragment shader\ngl_MaxVertexTextureImageUnits &gt;= 0;   // limit for vertex shader\ngl_MaxCombinedTextureImageUnits &gt;= 8; // total limit for both shaders\n</code></pre> <p>Textures are usually used in fragment shaders, but they can sometimes be useful in vertex shaders. Note however, that gl_MaxVertexTextureImageUnits can be zero, which means that implementations are not required to allow texture units to be used in vertex shaders. (This possibility is for WebGL 1.0 only.)</p> <p>There are also limits on other things, including viewport size, texture image size, line width for line primitives, and point size for the POINTS primitive. All of the limits can be queried from the JavaScript side using gl.getParameter().</p> <p>The following demo shows the actual values of the resource limits on the device on which you are viewing this page. The demo shows the limits for a WebGL 1.0 graphics context. You can use it to check the capabilities of various devices on which you want your WebGL programs to run. In general, the actual limits will be significantly larger than the required minimum values.</p> <p></p>"},{"location":"cn/c6/s4/","title":"6.4 \u56fe\u50cf\u7eb9\u7406","text":"<p>Image Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u7eb9\u7406\u57283D\u56fe\u5f62\u4e2d\u626e\u6f14\u7740\u91cd\u8981\u7684\u89d2\u8272\uff0c\u73b0\u4ee3GPU\u5728\u786c\u4ef6\u5c42\u9762\u4e0a\u5185\u7f6e\u4e86\u5bf9\u56fe\u50cf\u7eb9\u7406\u7684\u652f\u6301\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8WebGL API\u4e2d\u7528\u4e8e\u56fe\u50cf\u7eb9\u7406\u7684\u529f\u80fd\u3002OpenGL 1.1\u4e2d\u7684\u56fe\u50cf\u7eb9\u7406\u5728\u7b2c4.3\u8282\u4e2d\u6709\u6240\u4ecb\u7ecd\u3002\u90a3\u4e00\u8282\u7684\u8bb8\u591a\u5185\u5bb9\u5728\u73b0\u4ee3OpenGL\u4e2d\uff0c\u5305\u62ecWebGL\u4e2d\u4ecd\u7136\u76f8\u5173\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u5728WebGL\u4e2d\u4ecb\u7ecd\u56fe\u50cf\u7eb9\u7406\u65f6\uff0c\u5927\u90e8\u5206\u5185\u5bb9\u5bf9\u60a8\u6765\u8bf4\u5e76\u4e0d\u65b0\u9c9c\u3002\u7136\u800c\uff0c\u81eaOpenGL 1.1\u4ee5\u6765\uff0c\u6709\u4e00\u4e2a\u65b0\u7279\u6027\uff1a\u7eb9\u7406\u5355\u5143\u3002</p> <p>WebGL 1.0\u548cWebGL 2.0\u4e4b\u95f4\u7684\u4e00\u4e2a\u663e\u8457\u533a\u522b\u662f\u589e\u52a0\u4e86\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u7eb9\u7406\u4ee5\u53ca\u4e0d\u540c\u4f7f\u7528\u65b9\u5f0f\u7684\u7eb9\u7406\u7684\u652f\u6301\u3002\u8bbf\u95ee\u5927\u591a\u6570\u65b0\u7279\u6027\u9700\u8981\u4f7f\u7528GLSL ES 3.00\u7f16\u5199\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u6211\u4eec\u5c06\u5728\u672c\u8282\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\u575a\u6301\u4f7f\u7528WebGL 1.0\uff0c\u4f46\u5c06\u5728\u6700\u540e\u4e00\u5c0f\u8282\u4e2d\u8ba8\u8bba\u4e00\u4e9b\u65b0\u7684WebGL 2.0\u7279\u6027\u3002</p> <p>Textures play an essential role in 3D graphics, and support for image textures is built into modern GPUs on the hardware level. In this section, we look at the WebGL API for image textures. Image textures in OpenGL 1.1 were covered in Section 4.3. Much of that section is still relevant in modern OpenGL, including WebGL. So, as we cover image textures in WebGL, much of the material will not be new to you. However, there is one feature that is new since OpenGL 1.1: texture units.</p> <p>One of the significant differences between WebGL 1.0 and WebGL 2.0 is an increase in support for different types of textures and for different ways of using textures. Access to most of the new features requires using GLSL ES 3.00 for the shader programs. We will stick to WebGL 1.0 for most of this section, but will discuss some of the new WebGL 2.0 features in the final subsection.</p>"},{"location":"cn/c6/s4/#641-\u7eb9\u7406\u5355\u5143\u548c\u7eb9\u7406\u5bf9\u8c61","title":"6.4.1 \u7eb9\u7406\u5355\u5143\u548c\u7eb9\u7406\u5bf9\u8c61","text":"<p>Texture Units and Texture Objects</p> \u4e2d\u6587\u82f1\u6587 <p>\u7eb9\u7406\u5355\u5143\uff0c\u4e5f\u79f0\u4e3a\u7eb9\u7406\u6620\u5c04\u5355\u5143\uff08TMU\uff09\u6216\u7eb9\u7406\u5904\u7406\u5355\u5143\uff08TPU\uff09\uff0c\u662fGPU\u4e2d\u7684\u4e00\u4e2a\u786c\u4ef6\u7ec4\u4ef6\uff0c\u7528\u4e8e\u8fdb\u884c\u91c7\u6837\u3002\u91c7\u6837\u662f\u4ece\u56fe\u50cf\u7eb9\u7406\u548c\u7eb9\u7406\u5750\u6807\u4e2d\u8ba1\u7b97\u989c\u8272\u7684\u8fc7\u7a0b\u3002\u5c06\u7eb9\u7406\u56fe\u50cf\u6620\u5c04\u5230\u8868\u9762\u4e0a\u662f\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u9700\u8981\u8fd4\u56de\u5305\u542b\u67d0\u4e9b\u7ed9\u5b9a\u7eb9\u7406\u5750\u6807\u7684\u7eb9\u7406\u5143\u7d20\uff08texel\uff09\u7684\u989c\u8272\u3002\u5b83\u8fd8\u9700\u8981\u5e94\u7528\u9002\u5f53\u7684\u7f29\u653e\u6216\u653e\u5927\u6ee4\u6ce2\u5668\uff0c\u5982\u679c\u53ef\u7528\uff0c\u53ef\u80fd\u8fd8\u4f1a\u4f7f\u7528mipmap\u3002\u5feb\u901f\u7684\u7eb9\u7406\u91c7\u6837\u662fGPU\u826f\u597d\u6027\u80fd\u7684\u5173\u952e\u8981\u6c42\u4e4b\u4e00\u3002</p> <p>\u4e0d\u5e94\u5c06\u7eb9\u7406\u5355\u5143\u4e0e\u7eb9\u7406\u5bf9\u8c61\u6df7\u6dc6\u3002\u6211\u4eec\u57284.3.7\u5c0f\u8282\u4e2d\u9047\u5230\u4e86\u7eb9\u7406\u5bf9\u8c61\u3002\u7eb9\u7406\u5bf9\u8c61\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5305\u542b\u56fe\u50cf\u7eb9\u7406\u7684\u989c\u8272\u6570\u636e\uff0c\u53ef\u80fd\u8fd8\u5305\u62ec\u7eb9\u7406\u7684\u4e00\u7ec4mipmap\uff0c\u4ee5\u53ca\u7eb9\u7406\u5c5e\u6027\u7684\u503c\uff0c\u5982\u7f29\u653e\u548c\u653e\u5927\u6ee4\u6ce2\u5668\u548c\u7eb9\u7406\u91cd\u590d\u6a21\u5f0f\u3002\u7eb9\u7406\u5355\u5143\u5fc5\u987b\u8bbf\u95ee\u7eb9\u7406\u5bf9\u8c61\u4ee5\u5b8c\u6210\u5176\u5de5\u4f5c\u3002\u7eb9\u7406\u5355\u5143\u662f\u5904\u7406\u5668\uff1b\u7eb9\u7406\u5bf9\u8c61\u4fdd\u5b58\u88ab\u5904\u7406\u7684\u6570\u636e\u3002</p> <p>\uff08\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u6211\u786e\u5b9e\u5e94\u8be5\u66f4\u52a0\u5c0f\u5fc3\u5730\u4f7f\u7528\u201cGPU\u201d\u548c\u201c\u786c\u4ef6\u201d\u8fd9\u4e9b\u672f\u8bed\u3002\u5c3d\u7ba1\u7eb9\u7406\u5355\u5143\u53ef\u80fd\u786e\u5b9e\u4f7f\u7528\u4e86GPU\u4e2d\u7684\u5b9e\u9645\u786c\u4ef6\u7ec4\u4ef6\uff0c\u4f46\u5b83\u4e5f\u53ef\u80fd\u5728\u8f6f\u4ef6\u4e2d\u88ab\u66f4\u6162\u5730\u6a21\u62df\u3002\u5373\u4f7f\u6d89\u53ca\u786c\u4ef6\uff0c\u62e5\u6709\u516b\u4e2a\u7eb9\u7406\u5355\u5143\u4e5f\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u6709\u516b\u4e2a\u786c\u4ef6\u7ec4\u4ef6\uff1b\u7eb9\u7406\u5355\u5143\u53ef\u80fd\u5728\u8f83\u5c11\u6570\u91cf\u7684\u786c\u4ef6\u7ec4\u4ef6\u4e0a\u5171\u4eab\u65f6\u95f4\u3002\u540c\u6837\uff0c\u6211\u4e4b\u524d\u8bf4\u8fc7\u7eb9\u7406\u5bf9\u8c61\u5b58\u50a8\u5728GPU\u7684\u5185\u5b58\u4e2d\uff0c\u8fd9\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u53ef\u80fd\u6216\u53ef\u80fd\u4e0d\u662f\u5b57\u9762\u610f\u4e49\u4e0a\u7684\u771f\u5b9e\u3002\u7136\u800c\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u5c06\u7eb9\u7406\u5355\u5143\u89c6\u4e3aGPU\u4e2d\u7684\u4e00\u5757\u786c\u4ef6\uff0c\u5c06\u7eb9\u7406\u5bf9\u8c61\u89c6\u4e3aGPU\u4e2d\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u6982\u5ff5\u4e0a\u66f4\u5bb9\u6613\u7406\u89e3\u3002\uff09\u6700\u540e\u4e00\u5c0f\u8282\u3002</p> <p>\u5728GLSL\u4e2d\uff0c\u7eb9\u7406\u67e5\u627e\u662f\u4f7f\u7528\u91c7\u6837\u5668\u53d8\u91cf\u5b8c\u6210\u7684\u3002\u91c7\u6837\u5668\u53d8\u91cf\u662f\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u53d8\u91cf\u3002\u5728GLSL ES 1.00\u4e2d\uff0c\u552f\u4e00\u7684\u91c7\u6837\u5668\u7c7b\u578b\u662fsampler2D\u548csamplerCube\u3002sampler2D\u7528\u4e8e\u5728\u6807\u51c6\u7eb9\u7406\u56fe\u50cf\u4e2d\u8fdb\u884c\u67e5\u627e\uff1bsamplerCube\u7528\u4e8e\u5728\u7acb\u65b9\u4f53\u8d34\u56fe\u4e2d\u8fdb\u884c\u67e5\u627e(5.3.4\u5c0f\u8282)\u3002\u91c7\u6837\u5668\u53d8\u91cf\u7684\u503c\u662f\u5bf9\u7eb9\u7406\u5355\u5143\u7684\u5f15\u7528\u3002\u8be5\u503c\u6307\u660e\u4e86\u5728\u4f7f\u7528\u91c7\u6837\u5668\u53d8\u91cf\u8fdb\u884c\u7eb9\u7406\u67e5\u627e\u65f6\u8c03\u7528\u7684\u7eb9\u7406\u5355\u5143\u3002\u91c7\u6837\u5668\u53d8\u91cf\u5fc5\u987b\u88ab\u58f0\u660e\u4e3a\u5168\u5c40\u7edf\u4e00\u53d8\u91cf\u3002\u7740\u8272\u5668\u7a0b\u5e8f\u4e0d\u80fd\u4e3a\u91c7\u6837\u5668\u53d8\u91cf\u8d4b\u503c\u662f\u975e\u6cd5\u7684\u3002\u503c\u5fc5\u987b\u6765\u81eaJavaScript\u65b9\u9762\u3002</p> <p>\u5728JavaScript\u65b9\u9762\uff0c\u53ef\u7528\u7684\u7eb9\u7406\u5355\u5143\u7f16\u53f7\u4e3a0\u30011\u30012\u3001...\uff0c\u5176\u4e2d\u6700\u5927\u503c\u53d6\u51b3\u4e8e\u5b9e\u73b0\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8868\u8fbe\u5f0f\u7684\u503c\u6765\u786e\u5b9a\u5355\u5143\u6570\u91cf\uff1a</p> <pre><code>gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)\n</code></pre> <p>\uff08\u8bf7\u518d\u6b21\u8bb0\u4f4f\uff0c\u8fd9\u91cc\u7684gl\u662f\u6307\u5411WebGL\u4e0a\u4e0b\u6587\u7684JavaScript\u53d8\u91cf\u7684\u540d\u79f0\uff0c\u540d\u79f0\u7531\u7a0b\u5e8f\u5458\u51b3\u5b9a\u3002\uff09</p> <p>\u5c31JavaScript\u800c\u8a00\uff0c\u91c7\u6837\u5668\u53d8\u91cf\u7684\u503c\u662f\u4e00\u4e2a\u6574\u6570\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u91c7\u6837\u5668\u53d8\u91cf\u4f7f\u7528\u7f16\u53f7\u4e3a2\u7684\u7eb9\u7406\u5355\u5143\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u91c7\u6837\u5668\u53d8\u91cf\u7684\u503c\u8bbe\u7f6e\u4e3a2\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u51fd\u6570gl.uniform1i(6.1.4\u5c0f\u8282)\u6765\u5b8c\u6210\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u7740\u8272\u5668\u7a0b\u5e8f\u58f0\u660e\u4e86\u4e00\u4e2a\u91c7\u6837\u5668\u53d8\u91cf\uff1a</p> <pre><code>uniform sampler2D u_texture;\n</code></pre> <p>\u8981\u4eceJavaScript\u8bbe\u7f6e\u5b83\u7684\u503c\uff0c\u4f60\u9700\u8981\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u83b7\u53d6\u53d8\u91cf\u7684\u4f4d\u7f6e\u3002\u5982\u679cprog\u662f\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u4f4d\u7f6e\u662f\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u5f97\u7684\uff1a</p> <pre><code>u_texture_location = gl.getUniformLocation(prog, \"u_texture\");\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u544a\u8bc9\u91c7\u6837\u5668\u53d8\u91cf\u4f7f\u7528\u7f16\u53f7\u4e3a2\u7684\u7eb9\u7406\u5355\u5143\uff1a</p> <pre><code>gl.uniform1i(u_texture_location, 2);\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728GLSL\u4e2d\uff0c\u6574\u6570\u503c\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u6574\u6570\u503c\u544a\u8bc9\u91c7\u6837\u5668\u4f7f\u7528\u54ea\u4e2a\u7eb9\u7406\u5355\u5143\uff0c\u4f46\u7740\u8272\u5668\u7a0b\u5e8f\u6ca1\u6709\u529e\u6cd5\u627e\u51fa\u6b63\u5728\u4f7f\u7528\u7684\u5355\u5143\u7f16\u53f7\u3002</p> <p>\u8981\u4f7f\u7528\u56fe\u50cf\u7eb9\u7406\uff0c\u4f60\u8fd8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7eb9\u7406\u5bf9\u8c61\uff0c\u5e76\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u4f60\u53ef\u80fd\u60f3\u8981\u8bbe\u7f6e\u7eb9\u7406\u5bf9\u8c61\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u4e5f\u53ef\u80fd\u60f3\u8981\u4e3a\u7eb9\u7406\u521b\u5efa\u4e00\u7ec4mipmap\u3002\u4f60\u8fd8\u9700\u8981\u5c06\u7eb9\u7406\u5bf9\u8c61\u4e0e\u7eb9\u7406\u5355\u5143\u5173\u8054\u8d77\u6765\u3002\u6240\u6709\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u5728JavaScript\u65b9\u9762\u5b8c\u6210\u7684\u3002</p> <p>\u521b\u5efa\u7eb9\u7406\u5bf9\u8c61\u7684\u547d\u4ee4\u662fgl.createTexture()\u3002OpenGL 1.1\u4e2d\u7684\u547d\u4ee4\u662fglGenTextures\u3002WebGL\u547d\u4ee4\u66f4\u6613\u4e8e\u4f7f\u7528\u3002\u5b83\u521b\u5efa\u4e00\u4e2a\u5355\u4e00\u7684\u7eb9\u7406\u5bf9\u8c61\u5e76\u8fd4\u56de\u5bf9\u5b83\u7684\u5f15\u7528\u3002\u4f8b\u5982\uff0c</p> <pre><code>textureObj = gl.createTexture();\n</code></pre> <p>\u8fd9\u4ec5\u4e3a\u5bf9\u8c61\u5206\u914d\u4e86\u4e00\u4e9b\u5185\u5b58\u3002\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u4f60\u5fc5\u987b\u9996\u5148\u901a\u8fc7\u8c03\u7528gl.bindTexture\u6765\u201c\u7ed1\u5b9a\u201d\u7eb9\u7406\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c</p> <pre><code>gl.bindTexture(gl.TEXTURE_2D, textureObj);\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0cgl.TEXTURE_2D\uff0c\u662f\u7eb9\u7406\u76ee\u6807\u3002\u8fd9\u4e2a\u76ee\u6807\u7528\u4e8e\u4f7f\u7528\u666e\u901a\u7684\u7eb9\u7406\u56fe\u50cf\u3002\u5bf9\u4e8e\u7acb\u65b9\u4f53\u8d34\u56fe\u6709\u4e0d\u540c\u7684\u76ee\u6807\u3002</p> <p>\u51fd\u6570gl.texImage2D\u7528\u4e8e\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230\u5f53\u524d\u7ed1\u5b9a\u7684\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u5c0f\u8282\u4e2d\u56de\u5230\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u4e2a\u547d\u4ee4\u548c\u5176\u4ed6\u547d\u4ee4\u59cb\u7ec8\u9002\u7528\u4e8e\u5f53\u524d\u7ed1\u5b9a\u7684\u7eb9\u7406\u5bf9\u8c61\u3002\u547d\u4ee4\u4e2d\u6ca1\u6709\u63d0\u5230\u7eb9\u7406\u5bf9\u8c61\uff1b\u76f8\u53cd\uff0c\u5728\u8c03\u7528\u547d\u4ee4\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u7ed1\u5b9a\u7eb9\u7406\u5bf9\u8c61\u3002</p> <p>\u4f60\u8fd8\u9700\u8981\u544a\u8bc9\u7eb9\u7406\u5355\u5143\u4f7f\u7528\u7eb9\u7406\u5bf9\u8c61\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u8c03\u7528\u51fd\u6570gl.activeTexture\u6765\u4f7f\u7eb9\u7406\u5355\u5143\u201c\u6fc0\u6d3b\u201d\u3002\u53c2\u6570\u662fgl.TEXTURE0\u3001gl.TEXTURE1\u3001gl.TEXTURE2\u7b49\u5e38\u91cf\u4e4b\u4e00\uff0c\u5b83\u4eec\u4ee3\u8868\u53ef\u7528\u7684\u7eb9\u7406\u5355\u5143\u3002\uff08\u8fd9\u4e9b\u5e38\u91cf\u7684\u503c\u4e0d\u662f0\u30011\u30012\u2026\u2026\uff09\u3002\u6700\u521d\uff0c\u7eb9\u7406\u5355\u51430\u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u3002\u4f8b\u5982\uff0c\u8981\u4f7f\u7eb9\u7406\u5355\u51432\u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\uff0c\u8bf7\u4f7f\u7528</p> <pre><code>gl.activeTexture(gl.TEXTURE2);\n</code></pre> <p>\uff08\u8fd9\u4e2a\u51fd\u6570\u672c\u5e94\u8be5\u53eb\u505aactiveTextureUnit\uff0c\u6216\u8005\u53ef\u80fd\u662fbindTextureUnit\uff0c\u56e0\u4e3a\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8eWebGL\u7684\u5404\u79cd\u201cbind\u201d\u51fd\u6570\u3002\uff09\u5982\u679c\u4f60\u63a5\u7740\u8c03\u7528</p> <pre><code>gl.bindTexture(gl.TEXTURE_2D, textureObj);\n</code></pre> <p>\u5728\u7eb9\u7406\u5355\u51432\u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u65f6\u7ed1\u5b9a\u4e00\u4e2a\u7eb9\u7406\u5bf9\u8c61\uff0c\u90a3\u4e48\u7eb9\u7406\u5bf9\u8c61textureObj\u5c31\u88ab\u7ed1\u5b9a\u5230\u7eb9\u7406\u5355\u51432\uff0c\u7528\u4e8egl.TEXTURE_2D\u64cd\u4f5c\u3002\u7ed1\u5b9a\u53ea\u662f\u544a\u8bc9\u7eb9\u7406\u5355\u5143\u4f7f\u7528\u54ea\u4e2a\u7eb9\u7406\u5bf9\u8c61\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7eb9\u7406\u5355\u51432\u6267\u884cTEXTURE_2D\u67e5\u627e\u65f6\uff0c\u5b83\u5c06\u4f7f\u7528\u5b58\u50a8\u5728textureObj\u4e2d\u7684\u56fe\u50cf\u548c\u8bbe\u7f6e\u8fdb\u884c\u64cd\u4f5c\u3002\u4e00\u4e2a\u7eb9\u7406\u5bf9\u8c61\u53ef\u4ee5\u540c\u65f6\u7ed1\u5b9a\u5230\u591a\u4e2a\u7eb9\u7406\u5355\u5143\u4e0a\u3002\u7136\u800c\uff0c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u7eb9\u7406\u5355\u5143\u4e00\u6b21\u53ea\u80fd\u6709\u4e00\u4e2a\u7ed1\u5b9a\u7684TEXTURE_2D\u3002</p> <p>\u5728WebGL\u4e2d\u4f7f\u7528\u7eb9\u7406\u56fe\u50cf\u6d89\u53ca\u4f7f\u7528\u7eb9\u7406\u5bf9\u8c61\u3001\u7eb9\u7406\u5355\u5143\u548c\u91c7\u6837\u5668\u53d8\u91cf\u3002\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\u5982\u56fe\u4e2d\u6240\u793a\uff1a</p> <p></p> <p>\u91c7\u6837\u5668\u53d8\u91cf\u4f7f\u7528\u7eb9\u7406\u5355\u5143\uff0c\u8be5\u7eb9\u7406\u5355\u5143\u4f7f\u7528\u7eb9\u7406\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4fdd\u5b58\u7eb9\u7406\u56fe\u50cf\u3002\u8bbe\u7f6e\u6b64\u94fe\u7684JavaScript\u547d\u4ee4\u5728\u63d2\u56fe\u4e2d\u663e\u793a\u3002\u8981\u5c06\u7eb9\u7406\u56fe\u50cf\u5e94\u7528\u4e8e\u539f\u8bed\uff0c\u60a8\u5fc5\u987b\u8bbe\u7f6e\u6574\u4e2a\u94fe\u3002\u5f53\u7136\uff0c\u60a8\u8fd8\u5fc5\u987b\u4e3a\u539f\u8bed\u63d0\u4f9b\u7eb9\u7406\u5750\u6807\uff0c\u5e76\u9700\u8981\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u91c7\u6837\u5668\u53d8\u91cf\u6765\u8bbf\u95ee\u7eb9\u7406\u3002</p> <p>\u5047\u8bbe\u60a8\u6709\u51e0\u5f20\u60f3\u8981\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u539f\u8bed\u4e0a\u4f7f\u7528\u7684\u56fe\u50cf\u3002\u5728\u7ed8\u5236\u539f\u8bed\u4e4b\u95f4\uff0c\u60a8\u9700\u8981\u66f4\u6539\u8981\u4f7f\u7528\u7684\u7eb9\u7406\u56fe\u50cf\u3002\u5728WebGL\u4e2d\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u56fe\u50cf\uff1a</p> <ol> <li>\u60a8\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u7eb9\u7406\u5bf9\u8c61\u548c\u5355\u4e2a\u7eb9\u7406\u5355\u5143\u3002\u7ed1\u5b9a\u7684\u7eb9\u7406\u5bf9\u8c61\u3001\u6d3b\u52a8\u7684\u7eb9\u7406\u5355\u5143\u548c\u91c7\u6837\u5668\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u6b21\uff0c\u7136\u540e\u4e0d\u518d\u66f4\u6539\u3002\u8981\u66f4\u6539\u4e3a\u65b0\u56fe\u50cf\uff0c\u60a8\u5c06\u4f7f\u7528gl.texImage2D\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u8fd9\u57fa\u672c\u4e0a\u662fOpenGL 1.0\u4e2d\u7684\u64cd\u4f5c\u65b9\u5f0f\u3002\u8fd9\u662f\u975e\u5e38\u4f4e\u6548\u7684\uff0c\u9664\u975e\u60a8\u53ea\u4f7f\u7528\u6bcf\u4e2a\u56fe\u50cf\u4e00\u6b21\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5f15\u5165\u4e86\u7eb9\u7406\u5bf9\u8c61\u7684\u539f\u56e0\u3002</li> <li>\u60a8\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u56fe\u50cf\u4f7f\u7528\u4e0d\u540c\u7684\u7eb9\u7406\u5bf9\u8c61\uff0c\u4f46\u53ea\u4f7f\u7528\u5355\u4e2a\u7eb9\u7406\u5355\u5143\u3002\u6d3b\u52a8\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668\u53d8\u91cf\u7684\u503c\u5c06\u4e0d\u9700\u8981\u66f4\u6539\u3002\u60a8\u5c06\u4f7f\u7528gl.bindTexture\u7ed1\u5b9a\u5305\u542b\u6240\u9700\u56fe\u50cf\u7684\u7eb9\u7406\u5bf9\u8c61\u6765\u5207\u6362\u5230\u65b0\u7684\u7eb9\u7406\u56fe\u50cf\u3002</li> <li>\u60a8\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u56fe\u50cf\u4f7f\u7528\u4e0d\u540c\u7684\u7eb9\u7406\u5355\u5143\u3002\u60a8\u5c06\u6bcf\u4e2a\u56fe\u50cf\u52a0\u8f7d\u5230\u81ea\u5df1\u7684\u7eb9\u7406\u5bf9\u8c61\u4e2d\uff0c\u5e76\u5c06\u8be5\u5bf9\u8c61\u7ed1\u5b9a\u5230\u5176\u4e2d\u4e00\u4e2a\u7eb9\u7406\u5355\u5143\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539\u91c7\u6837\u5668\u53d8\u91cf\u7684\u503c\u6765\u5207\u6362\u5230\u65b0\u7684\u7eb9\u7406\u56fe\u50cf\u3002</li> </ol> <p>\u6211\u4e0d\u77e5\u9053\u9009\u98792\u548c3\u5728\u6548\u7387\u65b9\u9762\u5982\u4f55\u6bd4\u8f83\u3002\u8bf7\u6ce8\u610f\uff0c\u53ea\u6709\u5728\u60a8\u60f3\u8981\u5c06\u591a\u4e2a\u7eb9\u7406\u56fe\u50cf\u5e94\u7528\u4e8e\u540c\u4e00\u539f\u8bed\u65f6\uff0c\u624d\u88ab\u8feb\u4f7f\u7528\u591a\u4e2a\u7eb9\u7406\u5355\u5143\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u60a8\u5c06\u9700\u8981\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u51e0\u4e2a\u91c7\u6837\u5668\u53d8\u91cf\u3002\u5b83\u4eec\u5c06\u5177\u6709\u4e0d\u540c\u7684\u503c\uff0c\u4ee5\u4fbf\u5b83\u4eec\u5f15\u7528\u4e0d\u540c\u7684\u7eb9\u7406\u5355\u5143\uff0c\u5e76\u4e14\u50cf\u7d20\u7684\u989c\u8272\u5c06\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4f9d\u8d56\u4e8e\u4e24\u4e2a\u56fe\u50cf\u7684\u6837\u672c\u3002\u8fd9\u5f20\u56fe\u7247\u663e\u793a\u4e86\u4ee5\u7b80\u5355\u65b9\u5f0f\u7ec4\u5408\u4e24\u4e2a\u7eb9\u7406\u4ee5\u8ba1\u7b97\u7eb9\u7406\u6b63\u65b9\u5f62\u7684\u989c\u8272\uff1a</p> <p></p> <p>\u5728\u5de6\u4fa7\u7684\u56fe\u50cf\u4e2d\uff0c\u7070\u5ea6\u201c\u7816\u201d\u56fe\u50cf\u4e58\u4ee5\u201c\u5730\u7403\u201d\u56fe\u50cf\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u50cf\u7d20\u7684\u7ea2\u8272\u5206\u91cf\u662f\u901a\u8fc7\u5c06\u7816\u7eb9\u7406\u7684\u7ea2\u8272\u5206\u91cf\u4e58\u4ee5\u5730\u7403\u7eb9\u7406\u7684\u7ea2\u8272\u5206\u91cf\u8ba1\u7b97\u7684\uff0c\u7eff\u8272\u548c\u84dd\u8272\u4e5f\u662f\u5982\u6b64\u3002\u5728\u53f3\u4fa7\uff0c\u76f8\u540c\u7684\u5730\u7403\u7eb9\u7406\u4ece\u4e00\u4e2a\u201c\u5e03\u201d\u7eb9\u7406\u4e2d\u51cf\u53bb\u3002\u6b64\u5916\uff0c\u56fe\u6848\u56e0\u4e3a\u5728\u4f7f\u7528\u7eb9\u7406\u5750\u6807\u91c7\u6837\u7eb9\u7406\u4e4b\u524d\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4f7f\u7528\u4e86\u516c\u5f0f <code>texCoords.y += 0.25*sin(6.28*texCoords.x)</code>\u3002\u8fd9\u662f\u53ea\u80fd\u4f7f\u7528\u53ef\u7f16\u7a0b\u7740\u8272\u5668\u5b8c\u6210\u7684\u4e8b\u60c5\uff01\u56fe\u50cf\u53d6\u81ea\u4ee5\u4e0b\u6f14\u793a\u3002\u8bd5\u8bd5\u770b\uff01</p> <p></p> <p>\u60a8\u53ef\u80fd\u60f3\u8981\u67e5\u770bsource code\u4ee5\u4e86\u89e3\u5982\u4f55\u7f16\u7a0b\u7eb9\u7406\u3002\u4f7f\u7528\u4e24\u4e2a\u7eb9\u7406\u5355\u5143\u3002\u4e24\u4e2a\u7edf\u4e00\u91c7\u6837\u5668\u53d8\u91cfu_texture1\u548cu_texture2\u7684\u503c\u5728\u521d\u59cb\u5316\u671f\u95f4\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8bbe\u7f6e</p> <pre><code>u_texture1_location = gl.getUniformLocation(prog, \"u_texture1\");\nu_texture2_location = gl.getUniformLocation(prog, \"u_texture2\");\ngl.uniform1i(u_texture1_location, 0);\ngl.uniform1i(u_texture2_location, 1);\n</code></pre> <p>\u8fd9\u4e9b\u503c\u4ece\u672a\u66f4\u6539\u3002\u7a0b\u5e8f\u4f7f\u7528\u4e86\u51e0\u4e2a\u7eb9\u7406\u56fe\u50cf\u3002\u6bcf\u4e2a\u56fe\u50cf\u90fd\u6709\u4e00\u4e2a\u7eb9\u7406\u5bf9\u8c61\u3002\u5728JavaScript\u65b9\u9762\uff0c\u7eb9\u7406\u5bf9\u8c61\u7684ID\u5b58\u50a8\u5728\u6570\u7ec4textureObjects\u4e2d\u3002\u4e24\u4e2a\u5f39\u51fa\u83dc\u5355\u5141\u8bb8\u7528\u6237\u9009\u62e9\u5e94\u7528\u4e8e\u539f\u8bed\u7684\u7eb9\u7406\u56fe\u50cf\u3002\u8fd9\u662f\u901a\u8fc7\u5c06\u4e24\u4e2a\u9009\u5b9a\u7684\u7eb9\u7406\u5bf9\u8c61\u7ed1\u5b9a\u5230\u7eb9\u7406\u5355\u51430\u548c1\u6765\u5b9e\u73b0\u7684\uff0c\u8fd9\u4e24\u4e2a\u5355\u5143\u662f\u4e24\u4e2a\u91c7\u6837\u5668\u53d8\u91cf\u4f7f\u7528\u7684\u5355\u5143\u3002\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>let tex1Num = Number(document.getElementById(\"textureChoice1\").value);\ngl.activeTexture(gl.TEXTURE0);\ngl.bindTexture(gl.TEXTURE_2D, textureObjects[tex1Num]);\n\nlet tex2Num = Number(document.getElementById(\"textureChoice2\").value);\ngl.activeTexture(gl.TEXTURE1);\ngl.bindTexture(gl.TEXTURE_2D, textureObjects[tex2Num]);\n</code></pre> <p>\u5c06\u56fe\u50cf\u653e\u5165\u7eb9\u7406\u5bf9\u8c61\u662f\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u8ba8\u8bba\u3002</p> <p>A texture unit, also called a texture mapping unit (TMU) or a texture processing unit (TPU), is a hardware component in a GPU that does sampling. Sampling is the process of computing a color from an image texture and texture coordinates. Mapping a texture image to a surface is a fairly complex operation, since it requires more than just returning the color of the texel that contains some given texture coordinates. It also requires applying the appropriate minification or magnification filter, possibly using mipmaps if available. Fast texture sampling is one of the key requirements for good GPU performance.</p> <p>Texture units are not to be confused with texture objects. We encountered texture objects in Subsection 4.3.7. A texture object is a data structure that contains the color data for an image texture, and possibly for a set of mipmaps for the texture, as well as the values of texture properties such as the minification and magnification filters and the texture repeat mode. A texture unit must access a texture object to do its work. The texture unit is the processor; the texture object holds the data that is processed.</p> <p>(By the way, I should really be more careful about throwing around the terms \"GPU\" and \"hardware.\" Although a texture unit probably does use an actual hardware component in the GPU, it could also be emulated, more slowly, in software. And even if there is hardware involved, having eight texture units does not necessarily mean that there are eight hardware components; the texture units might share time on a smaller number of hardware components. Similarly, I said previously that texture objects are stored in memory in the GPU, which might or might not be literally true in a given case. Nevertheless, you will probably find it conceptually easier to think of a texture unit as a piece of hardware and a texture object as a data structure in the GPU.)final subsection.</p> <p>In GLSL, texture lookup is done using sampler variables. A sampler variable is a variable in a shader program. In GLSL ES 1.00, the only sampler types are sampler2D and samplerCube. A sampler2D is used to do lookup in a standard texture image; a samplerCube is used to do lookup in a cubemap texture (Subsection 5.3.4). The value of a sampler variable is a reference to a texture unit. The value tells which texture unit is invoked when the sampler variable is used to do texture lookup. Sampler variables must be declared as global uniform variables. It is not legal for a shader program to assign a value to a sampler variable. The value must come from the JavaScript side.</p> <p>On the JavaScript side, the available texture units are numbered 0, 1, 2, ..., where the maximum value is implementation dependent. The number of units can be determined as the value of the expression</p> <pre><code>gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS )\n</code></pre> <p>(Please remember, again, that gl here is the name of a JavaScript variable that refers to the WebGL context, and that the name is up to the programmer.)</p> <p>As far as JavaScript is concerned, the value of a sampler variable is an integer. If you want a sampler variable to use texture unit number 2, then you set the value of the sampler variable to 2. This can be done using the function gl.uniform1i (Subsection 6.1.4). For example, suppose a shader program declares a sampler variable</p> <pre><code>uniform sampler2D u_texture;\n</code></pre> <p>To set its value from JavaScript, you need the location of the variable in the shader program. If prog is the shader program, the location is obtained by calling</p> <pre><code>u_texture_location = gl.getUniformLocation( prog, \"u_texture\" );\n</code></pre> <p>Then, you can tell the sampler variable to use texture unit number 2 by calling</p> <pre><code>gl.uniform1i( u_texture_location, 2 );\n</code></pre> <p>Note that the integer value is not accessible in GLSL. The integer tells the sampler which texture unit to use, but there is no way for the shader program to find out the number of the unit that is being used.</p> <p>To use an image texture, you also need to create a texture object, and you need to load an image into the texture object. You might want to set some properties of the texture object, and you might want to create a set of mipmaps for the texture. And you will have to associate the texture object with a texture unit. All this is done on the JavaScript side.</p> <p>The command for creating a texture object is gl.createTexture(). The command in OpenGL 1.1 was glGenTextures. The WebGL command is easier to use. It creates a single texture object and returns a reference to it. For example,</p> <pre><code>textureObj = gl.createTexture();\n</code></pre> <p>This just allocates some memory for the object. In order to use it, you must first \"bind\" the texture object by calling gl.bindTexture. For example,</p> <pre><code>gl.bindTexture( gl.TEXTURE_2D, textureObj );\n</code></pre> <p>The first parameter, gl.TEXTURE_2D, is the texture target. This target is used for working with an ordinary texture image. There is a different target for cubemap textures.</p> <p>The function gl.texImage2D is used to load an image into the currently bound texture object. We will come back to that in the next subsection. But remember that this command and other commands always apply to the currently bound texture object. The texture object is not mentioned in the command; instead, the texture object must be bound before the command is called.</p> <p>You also need to tell a texture unit to use the texture object. Before you can do that, you need to make the texture unit \"active,\" which is done by calling the function gl.activeTexture. The parameter is one of the constants gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, ..., which represent the available texture units. (The values of these constants are not 0, 1, 2, ....) Initially, texture unit number 0 is active. To make texture unit number 2 active, for example, use</p> <pre><code>gl.activeTexture( gl.TEXTURE2 );\n</code></pre> <p>(This function should really have been called activeTextureUnit, or maybe bindTextureUnit, since it works similarly to the various WebGL \"bind\" functions.) If you then call</p> <pre><code>gl.bindTexture( gl.TEXTURE_2D, textureObj );\n</code></pre> <p>to bind a texture object, while texture unit 2 is active, then the texture object textureObj is bound to texture unit number 2 for gl.TEXTURE_2D operations. The binding just tells the texture unit which texture object to use. That is, when texture unit 2 does TEXTURE_2D lookups, it will do so using the image and the settings that are stored in textureObj. A texture object can be bound to several texture units at the same time. However, a given texture unit can have only one bound TEXTURE_2D at a time.</p> <p>So, working with texture images in WebGL involves working with texture objects, texture units, and sampler variables. The relationship among the three is illustrated in this picture:</p> <p></p> <p>A sampler variable uses a texture unit, which uses a texture object, which holds a texture image. The JavaScript commands for setting up this chain are shown in the illustration. To apply a texture image to a primitive, you have to set up the entire chain. Of course, you also have to provide texture coordinates for the primitive, and you need to use the sampler variable in the shader program to access the texture.</p> <p>Suppose that you have several images that you would like to use on several different primitives. Between drawing primitives, you need to change the texture image that will be used. There are at least three different ways to manage the images in WebGL:</p> <ol> <li>You could use a single texture object and a single texture unit. The bound texture object, the active texture unit, and the value of the sampler variable can be set once and never changed. To change to a new image, you would use gl.texImage2D to load the image into the texture object. This is essentially how things were done in OpenGL 1.0. It's very inefficient, except when you are going to use each image just once. That's why texture objects were introduced.</li> <li>You could use a different texture object for each image, but use just a single texture unit. The active texture and the value of the sampler variable will never have to be changed. You would switch to a new texture image using gl.bindTexture to bind the texture object that contains the desired image.</li> <li>You could use a different texture unit for each image. You would load each image into its own texture object and bind that object to one of the texture units. You would switch to a new texture image by changing the value of the sampler variable.</li> </ol> <p>I don't know how options 2 and 3 compare in terms of efficiency. Note that you are only forced to use more than one texture unit if you want to apply more than one texture image to the same primitive. To do that, you will need several sampler variables in the shader program. They will have different values so that they refer to different texture units, and the color of a pixel will somehow depend on samples from both images. This picture shows two textures being combined in simple ways to compute the colors of pixels in a textured square:</p> <p></p> <p>In the image on the left, a grayscale \"brick\" image is multiplied by an \"Earth\" image; that is, the red component of a pixel is computed by multiplying the red component from the brick texture by the red component from the Earth texture, and same for green and blue. On the right, the same Earth texture is subtracted from a \"cloth\" texture. Furthermore, the pattern is distorted because the texture coordinates were modified before being used to sample the textures, using the formula <code>texCoords.y += 0.25*sin(6.28*texCoords.x)</code>. That's the kind of thing that could only be done with programmable shaders! The images are taken from the following demo. Try it out!</p> <p></p> <p>You might want to view the source code to see how the textures are programmed. Two texture units are used. The values of two uniform sampler variables, u_texture1 and u_texture2, are set during initialization with the code</p> <pre><code>u_texture1_location = gl.getUniformLocation(prog, \"u_texture1\");\nu_texture2_location = gl.getUniformLocation(prog, \"u_texture2\");\ngl.uniform1i(u_texture1_location, 0);\ngl.uniform1i(u_texture2_location, 1);\n</code></pre> <p>The values are never changed. The program uses several texture images. There is a texture object for each image. On the JavaScript side, the IDs for the texture objects are stored in an array, textureObjects. Two popup menus allow the user to select which texture images are applied to the primitive. This is implemented in the drawing routine by binding the two selected texture objects to texture units 0 and 1, which are the units used by the two sampler variables. The code for that is:</p> <pre><code>let tex1Num = Number(document.getElementById(\"textureChoice1\").value);\ngl.activeTexture( gl.TEXTURE0 );\ngl.bindTexture( gl.TEXTURE_2D, textureObjects[tex1Num] );\n\nlet tex2Num = Number(document.getElementById(\"textureChoice2\").value);\ngl.activeTexture( gl.TEXTURE1 );\ngl.bindTexture( gl.TEXTURE_2D, textureObjects[tex2Num] );\n</code></pre> <p>Getting images into the texture objects is another question, which we turn to next.</p>"},{"location":"cn/c6/s4/#642-\u5904\u7406\u56fe\u50cf","title":"6.4.2 \u5904\u7406\u56fe\u50cf","text":"<p>Working with Images</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570gl.texImage2D\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u5bf9\u4e8eWebGL\u7684\u4f7f\u7528\uff0c\u8fd9\u4e2a\u51fd\u6570\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>gl.texImage2D( target, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image );\n</code></pre> <p>\u76ee\u6807\u662fgl.TEXTURE_2D\uff0c\u7528\u4e8e\u666e\u901a\u7eb9\u7406\uff1b\u52a0\u8f7d\u7acb\u65b9\u4f53\u8d34\u56fe\u65f6\u6709\u5176\u4ed6\u76ee\u6807\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fmipmap\u7ea7\u522b\uff0c\u4e3b\u56fe\u50cf\u4e3a0\u3002\u5c3d\u7ba1\u53ef\u4ee5\u52a0\u8f7d\u5355\u72ec\u7684mipmap\uff0c\u4f46\u5f88\u5c11\u8fd9\u6837\u505a\u3002\u63a5\u4e0b\u6765\u4e24\u4e2a\u53c2\u6570\u63d0\u4f9b\u4e86\u7eb9\u7406\u5bf9\u8c61\u5185\u548c\u539f\u59cb\u56fe\u50cf\u7684\u7eb9\u7406\u683c\u5f0f\u3002\u5728WebGL 1.0\u4e2d\uff0c\u4e24\u4e2a\u683c\u5f0f\u53c2\u6570\u5e94\u8be5\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\u7531\u4e8e\u7f51\u7edc\u56fe\u50cf\u4ee5RGBA\u683c\u5f0f\u5b58\u50a8\uff0cgl.RGBA\u53ef\u80fd\u662f\u6700\u6709\u6548\u7684\u9009\u62e9\uff0c\u5f88\u5c11\u6709\u5176\u4ed6\u9700\u6c42\u3002\u4f46\u5982\u679c\u4e0d\u9700\u8981alpha\u5206\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528gl.RGB\u3002\u901a\u8fc7\u4f7f\u7528gl.LUMINANCE\u6216gl.LUMINANCE_ALPHA\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u7070\u5ea6\u3002\uff08\u4eae\u5ea6\u662f\u5bf9\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u52a0\u6743\u5e73\u5747\uff0c\u8fd1\u4f3c\u4e8e\u989c\u8272\u7684\u611f\u77e5\u4eae\u5ea6\u3002\uff09\u7b2c\u56db\u4e2a\u53c2\u6570\u59cb\u7ec8\u662fgl.UNSIGNED_BYTE\uff0c\u8868\u793a\u56fe\u50cf\u4e2d\u7684\u989c\u8272\u4f7f\u7528\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u4e00\u4e2a\u5b57\u8282\u5b58\u50a8\u3002\u5c3d\u7ba1\u5176\u4ed6\u503c\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u5b83\u4eec\u5bf9\u4e8e\u7f51\u7edc\u56fe\u50cf\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u3002</p> <p>\u8c03\u7528gl.texImage2D\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u56fe\u50cf\u3002\u901a\u5e38\uff0cimage\u5c06\u662f\u4e00\u4e2a\u7531JavaScript\u5f02\u6b65\u52a0\u8f7d\u7684DOM\u56fe\u50cf\u5143\u7d20\u3002image\u4e5f\u53ef\u4ee5\u662f\u5143\u7d20\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u753b\u5e03\u4e0a\u7ed8\u5236\uff0c\u4f7f\u7528HTML\u753b\u5e032D\u56fe\u5f62API\uff0c\u7136\u540e\u5c06\u753b\u5e03\u4f5c\u4e3a\u7eb9\u7406\u56fe\u50cf\u7684\u6e90\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u5728\u7f51\u9875\u4e0a\u4e0d\u53ef\u89c1\u7684\u79bb\u5c4f\u753b\u5e03\u3002 <p>\u56fe\u50cf\u88ab\u52a0\u8f7d\u5230\u5f53\u524d\u7ed1\u5b9a\u5230\u5f53\u524d\u6d3b\u52a8\u7eb9\u7406\u5355\u5143\u7684\u76ee\u6807\u7684\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u6ca1\u6709\u9ed8\u8ba4\u7684\u7eb9\u7406\u5bf9\u8c61\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5728\u8c03\u7528gl.texImage2D\u65f6\u6ca1\u6709\u7eb9\u7406\u88ab\u7ed1\u5b9a\uff0c\u5c31\u4f1a\u53d1\u751f\u9519\u8bef\u3002\u6d3b\u52a8\u7eb9\u7406\u5355\u5143\u662f\u4f7f\u7528gl.activeTexture\u9009\u62e9\u7684\u5355\u5143\uff0c\u6216\u8005\u5982\u679c\u4ece\u672a\u8c03\u7528\u8fc7gl.activeTexture\uff0c\u5219\u4e3a\u7eb9\u7406\u5355\u51430\u3002\u901a\u8fc7gl.bindTexture\u5c06\u7eb9\u7406\u5bf9\u8c61\u7ed1\u5b9a\u5230\u6d3b\u52a8\u7eb9\u7406\u5355\u5143\u3002\u8fd9\u5728\u672c\u8282\u524d\u9762\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u3002</p> <p>\u4f7f\u7528WebGL\u4e2d\u7684\u56fe\u50cf\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u4e3a\u56fe\u50cf\u662f\u5f02\u6b65\u52a0\u8f7d\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u52a0\u8f7d\u56fe\u50cf\u7684\u547d\u4ee4\u53ea\u542f\u52a8\u4e86\u52a0\u8f7d\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u5728\u52a0\u8f7d\u5b8c\u6210\u540e\u6267\u884c\u3002\u56fe\u50cf\u5b9e\u9645\u4e0a\u8981\u5230\u56de\u8c03\u51fd\u6570\u88ab\u8c03\u7528\u540e\u624d\u53ef\u7528\u4e8e\u4f7f\u7528\u3002\u5f53\u52a0\u8f7d\u56fe\u50cf\u7528\u4f5c\u7eb9\u7406\u65f6\uff0c\u56de\u8c03\u51fd\u6570\u5e94\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u901a\u5e38\uff0c\u5b83\u8fd8\u4f1a\u8c03\u7528\u4e00\u4e2a\u6e32\u67d3\u51fd\u6570\u6765\u7ed8\u5236\u573a\u666f\uff0c\u5e26\u6216\u4e0d\u5e26\u7eb9\u7406\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/simple-texture.html\u662f\u5728\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e0a\u4f7f\u7528\u5355\u4e2a\u7eb9\u7406\u7684\u793a\u4f8b\u3002\u8fd9\u91cc\u662f\u4e00\u4e2a\u7528\u4e8e\u5728\u8be5\u7a0b\u5e8f\u4e2d\u52a0\u8f7d\u7eb9\u7406\u56fe\u50cf\u7684\u51fd\u6570\u3002\u5728\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u524d\u521b\u5efa\u4e86\u7eb9\u7406\u5bf9\u8c61\u3002</p> <pre><code>/**\n * \u5f02\u6b65\u52a0\u8f7d\u7eb9\u7406\u56fe\u50cf\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u52a0\u8f7d\u56fe\u50cf\u7684url\u3002\n * \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u52a0\u8f7d\u56fe\u50cf\u7684\u7eb9\u7406\u5bf9\u8c61\u3002\u5f53\u56fe\u50cf\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\n * \u5c06\u8c03\u7528draw()\u51fd\u6570\u6765\u7ed8\u5236\u5e26\u7eb9\u7406\u7684\u4e09\u89d2\u5f62\u3002\uff08\u5982\u679c\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u9519\u8bef\uff0c\n * \u5219\u4f1a\u5728\u9875\u9762\u4e0a\u663e\u793a\u9519\u8bef\u6d88\u606f\uff0c\u5e76\u8c03\u7528draw()\u7ed8\u5236\u4e0d\u5e26\u7eb9\u7406\u7684\u4e09\u89d2\u5f62\u3002\uff09\n */\nfunction loadTexture( url, textureObject ) {\n    const  img = new Image();  // \u4e00\u4e2a\u4ee3\u8868\u56fe\u50cf\u7684DOM\u56fe\u50cf\u5143\u7d20\u3002\n    img.onload = function() { \n        // \u8fd9\u4e2a\u51fd\u6570\u5c06\u5728\u56fe\u50cf\u6210\u529f\u52a0\u8f7d\u540e\u8c03\u7528\u3002\n        // \u5728\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230\u7eb9\u7406\u5bf9\u8c61\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u7eb9\u7406\u5bf9\u8c61\u7ed1\u5b9a\u5230TEXTURE_2D\u76ee\u6807\u3002\n        gl.bindTexture(gl.TEXTURE_2D, textureObject);\n        try {\n        gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,img);\n        gl.generateMipmap(gl.TEXTURE_2D);  // \u521b\u5efamipmap\uff1b\u4f60\u5fc5\u987b\u8981\u4e48\u8fd9\u6837\u505a\n                            // \u6216\u8005\u66f4\u6539\u7f29\u5c0f\u8fc7\u6ee4\u5668\u3002\n        }\n        catch (e) { // \u53ef\u80fd\u662f\u5b89\u5168\u5f02\u5e38\uff0c\u56e0\u4e3a\u6b64\u9875\u9762\u5df2\u901a\u8fc7file:// URL\u52a0\u8f7d\u3002\n            document.getElementById(\"headline\").innerHTML =\n            \"Sorry, couldn't load texture.&lt;br&gt;\" +\n            \"Some web browsers won't use images from a local disk\";\n        }\n        draw();  // \u7ed8\u5236\u753b\u5e03\uff0c\u5e26\u6216\u4e0d\u5e26\u7eb9\u7406\u3002  \n    };\n    img.onerror = function() { \n        // \u5982\u679c\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u9519\u8bef\uff0c\u5c06\u8c03\u7528\u6b64\u51fd\u6570\u3002\n        document.getElementById(\"headline\").innerHTML =\n                        \"&lt;p&gt;Sorry, texture image could not be loaded.&lt;/p&gt;\";\n        draw();  // \u7ed8\u5236\u4e0d\u5e26\u7eb9\u7406\u7684\u56fe\u50cf\uff1b\u4e09\u89d2\u5f62\u5c06\u4e3a\u9ed1\u8272\u3002\n    };\n    img.src = url;  // \u5f00\u59cb\u52a0\u8f7d\u56fe\u50cf\u3002\n                    // \u8fd9\u5fc5\u987b\u5728\u8bbe\u7f6eonload\u548conerror\u4e4b\u540e\u5b8c\u6210\u3002\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0cWebGL 1.0\u7684\u56fe\u50cf\u7eb9\u7406\u5e94\u8be5\u662f2\u7684\u5e42\u7eb9\u7406\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5e94\u8be5\u662f2\u7684\u5e42\uff0c\u4f8b\u5982128\u3001256\u6216512\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u975e2\u7684\u5e42\u7eb9\u7406\uff0c\u4f46\u4f60\u4e0d\u80fd\u4f7f\u7528\u8fd9\u6837\u7684\u7eb9\u7406\u7684mipmap\uff0c\u8fd9\u6837\u7684\u7eb9\u7406\u652f\u6301\u7684\u552f\u4e00\u7eb9\u7406\u91cd\u590d\u6a21\u5f0f\u662fgl.CLAMP_TO_EDGE\u3002\uff08WebGL 2.0\u6ca1\u6709\u8fd9\u4e9b\u9650\u5236\u3002\uff09</p> <p>\uff08\u5728\u8be5\u51fd\u6570\u4e2d\u4f7f\u7528try..catch\u8bed\u53e5\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u7f51\u7edc\u6d4f\u89c8\u5668\u5728\u9875\u9762\u5c1d\u8bd5\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u7684\u56fe\u50cf\u4f5c\u4e3a\u7eb9\u7406\u65f6\u4f1a\u629b\u51fa\u5b89\u5168\u5f02\u5e38\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u4f60\u5c1d\u8bd5\u8fd0\u884c\u4e00\u4e2a\u4f7f\u7528\u4e0b\u8f7d\u7684\u672c\u4e66\u4e2d\u7684\u7eb9\u7406\u7684\u7a0b\u5e8f\uff0c\u4f7f\u7528\u7eb9\u7406\u7684\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u5de5\u4f5c\u3002\uff09</p> <p>\u4e0e\u7eb9\u7406\u5bf9\u8c61\u5173\u8054\u7684\u51e0\u4e2a\u53c2\u6570\uff0c\u5305\u62ec\u7eb9\u7406\u91cd\u590d\u6a21\u5f0f\u548c\u7f29\u653e\u4e0e\u653e\u5927\u6ee4\u6ce2\u5668\u3002\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570gl.texParameteri\u8bbe\u7f6e\u3002\u8bbe\u7f6e\u5c06\u5e94\u7528\u4e8e\u5f53\u524d\u7ed1\u5b9a\u7684\u7eb9\u7406\u5bf9\u8c61\u3002\u5927\u591a\u6570\u7ec6\u8282\u4e0eOpenGL 1.1\u4e2d\u7684\u76f8\u540c(4.3.3\u5c0f\u8282)\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u5c06\u6700\u5c0f\u5316\u6ee4\u6ce2\u5668\u8bbe\u7f6e\u4e3aLINEAR\uff1a</p> <pre><code>gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n</code></pre> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u9ed8\u8ba4\u7684\u6700\u5c0f\u5316\u6ee4\u6ce2\u5668\u5728\u6ca1\u6709mipmap\u7684\u60c5\u51b5\u4e0b\u65e0\u6cd5\u5de5\u4f5c\u3002\u8981\u83b7\u5f97\u4e00\u4e2a\u5de5\u4f5c\u7684\u7eb9\u7406\uff0c\u4f60\u5fc5\u987b\u66f4\u6539\u6700\u5c0f\u5316\u6ee4\u6ce2\u5668\u6216\u5b89\u88c5\u4e00\u7ec4\u5b8c\u6574\u7684mipmap\u3002\u5e78\u8fd0\u7684\u662f\uff0cWebGL\u6709\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u4e3a\u4f60\u751f\u6210mipmap\uff1a</p> <pre><code>gl.generateMipmap(gl.TEXTURE_2D);\n</code></pre> <p>\u7eb9\u7406\u91cd\u590d\u6a21\u5f0f\u51b3\u5b9a\u4e86\u5f53\u7eb9\u7406\u5750\u6807\u8d85\u51fa0.0\u52301.0\u7684\u8303\u56f4\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u7eb9\u7406\u5750\u6807\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u65b9\u5411\u90fd\u6709\u5355\u72ec\u7684\u91cd\u590d\u6a21\u5f0f\u3002\u5728WebGL\u4e2d\uff0c\u53ef\u80fd\u7684\u503c\u662fgl.REPEAT\u3001gl.CLAMP_TO_EDGE\u548cgl.MIRRORED_REPEAT\u3002\u9ed8\u8ba4\u503c\u662fgl.REPEAT\u3002\u5728OpenGL 1.1\u4e2d\uff0c\u6a21\u5f0fCLAMP_TO_EDGE\u88ab\u79f0\u4e3aCLAMP\uff0c\u800cMIRRORED_REPEAT\u662fWebGL\u4e2d\u7684\u65b0\u529f\u80fd\u3002\u4f7f\u7528MIRRORED_REPEAT\u65f6\uff0c\u7eb9\u7406\u56fe\u50cf\u4f1a\u91cd\u590d\u4ee5\u8986\u76d6\u6574\u4e2a\u5e73\u9762\uff0c\u4f46\u6bcf\u9694\u4e00\u4e2a\u56fe\u50cf\u5c31\u4f1a\u88ab\u53cd\u5c04\u3002\u8fd9\u53ef\u4ee5\u6d88\u9664\u526f\u672c\u4e4b\u95f4\u7684\u53ef\u89c1\u63a5\u7f1d\u3002\u8981\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u8bbe\u7f6e\u7eb9\u7406\u4f7f\u7528\u955c\u50cf\u91cd\u590d\uff0c\u4f7f\u7528\uff1a</p> <pre><code>gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n</code></pre> <p>\u5728WebGL\u4e2d\uff0c\u7eb9\u7406\u5750\u6807\u901a\u5e38\u4f5c\u4e3a\u7c7b\u578b\u4e3avec2\u7684\u5c5e\u6027\u8f93\u5165\u5230\u9876\u70b9\u7740\u8272\u5668\u4e2d\u3002\u5b83\u4eec\u901a\u8fc7\u53d8\u5316\u53d8\u91cf\u4f20\u9012\u5230\u7247\u6bb5\u7740\u8272\u5668\u3002\u901a\u5e38\uff0c\u9876\u70b9\u7740\u8272\u5668\u4f1a\u5c06\u5c5e\u6027\u7684\u503c\u7b80\u5355\u5730\u590d\u5236\u5230\u53d8\u5316\u53d8\u91cf\u4e2d\u3002\u53e6\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u5728\u5c06\u5750\u6807\u4f20\u9012\u5230\u7247\u6bb5\u7740\u8272\u5668\u4e4b\u524d\uff0c\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u5bf9\u5750\u6807\u5e94\u7528\u4eff\u5c04\u7eb9\u7406\u53d8\u6362\u3002\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\uff0c\u7eb9\u7406\u5750\u6807\u7528\u4e8e\u5bf9\u7eb9\u7406\u8fdb\u884c\u91c7\u6837\u3002GLSL ES 1.00\u4e2d\u7528\u4e8e\u91c7\u6837\u666e\u901a\u7eb9\u7406\u7684\u51fd\u6570\u662f\uff1a</p> <pre><code>texture2D(samplerVariable, textureCoordinates);\n</code></pre> <p>\u5176\u4e2dsamplerVariable\u662f\u4ee3\u8868\u7eb9\u7406\u7684\u7c7b\u578b\u4e3asampler2D\u7684\u7edf\u4e00\u53d8\u91cf\uff0ctextureCoordinates\u662f\u5305\u542b\u7eb9\u7406\u5750\u6807\u7684vec2\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2aRGBA\u989c\u8272\uff0c\u8868\u793a\u4e3a\u7c7b\u578bvec4\u7684\u503c\u3002\u4f5c\u4e3a\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u7247\u6bb5\u7740\u8272\u5668\uff0c\u5b83\u7b80\u5355\u5730\u4f7f\u7528\u4ece\u7eb9\u7406\u4e2d\u91c7\u6837\u7684\u503c\u4f5c\u4e3a\u50cf\u7d20\u7684\u989c\u8272\u3002</p> <pre><code>precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_texCoords;\nvoid main() {\n    vec4 color = texture2D(u_texture, v_texCoords);\n    gl_FragColor = color;\n}\n</code></pre> <p>\u8fd9\u4e2a\u7740\u8272\u5668\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8fwebgl/simple-texture.html\u3002</p> <p>\u6709\u65f6\u7eb9\u7406\u4f1a\u7528\u5728gl.POINTS\u7c7b\u578b\u7684\u539f\u8bed\u4e0a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f88\u81ea\u7136\u5730\u4ece\u7279\u6b8a\u7684\u7247\u6bb5\u7740\u8272\u5668\u53d8\u91cfgl_PointCoord\u4e2d\u83b7\u53d6\u50cf\u7d20\u7684\u7eb9\u7406\u5750\u6807\u3002\u4e00\u4e2a\u70b9\u88ab\u6e32\u67d3\u4e3a\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0cgl_PointCoord\u4e2d\u7684\u5750\u6807\u5728\u6b63\u65b9\u5f62\u4e0a\u4ece0.0\u52301.0\u8303\u56f4\u5185\u3002\u6240\u4ee5\uff0c\u4f7f\u7528gl_PointCoord\u610f\u5473\u7740\u4e00\u4e2a\u7eb9\u7406\u526f\u672c\u5c06\u88ab\u7c98\u8d34\u5230\u70b9\u4e0a\u3002\u5982\u679cPOINTS\u539f\u8bed\u6709\u591a\u4e2a\u9876\u70b9\uff0c\u4f60\u5c06\u5728\u6bcf\u4e2a\u9876\u70b9\u7684\u4f4d\u7f6e\u770b\u5230\u7eb9\u7406\u7684\u526f\u672c\u3002\u8fd9\u662f\u4e00\u79cd\u5c06\u56fe\u50cf\u6216\u591a\u4e2a\u56fe\u50cf\u526f\u672c\u653e\u5165\u573a\u666f\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u8fd9\u79cd\u6280\u672f\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u70b9\u7cbe\u7075\u201d\u3002</p> <p>\u4ee5\u4e0b\u6f14\u793a\u7ed8\u5236\u4e86\u4e00\u4e2a\u7c7b\u578b\u4e3agl.POINTS\u7684\u5355\u7eb9\u7406\u539f\u8bed\uff0c\u4ee5\u4fbf\u4f60\u53ef\u4ee5\u770b\u5230\u5b83\u7684\u5916\u89c2\u3002\u5728\u6f14\u793a\u4e2d\uff0c\u53ea\u7ed8\u5236\u4e86\u6bcf\u4e2a\u6b63\u65b9\u5f62\u70b9\u7684\u5706\u5f62\u5207\u53e3\u3002</p> <p></p> <p>WebGL\u4e2d\u7684\u7eb9\u7406\u56fe\u50cf\u7684\u50cf\u7d20\u6570\u636e\u4ece\u56fe\u50cf\u5e95\u90e8\u7684\u50cf\u7d20\u884c\u5f00\u59cb\u5b58\u50a8\uff0c\u5e76\u4ece\u90a3\u91cc\u5411\u4e0a\u5de5\u4f5c\u3002\u5f53WebGL\u901a\u8fc7\u4ece\u56fe\u50cf\u4e2d\u8bfb\u53d6\u6570\u636e\u6765\u521b\u5efa\u7eb9\u7406\u65f6\uff0c\u5b83\u5047\u8bbe\u56fe\u50cf\u4f7f\u7528\u76f8\u540c\u7684\u683c\u5f0f\u3002\u7136\u800c\uff0c\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u7684\u56fe\u50cf\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u5b58\u50a8\uff0c\u4ece\u56fe\u50cf\u7684\u9876\u90e8\u50cf\u7d20\u884c\u5f00\u59cb\u5e76\u5411\u4e0b\u5de5\u4f5c\u3002\u8fd9\u79cd\u4e0d\u5339\u914d\u7684\u7ed3\u679c\u662f\u7eb9\u7406\u56fe\u50cf\u5c06\u51fa\u73b0\u5012\u7f6e\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u7eb9\u7406\u5750\u6807\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u7136\u800c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u544a\u8bc9WebGL\u5728\u201c\u89e3\u5305\u201d\u5b83\u4eec\u65f6\u4e3a\u4f60\u53cd\u8f6c\u56fe\u50cf\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u8c03\u7528</p> <pre><code>gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n</code></pre> <p>\u901a\u5e38\uff0c\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u8fd9\u6837\u505a\u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8egl.POINTS\u539f\u8bed\uff0cgl_PointCoord\u4f7f\u7528\u7684\u5750\u6807\u7cfb\u5df2\u7ecf\u662f\u5012\u7f6e\u7684\uff0cy\u5750\u6807\u4ece\u4e0a\u5230\u4e0b\u589e\u52a0\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u6b63\u5728\u4e3a\u4f7f\u7528\u5728POINTS\u539f\u8bed\u4e0a\u7684\u56fe\u50cf\u52a0\u8f7d\u7eb9\u7406\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5c06gl.UNPACK_FLIP_Y_WEBGL\u8bbe\u7f6e\u56de\u5176\u9ed8\u8ba4\u503c0\u3002</p> <p>An image can be loaded into a texture object using the function gl.texImage2D. For use with WebGL, this function usually has the form</p> <pre><code>gl.texImage2D( target, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image );\n</code></pre> <p>The target is gl.TEXTURE_2D for ordinary textures; there are other targets for loading cubemap textures. The second parameter is the mipmap level, which is 0 for the main image. Although it is possible to load individual mipmaps, that is rarely done. The next two parameters give the format of the texture inside the texture object and in the original image. In WebGL 1.0, the two format parameters should have the same value. Since web images are stored in RGBA format, gl.RGBA is probably the most efficient choice, and there is rarely a need to use anything else. But you can use gl.RGB if you don't need the alpha component. And by using gl.LUMINANCE or gl.LUMINANCE_ALPHA, you can convert the image to grayscale. (Luminance is a weighted average of red, green, and blue that approximates the perceived brightness of a color.) The fourth parameter is always going to be gl.UNSIGNED_BYTE, indicating that the colors in the image are stored using one byte for each color component. Although other values are possible, they don't really make sense for web images.</p> <p>The last parameter in the call to gl.texImage2D is the image. Ordinarily, image will be a DOM image element that has been loaded asynchronously by JavaScript. The image can also be a <code>&lt;canvas&gt;</code> element. This means that you can draw on a canvas, using the HTML canvas 2D graphics API, and then use the canvas as the source for a texture image. You can even do that with an off-screen canvas that is not visible on the web page.</p> <p>The image is loaded into the texture object that is currently bound to target in the currently active texture unit. There is no default texture object; that is, if no texture has been bound when gl.texImage2D is called, an error occurs. The active texture unit is the one that has been selected using gl.activeTexture, or is texture unit 0 if gl.activeTexture has never been called. A texture object is bound to the active texture unit by gl.bindTexture. This was discussed earlier in this section.</p> <p>Using images in WebGL is complicated by the fact that images are loaded asynchronously. That is, the command for loading an image just starts the process of loading the image. You can specify a callback function that will be executed when the loading completes. The image won't actually be available for use until after the callback function is called. When loading an image to use as a texture, the callback function should load the image into a texture object. Often, it will also call a rendering function to draw the scene, with the texture image.</p> <p>The sample program webgl/simple-texture.html is an example of using a single texture on a triangle. Here is a function that is used to load the texture image in that program. The texture object is created before the function is called.</p> <pre><code>/**\n *  Loads a texture image asynchronously.  The first parameter is the url\n *  from which the image is to be loaded.  The second parameter is the\n *  texture object into which the image is to be loaded.  When the image\n *  has finished loading, the draw() function will be called to draw the\n *  triangle with the texture.  (Also, if an error occurs during loading,\n *  an error message is displayed on the page, and draw() is called to\n *  draw the triangle without the texture.)\n */\nfunction loadTexture( url, textureObject ) {\n    const  img = new Image();  //  A DOM image element to represent the image.\n    img.onload = function() { \n        // This function will be called after the image loads successfully.\n        // We have to bind the texture object to the TEXTURE_2D target before\n        // loading the image into the texture object. \n        gl.bindTexture(gl.TEXTURE_2D, textureObject);\n        try {\n        gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,img);\n        gl.generateMipmap(gl.TEXTURE_2D);  // Create mipmaps; you must either\n                            // do this or change the minification filter.\n        }\n        catch (e) { // Probably a security exception, because this page has been\n                    // loaded through a file:// URL.\n            document.getElementById(\"headline\").innerHTML =\n            \"Sorry, couldn't load texture.&lt;br&gt;\" +\n            \"Some web browsers won't use images from a local disk\";\n        }\n        draw();  // Draw the canvas, with or without the texture.  \n    };\n    img.onerror = function() { \n        // This function will be called if an error occurs while loading.\n        document.getElementById(\"headline\").innerHTML =\n                        \"&lt;p&gt;Sorry, texture image could not be loaded.&lt;/p&gt;\";\n        draw();  // Draw without the texture; triangle will be black.\n    };\n    img.src = url;  // Start loading of the image.\n                    // This must be done after setting onload and onerror.\n}\n</code></pre> <p>Note that image textures for WebGL 1.0 should be power-of-two textures. That is, the width and the height of the image should each be a power of 2, such as 128, 256, or 512. You can, in fact, use non-power-of-two textures, but you can't use mipmaps with such textures, and the only texture repeat mode that is supported by such textures is gl.CLAMP_TO_EDGE. (WebGL 2.0 does not have these restrictions.)</p> <p>(The try..catch statement is used in this function because most web browsers will throw a security exception when a page attempts to use an image from the local file system as a texture. This means that if you attempt to run a program that uses textures from a downloaded version of this book, the programs that use textures might not work.)</p> <p>There are several parameters associated with a texture object, including the texture repeat modes and the minification and magnification filters. They can be set using the function gl.texParameteri. The setting applies to the currently bound texture object. Most of the details are the same as in OpenGL 1.1 (Subsection 4.3.3). For example, the minification filter can be set to LINEAR using</p> <pre><code>gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n</code></pre> <p>Recall that the default minification filter won't work without mipmaps. To get a working texture, you have to change the minification filter or install a full set of mipmaps. Fortunately, WebGL has a function that will generate the mipmaps for you:</p> <pre><code>gl.generateMipmap( gl.TEXTURE_2D );\n</code></pre> <p>The texture repeat modes determine what happens when texture coordinates lie outside the range 0.0 to 1.0. There is a separate repeat mode for each direction in the texture coordinate system. In WebGL, the possible values are gl.REPEAT, gl.CLAMP_TO_EDGE, and gl.MIRRORED_REPEAT. The default is gl.REPEAT. The mode CLAMP_TO_EDGE was called CLAMP in OpenGL 1.1, and MIRRORED_REPEAT is new in WebGL. With MIRRORED_REPEAT, the texture image is repeated to cover the entire plane, but every other copy of the image is reflected. This can eliminate visible seams between the copies. To set a texture to use mirrored repeat in both directions, use</p> <pre><code>gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\ngl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n</code></pre> <p>In WebGL, texture coordinates are usually input to the vertex shader as an attribute of type vec2. They are communicated to the fragment shader in a varying variable. Often, the vertex shader will simply copy the value of the attribute into the varying variable. Another possibility is to apply an affine texture transformation to the coordinates in the vertex shader before passing them on to the fragment shader. In the fragment shader, the texture coordinates are used to sample a texture. The GLSL ES 1.00 function for sampling an ordinary texture is</p> <pre><code>texture2D( samplerVariable, textureCoordinates );\n</code></pre> <p>where samplerVariable is the uniform variable of type sampler2D that represents the texture, and textureCoordinates is a vec2 containing the texture coordinates. The return value is an RGBA color, represented as a value of type vec4. As a very minimal example, here is a fragment shader that simply uses the sampled value from the texture as the color of the pixel.</p> <pre><code>precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_texCoords;\nvoid main() {\nvec4 color = texture2D( u_texture, v_texCoords );\ngl_FragColor = color;\n}\n</code></pre> <p>This shader is from the sample program webgl/simple-texture.html.</p> <p>Textures are sometimes used on primitives of type gl.POINTS. In that case, it's natural to get the texture coordinates for a pixel from the special fragment shader variable gl_PointCoord. A point is rendered as a square, and the coordinates in gl_PointCoord range from 0.0 to 1.0 over that square. So, using gl_PointCoord means that one copy of the texture will be pasted onto the point. If the POINTS primitive has more than one vertex, you will see a copy of the texture at the location of each vertex. This is an easy way to put an image, or multiple copies of an image, into a scene. The technique is sometimes referred to as \"point sprites.\"</p> <p>The following demo draws a single textured primitive of type gl.POINTS, so you can see what it looks like. In the demo, only a circular cutout from each square point is drawn.</p> <p></p> <p>The pixel data for a texture image in WebGL is stored in memory starting with the row of pixels at the bottom of the image and working up from there. When WebGL creates the texture by reading the data from an image, it assumes that the image uses the same format. However, images in a web browser are stored in the opposite order, starting with the pixels in the top row of the image and working down. The result of this mismatch is that texture images will appear upside down. You can account for this by modifying your texture coordinates. However, you can also tell WebGL to invert the images for you as it \"unpacks\" them. To do that, call</p> <pre><code>gl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, 1 );\n</code></pre> <p>Generally, you can do this as part of initialization. Note however that for gl.POINTS primitives, the coordinate system used by gl_PointCoord is already upside down, with the y-coordinate increasing from top to bottom. So, if you are loading an image for use on a POINTS primitive, you might want to set gl.UNPACK_FLIP_Y_WEBGL to its default value, 0.</p>"},{"location":"cn/c6/s4/#643-\u66f4\u591a\u5236\u4f5c\u7eb9\u7406\u7684\u65b9\u6cd5","title":"6.4.3 \u66f4\u591a\u5236\u4f5c\u7eb9\u7406\u7684\u65b9\u6cd5","text":"<p>More Ways to Make Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u5982\u4f55\u4f7f\u7528gl.texImage2D\u4ece\u56fe\u50cf\u6216\u753b\u5e03\u5143\u7d20\u521b\u5efa\u7eb9\u7406\u3002\u5728WebGL\u4e2d\uff0c\u8fd8\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5236\u4f5c\u56fe\u50cf\u7eb9\u7406\u3002\u9996\u5148\uff0c\u51fd\u6570</p> <pre><code>glCopyTexImage2D( target, mipmapLevel, internalFormat,\n                x, y, width, height, border );\n</code></pre> <p>\u5728WebGL\u4e2d\u4e5f\u5b58\u5728\uff0c\u8fd9\u57284.3.6\u5c0f\u8282\u4e2d\u6709\u6240\u6db5\u76d6\u3002\u8fd9\u4e2a\u51fd\u6570\u4ece\u989c\u8272\u7f13\u51b2\u533a\uff08WebGL\u5728\u5176\u4e0a\u6e32\u67d3\u56fe\u50cf\u7684\u5730\u65b9\uff09\u590d\u5236\u6570\u636e\u5230\u5f53\u524d\u7ed1\u5b9a\u7684\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u6570\u636e\u6765\u81ea\u989c\u8272\u7f13\u51b2\u533a\u4e2d\u7684\u77e9\u5f62\u533a\u57df\uff0c\u8be5\u533a\u57df\u5177\u6709\u6307\u5b9a\u7684width\u548c\u9ad8\u5ea6\uff0c\u5176\u5de6\u4e0b\u89d2\u4f4d\u4e8e(x,y)\u3002internalFormat\u901a\u5e38\u662fgl.RGBA\u3002\u5bf9\u4e8eWebGL\uff0cborder\u5fc5\u987b\u662f\u96f6\u3002\u4f8b\u5982\uff0c</p> <pre><code>glCopyTexImage2D(gl.TEXTURE_2, 0, gl.RGBA, 0, 0, 256, 256, 0);\n</code></pre> <p>\u8fd9\u4ece\u989c\u8272\u7f13\u51b2\u533a\u7684\u5de6\u4e0b\u89d2256\u50cf\u7d20\u6b63\u65b9\u5f62\u4e2d\u83b7\u53d6\u7eb9\u7406\u6570\u636e\u3002\uff08\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\uff0c\u5b9e\u9645\u4e0a\u53ef\u80fd\uff0c\u5e76\u4e14\u66f4\u6709\u6548\uff0c\u8ba9WebGL\u76f4\u63a5\u5c06\u56fe\u50cf\u6e32\u67d3\u5230\u7eb9\u7406\u5bf9\u8c61\u4e2d\uff0c\u4f7f\u7528\u6240\u8c13\u7684\u201c\u5e27\u7f13\u51b2\u533a\u201d\u3002\uff09</p> <p>\u4e5f\u8bb8\u66f4\u6709\u8da3\u7684\u662f\uff0c\u80fd\u591f\u76f4\u63a5\u4ece\u6570\u5b57\u6570\u7ec4\u4e2d\u83b7\u53d6\u7eb9\u7406\u6570\u636e\u3002\u8fd9\u4e9b\u6570\u5b57\u5c06\u6210\u4e3a\u7eb9\u7406\u4e2d\u50cf\u7d20\u7684\u989c\u8272\u5206\u91cf\u503c\u3002\u7528\u4e8e\u6b64\u7684\u51fd\u6570\u662ftexImage2D\u7684\u66ff\u4ee3\u7248\u672c\uff1a</p> <pre><code>texImage2D( target, mipmapLevel, internalFormat, width, height,\n        border, dataFormat, dataType, dataArray )\n</code></pre> <p>\u4e00\u4e2a\u5178\u578b\u7684\u51fd\u6570\u8c03\u7528\u5f62\u5f0f\u4e3a</p> <pre><code>gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, \n            0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n</code></pre> <p>\u4e0etexImage2D\u7684\u539f\u59cb\u7248\u672c\u76f8\u6bd4\uff0c\u8fd9\u91cc\u6709\u4e09\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0cwidth\u3001height\u548cborder\u3002width\u548cheight\u6307\u5b9a\u4e86\u7eb9\u7406\u56fe\u50cf\u7684\u5927\u5c0f\u3002\u5bf9\u4e8eWebGL\uff0cborder\u5fc5\u987b\u662f\u96f6\uff0c\u5bf9\u4e8eWebGL 1.0\uff0cinternalFormat\u548cdataFormat\u5fc5\u987b\u76f8\u540c\u3002</p> <p>\u8fd9\u4e2a\u7248\u672c\u7684texImage2D\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u7c7b\u578b\u5316\u6570\u7ec4\uff0c\u7c7b\u578b\u4e3aUint8Array\u6216Uint16Array\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u7eb9\u7406\u7684dataFormat\u3002\u6211\u7684\u4f8b\u5b50\u5c06\u4f7f\u7528Uint8Array\u548c\u7eb9\u7406\u683c\u5f0fgl.RGBA\u6216gl.LUMINANCE\u3002</p> <p>\u5bf9\u4e8eRGBA\u7eb9\u7406\uff0c\u6bcf\u4e2a\u50cf\u7d20\u9700\u8981\u56db\u4e2a\u989c\u8272\u5206\u91cf\u503c\u3002\u8fd9\u4e9b\u503c\u5c06\u4ee5\u65e0\u7b26\u53f7\u5b57\u8282\u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u503c\u8303\u56f4\u4ece0\u5230255\uff0c\u5728Uint8Array\u4e2d\u3002\u6570\u7ec4\u7684\u957f\u5ea6\u5c06\u662f4widthheight\uff08\u5373\u56fe\u50cf\u4e2d\u50cf\u7d20\u6570\u91cf\u7684\u56db\u500d\uff09\u3002\u6570\u7ec4\u4e2d\u5e95\u90e8\u50cf\u7d20\u884c\u7684\u6570\u636e\u9996\u5148\u51fa\u73b0\uff0c\u7136\u540e\u662f\u4e0a\u9762\u7684\u884c\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u7ed9\u5b9a\u884c\u4e2d\u7684\u50cf\u7d20\u4ece\u5de6\u5230\u53f3\u8fd0\u884c\u3002\u5728\u5355\u4e2a\u50cf\u7d20\u7684\u6570\u636e\u4e2d\uff0c\u7ea2\u8272\u5206\u91cf\u9996\u5148\u51fa\u73b0\uff0c\u7136\u540e\u662f\u84dd\u8272\uff0c\u7136\u540e\u662f\u7eff\u8272\uff0c\u7136\u540e\u662falpha\u3002</p> <p>\u4f5c\u4e3a\u4ece\u5934\u5f00\u59cb\u5236\u4f5c\u7eb9\u7406\u6570\u636e\u7684\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u5236\u4f5c\u4e00\u4e2a16x16\u7684\u7eb9\u7406\u56fe\u50cf\uff0c\u56fe\u50cf\u88ab\u5212\u5206\u4e3a\u56db\u4e2a8x8\u7684\u6b63\u65b9\u5f62\uff0c\u5206\u522b\u7740\u4e0a\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3002\u4ee3\u7801\u5229\u7528\u4e86\u521b\u5efa\u7c7b\u578b\u5316\u6570\u7ec4\u65f6\uff0c\u5b83\u6700\u521d\u586b\u5145\u4e86\u96f6\u7684\u4e8b\u5b9e\u3002\u6211\u4eec\u53ea\u9700\u8981\u6539\u53d8\u5176\u4e2d\u7684\u4e00\u4e9b\u96f6\u4e3a255\u3002</p> <pre><code>let pixels = new Uint8Array(4*16*16);  // \u6bcf\u4e2a\u50cf\u7d20\u56db\u4e2a\u5b57\u8282\n\nfor (let i = 0; i &lt; 16; i++) {\n    for (let j = 0; j &lt; 16; j++) {\n        let offset = 64*i + 4*j;    // \u6b64\u50cf\u7d20\u7684\u6570\u636e\u8d77\u59cb\u7d22\u5f15\n        pixels[offset + 3] = 255;    // \u50cf\u7d20\u7684alpha\u503c\n        if (i &lt; 8 &amp;&amp; j &lt; 8) { // \u5de6\u4e0b\u8c61\u9650\u662f\u7ea2\u8272\n            pixels[offset] = 255;  // \u5c06\u7ea2\u8272\u5206\u91cf\u8bbe\u7f6e\u4e3a\u6700\u5927\n        }\n        else if (i &gt;= 8 &amp;&amp; j &gt;= 8) { // \u53f3\u4e0a\u8c61\u9650\u662f\u84dd\u8272\n            pixels[offset + 2] = 255; // \u5c06\u84dd\u8272\u5206\u91cf\u8bbe\u7f6e\u4e3a\u6700\u5927\n        }\n        else { // \u53e6\u5916\u4e24\u4e2a\u8c61\u9650\u662f\u767d\u8272\n            pixels[offset] = 255;     // \u5c06\u6240\u6709\u5206\u91cf\u8bbe\u7f6e\u4e3a\u6700\u5927\n            pixels[offset + 1] = 255;\n            pixels[offset + 2] = 255;\n        }\n    }\n}\n\ntexture = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, \n                0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n</code></pre> <p>\u6700\u540e\u4e00\u884c\u662f\u56e0\u4e3a\u6ca1\u6709mipmap\u65f6\uff0c\u9ed8\u8ba4\u7684\u6700\u5c0f\u5316\u6ee4\u6ce2\u5668\u65e0\u6cd5\u5de5\u4f5c\u3002\u7eb9\u7406\u4f7f\u7528\u9ed8\u8ba4\u7684\u653e\u5927\u6ee4\u6ce2\u5668\uff0c\u4e5f\u662fgl.LINEAR\u3002\u8fd9\u4e2a\u7eb9\u7406\u7528\u5728\u4e0b\u56fe\u4e2d\u5de6\u4e0a\u89d2\u7684\u6b63\u65b9\u5f62\u4e0a\u3002\u56fe\u50cf\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8fwebgl/texture-from-pixels.html\u3002</p> <p></p> <p>\u6ce8\u610f\u5de6\u4e0a\u89d2\u6b63\u65b9\u5f62\u4e2d\u989c\u8272\u8fb9\u7f18\u4e4b\u95f4\u7684\u6df7\u5408\u3002\u6df7\u5408\u662f\u7531gl.LINEAR\u653e\u5927\u6ee4\u6ce2\u5668\u5f15\u8d77\u7684\u3002\u7b2c\u4e8c\u4e2a\u6b63\u65b9\u5f62\u4f7f\u7528\u76f8\u540c\u7684\u7eb9\u7406\uff0c\u4f46\u662f\u4f7f\u7528gl.NEAREST\u653e\u5927\u6ee4\u6ce2\u5668\uff0c\u5b83\u6d88\u9664\u4e86\u6df7\u5408\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u6b63\u65b9\u5f62\u4e2d\u4e5f\u53ef\u4ee5\u770b\u5230\u76f8\u540c\u7684\u6548\u679c\uff0c\u5b83\u4eec\u4f7f\u7528\u9ed1\u767d\u68cb\u76d8\u683c\u56fe\u6848\uff0c\u4e00\u4e2a\u4f7f\u7528gl.Linear\u4f5c\u4e3a\u653e\u5927\u6ee4\u6ce2\u5668\uff0c\u4e00\u4e2a\u4f7f\u7528gl.NEAREST\u3002\u7eb9\u7406\u5728\u6b63\u65b9\u5f62\u4e0a\u6c34\u5e73\u548c\u5782\u76f4\u91cd\u590d\u4e86\u5341\u6b21\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7eb9\u7406\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u76842x2\u56fe\u50cf\uff0c\u6709\u4e24\u4e2a\u9ed1\u8272\u548c\u4e24\u4e2a\u767d\u8272\u50cf\u7d20\u3002</p> <p>\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u8003\u8651\u56fe\u50cf\u4e2d\u53f3\u4e0b\u89d2\u7684\u6b63\u65b9\u5f62\u3002\u8be5\u6b63\u65b9\u5f62\u4e0a\u7684\u6e10\u53d8\u6548\u679c\u6765\u81ea\u4e8e\u4e00\u4e2a\u7eb9\u7406\u3002\u7eb9\u7406\u5927\u5c0f\u4e3a256x1\u50cf\u7d20\uff0c\u989c\u8272\u6cbf\u7740\u7eb9\u7406\u7684\u957f\u5ea6\u4ece\u9ed1\u8272\u53d8\u4e3a\u767d\u8272\u3002\u7eb9\u7406\u7684\u4e00\u4e2a\u526f\u672c\u88ab\u6620\u5c04\u5230\u6b63\u65b9\u5f62\u4e0a\u3002\u5bf9\u4e8e\u6e10\u53d8\u7eb9\u7406\uff0c\u6211\u4f7f\u7528gl.LUMINANCE\u4f5c\u4e3a\u7eb9\u7406\u683c\u5f0f\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u7531\u6bcf\u4e2a\u50cf\u7d20\u4e00\u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u7ed9\u51fa\u8be5\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u3002\u7eb9\u7406\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a</p> <pre><code>let pixels = new Uint8Array(256);  // \u6bcf\u4e2a\u50cf\u7d20\u4e00\u4e2a\u5b57\u8282\nfor (let i = 0; i &lt; 256; i++) {\n    pixels[i] = i;  // \u50cf\u7d20i\u7684\u7070\u5ea6\u503c\u662fi\u3002\n}\n\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, 256, 1, \n                0, gl.LUMINANCE, gl.UNSIGNED_BYTE, pixels);\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u793a\u4f8b\u7a0b\u5e8f\u3002</p> <p>We have seen how to create a texture from an image or canvas element using gl.texImage2D. There are several more ways to make an image texture in WebGL. First of all, the function</p> <pre><code>glCopyTexImage2D( target, mipmapLevel, internalFormat,\n                                    x, y, width, height, border );\n</code></pre> <p>which was covered in Subsection 4.3.6 also exists in WebGL. This function copies data from the color buffer (where WebGL renders its images) into the currently bound texture object. The data is taken from the rectangular region in the color buffer with the specified width and height and with its lower left corner at (x,y). The internalFormat is usually gl.RGBA. For WebGL, the border must be zero. For example,</p> <pre><code>glCopyTexImage2D( gl.TEXTURE_2, 0, gl.RGBA, 0, 0, 256, 256, 0);\n</code></pre> <p>This takes the texture data from a 256-pixel square in the bottom left corner of the color buffer. (In a later chapter, we will see that it is actually possible, and more efficient, for WebGL to render an image directly to a texture object, using something called a \"framebuffer.\")</p> <p>More interesting, perhaps, is the ability to take the texture data directly from an array of numbers. The numbers will become the color component values for the pixels in the texture. The function that is used for this is an alternative version of texImage2D:</p> <pre><code>texImage2D( target, mipmapLevel, internalFormat, width, height,\n                                border, dataFormat, dataType, dataArray )\n</code></pre> <p>and a typical function call would have the form</p> <pre><code>gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, \n                                0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n</code></pre> <p>Compared to the original version of texImage2D, there are three extra parameters, width, height, and border. The width and height specify the size of the texture image. For WebGL, the border must be zero, and for WebGL 1.0, the internalFormat and dataFormat must be the same.</p> <p>The last parameter in this version of texImage2D must be a typed array of type Uint8Array or Uint16Array, depending on the dataFormat of the texture. My examples will use Uint8Array and texture format gl.RGBA or gl.LUMINANCE.</p> <p>For an RGBA texture, four color component values are needed for each pixel. The values will be given as unsigned bytes, with values ranging from 0 to 255, in a Uint8Array. The length of the array will be 4*width*height (that is, four times the number of pixels in the image). The data for the bottom row of pixels comes first in the array, followed by the row on top of that, and so on, with the pixels in a given row running from left to right. And within the data for one pixel, the red component comes first, followed by the blue, then the green, then the alpha.</p> <p>As an example of making up texture data from scratch, let's make a 16-by-16 texture image, with the image divided into four 8-by-8 squares that are colored red, white, and blue. The code uses the fact that when a typed array is created, it is initially filled with zeros. We just have to change some of those zeros to 255.</p> <pre><code>let pixels = new Uint8Array( 4*16*16 );  // four bytes per pixel\n\nfor (let i = 0; i &lt; 16; i++) {\n    for (let j = 0; j &lt; 16; j++) {\n        let offset = 64*i + 4*j ;    // starting index of data for this pixel\n        pixels[offset + 3] = 255;    // alpha value for the pixel\n        if ( i &lt; 8 &amp;&amp; j &lt; 8) { // bottom left quadrant is red\n            pixels[offset] = 255;  // set red component to maximum\n        }\n        else if ( i &gt;= 8 &amp;&amp; j &gt;= 8 ) { // top right quadrant is blue\n            pixels[offset + 2] = 255; // set blue component to maximum\n        }\n        else { // the other two quadrants are white\n            pixels[offset] = 255;     // set all components to maximum\n            pixels[offset + 1] = 255;\n            pixels[offset + 2] = 255;\n        }\n    }\n}\n\ntexture = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, \n                            0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n</code></pre> <p>The last line is there because the default minification filter won't work without mipmaps. The texture uses the default magnification filter, which is also gl.LINEAR. This texture is used on the leftmost square in the image shown below. The image is from the sample program webgl/texture-from-pixels.html.</p> <p></p> <p>Note the blending along the edges between colors in the leftmost square. The blending is caused by the gl.LINEAR magnification filter. The second square uses the same texture, but with the gl.NEAREST magnification filter, which eliminates the blending. The same effect can be seen in the next two squares, which use a black/white checkerboard pattern, one with gl.Linear as the magnification filter and one using gl.NEAREST. The texture is repeated ten times horizontally and vertically on the square. In this case, the texture is a tiny 2-by-2 image with two black and two white pixels.</p> <p>As another example, consider the rightmost square in the image. The gradient effect on that square comes from a texture. The texture size is 256-by-1 pixels, with the color changing from black to white along the length of the texture. One copy of the texture is mapped to the square. For the gradient texture, I used gl.LUMINANCE as the texture format, which means that the data consists of one byte per pixel, giving the grayscale value for that pixel. The texture can be created using</p> <pre><code>let pixels = new Unit8Array( 256 );  // One byte per pixel\nfor ( let i = 0; i &lt; 256; i++ ) {\n    pixels[i] = i;  // Grayscale value for pixel number i is i.\n}\n\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, 256, 1, \n                            0, gl.LUMINANCE, gl.UNSIGNED_BYTE, pixels);\n</code></pre> <p>See the sample program for more detail.</p>"},{"location":"cn/c6/s4/#644-\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406","title":"6.4.4 \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406","text":"<p>Cubemap Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u57285.3.4\u5c0f\u8282\u4e2d\u9047\u5230\u4e86\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u770b\u5230\u4e86\u5b83\u4eec\u662f\u5982\u4f55\u5728three.js\u4e2d\u7528\u4e8e\u5929\u7a7a\u76d2\u548c\u73af\u5883\u6620\u5c04\u7684\u3002WebGL\u5185\u7f6e\u4e86\u5bf9\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u652f\u6301\u3002\u4e0e\u8868\u793a\u666e\u901a\u56fe\u50cf\u7eb9\u7406\u4e0d\u540c\uff0c\u7eb9\u7406\u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u7acb\u65b9\u4f53\u8d34\u56fe\u3002\u5e76\u4e14\u4e24\u4e2a\u7eb9\u7406\u5bf9\u8c61\u53ef\u4ee5\u540c\u65f6\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2a\u7eb9\u7406\u5355\u5143\uff0c\u4e00\u4e2a\u5305\u542b\u666e\u901a\u7eb9\u7406\uff0c\u4e00\u4e2a\u5305\u542b\u7acb\u65b9\u4f53\u8d34\u56fe\u3002\u8fd9\u4e24\u79cd\u7eb9\u7406\u7ed1\u5b9a\u5230\u4e0d\u540c\u7684\u76ee\u6807\uff0cgl.TEXTURE_2D\u548cgl.TEXTURE_CUBE_MAP\u3002\u901a\u8fc7\u8c03\u7528</p> <pre><code>gl.bindTexture(gl.TEXTURE_CUBE_MAP, texObj);\n</code></pre> <p>\u53ef\u4ee5\u5c06\u7eb9\u7406\u5bf9\u8c61texObj\u7ed1\u5b9a\u5230\u5f53\u524d\u6d3b\u52a8\u7eb9\u7406\u5355\u5143\u7684\u7acb\u65b9\u4f53\u8d34\u56fe\u76ee\u6807\u4e0a\u3002</p> <p>\u4e00\u4e2a\u7ed9\u5b9a\u7684\u7eb9\u7406\u5bf9\u8c61\u53ef\u4ee5\u662f\u5e38\u89c4\u7eb9\u7406\u6216\u7acb\u65b9\u4f53\u8d34\u56fe\uff0c\u4f46\u4e0d\u80fd\u4e24\u8005\u90fd\u662f\u3002\u4e00\u65e6\u5b83\u88ab\u7ed1\u5b9a\u5230\u4e00\u4e2a\u7eb9\u7406\u76ee\u6807\u4e0a\uff0c\u5b83\u5c31\u4e0d\u80fd\u88ab\u91cd\u65b0\u7ed1\u5b9a\u5230\u53e6\u4e00\u4e2a\u76ee\u6807\u3002</p> <p>\u7acb\u65b9\u4f53\u8d34\u56fe\u7531\u516d\u5e45\u56fe\u50cf\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7acb\u65b9\u4f53\u7684\u6bcf\u4e2a\u9762\u4e00\u5e45\u3002\u5305\u542b\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u7eb9\u7406\u5bf9\u8c61\u6709\u516d\u4e2a\u56fe\u50cf\u63d2\u69fd\uff0c\u7531\u4ee5\u4e0b\u5e38\u91cf\u6807\u8bc6</p> <pre><code>gl.TEXTURE_CUBE_MAP_NEGATIVE_X\ngl.TEXTURE_CUBE_MAP_POSITIVE_X\ngl.TEXTURE_CUBE_MAP_NEGATIVE_Y\ngl.TEXTURE_CUBE_MAP_POSITIVE_Y\ngl.TEXTURE_CUBE_MAP_NEGATIVE_Z\ngl.TEXTURE_CUBE_MAP_POSITIVE_Z\n</code></pre> <p>\u8fd9\u4e9b\u5e38\u91cf\u88ab\u7528\u4f5cgl.texImage2D\u548cgl.copyTexImage2D\u4e2d\u7684\u76ee\u6807\uff0c\u5728gl.TEXTURE_2D\u7684\u4f4d\u7f6e\u3002\uff08\u6ce8\u610f\uff0c\u6709\u516d\u4e2a\u76ee\u6807\u7528\u4e8e\u5c06\u56fe\u50cf\u52a0\u8f7d\u5230\u7acb\u65b9\u4f53\u8d34\u56fe\u5bf9\u8c61\u4e2d\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u76ee\u6807\uff0cgl.TEXTURE_CUBE_MAP\uff0c\u7528\u4e8e\u5c06\u7eb9\u7406\u5bf9\u8c61\u7ed1\u5b9a\u5230\u7eb9\u7406\u5355\u5143\u3002\uff09\u7acb\u65b9\u4f53\u8d34\u56fe\u901a\u5e38\u5b58\u50a8\u4e3a\u4e00\u7ec4\u516d\u4e2a\u56fe\u50cf\uff0c\u8fd9\u4e9b\u56fe\u50cf\u5fc5\u987b\u5206\u522b\u52a0\u8f7d\u5230\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u5f53\u7136\uff0cWebGL\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6e32\u67d3\u8fd9\u516d\u4e2a\u56fe\u50cf\u6765\u521b\u5efa\u7acb\u65b9\u4f53\u3002</p> <p>\u4e0e\u7f51\u7edc\u4e0a\u7684\u56fe\u50cf\u4e00\u6837\uff0c\u8fd9\u91cc\u4e5f\u6709\u5f02\u6b65\u56fe\u50cf\u52a0\u8f7d\u7684\u95ee\u9898\u9700\u8981\u5904\u7406\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5728\u6211\u7684\u793a\u4f8b\u7a0b\u5e8fwebgl/cubemap-fisheye.html\u4e2d\u5982\u4f55\u521b\u5efa\u7acb\u65b9\u4f53\u8d34\u56fe\uff1a</p> <pre><code>function loadCubemapTexture() {\n    const tex = gl.createTexture();\n    let imageCt = 0; // \u5b8c\u6210\u52a0\u8f7d\u7684\u56fe\u50cf\u6570\u91cf\u3002\n\n    load(\"cubemap-textures/park/negx.jpg\", gl.TEXTURE_CUBE_MAP_NEGATIVE_X);\n    load(\"cubemap-textures/park/posx.jpg\", gl.TEXTURE_CUBE_MAP_POSITIVE_X);\n    load(\"cubemap-textures/park/negy.jpg\", gl.TEXTURE_CUBE_MAP_NEGATIVE_Y);\n    load(\"cubemap-textures/park/posy.jpg\", gl.TEXTURE_CUBE_MAP_POSITIVE_Y);\n    load(\"cubemap-textures/park/negz.jpg\", gl.TEXTURE_CUBE_MAP_NEGATIVE_Z);\n    load(\"cubemap-textures/park/posz.jpg\", gl.TEXTURE_CUBE_MAP_POSITIVE_Z);\n\n    function load(url, target) {\n        let img = new Image();\n        img.onload = function() {\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);\n            try {\n                gl.texImage2D(target, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n            }\n            catch (e) {\n                document.getElementById(\"headline\").innerHTML =\n                \"\u65e0\u6cd5\u8bbf\u95ee\u7eb9\u7406\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9b\u6d4f\u89c8\u5668\" +\n                \"\u65e0\u6cd5\u4ece\u672c\u5730\u6587\u4ef6\u4f7f\u7528\u7eb9\u7406\u3002\";\n                return;\n            }\n            imageCt++;\n            if (imageCt === 6) {  // \u6240\u67096\u4e2a\u56fe\u50cf\u90fd\u5df2\u52a0\u8f7d\n                gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n                document.getElementById(\"headline\").innerHTML =\n                \"\u6709\u8da3\u7684\u7acb\u65b9\u4f53\u8d34\u56fe\uff08\u9c7c\u773c\u76f8\u673a\u6548\u679c\uff09\";\n                textureObject = tex;\n                draw();\n            }\n        };\n        img.onerror = function() {\n            document.getElementById(\"headline\").innerHTML =\n            \"\u5bf9\u4e0d\u8d77\uff0c\u65e0\u6cd5\u52a0\u8f7d\u7eb9\u7406\";\n        };\n        img.src = url;\n    }\n}\n</code></pre> <p>\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u56fe\u50cf\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u5927\u5c0f\u3002\u5b83\u4eec\u5fc5\u987b\u662f\u6b63\u65b9\u5f62\u3002\u5927\u5c0f\u5e94\u8be5\u662f2\u7684\u5e42\u3002\u5bf9\u4e8e\u7acb\u65b9\u4f53\u8d34\u56fe\uff0c\u8bf8\u5982\u6700\u5c0f\u5316\u6ee4\u6ce2\u5668\u4e4b\u7c7b\u7684\u7eb9\u7406\u53c2\u6570\u662f\u4f7f\u7528\u76ee\u6807gl.TEXTURE_CUBE_MAP\u8bbe\u7f6e\u7684\uff0c\u5b83\u4eec\u9002\u7528\u4e8e\u7acb\u65b9\u4f53\u7684\u6240\u6709\u516d\u4e2a\u9762\u3002\u4f8b\u5982\uff0c</p> <pre><code>gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n</code></pre> <p>\u540c\u6837\uff0cgl.generateMipmap\u5c06\u4e3a\u6240\u6709\u516d\u4e2a\u9762\u751f\u6210mipmap\uff08\u56e0\u6b64\u76f4\u5230\u6240\u6709\u516d\u4e2a\u56fe\u50cf\u90fd\u5df2\u52a0\u8f7d\u540e\u624d\u5e94\u8be5\u8c03\u7528\u5b83\uff09\u3002</p> <p>\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\uff0c\u7acb\u65b9\u4f53\u8d34\u56fe\u7531\u7c7b\u578b\u4e3asamplerCube\u7684\u7edf\u4e00\u53d8\u91cf\u8868\u793a\u3002\u5728GLSL ES 1.00\u4e2d\uff0c\u4f7f\u7528\u51fd\u6570textureCube\u5bf9\u7eb9\u7406\u8fdb\u884c\u91c7\u6837\u3002\u4f8b\u5982\uff0c</p> <pre><code>vec4 color = textureCube(u_texture, vector);\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8868\u793a\u7eb9\u7406\u7684samplerCube\u53d8\u91cf\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2avec3\u3002\u7acb\u65b9\u4f53\u8d34\u56fe\u4e0d\u662f\u4f7f\u7528\u5e38\u89c4\u7eb9\u7406\u5750\u6807\u8fdb\u884c\u91c7\u6837\u7684\u3002\u76f8\u53cd\uff0c\u4f7f\u7528\u4e00\u4e2a3D\u5411\u91cf\u3002\u76ee\u6807\u662f\u5728\u7eb9\u7406\u4e2d\u9009\u53d6\u4e00\u4e2a\u70b9\u3002\u7eb9\u7406\u4f4d\u4e8e\u7acb\u65b9\u4f53\u7684\u8868\u9762\u4e0a\u3002\u8981\u4f7f\u7528\u5411\u91cf\u5728\u7eb9\u7406\u4e2d\u9009\u53d6\u4e00\u4e2a\u70b9\uff0c\u4ece\u7acb\u65b9\u4f53\u4e2d\u5fc3\u6cbf\u7740\u5411\u91cf\u65b9\u5411\u6295\u5c04\u4e00\u6761\u5c04\u7ebf\uff0c\u5e76\u68c0\u67e5\u8be5\u5c04\u7ebf\u4e0e\u7acb\u65b9\u4f53\u7684\u4ea4\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u628a\u5411\u91cf\u7684\u8d77\u59cb\u70b9\u653e\u5728\u7acb\u65b9\u4f53\u7684\u4e2d\u5fc3\uff0c\u5b83\u5c31\u6307\u5411\u8981\u91c7\u6837\u7eb9\u7406\u7684\u7acb\u65b9\u4f53\u4e0a\u7684\u70b9\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u5728\u8fd9\u4e00\u7ae0\u4e2d\u6ca1\u6709\u8fdb\u884c3D\u56fe\u5f62\u5904\u7406\uff0c\u6211\u4eec\u4e0d\u80fd\u4ee5\u5e38\u89c4\u65b9\u5f0f\u4f7f\u7528\u7acb\u65b9\u56fe\u3002\u793a\u4f8b\u7a0b\u5e8fwebgl/cubemap-fisheye.html\u4ee5\u4e00\u79cd\u6709\u8da3\u4f46\u53ef\u80fd\u4e0d\u592a\u5b9e\u7528\u7684\u65b9\u5f0f\u4f7f\u7528\u7acb\u65b9\u56fe\u3002\u8be5\u7a0b\u5e8f\u4f7f\u75282D\u7eb9\u7406\u5750\u6807\u3002\u7247\u6bb5\u7740\u8272\u5668\u5c06\u4e00\u5bf92D\u7eb9\u7406\u5750\u6807\u8f6c\u6362\u4e3a3D\u5411\u91cf\uff0c\u7136\u540e\u7528\u4e8e\u91c7\u6837\u7acb\u65b9\u4f53\u8d34\u56fe\u3002\u6548\u679c\u7c7b\u4f3c\u4e8e\u7531\u9c7c\u773c\u955c\u5934\u76f8\u673a\u62cd\u6444\u7684\u7167\u7247\u3002\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\u3002</p> <p></p> <p>\u5de6\u4fa7\u7684\u56fe\u7247\u6a21\u4eff\u4e86\u4e00\u4e2a170\u5ea6\u89c6\u573a\u7684\u9c7c\u773c\u955c\u5934\u76f8\u673a\u3002\u53f3\u4fa7\u7684\u89c6\u573a\u662f330\u5ea6\uff0c\u4ee5\u81f3\u4e8e\u5706\u76d8\u8fb9\u7f18\u9644\u8fd1\u7684\u50cf\u7d20\u5b9e\u9645\u4e0a\u663e\u793a\u4e86\u4f4d\u4e8e\u76f8\u673a\u540e\u9762\u7684\u7acb\u65b9\u4f53\u7684\u90e8\u5206\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u5f20\u56fe\u7247\uff0c\u7a0b\u5e8f\u7ed8\u5236\u4e00\u4e2a\u7eb9\u7406\u5750\u6807\u8303\u56f4\u4ece0.0\u52301.0\u7684\u6b63\u65b9\u5f62\u3002\u5728\u7eb9\u7406\u5750\u6807\u7cfb\u7edf\u4e2d\uff0c\u8ddd\u79bb\u70b9(0.5,0.5)\u5927\u4e8e0.5\u7684\u50cf\u7d20\u88ab\u7740\u8272\u4e3a\u767d\u8272\u3002\u5728\u534a\u5f84\u4e3a0.5\u7684\u5706\u76d8\u5185\uff0c\u56f4\u7ed5\u4e2d\u5fc3\u7684\u6bcf\u4e2a\u5706\u5708\u88ab\u6620\u5c04\u5230\u5355\u4f4d\u7403\u4e0a\u7684\u4e00\u4e2a\u5706\u5708\u3002\u7136\u540e\u8be5\u70b9\u88ab\u7528\u4f5c\u91c7\u6837\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u65b9\u5411\u5411\u91cf\u3002\u5728\u5706\u76d8\u4e2d\u5fc3\u51fa\u73b0\u7684\u7eb9\u7406\u4e2d\u7684\u70b9\u662f\u7acb\u65b9\u4f53\u4e0e\u6b63z\u8f74\u76f8\u4ea4\u7684\u70b9\uff0c\u5373\u7acb\u65b9\u56fe\u4e2d\u201c\u6b63z\u201d\u56fe\u50cf\u7684\u4e2d\u5fc3\u3002\u5b9e\u9645\u4e0a\u4f60\u4e0d\u9700\u8981\u7406\u89e3\u8fd9\u4e9b\uff0c\u4f46\u8fd9\u91cc\u662f\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u7684\u7247\u6bb5\u7740\u8272\u5668\uff1a</p> <pre><code>#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nuniform samplerCube u_texture;  \nuniform float u_angle;  // \u89c6\u573a\u89d2\u5ea6\nvarying vec2 v_texCoords;  \nvoid main() {\n    float dist = distance(v_texCoords, vec2(0.5));\n    if (dist &gt; 0.5)\n        gl_FragColor = vec4(1.0);  // \u767d\u8272\n    else {\n        float x, y; // \u76f8\u5bf9\u4e8e\u4e2d\u5fc3(0.5,0.5)\u7684\u5750\u6807\n        x = v_texCoords.x - 0.5; \n        y = v_texCoords.y - 0.5;\n        vec2 circ = normalize(vec2(x, y));  // \u5728\u5355\u4f4d\u5706\u4e0a\n        float phi = radians(u_angle/2.0)*(2.0*dist);  // \u201c\u7eac\u5ea6\u201d\n        vec3 vector = vec3(sin(phi)*circ.x, sin(phi)*circ.y, cos(phi));\n        gl_FragColor = textureCube(u_texture, vector);  \n    } \n}\n</code></pre> <p>We encountered cubemap textures in Subsection 5.3.4, where saw how they are used in three.js for skyboxes and environment mapping. WebGL has built-in support for cubemap textures. Instead of representing an ordinary image texture, a texture object can hold a cubemap texture. And two texture objects can be bound to the same texture unit simultaneously, one holding an ordinary texture and one holding a cubemap texture. The two textures are bound to different targets, gl.TEXTURE_2D and gl.TEXTURE_CUBE_MAP. A texture object, texObj, is bound to the cubemap target in the currently active texture unit by calling</p> <pre><code>gl.bindTexture( gl.TEXTURE_CUBE_MAP, texObj );\n</code></pre> <p>A given texture object can be either a regular texture or a cubemap texture, not both. Once it has been bound to one texture target, it cannot be rebound to the other target.</p> <p>A cubemap texture consists of six images, one for each face of the cube. A texture object that holds a cubemap texture has six image slots, identified by the constants</p> <pre><code>gl.TEXTURE_CUBE_MAP_NEGATIVE_X\ngl.TEXTURE_CUBE_MAP_POSITIVE_X\ngl.TEXTURE_CUBE_MAP_NEGATIVE_Y\ngl.TEXTURE_CUBE_MAP_POSITIVE_Y\ngl.TEXTURE_CUBE_MAP_NEGATIVE_Z\ngl.TEXTURE_CUBE_MAP_POSITIVE_Z\n</code></pre> <p>The constants are used as the targets in gl.texImage2D and gl.copyTexImage2D, in place of gl.TEXTURE_2D. (Note that there are six targets for loading images into a cubemap texture object, but only one target, gl.TEXTURE_CUBE_MAP, for binding the texture object to a texture unit.) A cubemap texture is often stored as a set of six images, which must be loaded separately into a texture object. Of course, it is also possible for WebGL to create a cubemap by rendering the six images.</p> <p>As usual for images on the web, there is the problem of asynchronous image loading to be dealt with. Here, for example, is a function that creates a cubemap texture in my sample program webgl/cubemap-fisheye.html:</p> <pre><code>function loadCubemapTexture() {\n    const  tex = gl.createTexture();\n    let  imageCt = 0; // Number of images that have finished loading.\n\n    load( \"cubemap-textures/park/negx.jpg\", gl.TEXTURE_CUBE_MAP_NEGATIVE_X );\n    load( \"cubemap-textures/park/posx.jpg\", gl.TEXTURE_CUBE_MAP_POSITIVE_X );\n    load( \"cubemap-textures/park/negy.jpg\", gl.TEXTURE_CUBE_MAP_NEGATIVE_Y );\n    load( \"cubemap-textures/park/posy.jpg\", gl.TEXTURE_CUBE_MAP_POSITIVE_Y );\n    load( \"cubemap-textures/park/negz.jpg\", gl.TEXTURE_CUBE_MAP_NEGATIVE_Z );\n    load( \"cubemap-textures/park/posz.jpg\", gl.TEXTURE_CUBE_MAP_POSITIVE_Z );\n\n    function load(url, target) {\n        let  img = new Image();\n        img.onload = function() {\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);\n            try {\n                gl.texImage2D(target, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n            }\n            catch (e) {\n                document.getElementById(\"headline\").innerHTML =\n                \"Can't access texture.  Note that some browsers\" +\n                \" can't use  a texture from a local file.\";\n                return;\n            }\n            imageCt++;\n            if (imageCt === 6) {  // all 6 images have been loaded\n                gl.generateMipmap( gl.TEXTURE_CUBE_MAP );\n                document.getElementById(\"headline\").innerHTML = \n                                    \"Funny Cubemap (Fisheye Camera Effect)\";\n                textureObject = tex;\n                draw();\n            }\n        };\n        img.onerror = function() {\n            document.getElementById(\"headline\").innerHTML = \n                                            \"SORRY, COULDN'T LOAD TEXTURES\";\n        };\n        img.src = url;\n    }\n}\n</code></pre> <p>The images for a cubemap must all be the same size. They must be square. The size should, as usual, be a power of two. For a cubemap texture, texture parameters such as the minification filter are set using the target gl.TEXTURE_CUBE_MAP, and they apply to all six faces of the cube. For example,</p> <pre><code>gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n</code></pre> <p>Similarly, gl.generateMipmap will generate mipmaps for all six faces (so it should not be called until all six images have been loaded).</p> <p>In a shader program, a cube map texture is represented by a uniform variable of type samplerCube. In GLSL ES 1.00, the texture is sampled using function textureCube. For example,</p> <pre><code>vec4 color = textureCube( u_texture, vector );\n</code></pre> <p>The first parameter is the samplerCube variable that represents the texture. The second parameter is a vec3. Cube map textures are not sampled using regular texture coordinates. Instead, a 3D vector is used. The goal is to pick out a point in the texture. The texture lies on the surface of a cube. To use a vector to pick out a point in the texture, cast a ray from the center of the cube in the direction given by the vector, and check where that ray intersects the cube. That is, if you put the starting point of the vector at the center of the cube, it points to the point on the cube where the texture is to be sampled.</p> <p>Since we aren't doing 3D graphics in this chapter, we can't use cube maps in the ordinary way. The sample program webgl/cubemap-fisheye.html uses a cube map in an interesting, if not very useful way. The program uses 2D texture coordinates. The fragment shader transforms a pair of 2D texture coordinates into a 3D vector that is then used to sample the cubemap texture. The effect is something like a photograph produced by a fisheye camera. Here's what it looks like.</p> <p></p> <p>The picture on the left imitates a fisheye camera with a 170-degree field of view. On the right the field of view is 330-degrees, so that pixels near the edge of the disk actually show parts of the cube that lie behind the camera.</p> <p>For each picture, the program draws a square with texture coordinates ranging from 0.0 to 1.0. In the texture coordinate system, pixels at a distance greater than 0.5 from the point (0.5,0.5) are colored white. Within the disk of radius 0.5, each circle around the center is mapped to a circle on the unit sphere. That point is then used as the direction vector for sampling the cubemap texture. The point in the texture that appears at the center of the disk is the point where the cube intersects the positive z-axis, that is, the center of the \"positive z\" image from the cube map. You don't actually need to understand this, but here, for your information, is the fragment shader that does the work:</p> <pre><code>#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nuniform samplerCube u_texture;  \nuniform float u_angle;  // field of view angle\nvarying vec2 v_texCoords;  \nvoid main() {\nfloat dist =  distance( v_texCoords, vec2(0.5) );\nif (dist &gt; 0.5)\n    gl_FragColor = vec4(1.0);  // white\nelse {\n    float x,y; // coords relative to a center at (0.5,0.5)\n    x = v_texCoords.x - 0.5; \n    y = v_texCoords.y - 0.5;\n    vec2 circ = normalize(vec2(x,y));  // on the unit circle\n    float phi = radians(u_angle/2.0)*(2.0*dist);  // \"latitude\"\n    vec3 vector = vec3(sin(phi)*circ.x, sin(phi)*circ.y, cos(phi));\n    gl_FragColor = textureCube( u_texture, vector );  \n    } \n}\n</code></pre>"},{"location":"cn/c6/s4/#645-\u8ba1\u7b97\u793a\u4f8b","title":"6.4.5 \u8ba1\u7b97\u793a\u4f8b","text":"<p>A Computational Example</p> \u4e2d\u6587\u82f1\u6587 <p>GPU\u53ef\u4ee5\u63d0\u4f9b\u5de8\u5927\u7684\u5904\u7406\u80fd\u529b\u3002\u867d\u7136GPU\u6700\u521d\u662f\u8bbe\u8ba1\u7528\u6765\u6e32\u67d3\u56fe\u50cf\u7684\uff0c\u4f46\u4eba\u4eec\u5f88\u5feb\u610f\u8bc6\u5230\uff0c\u540c\u6837\u7684\u80fd\u529b\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u66f4\u901a\u7528\u7684\u7f16\u7a0b\u3002\u5e76\u975e\u6bcf\u4e2a\u7f16\u7a0b\u4efb\u52a1\u90fd\u80fd\u5229\u7528\u5178\u578bGPU\u7684\u9ad8\u5ea6\u5e76\u884c\u67b6\u6784\uff0c\u4f46\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u5206\u89e3\u4e3a\u8bb8\u591a\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u7684\u5b50\u4efb\u52a1\uff0c\u90a3\u4e48\u901a\u8fc7\u5c06\u5176\u9002\u5e94\u5728GPU\u4e0a\u8fd0\u884c\uff0c\u5c31\u53ef\u80fd\u663e\u8457\u52a0\u901f\u4efb\u52a1\u3002\u73b0\u4ee3GPU\u5df2\u7ecf\u53d8\u5f97\u66f4\u52a0\u8ba1\u7b97\u591a\u6837\u5316\uff0c\u4f46\u5728\u4ec5\u8bbe\u8ba1\u7528\u4e8e\u5904\u7406\u989c\u8272\u7684GPU\u4e2d\uff0c\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u4ee5\u989c\u8272\u503c\u7684\u65b9\u5f0f\u8868\u793a\u8ba1\u7b97\u7684\u6570\u636e\u3002\u901a\u5e38\u7684\u6280\u5de7\u662f\u5c06\u6570\u636e\u8868\u793a\u4e3a\u7eb9\u7406\u4e2d\u7684\u989c\u8272\uff0c\u5e76\u4f7f\u7528\u7eb9\u7406\u67e5\u627e\u51fd\u6570\u8bbf\u95ee\u6570\u636e\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/webgl-game-of-life.html\u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\u3002\u8be5\u7a0b\u5e8f\u5b9e\u73b0\u4e86\u7ea6\u7ff0\u00b7\u5eb7\u5a01\uff08John Conway\uff09\u8457\u540d\u7684\u751f\u547d\u6e38\u620f\uff08\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u6e38\u620f\uff09\u3002\u751f\u547d\u6e38\u620f\u677f\u7531\u4e00\u4e2a\u53ef\u4ee5\u662f\u6d3b\u7ec6\u80de\u6216\u6b7b\u7ec6\u80de\u7684\u5355\u5143\u683c\u7f51\u683c\u7ec4\u6210\u3002\u6709\u4e00\u5957\u89c4\u5219\uff0c\u6839\u636e\u68cb\u76d8\u7684\u5f53\u524d\u72b6\u6001\u6216\u201c\u4e00\u4ee3\u201d\uff0c\u4ea7\u751f\u65b0\u7684\u4e00\u4ee3\u3002\u4e00\u65e6\u4e3a\u6bcf\u4e2a\u5355\u5143\u683c\u5206\u914d\u4e86\u4e00\u4e9b\u521d\u59cb\u72b6\u6001\uff0c\u6e38\u620f\u5c31\u53ef\u4ee5\u81ea\u884c\u8fdb\u884c\uff0c\u6839\u636e\u89c4\u5219\u4ea7\u751f\u4e00\u4ee3\u53c8\u4e00\u4ee3\u3002\u89c4\u5219\u6839\u636e\u5f53\u524d\u4e00\u4ee3\u7684\u7ec6\u80de\u53ca\u5176\u516b\u4e2a\u90bb\u8fd1\u7ec6\u80de\u7684\u72b6\u6001\u8ba1\u7b97\u4e0b\u4e00\u4ee3\u7684\u7ec6\u80de\u72b6\u6001\u3002\u8981\u5e94\u7528\u89c4\u5219\uff0c\u60a8\u5fc5\u987b\u67e5\u770b\u6bcf\u4e2a\u90bb\u8fd1\u7ec6\u80de\u5e76\u8ba1\u7b97\u6d3b\u7ec6\u80de\u90bb\u5c45\u7684\u6570\u91cf\u3002\u76f8\u540c\u7684\u8fc7\u7a0b\u9002\u7528\u4e8e\u6bcf\u4e2a\u7ec6\u80de\uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u6613\u4e8e\u5e76\u884c\u5316\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u8f7b\u677e\u9002\u5e94\u5728GPU\u4e0a\u8fd0\u884c\u3002</p> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u751f\u547d\u6e38\u620f\u677f\u662f\u4e00\u4e2a1024x1024\u7684\u753b\u5e03\uff0c\u6bcf\u4e2a\u50cf\u7d20\u4ee3\u8868\u4e00\u4e2a\u5355\u5143\u683c\u3002\u6d3b\u7ec6\u80de\u88ab\u6d82\u6210\u767d\u8272\uff0c\u6b7b\u7ec6\u80de\u662f\u9ed1\u8272\u7684\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528WebGL\u6839\u636e\u5f53\u524d\u68cb\u76d8\u8ba1\u7b97\u68cb\u76d8\u7684\u4e0b\u4e00\u4ee3\u3002\u5de5\u4f5c\u662f\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u5b8c\u6210\u7684\u3002\u8981\u89e6\u53d1\u8ba1\u7b97\uff0c\u7ed8\u5236\u4e00\u4e2a\u8986\u76d6\u6574\u4e2a\u753b\u5e03\u7684\u6b63\u65b9\u5f62\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u7247\u6bb5\u7740\u8272\u5668\u88ab\u8c03\u7528\u753b\u5e03\u4e0a\u7684\u6bcf\u4e2a\u50cf\u7d20\u3002\u7247\u6bb5\u7740\u8272\u5668\u9700\u8981\u8bbf\u95ee\u7247\u6bb5\u53ca\u5176\u516b\u4e2a\u90bb\u5c45\u7684\u5f53\u524d\u989c\u8272\uff0c\u4f46\u5b83\u65e0\u6cd5\u76f4\u63a5\u67e5\u8be2\u8fd9\u4e9b\u989c\u8272\u3002\u4e3a\u4e86\u7ed9\u7740\u8272\u5668\u63d0\u4f9b\u8fd9\u4e9b\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4f7f\u7528\u51fd\u6570gl.copyTexImage2D()\u5c06\u68cb\u76d8\u590d\u5236\u5230\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\u7136\u540e\uff0c\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u4f7f\u7528GLSL\u7eb9\u7406\u67e5\u627e\u51fd\u6570texture2D()\u83b7\u53d6\u6240\u9700\u7684\u4fe1\u606f\u3002</p> <p>\u6709\u8da3\u7684\u4e00\u70b9\u662f\uff0c\u7247\u6bb5\u7740\u8272\u5668\u4e0d\u4ec5\u9700\u8981\u81ea\u8eab\u7684\u7eb9\u7406\u5750\u6807\uff0c\u8fd8\u9700\u8981\u5176\u90bb\u5c45\u7684\u7eb9\u7406\u5750\u6807\u3002\u7247\u6bb5\u672c\u8eab\u7684\u7eb9\u7406\u5750\u6807\u4f5c\u4e3a\u53d8\u5316\u53d8\u91cf\u4f20\u9012\u5230\u7247\u6bb5\u7740\u8272\u5668\uff0c\u6bcf\u4e2a\u5750\u6807\u7684\u503c\u8303\u56f4\u4e3a0\u52301\u3002\u5b83\u53ef\u4ee5\u901a\u8fc7\u5728\u5176\u81ea\u8eab\u7684\u7eb9\u7406\u5750\u6807\u4e0a\u6dfb\u52a0\u504f\u79fb\u91cf\u6765\u83b7\u53d6\u90bb\u5c45\u7684\u7eb9\u7406\u5750\u6807\u3002\u7531\u4e8e\u7eb9\u7406\u662f1024x1024\u50cf\u7d20\uff0c\u56e0\u6b64\u90bb\u5c45\u7684\u7eb9\u7406\u5750\u6807\u9700\u8981\u504f\u79fb1.0/1024.0\u3002\u4ee5\u4e0b\u662f\u5b8c\u6574\u7684GLSL ES 1.00\u7247\u6bb5\u7740\u8272\u5668\u7a0b\u5e8f\uff1a</p> <pre><code>#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nvarying vec2 v_coords;     // \u6b64\u5355\u5143\u683c\u7684\u7eb9\u7406\u5750\u6807\nconst float scale = 1.0/1024.0;  // 1.0/\u753b\u5e03\u5927\u5c0f\uff1b\uff08\u5728\u7eb9\u7406\u5750\u6807\u4e2d\n                                //   \u90bb\u8fd1\u5355\u5143\u683c\u4e4b\u95f4\u7684\u504f\u79fb\uff09\nuniform sampler2D source;  // \u6301\u6709\u524d\u4e00\u4ee3\u7684\u7eb9\u7406\n\nvoid main() {\n    int alive;  // \u8fd9\u4e2a\u5355\u5143\u683c\u662f\u6d3b\u7684\u5417\uff1f\n    if (texture2D(source,v_coords).r &gt; 0.0)\n        alive = 1;\n    else\n        alive = 0;\n\n    // \u8ba1\u7b97\u6d3b\u90bb\u5c45\u7684\u6570\u91cf\u3002\u8981\u68c0\u67e5\u662f\u5426\u6d3b\u7740\uff0c\u53ea\u9700\u6d4b\u8bd5\n    // \u989c\u8272\u7684\u7ea2\u8272\u5206\u91cf\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u6d3b\u7ec6\u80de\u76841.0\u548c\u4e00\u4e2a\n    // \u6b7b\u7ec6\u80de\u76840.0\u3002\n\n    int neighbors = 0; // \u5c06\u662f\u4e00\u4e2a\u6d3b\u90bb\u5c45\u7684\u6570\u91cf\n\n    if (texture2D(source,v_coords+vec2(scale,scale)).r &gt; 0.0)\n        neighbors += 1;\n    if (texture2D(source,v_coords+vec2(scale,0)).r &gt; 0.0)\n        neighbors += 1;\n    if (texture2D(source,v_coords+vec2(scale,-scale)).r &gt; 0.0)\n        neighbors += 1;\n\n    if (texture2D(source,v_coords+vec2(0,scale)).r &gt; 0.0)\n        neighbors += 1;\n    if (texture2D(source,v_coords+vec2(0,-scale)).r &gt; 0.0)\n        neighbors += 1;\n\n    if (texture2D(source,v_coords+vec2(-scale,scale)).r &gt; 0.0)\n        neighbors += 1;\n    if (texture2D(source,v_coords+vec2(-scale,0)).r &gt; 0.0)\n        neighbors += 1;\n    if (texture2D(source,v_coords+vec2(-scale,-scale)).r &gt; 0.0)\n        neighbors += 1;\n\n    // \u4f7f\u7528\u751f\u547d\u89c4\u5219\u8f93\u51fa\u6b64\u5355\u5143\u683c\u7684\u65b0\u989c\u8272\u3002\n\n    float color = 0.0; // \u6b7b\u7ec6\u80de\u7684\u989c\u8272\n    if (alive == 1) {\n        if (neighbors == 2 || neighbors == 3)\n            color = 1.0; // \u6d3b\u7ec6\u80de\u7684\u989c\u8272\uff1b\u7ec6\u80de\u4fdd\u6301\u6d3b\u529b\n    }\n    else if ( neighbors == 3 )\n        color = 1.0; // \u6d3b\u7ec6\u80de\u7684\u989c\u8272\uff1b\u7ec6\u80de\u590d\u6d3b\n\n    gl_FragColor = vec4(color, color, color, 1);\n}\n</code></pre> <p>\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u6709\u8da3\u7684\u70b9\u3002\u5728\u521b\u5efaWebGL\u56fe\u5f62\u4e0a\u4e0b\u6587\u65f6\uff0c\u4f1a\u5173\u95ed\u53cd\u952f\u9f7f\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u50cf\u7d20\u5b8c\u5168\u662f\u9ed1\u8272\u6216\u767d\u8272\u3002\u53cd\u952f\u9f7f\u53ef\u80fd\u4f1a\u901a\u8fc7\u5e73\u5747\u9644\u8fd1\u50cf\u7d20\u7684\u989c\u8272\u6765\u6a21\u7cca\u989c\u8272\u3002\u7c7b\u4f3c\u5730\uff0c\u7eb9\u7406\u7684\u653e\u5927\u548c\u7f29\u5c0f\u6ee4\u6ce2\u5668\u88ab\u8bbe\u7f6e\u4e3agl.NEAREST\u4ee5\u907f\u514d\u989c\u8272\u5e73\u5747\u3002\u8fd8\u6709\u5728\u68cb\u76d8\u4e0a\u8bbe\u7f6e\u521d\u59cb\u914d\u7f6e\u7684\u95ee\u9898\u2014\u2014\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528\u5177\u6709\u4e0d\u540c\u7247\u6bb5\u7740\u8272\u5668\u7684\u53e6\u4e00\u4e2a\u7740\u8272\u5668\u7a0b\u5e8f\u5728\u68cb\u76d8\u4e0a\u7ed8\u5236\u6765\u5b8c\u6210\u7684\u3002</p> <p>\u5728\u6211\u7684\u7535\u8111\u4e0a\uff0cwebgl/webgl-game-of-life.html\u53ef\u4ee5\u8f7b\u677e\u5730\u6bcf\u79d2\u8ba1\u7b97360\u4ee3\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u60a8\u5c1d\u8bd5\u4e00\u4e0b\u3002\u89c2\u770b\u5b83\u53ef\u4ee5\u5f88\u6709\u8da3\u3002</p> <p>GPU\u4e0a\u7684\u901a\u7528\u7f16\u7a0b\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\u3002\u73b0\u4ee3GPU\u53ef\u4ee5\u6267\u884c\u4e0e\u989c\u8272\u65e0\u5173\u7684\u8ba1\u7b97\uff0c\u4f7f\u7528\u5404\u79cd\u6570\u503c\u6570\u636e\u7c7b\u578b\u3002\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0cWebGL 2.0\u5df2\u7ecf\u671d\u8fd9\u4e2a\u65b9\u5411\u8fc8\u8fdb\u4e86\u4e00\u70b9\uff0c\u4f46\u4eceWeb\u8bbf\u95eeGPU\u7684\u5168\u90e8\u8ba1\u7b97\u80fd\u529b\u5c06\u9700\u8981\u4e00\u4e2a\u65b0\u7684API\u3002\u76ee\u524d\u6b63\u5728\u5f00\u53d1\u4e2d\u7684WebGPU\uff0c\u5df2\u7ecf\u5728\u4e00\u4e9b\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u4f5c\u4e3a\u5b9e\u9a8c\u6027\u529f\u80fd\u63d0\u4f9b\uff0c\u662f\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\u7684\u5c1d\u8bd5\u3002\uff08\u7136\u800c\uff0c\u4e0eWebGL\u4e0d\u540c\uff0c\u5b83\u4e0d\u57fa\u4e8eOpenGL\u3002\uff09</p> <p>A GPU can offer an immense amount of processing power. Although GPUs were originally designed to apply that power to rendering images, it was quickly realized that the same power could be harnessed to do much more general types of programming. Not every programming task can take advantage of the highly parallel architecture of the typical GPU, but if a task can be broken down into many subtasks that can be run in parallel, then it might be possible to speed up the task significantly by adapting it to run on a GPU. Modern GPUs have become much more computationally versatile, but in GPUs that were designed to work only with colors, that might mean somehow representing the data for a computation as color values. The trick often involves representing the data as colors in a texture, and accessing the data using texture lookup functions.</p> <p>The sample program webgl/webgl-game-of-life.html is a simple example of this approach. The program implements John Conway's well-known Game of Life (which is not really a game). A Life board consists of a grid of cells that can be either alive or dead. There is a set of rules that takes the current state, or \"generation,\" of the board and produces a new generation. Once some initial state has been assigned to each cell, the game can play itself, producing generation after generation, according to the rules. The rules compute the state of a cell in the next generation from the states of the cell and its eight neighboring cells in the current generation. To apply the rules, you have to look at each neighboring cell and count the number of neighbors that are alive. The same process is applied to every cell, so it is a highly parallelizable task that can be easily adapted to run on a GPU.</p> <p>In the sample program, the Life board is a 1024-by-1024 canvas, with each pixel representing a cell. Living cells are colored white, and dead cells are black. The program uses WebGL to compute the next generation of the board from the current board. The work is done in a fragment shader. To trigger the computation, a single square is drawn that covers the entire canvas, which causes the fragment shader to be called for every pixel in the canvas. The fragment shader needs access to the current color of the fragment and of its eight neighbors, but it has no way to query those colors directly. To give the shader access to that information, the program copies the board into a texture object, using the function gl.copyTexImage2D(). The fragment shader can then get the information that it needs using the GLSL texture lookup function texture2D().</p> <p>An interesting point is that the fragment shader needs the texture coordinates not just for itself but for its neighbors. The texture coordinates for the fragment itself are passed into the fragment shader as a varying variable, with values in the range 0 to 1 for each coordinate. It can get the texture coordinates for a neighbor by adding an offset to its own texture coordinates. Since the texture is 1024-by-1024 pixels, the texture coordinates for a neighbor need to be offset by 1.0/1024.0. Here is the complete GLSL ES 1.00 fragment shader program:</p> <pre><code>#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nvarying vec2 v_coords;     // texture coordinates for this cell\nconst float scale = 1.0/1024.0;  // 1.0 / canvas_size; (offset between \n                                //   neighboring cells, in texture coords)\nuniform sampler2D source;  // the texture holding the previous generation\n\nvoid main() {\n    int alive;  // is this cell alive ?\n    if (texture2D(source,v_coords).r &gt; 0.0)\n    alive = 1;\n    else\n    alive = 0;\n\n    // Count the living neighbors.  To check for living, just test\n    // the red component of the color, which will be 1.0 for a\n    // living cell and 0.0. for a dead cell.\n\n    int neighbors = 0; // will be the number of neighbors that are alive\n\n    if (texture2D(source,v_coords+vec2(scale,scale)).r &gt; 0.0)\n    neighbors += 1;\n    if (texture2D(source,v_coords+vec2(scale,0)).r &gt; 0.0)\n    neighbors += 1;\n    if (texture2D(source,v_coords+vec2(scale,-scale)).r &gt; 0.0)\n    neighbors += 1;\n\n    if (texture2D(source,v_coords+vec2(0,scale)).r &gt; 0.0)\n    neighbors += 1;\n    if (texture2D(source,v_coords+vec2(0,-scale)).r &gt; 0.0)\n    neighbors += 1;\n\n    if (texture2D(source,v_coords+vec2(-scale,scale)).r &gt; 0.0)\n    neighbors += 1;\n    if (texture2D(source,v_coords+vec2(-scale,0)).r &gt; 0.0)\n    neighbors += 1;\n    if (texture2D(source,v_coords+vec2(-scale,-scale)).r &gt; 0.0)\n    neighbors += 1;\n\n    // Output the new color for this cell. using the rules of Life.\n\n    float color = 0.0; // color for dead cell\n    if (alive == 1) {\n        if (neighbors == 2 || neighbors == 3)\n        color = 1.0; // color for living cell; cell stays alive\n    }\n    else if ( neighbors == 3 )\n        color = 1.0; // color for living cell; cell comes to life\n\n    gl_FragColor = vec4(color, color, color, 1);\n}\n</code></pre> <p>There are some other points of interest in the program. When the WebGL graphics context is created, anti-aliasing is turned off to make sure that every pixel is either perfectly black or perfectly white. Antialiasing could smear out the colors by averaging the colors of nearby pixels. Similarly, the magnification and minification filters for the texture are set to gl.NEAREST to avoid averaging of colors. Also, there is the issue of setting the initial configuration onto the board\u2014that's done by drawing onto the board using another shader program with a different fragment shader.</p> <p>On my computer, the webgl/webgl-game-of-life.html can easily compute 360 generations per second. I urge you to try it. It can be fun to watch.</p> <p>General purpose programming on GPUs has become more and more important. Modern GPUs can do computations that have nothing to do with color, using various numerical data types. WebGL 2.0, as we'll see, has moved a bit in that direction, but accessing the full computational power of GPUs from the Web will require a new API. WebGPU, currently under development and already available as an experimental feature in some web browsers, is an attempt to fulfill that need. (However, unlike WebGL, it is not based on OpenGL.)</p>"},{"location":"cn/c6/s4/#646-webgl-20-\u4e2d\u7684\u7eb9\u7406","title":"6.4.6 WebGL 2.0 \u4e2d\u7684\u7eb9\u7406","text":"<p>Textures in WebGL 2.0</p> \u4e2d\u6587\u82f1\u6587 <p>WebGL 2.0\u4e2d\u7684\u4e00\u4e2a\u91cd\u5927\u53d8\u5316\u662f\u5927\u5927\u589e\u52a0\u4e86\u5bf9\u7eb9\u7406\u7684\u652f\u6301\u3002\u589e\u52a0\u4e86\u8bb8\u591a\u65b0\u7684\u7eb9\u7406\u683c\u5f0f\u3002\u5728OpenGL\u4e2d\uff0cRGBA\u989c\u8272\u5206\u91cf\u88ab\u8868\u793a\u4e3a\u4ecb\u4e8e\u96f6\u548c\u4e00\u4e4b\u95f4\u7684\u6d6e\u70b9\u503c\uff0c\u4f46\u5b9e\u9645\u4e0a\u901a\u5e38\u88ab\u5b58\u50a8\u4e3a\u4e00\u4e2a\u5b57\u8282\u7684\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u503c\u8303\u56f4\u57280\u5230255\u4e4b\u95f4\uff0c\u8fd9\u4e0e\u5927\u591a\u6570\u5c4f\u5e55\u4e0a\u663e\u793a\u989c\u8272\u7684\u683c\u5f0f\u76f8\u5339\u914d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u60a8\u65e0\u6cd5\u771f\u6b63\u63a7\u5236\u7528\u4e8e\u663e\u793a\u7684\u989c\u8272\u7684\u5185\u90e8\u8868\u793a\u65b9\u5f0f\u3002\u6709\u4e9b\u8ba1\u7b97\u673a\u663e\u793a\u5668\u6bcf\u4e2a\u50cf\u7d20\u53ea\u752816\u4f4d\u800c\u4e0d\u662f32\u4f4d\uff0c\u800c\u65b0\u7684HDR\uff08\u9ad8\u52a8\u6001\u8303\u56f4\uff09\u663e\u793a\u5668\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7684\u4f4d\u3002\u4f46\u662f\uff0c\u5728\u5b58\u50a8\u7eb9\u7406\u6570\u636e\u65f6\uff0c\u5e76\u4e0d\u771f\u6b63\u9700\u8981\u4e0e\u7269\u7406\u663e\u793a\u4e0a\u4f7f\u7528\u7684\u989c\u8272\u683c\u5f0f\u76f8\u5339\u914d\u3002</p> <p>WebGL 2.0\u5f15\u5165\u4e86\u5927\u91cf\u6240\u8c13\u7684\u201c\u6709\u5927\u5c0f\u201d\u7684\u7eb9\u7406\u683c\u5f0f\uff0c\u8fd9\u4f7f\u7a0b\u5e8f\u5458\u80fd\u591f\u63a7\u5236\u7eb9\u7406\u4e2d\u6570\u636e\u7684\u8868\u793a\u65b9\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u683c\u5f0f\u662fgl.RGBA32F\uff0c\u5219\u7eb9\u7406\u5305\u542b\u6bcf\u4e2a\u50cf\u7d20\u7684\u56db\u4e2a32\u4f4d\u6d6e\u70b9\u6570\uff0c\u6bcf\u4e2aRGBA\u989c\u8272\u5206\u91cf\u4e00\u4e2a\u3002\u683c\u5f0fgl.R32UI\u8868\u793a\u6bcf\u4e2a\u50cf\u7d20\u4e00\u4e2a32\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002\u800cgl.RG8I\u610f\u5473\u7740\u6bcf\u4e2a\u50cf\u7d20\u4e24\u4e2a8\u4f4d\u6574\u6570\u3002gl.RGBA8\u5bf9\u5e94\u4e8e\u901a\u5e38\u7684\u683c\u5f0f\uff0c\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u4f7f\u7528\u4e00\u4e2a8\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002\u8fd9\u4e9b\u5927\u5c0f\u683c\u5f0f\u7528\u4e8e\u7eb9\u7406\u7684\u5185\u90e8\u683c\u5f0f\uff0c\u5728\u8c03\u7528gl.texImage2D()\u7b49\u51fd\u6570\u65f6\u4f5c\u4e3ainternalFormat\u53c2\u6570\uff0c\u6307\u5b9a\u6570\u636e\u5728\u7eb9\u7406\u4e2d\u7684\u5b9e\u9645\u5b58\u50a8\u65b9\u5f0f\u3002\u60a8\u53ef\u4ee5\u5c06\u5177\u6709\u5927\u5c0f\u5185\u90e8\u683c\u5f0f\u7684\u7eb9\u7406\u7528\u4f5c\u56fe\u50cf\u7eb9\u7406\u8fdb\u884c\u6e32\u67d3\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u989c\u8272\u5206\u91cf\u6765\u8bf4\uff0c32\u4f4d\u7f16\u7801\u4e86\u6bd4\u89c6\u89c9\u4e0a\u80fd\u533a\u5206\u7684\u8fd8\u8981\u591a\u7684\u989c\u8272\u3002\u8fd9\u4e9b\u6570\u636e\u683c\u5f0f\u7279\u522b\u9002\u7528\u4e8e\u8ba1\u7b97\u5e94\u7528\u7a0b\u5e8f\uff0c\u60a8\u771f\u6b63\u9700\u8981\u63a7\u5236\u60a8\u6b63\u5728\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f46\u662f\uff0c\u8981\u6709\u6548\u5730\u8ba1\u7b97\u5b58\u50a8\u5728\u7eb9\u7406\u4e2d\u7684\u6570\u636e\uff0c\u6211\u4eec\u786e\u5b9e\u9700\u8981\u80fd\u591f\u5c06\u6570\u636e\u5199\u5165\u7eb9\u7406\uff0c\u4ee5\u53ca\u4ece\u7eb9\u7406\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\u800c\u8fd9\uff0c\u6211\u4eec\u9700\u8981\u5e27\u7f13\u51b2\u533a\uff0c\u76f4\u5230\u7b2c7.4\u8282\u624d\u4f1a\u4ecb\u7ecd\u3002\u73b0\u5728\uff0c\u6211\u4eec\u53ea\u770b\u770bWebGL 2.0 API\u7528\u4e8e\u5904\u7406\u7eb9\u7406\u7684\u4e00\u4e9b\u65b9\u9762\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u7248\u672c\u7684texImage2D()\u51fd\u6570\u4ece\u56fe\u50cf\u6216\u6570\u636e\u6570\u7ec4\u521d\u59cb\u5316\u7eb9\u7406\uff0c\u6216\u8005\u5728\u6ca1\u6709\u63d0\u4f9b\u6570\u636e\u6e90\u65f6\u5c06\u5176\u521d\u59cb\u5316\u4e3a\u96f6\u3002WebGL 2.0\u8fd8\u6709\u53e6\u4e00\u4e2a\u53ef\u80fd\u66f4\u9ad8\u6548\u7684\u51fd\u6570\u6765\u4e3a\u7eb9\u7406\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u5e76\u5c06\u5176\u521d\u59cb\u5316\u4e3a\u96f6\uff1a</p> <pre><code>gl.texStorage2D(target, levels, internalFormat, width, height);\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fgl.TEXTURE_2D\u6216gl.TEXTURE_CUBE_MAP\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u5e94\u751f\u6210\u7684mipmap\u7ea7\u522b\u6570\u91cf\uff1b\u901a\u5e38\uff0c\u8fd9\u5c06\u662f1\u3002width\u548cheight\u7ed9\u51fa\u7eb9\u7406\u7684\u5927\u5c0f\uff0c\u5f53\u7136\uff0cinternalFormat\u6307\u5b9a\u7eb9\u7406\u7684\u6570\u636e\u683c\u5f0f\u3002internalFormat\u5fc5\u987b\u662f\u5927\u5c0f\u5185\u90e8\u683c\u5f0f\u4e4b\u4e00\uff0c\u5982gl.RGBA8\u3002</p> <p>WebGL 2.0\u652f\u63013D\u7eb9\u7406\uff0c\u5b83\u4eec\u4fdd\u5b583D\u7f51\u683c\u7684texels\u6570\u636e\uff0c\u6709\u51fd\u6570gl.texImage3D()\u548cgl.texStorage3D()\u3002\u5b83\u6709\u6df1\u5ea6\u7eb9\u7406\uff0c\u5b58\u50a8\u50cf\u6df1\u5ea6\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u7684\u6df1\u5ea6\u503c\uff0c\u901a\u5e38\u7528\u4e8e\u9634\u5f71\u6620\u5c04\u3002\u5b83\u53ef\u4ee5\u5904\u7406\u538b\u7f29\u7eb9\u7406\uff0c\u8fd9\u53ef\u4ee5\u51cf\u5c11CPU\u548cGPU\u4e4b\u95f4\u9700\u8981\u4f20\u8f93\u7684\u6570\u636e\u91cf\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u9700\u8981\u8fd9\u4e9b\u529f\u80fd\uff0c\u6211\u5c06\u8ba9\u60a8\u81ea\u5df1\u63a2\u7d22\u3002</p> <p>\u7740\u8272\u5668\u7a0b\u5e8f\u4f7f\u7528\u91c7\u6837\u5668\u53d8\u91cf\u4ece\u7eb9\u7406\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\u7740\u8272\u5668\u7f16\u7a0b\u8bed\u8a00GLSL ES 3.00\u5f15\u5165\u4e86\u8bb8\u591a\u65b0\u7684\u91c7\u6837\u5668\u7c7b\u578b\u6765\u5904\u7406WebGL 2.0\u4e2d\u7684\u65b0\u7eb9\u7406\u683c\u5f0f\u3002GLSL ES 1.00\u53ea\u6709sampler2D\u548csamplerCube\uff0c\u65b0\u8bed\u8a00\u589e\u52a0\u4e86\u7c7b\u578b\uff0c\u5982\u7528\u4e8e3D\u7eb9\u7406\u7684sampler3D\uff0c\u7528\u4e8e\u91c7\u6837\u503c\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u7684\u7eb9\u7406\u7684isampler2D\uff0c\u4ee5\u53ca\u7528\u4e8e\u91c7\u6837\u6df1\u5ea6\u7eb9\u7406\u7684sampler2DShadow\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u91c7\u6837\u5177\u670932\u4f4d\u6574\u6570\u683c\u5f0f\u7684\u7eb9\u7406\uff0c\u60a8\u53ef\u80fd\u4f1a\u58f0\u660e\u4e00\u4e2a\u91c7\u6837\u5668\u53d8\u91cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>uniform highp isampler2D datatexture;\n</code></pre> <p>\u7531\u4e8eisampler2D\u53d8\u91cf\u6ca1\u6709\u9ed8\u8ba4\u7cbe\u5ea6\uff0c\u56e0\u6b64\u5fc5\u987b\u6307\u5b9a\u7cbe\u5ea6\u9650\u5b9a\u7b26highp\u3002\u4f7f\u7528\u9ad8\u7cbe\u5ea6\u786e\u4fdd\u60a8\u53ef\u4ee5\u7cbe\u786e\u5730\u8bfb\u53d632\u4f4d\u6574\u6570\u3002\uff08sampler2D\u7c7b\u578b\u5177\u6709\u9ed8\u8ba4\u7cbe\u5ea6lowp\uff0c\u5f53\u989c\u8272\u5206\u91cf\u786e\u5b9e\u662f8\u4f4d\u6574\u6570\u65f6\u8db3\u591f\uff0c\u4f46\u53ef\u80fd\u4e0d\u662f\u60a8\u60f3\u8981\u7684\u6d6e\u70b9\u6570\u636e\u7eb9\u7406\u3002\uff09</p> <p>GLSL ES 1.00\u4f7f\u7528\u51fd\u6570texture2D()\u5bf92D\u7eb9\u7406\u8fdb\u884c\u91c7\u6837\uff0c\u4f7f\u7528textureCube()\u5bf9\u7acb\u65b9\u4f53\u8d34\u56fe\u8fdb\u884c\u91c7\u6837\u3002\u800c\u4e0d\u662f\u4e3a\u6bcf\u79cd\u91c7\u6837\u5668\u7c7b\u578b\u90fd\u6709\u5355\u72ec\u7684\u51fd\u6570\uff0cGLSL ES 3.00\u53bb\u9664\u4e86texture2D\u548ctextureCube\uff0c\u5e76\u7528\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570texture()\u66ff\u6362\u5b83\u4eec\uff0c\u8be5\u51fd\u6570\u53ef\u7528\u4e8e\u91c7\u6837\u4efb\u4f55\u7c7b\u578b\u7684\u7eb9\u7406\u3002\u6240\u4ee5\uff0c\u4e0a\u9762\u5b9a\u4e49\u7684datatexture\u53ef\u80fd\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u91c7\u6837\uff1a</p> <pre><code>highp ivec4 data = texture(datatexture, coords);\n</code></pre> <p>\u5176\u4e2dcoords\u662f\u4e00\u4e2a\u5305\u542b\u7eb9\u7406\u5750\u6807\u7684vec2\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u80fd\u60f3\u8981\u66f4\u76f4\u63a5\u5730\u8bbf\u95eetexel\u503c\u3002\u6709\u4e00\u4e2a\u65b0\u7684texelFetch()\u51fd\u6570\uff0c\u5b83\u4ece\u7eb9\u7406\u4e2d\u63d0\u53d6texel\u503c\uff0c\u5c06\u7eb9\u7406\u89c6\u4e3atexel\u6570\u7ec4\u3002\u4f7f\u7528\u4ece0\u5230\u7eb9\u7406\u5927\u5c0f\u7684\u6574\u6570\u503c\u6765\u8bbf\u95eetexels\u3002\u5e94\u7528\u4e8edatatexture\uff0c\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u50cf\uff1a</p> <pre><code>highp ivec4 data = texelFetch(datatexture, 0, ivec2(i,j));\n</code></pre> <p>\u5176\u4e2di\u7684\u8303\u56f4\u662f0\u5230\u7eb9\u7406\u5bbd\u5ea6\u51cf\u4e00\uff0cj\u7684\u8303\u56f4\u662f0\u5230\u9ad8\u5ea6\u51cf\u4e00\u3002\u8fd9\u91cc\u7684\u7b2c\u4e8c\u4e2a\u53c2\u65700\uff0c\u6307\u5b9a\u4e86\u6b63\u5728\u8bbf\u95ee\u7684mipmap\u7ea7\u522b\u3002\uff08\u5bf9\u4e8e\u6574\u6570\u7eb9\u7406\uff0c\u60a8\u53ef\u80fd\u4e0d\u4f1a\u4f7f\u7528mipmap\u3002\uff09</p> <p>\uff08\u793a\u4f8b\u7a0b\u5e8fwebgl/texelFetch-MonaLisa-webgl2.html\u662f\u4f7f\u7528texelFetch()\u7684\u4e00\u4e2a\u76f8\u5f53\u5947\u7279\u7684\u4f8b\u5b50\uff0c\u5c3d\u7ba1\u5b83\u4f7f\u7528\u7684\u662f\u666e\u901a\u56fe\u50cf\u7eb9\u7406\u800c\u4e0d\u662f\u6570\u636e\u7eb9\u7406\u3002\uff09</p> <p>\u5173\u4e8eWebGL 2.0\u7eb9\u7406\u8fd8\u6709\u66f4\u591a\u53ef\u4ee5\u8ba8\u8bba\u7684\u5185\u5bb9\uff0c\u4f46\u8fd9\u5c06\u4f7f\u6211\u4eec\u8fdc\u8fdc\u8d85\u51fa\u8fd9\u672c\u5165\u95e8\u6559\u79d1\u4e66\u6240\u9700\u7684\u8303\u56f4\u3002</p> <p>One of the major changes in WebGL 2.0 is greatly increased support for textures. A large number of new texture formats have been added. RGBA color components in OpenGL are represented as floating point values in the range zero to one, but in practice are often stored as one-byte unsigned integers, with values in the range 0 to 255, which matches the format that is used for displaying colors on most screens. In fact, you don't really have control over how colors are represented internally for use on displays. There have been computer displays that used only 16 bits per pixel instead of 32, and new HDR (High Dynamic Range) displays can use even more bits per pixel. But when storing data in a texture, it's not really necessary to match the color format that is used on a physical display.</p> <p>WebGL 2.0 introduced a large number of so-called \"sized\" texture formats, which give the programmer control over how the data in the texture is represented. For example, if the format is gl.RGBA32F, then the texture contains four 32-bit floating point numbers for each pixel, one for each of the four RGBA color components. The format gl.R32UI indicates one 32-bit unsigned integer per pixel. And gl.RG8I means two 8-bit integers per pixel. And gl.RGBA8 corresponds to the usual format, using one 8-bit unsigned integer for each color component. These sized formats are used for the internal format of a texture, the internalFormat parameter in a call to a function like gl.texImage2D(), which specifies how the data is actually stored in the texture. You can use textures with sized internal formats as image textures for rendering. But 32 bits for a color component encodes far more different colors than could ever be distinguished visually. These data formats are particularly useful for computational applications, where you really need to control what kind of data you are working with. But to effectively compute with data stored in textures, we really need to be able to write data to textures, as well as read from textures. And for that, we need framebuffers, which won't be covered until Section 7.4. For now, we will just look at a few aspects of the WebGL 2.0 API for working with textures.</p> <p>Various versions of the texImage2D() function can be used to initialize a texture from an image or from an array of data\u2014or to zero, when no data source is provided. WebGL 2.0 has another, potentially more efficient, function for allocating the storage for a texture and initializing it to zero:</p> <pre><code>gl.texStorage2D( target, levels, internalFormat, width, height );\n</code></pre> <p>The first parameter is gl.TEXTURE_2D or gl.TEXTURE_CUBE_MAP. The second parameter specifies the number of mipmap level that should be generated; generally, this will be 1. The width and height give the size of the texture, and of course the internalFormat specifies the data format for the texture. The internalFormat must be one of the sized internal formats, such as gl.RGBA8.</p> <p>WebGL 2.0 has support for 3D textures, which hold data for a 3D grid of texels, with functions gl.texImage3D() and gl.texStorage3D(). It has depth textures, which store depth values like those used in the depth test and are commonly used for shadow mapping. And it can work with compressed textures, which can decrease the amount of data that needs to be transferred between the CPU and the GPU. However, I will leave you to explore these capabilities on your own if you need them.</p> <p>Shader programs use sampler variables to read data from textures. The shader programming language GLSL ES 3.00 introduces a number of new sampler types to deal with the new texture formats in WebGL 2.0. Where GLSL ES 1.00 had only sampler2D and samplerCube, the newer language adds types such as sampler3D for 3D textures, isampler2D for sampling textures whose values are signed integers, and sampler2DShadow for sampling depth textures. For example, for sampling a texture with a 32-bit integer format, you might declare a sampler variable such as</p> <pre><code>uniform highp isampler2D datatexture;\n</code></pre> <p>The precision qualifier, highp, must be specified because isampler2D variables do not have a default precision. Using high precision ensures that you can read 32-bit integers exactly. (The sampler2D type has default precision lowp, which is sufficient when color components are really 8-bit integers but which might not be what you want for floating point data textures.)</p> <p>GLSL ES 1.00 uses the function texture2D() to sample a 2D texture and textureCube() for sampling a cubemap texture. Rather than have a separate function for each sampler type, GLSL ES 3.00 removes texture2D and textureCube and replaces them with a single overloaded function texture(), which can be used to sample any kind of texture. So, the datatexture defined above might be sampled using</p> <pre><code>highp ivec4 data = texture( datatexture, coords );\n</code></pre> <p>where coords is a vec2 holding the texture coordinates. But in fact, you might want to access texel values more directly. There is a new texelFetch() function that fetches texel values from a texture, treating the texture as an array of texels. Texels are accessed using integer coordinates that range from 0 up to the size of the texture. Applied to datatexture, this could look like</p> <pre><code>highp ivec4 data = texelFetch( datatexture, 0, ivec2(i,j) );\n</code></pre> <p>where i ranges from 0 to the width of the texture minus one, and j ranges from 0 to the height minus one. The second parameter, 0 here, specifies the mipmap level that is being accessed. (For integer textures, you are not likely to be using mipmaps.)</p> <p>(The sample program webgl/texelFetch-MonaLisa-webgl2.html is a rather fanciful example of using texelFetch(), though with an ordinary image texture rather than a data texture.)</p> <p>There is a lot more that could be said about WebGL 2.0 textures, but it would take us well beyond what I need for this introductory textbook.</p>"},{"location":"cn/c6/s5/","title":"6.5 \u5b9e\u73b0 2D \u53d8\u6362","text":"<p>Implementing 2D Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e00\u7ae0\u4f7f\u7528WebGL\u8fdb\u884c2D\u7ed8\u56fe\u3002\u5f53\u7136\uff0c\u4f7f\u7528WebGL\u7684\u771f\u6b63\u52a8\u673a\u662f\u5728Web\u4e0a\u62e5\u6709\u9ad8\u6027\u80fd\u76843D\u56fe\u5f62\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u7ae0\u4e2d\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u5728WebGL\u4e2d\uff0c\u5b9e\u73b0\u53d8\u6362\u662f\u7a0b\u5e8f\u5458\u7684\u8d23\u4efb\uff0c\u4e0eOpenGL 1.1\u76f8\u6bd4\uff0c\u8fd9\u589e\u52a0\u4e86\u4e00\u5c42\u590d\u6742\u6027\u3002\u4f46\u5728\u6211\u4eec\u5c1d\u8bd5\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u5904\u7406\u8fd9\u79cd\u590d\u6742\u6027\u4e4b\u524d\uff0c\u8fd9\u4e00\u5c0f\u8282\u5c55\u793a\u4e86\u5982\u4f55\u57282D\u73af\u5883\u4e2d\u5b9e\u73b0\u53d8\u6362\u548c\u5206\u5c42\u5efa\u6a21\u3002</p> <p>This chapter uses WebGL for 2D drawing. Of course, the real motivation for using WebGL is to have high-performance 3D graphics on the web. We will turn to that in the next chapter. With WebGL, implementing transformations is the responsibility of the programmer, which adds a level of complexity compared to OpenGL 1.1. But before we attempt to deal with that complexity in three dimensions, this short section shows how to implement transforms and hierarchical modeling in a 2D context.</p>"},{"location":"cn/c6/s5/#651-glsl-\u4e2d\u7684\u8f6c\u6362","title":"6.5.1 GLSL \u4e2d\u7684\u8f6c\u6362","text":"<p>Transforms in GLSL</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u7b2c2.3\u8282\u4e2d\u8ba8\u8bba\u4e862D\u53d8\u6362\u3002\u56de\u987e\u4e00\u4e0b\uff1a\u57fa\u672c\u53d8\u6362\u662f\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u3002\u8fd9\u6837\u7684\u4e00\u7cfb\u5217\u53d8\u6362\u53ef\u4ee5\u7ec4\u5408\u6210\u4e00\u4e2a\u5355\u4e00\u7684\u4eff\u5c04\u53d8\u6362\u30022D\u4eff\u5c04\u53d8\u6362\u5c06\u70b9(x1,y1)\u6620\u5c04\u5230\u7531\u4ee5\u4e0b\u5f62\u5f0f\u7684\u516c\u5f0f\u7ed9\u51fa\u7684\u70b9(x2,y2)\uff1a</p> <pre><code>x2 = a*x1 + c*y1 + e\ny2 = b*x1 + d*y1 + f\n</code></pre> <p>\u5176\u4e2da, b, c, d, e\u548cf\u662f\u5e38\u6570\u3002\u59822.3.8\u5c0f\u8282\u4e2d\u6240\u89e3\u91ca\u7684\uff0c\u8fd9\u4e2a\u53d8\u6362\u53ef\u4ee5\u8868\u793a\u4e3a3x3\u77e9\u9635\uff1a</p> <p></p> <p>\u901a\u8fc7\u8fd9\u79cd\u8868\u793a\uff0c\u70b9(x,y)\u53d8\u4e3a\u4e09\u7ef4\u5411\u91cf(x,y,1)\uff0c\u53d8\u6362\u53ef\u4ee5\u901a\u8fc7\u5c06\u5411\u91cf\u4e0e\u77e9\u9635\u76f8\u4e58\u6765\u5b9e\u73b0\u3002</p> <p>\u8981\u5c06\u53d8\u6362\u5e94\u7528\u4e8e\u539f\u8bed\uff0c\u5fc5\u987b\u5c06\u53d8\u6362\u77e9\u9635\u4e0e\u539f\u8bed\u7684\u6bcf\u4e2a\u9876\u70b9\u76f8\u4e58\u3002\u5728GLSL\u4e2d\uff0c\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u81ea\u7136\u4f4d\u7f6e\u662f\u9876\u70b9\u7740\u8272\u5668\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u53ef\u4ee5\u5728JavaScript\u7aef\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\uff0c\u4f46GLSL\u53ef\u4ee5\u66f4\u9ad8\u6548\u5730\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u9876\u70b9\uff0c\u5e76\u4e14GPU\u53ef\u80fd\u5177\u6709\u9ad8\u6548\u7684\u77e9\u9635\u6570\u5b66\u786c\u4ef6\u652f\u6301\u3002\uff08\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u4eff\u5c04\u53d8\u6362\u7684\u4e00\u4e2a\u7279\u6027\u662f\uff0c\u53ea\u9700\u5728\u539f\u8bed\u7684\u9876\u70b9\u4e0a\u5e94\u7528\u5b83\u4eec\u5373\u53ef\u3002\u5bf9\u53d8\u6362\u540e\u7684\u9876\u70b9\u5750\u6807\u8fdb\u884c\u63d2\u503c\u5230\u539f\u8bed\u5185\u90e8\u50cf\u7d20\u5c06\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u7ed9\u51fa\u7684\u7b54\u6848\u4e0e\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u5148\u63d2\u503c\u539f\u59cb\u9876\u70b9\u5750\u6807\u7136\u540e\u5e94\u7528\u53d8\u6362\u76f8\u540c\u3002\uff09</p> <p>\u5728GLSL\u4e2d\uff0c\u7c7b\u578bmat3\u8868\u793a3x3\u77e9\u9635\uff0cvec3\u8868\u793a\u4e09\u7ef4\u5411\u91cf\u3002\u5f53\u5e94\u7528\u4e8emat3\u548cvec3\u65f6\uff0c\u4e58\u6cd5\u8fd0\u7b97\u7b26*\u8ba1\u7b97\u4e58\u79ef\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684GLSL\u8d4b\u503c\u8bed\u53e5\u5e94\u7528\u53d8\u6362\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>transformedCoords = transformMatrix * originalCoords;\n</code></pre> <p>\u5bf9\u4e8e2D\u7ed8\u56fe\uff0c\u539f\u59cb\u5750\u6807\u53ef\u80fd\u4f5c\u4e3a\u7c7b\u578b\u4e3avec2\u7684\u5c5e\u6027\u8fdb\u5165\u9876\u70b9\u7740\u8272\u5668\u3002\u6211\u4eec\u9700\u8981\u901a\u8fc7\u6dfb\u52a01.0\u4f5c\u4e3az\u5750\u6807\uff0c\u5c06\u5c5e\u6027\u503c\u53d8\u4e3avec3\u3002\u53d8\u6362\u77e9\u9635\u53ef\u80fd\u662f\u4e00\u4e2a\u7edf\u4e00\u53d8\u91cf\uff0c\u4ee5\u4fbfJavaScript\u7aef\u53ef\u4ee5\u6307\u5b9a\u53d8\u6362\u3002\u8fd9\u5bfc\u81f4\u4ee5\u4e0b\u6700\u5c0f\u7684GLSL ES 1.00\u9876\u70b9\u7740\u8272\u5668\u7528\u4e8e\u5904\u74062D\u53d8\u6362\u3002\uff08\u5bf9\u4e8eGLSL ES 3.0\u7248\u672c\uff0c\u5c06\u201cattribute\u201d\u9650\u5b9a\u7b26\u66ff\u6362\u4e3a\u201cin\u201d\uff0c\u5e76\u5728\u7b2c\u4e00\u884c\u6dfb\u52a0\u201c#version 300 es\u201d\u3002\uff09</p> <pre><code>attribute vec2 a_coords;\nuniform mat3 u_transform;\nvoid main() {\n    vec3 transformedCoords = u_transform * vec3(a_coords,1.0);\n    gl_Position = vec4(transformedCoords.xy, 0.0, 1.0);\n}\n</code></pre> <p>\u8f93\u5165\u5750\u6807\u4ee5vec2\u5f62\u5f0f\u7ed9\u51fa\uff0c(x,y)\uff0c\u4f46\u6211\u4eec\u9700\u8981\u4e00\u4e2avec3\uff0c(x,y,1)\uff0c\u4ee5\u4e58\u4ee5\u77e9\u9635\uff0c\u6240\u4ee5main()\u7684\u7b2c\u4e00\u884c\u6dfb\u52a01.0\u4f5c\u4e3az\u5750\u6807\u3002\u5728\u4e0b\u4e00\u884c\u4e2d\uff0cgl_Position\u7684\u503c\u5fc5\u987b\u662fvec4\u3002\u5bf9\u4e8e2D\u70b9\uff0cz\u5750\u6807\u5e94\u8be5\u662f0.0\u800c\u4e0d\u662f1.0\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u4f7f\u7528transformedCoords\u7684x\u548cy\u5750\u6807\u3002</p> <p>\u5728JavaScript\u7aef\uff0c\u51fd\u6570gl.uniformMatrix3fv\u7528\u4e8e\u4e3a\u7c7b\u578b\u4e3amat3\u7684\u7edf\u4e00\u53d8\u91cf\u6307\u5b9a\u503c\uff08\u89c16.3.3\u5c0f\u8282\uff09\u3002\u8981\u4f7f\u7528\u5b83\uff0c\u77e9\u9635\u7684\u4e5d\u4e2a\u5143\u7d20\u5e94\u8be5\u4ee5\u5217\u4e3b\u5e8f\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\u3002\u5c06\u4eff\u5c04\u53d8\u6362\u77e9\u9635\u52a0\u8f7d\u5230mat3\u4e2d\u7684\u547d\u4ee4\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>gl.uniformMatrix3fv(u_transform_location, false, [ a, b, 0, c, d, 0, e, f, 1 ]);\n</code></pre> <p>Transforms in 2D were covered in Section 2.3. To review: The basic transforms are scaling, rotation, and translation. A sequence of such transformations can be combined into a single affine transform. A 2D affine transform maps a point (x1,y1) to the point (x2,y2) given by formulas of the form</p> <pre><code>x2 = a*x1 + c*y1 + e\ny2 = b*x1 + d*y1 + f\n</code></pre> <p>where a, b, c, d, e, and f are constants. As explained in Subsection 2.3.8, this transform can be represented as the 3-by-3 matrix</p> <p></p> <p>With this representation, a point (x,y) becomes the three-dimensional vector (x,y,1), and the transformation can be implemented as multiplication of the vector by the matrix.</p> <p>To apply a transformation to a primitive, each vertex of the primitive has to be multiplied by the transformation matrix. In GLSL, the natural place to do that is in the vertex shader. Technically, it would be possible to do the multiplication on the JavaScript side, but GLSL can do it more efficiently, since it can work on multiple vertices in parallel, and it is likely that the GPU has efficient hardware support for matrix math. (It is, by the way, a property of affine transformations that it suffices to apply them at the vertices of a primitive. Interpolation of the transformed vertex coordinates to the interior pixels of the primitive will give the correct result; that is, it gives the same answer as interpolating the original vertex coordinates and then applying the transformation in the fragment shader.)</p> <p>In GLSL, the type mat3 represents 3-by-3 matrices, and vec3 represents three-dimensional vectors. When applied to a mat3 and a vec3, the multiplication operator * computes the product. So, a transform can applied using a simple GLSL assignment statement such as</p> <pre><code>transformedCoords = transformMatrix * originalCoords;\n</code></pre> <p>For 2D drawing, the original coordinates are likely to come into the vertex shader as an attribute of type vec2. We need to make the attribute value into a vec3 by adding 1.0 as the z-coordinate. The transformation matrix is likely to be a uniform variable, to allow the JavaScript side to specify the transformation. This leads to the following minimal GLSL ES 1.00 vertex shader for working with 2D transforms. (For a GLSL ES 3.00 version, the \"attribute\" qualifier is replaced by \"in\", and a first line \"#version 300 es\" is added.)</p> <pre><code>attribute vec2 a_coords;\nuniform mat3 u_transform;\nvoid main() {\nvec3 transformedCoords = u_transform * vec3(a_coords,1.0);\ngl_Position = vec4(transformedCoords.xy, 0.0, 1.0);\n}\n</code></pre> <p>The input coordinates are given as a vec2, (x,y), but we need a vec3, (x,y,1), to multiply by the matrix, so the first line of main() adds 1.0 as the z-coordinate. In the next line, the value for gl_Position must be a vec4. For a 2D point, the z-coordinate should be 0.0, not 1.0, so we use only the x- and y-coordinates from transformedCoords.</p> <p>On the JavaScript side, the function gl.uniformMatrix3fv is used to specify a value for a uniform of type mat3 (Subsection 6.3.3). To use it, the nine elements of the matrix should be stored in an array in column-major order. For loading an affine transformation matrix into a mat3, the command would be something like this:</p> <pre><code>gl.uniformMatrix3fv(u_transform_location, false, [ a, b, 0, c, d, 0, e, f, 1 ]);\n</code></pre>"},{"location":"cn/c6/s5/#652-javascript-\u4e2d\u7684\u8f6c\u6362","title":"6.5.2 JavaScript \u4e2d\u7684\u8f6c\u6362","text":"<p>Transforms in JavaScript</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728JavaScript\u7aef\u5904\u7406\u53d8\u6362\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u8868\u793a\u8fd9\u4e9b\u53d8\u6362\u3002\u6211\u4eec\u8fd8\u9700\u8981\u8ddf\u8e2a\u4e00\u4e2a\u201c\u5f53\u524d\u53d8\u6362\u201d\uff0c\u5b83\u662f\u6240\u6709\u6709\u6548\u5efa\u6a21\u53d8\u6362\u7684\u4e58\u79ef\u3002\u6bcf\u5f53\u5e94\u7528\u65cb\u8f6c\u6216\u5e73\u79fb\u7b49\u53d8\u6362\u65f6\uff0c\u5f53\u524d\u53d8\u6362\u5c31\u4f1a\u6539\u53d8\u3002\u6211\u4eec\u9700\u8981\u5728\u7ed8\u5236\u590d\u6742\u5bf9\u8c61\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\uff0c\u5e76\u5728\u7ed8\u5236\u540e\u6062\u590d\u5b83\u3002\u901a\u5e38\uff0c\u4e3a\u6b64\u76ee\u7684\u4f7f\u7528\u53d8\u6362\u5806\u6808\u3002\u4f60\u5e94\u8be5\u5df2\u7ecf\u4ece2D\u548c3D\u56fe\u5f62\u4e2d\u719f\u6089\u4e86\u8fd9\u79cd\u6a21\u5f0f\u3002\u8fd9\u91cc\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u7ed3\u6784\u548c\u64cd\u4f5c\u6ca1\u6709\u5185\u7f6e\u5728\u6807\u51c6API\u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684JavaScript\u4ee3\u7801\u6765\u5b9e\u73b0\u5b83\u4eec\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u5199\u4e86\u4e00\u4e2a\u540d\u4e3aAffineTransform2D\u7684JavaScript\u7c7b\u6765\u8868\u793a2D\u4eff\u5c04\u53d8\u6362\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u5b9e\u73b0\u3002AffineTransform2D\u7c7b\u578b\u7684\u5bf9\u8c61\u6570\u636e\u7531\u53d8\u6362\u77e9\u9635\u4e2d\u7684\u6570\u5b57a, b, c, d, e\u548cf\u7ec4\u6210\u3002\u7c7b\u4e2d\u5305\u542b\u7528\u4e8e\u5c06\u53d8\u6362\u4e0e\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u53d8\u6362\u76f8\u4e58\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7\u5728\u53f3\u4fa7\u4e58\u4ee5\u9002\u5f53\u7684\u77e9\u9635\u6765\u4fee\u6539\u5b83\u4eec\u5e94\u7528\u7684\u53d8\u6362\u3002\u4ee5\u4e0b\u662fAPI\u7684\u5b8c\u6574\u63cf\u8ff0\uff0c\u5176\u4e2dtransform\u662fAffineTransform2D\u7c7b\u578b\u7684\u5bf9\u8c61\uff1a</p> <ul> <li><code>transform = new AffineTransform2D(a,b,c,d,e,f)</code> \u2014 \u521b\u5efa\u4e00\u4e2a\u5177\u6709\u672c\u8282\u5f00\u5934\u6240\u793a\u77e9\u9635\u7684AffineTransform2D\u3002</li> <li><code>transform = new AffineTransform2D()</code> \u2014 \u521b\u5efa\u4e00\u4e2a\u8868\u793a\u6052\u7b49\u53d8\u6362\u7684AffineTransform2D\u3002</li> <li><code>transform = new AffineTransform2D(original)</code> \u2014 \u5176\u4e2doriginal\u662fAffineTransform2D\uff0c\u521b\u5efaoriginal\u7684\u526f\u672c\u3002</li> <li><code>transform.rotate(r)</code> \u2014 \u901a\u8fc7\u5c06\u5176\u4e0e\u65cb\u8f6c\u77e9\u9635\u76f8\u4e58\uff0c\u4fee\u6539transform\uff0c\u4ee5\u8fdb\u884cr\u5f27\u5ea6\u7684\u65cb\u8f6c\u3002</li> <li><code>transform.translate(dx,dy)</code> \u2014 \u901a\u8fc7\u5c06\u5176\u4e0e\u5e73\u79fb\u77e9\u9635\u76f8\u4e58\uff0c\u4fee\u6539transform\uff0c\u4ee5\u8fdb\u884c(dx,dy)\u7684\u5e73\u79fb\u3002</li> <li><code>transform.scale(sx,sy)</code> \u2014 \u901a\u8fc7\u5c06\u5176\u4e0e\u7f29\u653e\u77e9\u9635\u76f8\u4e58\uff0c\u4fee\u6539transform\uff0c\u6c34\u5e73\u7f29\u653e\u56e0\u5b50\u4e3asx\uff0c\u5782\u76f4\u7f29\u653e\u56e0\u5b50\u4e3asy\u3002</li> <li><code>transform.scale(s)</code> \u2014 \u6267\u884c\u5747\u5300\u7f29\u653e\uff0c\u4e0etransform.scale(s,s)\u76f8\u540c\u3002</li> <li><code>array = transform.getMat3()</code> \u2014 \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e5d\u4e2a\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u6309\u5217\u4e3b\u5e8f\u5305\u542btransform\u7684\u77e9\u9635\u3002</li> </ul> <p>\u5b9e\u9645\u4e0a\uff0cAffineTransform2D\u5bf9\u8c61\u4e0d\u662f\u5c06\u4eff\u5c04\u53d8\u6362\u8868\u793a\u4e3a\u77e9\u9635\u3002\u76f8\u53cd\uff0c\u5b83\u5c06\u7cfb\u6570a, b, c, d, e\u548cf\u4f5c\u4e3a\u5bf9\u8c61\u7684\u5c5e\u6027\u5b58\u50a8\u3002\u6709\u4e86\u8fd9\u79cd\u8868\u793a\uff0cAffineTransform2D\u7c7b\u7684scale\u65b9\u6cd5\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>scale(sx, sy = sx) { // sy\u7684\u9ed8\u8ba4\u503c\u4e3asx\u7684\u503c\u3002\n    this.a *= sx;\n    this.b *= sx;\n    this.c *= sy;\n    this.d *= sy;\n    return this;\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u5c06\u201cthis\u201d\u5bf9\u8c61\u8868\u793a\u7684\u53d8\u6362\u4e0e\u7f29\u653e\u77e9\u9635\u76f8\u4e58\uff0c\u4e58\u6cd5\u5728\u53f3\u4fa7\u8fdb\u884c\u3002\u5176\u4ed6\u65b9\u6cd5\u6709\u7c7b\u4f3c\u7684\u5b9a\u4e49\uff0c\u4f46\u4f60\u4e0d\u9700\u8981\u7406\u89e3\u4ee3\u7801\u5c31\u80fd\u4f7f\u7528API\u3002</p> <p>\u5728\u7ed8\u5236\u539f\u8bed\u4e4b\u524d\uff0c\u5fc5\u987b\u5c06\u5f53\u524d\u53d8\u6362\u4f5c\u4e3amat3\u53d1\u9001\u5230\u9876\u70b9\u7740\u8272\u5668\u4e2d\uff0c\u5728\u90a3\u91ccmat3\u5c06\u7528\u4e8e\u53d8\u6362\u539f\u8bed\u7684\u9876\u70b9\u3002\u65b9\u6cd5transform.getMat3()\u8fd4\u56de\u53d8\u6362\u4f5c\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u53ef\u4ee5\u5c06\u5176\u4f20\u9012\u7ed9gl.uniformMatrix3fv\uff0c\u8be5\u51fd\u6570\u5c06\u5176\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u3002</p> <p>\u8981\u5b9e\u73b0\u53d8\u6362\u5806\u6808\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528AffineTransform2D\u7c7b\u578b\u5bf9\u8c61\u7684\u6570\u7ec4\u3002\u5728JavaScript\u4e2d\uff0c\u6570\u7ec4\u6ca1\u6709\u56fa\u5b9a\u957f\u5ea6\uff0c\u5e76\u4e14\u5b83\u5e26\u6709push()\u548cpop()\u65b9\u6cd5\uff0c\u4f7f\u5176\u53ef\u4ee5\u4f5c\u4e3a\u5806\u6808\u4f7f\u7528\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49pushTransform()\u548cpopTransform()\u51fd\u6570\u6765\u64cd\u4f5c\u5806\u6808\u3002\u5728\u8fd9\u91cc\uff0c\u5f53\u524d\u53d8\u6362\u5b58\u50a8\u5728\u540d\u4e3atransform\u7684\u5168\u5c40\u53d8\u91cf\u4e2d\uff1a</p> <pre><code>let transform = new AffineTransform2D();  // \u6700\u521d\u662f\u6052\u7b49\u53d8\u6362\u3002\n\nconst transformStack = [];  // \u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4f5c\u53d8\u6362\u5806\u6808\u3002\n\n/**\n *  \u5c06\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\u63a8\u5165\u53d8\u6362\u5806\u6808\u3002\n */\nfunction pushTransform() {\n    transformStack.push( new AffineTransform2D(transform) );\n}\n\n/**\n *  \u4ece\u53d8\u6362\u5806\u6808\u4e2d\u79fb\u9664\u9876\u90e8\u9879\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\u5f53\u524d\n *  \u53d8\u6362\u3002\u5982\u679c\u5806\u6808\u4e3a\u7a7a\uff0c\u5219\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff08\u4e5f\u4e0d\u4f1a\u51fa\u9519\uff09\u3002\n */\nfunction popTransform() {\n    if (transformStack.length &gt; 0) {\n        transform = transformStack.pop();\n    }\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8fwebgl/simple-hierarchy2D.html\uff0c\u8be5\u7a0b\u5e8f\u6f14\u793a\u4e86\u4f7f\u7528AffineTransform2D\u548c\u53d8\u6362\u5806\u6808\u6765\u5b9e\u73b0\u5206\u5c42\u5efa\u6a21\u3002\u8fd9\u662f\u8be5\u7a0b\u5e8f\u7ed8\u5236\u7684\u4e00\u4e2a\u5bf9\u8c61\u7684\u622a\u56fe\uff1a</p> <p></p> <p>\u4e0b\u9762\u662f\u7ed8\u5236\u5b83\u7684\u4ee3\u7801\uff1a</p> <pre><code>function square() { \n    gl.uniformMatrix3fv(u_transform_loc, false, transform.getMat3());\n    gl.bindBuffer(gl.ARRAY_BUFFER, squareCoordsVBO);\n    gl.vertexAttribPointer(a_coords_loc, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.LINE_LOOP, 0, 4);\n}\n\nfunction nestedSquares() {\n    gl.uniform3f( u_color_loc, 0, 0, 1); // \u8bbe\u7f6e\u989c\u8272\u4e3a\u84dd\u8272\u3002\n    square();\n    for (let i = 1; i &lt; 16; i++) {\n        gl.uniform3f( u_color_loc, i/16, 0, 1 - i/16); // \u7ea2/\u84dd\u6df7\u5408\u3002\n        transform.scale(0.8);\n        transform.rotate(framenumber / 200);\n        square();\n    }\n}\n</code></pre> <p>\u51fd\u6570square()\u7ed8\u5236\u4e00\u4e2a\u5927\u5c0f\u4e3a1\u4e14\u4ee5(0,0)\u4e3a\u4e2d\u5fc3\u7684\u6b63\u65b9\u5f62\u3002\u6b63\u65b9\u5f62\u7684\u5750\u6807\u5df2\u7ecf\u5b58\u50a8\u5728\u7f13\u51b2\u533asquareCoordsVBO\u4e2d\uff0ca_coords_loc\u662f\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u5c5e\u6027\u53d8\u91cf\u7684\u4f4d\u7f6e\u3002\u53d8\u91cftransform\u4fdd\u5b58\u5f53\u524d\u5efa\u6a21\u53d8\u6362\uff0c\u8be5\u53d8\u6362\u5fc5\u987b\u5e94\u7528\u4e8e\u6b63\u65b9\u5f62\u3002\u901a\u8fc7\u8c03\u7528</p> <pre><code>gl.uniformMatrix3fv(u_transform_loc, false, transform.getMat3());\n</code></pre> <p>\u5c06\u53d8\u6362\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u51fd\u6570nestedSquares()\u7ed8\u523616\u4e2a\u6b63\u65b9\u5f62\u3002\u5728\u7ed8\u5236\u6b63\u65b9\u5f62\u65f6\uff0c\u5b83\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u4fee\u6539\u5efa\u6a21\u53d8\u6362\uff1a</p> <pre><code>transform.scale(0.8);\ntransform.rotate(framenumber / 200);\n</code></pre> <p>\u8fd9\u4e9b\u547d\u4ee4\u7684\u6548\u679c\u662f\u7d2f\u79ef\u7684\uff0c\u56e0\u6b64\u6bcf\u4e2a\u6b63\u65b9\u5f62\u90fd\u6bd4\u524d\u4e00\u4e2a\u5c0f\u4e00\u70b9\uff0c\u5e76\u4e14\u6bd4\u524d\u4e00\u4e2a\u65cb\u8f6c\u5f97\u66f4\u591a\u3002\u65cb\u8f6c\u91cf\u53d6\u51b3\u4e8e\u52a8\u753b\u4e2d\u7684\u5e27\u53f7\u3002</p> <p>\u5d4c\u5957\u6b63\u65b9\u5f62\u662f\u7a0b\u5e8f\u7ed8\u5236\u7684\u4e09\u4e2a\u590d\u5408\u5bf9\u8c61\u4e4b\u4e00\u3002\u51fd\u6570\u7ed8\u5236\u4ee5(0,0)\u4e3a\u4e2d\u5fc3\u7684\u5d4c\u5957\u6b63\u65b9\u5f62\u3002\u5728\u4e3bdraw()\u4f8b\u7a0b\u4e2d\uff0c\u6211\u60f3\u79fb\u52a8\u5b83\u4eec\u5e76\u4f7f\u5b83\u4eec\u53d8\u5c0f\u4e00\u70b9\u3002\u6240\u4ee5\uff0c\u5b83\u4eec\u662f\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u7ed8\u5236\u7684\uff1a</p> <pre><code>pushTransform();\n\ntransform.translate(-0.5,0.5);  // \u5c06\u6b63\u65b9\u5f62\u4e2d\u5fc3\u79fb\u52a8\u5230(-0.5, 0.5)\u3002\ntransform.scale(0.85);          // \u5c06\u5927\u5c0f\u4ece1\u51cf\u5c0f\u52300.85\u3002\nnestedSquares();\n\npopTransform();\n</code></pre> <p>pushTransform()\u548cpopTransform()\u786e\u4fdd\u5728\u7ed8\u5236\u6b63\u65b9\u5f62\u65f6\u5bf9\u5efa\u6a21\u53d8\u6362\u6240\u505a\u7684\u6240\u6709\u66f4\u6539\u4e0d\u4f1a\u5f71\u54cd\u7a0d\u540e\u7ed8\u5236\u7684\u5176\u4ed6\u5bf9\u8c61\u3002\u53d8\u6362\u59cb\u7ec8\u4ee5\u4e0e\u4ee3\u7801\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u4e8e\u5bf9\u8c61\u3002</p> <p>\u6211\u5f3a\u70c8\u5efa\u8bae\u60a8\u9605\u8bfb\u6e90\u4ee3\u7801\u5e76\u770b\u770b\u5b83\u7ed8\u5236\u7684\u5185\u5bb9\u3002\u5904\u7406\u53d8\u6362\u7684\u57fa\u672c\u601d\u60f3\u90fd\u5728\u90a3\u91cc\u3002\u5728\u6211\u4eec\u7ee7\u7eed\u5b66\u4e603D\u4e4b\u524d\uff0c\u7406\u89e3\u5b83\u4eec\u662f\u5f88\u597d\u7684\u3002</p> <p>To work with transforms on the JavaScript side, we need a way to represent the transforms. We also need to keep track of a \"current transform\" that is the product all the individual modeling transformations that are in effect. The current transformation changes whenever a transformation such as rotation or translation is applied. We need a way to save a copy of the current transform before drawing a complex object and to restore it after drawing. Typically, a stack of transforms is used for that purpose. You should be well familiar with this pattern from both 2D and 3D graphics. The difference here is that the data structures and operations that we need are not built into the standard API, so we need some extra JavaScript code to implement them.</p> <p>As an example, I have written a JavaScript class, AffineTransform2D, to represent affine transforms in 2D. This is a very minimal implementation. The data for an object of type AffineTransform2D consists of the numbers a, b, c, d, e, and f in the transform matrix. There are methods in the class for multiplying the transform by scaling, rotation, and translation transforms. These methods modify the transform to which they are applied, by multiplying it on the right by the appropriate matrix. Here is a full description of the API, where transform is an object of type AffineTransform2D:</p> <ul> <li><code>transform = new AffineTransform2D(a,b,c,d,e,f)</code> \u2014 creates a AffineTransform2D with the matrix shown at the beginning of this section.</li> <li><code>transform = new AffineTransform2D()</code> \u2014 creates an AffineTransform2D representing the identity transform.</li> <li><code>transform = new AffineTransform2D(original)</code> \u2014 where original is an AffineTransform2D, creates a copy of original.</li> <li><code>transform.rotate(r)</code> \u2014 modifies transform by composing it with the rotation matrix for a rotation by r radians.</li> <li><code>transform.translate(dx,dy)</code> \u2014 modifies transform by composing it with the translation matrix for a translation by (dx,dy).</li> <li><code>transform.scale(sx,sy)</code> \u2014 modifies transform by composing it with the scaling matrix for scaling by a factor of sx horizontally and sy vertically.</li> <li><code>transform.scale(s)</code> \u2014 does a uniform scaling, the same as transform.scale(s,s).</li> <li><code>array = transform.getMat3()</code> \u2014 returns an array of nine numbers containing the matrix for transform in column-major order.</li> </ul> <p>In fact, an AffineTransform2D object does not represent an affine transformation as a matrix. Instead, it stores the coefficients a, b, c, d, e, and f as properties of the object. With this representation, the scale method in the AffineTransform2D class can defined as follows:</p> <pre><code>scale(sx, sy = sx) { // Default value for sy is the value of sx.\n    this.a *= sx;\n    this.b *= sx;\n    this.c *= sy;\n    this.d *= sy;\n    return this;\n}\n</code></pre> <p>This code multiplies the transform represented by \"this\" object by a scaling matrix, on the right. Other methods have similar definitions, but you don't need to understand the code in order to use the API.</p> <p>Before a primitive is drawn, the current transform must be sent as a mat3 into the vertex shader, where the mat3 will be used to transform the vertices of the primitive. The method transform.getMat3() returns the transform as an array that can be passed to gl.uniformMatrix3fv, which sends it to the shader program.</p> <p>To implement the stack of transformations, we can use an array of objects of type AffineTransform2D. In JavaScript, an array does not have a fixed length, and it comes with push() and pop() methods that make it possible to use the array as a stack. For convenience, we can define functions pushTransform() and popTransform() to manipulate the stack. Here, the current transform is stored in a global variable named transform:</p> <pre><code>let transform = new AffineTransform2D();  // Initially the identity.\n\nconst transformStack = [];  // An array to serve as the transform stack.\n\n/**\n *  Push a copy of the current transform onto the transform stack.\n */\nfunction pushTransform() {\n    transformStack.push( new AffineTransform2D(transform) );\n}\n\n/**\n *  Remove the top item from the transform stack, and set it to be the current\n *  transform.  If the stack is empty, nothing is done (and there is no error).\n */\nfunction popTransform() {\n    if (transformStack.length &gt; 0) {\n        transform = transformStack.pop();\n    }\n}\n</code></pre> <p>This code is from the sample program webgl/simple-hierarchy2D.html, which demonstrates using AffineTransform2D and a stack of transforms to implement hierarchical modeling. Here is a screenshot of one of the objects drawn by that program:</p> <p></p> <p>and here's the code that draws it:</p> <pre><code>function square() { \n    gl.uniformMatrix3fv(u_transform_loc, false, transform.getMat3());\n    gl.bindBuffer(gl.ARRAY_BUFFER, squareCoordsVBO);\n    gl.vertexAttribPointer(a_coords_loc, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.LINE_LOOP, 0, 4);\n}\n\nfunction nestedSquares() {\n    gl.uniform3f( u_color_loc, 0, 0, 1); // Set color to blue.\n    square();\n    for (let i = 1; i &lt; 16; i++) {\n        gl.uniform3f( u_color_loc, i/16, 0, 1 - i/16); // Red/Blue mixture.\n        transform.scale(0.8);\n        transform.rotate(framenumber / 200);\n        square();\n    }\n}\n</code></pre> <p>The function square() draws a square that has size 1 and is centered at (0,0) in its own object coordinate system. The coordinates for the square have been stored in a buffer, squareCoordsVBO, and a_coords_loc is the location of an attribute variable in the shader program. The variable transform holds the current modeling transform that must be applied to the square. It is sent to the shader program by calling</p> <pre><code>gl.uniformMatrix3fv(u_transform_loc, false, transform.getMat3());\n</code></pre> <p>The second function, nestedSquares(), draws 16 squares. Between the squares, it modifies the modeling transform with</p> <pre><code>transform.scale(0.8);\ntransform.rotate(framenumber / 200);\n</code></pre> <p>The effect of these commands is cumulative, so that each square is a little smaller than the previous one, and is rotated a bit more than the previous one. The amount of rotation depends on the frame number in an animation.</p> <p>The nested squares are one of three compound objects drawn by the program. The function draws the nested squares centered at (0,0). In the main draw() routine, I wanted to move them and make them a little smaller. So, they are drawn using the code:</p> <pre><code>pushTransform();\n\ntransform.translate(-0.5,0.5);  // Move center of squares to (-0.5, 0.5).\ntransform.scale(0.85);          // Reduce size from 1 to 0.85.\nnestedSquares();\n\npopTransform();\n</code></pre> <p>The pushTransform() and popTransform() ensure that all of the changes made to the modeling transform while drawing the squares will have no effect on other objects that are drawn later. Transforms are, as always, applied to objects in the opposite of the order in which they appear in the code.</p> <p>I urge you to read the source code and take a look at what it draws. The essential ideas for working with transforms are all there. It would be good to understand them before we move on to 3D.</p>"},{"location":"cn/c7/","title":"\u7b2c 7 \u7ae0\uff1a \u4f7f\u7528 WebGL \u8fdb\u884c 3D \u56fe\u5f62","text":"<p>3D Graphics with WebGL</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0a\u4e00\u7ae0\u6211\u4eec\u8ba8\u8bba\u4e86WebGL\uff0c\u4f46\u4ec5\u9650\u4e8e\u4e8c\u7ef4\u56fe\u5f62\u7684\u4e0a\u4e0b\u6587\u3002\u968f\u7740\u6211\u4eec\u8fdb\u5165\u4e09\u7ef4\u9886\u57df\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u5904\u7406\u66f4\u590d\u6742\u7684\u53d8\u6362\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u4e3b\u8981\u4f9d\u8d56\u4e00\u4e2a\u5f00\u6e90\u7684JavaScript\u5e93\u6765\u8fdb\u884c\u5411\u91cf\u548c\u77e9\u9635\u6570\u5b66\u8fd0\u7b97\u3002\u6211\u4eec\u8fd8\u9700\u8981\u5b9e\u73b0\u5149\u7167\u548c\u6750\u8d28\uff0c\u8fd9\u5c06\u5728GLSL\u4e2d\u76f4\u63a5\u5b8c\u6210\u3002</p> <p>\u6211\u4eec\u5c06\u901a\u8fc7\u590d\u5236\u7b2c3\u7ae0\u548c\u7b2c4\u7ae0\u4e2d\u4ecb\u7ecd\u7684OpenGL 1.1\u7684\u5927\u90e8\u5206\u529f\u80fd\u6765\u5f00\u59cb\u672c\u7ae0\u3002\u4f46\u5f88\u5feb\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u6dfb\u52a0\u805a\u5149\u706f\u3001Phong\u7740\u8272\u548c\u73af\u5883\u6620\u5c04\u7b49\u529f\u80fd\u8d85\u8d8a\u8fd9\u4e9b\u3002</p> <p>The previous chapter covered WebGL, but only in the context of two-dimensional graphics. As we move into 3D, we will have to work with more complex transformations. For that, we will rely mainly on an open-source JavaScript library for vector and matrix math. We will also need to implement lighting and material, which we will do directly in GLSL.</p> <p>We begin the chapter by duplicating most of the capabilities of OpenGL 1.1 that were covered in Chapter 3 and Chapter 4. But we will soon move beyond that by adding features such as spotlights, Phong shading, and environment mapping.</p>"},{"location":"cn/c7/s1/","title":"7.1 3D\u53d8\u6362","text":"<p>Transformations in 3D</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u5728\u7b2c\u516d\u7ae0\u4e2d\u770b\u5230\u4e86\u5982\u4f55\u4f7f\u7528WebGL\u7ed8\u5236\u57fa\u672c\u56fe\u5f62\uff0c\u4ee5\u53ca\u5982\u4f55\u5b9e\u73b02D\u53d8\u6362\u3002\u57283D\u4e2d\u7ed8\u5236\u57fa\u672c\u56fe\u5f62\u4e0e2D\u76f8\u540c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u6bcf\u4e2a\u9876\u70b9\u6709\u4e09\u4e2a\u5750\u6807\u800c\u4e0d\u662f\u4e24\u4e2a\u30023D\u4e2d\u7684\u53d8\u6362\u4e0e2D\u7c7b\u4f3c\uff0c\u4f46\u968f\u7740\u7b2c\u4e09\u7ef4\u5ea6\u7684\u589e\u52a0\uff0c\u590d\u6742\u6027\u6709\u4e86\u663e\u8457\u7684\u63d0\u5347\u3002\u672c\u8282\u5c06\u6db5\u76d6WebGL\u4e2d3D\u56fe\u5f62\u7684\u51e0\u4f55\u65b9\u9762\u3002\u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8f6c\u5411\u7167\u660e\u548c\u6750\u8d28\u7684\u95ee\u9898\u3002</p> <p>We have already seen in Chapter 6 how to draw primitives using WebGL, and how to implement 2D transformations. Drawing primitives is the same in 3D, except that there are three coordinates per vertex instead of two. Transformations in 3D are also similar to 2D, but for transformations the increase in complexity that comes with the third dimension is substantial. This section covers the geometric side of 3D graphics with WebGL. In the next section, we will move on to the question of lighting and materials.</p>"},{"location":"cn/c7/s1/#711-\u5173\u4e8e\u7740\u8272\u5668\u811a\u672c","title":"7.1.1 \u5173\u4e8e\u7740\u8272\u5668\u811a\u672c","text":"<p>About Shader Scripts</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f46\u5728\u6211\u4eec\u5f00\u59cb\u66f4\u8ba4\u771f\u5730\u4f7f\u7528WebGL\u4e4b\u524d\uff0c\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u65b9\u6cd5\u6765\u5728\u7f51\u9875\u4e0a\u5305\u542b\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4f1a\u5f88\u4e0d\u9519\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u901a\u8fc7\u8fde\u63a5\u4e00\u5806JavaScript\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u6765\u521b\u5efa\u6e90\u4ee3\u7801\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u4ee3\u7801\u884c\u4e00\u4e2a\u3002\u90a3\u79cd\u683c\u5f0f\u5f88\u96be\u9605\u8bfb\uff0c\u4e5f\u5f88\u96be\u7f16\u8f91\u3002\u81f3\u5c11\u8fd8\u6709\u4e24\u79cd\u5e38\u7528\u7684\u6280\u672f\u3002\u4e00\u79cd\u662f\u5c06GLSL\u7740\u8272\u5668\u6e90\u4ee3\u7801\u653e\u5728<code>&lt;script&gt;</code>\u5143\u7d20\u5185\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u9876\u70b9\u7740\u8272\u5668\u7684\u793a\u4f8b\uff1a</p> <pre><code>&lt;script type=\"x-shader/x-vertex\" id=\"vshader\"&gt;\n    attribute vec3 a_coords;\n    uniform mat4 modelviewProjection;\n    void main() {\n        vec4 coords = vec4(a_coords,1.0);\n        gl_Position = modelviewProjection * coords;\n    }\n&lt;/script&gt;\n</code></pre> <p>\u8fd9\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u7f51\u7edc\u6d4f\u89c8\u5668\u4e0d\u4f1a\u8bc6\u522b<code>&lt;script&gt;</code>\u5143\u7d20\u4e2d\u5217\u51fa\u7684\u7c7b\u578b\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u5c1d\u8bd5\u6267\u884c\u811a\u672c\u3002\u7136\u800c\uff0c\u5b83\u786e\u5b9e\u4f1a\u5c06<code>&lt;script&gt;</code>\u5143\u7d20\u7684\u5185\u5bb9\u5b58\u50a8\u5728\u8868\u793a\u7f51\u9875\u7684DOM\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u5185\u5bb9\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6DOM API\u4f5c\u4e3a\u5b57\u7b26\u4e32\u68c0\u7d22\u3002\u6211\u4e0d\u4f1a\u89e3\u91ca\u4f7f\u7528\u7684API\u51fd\u6570\uff0c\u4f46\u4ee5\u4e0b\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u4ee5\u811a\u672c\u5143\u7d20\u7684id\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5143\u7d20\u5185\u90e8\u6587\u672c\u7684\u5b57\u7b26\u4e32\uff1a</p> <pre><code>function getTextContent( elementID ) {\n    let element = document.getElementById(elementID);\n    let node = element.firstChild;\n    let str = \"\";\n    while (node) {\n        if (node.nodeType == 3) // \u8fd9\u662f\u4e00\u4e2a\u6587\u672c\u8282\u70b9\n            str += node.textContent;\n        node = node.nextSibling;\n    }\n    return str;\n}\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/glmatrix-cube-unlit.html\u4f7f\u7528\u4e86\u8fd9\u79cd\u6280\u672f\u3002\u53e6\u4e00\u4e2a\u60f3\u6cd5\u662f\u5c06\u6e90\u4ee3\u7801\u5b9a\u4e49\u4e3aJavaScript\u6a21\u677f\u5b57\u7b26\u4e32\u3002\uff08\u89c1\u5c0f\u8282A.3.1\uff09\u3002\u6a21\u677f\u5b57\u7b26\u4e32\u88ab\u5305\u542b\u5728\u5355\u5f15\u53f7\u5b57\u7b26\u4e4b\u95f4\uff0c\u5e76\u4e14\u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u3002\uff08\"\u5f15\u53f7\"\u4e5f\u88ab\u79f0\u4e3a\"\u53cd\u5f15\u53f7\"\uff09\u3002\u6a21\u677f\u5b57\u7b26\u4e32\u53ea\u662f\u5728ES6\u4e2d\u4f5c\u4e3aJavaScript\u7684\u4e00\u90e8\u5206\u5f15\u5165\u7684\u3002\u5b83\u4eec\u53ef\u4ee5\u5305\u542bJavaScript\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4f46\u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u90a3\u79cd\u80fd\u529b\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u5c06\u4e0a\u8ff0\u7740\u8272\u5668\u5b9a\u4e49\u4e3a\u6a21\u677f\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\uff1a</p> <pre><code>const vertexShaderSource = `\nattribute vec3 a_coords;\nuniform mat4 modelviewProjection;\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);\n    gl_Position = modelviewProjection * coords;\n}`;\n</code></pre> <p>\u8fd9\u79cd\u6280\u672f\u5728\u672c\u7ae0\u7684\u8bb8\u591a\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u5c06GLSL ES 3.00\u7740\u8272\u5668\u5b9a\u4e49\u4e3a\u6a21\u677f\u5b57\u7b26\u4e32\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5728\u6253\u5f00\u5f15\u53f7\u540e\u7acb\u5373\u5305\u62ec\u6240\u9700\u7684\u7b2c\u4e00\u884c\uff0c#version 3.00 es\uff0c\u56e0\u4e3a\u90a3\u884c\u4e0d\u80fd\u7531\u7a7a\u884c\u524d\u5bfc\u3002</p> <p>But before we begin working more seriously with WebGL, it will be nice to have a better way to include shader source code on a web page. Up until now, I have created the source code strings by concatenating a bunch of JavaScript string literals, one for each line of code. That format is hard to read and very hard to edit. There are at least two other techniques that are often used. One is to put the GLSL shader source code inside <code>&lt;script&gt;</code> elements. Here is an example for a vertex shader:</p> <pre><code>&lt;script type=\"x-shader/x-vertex\" id=\"vshader\"&gt;\n    attribute vec3 a_coords;\n    uniform mat4 modelviewProjection;\n    void main() {\n        vec4 coords = vec4(a_coords,1.0);\n        gl_Position = modelviewProjection * coords;\n    }\n&lt;/script&gt;\n</code></pre> <p>This relies on the fact that a web browser will not recognize the type listed in the <code>&lt;script&gt;</code> element, so it will not try to execute the script. However, it does store the content of the <code>&lt;script&gt;</code> element in the DOM data structure that represents the web page. The content can be retrieved as a string using the standard DOM API. I won't explain the API functions that are used, but here is a function that takes the id of the script element as its parameter and returns a string containing the text from inside the element:</p> <pre><code>function getTextContent( elementID ) {\n    let element = document.getElementById(elementID);\n    let node = element.firstChild;\n    let str = \"\";\n    while (node) {\n        if (node.nodeType == 3) // this is a text node\n            str += node.textContent;\n        node = node.nextSibling;\n    }\n    return str;\n}\n</code></pre> <p>The sample program webgl/glmatrix-cube-unlit.html uses this technique. The other idea is to define the source code as a JavaScript template string. (See Subsection A.3.1). A template string is enclosed between single backquote characters and can span multiple lines. (The \"backquote\" is also called a \"backtick.\") Template strings were only introduced into JavaScript as part of ES6. They can include the values of JavaScript expressions, but we don't need that capability here. Here is how the above shader could be defined as a template string:</p> <pre><code>const vertexShaderSource = `\nattribute vec3 a_coords;\nuniform mat4 modelviewProjection;\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);\n    gl_Position = modelviewProjection * coords;\n}`;\n</code></pre> <p>This technique is used in many of the sample programs in this chapter. Note that if you define a GLSL ES 3.00 shader as a template string, you should be sure to include the required first line, #version 3.00 es, immediately after the opening backquote, since that line cannot be preceded by a blank line.</p>"},{"location":"cn/c7/s1/#712-glmatrix\u7b80\u4ecb","title":"7.1.2 glMatrix\u7b80\u4ecb","text":"<p>Introducing glMatrix</p> \u4e2d\u6587\u82f1\u6587 <p>\u53d8\u6362\u5bf9\u4e8e\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u81f3\u5173\u91cd\u8981\u3002WebGL API\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u7528\u4e8e\u5904\u7406\u53d8\u6362\u7684\u51fd\u6570\u3002\u5728\u7b2c6.5\u8282\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u7b80\u5355\u7684JavaScript\u7c7b\u6765\u8868\u793a2D\u7684\u5efa\u6a21\u53d8\u6362\u3002\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u60c5\u51b5\u4f1a\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002\u5bf9\u4e8e\u4f7f\u7528WebGL\u76843D\u56fe\u5f62\uff0cJavaScript\u7aef\u901a\u5e38\u9700\u8981\u521b\u5efa\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u548c\u6295\u5f71\u53d8\u6362\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u6ca1\u6709WebGL\u5e2e\u52a9\u7684\u60c5\u51b5\u4e0b\u5bf9\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u5e94\u7528\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u5e73\u79fb\u3002\u5982\u679c\u6709JavaScript\u5e93\u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u90a3\u4e48\u4e8b\u60c5\u4f1a\u5bb9\u6613\u5f97\u591a\u3002\u4e00\u4e2a\u5e38\u7528\u7684\u5e93\u662fglMatrix\uff0c\u8fd9\u662f\u7531Brandon Jones\u548cColin MacKenzie IV\u7f16\u5199\u7684\u7528\u4e8e\u5411\u91cf\u548c\u77e9\u9635\u6570\u5b66\u7684\u514d\u8d39JavaScript\u5e93\u3002\u5b83\u53ef\u5728https://glmatrix.net\u83b7\u53d6\u3002\u8fd9\u672c\u6559\u79d1\u4e66\u4f7f\u7528\u7684\u662f2015\u5e74\u76842.3\u7248\u672c\uff0c\u5c3d\u7ba1\u6709\u66f4\u65b0\u7684\u7248\u672c\u53ef\u7528\u3002\u6839\u636e\u5176\u8bb8\u53ef\u8bc1\uff0c\u6b64\u6587\u4ef6\u53ef\u4ee5\u81ea\u7531\u4f7f\u7528\u548c\u5206\u53d1\u3002\u6211\u7684\u7a0b\u5e8f\u4f7f\u7528\u811a\u672cgl-matrix-min.js\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u672c\u4e66\u7684\u7f51\u7ad9\u4e0b\u8f7d\u7684\u6e90\u6587\u4ef6\u5939\u4e2d\u627e\u5230\u4e00\u4efd\u526f\u672c\u3002\u8fd9\u4e2a\u6587\u4ef6\u662f\u4e00\u4e2a\u201c\u538b\u7f29\u201d\u7684JavaScript\u6587\u4ef6\uff0c\u4e0d\u6253\u7b97\u4f9b\u4eba\u7c7b\u9605\u8bfb\u3002\uff08\u4f60\u4e5f\u53ef\u4ee5\u9605\u8bfb2.2\u7248\u672c\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\uff0c\u5305\u62ec\u6ce8\u91ca\uff0c\u4ee5\u4eba\u7c7b\u53ef\u8bfb\u7684\u5f62\u5f0f\uff0c\u5728\u6587\u4ef6webgl/gl-matrix.js\u4e2d\u627e\u5230\uff0c\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728glmatrix\u7f51\u7ad9\u4e0a\u627e\u5230\u3002\uff09</p> <p>glMatrix API\u53ef\u4ee5\u901a\u8fc7\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u811a\u672c\u5143\u7d20\u5728\u7f51\u9875\u4e0a\u4f7f\u7528\uff1a</p> <pre><code>&lt;script src=\"gl-matrix-min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\u8fd9\u5047\u5b9agl-matrix-min.js\u4e0e\u7f51\u9875\u5728\u540c\u4e00\u76ee\u5f55\u4e2d\u3002</p> <p>glMatrix\u5e93\u5b9a\u4e49\u4e86\u5b83\u6240\u8c13\u7684\u201c\u7c7b\u201dvec2\u3001vec3\u548cvec4\uff0c\u7528\u4e8e\u5904\u74062\u30013\u548c4\u4e2a\u6570\u5b57\u7684\u5411\u91cf\u3002\u5b83\u5b9a\u4e49\u4e86mat3\u7528\u4e8e\u5904\u74063x3\u77e9\u9635\uff0c\u4ee5\u53camat4\u7528\u4e8e4x4\u77e9\u9635\u3002\u8fd9\u4e9b\u540d\u79f0\u4e0d\u5e94\u4e0e\u540c\u540d\u7684GLSL\u7c7b\u578b\u6df7\u6dc6\uff1bglMatrix\u5b8c\u5168\u5728JavaScript\u7aef\u3002\u7136\u800c\uff0cglMatrix\u7684mat4\u53ef\u4ee5\u4f20\u9012\u7ed9\u7740\u8272\u5668\u7a0b\u5e8f\u4ee5\u6307\u5b9aGLSL mat4\u7684\u503c\uff0c\u5176\u4ed6\u5411\u91cf\u548c\u77e9\u9635\u7c7b\u578b\u4e5f\u662f\u5982\u6b64\u3002</p> <p>\u6bcf\u4e2aglMatrix\u7c7b\u5b9a\u4e49\u4e86\u4e00\u7ec4\u7528\u4e8e\u5904\u7406\u5411\u91cf\u548c\u77e9\u9635\u7684\u51fd\u6570\u3002\u5b9e\u9645\u4e0a\uff0c\u5c3d\u7ba1\u6587\u6863\u4f7f\u7528\u201c\u7c7b\u201d\u8fd9\u4e2a\u672f\u8bed\uff0cglMatrix\u5e76\u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u7684\u3002\u5b83\u7684\u7c7b\u5b9e\u9645\u4e0a\u53ea\u662fJavaScript\u5bf9\u8c61\uff0c\u5b83\u7c7b\u4e2d\u7684\u51fd\u6570\u5728Java\u4e2d\u5c06\u88ab\u79f0\u4e3a\u9759\u6001\u65b9\u6cd5\u3002\u5728glMatrix\u4e2d\uff0c\u5411\u91cf\u548c\u77e9\u9635\u88ab\u8868\u793a\u4e3a\u6570\u7ec4\uff0c\u7c7b\u5982vec4\u548cmat4\u4e2d\u7684\u51fd\u6570\u4ec5\u64cd\u4f5c\u8fd9\u4e9b\u6570\u7ec4\u3002\u6ca1\u6709\u7c7b\u578b\u4e3avec4\u6216mat4\u7684\u5bf9\u8c61\uff0c\u53ea\u6709\u957f\u5ea6\u5206\u522b\u4e3a4\u621616\u7684\u6570\u7ec4\u3002\u6570\u7ec4\u53ef\u4ee5\u662f\u666e\u901a\u7684JavaScript\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u662f\u7c7b\u578b\u4e3aFloat32Array\u7684\u7c7b\u578b\u5316\u6570\u7ec4\u3002\u5982\u679c\u8ba9glMatrix\u4e3a\u4f60\u521b\u5efa\u6570\u7ec4\uff0c\u5b83\u4eec\u5c06\u662fFloat32Arrays\uff0c\u4f46\u6240\u6709glMatrix\u51fd\u6570\u5c06\u4e0e\u8fd9\u4e24\u79cd\u6570\u7ec4\u4e00\u8d77\u5de5\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679cglMatrix\u6587\u6863\u8bf4\u4e00\u4e2a\u53c2\u6570\u5e94\u8be5\u662fvec3\u7c7b\u578b\uff0c\u90a3\u4e48\u4f20\u9012\u4e00\u4e2aFloat32Array\u6216\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u6570\u5b57\u7684\u5e38\u89c4JavaScript\u6570\u7ec4\u4f5c\u4e3a\u8be5\u53c2\u6570\u7684\u503c\u662f\u53ef\u4ee5\u7684\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4efb\u4f55\u4e00\u79cd\u6570\u7ec4\u4e5f\u53ef\u4ee5\u5728\u8bf8\u5982gl.uniform3fv()\u548cgl.uniformMatrix4fv()\u7b49WebGL\u51fd\u6570\u4e2d\u4f7f\u7528\u3002glMatrix\u65e8\u5728\u4e0e\u8fd9\u4e9b\u51fd\u6570\u4e00\u8d77\u5de5\u4f5c\u3002\u4f8b\u5982\uff0c\u5728glMatrix\u4e2d\u7684\u4e00\u4e2amat4\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a16\u7684\u6570\u7ec4\uff0c\u4ee5\u5217\u4e3b\u5e8f\u683c\u5f0f\u4fdd\u5b584x4\u77e9\u9635\u7684\u5143\u7d20\uff0c\u8fd9\u4e0egl.uniformMatrix4fv\u4f7f\u7528\u7684\u683c\u5f0f\u76f8\u540c\u3002</p> <p>\u6bcf\u4e2aglMatrix\u7c7b\u90fd\u6709\u4e00\u4e2acreate()\u51fd\u6570\uff0c\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u9002\u5f53\u957f\u5ea6\u7684\u6570\u7ec4\uff0c\u5e76\u7528\u9ed8\u8ba4\u503c\u586b\u5145\u3002\u4f8b\u5982\uff0c</p> <pre><code>transform = mat4.create();\n</code></pre> <p>\u5c06transform\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u65b0\u7684\u957f\u5ea6\u4e3a16\u7684Float32Array\uff0c\u521d\u59cb\u5316\u4e3a\u8868\u793a\u5355\u4f4d\u77e9\u9635\u3002\u7c7b\u4f3c\u5730\uff0c</p> <pre><code>vector = vec3.create();\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a3\u3001\u586b\u5145\u4e86\u96f6\u7684Float32Array\u3002\u6bcf\u4e2a\u7c7b\u8fd8\u6709\u4e00\u4e2aclone(x)\u51fd\u6570\uff0c\u7528\u4e8e\u521b\u5efa\u5176\u53c2\u6570x\u7684\u526f\u672c\u3002\u4f8b\u5982\uff1a</p> <pre><code>saveTransform = mat4.clone(modelview);\n</code></pre> <p>\u5927\u591a\u6570\u5176\u4ed6\u51fd\u6570\u4e0d\u521b\u5efa\u65b0\u6570\u7ec4\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u4fee\u6539\u5b83\u4eec\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5185\u5bb9\u3002\u4f8b\u5982\uff0cmat4.multiply(A,B,C)\u5c06\u4fee\u6539A\uff0c\u4f7f\u5176\u5305\u542bB\u548cC\u7684\u77e9\u9635\u4e58\u79ef\u3002\u6bcf\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5df2\u7ecf\u5b58\u5728\u7684mat4\uff08\u5373\u957f\u5ea6\u4e3a16\u7684\u6570\u7ec4\uff09\u3002\u4e00\u4e9b\u6570\u7ec4\u53ef\u4ee5\u662f\u76f8\u540c\u7684\u3002\u4f8b\u5982\uff0cmat4.multiply(A,A,B)\u7684\u4f5c\u7528\u662f\u5c06A\u4e58\u4ee5B\uff0c\u5e76\u5c06A\u4fee\u6539\u4e3a\u5305\u542b\u7b54\u6848\u3002</p> <p>\u6709\u51fd\u6570\u7528\u4e8e\u5c06\u77e9\u9635\u4e58\u4ee5\u6807\u51c6\u53d8\u6362\uff0c\u5982\u7f29\u653e\u548c\u65cb\u8f6c\u3002\u4f8b\u5982\uff0c\u5982\u679cA\u548cB\u662fmat4s\uff0cv\u662f\u4e00\u4e2avec3\uff0c\u90a3\u4e48mat4.translate(A,B,v)\u4f7fA\u7b49\u4e8eB\u548c\u8868\u793a\u7531\u5411\u91cfv\u5e73\u79fb\u7684\u77e9\u9635\u7684\u4e58\u79ef\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3b\u8981\u5728\u8868\u793amodelview\u53d8\u6362\u7684\u77e9\u9635\u4e0a\u4f7f\u7528\u8fd9\u6837\u7684\u64cd\u4f5c\u3002\u6240\u4ee5\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3amodelview\u7684mat4\uff0c\u5b83\u4fdd\u5b58\u5f53\u524d\u7684modelview\u53d8\u6362\u3002\u8981\u901a\u8fc7\u5411\u91cf[dx,dy,dz]\u5e94\u7528\u5e73\u79fb\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8bf4</p> <pre><code>mat4.translate( modelview, modelview, [dx,dy,dz] );\n</code></pre> <p>\u8fd9\u7b49\u540c\u4e8e\u5728OpenGL\u4e2d\u8c03\u7528glTranslatef(dx,dy,dz)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u5728\u8fd9\u4e2a\u8bed\u53e5\u4e4b\u540e\u7ed8\u5236\u4e00\u4e9b\u51e0\u4f55\u4f53\uff0c\u4f7f\u7528modelview\u4f5c\u4e3amodelview\u53d8\u6362\uff0c\u90a3\u4e48\u51e0\u4f55\u4f53\u9996\u5148\u4f1a\u88ab\u5e73\u79fb[dx,dy,dz]\uff0c\u7136\u540e\u4f1a\u88abmodelview\u7684\u5148\u524d\u503c\u53d8\u6362\u3002\u6ce8\u610f\u5728\u8fd9\u4e2a\u547d\u4ee4\u4e2d\u4f7f\u7528\u5411\u91cf\u6765\u6307\u5b9a\u5e73\u79fb\uff0c\u800c\u4e0d\u662f\u4e09\u4e2a\u5355\u72ec\u7684\u53c2\u6570\uff1b\u8fd9\u662fglMatrix\u7684\u5178\u578b\u7528\u6cd5\u3002\u8981\u5e94\u7528\u7f29\u653e\u53d8\u6362\uff0c\u7f29\u653e\u56e0\u5b50\u4e3asx\u3001sy\u548csz\uff0c\u4f7f\u7528</p> <pre><code>mat4.scale( modelview, modelview, [sx,sy,sz] );\n</code></pre> <p>\u5bf9\u4e8e\u65cb\u8f6c\uff0cglMatrix\u6709\u56db\u4e2a\u51fd\u6570\uff0c\u5305\u62ec\u4e09\u4e2a\u7528\u4e8e\u56f4\u7ed5x\u3001y\u6216z\u8f74\u65cb\u8f6c\u7684\u5e38\u89c1\u60c5\u51b5\u3002\u7b2c\u56db\u4e2a\u65cb\u8f6c\u51fd\u6570\u6307\u5b9a\u65cb\u8f6c\u8f74\u4e3a\u4ece(0,0,0)\u5230\u70b9(dx,dy,dz)\u7684\u7ebf\u3002\u8fd9\u7b49\u540c\u4e8eglRotatef(angle,dx,dy,dz)\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e2d\u7684\u65cb\u8f6c\u89d2\u5ea6\u662f\u4ee5\u5f27\u5ea6\u800c\u4e0d\u662f\u5ea6\u6307\u5b9a\u7684\uff1a</p> <pre><code>mat4.rotateX( modelview, modelview, radians );\nmat4.rotateY( modelview, modelview, radians );\nmat4.rotateZ( modelview, modelview, radians );\nmat4.rotate( modelview, modelview, radians, [dx,dy,dz] );\n</code></pre> <p>\u8fd9\u4e9b\u51fd\u6570\u5141\u8bb8\u6211\u4eec\u8fdb\u884c\u6240\u6709\u57fa\u672c\u7684\u5efa\u6a21\u548c\u67e5\u770b\u53d8\u6362\uff0c\u8fd9\u5bf93D\u56fe\u5f62\u662f\u5fc5\u9700\u7684\u3002\u4e3a\u4e86\u8fdb\u884c\u5c42\u6b21\u5316\u56fe\u5f62\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728\u904d\u5386\u573a\u666f\u56fe\u65f6\u4fdd\u5b58\u548c\u6062\u590d\u53d8\u6362\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6808\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5e38\u89c4\u7684JavaScript\u6570\u7ec4\uff0c\u5b83\u5df2\u7ecf\u6709push\u548cpop\u64cd\u4f5c\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7a7a\u6570\u7ec4\u4f5c\u4e3a\u6808\uff1a</p> <pre><code>const matrixStack = [];\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bf4</p> <pre><code>matrixStack.push( mat4.clone(modelview) );\n</code></pre> <p>\u5c06\u5f53\u524dmodelview\u77e9\u9635\u7684\u526f\u672c\u63a8\u5230\u6808\u4e0a\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u7528</p> <pre><code>modelview = matrixStack.pop();\n</code></pre> <p>\u4ece\u6808\u4e2d\u79fb\u9664\u4e00\u4e2a\u77e9\u9635\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7684modelview\u77e9\u9635\u3002</p> <p>\u8fd9\u4e9b\u64cd\u4f5c\u7b49\u540c\u4e8eOpenGL\u4e2d\u7684glPushMatrix()\u548cglPopMatrix()\u3002</p> <p>\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u7684\u8d77\u70b9\u901a\u5e38\u662f\u89c2\u5bdf\u53d8\u6362\u3002\u5728OpenGL\u4e2d\uff0c\u7ecf\u5e38\u4f7f\u7528\u51fd\u6570gluLookAt\u6765\u8bbe\u7f6e\u89c2\u5bdf\u53d8\u6362\uff08\u89c13.3.4\u5c0f\u8282\uff09\u3002glMatrix\u5e93\u6709\u4e00\u4e2a\u201clookAt\u201d\u51fd\u6570\u6765\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff1a</p> <pre><code>mat4.lookAt( modelview, [eyex,eyey,eyez], [refx,refy,refz], [upx,upy,upz] );\n</code></pre> <p>\u6ce8\u610f\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u4e09\u4e2avec3's\u4ee3\u66ffgluLookAt\u4e2d\u7684\u4e5d\u4e2a\u72ec\u7acb\u53c2\u6570\uff0c\u5e76\u4e14\u5b83\u5c06\u7ed3\u679c\u653e\u5728\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u53d8\u91cf\u4e2d\u3002\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u5b9e\u9645\u4e0a\u7b49\u540c\u4e8e\u4e24\u4e2aOpenGL\u547d\u4ee4\uff1a</p> <pre><code>glLoadIdentity();\ngluLookAt( eyex,eyey,eyez,refx,refy,refz,upx,upy,upz );\n</code></pre> <p>\u6240\u4ee5\uff0c\u4f60\u4e0d\u9700\u8981\u5728\u8c03\u7528mat4.lookAt\u4e4b\u524d\u5c06modelview\u8bbe\u7f6e\u4e3a\u5355\u4f4d\u77e9\u9635\uff0c\u5c31\u50cf\u4f60\u901a\u5e38\u5728OpenGL\u4e2d\u505a\u7684\u90a3\u6837\u3002\u7136\u800c\uff0c\u4f60\u5fc5\u987b\u5728\u4f7f\u7528mat4.lookAt\u4e4b\u524d\u521b\u5efamodelview\u77e9\u9635\uff0c\u6bd4\u5982\u901a\u8fc7\u8c03\u7528</p> <pre><code>let modelview = mat4.create();\n</code></pre> <p>\u5982\u679c\u4f60\u60f3\u5c06\u73b0\u6709\u7684mat4\u8bbe\u7f6e\u4e3a\u5355\u4f4d\u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528mat4.identity\u51fd\u6570\u3002\u4f8b\u5982\uff0c</p> <pre><code>mat4.identity( modelview );\n</code></pre> <p>\u5982\u679c\u4f60\u60f3\u4ece\u57fa\u672c\u7684\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u53d8\u6362\u4e2d\u7ec4\u5408\u51fa\u89c6\u56fe\u53d8\u6362\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u4f5c\u4e3a\u8d77\u70b9\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0cglMatrix\u6709\u8bbe\u7f6e\u6295\u5f71\u53d8\u6362\u7684\u51fd\u6570\u3002\u5b83\u6709\u7b49\u540c\u4e8eglOrtho\u3001glFrustum\u548cgluPerspective\u7684\u51fd\u6570\uff08\u89c13.3.3\u5c0f\u8282\uff09\uff0c\u53ea\u662fmat4.perspective\u4e2d\u7684\u89c6\u573a\u89d2\u5ea6\u662f\u4ee5\u5f27\u5ea6\u800c\u4e0d\u662f\u5ea6\u7ed9\u51fa\u7684\uff1a</p> <pre><code>mat4.ortho( projection, left, right, bottom, top, near, far );\n\nmat4.frustum( projection, left, right, bottom, top, near, far );\n\nmat4.perspective( projection, fovyInRadians, aspect, near, far );\n</code></pre> <p>\u548c\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u4e00\u6837\uff0c\u4f60\u4e0d\u9700\u8981\u5728\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u4e4b\u524d\u7528\u5355\u4f4d\u77e9\u9635\u52a0\u8f7dprojection\uff0c\u4f46\u4f60\u5fc5\u987b\u5c06projection\u521b\u5efa\u4e3a\u4e00\u4e2amat4\uff08\u6216\u957f\u5ea6\u4e3a16\u7684\u6570\u7ec4\uff09\u3002</p> <p>Transformations are essential to computer graphics. The WebGL API does not provide any functions for working with transformations. In Section 6.5, we used a simple JavaScript class to represent modeling transformations in 2D. Things get more complex in three dimensions. For 3D graphics with WebGL, the JavaScript side will usually have to create both a modelview transform and a projection transform, and it will have to apply rotation, scaling, and translation to the modelview matrix, all without help from WebGL. Doing so is much easier if you have a JavaScript library to do the work. One commonly used library is glMatrix, a free JavaScript library for vector and matrix math written by Brandon Jones and Colin MacKenzie IV. It is available from https://glmatrix.net. This textbook uses Version 2.3 of the library, from 2015, although newer versions are available. According to its license, this file can be freely used and distributed. My programs use the script gl-matrix-min.js. You can find a copy in the source folder in the web site download of this book. This file is a \"minified\" JavaScript file, which is not meant to be human-readable. (You can also read the full source for version 2.2, in human-readable form including comments, in the file webgl/gl-matrix.js, and more information can be found on the glmatrix web site.)</p> <p>The glMatrix API can be made available for use on a web page with a script element such as</p> <pre><code>&lt;script src=\"gl-matrix-min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>This assumes that gl-matrix-min.js is in the same directory as the web page.</p> <p>The glMatrix library defines what it calls \"classes\" named vec2, vec3, and vec4 for working with vectors of 2, 3, and 4 numbers. It defines mat3 for working with 3-by-3 matrices and mat4 for 4-by-4 matrices. The names should not be confused with the GLSL types of the same names; glMatrix in entirely on the JavaScript side. However, a glMatrix mat4 can be passed to a shader program to specify the value of a GLSL mat4, and similarly for the other vector and matrix types.</p> <p>Each glMatrix class defines a set of functions for working with vectors and matrices. In fact, however, although the documentation uses the term \"class,\" glMatrix is not object-oriented. Its classes are really just JavaScript objects, and the functions in its classes are what would be called static methods in Java. Vectors and matrices are represented in glMatrix as arrays, and the functions in classes like vec4 and mat4 simply operate on those arrays. There are no objects of type vec4 or mat4 as such, just arrays of length 4 or 16 respectively. The arrays can be either ordinary JavaScript arrays or typed arrays of type Float32Array. If you let glMatrix create the arrays for you, they will be Float32Arrays, but all glMatrix functions will work with either kind of array. For example, if the glMatrix documentation says that a parameter should be of type vec3, it is OK to pass either a Float32Array or a regular JavaScript array of three numbers as the value of that parameter.</p> <p>Note that it is also the case that either kind of array can be used in WebGL functions such as gl.uniform3fv() and gl.uniformMatrix4fv(). glMatrix is designed to work with those functions. For example, a mat4 in glMatrix is an array of length 16 that holds the elements of a 4-by-4 array in column-major order, the same format that is used by gl.uniformMatrix4fv.</p> <p>Each glMatrix class has a create() function which creates an array of the appropriate length and fills it with default values. For example,</p> <pre><code>transform = mat4.create();\n</code></pre> <p>sets transform to be a new Float32Array of length 16, initialized to represent the identity matrix. Similarly,</p> <pre><code>vector = vec3.create();\n</code></pre> <p>creates a Float32Array of length 3, filled with zeros. Each class also has a function clone(x) that creates a copy of its parameter x. For example:</p> <pre><code>saveTransform = mat4.clone(modelview);\n</code></pre> <p>Most other functions do not create new arrays. Instead, they modify the contents of their first parameter. For example, mat4.multiply(A,B,C) will modify A so that it holds the matrix product of B and C. Each parameter must be a mat4 (that is, an array of length 16) that already exists. It is OK for some of the arrays to be the same. For example, mat4.multiply(A,A,B) has the effect of multiplying A times B and modifying A so that it contains the answer.</p> <p>There are functions for multiplying a matrix by standard transformations such as scaling and rotation. For example if A and B are mat4s and v is a vec3, then mat4.translate(A,B,v) makes A equal to the product of B and the matrix that represents translation by the vector v. In practice, we will use such operations mostly on a matrix that represents the modelview transformation. So, suppose that we have a mat4 named modelview that holds the current modelview transform. To apply a translation by a vector [dx,dy,dz], we can say</p> <pre><code>mat4.translate( modelview, modelview, [dx,dy,dz] );\n</code></pre> <p>This is equivalent to calling glTranslatef(dx,dy,dz) in OpenGL. That is, if we draw some geometry after this statement, using modelview as the modelview transformation, then the geometry will first be translated by [dx,dy,dz] and then will be transformed by whatever was the previous value of modelview. Note the use of a vector to specify the translation in this command, rather than three separate parameters; this is typical of glMatrix. To apply a scaling transformation with scale factors sx, sy, and sz, use</p> <pre><code>mat4.scale( modelview, modelview, [sx,sy,sz] );\n</code></pre> <p>For rotation, glMatrix has four functions, including three for the common cases of rotation about the x, y, or z axis. The fourth rotation function specifies the axis of rotation as the line from (0,0,0) to a point (dx,dy,dz). This is equivalent to glRotatef(angle,dx,dy,dz) Unfortunately, the angle of rotation in these functions is specified in radians rather than in degrees:</p> <pre><code>mat4.rotateX( modelview, modelview, radians );\nmat4.rotateY( modelview, modelview, radians );\nmat4.rotateZ( modelview, modelview, radians );\nmat4.rotate( modelview, modelview, radians, [dx,dy,dz] );\n</code></pre> <p>These functions allow us to do all the basic modeling and viewing transformations that we need for 3D graphics. To do hierarchical graphics, we also need to save and restore the transformation as we traverse the scene graph. For that, we need a stack. We can use a regular JavaScript array, which already has push and pop operations. So, we can create the stack as an empty array:</p> <pre><code>const matrixStack = [];\n</code></pre> <p>We can then push a copy of the current modelview matrix onto the stack by saying</p> <pre><code>matrixStack.push( mat4.clone(modelview) );\n</code></pre> <p>and we can remove a matrix from the stack and set it to be the current modelview matrix with</p> <pre><code>modelview = matrixStack.pop();\n</code></pre> <p>These operations are equivalent to glPushMatrix() and glPopMatrix() in OpenGL.</p> <p>The starting point for the modelview transform is usually a viewing transform. In OpenGL, the function gluLookAt is often used to set up the viewing transformation (Subsection 3.3.4). The glMatrix library has a \"lookAt\" function to do the same thing:</p> <pre><code>mat4.lookAt( modelview, [eyex,eyey,eyez], [refx,refy,refz], [upx,upy,upz] );\n</code></pre> <p>Note that this function uses three vec3's in place of the nine separate parameters in gluLookAt, and it places the result in its first parameter instead of in a global variable. This function call is actually equivalent to the two OpenGL commands</p> <pre><code>glLoadIdentity();\ngluLookAt( eyex,eyey,eyez,refx,refy,refz,upx,upy,upz );\n</code></pre> <p>So, you don't have to set modelview equal to the identity matrix before calling mat4.lookAt, as you would usually do in OpenGL. However, you do have to create the modelview matrix at some point before using mat4.lookAt, such as by calling</p> <pre><code>let modelview = mat4.create();\n</code></pre> <p>If you do want to set an existing mat4 to the identity matrix, you can do so with the mat4.identity function. For example,</p> <pre><code>mat4.identity( modelview );\n</code></pre> <p>You could use this as a starting point if you wanted to compose the view transformation out of basic scale, rotate, and translate transformations.</p> <p>Similarly, glMatrix has functions for setting up projection transformations. It has functions equivalent to glOrtho, glFrustum, and gluPerspective (Subsection 3.3.3), except that the field-of-view angle in mat4.perspective is given in radians rather than degrees:</p> <pre><code>mat4.ortho( projection, left, right, bottom, top, near, far );\n\nmat4.frustum( projection, left, right, bottom, top, near, far );\n\nmat4.perspective( projection, fovyInRadians, aspect, near, far );\n</code></pre> <p>As with the modelview transformation, you do not need to load projection with the identity before calling one of these functions, but you must create projection as a mat4 (or an array of length 16).</p>"},{"location":"cn/c7/s1/#713-\u53d8\u6362\u5750\u6807","title":"7.1.3 \u53d8\u6362\u5750\u6807","text":"<p>Transforming Coordinates</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u7136\uff0c\u521b\u5efa\u6295\u5f71\u548c\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u7ed8\u5236\u57fa\u672c\u56fe\u5f62\u65f6\u4f7f\u7528\u5b83\u4eec\u6765\u53d8\u6362\u5750\u6807\u3002\u5728WebGL\u4e2d\uff0c\u53d8\u6362\u901a\u5e38\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u5b8c\u6210\u3002\u4e00\u4e2a\u57fa\u672c\u56fe\u5f62\u7684\u5750\u6807\u4ee5\u5bf9\u8c61\u5750\u6807\u6307\u5b9a\u3002\u5b83\u4eec\u4e58\u4ee5\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u4ee5\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u773c\u775b\u5750\u6807\uff0c\u7136\u540e\u4e58\u4ee5\u6295\u5f71\u77e9\u9635\u4ee5\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u5b9e\u9645\u7528\u4e8e\u7ed8\u5236\u57fa\u672c\u56fe\u5f62\u7684\u6700\u7ec8\u88c1\u526a\u5750\u6807\u3002\u6216\u8005\uff0c\u6a21\u578b\u89c6\u56fe\u548c\u6295\u5f71\u77e9\u9635\u53ef\u4ee5\u76f8\u4e58\uff0c\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u7ec4\u5408\u53d8\u6362\u7684\u77e9\u9635\uff1b\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u5c06\u5bf9\u8c61\u5750\u6807\u4e58\u4ee5\u8be5\u77e9\u9635\uff0c\u76f4\u63a5\u8f6c\u6362\u4e3a\u88c1\u526a\u5750\u6807\u3002</p> <p>\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\uff0c\u5750\u6807\u53d8\u6362\u901a\u5e38\u8868\u793a\u4e3aGLSL uniform\u53d8\u91cf\uff0c\u7c7b\u578b\u4e3amat4\u3002\u7740\u8272\u5668\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u5355\u72ec\u7684\u6295\u5f71\u548c\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u6216\u7ec4\u5408\u77e9\u9635\uff08\u6216\u4e24\u8005\u517c\u6709\uff09\u3002\u6709\u65f6\uff0c\u7531\u4e8e\u67d0\u4e9b\u5149\u7167\u8ba1\u7b97\u662f\u5728\u773c\u775b\u5750\u6807\u4e2d\u5b8c\u6210\u7684\uff0c\u56e0\u6b64\u53ef\u80fd\u9700\u8981\u5355\u72ec\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u77e9\u9635\uff0c\u4f46\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f7f\u7528\u7ec4\u5408\u77e9\u9635\u7684\u6700\u5c0fGLSL ES 1.00\u9876\u70b9\u7740\u8272\u5668\uff1a</p> <pre><code>attribute vec3 a_coords;           // \u9876\u70b9\u7684(x,y,z)\u5bf9\u8c61\u5750\u6807\u3002\nuniform mat4 modelviewProjection;  // \u7ec4\u5408\u53d8\u6362\u77e9\u9635\u3002\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);   // \u4e3aw\u5750\u6807\u6dfb\u52a01.0\u3002\n    gl_Position = modelviewProjection * coords;  // \u53d8\u6362\u5750\u6807\u3002\n}\n</code></pre> <p>\u8fd9\u4e2a\u7740\u8272\u5668\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8fwebgl/glmatrix-cube-unlit.html\u3002\u8be5\u7a0b\u5e8f\u5141\u8bb8\u7528\u6237\u67e5\u770b\u4e00\u4e2a\u5f69\u8272\u7acb\u65b9\u4f53\uff0c\u53ea\u4f7f\u7528\u57fa\u672c\u989c\u8272\u800c\u4e0d\u5e94\u7528\u5149\u7167\u3002\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u6b63\u4ea4\u6295\u5f71\u6216\u900f\u89c6\u6295\u5f71\uff0c\u5e76\u53ef\u4ee5\u4f7f\u7528\u952e\u76d8\u65cb\u8f6c\u7acb\u65b9\u4f53\u3002\u65cb\u8f6c\u662f\u4f5c\u4e3a\u56f4\u7ed5x\u3001y\u548cz\u8f74\u7684\u5355\u72ec\u65cb\u8f6c\u7ec4\u6210\u7684\u5efa\u6a21\u53d8\u6362\u5e94\u7528\u7684\u3002\u5728JavaScript\u65b9\u9762\u7684\u53d8\u6362\u77e9\u9635\uff0c\u7a0b\u5e8f\u4f7f\u7528glMatrix\u5e93\u4e2d\u7684mat4\u7c7b\u6765\u8868\u793a\u6295\u5f71\u3001\u6a21\u578b\u89c6\u56fe\u548c\u7ec4\u5408\u53d8\u6362\u77e9\u9635\uff1a</p> <pre><code>const projection = mat4.create();  // \u6295\u5f71\u77e9\u9635\nconst modelview = mat4.create();   // \u6a21\u578b\u89c6\u56fe\u77e9\u9635\nconst modelviewProjection = mat4.create();  // \u7ec4\u5408\u77e9\u9635\n</code></pre> <p>\uff08\u8fd9\u4e9b\u53d8\u91cf\u53ef\u4ee5\u662fconst\uff0c\u56e0\u4e3a\u76f8\u540c\u7684\u77e9\u9635\u5bf9\u8c61\u5c06\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u5c3d\u7ba1\u5bf9\u8c61\u4e2d\u7684\u6570\u5b57\u4f1a\u6539\u53d8\u3002\uff09\u53ea\u6709modelviewProjection\u5bf9\u5e94\u4e8e\u7740\u8272\u5668\u53d8\u91cf\u3002\u5728\u521d\u59cb\u5316\u671f\u95f4\u4f7f\u7528</p> <pre><code>u_modelviewProjection = gl.getUniformLocation(prog, \"modelviewProjection\");\n</code></pre> <p>\u83b7\u53d6\u8be5\u53d8\u91cf\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4f4d\u7f6e\u3002\u53d8\u6362\u77e9\u9635\u5728draw()\u51fd\u6570\u4e2d\u8ba1\u7b97\uff0c\u4f7f\u7528glMatrix mat4\u7c7b\u7684\u51fd\u6570\u3002\u5728\u7ed8\u5236\u7ec4\u6210\u7acb\u65b9\u4f53\u7684\u57fa\u672c\u56fe\u5f62\u4e4b\u524d\uff0c\u4f7f\u7528gl.uniformMatrix4fv\u5c06modelviewProjection\u7684\u503c\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u8fd9\u91cc\u662f\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u4ee3\u7801\uff1a</p> <pre><code>/* \u8bbe\u7f6e\u6295\u5f71\u4ee5\u8868\u793a\u6295\u5f71\u53d8\u6362 */\n\nif (document.getElementById(\"persproj\").checked) {\n    mat4.perspective(projection, Math.PI/5, 1, 4, 8);\n}\nelse {\n    mat4.ortho(projection, -2, 2, -2, 2, 4, 8);\n}\n\n/* \u8bbe\u7f6emodelview\u4ee5\u8868\u793a\u89c2\u5bdf\u53d8\u6362\u3002 */\n\nmat4.lookAt(modelview, [2,2,6], [0,0,0], [0,1,0]);\n\n/* \u5c06\u5efa\u6a21\u53d8\u6362\u5e94\u7528\u4e8emodelview\u3002 */\n\nmat4.rotateX(modelview, modelview, rotateX);\nmat4.rotateY(modelview, modelview, rotateY);\nmat4.rotateZ(modelview, modelview, rotateZ);\n\n/* \u5c06\u6295\u5f71\u77e9\u9635\u4e58\u4ee5\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u5f97\u5230\u7ec4\u5408\u53d8\u6362\u77e9\u9635\uff0c\u5e76\u5c06\u8be5\u77e9\u9635\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u3002 */\n\nmat4.multiply( modelviewProjection, projection, modelview );\ngl.uniformMatrix4fv(u_modelviewProjection, false, modelviewProjection );\n</code></pre> <p>\u5982\u679c\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u4e86\u5355\u72ec\u7684\u6a21\u578b\u89c6\u56fe\u548c\u6295\u5f71\u77e9\u9635\uff0c\u90a3\u4e48\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u53ef\u4ee5\u5e94\u7528\u4e8e\u5c06\u5bf9\u8c61\u5750\u6807\u8f6c\u6362\u4e3a\u773c\u775b\u5750\u6807\uff0c\u7136\u540e\u6295\u5f71\u53ef\u4ee5\u5e94\u7528\u4e8e\u773c\u775b\u5750\u6807\u6765\u8ba1\u7b97gl_Position\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u6700\u5c0f\u9876\u70b9\u7740\u8272\u5668\uff1a</p> <pre><code>attribute vec3 a_coords;  // \u9876\u70b9\u7684(x,y,z)\u5bf9\u8c61\u5750\u6807\u3002\nuniform mat4 modelview;   // \u6a21\u578b\u89c6\u56fe\u53d8\u6362\u3002\nuniform mat4 projection;  // \u6295\u5f71\u53d8\u6362\u3002\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);      // \u4e3aw\u5750\u6807\u6dfb\u52a01.0\u3002\n    vec4 eyeCoords = modelview * coords;   // \u5e94\u7528\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u3002\n    gl_Position = projection * eyeCoords;  // \u5e94\u7528\u6295\u5f71\u53d8\u6362\u3002\n}\n</code></pre> <p>Of course, the point of making a projection and a modelview transformation is to use them to transform coordinates while drawing primitives. In WebGL, the transformation is usually done in the vertex shader. The coordinates for a primitive are specified in object coordinates. They are multiplied by the modelview transformation to covert them into eye coordinates and then by the projection matrix to covert them to the final clip coordinates that are actually used for drawing the primitive. Alternatively, the modelview and projection matrices can be multiplied together to get a matrix that represents the combined transformation; object coordinates can then be multiplied by that matrix to transform them directly into clip coordinates.</p> <p>In the shader program, coordinate transforms are usually represented as GLSL uniform variables of type mat4. The shader program can use either separate projection and modelview matrices or a combined matrix (or both). Sometimes, a separate modelview transform matrix is required, because certain lighting calculations are done in eye coordinates, but here is a minimal GLSL ES 1.00 vertex shader that uses a combined matrix:</p> <pre><code>attribute vec3 a_coords;           // (x,y,z) object coordinates of vertex.\nuniform mat4 modelviewProjection;  // Combined transformation matrix.\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);   // Add 1.0 for the w-coordinate.\n    gl_Position = modelviewProjection * coords;  // Transform the coordinates.\n}\n</code></pre> <p>This shader is from the sample program webgl/glmatrix-cube-unlit.html. That program lets the user view a colored cube, using just basic color with no lighting applied. The user can select either an orthographic or a perspective projection and can rotate the cube using the keyboard. The rotation is applied as a modeling transformation consisting of separate rotations about the x-, y-, and z-axes. For transformation matrices on the JavaScript side, the program uses the mat4 class from the glMatrix library to represent the projection, modelview, and combined transformation matrices:</p> <pre><code>const projection = mat4.create();  // projection matrix\nconst modelview = mat4.create();   // modelview matrix\nconst modelviewProjection = mat4.create();  // combined matrix\n</code></pre> <p>(These variables can be const since the same matrix objects will be used throughout the program, even though the numbers in the objects will change.) Only modelviewProjection corresponds to a shader variable. The location of that variable in the shader program is obtained during initialization using</p> <pre><code>u_modelviewProjection = gl.getUniformLocation(prog, \"modelviewProjection\");\n</code></pre> <p>The transformation matrices are computed in the draw() function, using functions from the glMatrix mat4 class. The value for modelviewProjection is sent to the shader program using gl.uniformMatrix4fv before the primitives that make up the cube are drawn. Here is the code that does it:</p> <pre><code>/* Set the value of projection to represent the projection transformation */\n\nif (document.getElementById(\"persproj\").checked) {\n    mat4.perspective(projection, Math.PI/5, 1, 4, 8);\n}\nelse {\n    mat4.ortho(projection, -2, 2, -2, 2, 4, 8);\n}\n\n/* Set the value of modelview to represent the viewing transform. */\n\nmat4.lookAt(modelview, [2,2,6], [0,0,0], [0,1,0]);\n\n/* Apply the modeling transformation to modelview. */\n\nmat4.rotateX(modelview, modelview, rotateX);\nmat4.rotateY(modelview, modelview, rotateY);\nmat4.rotateZ(modelview, modelview, rotateZ);\n\n/* Multiply the projection matrix times the modelview matrix to give the\ncombined transformation matrix, and send that to the shader program. */\n\nmat4.multiply( modelviewProjection, projection, modelview );\ngl.uniformMatrix4fv(u_modelviewProjection, false, modelviewProjection );\n</code></pre> <p>If separate modelview and projection matrices are used in the shader program, then the modelview matrix can be applied to transform object coordinates to eye coordinates, and the projection can then be applied to the eye coordinates to compute gl_Position. Here is a minimal vertex shader that does that:</p> <pre><code>attribute vec3 a_coords;  // (x,y,z) object coordinates of vertex.\nuniform mat4 modelview;   // Modelview transformation.\nuniform mat4 projection;  // Projection transformation\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);      // Add 1.0 for w-coordinate.\n    vec4 eyeCoords = modelview * coords;   // Apply modelview transform.\n    gl_Position = projection * eyeCoords;  // Apply projection transform.\n}\n</code></pre>"},{"location":"cn/c7/s1/#714-\u53d8\u6362\u6cd5\u7ebf","title":"7.1.4 \u53d8\u6362\u6cd5\u7ebf","text":"<p>Transforming Normals</p> \u4e2d\u6587\u82f1\u6587 <p>\u6cd5\u5411\u91cf\u5bf9\u4e8e\u5149\u7167\u8ba1\u7b97\u81f3\u5173\u91cd\u8981\uff08\u89c14.1.3\u5c0f\u8282\uff09\u3002\u5f53\u4e00\u4e2a\u8868\u9762\u4ee5\u67d0\u79cd\u65b9\u5f0f\u53d8\u6362\u65f6\uff0c\u4f3c\u4e4e\u8be5\u8868\u9762\u7684\u6cd5\u5411\u91cf\u4e5f\u4f1a\u6539\u53d8\u3002\u7136\u800c\uff0c\u5982\u679c\u53d8\u6362\u662f\u5e73\u79fb\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u6cd5\u5411\u91cf\u6307\u793a\u8868\u9762\u671d\u5411\u7684\u65b9\u5411\u3002\u5e73\u79fb\u8868\u9762\u4e0d\u4f1a\u6539\u53d8\u8868\u9762\u671d\u5411\u7684\u65b9\u5411\uff0c\u56e0\u6b64\u6cd5\u5411\u91cf\u4fdd\u6301\u4e0d\u53d8\u3002\u8bb0\u4f4f\uff0c\u5411\u91cf\u6ca1\u6709\u4f4d\u7f6e\uff0c\u53ea\u6709\u957f\u5ea6\u548c\u65b9\u5411\u3002\u6240\u4ee5\u751a\u81f3\u8c08\u8bba\u79fb\u52a8\u6216\u5e73\u79fb\u5411\u91cf\u90fd\u6ca1\u6709\u610f\u4e49\u3002</p> <p>\u4f60\u7684\u7b2c\u4e00\u4e2a\u731c\u6d4b\u53ef\u80fd\u662f\u6cd5\u5411\u91cf\u5e94\u8be5\u901a\u8fc7\u53d8\u6362\u7684\u65cb\u8f6c/\u7f29\u653e\u90e8\u5206\u6765\u53d8\u6362\u3002\u731c\u6d4b\u6b63\u786e\u7684\u53d8\u6362\u75313x3\u77e9\u9635\u8868\u793a\uff0c\u8be5\u77e9\u9635\u662f\u901a\u8fc7\u4ece4x4\u5750\u6807\u53d8\u6362\u77e9\u9635\u4e2d\u4e22\u5f03\u53f3\u5217\u548c\u5e95\u884c\u83b7\u5f97\u7684\u3002\uff08\u53f3\u5217\u8868\u793a\u53d8\u6362\u7684\u5e73\u79fb\u90e8\u5206\uff0c\u5e95\u884c\u4e4b\u6240\u4ee5\u5b58\u5728\uff0c\u662f\u56e0\u4e3a\u5728\u77e9\u9635\u4e2d\u5b9e\u73b0\u5e73\u79fb\u9700\u8981\u4f7f\u7528\u9f50\u6b21\u5750\u6807\u6765\u8868\u793a\u5411\u91cf\u3002\u6cd5\u5411\u91cf\u5728\u4e0d\u8003\u8651\u5e73\u79fb\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f7f\u7528\u9f50\u6b21\u5750\u6807\u3002\uff09\u4f46\u8fd9\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u4e0d\u53ef\u80fd\u662f\u6b63\u786e\u7684\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u526a\u5207\u53d8\u6362\u3002\u6b63\u5982\u8fd9\u4e2a\u63d2\u56fe\u6240\u793a\uff0c\u5982\u679c\u5bf9\u8c61\u7684\u6cd5\u5411\u91cf\u4e0e\u5bf9\u8c61\u4e00\u6837\u7ecf\u53d7\u76f8\u540c\u7684\u526a\u5207\u53d8\u6362\uff0c\u5f97\u5230\u7684\u5411\u91cf\u5c06\u4e0d\u4f1a\u4e0e\u5bf9\u8c61\u5782\u76f4\uff1a</p> <p></p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u4ecd\u7136\u53ef\u4ee5\u4ece\u5750\u6807\u53d8\u6362\u77e9\u9635\u4e2d\u83b7\u5f97\u6cd5\u5411\u91cf\u7684\u6b63\u786e\u53d8\u6362\u77e9\u9635\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4f60\u9700\u8981\u4e22\u5f03\u7b2c\u56db\u884c\u548c\u7b2c\u56db\u5217\uff0c\u7136\u540e\u53d6\u4e00\u4e2a\u53eb\u505a\u201c\u9006\u8f6c\u7f6e\u201d\u7684\u4e1c\u897f\uff0c\u8fd9\u4e2a3x3\u77e9\u9635\u7684\u7ed3\u679c\u662f\u5df2\u77e5\u7684\u3002\u4f60\u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u6216\u4e3a\u4ec0\u4e48\u5b83\u6709\u6548\u3002glMatrix\u5e93\u4f1a\u4e3a\u4f60\u8ba1\u7b97\u5b83\u3002\u4f60\u9700\u8981\u7684\u51fd\u6570\u662fnormalFromMat4\uff0c\u5b83\u5728mat3\u7c7b\u4e2d\u5b9a\u4e49\uff1a</p> <pre><code>mat3.normalFromMat4( normalMatrix, coordinateMatrix );\n</code></pre> <p>\u5728\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u4e2d\uff0ccoordinateMatrix\u662f\u8868\u793a\u5e94\u7528\u4e8e\u5750\u6807\u7684\u53d8\u6362\u7684mat4\uff0cnormalMatrix\u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684mat3\u3002\u8fd9\u4e2a\u51fd\u6570\u8ba1\u7b97coordinateMatrix\u7684\u65cb\u8f6c/\u7f29\u653e\u90e8\u5206\u7684\u9006\u8f6c\u7f6e\uff0c\u5e76\u5c06\u7b54\u6848\u653e\u5728normalMatrix\u4e2d\u3002\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6cd5\u5411\u91cf\u8fdb\u884c\u5149\u7167\u8ba1\u7b97\uff0c\u800c\u5149\u7167\u8ba1\u7b97\u662f\u5728\u773c\u775b\u5750\u6807\u4e2d\u5b8c\u6210\u7684\uff0c\u6211\u4eec\u901a\u5e38\u611f\u5174\u8da3\u7684\u5750\u6807\u53d8\u6362\u662f\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u3002</p> <p>\u6cd5\u5411\u91cf\u5e94\u8be5\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\uff0c\u5728\u90a3\u91cc\u9700\u8981\u5b83\u6765\u53d8\u6362\u6cd5\u5411\u91cf\uff0c\u4ee5\u4fbf\u5728\u5149\u7167\u8ba1\u7b97\u4e2d\u4f7f\u7528\u3002\u5149\u7167\u9700\u8981\u5355\u4f4d\u6cd5\u5411\u91cf\uff0c\u5373\u957f\u5ea6\u4e3a\u4e00\u7684\u6cd5\u5411\u91cf\u3002\u6cd5\u5411\u91cf\u77e9\u9635\u901a\u5e38\u4e0d\u4fdd\u7559\u5b83\u5e94\u7528\u7684\u5411\u91cf\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u5c06\u9700\u8981\u89c4\u8303\u5316\u53d8\u6362\u540e\u7684\u5411\u91cf\u3002GLSL\u6709\u5185\u7f6e\u51fd\u6570\u7528\u4e8e\u89c4\u8303\u5316\u5411\u91cf\u3002\u5b9e\u73b0\u5149\u7167\u7684\u9876\u70b9\u7740\u8272\u5668\u53ef\u80fd\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>attribute vec3 a_coords;   // \u672a\u53d8\u6362\u7684\u5bf9\u8c61\u5750\u6807\u3002\nattribute vec3 normal;     // \u6cd5\u5411\u91cf\u3002\nuniform mat4 projection;   // \u6295\u5f71\u53d8\u6362\u77e9\u9635\u3002\nuniform mat4 modelview;    // \u6a21\u578b\u89c6\u56fe\u53d8\u6362\u77e9\u9635\u3002\nuniform mat3 normalMatrix; // \u6cd5\u5411\u91cf\u7684\u53d8\u6362\u77e9\u9635\u3002\n.\n.  // \u5b9a\u4e49\u5149\u548c\u6750\u8d28\u5c5e\u6027\u7684\u53d8\u91cf\u3002\n.\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);  // \u4e3aw\u5750\u6807\u6dfb\u52a01.0\u3002\n    vec4 eyeCoords = modelview * coords;  // \u53d8\u6362\u5230\u773c\u775b\u5750\u6807\u3002\n    gl_Position = projection * eyeCoords;  // \u53d8\u6362\u5230\u88c1\u526a\u5750\u6807\u3002\n    vec3 transformedNormal = normalMatrix*normal;  // \u53d8\u6362\u6cd5\u5411\u91cf\u3002\n    vec3 unitNormal = normalize(transformedNormal);  // \u89c4\u8303\u5316\u3002\n    .\n    .  // \u4f7f\u7528eyeCoords, unitNormal\u548c\u5149\u548c\u6750\u8d28\u5c5e\u6027\n    .  // \u8ba1\u7b97\u9876\u70b9\u7684\u989c\u8272\u3002\n    .\n}\n</code></pre> <p>\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u770b\u51e0\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002</p> <p>\u6211\u4f1a\u6ce8\u610f\u5230GLSL ES 3.00\uff08\u4f46\u4e0d\u662fGLSL ES 1.00\uff09\u6709\u5185\u7f6e\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u77e9\u9635\u7684\u9006\u548c\u8f6c\u7f6e\uff0c\u8fd9\u4f7f\u5f97\u5728\u7740\u8272\u5668\u4e2d\u8ba1\u7b97\u6cd5\u5411\u91cf\u77e9\u9635\u76f8\u5bf9\u5bb9\u6613\u3002\u7136\u800c\uff0c\u5728JavaScript\u65b9\u9762\u4e00\u6b21\u6027\u8ba1\u7b97\u77e9\u9635\u53ef\u80fd\u4ecd\u7136\u6bd4\u5728\u6bcf\u4e2a\u9876\u70b9\u7740\u8272\u5668\u7684\u6267\u884c\u4e2d\u8ba1\u7b97\u5b83\u66f4\u6709\u6548\u7387\u3002</p> <p>Normal vectors are essential for lighting calculations (Subsection 4.1.3). When a surface is transformed in some way, it seems that the normal vectors to that surface will also change. However, that is not true if the transformation is a translation. A normal vector tells what direction a surface is facing. Translating the surface does not change the direction in which the surface is facing, so the normal vector remains the same. Remember that a vector doesn't have a position, just a length and a direction. So it doesn't even make sense to talk about moving or translating a vector.</p> <p>Your first guess might be that the normal vector should be transformed by just the rotation/scaling part of the transformation. The guess is that the correct transformation is represented by the 3-by-3 matrix that is obtained by dropping the right column and the bottom row from the 4-by-4 coordinate transformation matrix. (The right column represents the translation part of the transformation, and the bottom row is only there because implementing translation in a matrix requires the use of homogeneous coordinates to represent vectors. Normal vectors, where translation is not an issue, do not use homogeneous coordinates.) But that can't be correct in all cases. Consider, for example, a shear transform. As this illustration shows, if the normal vectors to an object are subjected to the same shear transformation as the object, the resulting vectors will not be perpendicular to the object:</p> <p></p> <p>Nevertheless, it is possible to get the correct transformation matrix for normal vectors from the coordinate transformation matrix. It turns out that you need to drop the fourth row and the fourth column and then take something called the \"inverse transpose\" of the resulting 3-by-3 matrix. You don't need to know what that means or why it works. The glMatrix library will compute it for you. The function that you need is normalFromMat4, and it is defined in the mat3 class:</p> <pre><code>mat3.normalFromMat4( normalMatrix, coordinateMatrix );\n</code></pre> <p>In this function call, coordinateMatrix is the mat4 that represents the transformation that is applied to coordinates, and normalMatrix is a mat3 that already exists. This function computes the inverse transpose of the rotation/scale part of coordinateMatrix and places the answer in normalMatrix. Since we need normal vectors for lighting calculations, and lighting calculations are done in eye coordinates, the coordinate transformation that we are interested in is usually the modelview transform.</p> <p>The normal matrix should be sent to the shader program, where it is needed to transform normal vectors for use in lighting calculations. Lighting requires unit normal vectors, that is, normal vectors of length one. The normal matrix does not in general preserve the length of a vector to which it is applied, so it will be necessary to normalize the transformed vector. GLSL has a built-in function for normalizing vectors. A vertex shader that implements lighting might take the form:</p> <pre><code>attribute vec3 a_coords;   // Untransformed object coordinates.\nattribute vec3 normal;     // Normal vector.\nuniform mat4 projection;   // Projection transformation matrix.\nuniform mat4 modelview;    // Modelview transformation matrix.\nuniform mat3 normalMatrix; // Transform matrix for normal vectors.\n.\n.  // Variables to define light and material properties.\n.\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);  // Add a 1.0 for the w-coordinate.\n    vec4 eyeCoords = modelview * coords;  // Transform to eye coordinates.\n    gl_Position = projection * eyeCoords;  // Transform to clip coordinates.\n    vec3 transformedNormal = normalMatrix*normal;  // Transform normal vector.\n    vec3 unitNormal = normalize(transformedNormal);  // Normalize.\n    .\n    .  // Use eyeCoords, unitNormal, and light and material\n    .  // properties to compute a color for the vertex.\n    .\n}\n</code></pre> <p>We will look at several specific examples in the next section.</p> <p>I will note that GLSL ES 3.00 (but not GLSL ES 1.00) has built-in functions for computing the inverse and the transpose of a matrix, making it fairly easy to compute the normal matrix in the shader. However, it might still be more efficient to compute the matrix once on the JavaScript side, rather than computing it in every execution of the vertex shader.</p>"},{"location":"cn/c7/s1/#715-\u9f20\u6807\u65cb\u8f6c","title":"7.1.5 \u9f20\u6807\u65cb\u8f6c","text":"<p>Rotation by Mouse</p> \u4e2d\u6587\u82f1\u6587 <p>\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u5728\u6709\u7528\u6237\u4ea4\u4e92\u65f6\u53d8\u5f97\u66f4\u6709\u8da3\u3002\u901a\u8fc7\u8ba9\u7528\u6237\u65cb\u8f6c\u573a\u666f\uff0c\u4ece\u4e0d\u540c\u65b9\u5411\u67e5\u770b\uff0c3D\u4f53\u9a8c\u5f97\u5230\u4e86\u6781\u5927\u7684\u589e\u5f3a\u3002\u672a\u7167\u660e\u7684\u7acb\u65b9\u4f53\u793a\u4f8b\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u952e\u76d8\u65cb\u8f6c\u573a\u666f\u3002\u4f46\u662f\u4f7f\u7528\u9f20\u6807\u8fdb\u884c\u65cb\u8f6c\u53ef\u4ee5\u7ed9\u7528\u6237\u63d0\u4f9b\u66f4\u597d\u7684\u63a7\u5236\u3002\u6211\u7f16\u5199\u4e86\u4e24\u4e2aJavaScript\u7c7b\uff0cSimpleRotator\u548cTrackballRotator\uff0c\u6765\u5b9e\u73b0\u4e24\u79cd\u4e0d\u540c\u7684\u9f20\u6807\u65cb\u8f6c\u98ce\u683c\u3002</p> <p>SimpleRotator\u7c7b\u5728\u6587\u4ef6webgl/simple-rotator.js\u4e2d\u5b9a\u4e49\u3002\u8981\u5728\u7f51\u9875\u4e0a\u4f7f\u7528\u5b83\uff0c\u4f60\u9700\u8981\u5728\u4e00\u4e2a<code>&lt;script&gt;</code>\u6807\u7b7e\u4e2d\u5305\u542b\u8be5\u6587\u4ef6\uff0c\u5e76\u4e14\u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\u4e3aSimpleRotator\u7684\u5bf9\u8c61\uff1a</p> <pre><code>rotator = new SimpleRotator( canvas, callback, viewDistance );\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2aDOM <code>&lt;canvas&gt;</code>\u5143\u7d20\u3002\u5b83\u5e94\u8be5\u662fWebGL\u6e32\u67d3\u573a\u666f\u7684\u753b\u5e03\u3002SimpleRotator\u6784\u9020\u51fd\u6570\u4e3a\u753b\u5e03\u6dfb\u52a0\u4e86\u4e00\u4e2a\u9f20\u6807\u4e8b\u4ef6\u7684\u76d1\u542c\u5668\uff1b\u5b83\u8fd8\u5904\u7406\u89e6\u6478\u5c4f\u4e0a\u7684\u89e6\u6478\u4e8b\u4ef6\u3002\u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u5b83\u88ab\u5b9a\u4e49\uff0c\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u51fd\u6570\u3002\u6bcf\u6b21\u65cb\u8f6c\u53d8\u5316\u65f6\uff0c\u90fd\u4f1a\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\u3002\u901a\u5e38\uff0c\u56de\u8c03\u51fd\u6570\u662f\u6e32\u67d3\u753b\u5e03\u4e2d\u56fe\u50cf\u7684\u51fd\u6570\u3002\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e5f\u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u5b9a\u4e49\u4e86\uff0c\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u8d1f\u6570\u3002\u5b83\u7ed9\u51fa\u4e86\u89c2\u5bdf\u8005\u4ece\u65cb\u8f6c\u4e2d\u5fc3\u7684\u8ddd\u79bb\u3002\u9ed8\u8ba4\u503c\u662f\u96f6\uff0c\u8fd9\u5bf9\u4e8e\u6b63\u4ea4\u6295\u5f71\u53ef\u80fd\u6ca1\u95ee\u9898\uff0c\u4f46\u901a\u5e38\u4e0d\u6b63\u786e\u3002</p> <p>SimpleRotator\u8ddf\u8e2a\u4e00\u4e2a\u968f\u7740\u7528\u6237\u65cb\u8f6c\u573a\u666f\u800c\u53d8\u5316\u7684\u89c2\u5bdf\u53d8\u6362\u3002\u6700\u91cd\u8981\u7684\u51fd\u6570\u662frotator.getViewMatrix()\u3002\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b16\u4e2a\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u4ee3\u8868\u5217\u4e3b\u5e8f\u7684\u89c2\u5bdf\u53d8\u6362\u77e9\u9635\u3002\u8fd9\u4e2a\u77e9\u9635\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528gl.uniformMatrix4fv\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u6216\u8005\u53ef\u4ee5\u4f5c\u4e3a\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u7684\u521d\u59cb\u503c\u4e0eglMatrix\u5e93\u7684\u51fd\u6570\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/cube-with-simple-rotator.html\u662f\u4f7f\u7528SimpleRotator\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528\u7531glMatrix\u51fd\u6570\u5b9a\u4e49\u7684\u900f\u89c6\u6295\u5f71</p> <pre><code>mat4.perspective(projection, Math.PI/8, 1, 8, 12);\n</code></pre> <p>\u65cb\u8f6c\u5668\u7684viewDistance\u5fc5\u987b\u5728\u6295\u5f71\u4e2d\u7684near\u548cfar\u8ddd\u79bb\u4e4b\u95f4\u3002\u8fd9\u91cc\uff0cnear\u662f8\uff0cfar\u662f12\uff0cviewDistance\u53ef\u4ee5\u8bbe\u7f6e\u4e3a10\u3002\u65cb\u8f6c\u5668\u662f\u5728\u521d\u59cb\u5316\u671f\u95f4\u4f7f\u7528\u8bed\u53e5\u521b\u5efa\u7684</p> <pre><code>rotator = new SimpleRotator(canvas, draw, 10);\n</code></pre> <p>\u5728draw()\u51fd\u6570\u4e2d\uff0c\u5728\u7ed8\u5236\u573a\u666f\u4e4b\u524d\uff0c\u4ece\u65cb\u8f6c\u5668\u83b7\u53d6\u89c2\u5bdf\u53d8\u6362\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5efa\u6a21\u53d8\u6362\uff0c\u6240\u4ee5\u89c6\u56fe\u77e9\u9635\u4e5f\u662f\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u3002\u4f7f\u7528glMatrix\u51fd\u6570\u5c06\u8be5\u77e9\u9635\u4e0e\u6295\u5f71\u77e9\u9635\u76f8\u4e58\uff0c\u5e76\u5c06\u7ec4\u5408\u53d8\u6362\u77e9\u9635\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\uff1a</p> <pre><code>let modelview = rotator.getViewMatrix();\n\nmat4.multiply( modelviewProjection, projection, modelview );\ngl.uniformMatrix4fv(u_modelviewProjection, false, modelviewProjection );\n</code></pre> <p>\u5982\u679c\u4f60\u53ea\u662f\u60f3\u5728\u81ea\u5df1\u7684\u7a0b\u5e8f\u4e2d\u4f7f\u7528SimpleRotator\uff0c\u4f60\u53ea\u9700\u8981\u77e5\u9053\u8fd9\u4e9b\u3002\u6211\u8fd8\u7f16\u5199\u4e86\u4e00\u4e2a\u66ff\u4ee3\u7684\u65cb\u8f6c\u5668\u7c7bTrackballRotator\uff0c\u5b83\u5728JavaScript\u6587\u4ef6webgl/trackball-rotator.js\u4e2d\u5b9a\u4e49\u3002TrackballRotator\u53ef\u4ee5\u50cfSimpleRotator\u4e00\u6837\u4f7f\u7528\u3002\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8eTrackballRotator\u5141\u8bb8\u5b8c\u5168\u81ea\u7531\u7684\u65cb\u8f6c\uff0c\u800cSimpleRotator\u6709\u4e00\u4e2a\u7ea6\u675f\uff0c\u5373y\u8f74\u5728\u56fe\u50cf\u4e2d\u59cb\u7ec8\u4fdd\u6301\u5782\u76f4\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/cube-with-trackball-rotator.html\u4f7f\u7528\u4e86\u4e00\u4e2aTrackballRotator\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\u4e0eSimpleRotator\u793a\u4f8b\u76f8\u540c\u3002\u4ee5\u4e0b\u6f14\u793a\u8ba9\u4f60\u5c1d\u8bd5\u4e24\u79cd\u7c7b\u578b\u7684\u65cb\u8f6c\u5668\u3002\u5de6\u4fa7\u7684\u7acb\u65b9\u4f53\u4f7f\u7528\u4e86SimpleRotator\uff0c\u53f3\u4fa7\u4f7f\u7528\u4e86TrackballRotator\uff1a</p> <p></p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u65e0\u8bba\u539f\u70b9\u662f\u5426\u5728\u56fe\u50cf\u4e2d\u5fc3\uff0c\u4efb\u4f55\u7c7b\u578b\u7684\u65cb\u8f6c\u5668\u7684\u65cb\u8f6c\u4e2d\u5fc3\u90fd\u662f\u539f\u70b9\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528rotation.setRotationCenter([a,b,c])\u6765\u6539\u53d8\u65cb\u8f6c\u4e2d\u5fc3\u4e3a\u70b9(a,b,c)\u3002\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u6570\u5b57\u7684\u6570\u7ec4\u3002\u901a\u5e38\uff0c(a,b,c)\u5c06\u662f\u56fe\u50cf\u4e2d\u5fc3\u663e\u793a\u7684\u70b9\uff08\u5728gluLookAt\u4e2d\u5c06\u662f\u89c6\u56fe\u53c2\u8003\u70b9\uff09\u3002</p> <p>\u4f60\u4e0d\u9700\u8981\u7406\u89e3\u5b9e\u73b0\u65cb\u8f6c\u5668\u6240\u4f7f\u7528\u7684\u6570\u5b66\u3002\u5b9e\u9645\u4e0a\uff0cTrackballRotator \u4f7f\u7528\u4e86\u4e00\u4e9b\u6211\u5728\u8fd9\u91cc\u4e0d\u60f3\u89e3\u91ca\u7684\u9ad8\u7ea7\u6280\u672f\u3002\u7136\u800c\uff0cSimpleRotator \u6bd4\u8f83\u7b80\u5355\uff0c\u4e86\u89e3\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5f88\u597d\u7684\u3002\u6240\u4ee5\uff0c\u6211\u5c06\u89e3\u91caSimpleRotator \u7684\u89c6\u56fe\u53d8\u6362\u662f\u5982\u4f55\u8ba1\u7b97\u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u8003\u8651\u6574\u4f53\u573a\u666f\u4e0a\u7684\u76f8\u5e94\u5efa\u6a21\u53d8\u6362\u4f1a\u66f4\u5bb9\u6613\uff08\u56de\u60f3\u4e00\u4e0b\u5efa\u6a21\u548c\u89c6\u56fe\u7684\u7b49\u4ef7\u60273.3.4\u5c0f\u8282\uff09\u3002</p> <p>\u5efa\u6a21\u53d8\u6362\u5305\u62ec\u7ed5y\u8f74\u7684\u65cb\u8f6c\uff0c\u7136\u540e\u662f\u7ed5x\u8f74\u7684\u65cb\u8f6c\u3002\u65cb\u8f6c\u7684\u5927\u5c0f\u968f\u7740\u7528\u6237\u62d6\u52a8\u9f20\u6807\u800c\u53d8\u5316\u3002\u5de6\u53f3\u79fb\u52a8\u63a7\u5236\u7ed5y\u8f74\u7684\u65cb\u8f6c\uff0c\u800c\u4e0a\u4e0b\u79fb\u52a8\u63a7\u5236\u7ed5x\u8f74\u7684\u65cb\u8f6c\u3002\u7ed5x\u8f74\u7684\u65cb\u8f6c\u88ab\u9650\u5236\u5728-85\u523085\u5ea6\u7684\u8303\u56f4\u5185\u3002\u6ce8\u610f\uff0c\u7ed5y\u8f74\u7684\u65cb\u8f6c\uff0c\u7136\u540e\u7ed5x\u8f74\u7684\u65cb\u8f6c\uff0c\u5728\u6295\u5f71\u5230\u5c4f\u5e55\u4e0a\u65f6\uff0c\u603b\u662f\u4f7fy\u8f74\u6307\u5411\u5782\u76f4\u65b9\u5411\u3002</p> <p>\u5047\u8bbe\u65cb\u8f6c\u4e2d\u5fc3\u662f(tx,ty,tz)\u800c\u4e0d\u662f(0,0,0)\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5728\u8fdb\u884c\u65cb\u8f6c\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5e73\u79fb\u573a\u666f\uff0c\u5c06\u70b9(tx,ty,tz)\u79fb\u52a8\u5230\u539f\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7(-tx,-ty,-tz)\u8fdb\u884c\u5e73\u79fb\u6765\u5b9e\u73b0\u3002\u7136\u540e\uff0c\u5728\u8fdb\u884c\u65cb\u8f6c\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u539f\u70b9\u5e73\u79fb\u56de\u70b9(tx,ty,tz)\u3002</p> <p>\u6700\u540e\uff0c\u5982\u679cviewDistance\u4e0d\u4e3a\u96f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u573a\u666f\u63a8\u79bb\u89c2\u5bdf\u8005viewDistance\u5355\u4f4d\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7(0,0,-viewDistance)\u8fdb\u884c\u5e73\u79fb\u6765\u5b9e\u73b0\u3002\u5982\u679cd\u662f\u89c6\u56fe\u8ddd\u79bb\uff0cry\u662f\u7ed5y\u8f74\u7684\u65cb\u8f6c\uff0crx\u662f\u7ed5x\u8f74\u7684\u65cb\u8f6c\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5bf9\u573a\u666f\u5e94\u7528\u7684\u5efa\u6a21\u53d8\u6362\u5e8f\u5217\u5982\u4e0b\uff1a</p> <ol> <li>\u5c06\u89c6\u56fe\u4e2d\u5fc3\u79fb\u52a8\u5230\u539f\u70b9\uff1a\u5e73\u79fb(-tx,-ty,-tz)\u3002</li> <li>\u7ed5y\u8f74\u65cb\u8f6cry\u5f27\u5ea6\u7684\u573a\u666f\u3002</li> <li>\u7ed5x\u8f74\u65cb\u8f6crx\u5f27\u5ea6\u7684\u573a\u666f\u3002</li> <li>\u5c06\u539f\u70b9\u79fb\u56de\u89c6\u56fe\u4e2d\u5fc3\uff1a\u5e73\u79fb(tx,ty,tz)\u3002</li> <li>\u5c06\u573a\u666f\u8fdc\u79bb\u89c2\u5bdf\u8005\uff1a\u5e73\u79fb(0,0,-d)\u3002</li> </ol> <p>\u8bf7\u8bb0\u4f4f\uff0c\u5efa\u6a21\u53d8\u6362\u662f\u6309\u7167\u4e0e\u4ee3\u7801\u4e2d\u53d1\u751f\u7684\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\uff0c\u89c6\u56fe\u77e9\u9635\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0bglMatrix\u547d\u4ee4\u521b\u5efa\uff1a</p> <pre><code>viewmatrix = mat4.create();\nmat4.translate(viewmatrix, viewmatrix, [0,0,-d]);\nmat4.translate(viewmatrix, viewmatrix, [tx,ty,tz]);\nmat4.rotateX(viewmatrix, viewmatrix, rx);\nmat4.rotateY(viewmatrix, viewmatrix, ry);\nmat4.translate(viewmatrix, viewmatrix, [-tx,-ty,-tz]);\n</code></pre> <p>\u5b9e\u9645\u4e0a\uff0c\u5728\u6211\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u76f4\u63a5\u6839\u636e\u5404\u4e2a\u53d8\u6362\u7684\u77e9\u9635\u521b\u5efa\u89c6\u56fe\u77e9\u9635\u3002\u65cb\u8f6c\u548c\u5e73\u79fb\u76844x4\u77e9\u9635\u57283.5.2\u5c0f\u8282\u4e2d\u7ed9\u51fa\u3002\u4e00\u4e2aSimpleRotator\u7684\u89c6\u56fe\u77e9\u9635\u662f\u4e94\u4e2a\u5e73\u79fb\u548c\u65cb\u8f6c\u77e9\u9635\u7684\u77e9\u9635\u4e58\u79ef\uff1a</p> <p></p> <p>\u5b9e\u9645\u4e0a\uff0c\u5b9e\u73b0\u4e58\u6cd5\u5e76\u4e0d\u592a\u96be\u3002\u5982\u679c\u4f60\u597d\u5947\uff0c\u53ef\u4ee5\u770b\u770bJavaScript\u6587\u4ef6webgl/simple-rotator.js\u3002</p> <p>Computer graphics is a lot more interesting when there is user interaction. The 3D experience is enhanced considerably just by letting the user rotate the scene, to view it from various directions. The unlit cube example lets the user rotate the scene using the keyboard. But using the mouse for rotation gives the user much better control. I have written two JavaScript classes, SimpleRotator and TrackballRotator, to implement two different styles of rotation-by-mouse.</p> <p>The SimpleRotator class is defined in the file webgl/simple-rotator.js. To use it on a web page, you need to include that file in a <code>&lt;script&gt;</code> tag, and you need to create an object of type SimpleRotator:</p> <pre><code>rotator = new SimpleRotator( canvas, callback, viewDistance );\n</code></pre> <p>The first parameter must be a DOM <code>&lt;canvas&gt;</code> element. It should be the canvas where WebGL renders the scene. The SimpleRotator constructor adds a listener for mouse events to the canvas; it also handles touch events on a touchscreen. The second parameter to the constructor is optional. If it is defined, it must be a function. The function is called, with no parameters, each time the rotation changes. Typically, the callback function is the function that renders the image in the canvas. The third parameter is also optional. If defined, it must be a non-negative number. It gives the distance of the viewer from the center of rotation. The default value is zero, which can be OK for an orthographic projection but is usually not correct.</p> <p>A SimpleRotator keeps track of a viewing transformation that changes as the user rotates the scene. The most important function is rotator.getViewMatrix(). This function returns an array of 16 numbers representing the matrix for the viewing transformation in column-major order. The matrix can be sent directly to the shader program using gl.uniformMatrix4fv, or it can be used with functions from the glMatrix library as the initial value of the modelview matrix.</p> <p>The sample program webgl/cube-with-simple-rotator.html is an example of using a SimpleRotator. The program uses a perspective projection defined by the glMatrix function</p> <pre><code>mat4.perspective(projection, Math.PI/8, 1, 8, 12);\n</code></pre> <p>The viewDistance for the rotator has to be between the near and far distances in the projection. Here, near is 8 and far is 12, and the viewDistance can be set to 10. The rotator is created during initialization using the statement</p> <pre><code>rotator = new SimpleRotator(canvas, draw, 10);\n</code></pre> <p>In the draw() function, the viewing transformation is obtained from the rotator before drawing the scene. There is no modeling transformation in this program, so the view matrix is also the modelview matrix. That matrix is multiplied by the projection matrix using a glMatrix function, and the combined transformation matrix is sent to the shader program:</p> <pre><code>let modelview = rotator.getViewMatrix();\n\nmat4.multiply( modelviewProjection, projection, modelview );\ngl.uniformMatrix4fv(u_modelviewProjection, false, modelviewProjection );\n</code></pre> <p>That's really all that you need to know if you just want to use SimpleRotator in your own programs. I have also written an alternative rotator class, TrackballRotator, which is defined in the JavaScript file webgl/trackball-rotator.js. A TrackballRotator can be used in the same way as a SimpleRotator. The main difference is that a TrackballRotator allows completely free rotation while a SimpleRotator has the constraint that the y-axis will always remain vertical in the image.</p> <p>The sample program webgl/cube-with-trackball-rotator.html uses a TrackballRotator, but is otherwise identical to the SimpleRotator example. The following demo lets you try out both types of rotator. A SimpleRotator is used for the cube on the left, and a TrackballRotator is used on the right:</p> <p></p> <p>By default, the center of rotation for either type of rotator is the origin, even if the origin is not at the center of the image. However, you can change the center of rotation to be the point (a,b,c) by calling rotation.setRotationCenter([a,b,c]). The parameter must be an array of three numbers. Typically, (a,b,c) would be the point displayed at the center of the image (the point that would be the view reference point in gluLookAt).</p> <p>You don't need to understand the mathematics that is used to implement a rotator. In fact, TrackballRotator uses some advanced techniques that I don't want to explain here. However, SimpleRotator is, well, more simple, and it's nice to know how it works. So, I will explain how the view transformation is computed for a SimpleRotator. Actually, it will be easier to think in terms of the corresponding modeling transformation on the scene as a whole. (Recall the equivalence between modeling and viewing (Subsection 3.3.4).)</p> <p>The modeling transformation includes a rotation about the y-axis followed by a rotation about the x-axis. The sizes of the rotations change as the user drags the mouse. Left/right motion controls the rotation about the y-axis, while up/down motion controls the rotation about the x-axis. The rotation about the x-axis is restricted to lie in the range \u221285 to 85 degrees. Note that a rotation about the y-axis followed by a rotation about the x-axis always leaves the y-axis pointing in a vertical direction when projected onto the screen.</p> <p>Suppose the center of rotation is (tx,ty,tz) instead of (0,0,0). To implement that, before doing the rotations, we need to translate the scene to move the point (tx,ty,tz) to the origin. We can do that with a translation by (-tx,-ty,-tz). Then, after doing the rotation, we need to translate the origin back to the point (tx,ty,tz).</p> <p>Finally, if the viewDistance is not zero, we need to push the scene viewDistance units away from the viewer. We can do that with a translation by (0,0,-viewDistance). If d is the view distance, ry is the rotation about the y-axis, and rx is the rotation about the x-axis, then the sequence of modeling transformations that we need to apply to the scene is as follows:</p> <ol> <li>Move the view center to the origin: Translate by (-tx,-ty,-tz).</li> <li>Rotate the scene by ry radians about the y-axis.</li> <li>Rotate the scene by rx radians about the x-axis.</li> <li>Move the origin back to view center: Translate by (tx,ty,tz).</li> <li>Move the scene away from the viewer: Translate by (0,0,-d).</li> </ol> <p>Keeping in mind that modeling transformations are applied to objects in the opposite of the order in which they occur in the code, the view matrix could be created by the following glMatrix commands:</p> <pre><code>viewmatrix = mat4.create();\nmat4.translate(viewmatrix, viewmatrix, [0,0,-d]);\nmat4.translate(viewmatrix, viewmatrix, [tx,ty,tz]);\nmat4.rotateX(viewmatrix, viewmatrix, rx);\nmat4.rotateY(viewmatrix, viewmatrix, ry);\nmat4.translate(viewmatrix, viewmatrix, [-tx,-ty,-tz]);\n</code></pre> <p>In fact, in my code, I create the view matrix directly, based on the matrices for the individual transformations. The 4-by-4 matrices for rotation and translation are given in Subsection 3.5.2. The view matrix for a SimpleRotator is the matrix product of five translation and rotation matrices:</p> <p></p> <p>It's actually not too difficult to implement the multiplication. See the JavaScript file, webgl/simple-rotator.js, if you are curious.</p>"},{"location":"cn/c7/s2/","title":"7.2 \u7167\u660e\u548c\u6750\u8d28","text":"<p>Lighting and Material</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bbaWebGL\u4e2d\u7684\u5149\u7167\u548c\u6750\u8d28\u95ee\u9898\u3002\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u5728\u7b2c4.1\u8282\u548c\u7b2c4.2\u8282\u4e2d\u4ecb\u7ecd\u7684\u57fa\u672cOpenGL\u6a21\u578b\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u8d1f\u8d23\u5728\u81ea\u5df1\u7684GLSL\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u5149\u7167\u65b9\u7a0b\u3002\u8fd9\u610f\u5473\u7740\u9700\u8981\u66f4\u52a0\u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4e3a\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\u9009\u62e9\u5b9e\u73b0\u5149\u7167\u65b9\u7a0b\u7684\u54ea\u4e9b\u90e8\u5206\u3002</p> <p>\u5149\u7167\u65b9\u7a0b\u7684\u76ee\u6807\u662f\u8ba1\u7b97\u8868\u9762\u4e0a\u67d0\u70b9\u7684\u989c\u8272\u3002\u65b9\u7a0b\u7684\u8f93\u5165\u5305\u62ec\u8868\u9762\u7684\u6750\u8d28\u5c5e\u6027\u548c\u7167\u4eae\u8868\u9762\u7684\u5149\u6e90\u5c5e\u6027\u3002\u5149\u7ebf\u51fb\u4e2d\u8868\u9762\u7684\u89d2\u5ea6\u8d77\u7740\u91cd\u8981\u4f5c\u7528\u3002\u8be5\u89d2\u5ea6\u53ef\u4ee5\u4ece\u5149\u6e90\u7684\u65b9\u5411\u548c\u8868\u9762\u6cd5\u7ebf\u5411\u91cf\u8ba1\u7b97\u5f97\u51fa\u3002\u955c\u9762\u53cd\u5c04\u7684\u8ba1\u7b97\u8fd8\u4f7f\u7528\u5230\u89c2\u5bdf\u8005\u7684\u65b9\u5411\u548c\u53cd\u5c04\u5149\u7ebf\u7684\u65b9\u5411\u3002\u57284.1.4\u5c0f\u8282\u7684\u5149\u7167\u56fe\u4e2d\u5c55\u793a\u4e86\u7528\u4e8e\u8ba1\u7b97\u7684\u56db\u4e2a\u5411\u91cf\uff1a</p> <p></p> <p>\u5411\u91cfL\u3001N\u3001R\u548cV\u5e94\u8be5\u662f\u5355\u4f4d\u5411\u91cf\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5355\u4f4d\u5411\u91cf\u5177\u6709\u8fd9\u6837\u7684\u5c5e\u6027\uff1a\u4e24\u4e2a\u5355\u4f4d\u5411\u91cf\u4e4b\u95f4\u89d2\u5ea6\u7684\u4f59\u5f26\u503c\u7531\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u70b9\u79ef\u7ed9\u51fa\u3002</p> <p>\u5149\u7167\u65b9\u7a0b\u8fd8\u6d89\u53ca\u73af\u5883\u5149\u548c\u81ea\u53d1\u5149\u989c\u8272\uff0c\u8fd9\u4e9b\u989c\u8272\u4e0d\u4f9d\u8d56\u4e8e\u56fe\u4e2d\u663e\u793a\u7684\u65b9\u5411\u5411\u91cf\u3002</p> <p>\u5728\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u5149\u7167\u6a21\u578b\u7684\u5404\u4e2a\u65b9\u9762\u7684\u4e00\u4e9b\u793a\u4f8b\u65f6\uff0c\u4f60\u5e94\u8be5\u7262\u8bb0\u8fd9\u4e2a\u5927\u5c40\u3002</p> <p>In this section, we turn to the question of lighting and material in WebGL. We will continue to use the basic OpenGL model that was covered in Section 4.1 and Section 4.2, but now we are responsible for implementing the lighting equation in our own GLSL shader programs. That means being more aware of the implementation details. It also means that we can pick and choose which parts of the lighting equation we will implement for a given application.</p> <p>The goal of the lighting equation is to compute a color for a point on a surface. The inputs to the equation include the material properties of the surface and the properties of light sources that illuminate the surface. The angle at which the light hits the surface plays an important role. The angle can be computed from the direction to the light source and the normal vector to the surface. Computation of specular reflection also uses the direction to the viewer and the direction of the reflected ray. The four vectors that are used in the computation are shown in this lighting diagram from Subsection 4.1.4:</p> <p></p> <p>The vectors L, N, R, and V should be unit vectors. Recall that unit vectors have the property that the cosine of the angle between two unit vectors is given by the dot product of the two vectors.</p> <p>The lighting equation also involves ambient and emission color, which do not depend the direction vectors shown in the diagram.</p> <p>You should keep this big picture in mind as we work through some examples that use various aspects of the lighting model.</p>"},{"location":"cn/c7/s2/#721-\u6700\u5c0f\u7167\u660e","title":"7.2.1 \u6700\u5c0f\u7167\u660e","text":"<p>Minimal Lighting</p> \u4e2d\u6587\u82f1\u6587 <p>\u5373\u4f7f\u662f\u975e\u5e38\u7b80\u5355\u7684\u5149\u7167\u4e5f\u80fd\u8ba93D\u56fe\u5f62\u770b\u8d77\u6765\u66f4\u52a0\u903c\u771f\u3002\u5bf9\u4e8e\u6700\u5c0f\u5316\u7684\u5149\u7167\uff0c\u6211\u6709\u65f6\u4f1a\u4f7f\u7528\u6211\u6240\u8bf4\u7684\u201c\u89c6\u70b9\u5149\u201d\uff0c\u8fd9\u662f\u4e00\u79cd\u4ece\u89c2\u5bdf\u8005\u65b9\u5411\u7167\u5c04\u8fdb\u573a\u666f\u7684\u767d\u5149\u3002\u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u65b9\u5411\u5149\u3002\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\uff0c\u65b9\u5411\u89c6\u70b9\u5149\u6cbf\u7740\u8d1fz\u8f74\u65b9\u5411\u7167\u5c04\u3002\u6307\u5411\u5149\u6e90\u7684\u5149\u65b9\u5411\u5411\u91cf\uff08\u4e0a\u56fe\u4e2d\u7684L\uff09\u662f(0,0,1)\u3002</p> <p>\u4e3a\u4e86\u4fdd\u6301\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u8003\u8651\u6f2b\u53cd\u5c04\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ece\u8868\u9762\u53cd\u5c04\u7684\u5149\u7684\u989c\u8272\u662f\u8868\u9762\u6f2b\u53cd\u5c04\u6750\u8d28\u989c\u8272\u3001\u5149\u7684\u989c\u8272\u4ee5\u53ca\u5149\u51fb\u4e2d\u8868\u9762\u89d2\u5ea6\u7684\u4f59\u5f26\u503c\u7684\u4e58\u79ef\u3002\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u989c\u8272\u5206\u91cf\u7684\u4e58\u79ef\u5206\u522b\u8ba1\u7b97\u3002\u6211\u4eec\u5047\u8bbe\u5149\u662f\u767d\u8272\u7684\uff0c\u6240\u4ee5\u5728\u516c\u5f0f\u4e2d\u5149\u7684\u989c\u8272\u662f1\u3002\u6750\u8d28\u989c\u8272\u53ef\u80fd\u6765\u81eaJavaScript\u7aef\u4f5c\u4e3auniform\u6216attribute\u53d8\u91cf\u3002</p> <p>\u5149\u51fb\u4e2d\u8868\u9762\u89d2\u5ea6\u7684\u4f59\u5f26\u503c\u7531\u6cd5\u7ebf\u5411\u91cfN\u4e0e\u5149\u65b9\u5411\u5411\u91cfL\u7684\u70b9\u79ef\u7ed9\u51fa\u3002\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\uff0cL\u662f(0,0,1)\u3002\u70b9\u79efN\u00b7L\u6216N\u00b7(0,0,1)\u56e0\u6b64\u4ec5\u4ec5\u662fN.z\uff0c\u5373N\u7684z\u5206\u91cf\u3002\u7136\u800c\uff0c\u8fd9\u5047\u8bbeN\u4e5f\u662f\u4ee5\u773c\u775b\u5750\u6807\u7cfb\u7ed9\u51fa\u7684\u3002\u6cd5\u7ebf\u5411\u91cf\u901a\u5e38\u6765\u81eaJavaScript\u7aef\uff0c\u5e76\u4e14\u4ee5\u5bf9\u8c61\u5750\u6807\u7cfb\u8868\u793a\u3002\u5728\u7528\u4e8e\u5149\u7167\u8ba1\u7b97\u4e4b\u524d\uff0c\u5b83\u5fc5\u987b\u8f6c\u6362\u5230\u773c\u775b\u5750\u6807\u7cfb\u3002\u5982\u57287.1.4\u5c0f\u8282\u4e2d\u8ba8\u8bba\u7684\uff0c\u8981\u505a\u5230\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4ece\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u6d3e\u751f\u7684\u6cd5\u7ebf\u53d8\u6362\u77e9\u9635\u3002\u7531\u4e8e\u6cd5\u7ebf\u5411\u91cf\u5fc5\u987b\u662f\u957f\u5ea6\u4e3a\u4e00\u7684\uff0c\u8ba1\u7b97N\u7684GLSL\u4ee3\u7801\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>vec3 N = normalize(normalMatrix * normal);\n</code></pre> <p>\u5176\u4e2dnormal\u662f\u5bf9\u8c61\u5750\u6807\u7cfb\u4e2d\u7684\u539f\u59cb\u6cd5\u7ebf\u5411\u91cf\uff0cnormalMatrix\u662f\u6cd5\u7ebf\u53d8\u6362\u77e9\u9635\uff0cnormalize\u662f\u4e00\u4e2a\u5185\u7f6e\u7684GLSL\u51fd\u6570\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a\u4e00\u4e14\u4e0e\u5176\u53c2\u6570\u6307\u5411\u540c\u4e00\u65b9\u5411\u7684\u5411\u91cf\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u590d\u6742\u60c5\u51b5\uff1a\u70b9\u79efN\u00b7L\u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u8fd9\u610f\u5473\u7740\u6cd5\u7ebf\u5411\u91cf\u6307\u5411\u5149\u6e90\u7684\u76f8\u53cd\u65b9\u5411\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u6307\u5411\u5c4f\u5e55\u5185\u90e8\uff09\u3002\u901a\u5e38\uff0c\u8fd9\u610f\u5473\u7740\u8868\u9762\u4e0d\u88ab\u7167\u4eae\u3002\u5728\u89c6\u70b9\u5149\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u53ef\u89c1\u8868\u9762\u90fd\u662f\u88ab\u7167\u4eae\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6b63\u5728\u770b\u8868\u9762\u7684\u201c\u80cc\u9762\u201d\uff08\u6216\u8005\u6307\u5b9a\u4e86\u9519\u8bef\u7684\u6cd5\u7ebf\uff09\u3002\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u8868\u9762\u7684\u4e24\u4fa7\u3002\u80cc\u9762\u7684\u6b63\u786e\u6cd5\u7ebf\u5411\u91cf\u662f\u6b63\u9762\u6cd5\u7ebf\u5411\u91cf\u7684\u8d1f\u6570\uff0c\u6b63\u786e\u7684\u70b9\u79ef\u662f(\u2212N)\u00b7L\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u4f7f\u7528abs(N\u00b7L)\u6765\u5904\u7406\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002\u5bf9\u4e8eL = (0,0,1)\uff0c\u90a3\u5c31\u662fabs(N.z)\u3002\u5982\u679ccolor\u662f\u4e00\u4e2a\u7ed9\u51fa\u8868\u9762\u6f2b\u53cd\u5c04\u989c\u8272\u7684vec3\uff0c\u53ef\u89c1\u989c\u8272\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff1a</p> <pre><code>vec3 visibleColor = abs(N.z) * color;\n</code></pre> <p>\u5982\u679ccolor\u662f\u4e00\u4e2a\u7ed9\u51faRGBA\u989c\u8272\u7684vec4\uff0c\u53ea\u6709RGB\u5206\u91cf\u5e94\u8be5\u4e58\u4ee5\u70b9\u79ef\uff1a</p> <pre><code>vec4 visibleColor = vec4(abs(N.z)*color.rgb, color.a);\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/cube-with-basic-lighting.html\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u6700\u5c0f\u5316\u5149\u7167\u6a21\u578b\u3002\u5149\u7167\u8ba1\u7b97\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u5b8c\u6210\u3002\u573a\u666f\u7684\u4e00\u90e8\u5206\u6ca1\u6709\u4f7f\u7528\u5149\u7167\u7ed8\u5236\uff0c\u9876\u70b9\u7740\u8272\u5668\u6709\u4e00\u4e2auniform bool\u53d8\u91cf\u6765\u6307\u5b9a\u662f\u5426\u5e94\u7528\u5149\u7167\u3002\u8fd9\u662f\u8be5\u7a0b\u5e8f\u7684\u9876\u70b9\u7740\u8272\u5668\u6e90\u4ee3\u7801\uff1a</p> <pre><code>attribute vec3 a_coords;            // \u9876\u70b9\u7684\u5bf9\u8c61\u5750\u6807\u3002\nuniform mat4 modelviewProjection;   // \u7ec4\u5408\u53d8\u6362\u77e9\u9635\u3002\nuniform bool lit;            // \u662f\u5426\u5e94\u7528\u5149\u7167\uff1f\nuniform vec3 normal;         // \u6cd5\u7ebf\u5411\u91cf\uff08\u5728\u5bf9\u8c61\u5750\u6807\u4e2d\uff09\u3002\nuniform mat3 normalMatrix;   // \u6cd5\u7ebf\u5411\u91cf\u7684\u53d8\u6362\u77e9\u9635\u3002\nuniform vec4 color;          // \u57fa\u672c\uff08\u6f2b\u53cd\u5c04\uff09\u989c\u8272\u3002\nvarying vec4 v_color;        // \u53d1\u9001\u5230\u7247\u6bb5\u7740\u8272\u5668\u7684\u989c\u8272\u3002\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);\n    gl_Position = modelviewProjection * coords;\n    if (lit) {\n        vec3 N = normalize(normalMatrix*normal); // \u53d8\u6362\u540e\u7684\u5355\u4f4d\u6cd5\u7ebf\u3002\n        float dotProduct = abs(N.z);\n        v_color = vec4(dotProduct*color.rgb, color.a);\n    }\n    else {\n        v_color = color;\n    }\n}\n</code></pre> <p>\u5411\u8fd9\u4e2a\u6a21\u578b\u6dfb\u52a0\u73af\u5883\u5149\u5f88\u5bb9\u6613\uff0c\u4f7f\u7528uniform\u53d8\u91cf\u6765\u6307\u5b9a\u73af\u5883\u5149\u7ea7\u522b\u3002\u81ea\u53d1\u5149\u989c\u8272\u4e5f\u5f88\u5bb9\u6613\u6dfb\u52a0\u3002</p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528\u7684\u65b9\u5411\u5149\u5728\u6280\u672f\u4e0a\u53ea\u9002\u7528\u4e8e\u6b63\u4ea4\u6295\u5f71\uff0c\u5c3d\u7ba1\u5b83\u901a\u5e38\u4e5f\u4f1a\u4e3a\u900f\u89c6\u6295\u5f71\u63d0\u4f9b\u53ef\u63a5\u53d7\u7684\u7ed3\u679c\u3002\u4f46\u900f\u89c6\u6295\u5f71\u7684\u6b63\u786e\u89c6\u70b9\u5149\u662f\u5728(0,0,0)\u5904\u7684\u70b9\u5149\u6e90\u2014\u2014\u773c\u775b\u5750\u6807\u4e2d\u201c\u773c\u775b\u201d\u7684\u4f4d\u7f6e\u3002\u70b9\u5149\u6e90\u6bd4\u65b9\u5411\u5149\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\u3002</p> <p>\u8bf7\u8bb0\u4f4f\uff0c\u5149\u7167\u8ba1\u7b97\u662f\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u5b8c\u6210\u7684\u3002\u6307\u5411\u5149\u6e90\u7684\u5411\u91cfL\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff1a</p> <pre><code>vec3 L = normalize(lightPosition - eyeCoords.xyz);\n</code></pre> <p>\u5176\u4e2dlightPosition\u662f\u4e00\u4e2avec3\uff0c\u8868\u793a\u5149\u6e90\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u7684\u4f4d\u7f6e\uff0c\u800ceyeCoords\u662f\u4e00\u4e2avec4\uff0c\u8868\u793a\u8868\u9762\u70b9\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u7684\u4f4d\u7f6e\u3002\u5bf9\u4e8e\u89c6\u70b9\u5149\uff0clightPosition\u662f(0,0,0)\uff0cL\u53ef\u4ee5\u7b80\u5355\u5730\u8ba1\u7b97\u4e3anormalize(-eyeCoords.xyz)\u3002\u8868\u9762\u70b9\u7684\u773c\u775b\u5750\u6807\u5fc5\u987b\u901a\u8fc7\u5c06\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u5e94\u7528\u4e8e\u8be5\u70b9\u7684\u5bf9\u8c61\u5750\u6807\u6765\u8ba1\u7b97\u3002\u8fd9\u610f\u5473\u7740\u7740\u8272\u5668\u7a0b\u5e8f\u9700\u8981\u77e5\u9053\u6a21\u578b\u89c6\u56fe\u77e9\u9635\uff1b\u4ec5\u4ec5\u77e5\u9053\u7ec4\u5408\u7684\u6a21\u578b\u89c6\u56fe\u548c\u6295\u5f71\u77e9\u9635\u662f\u4e0d\u591f\u7684\u3002\u4e0a\u9762\u663e\u793a\u7684\u9876\u70b9\u7740\u8272\u5668\u53ef\u4ee5\u4fee\u6539\u4e3a\u4f7f\u7528\u4f4d\u4e8e(0,0,0)\u7684\u70b9\u5149\u6e90\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>attribute vec3 a_coords;      // \u9876\u70b9\u7684\u5bf9\u8c61\u5750\u6807\u3002\nuniform mat4 modelview;       // \u6a21\u578b\u89c6\u56fe\u53d8\u6362\u77e9\u9635\u3002\nuniform mat4 projection;      // \u6295\u5f71\u53d8\u6362\u77e9\u9635\u3002\nuniform bool lit;             // \u662f\u5426\u5e94\u7528\u5149\u7167\uff1f\nuniform vec3 normal;          // \u6cd5\u7ebf\u5411\u91cf\uff08\u5728\u5bf9\u8c61\u5750\u6807\u4e2d\uff09\u3002\nuniform mat3 normalMatrix;    // \u6cd5\u7ebf\u5411\u91cf\u7684\u53d8\u6362\u77e9\u9635\u3002\nuniform vec4 color;           // \u57fa\u672c\uff08\u6f2b\u53cd\u5c04\uff09\u989c\u8272\u3002\nvarying vec4 v_color;         // \u53d1\u9001\u5230\u7247\u6bb5\u7740\u8272\u5668\u7684\u989c\u8272\u3002\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);\n    vec4 eyeCoords = modelview * coords;\n    gl_Position = projection * eyeCoords;\n    if (lit) {\n        vec3 L = normalize(-eyeCoords.xyz); // \u6307\u5411\u5149\u6e90\u3002\n        vec3 N = normalize(normalMatrix * normal); // \u53d8\u6362\u540e\u7684\u5355\u4f4d\u6cd5\u7ebf\u3002\n        float dotProduct = abs(dot(N, L));\n        v_color = vec4(dotProduct * color.rgb, color.a);\n    } else {\n        v_color = color;\n    }\n}\n</code></pre> <p>\uff08\u6ce8\u610f\uff0c\u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5c06\u5149\u7167\u8ba1\u7b97\u79fb\u5230\u7247\u6bb5\u7740\u8272\u5668\u53ef\u80fd\u4f1a\u66f4\u597d\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\u3002\uff09</p> <p>Even very simple lighting can make 3D graphics look more realistic. For minimal lighting, I sometimes use what I call a \"viewpoint light,\" a white light that shines from the direction of the viewer into the scene. In the simplest case, a directional light can be used. In eye coordinates, a directional viewpoint light shines in the direction of the negative z-axis. The light direction vector (L in the above diagram), which points towards the light source, is (0,0,1).</p> <p>To keep things minimal, let's consider diffuse reflection only. In that case, the color of the light reflected from a surface is the product of the diffuse material color of the surface, the color of the light, and the cosine of the angle at which the light hits the surface. The product is computed separately for the red, green, and blue components of the color. We are assuming that the light is white, so the light color is 1 in the formula. The material color will probably come from the JavaScript side as a uniform or attribute variable.</p> <p>The cosine of the angle at which the light hits the surface is given by the dot product of the normal vector N with the light direction vector L. In eye coordinates, L is (0,0,1). The dot product, N\u00b7L or N\u00b7(0,0,1), is therefore simply N.z, the z-component of N. However, this assumes that N is also given in eye coordinates. The normal vector will ordinarily come from the JavaScript side and will be expressed in object coordinates. Before it is used in lighting calculations, it must be transformed to the eye coordinate system. As discussed in Subsection 7.1.4, to do that we need a normal transformation matrix that is derived from the modelview matrix. Since the normal vector must be of length one, the GLSL code for computing N would be something like</p> <pre><code>vec3 N = normalize( normalMatrix * normal );\n</code></pre> <p>where normal is the original normal vector in object coordinates, normalMatrix is the normal transformation matrix, and normalize is a built-in GLSL function that returns a vector of length one pointing in the same direction as its parameter.</p> <p>There is one more complication: The dot product N\u00b7L can be negative, which would mean that the normal vector points away from the light source (into the screen in this case). Ordinarily, that would mean that the light does not illuminate the surface. In the case of a viewpoint light, where we know that every visible surface is illuminated, it means that we are looking at the \"back side\" of the surface (or that incorrect normals were specified). Let's assume that we want to treat the two sides of the surface the same. The correct normal vector for the back side is the negative of the normal vector for the front side, and the correct dot product is (\u2212N)\u00b7L. We can handle both cases if we simply use abs(N\u00b7L). For L = (0,0,1), that would be abs(N.z). If color is a vec3 giving the diffuse color of the surface, the visible color can be computed as</p> <pre><code>vec3 visibleColor = abs(N.z) * color;\n</code></pre> <p>If color is instead a vec4 giving an RGBA color, only the RGB components should be multiplied by the dot product:</p> <pre><code>vec4 visibleColor = vec4( abs(N.z)*color.rgb, color.a );\n</code></pre> <p>The sample program webgl/cube-with-basic-lighting.html implements this minimal lighting model. The lighting calculations are done in the vertex shader. Part of the scene is drawn without lighting, and the vertex shader has a uniform bool variable to specify whether lighting should be applied. Here is the vertex shader source code from that program:</p> <pre><code>attribute vec3 a_coords;            // Object coordinates for the vertex.\nuniform mat4 modelviewProjection;   // Combined transformation matrix.\nuniform bool lit;            // Should lighting be applied?\nuniform vec3 normal;         // Normal vector (in object coordinates).\nuniform mat3 normalMatrix;   // Transformation matrix for normal vectors.\nuniform vec4 color;          // Basic (diffuse) color.\nvarying vec4 v_color;        // Color to be sent to fragment shader.\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);\n    gl_Position = modelviewProjection * coords;\n    if (lit) {\n        vec3 N = normalize(normalMatrix*normal); // Transformed unit normal.\n        float dotProduct = abs(N.z);\n        v_color = vec4( dotProduct*color.rgb, color.a );\n    }\n    else {\n        v_color = color;\n    }\n}\n</code></pre> <p>It would be easy to add ambient light to this model, using a uniform variable to specify the ambient light level. Emission color is also easy.</p> <p>The directional light used in this example is technically only correct for an orthographic projection, although it will also generally give acceptable results for a perspective projection. But the correct viewpoint light for a perspective projection is a point light at (0,0,0)\u2014the position of the \"eye\" in eye coordinates. A point light is a little more difficult than a directional light.</p> <p>Remember that lighting calculations are done in eye coordinates. The vector L that points from the surface to the light can be computed as</p> <pre><code>vec3 L = normalize( lightPosition - eyeCoords.xyz );\n</code></pre> <p>where lightPosition is a vec3 that gives the position of the light in eye coordinates, and eyeCoords is a vec4 giving the position of the surface point in eye coordinates. For a viewpoint light, the lightPosition is (0,0,0), and L can be computed simply as normalize(\u2212eyeCoords.xyz). The eye coordinates for the surface point must be computed by applying the modelview matrix to the object coordinates for that point. This means that the shader program needs to know the modelview matrix; it's not sufficient to know the combined modelview and projection matrix. The vertex shader shown above can modified to use a point light at (0,0,0) as follows:</p> <pre><code>attribute vec3 a_coords;      // Object coordinates for the vertex.\nuniform mat4 modelview;       // Modelview transformation matrix\nuniform mat4 projection;      // Projection transformation matrix.\nuniform bool lit;             // Should lighting be applied?\nuniform vec3 normal;          // Normal vector (in object coordinates).\nuniform mat3 normalMatrix;    // Transformation matrix for normal vectors.\nuniform vec4 color;           // Basic (diffuse) color.\nvarying vec4 v_color;         // Color to be sent to fragment shader.\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);\n    vec4 eyeCoords = modelview * coords;\n    gl_Position = projection * eyeCoords;\n    if (lit) {\n        vec3 L = normalize( - eyeCoords.xyz ); // Points to light.\n        vec3 N = normalize(normalMatrix*normal); // Transformed unit normal.\n        float dotProduct = abs( dot(N,L) );\n        v_color = vec4( dotProduct*color.rgb, color.a );\n    }\n    else {\n        v_color = color;\n    }\n}\n</code></pre> <p>(Note, however, that in some situations, it can be better to move the lighting calculations to the fragment shader, as we will soon see.)</p>"},{"location":"cn/c7/s2/#722-\u955c\u9762\u53cd\u5c04\u548c-phong-\u7740\u8272","title":"7.2.2 \u955c\u9762\u53cd\u5c04\u548c Phong \u7740\u8272","text":"<p>Specular Reflection and Phong Shading</p> \u4e2d\u6587\u82f1\u6587 <p>\u8981\u5728\u6211\u4eec\u7684\u57fa\u672c\u5149\u7167\u6a21\u578b\u4e2d\u6dfb\u52a0\u955c\u9762\u5149\uff0c\u6211\u4eec\u9700\u8981\u5904\u7406\u5149\u7167\u56fe\u4e2d\u7684\u5411\u91cfR\u548cV\u3002\u5728\u5b8c\u7f8e\u7684\u955c\u9762\u53cd\u5c04\u4e2d\uff0c\u53ea\u6709\u5f53R\u7b49\u4e8eV\u65f6\uff0c\u89c2\u5bdf\u8005\u624d\u80fd\u770b\u5230\u955c\u9762\u9ad8\u5149\uff0c\u8fd9\u975e\u5e38\u4e0d\u53ef\u80fd\u3002\u4f46\u5728\u6211\u4eec\u4f7f\u7528\u7684\u5149\u7167\u65b9\u7a0b\u4e2d\uff0c\u955c\u9762\u53cd\u5c04\u7684\u91cf\u53d6\u51b3\u4e8e\u70b9\u79efR\u00b7V\uff0c\u8fd9\u4ee3\u8868\u4e86R\u548cV\u4e4b\u95f4\u89d2\u5ea6\u7684\u4f59\u5f26\u503c\u3002\u955c\u9762\u53cd\u5c04\u5bf9\u53ef\u89c1\u989c\u8272\u7684\u8d21\u732e\u516c\u5f0f\u662f\uff1a</p> \\[ (R \\cdot V)^s \\times \\text{specularMaterialColor} \\times \\text{lightIntensity} \\] <p>\u5176\u4e2ds\u662f\u955c\u9762\u6307\u6570\uff08\u5728OpenGL\u4e2d\u79f0\u4e3a\u201c\u5149\u6cfd\u5ea6\u201d\u7684\u6750\u6599\u5c5e\u6027\uff09\u3002\u5982\u679cR\u00b7V\u5927\u4e8e\u96f6\uff0c\u5219\u8be5\u516c\u5f0f\u624d\u6709\u6548\uff1b\u5426\u5219\uff0c\u955c\u9762\u8d21\u732e\u4e3a\u96f6\u3002</p> <p>\u5355\u4f4d\u5411\u91cfR\u53ef\u4ee5\u4eceL\u548cN\u8ba1\u7b97\u5f97\u51fa\u3002\uff08\u4e00\u4e9b\u4e09\u89d2\u5b66\u663e\u793aR\u75312(N\u00b7L)N \u2212 L\u7ed9\u51fa\u3002\uff09GLSL\u6709\u4e00\u4e2a\u5185\u7f6e\u51fd\u6570reflect(I,N)\uff0c\u7528\u4e8e\u8ba1\u7b97\u5411\u91cfI\u901a\u8fc7\u5355\u4f4d\u6cd5\u7ebf\u5411\u91cfN\u7684\u53cd\u5c04\uff1b\u7136\u800c\uff0creflect(L,N)\u7684\u503c\u662f\u2212R\u800c\u4e0d\u662fR\u3002\uff08GLSL\u5047\u8bbe\u4e00\u4e2a\u6307\u5411\u4ece\u5149\u6e90\u6307\u5411\u8868\u9762\u7684\u5149\u65b9\u5411\u5411\u91cf\uff0c\u800c\u6211\u7684L\u5411\u91cf\u5219\u76f8\u53cd\u3002\uff09</p> <p>\u5355\u4f4d\u5411\u91cfV\u4ece\u8868\u9762\u6307\u5411\u89c2\u5bdf\u8005\u7684\u4f4d\u7f6e\u3002\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u8fdb\u884c\u8ba1\u7b97\u3002\u5bf9\u4e8e\u6b63\u4ea4\u6295\u5f71\uff0c\u89c2\u5bdf\u8005\u672c\u8d28\u4e0a\u5728\u65e0\u9650\u8fdc\u5904\uff0cV\u53ef\u4ee5\u53d6\u4e3a(0,0,1)\u3002\u5bf9\u4e8e\u900f\u89c6\u6295\u5f71\uff0c\u89c2\u5bdf\u8005\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u7684\u70b9(0,0,0)\uff0cV\u7531normalize(\u2212eyeCoords)\u7ed9\u51fa\uff0c\u5176\u4e2deyeCoords\u5305\u542b\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u8868\u9762\u70b9\u7684xyz\u5750\u6807\u3002\u5c06\u6240\u6709\u8fd9\u4e9b\u7ed3\u5408\u8d77\u6765\uff0c\u5e76\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u62e5\u6709N\u548cL\uff0c\u8ba1\u7b97\u989c\u8272\u7684GLSL\u4ee3\u7801\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>R = -reflect(L,N);\nV = normalize(-eyeCoords.xyz);  // \uff08\u5047\u8bbe\u4e3a\u900f\u89c6\u6295\u5f71\u3002\uff09\nvec3 color = dot(L,N) * diffuseMaterialColor.rgb * diffuseLightColor;\nif (dot(R,V) &gt; 0.0) {\n    color = color + (pow(dot(R,V), specularExponent) *\n                        specularMaterialColor * specularLightColor);\n}\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/basic-specular-lighting.html\u5b9e\u73b0\u4e86\u5177\u6709\u6f2b\u53cd\u5c04\u548c\u955c\u9762\u53cd\u5c04\u7684\u5149\u7167\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u7ed8\u5236\u66f2\u9762\u7684\u7a0b\u5e8f\uff0c\u6cd5\u7ebf\u5411\u91cf\u4f5c\u4e3a\u9876\u70b9\u5c5e\u6027\u7ed9\u51fa\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3auniform\u53d8\u91cf\u3002\u4e3a\u4e86\u589e\u52a0\u5149\u7167\u7684\u7075\u6d3b\u6027\uff0c\u5149\u7684\u4f4d\u7f6e\u88ab\u6307\u5b9a\u4e3auniform\u53d8\u91cf\u800c\u4e0d\u662f\u5e38\u91cf\u3002\u9075\u5faaOpenGL\u7684\u60ef\u4f8b\uff0clightPosition\u662f\u4e00\u4e2avec4\u3002\u5bf9\u4e8e\u65b9\u5411\u5149\uff0cw\u5750\u6807\u662f0\uff0c\u5149\u7684\u773c\u775b\u5750\u6807\u662flightPosition.xyz\u3002\u5982\u679cw\u5750\u6807\u975e\u96f6\uff0c\u5149\u662f\u70b9\u5149\u6e90\uff0c\u5176\u773c\u775b\u5750\u6807\u662flightPosition.xyz/lightPosition.w\u3002\uff08\u901a\u8fc7lightPosition.w\u7684\u9664\u6cd5\u662f\u9f50\u6b21\u5750\u6807\u7684\u60ef\u4f8b\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0clightPosition.w\u901a\u5e38\u8981\u4e48\u662f\u96f6\u8981\u4e48\u662f\u4e00\u3002\uff09\u8be5\u7a0b\u5e8f\u5141\u8bb8\u4e0d\u540c\u7684\u6f2b\u53cd\u5c04\u548c\u955c\u9762\u6750\u6599\u989c\u8272\uff0c\u4f46\u5149\u603b\u662f\u767d\u8272\u7684\uff0c\u6f2b\u53cd\u5c04\u5f3a\u5ea6\u4e3a0.8\uff0c\u955c\u9762\u5f3a\u5ea6\u4e3a0.4\u3002\u4f60\u5e94\u8be5\u80fd\u591f\u7406\u89e3\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7684\u6240\u6709\u4ee3\u7801\uff1a</p> <pre><code>attribute vec3 a_coords;\nattribute vec3 a_normal;\nuniform mat4 modelview;\nuniform mat4 projection;\nuniform mat3 normalMatrix;\nuniform vec4 lightPosition;\nuniform vec4 diffuseColor;\nuniform vec3 specularColor;\nuniform float specularExponent;\nvarying vec4 v_color;\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);\n    vec4 eyeCoords = modelview * coords;\n    gl_Position = projection * eyeCoords;\n    vec3 N, L, R, V;  // \u5149\u7167\u65b9\u7a0b\u7684\u5411\u91cf\u3002\n    N = normalize(normalMatrix * a_normal);\n    if (lightPosition.w == 0.0) { // \u65b9\u5411\u5149\u3002\n        L = normalize(lightPosition.xyz);\n    } else { // \u70b9\u5149\u6e90\u3002\n        L = normalize((lightPosition.xyz / lightPosition.w) - eyeCoords.xyz);\n    }\n    R = -reflect(L, N);\n    V = normalize(-eyeCoords.xyz);  // \uff08\u5047\u8bbe\u4e3a\u900f\u89c6\u6295\u5f71\u3002\uff09\n    if (dot(L, N) &lt;= 0.0) {\n        v_color = vec4(0, 0, 0, 1);  // \u9876\u70b9\u6ca1\u6709\u88ab\u7167\u4eae\u3002\n    } else {\n        vec3 color = 0.8 * dot(L, N) * diffuseColor.rgb;\n        if (dot(R, V) &gt; 0.0) {\n            color += 0.4 * pow(dot(R, V), specularExponent) * specularColor;\n        }\n        v_color = vec4(color, diffuseColor.a);\n    }\n}\n</code></pre> <p>\u7247\u6bb5\u7740\u8272\u5668\u53ea\u662f\u5c06v_color\u7684\u503c\u8d4b\u7ed9gl_FragColor\u3002</p> <p>\u8fd9\u79cd\u65b9\u6cd5\u6a21\u4eff\u4e86OpenGL 1.1\uff0c\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u8fdb\u884c\u5149\u7167\u8ba1\u7b97\u3002\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a\u9010\u9876\u70b9\u5149\u7167\u3002\u5b83\u7c7b\u4f3c\u4e8ethree.js\u4e2d\u7684Lambert\u7740\u8272\uff0c\u53ea\u662fLambert\u7740\u8272\u53ea\u4f7f\u7528\u6f2b\u53cd\u5c04\u3002\u4f46\u6709\u8bb8\u591a\u60c5\u51b5\u4e0b\u9010\u9876\u70b9\u5149\u7167\u4e0d\u80fd\u7ed9\u51fa\u597d\u7684\u7ed3\u679c\u3002\u6211\u4eec\u57285.1.5\u5c0f\u8282\u4e2d\u770b\u5230\uff0c\u5bf9\u4e8e\u805a\u5149\u706f\u6765\u8bf4\uff0c\u5b83\u53ef\u80fd\u4f1a\u7ed9\u51fa\u975e\u5e38\u7cdf\u7cd5\u7684\u7ed3\u679c\u3002\u9664\u975e\u539f\u8bed\u975e\u5e38\u5c0f\uff0c\u5426\u5219\u5b83\u4e5f\u503e\u5411\u4e8e\u4ea7\u751f\u4e0d\u597d\u7684\u955c\u9762\u9ad8\u5149\u3002</p> <p>\u5982\u679c\u5149\u6e90\u76f8\u5bf9\u4e8e\u539f\u8bed\u7684\u4f4d\u7f6e\u975e\u5e38\u63a5\u8fd1\uff0c\u4e0e\u539f\u8bed\u7684\u5927\u5c0f\u76f8\u6bd4\uff0c\u5149\u5728\u9876\u70b9\u5904\u4e0e\u539f\u8bed\u5f62\u6210\u7684\u89d2\u5ea6\u53ef\u80fd\u4e0e\u5149\u5728\u539f\u8bed\u5185\u90e8\u67d0\u70b9\u7684\u89d2\u5ea6\u5173\u7cfb\u5f88\u5c0f\uff1a</p> <p></p> <p>\u7531\u4e8e\u5149\u7167\u4e25\u91cd\u4f9d\u8d56\u89d2\u5ea6\uff0c\u9010\u9876\u70b9\u5149\u7167\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u7ed9\u51fa\u597d\u7684\u7ed3\u679c\u3002\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9010\u50cf\u7d20\u5149\u7167\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7684\u5149\u7167\u8ba1\u7b97\u79fb\u52a8\u5230\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u3002</p> <p>\u8981\u8fdb\u884c\u9010\u50cf\u7d20\u5149\u7167\uff0c\u5fc5\u987b\u5c06\u9876\u70b9\u7740\u8272\u5668\u4e2d\u53ef\u7528\u7684\u67d0\u4e9b\u6570\u636e\u901a\u8fc7\u53d8\u5316\u53d8\u91cf\u4f20\u9012\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u3002\u8fd9\u5305\u62ec\u4f8b\u5982\u8868\u9762\u70b9\u7684\u5bf9\u8c61\u5750\u6807\u6216\u773c\u775b\u5750\u6807\u3002\u5982\u679c\u6f2b\u53cd\u5c04\u989c\u8272\u662f\u5c5e\u6027\u800c\u4e0d\u662funiform\u53d8\u91cf\uff0c\u4e5f\u53ef\u80fd\u9002\u7528\u3002\u5f53\u7136\uff0cuniform\u53d8\u91cf\u53ef\u4ee5\u76f4\u63a5\u88ab\u7247\u6bb5\u7740\u8272\u5668\u8bbf\u95ee\u3002\u5149\u5c5e\u6027\u901a\u5e38uniform\uff0c\u6750\u6599\u5c5e\u6027\u4e5f\u53ef\u80fd\u662f\u3002</p> <p>\u7136\u540e\uff0c\u5f53\u7136\u8fd8\u6709\u6cd5\u7ebf\u5411\u91cf\uff0c\u5b83\u4eec\u5bf9\u5149\u7167\u81f3\u5173\u91cd\u8981\u3002\u5c3d\u7ba1\u6cd5\u7ebf\u5411\u91cf\u6709\u65f6\u53ef\u4ee5\u662funiform\u53d8\u91cf\uff0c\u4f46\u5b83\u4eec\u901a\u5e38\u662f\u5c5e\u6027\u3002\u9010\u50cf\u7d20\u5149\u7167\u901a\u5e38\u4f7f\u7528\u63d2\u503c\u7684\u6cd5\u7ebf\u5411\u91cf\uff0c\u901a\u8fc7\u53d8\u5316\u53d8\u91cf\u4f20\u9012\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u3002\uff08Phong\u7740\u8272\u53ea\u662f\u4f7f\u7528\u63d2\u503c\u6cd5\u7ebf\u7684\u9010\u50cf\u7d20\u5149\u7167\u3002\uff09\u63d2\u503c\u6cd5\u7ebf\u5411\u91cf\u901a\u5e38\u53ea\u662f\u51e0\u4f55\u6b63\u786e\u6cd5\u7ebf\u7684\u4e00\u4e2a\u8fd1\u4f3c\uff0c\u4f46\u901a\u5e38\u8db3\u591f\u597d\uff0c\u53ef\u4ee5\u7ed9\u51fa\u597d\u7684\u7ed3\u679c\u3002\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5373\u4f7f\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7684\u6cd5\u7ebf\u5411\u91cf\u662f\u5355\u4f4d\u5411\u91cf\uff0c\u63d2\u503c\u7684\u6cd5\u7ebf\u5411\u91cf\u4e5f\u4e0d\u4e00\u5b9a\u662f\u5355\u4f4d\u5411\u91cf\u3002\u56e0\u6b64\uff0c\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u6807\u51c6\u5316\u63d2\u503c\u7684\u6cd5\u7ebf\u5411\u91cf\u5f88\u91cd\u8981\u3002\u9876\u70b9\u7740\u8272\u5668\u4e2d\u7684\u539f\u59cb\u6cd5\u7ebf\u5411\u91cf\u4e5f\u5e94\u8be5\u6807\u51c6\u5316\uff0c\u4ee5\u4fbf\u63d2\u503c\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/basic-specular-lighting-Phong.html\u4f7f\u7528\u9010\u50cf\u7d20\u5149\u7167\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u4f60\u9605\u8bfb\u8be5\u7a0b\u5e8f\u4e2d\u7684\u7740\u8272\u5668\u6e90\u4ee3\u7801\u3002\u9664\u4e86\u5149\u7167\u8ba1\u7b97\u5df2\u7ecf\u79fb\u52a8\u5230\u7247\u6bb5\u7740\u8272\u5668\u4e4b\u5916\uff0c\u5b83\u4e0e\u4e4b\u524d\u7684\u793a\u4f8b\u7a0b\u5e8f\u5b8c\u5168\u76f8\u540c\u3002</p> <p>\u8fd9\u4e2a\u6f14\u793a\u5141\u8bb8\u4f60\u5e76\u6392\u67e5\u770b\u4f7f\u7528\u9010\u9876\u70b9\u5149\u7167\u7ed8\u5236\u7684\u5bf9\u8c61\u548c\u4f7f\u7528\u9010\u50cf\u7d20\u5149\u7167\u7ed8\u5236\u7684\u76f8\u540c\u5bf9\u8c61\u3002\u5b83\u4f7f\u7528\u4e0e\u4e24\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u76f8\u540c\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u6f14\u793a\u4e2d\u7684\u5e2e\u52a9\u6587\u672c\uff1a</p> <p></p> <p>\u793a\u4f8b\u7a0b\u5e8fwebgl/basic-specular-lighting-Phong-webgl2.html\u662f\u5c06\u539f\u59cb\u7684WebGL 1.0 Phong\u5149\u7167\u7a0b\u5e8f\u79fb\u690d\u5230WebGL 2.0\u7684\u7248\u672c\u3002\u5b83\u5c55\u793a\u4e86\u5728GLSL ES 3.00\u4e2d\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u6837\u5b50\u3002\u53d8\u5316\u5f88\u5c0f\u3002\u5c5e\u6027\u53d8\u91cf\u53d8\u4e3a\"in\"\u53d8\u91cf\uff0c\u53d8\u5316\u53d8\u91cf\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u53d8\u4e3a\"out\"\u53d8\u91cf\uff0c\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u53d8\u4e3a\"in\"\u53d8\u91cf\uff0c\u5185\u7f6e\u7247\u6bb5\u7740\u8272\u5668\u53d8\u91cfgl_FragColor\u88ab\u81ea\u5b9a\u4e49\u7684\"out\"\u53d8\u91cf\u66ff\u6362\u3002JavaScript\u7aef\u6839\u672c\u4e0d\u9700\u8981\u66f4\u6539\uff0c\u4f46\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u5df2\u7ecf\u88ab\u4fee\u6539\u4e3a\u4f7f\u7528\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\u6765\u7ec4\u7ec7\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u7ed8\u5236\u7684\u5404\u79cd\u5bf9\u8c61\u7684\u6570\u636e\u3002</p> <p>To add specular lighting to our basic lighting model, we need to work with the vectors R and V in the lighting diagram. In perfect specular reflection, the viewer sees a specular highlight only if R is equal to V, which is very unlikely. But in the lighting equation that we are using, the amount of specular reflection depends on the dot product R\u00b7V, which represents the cosine of the angle between R and V. The formula for the contribution of specular reflection to the visible color is</p> <pre><code>(R\u00b7V)&lt;sup&gt;s&lt;/sup&gt; * specularMaterialColor * lightIntensity\n</code></pre> <p>where s is the specular exponent (the material property called \"shininess\" in OpenGL). The formula is only valid if R\u00b7V is greater than zero; otherwise, the specular contribution is zero.</p> <p>The unit vector R can be computed from L and N. (Some trigonometry shows that R is given by 2*(N\u00b7L)*N \u2212 L.) GLSL has a built-in function reflect(I,N) that computes the reflection of a vector I through a unit normal vector N; however, the value of reflect(L,N) is \u2212R rather than R. (GLSL assumes a light direction vector that points from the light toward the surface, while my L vector does the reverse.)</p> <p>The unit vector V points from the surface towards the position of the viewer. Remember that we are doing the calculations in eye coordinates. For an orthographic projection, the viewer is essentially at infinite distance, and V can be taken to be (0,0,1). For a perspective projection, the viewer is at the point (0,0,0) in eye coordinates, and V is given by normalize(\u2212eyeCoords) where eyeCoords contains the xyz coordinates of the surface point in the eye coordinate system. Putting all this together, and assuming that we already have N and L, the GLSL code for computing the color takes the form:</p> <pre><code>R = -reflect(L,N);\nV = normalize( -eyeCoords.xyz );  // (Assumes a perspective projection.)\nvec3 color = dot(L,N) *diffuseMaterialColor.rgb* diffuseLightColor;\nif (dot(R,V) &gt; 0.0) {\n    color = color + ( pow(dot(R,V),specularExponent) *\n                        specularMaterialColor* specularLightColor );\n}\n</code></pre> <p>The sample program webgl/basic-specular-lighting.html implements lighting with diffuse and specular reflection. For this program, which draws curved surfaces, normal vectors are given as a vertex attribute rather than a uniform variable. To add some flexibility to the lighting, the light position is specified as a uniform variable rather than a constant. Following the OpenGL convention, lightPosition is a vec4. For a directional light, the w-coordinate is 0, and the eye coordinates of the light are lightPosition.xyz. If the w-coordinate is non-zero, the light is a point light, and its eye coordinates are lightPosition.xyz/lightPosition.w. (The division by lightPosition.w is the convention for homogeneous coordinates, but in practice, lightPosition.w will usually be either zero or one.) The program allows for different diffuse and specular material colors, but the light is always white, with diffuse intensity 0.8 and specular intensity 0.4. You should be able to understand all of the code in the vertex shader:</p> <pre><code>attribute vec3 a_coords;\nattribute vec3 a_normal;\nuniform mat4 modelview;\nuniform mat4 projection;\nuniform mat3 normalMatrix;\nuniform vec4 lightPosition;\nuniform vec4 diffuseColor;\nuniform vec3 specularColor;\nuniform float specularExponent;\nvarying vec4 v_color;\nvoid main() {\n    vec4 coords = vec4(a_coords,1.0);\n    vec4 eyeCoords = modelview *coords;\n    gl_Position = projection* eyeCoords;\n    vec3 N, L, R, V;  // Vectors for lighting equation.\n    N = normalize( normalMatrix*a_normal );\n    if ( lightPosition.w == 0.0 ) { // Directional light.\n        L = normalize( lightPosition.xyz );\n    }\n    else { // Point light.\n        L = normalize( lightPosition.xyz/lightPosition.w - eyeCoords.xyz );\n    }\n    R = -reflect(L,N);\n    V = normalize( -eyeCoords.xyz);  // (Assumes a perspective projection.)\n    if ( dot(L,N) &lt;= 0.0 ) {\n        v_color = vec4(0,0,0,1);  // The vertex is not illuminated.\n    }\n    else {\n        vec3 color = 0.8* dot(L,N) *diffuseColor.rgb;\n        if (dot(R,V) &gt; 0.0) {\n            color += 0.4* pow(dot(R,V),specularExponent) * specularColor;\n        }\n        v_color = vec4(color, diffuseColor.a);\n    }\n}\n</code></pre> <p>The fragment shader just assigns the value of v_color to gl_FragColor.</p> <p>This approach imitates OpenGL 1.1 in that it does lighting calculations in the vertex shader. This is sometimes called per-vertex lighting. It is similar to Lambert shading in three.js, except that Lambert shading only uses diffuse reflection. But there are many cases where per-vertex lighting does not give good results. We saw in Subsection 5.1.5 that it can give very bad results for spotlights. It also tends to produce bad specular highlights, unless the primitives are very small.</p> <p>If a light source is close to a primitive, compared to the size of the primitive, the angles that the light makes with the primitive at the vertices can have very little relationship to the angle of the light at an interior point of the primitive:</p> <p></p> <p>Since lighting depends heavily on the angles, per-vertex lighting will not give a good result in this case. To get better results, we can do per-pixel lighting. That is, we can move the lighting calculations from the vertex shader into the fragment shader.</p> <p>To do per-pixel lighting, certain data that is available in the vertex shader must be passed to the fragment shader in varying variables. This includes, for example, either object coordinates or eye coordinates for the surface point. The same might apply to properties such as diffuse color, if they are attributes rather then uniform variables. Of course, uniform variables are directly accessible to the fragment shader. Light properties will generally be uniforms, and material properties might well be.</p> <p>And then, of course, there are the normal vectors, which are so essential for lighting. Although normal vectors can sometimes be uniform variables, they are usually attributes. Per-pixel lighting generally uses interpolated normal vectors, passed to the fragment shader in a varying variable. (Phong shading is just per-pixel lighting using interpolated normals.) An interpolated normal vector is in general only an approximation for the geometrically correct normal, but it's usually good enough to give good results. Another issue is that interpolated normals are not necessarily unit vectors, even if the normals in the vertex shader are unit vectors. So, it's important to normalize the interpolated normal vectors in the fragment shader. The original normal vectors in the vertex shader should also be normalized, for the interpolation to work properly.</p> <p>The sample program webgl/basic-specular-lighting-Phong.html uses per-pixel lighting. I urge you to read the shader source code in that program. Aside from the fact that lighting calculations have been moved to the fragment shader, it is identical to the previous sample program.</p> <p>This demo lets you view objects drawn using per-vertex lighting side-by-side with identical objects drawn using per-pixel lighting. It uses the same shader programs as the two sample programs. See the help text in the demo for more information:</p> <p></p> <p>The sample program webgl/basic-specular-lighting-Phong-webgl2.html is a port of the original WebGL 1.0 Phong lighting program to WebGL 2.0. It shows what the shader program looks like in GLSL ES 3.00. The changes are minimal. Attribute variables become \"in\" variables, varying variables become \"out\" variables in the vertex shader and \"in\" variables in the fragment shader, and the built-in fragment shader variable gl_FragColor is replaced with a custom \"out\" variable. The JavaScript side would not have to be changed at all, but as an example, it has been modified to use vertex array objects to organize the data for the various objects that can be drawn in the in program.</p>"},{"location":"cn/c7/s2/#723-\u589e\u52a0\u590d\u6742\u6027","title":"7.2.3 \u589e\u52a0\u590d\u6742\u6027","text":"<p>Adding Complexity</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u6b63\u5728\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002\u968f\u7740\u6211\u4eec\u589e\u52a0\u5bf9\u591a\u4e2a\u5149\u6e90\u3001\u989d\u5916\u7684\u5149\u5c5e\u6027\u3001\u53cc\u9762\u5149\u7167\u3001\u7eb9\u7406\u7b49\u7279\u6027\u7684\u652f\u6301\uff0c\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u548c\u51fd\u6570\u6765\u5e2e\u52a9\u7ba1\u7406\u590d\u6742\u6027\u5c06\u662f\u6709\u7528\u7684\u3002GLSL \u6570\u636e\u7ed3\u6784\u5728 6.3.2\u5c0f\u8282 \u4e2d\u4ecb\u7ecd\uff0c\u51fd\u6570\u5b9a\u4e49\u5728 6.3.5\u5c0f\u8282 \u4e2d\u4ecb\u7ecd\u3002\u8ba9\u6211\u4eec\u7b80\u8981\u770b\u770b\u5b83\u4eec\u5982\u4f55\u88ab\u7528\u6765\u5904\u7406\u5149\u548c\u6750\u8d28\u3002</p> <p>\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u4fdd\u5b58\u5149\u7684\u5c5e\u6027\u662f\u6709\u610f\u4e49\u7684\u3002\u8fd9\u4e9b\u5c5e\u6027\u901a\u5e38\u81f3\u5c11\u5305\u62ec\u5149\u7684\u4f4d\u7f6e\u548c\u989c\u8272\u3002\u6839\u636e\u5e94\u7528\u548c\u4f7f\u7528\u7684\u5149\u7167\u6a21\u578b\u7684\u7ec6\u8282\uff0c\u53ef\u4ee5\u6dfb\u52a0\u5176\u4ed6\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u80fd\u591f\u6253\u5f00\u548c\u5173\u95ed\u5149\u6e90\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2abool\u53d8\u91cf\u6765\u8868\u793a\u5149\u662f\u5426\u542f\u7528\uff1a</p> <pre><code>struct LightProperties {\n    bool enabled;\n    vec4 position;\n    vec3 color;\n};\n</code></pre> <p>\u7136\u540e\uff0c\u53ef\u4ee5\u7528LightProperties\u7c7b\u578b\u7684\u53d8\u91cf\u6765\u8868\u793a\u5149\u3002\u5b83\u5f88\u53ef\u80fd\u662f\u4e00\u4e2auniform\u53d8\u91cf\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5728 JavaScript \u7aef\u6307\u5b9a\u5176\u503c\u3002\u901a\u5e38\uff0c\u4f1a\u6709\u591a\u4e2a\u5149\u6e90\uff0c\u7531\u6570\u7ec4\u8868\u793a\uff1b\u4f8b\u5982\uff0c\u5141\u8bb8\u6700\u591a\u56db\u4e2a\u5149\u6e90\uff1a</p> <pre><code>uniform LightProperties lights[4];\n</code></pre> <p>\u6750\u8d28\u5c5e\u6027\u4e5f\u53ef\u4ee5\u8868\u793a\u4e3astruct\u3002\u540c\u6837\uff0c\u7ec6\u8282\u4f1a\u56e0\u5e94\u7528\u800c\u5f02\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u5141\u8bb8\u6f2b\u53cd\u5c04\u548c\u955c\u9762\u989c\u8272\uff1a</p> <pre><code>struct MaterialProperties {\n    vec3 diffuseColor;\n    vec3 specularColor;\n    float specularExponent;\n};\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5e2e\u52a9\u8fdb\u884c\u5149\u7167\u8ba1\u7b97\u3002\u4e0b\u9762\u7684\u51fd\u6570\u8ba1\u7b97\u4e00\u4e2a\u5149\u6e90\u5bf9\u8868\u9762\u4e0a\u67d0\u70b9\u989c\u8272\u7684\u8d21\u732e\u3002\uff08\u5176\u4e2d\u4e00\u4e9b\u53c2\u6570\u53ef\u4ee5\u662f\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u3002\uff09</p> <pre><code>vec3 lightingEquation(LightProperties light,       \n                        MaterialProperties material, \n                        vec3 eyeCoords, // \u70b9\u7684\u773c\u775b\u5750\u6807\u3002\n                        vec3 N, // \u8868\u9762\u7684\u6cd5\u7ebf\u5411\u91cf\u3002\n                        vec3 V  // \u6307\u5411\u89c2\u5bdf\u8005\u7684\u65b9\u5411\u3002\n                    ) {\n    vec3 L, R; // \u5149\u7684\u65b9\u5411\u548c\u53cd\u5c04\u5149\u7684\u65b9\u5411\u3002\n    if (light.position.w == 0.0) { // \u65b9\u5411\u5149\n        L = normalize(light.position.xyz);\n    }\n    else { // \u70b9\u5149\u6e90\n        L = normalize((light.position.xyz / light.position.w) - eyeCoords);\n    }\n    if (dot(L, N) &lt;= 0.0) { // \u5149\u6ca1\u6709\u7167\u4eae\u8868\u9762\n        return vec3(0.0);\n    }\n    vec3 reflection = dot(L, N) * light.color * material.diffuseColor;\n    R = -reflect(L, N);\n    if (dot(R, V) &gt; 0.0) { // \u5149\u7ebf\u53cd\u5c04\u5411\u89c2\u5bdf\u8005\n        float factor = pow(dot(R, V), material.specularExponent);\n        reflection += factor * material.specularColor * light.color;\n    }\n    return reflection;\n}\n</code></pre> <p>\u7136\u540e\uff0c\u5047\u8bbe\u6709\u56db\u4e2a\u5149\u6e90\uff0c\u5149\u7167\u65b9\u7a0b\u7684\u5b8c\u6574\u8ba1\u7b97\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>vec3 color = vec3(0.0);  // \u4ece\u9ed1\u8272\uff08\u6240\u6709\u989c\u8272\u5206\u91cf\u4e3a\u96f6\uff09\u5f00\u59cb\u3002\nfor (int i = 0; i &lt; 4; i++) {  // \u6dfb\u52a0\u7b2c i \u4e2a\u5149\u6e90\u7684\u8d21\u732e\u3002\n    if (lights[i].enabled) { // \u53ea\u6709\u542f\u7528\u7684\u5149\u624d\u80fd\u8d21\u732e\u989c\u8272\u3002\n        color += lightingEquation(lights[i], material,\n                                    eyeCoords, normal, viewDirection);\n    }\n}\n</code></pre> <p>Our shader programs are getting more complex. As we add support for multiple lights, additional light properties, two-sided lighting, textures, and other features, it will be useful to use data structures and functions to help manage the complexity. GLSL data structures were introduced in Subsection 6.3.2, and function definitions in Subsection 6.3.5. Let's look briefly at how they can be used to work with light and material.</p> <p>It makes sense to define a struct to hold the properties of a light. The properties will usually include, at a minimum, the position and color of the light. Other properties can be added, depending on the application and the details of the lighting model that are used. For example, to make it possible to turn lights on and off, a bool variable might be added to say whether the light is enabled:</p> <pre><code>struct LightProperties {\nbool enabled;\nvec4 position;\nvec3 color; \n};\n</code></pre> <p>A light can then be represented as a variable of type LightProperties. It will likely be a uniform variable so that its value can be specified on the JavaScript side. Often, there will be multiple lights, represented by an array; for example, to allow for up to four lights:</p> <pre><code>uniform LightProperties lights[4];\n</code></pre> <p>Material properties can also be represented as a struct. Again, the details will vary from one application to another. For example, to allow for diffuse and specular color:</p> <pre><code>struct MaterialProperties {\n    vec3 diffuseColor;\n    vec3 specularColor;\n    float specularExponent;\n};\n</code></pre> <p>With these data types in hand, we can write a function to help with the lighting calculation. The following function computes the contribution of one light to the color of a point on a surface. (Some of the parameters could be global variables in the shader program instead.)</p> <pre><code>vec3 lightingEquation( LightProperties light,       \n                            MaterialProperties material, \n                            vec3 eyeCoords, // Eye coordinates for the point.\n                            vec3 N, // Normal vector to the surface.\n                            vec3 V  // Direction to viewer.\n                        ) {\n    vec3 L, R; // Light direction and reflected light direction.\n    if ( light.position.w == 0.0 ) { // directional light\n        L = normalize( light.position.xyz );\n    }\n    else { // point light\n        L = normalize( light.position.xyz/light.position.w - eyeCoords );\n    }\n    if (dot(L,N) &lt;= 0.0) { // light does not illuminate the surface\n        return vec3(0.0); \n    }\n    vec3 reflection = dot(L,N) * light.color * material.diffuseColor;\n    R = -reflect(L,N);\n    if (dot(R,V) &gt; 0.0) { // ray is reflected toward the viewer\n        float factor = pow(dot(R,V),material.specularExponent);\n        reflection += factor * material.specularColor * light.color;\n    }\n    return reflection;\n}\n</code></pre> <p>Then, assuming that there are four lights, the full calculation of the lighting equation might look like this:</p> <pre><code>vec3 color = vec3(0.0);  // Start with black (all color components zero).\nfor (int i = 0; i &lt; 4; i++) {  // Add in the contribution from light i.\n    if (lights[i].enabled) { // Light can only contribute color if enabled.\n        color += lightingEquation( lights[i], material,\n                                        eyeCoords, normal, viewDirection );\n    }\n}\n</code></pre>"},{"location":"cn/c7/s2/#724-\u4e24\u4fa7\u7167\u660e","title":"7.2.4 \u4e24\u4fa7\u7167\u660e","text":"<p>Two-sided Lighting</p> \u4e2d\u6587\u82f1\u6587 <p>\u793a\u4f8b\u7a0b\u5e8f webgl/parametric-function-grapher.html \u4f7f\u7528\u4e86\u7c7b\u4f3c\u4e8e\u6211\u4eec\u521a\u521a\u770b\u5230\u7684 GLSL \u6570\u636e\u7ed3\u6784\u3002\u5b83\u8fd8\u5f15\u5165\u4e86\u4e00\u4e9b\u65b0\u7279\u6027\u3002\u8be5\u7a0b\u5e8f\u7ed8\u5236\u4e86\u4e00\u4e2a\u53c2\u6570\u66f2\u9762\u7684\u56fe\u5f62\u3002\u66f2\u9762\u4e0a\u70b9\u7684 (x,y,z) \u5750\u6807\u7531\u4e24\u4e2a\u53d8\u91cf u \u548c v \u7684\u51fd\u6570\u7ed9\u51fa\u3002\u7528\u6237\u53ef\u4ee5\u8f93\u5165\u8fd9\u4e9b\u51fd\u6570\u7684\u5b9a\u4e49\u3002\u6709\u4e00\u4e2a\u89c6\u70b9\u5149\uff0c\u4f46\u4e3a\u4e86\u63d0\u4f9b\u66f4\u5747\u5300\u7684\u7167\u660e\uff0c\u989d\u5916\u6dfb\u52a0\u4e86\u4e24\u4e2a\u5149\u6e90\u3002\u8be5\u56fe\u5f62\u88ab\u89c6\u4e3a\u6709\u4e24\u4e2a\u9762\uff0c\u5206\u522b\u88ab\u6d82\u6210\u9ec4\u8272\u548c\u84dd\u8272\u3002\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u5728\u8868\u9762\u4e0a\u663e\u793a\u7f51\u683c\u7ebf\u3002\u8fd9\u662f\u9ed8\u8ba4\u66f2\u9762\u7684\u6837\u5b50\uff0c\u5e26\u6709\u7f51\u683c\u7ebf\uff1a</p> <p></p> <p>\u8fd9\u662f\u4e00\u4e2a\u53cc\u9762\u5149\u7167\u7684\u4f8b\u5b50 (4.2.4\u5c0f\u8282)\u3002\u6211\u4eec\u9700\u8981\u4e24\u79cd\u6750\u6599\uff0c\u4e00\u79cd\u7528\u4e8e\u7ed8\u5236\u9762\u5411\u5916\u7684\u591a\u8fb9\u5f62\u7684\u524d\u6750\u6599\uff0c\u4e00\u79cd\u7528\u4e8e\u7ed8\u5236\u9762\u5411\u5185\u7684\u591a\u8fb9\u5f62\u7684\u540e\u6750\u6599\u3002\u6b64\u5916\uff0c\u5728\u7ed8\u5236\u80cc\u9762\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u53cd\u8f6c\u6cd5\u7ebf\u5411\u91cf\u7684\u65b9\u5411\uff0c\u56e0\u4e3a\u6cd5\u7ebf\u5411\u91cf\u88ab\u5047\u5b9a\u4e3a\u6307\u5411\u524d\u9762\u3002</p> <p>\u4f46\u662f\u5f53\u7740\u8272\u5668\u7a0b\u5e8f\u6267\u884c\u5149\u7167\u8ba1\u7b97\u65f6\uff0c\u5b83\u5982\u4f55\u77e5\u9053\u5b83\u6b63\u5728\u7ed8\u5236\u524d\u9762\u8fd8\u662f\u540e\u9762\u5462\uff1f\u8fd9\u4e9b\u4fe1\u606f\u6765\u81ea\u7740\u8272\u5668\u7a0b\u5e8f\u5916\u90e8\uff1a\u7247\u6bb5\u7740\u8272\u5668\u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u5e03\u5c14\u53d8\u91cf\u540d\u4e3a gl_FrontFacing\uff0c\u5982\u679c\u7740\u8272\u5668\u6b63\u5728\u5904\u7406\u591a\u8fb9\u5f62\u7684\u524d\u9762\uff0c\u5219\u5728\u8c03\u7528\u7247\u6bb5\u7740\u8272\u5668\u4e4b\u524d\uff0c\u8be5\u53d8\u91cf\u7684\u503c\u88ab\u8bbe\u7f6e\u4e3a true\u3002\u5f53\u8fdb\u884c\u9010\u50cf\u7d20\u5149\u7167\u65f6\uff0c\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u68c0\u67e5\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u4ee5\u51b3\u5b9a\u5728\u5149\u7167\u65b9\u7a0b\u4e2d\u4f7f\u7528\u524d\u6750\u6599\u8fd8\u662f\u540e\u6750\u6599\u3002\u793a\u4f8b\u7a0b\u5e8f\u6709\u4e24\u4e2a uniform \u53d8\u91cf\u6765\u8868\u793a\u8fd9\u4e24\u79cd\u6750\u6599\u3002\u5b83\u6709\u4e09\u79cd\u5149\u6e90\u3002\u6cd5\u7ebf\u5411\u91cf\u548c\u70b9\u7684\u773c\u775b\u5750\u6807\u662f\u53d8\u5316\u53d8\u91cf\u3002\u6cd5\u7ebf\u53d8\u6362\u77e9\u9635\u4e5f\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u5e94\u7528\uff1a</p> <pre><code>uniform MaterialProperties frontMaterial;\nuniform MaterialProperties backMaterial;\nuniform LightProperties lights[3];\nuniform mat3 normalMatrix;\nvarying vec3 v_normal;\nvarying vec3 v_eyeCoords;\n</code></pre> <p>\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u548c\u4e0a\u9762\u663e\u793a\u7684 lightingEquation \u51fd\u6570\u8ba1\u7b97\u7247\u6bb5\u7684\u989c\u8272\uff1a</p> <pre><code>vec3 normal = normalize(normalMatrix * v_normal);\nvec3 viewDirection = normalize(-v_eyeCoords);\nvec3 color = vec3(0.0);\nfor (int i = 0; i &lt; 3; i++) {\n    if (lights[i].enabled) {\n        if (gl_FrontFacing) {  // \u8ba1\u7b97\u524d\u9762\u7684\u989c\u8272\u3002\n            color += lightingEquation(lights[i], frontMaterial, v_eyeCoords,\n                                        normal, viewDirection);\n        } else {  // \u8ba1\u7b97\u540e\u9762\u7684\u989c\u8272\u3002\n            color += lightingEquation(lights[i], backMaterial, v_eyeCoords,\n                                        -normal, viewDirection);\n        }\n    }\n}\ngl_FragColor = vec4(color, 1.0);\n</code></pre> <p>\u6ce8\u610f\uff0c\u5728\u5bf9 lightEquation \u7684\u7b2c\u4e8c\u6b21\u8c03\u7528\u4e2d\uff0c\u6cd5\u7ebf\u5411\u91cf\u88ab\u7ed9\u51fa\u4e3a -normal\u3002\u8d1f\u53f7\u7528\u4e8e\u5728\u80cc\u9762\u4f7f\u7528\u65f6\u53cd\u8f6c\u6cd5\u7ebf\u5411\u91cf\u7684\u65b9\u5411\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u5728\u8fdb\u884c\u9010\u9876\u70b9\u5149\u7167\u65f6\u4f7f\u7528\u53cc\u9762\u5149\u7167\uff0c\u4f60\u5fc5\u987b\u5904\u7406 gl_FrontFacing \u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4e0d\u53ef\u7528\u7684\u4e8b\u5b9e\u3002\u4e00\u4e2a\u9009\u62e9\u662f\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u8ba1\u7b97\u524d\u989c\u8272\u548c\u540e\u989c\u8272\uff0c\u5e76\u5c06\u4e24\u4e2a\u503c\u4f5c\u4e3a\u53d8\u5316\u53d8\u91cf\u4f20\u9012\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u3002\u7136\u540e\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u57fa\u4e8e gl_FrontFacing \u7684\u503c\u51b3\u5b9a\u4f7f\u7528\u54ea\u79cd\u989c\u8272\u3002</p> <p>WebGL \u4e2d\u6709\u4e00\u4e9b\u8bbe\u7f6e\u4e0e\u53cc\u9762\u5149\u7167\u6709\u5173\u3002\u901a\u5e38\uff0cWebGL \u6839\u636e\u4e00\u4e2a\u89c4\u5219\u6765\u786e\u5b9a\u4e09\u89d2\u5f62\u7684\u6b63\u9762\uff0c\u5373\u5f53\u6b63\u9762\u88ab\u89c2\u5bdf\u65f6\uff0c\u9876\u70b9\u6309\u9006\u65f6\u9488\u987a\u5e8f\u5217\u51fa\u3002JavaScript \u547d\u4ee4 gl.frontFace(gl.CW) \u53cd\u8f6c\u4e86\u8fd9\u4e2a\u89c4\u5219\uff0c\u4f7f\u5f97\u5f53\u6b63\u9762\u88ab\u89c2\u5bdf\u65f6\uff0c\u9876\u70b9\u6309\u987a\u65f6\u9488\u987a\u5e8f\u5217\u51fa\u3002\u547d\u4ee4 gl.frontFace(gl.CCW) \u6062\u590d\u4e86\u9ed8\u8ba4\u89c4\u5219\u3002</p> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u786e\u5b9a\u6ca1\u6709\u80cc\u9762\u662f\u53ef\u89c1\u7684\u3002\u5f53\u5bf9\u8c61\u662f\u5c01\u95ed\u8868\u9762\u4e14\u4ece\u5916\u90e8\u89c2\u5bdf\uff0c\u6240\u6709\u4e09\u89d2\u5f62\u90fd\u671d\u5411\u5916\u90e8\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed8\u5236\u80cc\u9762\u662f\u6d6a\u8d39\u52aa\u529b\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u653e\u5fc3\u5b83\u4eec\u4f1a\u88ab\u524d\u9762\u9690\u85cf\u3002JavaScript \u547d\u4ee4 gl.enable(gl.CULL_FACE) \u544a\u8bc9 WebGL \u6839\u636e\u4e09\u89d2\u5f62\u662f\u9762\u5411\u6b63\u9762\u8fd8\u662f\u80cc\u9762\u6765\u51b3\u5b9a\u662f\u5426\u7ed8\u5236\u5b83\u4eec\u3002\u547d\u4ee4 gl.cullFace(gl.BACK) \u548c gl.cullFace(gl.FRONT) \u786e\u5b9a\u5728\u542f\u7528 CULL_FACE \u65f6\u662f\u4e22\u5f03\u80cc\u9762\u8fd8\u662f\u6b63\u9762\u7684\u4e09\u89d2\u5f62\uff1b\u9ed8\u8ba4\u662f\u4e22\u5f03\u80cc\u9762\u7684\u4e09\u89d2\u5f62\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u5728\u8868\u9762\u4e0a\u663e\u793a\u4e00\u7ec4\u7f51\u683c\u7ebf\u3002\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u5728 3.4.1\u5c0f\u8282 \u7684\u672b\u5c3e\u548c 5.1.4\u5c0f\u8282 \u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u7ed8\u5236\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u6df1\u5ea6\u7684\u5bf9\u8c61\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6df1\u5ea6\u6d4b\u8bd5\u95ee\u9898\u3002OpenGL \u4f7f\u7528\u591a\u8fb9\u5f62\u504f\u79fb\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002WebGL \u4e2d\u4e5f\u6709\u76f8\u540c\u7684\u89e3\u51b3\u65b9\u6848\u3002\u591a\u8fb9\u5f62\u504f\u79fb\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5f00\u542f\uff1a</p> <pre><code>gl.enable(gl.POLYGON_OFFSET_FILL);\ngl.polygonOffset(1,1);\n</code></pre> <p>\u5e76\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5173\u95ed\uff1a</p> <pre><code>gl.disable(gl.POLYGON_OFFSET_FILL);\n</code></pre> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u5728\u7ed8\u5236\u56fe\u5f62\u65f6\u542f\u7528\u4e86\u591a\u8fb9\u5f62\u504f\u79fb\uff0c\u5728\u7ed8\u5236\u7f51\u683c\u7ebf\u65f6\u5173\u95ed\u4e86\u591a\u8fb9\u5f62\u504f\u79fb\u3002</p> <p>The sample program webgl/parametric-function-grapher.html uses GLSL data structures similar to the ones we have just been looking at. It also introduces a few new features. The program draws the graph of a parametric surface. The (x,y,z) coordinates of points on the surface are given by functions of two variables u and v. The definitions of the functions can be input by the user. There is a viewpoint light, but two extra lights have been added in an attempt to provide more even illumination. The graph is considered to have two sides, which are colored yellow and blue. The program can, optionally, show grid lines on the surface. Here's what the default surface looks like, with grid lines:</p> <p></p> <p>This is an example of two-sided lighting (Subsection 4.2.4). We need two materials, a front material for drawing front-facing polygons and a back material for drawing back-facing polygons. Furthermore, when drawing a back face, we have to reverse the direction of the normal vector, since normal vectors are assumed to point out of the front face.</p> <p>But when the shader program does lighting calculations, how does it know whether it's drawing a front face or a back face? That information comes from outside the shader program: The fragment shader has a built-in boolean variable named gl_FrontFacing whose value is set to true before the fragment shader is called, if the shader is working on the front face of a polygon. When doing per-pixel lighting, the fragment shader can check the value of this variable to decide whether to use the front material or the back material in the lighting equation. The sample program has two uniform variables to represent the two materials. It has three lights. The normal vectors and eye coordinates of the point are varying variables. And the normal transformation matrix is also applied in the fragment shader:</p> <pre><code>uniform MaterialProperties frontMaterial;\nuniform MaterialProperties backMaterial;\nuniform LightProperties lights[3];\nuniform mat3 normalMatrix;\nvarying vec3 v_normal;\nvarying vec3 v_eyeCoords;\n</code></pre> <p>A color for the fragment is computed using these variables and the lightingEquation function shown above:</p> <pre><code>vec3 normal = normalize( normalMatrix * v_normal );\nvec3 viewDirection = normalize( -v_eyeCoords);\nvec3 color = vec3(0.0);\nfor (int i = 0; i &lt; 3; i++) {\n    if (lights[i].enabled) {\n        if (gl_FrontFacing) {  // Computing color for a front face.\n            color += lightingEquation( lights[i], frontMaterial, v_eyeCoords,\n                                            normal, viewDirection);\n        }\n        else {  // Computing color for a back face.\n            color += lightingEquation( lights[i], backMaterial, v_eyeCoords,\n                                            -normal, viewDirection);\n        }\n    }\n}\ngl_FragColor = vec4(color,1.0);\n</code></pre> <p>Note that in the second call to lightEquation, the normal vector is given as \u2212normal. The negative sign reverses the direction of the normal vector for use on a back face.</p> <p>If you want to use two-sided lighting when doing per-vertex lighting, you have to deal with the fact that gl_FrontFacing is not available in the vertex shader. One option is to compute both a front color and a back color in the vertex shader and pass both values to the fragment shader as varying variables. The fragment shader can then decide which color to use, based on the value of gl_FrontFacing.</p> <p>There are a few WebGL settings related to two-sided lighting. Ordinarily, WebGL determines the front face of a triangle according to the rule that when the front face is viewed, vertices are listed in counterclockwise order around the triangle. The JavaScript command gl.frontFace(gl.CW) reverses the rule, so that vertices are listed in clockwise order when the front face is viewed. The command gl.frontFace(gl.CCW) restores the default rule.</p> <p>In some cases, you can be sure that no back faces are visible. This will happen when the objects are closed surfaces seen from the outside, and all the triangles face towards the outside. In such cases, it is wasted effort to draw back faces, since you can be sure that they will be hidden by front faces. The JavaScript command gl.enable(gl.CULL_FACE) tells WebGL to discard triangles without drawing them, based on whether they are front-facing or back-facing. The commands gl.cullFace(gl.BACK) and gl.cullFace(gl.FRONT) determine whether it is back-facing or front-facing triangles that are discarded when CULL_FACE is enabled; the default is to discard back-facing triangles.</p> <p>The sample program can display a set of grid lines on the surface. As always, drawing two objects at exactly the same depth can cause a problem with the depth test. As we have already seen at the end of Subsection 3.4.1 and in Subsection 5.1.4, OpenGL uses polygon offset to solve the problem. The same solution is available in WebGL. Polygon offset can be turned on with the commands</p> <pre><code>gl.enable(gl.POLYGON_OFFSET_FILL);\ngl.polygonOffset(1,1);\n</code></pre> <p>and turned off with</p> <pre><code>gl.disable(gl.POLYGON_OFFSET_FILL);\n</code></pre> <p>In the sample program, polygon offset is turned on while drawing the graph and is turned off while drawing the grid lines.</p>"},{"location":"cn/c7/s2/#725-\u79fb\u52a8\u706f","title":"7.2.5 \u79fb\u52a8\u706f","text":"<p>Moving Lights</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6211\u4eec\u76ee\u524d\u7684\u793a\u4f8b\u4e2d\uff0c\u5149\u6e90\u76f8\u5bf9\u4e8e\u89c2\u5bdf\u8005\u662f\u56fa\u5b9a\u7684\u3002\u4f46\u6709\u4e9b\u5149\u6e90\uff0c\u6bd4\u5982\u6c7d\u8f66\u7684\u524d\u706f\uff0c\u5e94\u8be5\u968f\u7740\u7269\u4f53\u79fb\u52a8\u3002\u8fd8\u6709\u4e9b\u5149\u6e90\uff0c\u6bd4\u5982\u8def\u706f\uff0c\u5e94\u8be5\u4fdd\u6301\u5728\u4e16\u754c\u4e2d\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u4f46\u968f\u7740\u89c6\u70b9\u7684\u53d8\u5316\u800c\u5728\u6e32\u67d3\u573a\u666f\u4e2d\u6539\u53d8\u4f4d\u7f6e\u3002</p> <p>\u5149\u7167\u8ba1\u7b97\u662f\u5728\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u5b8c\u6210\u7684\u3002\u5f53\u5149\u6e90\u7684\u4f4d\u7f6e\u4ee5\u5bf9\u8c61\u5750\u6807\u6216\u4e16\u754c\u5750\u6807\u7ed9\u51fa\u65f6\uff0c\u5fc5\u987b\u901a\u8fc7\u5e94\u7528\u9002\u5f53\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u5c06\u5176\u8f6c\u6362\u4e3a\u773c\u775b\u5750\u6807\u3002\u53d8\u6362\u4e0d\u80fd\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u5b8c\u6210\uff0c\u56e0\u4e3a\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u4ee3\u8868\u4e86\u6b63\u5728\u6e32\u67d3\u7684\u5bf9\u8c61\u7684\u53d8\u6362\uff0c\u800c\u8fd9\u51e0\u4e4e\u4ece\u6765\u4e0d\u662f\u5149\u6e90\u7684\u53d8\u6362\u3002\u89e3\u51b3\u65b9\u6848\u662f\u5b58\u50a8\u773c\u775b\u5750\u6807\u4e2d\u5149\u6e90\u7684\u4f4d\u7f6e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee3\u8868\u5149\u6e90\u4f4d\u7f6e\u7684\u7740\u8272\u5668\u7684 uniform \u53d8\u91cf\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u773c\u775b\u5750\u6807\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <p>\u5bf9\u4e8e\u76f8\u5bf9\u4e8e\u89c2\u5bdf\u8005\u56fa\u5b9a\u7684\u5149\u6e90\uff0c\u5149\u6e90\u7684\u4f4d\u7f6e\u5df2\u7ecf\u7528\u773c\u775b\u5750\u6807\u8868\u793a\u4e86\u3002\u4f8b\u5982\uff0c\u7528\u4f5c\u89c6\u70b9\u5149\u7684\u70b9\u5149\u6e90\u7684\u4f4d\u7f6e\u662f (0,0,0)\uff0c\u8fd9\u662f\u89c2\u5bdf\u8005\u5728\u773c\u775b\u5750\u6807\u4e2d\u7684\u4f4d\u7f6e\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u5149\u6e90\uff0c\u9002\u5f53\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u662f\u5355\u4f4d\u77e9\u9635\u3002</p> <p>\u5bf9\u4e8e\u5728\u4e16\u754c\u5750\u6807\u4e2d\u5904\u4e8e\u56fa\u5b9a\u4f4d\u7f6e\u7684\u5149\u6e90\uff0c\u9002\u5f53\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u662f\u89c2\u5bdf\u53d8\u6362\u3002\u5fc5\u987b\u5c06\u89c2\u5bdf\u53d8\u6362\u5e94\u7528\u4e8e\u4e16\u754c\u5750\u6807\u7684\u5149\u6e90\u4f4d\u7f6e\uff0c\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u773c\u775b\u5750\u6807\u3002\u5728 WebGL \u4e2d\uff0c\u5e94\u8be5\u5728 JavaScript \u7aef\u5e94\u7528\u53d8\u6362\uff0c\u5e76\u5c06\u53d8\u6362\u7684\u8f93\u51fa\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4ee3\u8868\u773c\u775b\u5750\u6807\u4e2d\u5149\u6e90\u4f4d\u7f6e\u7684 uniform \u53d8\u91cf\u3002\u540c\u6837\uff0c\u5bf9\u4e8e\u5728\u4e16\u754c\u4e2d\u79fb\u52a8\u7684\u5149\u6e90\uff0c\u5e94\u8be5\u5728 JavaScript \u7aef\u5c06\u7ec4\u5408\u7684\u5efa\u6a21\u548c\u89c2\u5bdf\u53d8\u6362\u5e94\u7528\u4e8e\u5149\u6e90\u4f4d\u7f6e\u3002glMatrix \u5e93 (7.1.2\u5c0f\u8282) \u5b9a\u4e49\u4e86\u51fd\u6570</p> <pre><code>vec4.transformMat4( transformedVector, originalVector, matrix );\n</code></pre> <p>\u53ef\u4ee5\u7528\u6765\u6267\u884c\u53d8\u6362\u3002\u51fd\u6570\u8c03\u7528\u4e2d\u7684 matrix \u5c06\u662f\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u77e9\u9635\u3002\u987a\u4fbf\u56de\u5fc6\u4e00\u4e0b\uff0c\u5149\u6e90\u4f4d\u7f6e\u662f\u4ee5 vec4 \u7684\u5f62\u5f0f\u7ed9\u51fa\u7684\uff0c\u4f7f\u7528\u9f50\u6b21\u5750\u6807\u3002\uff08\u89c1 4.2.3\u5c0f\u8282\u3002\uff09\u4e58\u4ee5\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u5c06\u9002\u7528\u4e8e\u4efb\u4f55\u5149\u6e90\uff0c\u65e0\u8bba\u65b9\u5411\u5149\u8fd8\u662f\u70b9\u5149\u6e90\uff0c\u53ea\u8981\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8868\u793a\u5176\u4f4d\u7f6e\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u4f4d\u7f6e\u7684 JavaScript \u51fd\u6570\uff1a</p> <pre><code>/* \u8bbe\u7f6e\u773c\u775b\u5750\u6807\u4e2d\u5149\u6e90\u7684\u4f4d\u7f6e\u3002\n* @param u_position_loc \u5149\u6e90\u4f4d\u7f6e\u5c5e\u6027\u7684 uniform \u53d8\u91cf\u4f4d\u7f6e\u3002\n* @param modelview \u5c06\u5149\u6e90\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u773c\u775b\u5750\u6807\u7684\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u3002\n* @param lightPosition \u5149\u6e90\u7684\u4f4d\u7f6e\uff0c\u4ee5\u5bf9\u8c61\u5750\u6807\u8868\u793a\uff08\u4e00\u4e2a vec4\uff09\u3002\n*/\nfunction setLightPosition( u_position_loc, modelview, lightPosition ) {\n    let transformedPosition = new Float32Array(4);\n    vec4.transformMat4( transformedPosition, lightPosition, modelview );\n    gl.uniform4fv( u_position_loc, transformedPosition );\n}\n</code></pre> <p>\u5bf9\u4e8e\u76f8\u5bf9\u4e8e\u89c2\u5bdf\u8005\u56fa\u5b9a\u7684\u5149\u6e90\uff0c\u9002\u5f53\u7684 modelview \u77e9\u9635\u662f\u5355\u4f4d\u77e9\u9635\uff1b\u5bf9\u4e8e\u5728\u4e16\u754c\u4e2d\u6709\u56fa\u5b9a\u4f4d\u7f6e\u7684\u5149\u6e90\uff0c\u53ea\u662f\u89c2\u5bdf\u53d8\u6362\uff1b\u6216\u8005\u5bf9\u4e8e\u5728\u4e16\u754c\u4e2d\u79fb\u52a8\u7684\u5149\u6e90\uff0c\u662f\u7ec4\u5408\u7684\u89c2\u5bdf\u548c\u5efa\u6a21\u53d8\u6362\u3002</p> <p>\u8bb0\u4f4f\uff0c\u5149\u6e90\u4f4d\u7f6e\u548c\u5176\u4ed6\u5149\u6e90\u5c5e\u6027\u4e00\u6837\uff0c\u5fc5\u987b\u5728\u6e32\u67d3\u4efb\u4f55\u8981\u88ab\u5149\u6e90\u7167\u4eae\u7684\u51e0\u4f55\u4f53\u4e4b\u524d\u8bbe\u7f6e\u3002</p> <p>In our examples so far, lights have been fixed with respect to the viewer. But some lights, such as the headlights on a car, should move along with an object. And some, such as a street light, should stay in the same position in the world, but change position in the rendered scene as the point of view changes.</p> <p>Lighting calculations are done in eye coordinates. When the position of a light is given in object coordinates or in world coordinates, the position must be transformed to eye coordinates, by applying the appropriate modelview transformation. The transformation can't be done in the shader program, because the modelview matrix in the shader program represents the transformation for the object that is being rendered, and that is almost never the same as the transformation for the light. The solution is to store the light position in eye coordinates. That is, the shader's uniform variable that represents the position of the light must be set to the position in eye coordinates.</p> <p>For a light that is fixed with respect to the viewer, the position of the light is already expressed in eye coordinates. For example, the position of a point light that is used as a viewpoint light is (0,0,0), which is the location of the viewer in eye coordinates. For such a light, the appropriate modelview transformation is the identity.</p> <p>For a light that is at a fixed position in world coordinates, the appropriate modelview transformation is the viewing transformation. The viewing transformation must be applied to the world-coordinate light position to transform it to eye coordinates. In WebGL, the transformation should be applied on the JavaScript side, and the output of the transformation should be sent to the uniform variable in the shader program that represents the light position in eye coordinates. Similarly, for a light that moves around in the world, the combined modeling and viewing transform should be applied to the light position on the JavaScript side. The glMatrix library (Subsection 7.1.2) defines the function</p> <pre><code>vec4.transformMat4( transformedVector, originalVector, matrix );\n</code></pre> <p>which can be used to do the transformation. The matrix in the function call will be the modelview transformation matrix. Recall, by the way, that light position is given as a vec4, using homogeneous coordinates. (See Subsection 4.2.3.) Multiplication by the modelview matrix will work for any light, whether directional or point, whose position is represented in this way. Here is a JavaScript function that can be used to set the position:</p> <pre><code>/* Set the position of a light, in eye coordinates.\n* @param u_position_loc The uniform variable location for \n*                       the position property of the light.\n* @param modelview The modelview matrix that transforms light \n*                  position to eye coordinates.\n* @param lightPosition The location of the light, in object \n*                      coordinates (a vec4).\n*/\nfunction setLightPosition( u_position_loc, modelview, lightPosition ) {\n    let transformedPosition = new Float32Array(4);\n    vec4.transformMat4( transformedPosition, lightPosition, modelview );\n    gl.uniform4fv( u_position_loc, transformedPosition );\n}\n</code></pre> <p>The appropriate modelview matrix is the identity, for a light fixed with respect to the viewer; just the viewing transformation, for a light that has a fixed position in the world; or a combined viewing and modeling transformation, for a light that moves around in the world.</p> <p>Remember that the light position, like other light properties, must be set before rendering any geometry that is to be illuminated by the light.</p>"},{"location":"cn/c7/s2/#726-\u805a\u5149\u706f","title":"7.2.6 \u805a\u5149\u706f","text":"<p>Spotlights</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5728 three.js \u4e2d\u7684 5.1.5\u5c0f\u8282 \u9047\u5230\u4e86\u805a\u5149\u706f\u3002\u5b9e\u9645\u4e0a\uff0c\u5c3d\u7ba1\u6211\u6ca1\u6709\u63d0\u5230\uff0c\u805a\u5149\u706f\u5728 OpenGL 1.1 \u4e2d\u5df2\u7ecf\u5b58\u5728\u3002\u4e0e\u56db\u9762\u516b\u65b9\u53d1\u5c04\u5149\u7ebf\u4e0d\u540c\uff0c\u805a\u5149\u706f\u53ea\u53d1\u5c04\u4e00\u4e2a\u5149\u9525\u3002\u805a\u5149\u706f\u662f\u4e00\u79cd\u70b9\u5149\u6e90\u3002\u5149\u9525\u7684\u9876\u70b9\u4f4d\u4e8e\u5149\u6e90\u7684\u4f4d\u7f6e\u3002\u5149\u9525\u6307\u5411\u67d0\u4e2a\u65b9\u5411\uff0c\u79f0\u4e3a \u805a\u5149\u65b9\u5411\u3002\u805a\u5149\u65b9\u5411\u88ab\u6307\u5b9a\u4e3a\u4e00\u4e2a\u5411\u91cf\u3002\u5149\u9525\u7684\u5927\u5c0f\u7531\u4e00\u4e2a\u622a\u6b62\u89d2\u6307\u5b9a\uff1b\u53ea\u6709\u4e0e\u805a\u5149\u65b9\u5411\u7684\u89d2\u5ea6\u5c0f\u4e8e\u622a\u6b62\u89d2\u7684\u65b9\u5411\u624d\u4f1a\u53d1\u5c04\u5149\u7ebf\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e\u5c0f\u4e8e\u622a\u6b62\u89d2\u7684\u89d2\u5ea6\uff0c\u968f\u7740\u5149\u7ebf\u4e0e\u805a\u5149\u65b9\u5411\u4e4b\u95f4\u89d2\u5ea6\u7684\u589e\u52a0\uff0c\u5149\u7ebf\u7684\u5f3a\u5ea6\u53ef\u4ee5\u51cf\u5c0f\u3002\u5f3a\u5ea6\u51cf\u5c0f\u7684\u901f\u7387\u7531\u4e00\u4e2a\u975e\u8d1f\u6570\u51b3\u5b9a\uff0c\u79f0\u4e3a \u805a\u5149\u6307\u6570\u3002\u5149\u7ebf\u7684\u5f3a\u5ea6\u7531 I*c^s \u7ed9\u51fa\uff0c\u5176\u4e2d I \u662f\u5149\u7684\u57fa\u672c\u5f3a\u5ea6\uff0cc \u662f\u5149\u7ebf\u4e0e\u805a\u5149\u65b9\u5411\u4e4b\u95f4\u89d2\u5ea6\u7684\u4f59\u5f26\u503c\uff0cs \u662f\u805a\u5149\u6307\u6570\u3002</p> <p>\u8fd9\u5f20\u56fe\u793a\u663e\u793a\u4e86\u4e09\u4e2a\u805a\u5149\u706f\u7167\u5c04\u5728\u8868\u9762\u4e0a\uff1b\u56fe\u50cf\u53d6\u81ea\u793a\u4f8b\u7a0b\u5e8f webgl/spotlights.html\uff1a</p> <p></p> <p>\u4e09\u4e2a\u805a\u5149\u706f\u7684\u622a\u6b62\u89d2\u4e3a30\u5ea6\u3002\u5728\u5de6\u4fa7\u7684\u56fe\u50cf\u4e2d\uff0c\u805a\u5149\u6307\u6570\u4e3a\u96f6\uff0c\u8fd9\u610f\u5473\u7740\u968f\u7740\u4e0e\u805a\u5149\u65b9\u5411\u89d2\u5ea6\u7684\u589e\u52a0\uff0c\u5f3a\u5ea6\u6ca1\u6709\u8870\u51cf\u3002\u4e2d\u95f4\u7684\u56fe\u50cf\u805a\u5149\u6307\u6570\u4e3a10\uff0c\u53f3\u4fa7\u7684\u56fe\u50cf\u4e3a20\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5c06\u5149\u7167\u65b9\u7a0b\u5e94\u7528\u4e8e\u805a\u5149\u706f\u3002\u8003\u8651\u8868\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9 P\u3002\u5149\u7167\u65b9\u7a0b\u4f7f\u7528\u4e00\u4e2a\u5355\u4f4d\u5411\u91cf\uff0cL\uff0c\u4ece P \u6307\u5411\u5149\u6e90\u3002\u5bf9\u4e8e\u805a\u5149\u706f\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4ece\u5149\u6e90\u6307\u5411 P \u7684\u5411\u91cf\uff1b\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u2212L\u3002\u8003\u8651 \u2212L \u4e0e\u805a\u5149\u65b9\u5411\u4e4b\u95f4\u7684\u89d2\u5ea6\u3002\u5982\u679c\u8be5\u89d2\u5ea6\u5927\u4e8e\u622a\u6b62\u89d2\uff0c\u5219 P \u4ece\u805a\u5149\u706f\u90a3\u91cc\u5f97\u4e0d\u5230\u4efb\u4f55\u7167\u660e\u3002\u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 \u2212L \u4e0e\u805a\u5149\u65b9\u5411\u4e4b\u95f4\u89d2\u5ea6\u7684\u4f59\u5f26\u4f5c\u4e3a\u70b9\u79ef \u2212D\u00b7L \u6765\u8ba1\u7b97\uff0c\u5176\u4e2d D \u662f\u6307\u5411\u805a\u5149\u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\u3002</p> <p></p> <p>\u8981\u5728 GLSL \u4e2d\u5b9e\u73b0\u805a\u5149\u706f\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0 uniform \u53d8\u91cf\u6765\u8868\u793a\u805a\u5149\u65b9\u5411\u3001\u622a\u6b62\u89d2\u548c\u805a\u5149\u6307\u6570\u3002\u6211\u7684\u5b9e\u73b0\u5b9e\u9645\u4e0a\u4f7f\u7528\u622a\u6b62\u89d2\u7684\u4f59\u5f26\u800c\u4e0d\u662f\u89d2\u5ea6\u672c\u8eab\uff0c\u56e0\u4e3a\u6211\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\u70b9\u79ef \u2212D\u00b7L \u6765\u6bd4\u8f83\u622a\u6b62\u503c\uff0c\u5b83\u4ee3\u8868\u4e86\u5149\u7ebf\u4e0e\u805a\u5149\u65b9\u5411\u4e4b\u95f4\u89d2\u5ea6\u7684\u4f59\u5f26\u3002LightProperties \u7ed3\u6784\u53d8\u4e3a\uff1a</p> <pre><code>struct LightProperties {\n    bool enabled;\n    vec4 position;\n    vec3 color;\n    vec3 spotDirection;  \n    float spotCosineCutoff; \n    float spotExponent;\n};\n</code></pre> <p>\u5982\u679c position.z \u4e3a\u96f6\uff0c\u5219\u5149\u662f\u65b9\u5411\u5149\uff0c\u4e0d\u80fd\u662f\u805a\u5149\u706f\u3002\u5bf9\u4e8e\u70b9\u5149\u6e90\uff0c\u5982\u679c spotCosineCutoff \u5c0f\u4e8e\u6216\u7b49\u4e8e\u96f6\uff0c\u5219\u5149\u662f\u5e38\u89c4\u70b9\u5149\u6e90\uff0c\u4e0d\u662f\u805a\u5149\u706f\u3002\u5bf9\u4e8e\u805a\u5149\u706f\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u5728\u8868\u9762\u4e0a\u4e00\u4e2a\u70b9\u7684\u805a\u5149\u706f\u7684\u6709\u6548\u5149\u5f3a\u5ea6\u7684 c^e \u56e0\u5b50\u3002\u4ee5\u4e0b\u662f\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8f\u7247\u6bb5\u7740\u8272\u5668\u7684\u8ba1\u7b97\u4ee3\u7801\u3002\u5bf9\u4e8e\u805a\u5149\u706f\uff0cc^e \u7684\u503c\u88ab\u8d4b\u7ed9 spotFactor\uff1a</p> <pre><code>float spotFactor = 1.0;  // \u7528\u4e8e\u8003\u8651\u805a\u5149\u706f\u7684\u4e58\u6570\nif ( light.position.w == 0.0 ) {\n    L = normalize( light.position.xyz );\n}\nelse {\n    L = normalize( light.position.xyz/light.position.w - v_eyeCoords );\n    if (light.spotCosineCutoff &gt; 0.0) { // \u5149\u662f\u805a\u5149\u706f\n        vec3 D = -normalize(light.spotDirection);\n        float spotCosine = dot(D,L);\n        if (spotCosine &gt;= light.spotCosineCutoff) { \n            spotFactor = pow(spotCosine,light.spotExponent);\n        }\n        else { // \u8be5\u70b9\u5728\u805a\u5149\u706f\u7684\u5149\u9525\u4e4b\u5916\n            spotFactor = 0.0; // \u5149\u5c06\u4e0d\u4f1a\u7ed9\u8be5\u70b9\u6dfb\u52a0\u4efb\u4f55\u989c\u8272\n        }\n    }\n}\n// \u5149\u5f3a\u5ea6\u5c06\u4e58\u4ee5 spotFactor\n</code></pre> <p>\u4f60\u5e94\u8be5\u5c1d\u8bd5 \u793a\u4f8b\u7a0b\u5e8f\uff0c\u5e76\u9605\u8bfb\u6e90\u4ee3\u7801\u3002\u6216\u8005\u5c1d\u8bd5\u8fd9\u4e2a\u6f14\u793a\uff0c\u5b83\u4e0e\u793a\u4f8b\u7a0b\u5e8f\u7c7b\u4f3c\uff0c\u4f46\u589e\u52a0\u4e86\u4f7f\u805a\u5149\u706f\u52a8\u753b\u5316\u7684\u9009\u9879\uff1a</p> <p></p> <p><code>spotDirection</code> \u8fd9\u4e2a uniform \u53d8\u91cf\u7ed9\u51fa\u4e86\u805a\u5149\u706f\u5728\u773c\u775b\u5750\u6807\u4e2d\u7684\u65b9\u5411\u3002\u5bf9\u4e8e\u79fb\u52a8\u7684\u805a\u5149\u706f\uff0c\u9664\u4e86\u53d8\u6362\u4f4d\u7f6e\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u5fc5\u987b\u8003\u8651\u53d8\u6362\u805a\u5149\u706f\u9762\u5bf9\u7684\u65b9\u5411\u3002\u805a\u5149\u65b9\u5411\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u5b83\u7684\u53d8\u6362\u65b9\u5f0f\u4e0e\u6cd5\u7ebf\u5411\u91cf\u76f8\u540c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7528\u4e8e\u53d8\u6362\u6cd5\u7ebf\u5411\u91cf\u7684\u76f8\u540c\u7684\u6cd5\u7ebf\u53d8\u6362\u77e9\u9635\u4e5f\u7528\u4e8e\u53d8\u6362\u805a\u5149\u65b9\u5411\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a JavaScript \u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u5c06\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u5e94\u7528\u4e8e\u805a\u5149\u65b9\u5411\u5411\u91cf\uff0c\u5e76\u5c06\u8f93\u51fa\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\uff1a</p> <pre><code>/* \u8bbe\u7f6e\u805a\u5149\u706f\u7684\u65b9\u5411\u5411\u91cf\uff0c\u4ee5\u773c\u775b\u5750\u6807\u8868\u793a\u3002\n* @param modelview \u6267\u884c\u5bf9\u8c61\u5230\u773c\u775b\u5750\u6807\u53d8\u6362\u7684\u77e9\u9635\n* @param u_direction_loc \u805a\u5149\u65b9\u5411\u7684 uniform \u53d8\u91cf\u4f4d\u7f6e\n* @param lightDirection \u805a\u5149\u706f\u5728\u5bf9\u8c61\u5750\u6807\u4e2d\u7684\u65b9\u5411\uff08\u4e00\u4e2a vec3\uff09\n*/\nfunction setSpotlightDirection(u_direction_loc, modelview, lightDirection) {\n    let normalMatrix = mat3.create();\n    mat3.normalFromMat4(normalMatrix, modelview);\n    let transformedDirection = new Float32Array(3);\n    vec3.transformMat3(transformedDirection, lightDirection, normalMatrix);\n    gl.uniform3fv(u_direction_loc, transformedDirection);\n}\n</code></pre> <p>\u5f53\u7136\uff0c\u805a\u5149\u706f\u7684\u4f4d\u7f6e\u4e5f\u5fc5\u987b\u50cf\u4efb\u4f55\u79fb\u52a8\u7684\u5149\u6e90\u4e00\u6837\u8fdb\u884c\u53d8\u6362\u3002</p> <p>We encountered spotlights in three.js in Subsection 5.1.5. In fact, although I didn't mention it, spotlights already existed in OpenGL 1.1. Instead of emitting light in all directions, a spotlight emits only a cone of light. A spotlight is a kind of point light. The vertex of the cone is located at the position of the light. The cone points in some direction, called the spot direction. The spot direction is specified as a vector. The size of the cone is specified by a cutoff angle; light is only emitted from the light position in directions whose angle with the spot direction is less than the cutoff angle. Furthermore, for angles less than the cutoff angle, the intensity of the light ray can decrease as the angle between the ray and spot direction increases. The rate at which the intensity decreases is determined by a non-negative number called the spot exponent. The intensity of the ray is given by I*c<sup>s</sup> where I is the basic intensity of the light, c is the cosine of the angle between the ray and the spot direction, and s is the spot exponent.</p> <p>This illustration shows three spotlights shining on a surface; the images are taken from the sample program webgl/spotlights.html:</p> <p></p> <p>The cutoff angle for the three spotlights is 30 degrees. In the image on the left, the spot exponent is zero, which means there is no falloff in intensity with increasing angle from the spot direction. For the middle image, the spot exponent is 10, and for the image on the right, it is 20.</p> <p>Suppose that we want to apply the lighting equation to a spotlight. Consider a point P on a surface. The lighting equation uses a unit vector, L, that points from P towards the light source. For a spotlight, we need a vector that points from the light source towards P; for that we can use \u2212L. Consider the angle between \u2212L and the spot direction. If that angle is greater than the cutoff angle, then P gets no illumination from the spotlight. Otherwise, we can compute the cosine of the angle between \u2212L and the spot direction as the dot product \u2212D\u00b7L, where D is a unit vector that points in the spot direction.</p> <p></p> <p>To implement spotlights in GLSL, we can add uniform variables to represent the spot direction, cutoff angle, and spot exponent. My implementation actually uses the cosine of the cutoff angle instead of the angle itself, since I can then compare the cutoff value using the dot product, \u2212D\u00b7L, that represents the cosine of the angle between the light ray and the spot direction. The LightProperties struct becomes:</p> <pre><code>struct LightProperties {\n    bool enabled;\n    vec4 position;\n    vec3 color;\n    vec3 spotDirection;  \n    float spotCosineCutoff; \n    float spotExponent;\n};\n</code></pre> <p>If position.z is zero, then the light is directional and cannot be a spotlight. For a point light, if spotCosineCutoff is less than or equal to zero, then the light is a regular point light, not a spotlight. For a spotlight, we need to compute the factor c<sup>e</sup> that is multiplied by the basic light color to give the effective light intensity of the spotlight at a point on a surface. The following code for the computation is from the fragment shader in the sample program. For a spotlight, the value of c<sup>e</sup> is assigned to spotFactor:</p> <pre><code>float spotFactor = 1.0;  // multiplier to account for spotlight\nif ( light.position.w == 0.0 ) {\n    L = normalize( light.position.xyz );\n}\nelse {\n    L = normalize( light.position.xyz/light.position.w - v_eyeCoords );\n    if (light.spotCosineCutoff &gt; 0.0) { // the light is a spotlight\n        vec3 D = -normalize(light.spotDirection);\n        float spotCosine = dot(D,L);\n        if (spotCosine &gt;= light.spotCosineCutoff) { \n            spotFactor = pow(spotCosine,light.spotExponent);\n        }\n        else { // The point is outside the cone of light from the spotlight.\n            spotFactor = 0.0; // The light will add no color to the point.\n        }\n    }\n}\n// Light intensity will be multiplied by spotFactor\n</code></pre> <p>You should try the sample program, and read the source code. Or try this demo, which is similar to the sample program, but with an added option to animate the spotlights:</p> <p></p> <p>The spotDirection uniform variable gives the direction of the spotlight in eye coordinates. For a moving spotlight, in addition to transforming the position, we also have to worry about transforming the direction in which the spotlight is facing. The spot direction is a vector, and it transforms in the same way as normal vectors. That is, the same normal transformation matrix that is used to transform normal vectors is also used to transform the spot direction. Here is a JavaScript function that can be used to apply a modelview transformation to a spot direction vector and send the output to the shader program:</p> <pre><code>/* Set the direction vector of a light, in eye coordinates.\n* @param modelview the matrix that does object-to-eye coordinate transforms\n* @param u_direction_loc the uniform variable location for the spotDirection\n* @param lightDirection the spot direction in object coordinates (a vec3)\n*/\nfunction setSpotlightDirection( u_direction_loc, modelview, lightDirection ) {\n    let normalMatrix = mat3.create();\n    mat3.normalFromMat4( normalMatrix,modelview );\n    let transformedDirection = new Float32Array(3);\n    vec3.transformMat3( transformedDirection, lightDirection, normalMatrix );\n    gl.uniform3fv( u_direction_loc, transformedDirection );\n}\n</code></pre> <p>Of course, the position of the spotlight also has to be transformed, as for any moving light.</p>"},{"location":"cn/c7/s2/#727-\u5149\u8870\u51cf","title":"7.2.7 \u5149\u8870\u51cf","text":"<p>Light Attenuation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u7ebf\u8fd8\u6709\u4e00\u4e2a\u8981\u8003\u8651\u7684\u4e00\u822c\u5c5e\u6027\uff1a\u8870\u51cf\u3002\u8fd9\u6307\u7684\u662f\u968f\u7740\u8ddd\u79bb\u5149\u6e90\u7684\u589e\u52a0\uff0c\u5149\u6e90\u7684\u7167\u660e\u91cf\u5e94\u8be5\u51cf\u5c11\u3002\u8870\u51cf\u53ea\u9002\u7528\u4e8e\u70b9\u5149\u6e90\uff0c\u56e0\u4e3a\u65b9\u5411\u5149\u5b9e\u9645\u4e0a\u5728\u65e0\u9650\u8fdc\u7684\u5730\u65b9\u3002\u6839\u636e\u7269\u7406\u5b66\uff0c\u6b63\u786e\u7684\u884c\u4e3a\u662f\u7167\u660e\u91cf\u4e0e\u8ddd\u79bb\u7684\u5e73\u65b9\u6210\u53cd\u6bd4\u3002\u7136\u800c\uff0c\u8fd9\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u901a\u5e38\u4e0d\u4f1a\u5f97\u5230\u597d\u7684\u7ed3\u679c\u3002\u5b9e\u9645\u4e0a\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u6240\u6709\u7684\u5149\u6e90\u90fd\u6ca1\u6709\u968f\u8ddd\u79bb\u800c\u8870\u51cf\u3002</p> <p>OpenGL 1.1 \u652f\u6301\u8870\u51cf\u3002\u5149\u5f3a\u5ea6\u53ef\u4ee5\u4e58\u4ee5 1.0 / (a+bd+cd^2)\uff0c\u5176\u4e2d d \u662f\u5230\u5149\u6e90\u7684\u8ddd\u79bb\uff0ca\u3001b \u548c c \u662f\u5149\u7684\u5c5e\u6027\u3002\u6570\u5b57 a\u3001b \u548c c \u5206\u522b\u79f0\u4e3a\u5149\u6e90\u7684\u201c\u5e38\u6570\u8870\u51cf\u201d\u3001\u201c\u7ebf\u6027\u8870\u51cf\u201d\u548c\u201c\u4e8c\u6b21\u8870\u51cf\u201d\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ca \u662f 1\uff0cb \u548c c \u662f 0\uff0c\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u8870\u51cf\u3002</p> <p>\u5f53\u7136\uff0c\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5fc5\u8981\u5b9e\u73b0\u5b8c\u5168\u76f8\u540c\u7684\u6a21\u578b\u3002\u4f8b\u5982\uff0c\u5f88\u5c11\u4f7f\u7528\u4e8c\u6b21\u8870\u51cf\u3002\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4f7f\u7528\u516c\u5f0f 1 / (1+ad)* \u4f5c\u4e3a\u8870\u51cf\u56e0\u5b50\u3002\u8870\u51cf\u5e38\u6570 a \u88ab\u6dfb\u52a0\u4e3a\u5149\u6e90\u7684\u53e6\u4e00\u4e2a\u5c5e\u6027\u3002\u503c\u4e3a\u96f6\u610f\u5473\u7740\u6ca1\u6709\u8870\u51cf\u3002\u5728\u5149\u7167\u8ba1\u7b97\u4e2d\uff0c\u5149\u6e90\u5bf9\u5149\u7167\u65b9\u7a0b\u7684\u8d21\u732e\u4f1a\u4e58\u4ee5\u5149\u7684\u8870\u51cf\u56e0\u5b50\u3002</p> <p>There is one more general property of light to consider: attenuation. This refers to the fact that the amount of illumination from a light source should decrease with increasing distance from the light. Attenuation applies only to point lights, since directional lights are effectively at infinite distance. The correct behavior, according to physics, is that the illumination is proportional to one over the square of the distance. However, that doesn't usually give good results in computer graphics. In fact, for all of my light sources so far, there has been no attenuation with distance.</p> <p>OpenGL 1.1 supports attenuation. The light intensity can be multiplied by 1.0 / (a+b*d+c*d2), where d is the distance to the light source, and a, b, and c are properties of the light. The numbers a, b, and c are called the \"constant attenuation,\" \"linear attenuation,\" and \"quadratic attenuation\" of the light source. By default, a is one, and b and c are zero, which means that there is no attenuation.</p> <p>Of course, there is no need to implement exactly the same model in your own applications. For example, quadratic attenuation is rarely used. In the next sample program, I use the formula 1 / (1+a*d) for the attenuation factor. The attenuation constant a is added as another property of light sources. A value of zero means no attenuation. In the lighting computation, the contribution of a light source to the lighting equation is multiplied by the attenuation factor for the light.</p>"},{"location":"cn/c7/s2/#728-\u78c1\u76d8\u4e16\u754c2","title":"7.2.8 \u78c1\u76d8\u4e16\u754c2","text":"<p>Diskworld 2</p> \u4e2d\u6587\u82f1\u6587 <p>\u793a\u4f8b\u7a0b\u5e8f webgl/diskworld-2.html \u662f\u6211\u4eec\u5728 WebGL \u4e2d\u5173\u4e8e\u5149\u7167\u7684\u6700\u7ec8\u3001\u66f4\u590d\u6742\u7684\u4f8b\u5b50\u3002\u57fa\u672c\u573a\u666f\u4e0e Subsection 5.1.6 \u4e2d\u7684 three.js \u793a\u4f8b threejs/diskworld-1.html \u76f8\u540c\uff0c\u4f46\u6211\u589e\u52a0\u4e86\u51e0\u79cd\u5149\u7167\u6548\u679c\u3002</p> <p>\u573a\u666f\u663e\u793a\u4e86\u4e00\u8f86\u7ea2\u8272\u7684\u201c\u8f66\u201d\u5728\u201c\u4e16\u754c\u201d\u7684\u8fb9\u7f18\uff0c\u8fd9\u4e2a\u4e16\u754c\u662f\u5706\u76d8\u5f62\u7684\u3002\u5728\u65b0\u7248\u672c\u4e2d\uff0c\u6709\u4e00\u4e2a\u56f4\u7ed5\u4e16\u754c\u65cb\u8f6c\u7684\u201c\u592a\u9633\u201d\u3002\u5728\u591c\u665a\uff0c\u5f53\u592a\u9633\u5728\u5706\u76d8\u4e0b\u9762\u65f6\uff0c\u592a\u9633\u88ab\u5173\u95ed\u4e86\uff08\u56e0\u4e3a\u6ca1\u6709\u9634\u5f71\uff0c\u5982\u679c\u591c\u665a\u592a\u9633\u8fd8\u4eae\u7740\uff0c\u5b83\u4f1a\u4ece\u5706\u76d8\u4e0b\u7167\u5c04\u4e0a\u6765\uff0c\u4ece\u4e0b\u9762\u7167\u4eae\u7269\u4f53\uff09\u3002\u5230\u4e86\u591c\u665a\uff0c\u6c7d\u8f66\u7684\u524d\u706f\u4f1a\u6253\u5f00\u3002\u5b83\u4eec\u88ab\u5b9e\u73b0\u4e3a\u805a\u5149\u706f\uff0c\u968f\u7740\u6c7d\u8f66\u4e00\u8d77\u79fb\u52a8\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u53d7\u5230\u4e0e\u6c7d\u8f66\u76f8\u540c\u7684\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u7684\u5f71\u54cd\u3002\u5230\u4e86\u591c\u665a\uff0c\u4e16\u754c\u4e2d\u5fc3\u7684\u4e00\u76cf\u706f\u4e5f\u4f1a\u6253\u5f00\u3002\u8fd9\u76cf\u706f\u4f7f\u7528\u4e86\u5149\u8870\u51cf\uff0c\u6240\u4ee5\u9664\u4e86\u9760\u8fd1\u706f\u7684\u7269\u4f53\u5916\uff0c\u5b83\u7684\u7167\u660e\u5f88\u5f31\u3002\u6700\u540e\uff0c\u8fd8\u6709\u4e00\u79cd\u5fae\u5f31\u7684\u89c6\u70b9\u5149\u603b\u662f\u4eae\u7740\uff0c\u4ee5\u786e\u4fdd\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u5904\u4e8e\u7edd\u5bf9\u9ed1\u6697\u4e2d\u3002\u4e0b\u9762\u662f\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u591c\u666f\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u524d\u706f\u5982\u4f55\u7167\u4eae\u9053\u8def\u548c\u6811\u6728\uff0c\u4f60\u53ef\u80fd\u4e5f\u80fd\u770b\u5230\u9760\u8fd1\u706f\u7684\u5730\u65b9\u706f\u7684\u7167\u660e\u66f4\u5f3a\uff1a</p> <p></p> <p>\u4f46\u4f60\u5e94\u8be5\u8fd0\u884c\u7a0b\u5e8f\u6765\u4eb2\u773c\u770b\u770b\uff01\u5e76\u9605\u8bfb\u6e90\u4ee3\u7801\u6765\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002</p> <p>\u6211\u7684 diskworld \u793a\u4f8b\u4f7f\u7528\u4e86\u9010\u50cf\u7d20\u5149\u7167\uff0c\u8fd9\u6bd4\u9010\u9876\u70b9\u5149\u7167\u5f97\u5230\u4e86\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u805a\u5149\u706f\u3002\u7136\u800c\uff0c\u6709\u4e86\u591a\u4e2a\u5149\u6e90\u3001\u805a\u5149\u706f\u548c\u8870\u51cf\uff0c\u9010\u50cf\u7d20\u5149\u7167\u9700\u8981\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u5927\u91cf\u7684 uniform \u53d8\u91cf\u2014\u2014\u53ef\u80fd\u8d85\u8fc7\u4e86\u4e00\u4e9b\u5b9e\u73b0\u6240\u652f\u6301\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u6559\u79d1\u4e66\u4e2d\u7684\u793a\u4f8b\u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u4e25\u91cd\uff0c\u4e5f\u4e0d\u5927\u53ef\u80fd\u5728\u73b0\u4ee3 GPU \u4e0a\u51fa\u73b0\uff1b\u8fd9\u53ea\u662f\u610f\u5473\u7740\u8fd9\u4e2a\u793a\u4f8b\u6709\u53ef\u80fd\u5728\u67d0\u4e9b\u8bbe\u5907\u4e0a\u7684\u67d0\u4e9b\u6d4f\u89c8\u5668\u4e2d\u65e0\u6cd5\u5de5\u4f5c\u3002\u4f46\u5bf9\u4e8e\u66f4\u4e25\u8083\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u66f4\u590d\u6742\u7684\u5149\u7167\uff0c\u4eba\u4eec\u4f1a\u5e0c\u671b\u6709\u66ff\u4ee3\u7684\u65b9\u6cd5\uff0c\u5e0c\u671b\u6bd4\u7b80\u5355\u5730\u5c06\u8ba1\u7b97\u79fb\u52a8\u5230\u9876\u70b9\u7740\u8272\u5668\u66f4\u597d\u3002\u4e00\u4e2a\u9009\u62e9\u662f\u4f7f\u7528\u591a\u904d\u7b97\u6cd5\uff0c\u5176\u4e2d\u573a\u666f\u88ab\u6e32\u67d3\u591a\u6b21\uff0c\u6bcf\u6b21\u901a\u8fc7\u90fd\u4e3a\u8f83\u5c11\u6570\u91cf\u7684\u5149\u6e90\u8fdb\u884c\u5149\u7167\u8ba1\u7b97\u3002\u53c2\u89c1 7.5.4\u5c0f\u8282\uff0c\u4e86\u89e3\u4e00\u79cd\u53ef\u4ee5\u9ad8\u6548\u5b9e\u73b0\u8fd9\u4e2a\u60f3\u6cd5\u7684\u6280\u672f\u3002</p> <p>The sample program webgl/diskworld-2.html is our final, more complex, example of lighting in WebGL. The basic scene is the same as the three.js example threejs/diskworld-1.html from Subsection 5.1.6, but I have added several lighting effects.</p> <p>The scene shows a red \"car\" traveling around the edge of a disk-shaped \"world.\" In the new version, there is a sun that rotates around the world. The sun is turned off at night, when the sun is below the disk. (Since there are no shadows, if the sun were left on at night, it would shine up through the disk and illuminate objects from below.) At night, the headlights of the car turn on. They are implemented as spotlights that travel along with the car; that is, they are subject to the same modelview transformation that is used on the car. Also at night, a lamp in the center of the world is turned on. Light attenuation is used for the lamp, so that its illumination is weak except for objects that are close to the lamp. Finally, there is dim viewpoint light that is always on, to make sure that nothing is ever in absolute darkness. Here is a night scene from the program, in which you can see how the headlights illuminate the road and the trees, and you can probably see that the illumination from the lamp is stronger closer to the lamp:</p> <p></p> <p>But you should run the program to see it in action! And read the source code to see how it's done.</p> <p>My diskworld example uses per-pixel lighting, which gives much better results than per-vertex lighting, especially for spotlights. However, with multiple lights, spotlights, and attenuation, per-pixel lighting requires a lot of uniform variables in the fragment shader \u2014 possibly more than are supported in some implementations. (See Subsection 6.3.7 for information about limitations in shader programs.) That's not really serious for a sample program in a textbook and not really likely on modern GPUs; it just means that there is some possibility that the example won't work in some browsers on some devices. But for more serious applications, using even more complex lighting, an alternative approach would be desirable, hopefully better than simply moving the calculation to the vertex shader. One option is to use a multi-pass algorithm in which the scene is rendered several times, with each pass doing the lighting calculation for a smaller number of lights. See Subsection 7.5.4 for a technique that can be used to implement this idea efficiently.</p>"},{"location":"cn/c7/s3/","title":"7.3 \u7eb9\u7406","text":"<p>Textures</p> \u4e2d\u6587\u82f1\u6587 <p>WebGL API \u4e2d\u5927\u90e8\u5206\u4e0e\u7eb9\u7406\u76f8\u5173\u7684\u529f\u80fd\u5728 \u7b2c6.4\u8282 \u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u4e86\u3002\u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u770b\u4e00\u4e9b\u4f7f\u7528\u7eb9\u7406\u7684\u793a\u4f8b\u548c\u6280\u672f\u3002</p> <p>Most of the WebGL API for working with textures was already covered in Section 6.4. In this section, we look at several examples and techniques for using textures.</p>"},{"location":"cn/c7/s3/#731-\u4f7f\u7528-glmatrix-\u8fdb\u884c\u7eb9\u7406\u53d8\u6362","title":"7.3.1 \u4f7f\u7528 glMatrix \u8fdb\u884c\u7eb9\u7406\u53d8\u6362","text":"<p>Texture Transforms with glMatrix</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 4.3.4\u5c0f\u8282 \u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5982\u4f55\u5728 OpenGL \u4e2d\u5e94\u7528\u7eb9\u7406\u53d8\u6362\u3002OpenGL \u7ef4\u62a4\u4e86\u4e00\u4e2a\u7eb9\u7406\u53d8\u6362\u77e9\u9635\uff0c\u53ef\u4ee5\u64cd\u7eb5\u5b83\u6765\u5728\u91c7\u6837\u7eb9\u7406\u4e4b\u524d\u5bf9\u7eb9\u7406\u5750\u6807\u8fdb\u884c\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u3002\u5728 WebGL \u4e2d\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u7f16\u7a0b\u8fd9\u4e9b\u64cd\u4f5c\u4e5f\u5f88\u5bb9\u6613\u3002\u6211\u4eec\u9700\u8981\u5728 JavaScript \u7aef\u8ba1\u7b97\u7eb9\u7406\u53d8\u6362\u77e9\u9635\u3002\u7136\u540e\uff0c\u5c06\u53d8\u6362\u77e9\u9635\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684 uniform \u77e9\u9635\u53d8\u91cf\uff0c\u5728\u90a3\u91cc\u5b83\u53ef\u4ee5\u88ab\u5e94\u7528\u5230\u7eb9\u7406\u5750\u6807\u4e0a\u3002\u8bf7\u6ce8\u610f\uff0c\u53ea\u8981\u7eb9\u7406\u53d8\u6362\u662f\u4eff\u5c04\u7684\uff0c\u5b83\u5c31\u53ef\u4ee5\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u5e94\u7528\uff0c\u5373\u4f7f\u7eb9\u7406\u662f\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u91c7\u6837\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u8fdb\u884c\u53d8\u6362\u5e76\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u63d2\u503c\u53d8\u6362\u540e\u7684\u7eb9\u7406\u5750\u6807\uff0c\u5c06\u5f97\u5230\u4e0e\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u63d2\u503c\u539f\u59cb\u7eb9\u7406\u5750\u6807\u5e76\u5e94\u7528\u53d8\u6362\u5230\u63d2\u503c\u5750\u6807\u76f8\u540c\u7684\u7ed3\u679c\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u4f7f\u7528 glMatrix \u8fdb\u884c 3D \u4e2d\u7684\u5750\u6807\u53d8\u6362\uff0c\u4f7f\u7528\u5b83\u8fdb\u884c\u7eb9\u7406\u53d8\u6362\u4e5f\u662f\u6709\u610f\u4e49\u7684\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528 2D \u7eb9\u7406\u5750\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 glMatrix \u4e2d\u7684 mat3 \u7c7b\u5728 JavaScript \u7aef\u5b9e\u73b0\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u3002\u6211\u4eec\u9700\u8981\u7684\u51fd\u6570\u6709\uff1a</p> <ul> <li><code>mat3.create()</code> \u2014 \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 3x3 \u77e9\u9635\uff08\u8868\u793a\u4e3a\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4\uff09\u3002\u65b0\u77e9\u9635\u662f\u5355\u4f4d\u77e9\u9635\u3002</li> <li><code>mat3.identity(A)</code> \u2014 \u5c06 A \u8bbe\u7f6e\u4e3a\u5355\u4f4d\u77e9\u9635\uff0c\u5176\u4e2d A \u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 mat3\u3002</li> <li><code>mat3.translate(A,B,[dx,dy])</code> \u2014 \u5c06\u77e9\u9635 B \u4e58\u4ee5\u8868\u793a (dx,dy) \u5e73\u79fb\u7684\u77e9\u9635\uff0c\u5e76\u5c06\u7ed3\u679c\u77e9\u9635\u8bbe\u7f6e\u4e3a A\u3002A \u548c B \u5fc5\u987b\u5df2\u7ecf\u5b58\u5728\u3002</li> <li><code>mat3.scale(A,B,[sx,sy])</code> \u2014 \u5c06 B \u4e58\u4ee5\u8868\u793a (sx,sy) \u7f29\u653e\u7684\u77e9\u9635\uff0c\u5e76\u5c06\u7ed3\u679c\u77e9\u9635\u8bbe\u7f6e\u4e3a A\u3002</li> <li><code>mat3.rotate(A,B,angle)</code> \u2014 \u5c06 B \u4e58\u4ee5\u8868\u793a\u7ed5\u539f\u70b9\u65cb\u8f6c angle \u5f27\u5ea6\u7684\u77e9\u9635\uff0c\u5e76\u5c06\u7ed3\u679c\u77e9\u9635\u8bbe\u7f6e\u4e3a A\u3002</li> </ul> <p>\u5bf9\u4e8e\u5b9e\u73b0\u7eb9\u7406\u53d8\u6362\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e2d\u7684\u53c2\u6570 A \u548c B \u5c06\u662f\u7eb9\u7406\u53d8\u6362\u77e9\u9635\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u7eb9\u7406\u5750\u6807\u7f29\u653e 2 \u500d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>var textureTransform = mat3.create();\nmat3.scale( textureTransform, textureTransform, [2,2] );\ngl.uniformMatrix3fv( u_textureTransform, false, textureTransform );\n</code></pre> <p>\u6700\u540e\u4e00\u884c\u5047\u8bbe u_textureTransform \u662f\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7c7b\u578b\u4e3a mat3 \u7684 uniform \u53d8\u91cf\u7684\u4f4d\u7f6e\u3002\uff08\u5e76\u8bf7\u8bb0\u4f4f\uff0c\u5c06\u7eb9\u7406\u5750\u6807\u7f29\u653e 2 \u500d\u5c06\u4f7f\u5176\u5e94\u7528\u5230\u7684\u8868\u9762\u7684\u7eb9\u7406\u5c3a\u5bf8 \u7f29\u5c0f\u3002\uff09</p> <p>\u793a\u4f8b WebGL \u7a0b\u5e8f webgl/texture-transform.html \u4f7f\u7528\u7eb9\u7406\u53d8\u6362\u6765\u52a8\u753b\u5316\u7eb9\u7406\u3002\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u7eb9\u7406\u5750\u6807\u4f5c\u4e3a\u7c7b\u578b\u4e3a vec2 \u7684\u5c5e\u6027 a_texCoords \u8f93\u5165\u5230\u9876\u70b9\u7740\u8272\u5668\uff0c\u5e76\u4e14\u7eb9\u7406\u53d8\u6362\u662f\u4e00\u4e2a\u540d\u4e3a textureTransform \u7684 uniform \u53d8\u91cf\uff0c\u7c7b\u578b\u4e3a mat3\u3002\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4f7f\u7528 GLSL \u547d\u4ee4\u8ba1\u7b97\u53d8\u6362\u540e\u7684\u7eb9\u7406\u5750\u6807\uff1a</p> <pre><code>vec3 texcoords = textureTransform * vec3(a_texCoords,1.0);\nv_texCoords = texcoords.xy;\n</code></pre> <p>\u9605\u8bfb\u6e90\u4ee3\u7801\uff0c\u4e86\u89e3\u6240\u6709\u8fd9\u4e9b\u662f\u5982\u4f55\u5728\u4e00\u4e2a\u5b8c\u6574\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u7684\u3002</p> <p>In Subsection 4.3.4, we saw how to apply a texture transformation in OpenGL. OpenGL maintains a texture transform matrix that can be manipulated to apply scaling, rotation, and translation to texture coordinates before they are used to sample a texture. It is easy to program the same operations in WebGL. We need to compute the texture transform matrix on the JavaScript side. The transform matrix is then sent to a uniform matrix variable in the shader program, where it can be applied to the texture coordinates. Note that as long as the texture transformation is affine, it can be applied in the vertex shader, even though the texture is sampled in the fragment shader. That is, doing the transformation in the vertex shader and interpolating the transformed texture coordinates will give the same result as interpolating the original texture coordinates and applying the transformation to the interpolated coordinates in the fragment shader.</p> <p>Since we are using glMatrix for coordinate transformation in 3D, it makes sense to use it for texture transforms as well. If we use 2D texture coordinates, we can implement scaling, rotation, and translation on the JavaScript side using the mat3 class from glMatrix. The functions that we need are</p> <ul> <li><code>mat3.create()</code> \u2014 Returns a new 3-by-3 matrix (represented as an array of length 9). The new matrix is the identity matrix.</li> <li><code>mat3.identity(A)</code> \u2014 Sets A to be the identity matrix, where A is an already-existing mat3.</li> <li><code>mat3.translate(A,B,[dx,dy])</code> \u2014 Multiplies the matrix B by a matrix representing translation by (dx,dy), and sets A to be the resulting matrix. A and B must already exist.</li> <li><code>mat3.scale(A,B,[sx,sy])</code> \u2014 Multiplies B by a matrix representing scaling by (sx,sy), and sets A to be the resulting matrix.</li> <li><code>mat3.rotate(A,B,angle)</code> \u2014 Multiplies B by a matrix representing rotation by angle radians about the origin, and sets A to be the resulting matrix.</li> </ul> <p>For implementing texture transformations, the parameters A and B in these functions will be the texture transform matrix. For example, to apply a scaling by a factor of 2 to the texture coordinates, we might use the code:</p> <pre><code>var textureTransform = mat3.create();\nmat3.scale( textureTransform, textureTransform, [2,2] );\ngl.uniformMatrix3fv( u_textureTransform, false, textureTransform );\n</code></pre> <p>The last line assumes that u_textureTransform is the location of a uniform variable of type mat3 in the shader program. (And remember that scaling the texture coordinates by a factor of 2 will shrink the texture on the surfaces to which it is applied.)</p> <p>The sample WebGL program webgl/texture-transform.html uses texture transformations to animate textures. In the program, texture coordinates are input into the vertex shader as an attribute named a_texCoords of type vec2, and the texture transformation is a uniform variable named textureTransform of type mat3. The transformed texture coordinates are computed in the vertex shader with the GLSL commands</p> <pre><code>vec3 texcoords = textureTransform * vec3(a_texCoords,1.0);\nv_texCoords = texcoords.xy;\n</code></pre> <p>Read the source code to see how all this is used in the context of a complete program.</p>"},{"location":"cn/c7/s3/#732-\u751f\u6210\u7eb9\u7406\u5750\u6807","title":"7.3.2 \u751f\u6210\u7eb9\u7406\u5750\u6807","text":"<p>Generated Texture Coordinates</p> \u4e2d\u6587\u82f1\u6587 <p>\u7eb9\u7406\u5750\u6807\u901a\u5e38\u4f5c\u4e3a\u5c5e\u6027\u53d8\u91cf\u63d0\u4f9b\u7ed9\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u4f46\u662f\uff0c\u5f53\u7eb9\u7406\u5750\u6807\u4e0d\u53ef\u7528\u65f6\uff0c\u53ef\u4ee5\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u751f\u6210\u5b83\u4eec\u3002\u867d\u7136\u4f7f\u7528\u4e3a\u6b63\u5728\u6e32\u67d3\u7684\u5bf9\u8c61\u5b9a\u5236\u7684\u7eb9\u7406\u5750\u6807\u7684\u7ed3\u679c\u901a\u5e38\u770b\u8d77\u6765\u66f4\u597d\uff0c\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u751f\u6210\u7684\u7eb9\u7406\u5750\u6807\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002</p> <p>\u751f\u6210\u7684\u7eb9\u7406\u5750\u6807\u5e94\u8be5\u4ece\u6b63\u5728\u6e32\u67d3\u7684\u5bf9\u8c61\u7684\u5bf9\u8c61\u5750\u6807\u8ba1\u7b97\u5f97\u51fa\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u4ece\u539f\u59cb\u9876\u70b9\u5750\u6807\u8ba1\u7b97\u5f97\u51fa\uff0c\u5373\u5728\u5e94\u7528\u4efb\u4f55\u53d8\u6362\u4e4b\u524d\u3002\u7136\u540e\uff0c\u5f53\u5bf9\u8c61\u88ab\u53d8\u6362\u65f6\uff0c\u7eb9\u7406\u4e5f\u4f1a\u968f\u7740\u5bf9\u8c61\u4e00\u8d77\u53d8\u6362\uff0c\u770b\u8d77\u6765\u5c31\u597d\u50cf\u7eb9\u7406\u9644\u7740\u5728\u5bf9\u8c61\u4e0a\u3002\u7eb9\u7406\u5750\u6807\u53ef\u4ee5\u662f\u5bf9\u8c61\u5750\u6807\u7684\u51e0\u4e4e\u4efb\u4f55\u51fd\u6570\u3002\u5982\u679c\u4f7f\u7528\u4eff\u5c04\u51fd\u6570\uff0c\u901a\u5e38\u4e5f\u662f\u5982\u6b64\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u8ba1\u7b97\u7eb9\u7406\u5750\u6807\u3002\u5426\u5219\uff0c\u9700\u8981\u5c06\u5bf9\u8c61\u5750\u6807\u4f5c\u4e3a\u53d8\u5316\u53d8\u91cf\u53d1\u9001\u5230\u7247\u6bb5\u7740\u8272\u5668\u5e76\u5728\u5176\u4e2d\u8fdb\u884c\u8ba1\u7b97\u3002</p> <p>\u751f\u6210\u7eb9\u7406\u5750\u6807\u7684\u6700\u7b80\u5355\u60f3\u6cd5\u5c31\u662f\u7b80\u5355\u5730\u4f7f\u7528\u5bf9\u8c61\u5750\u6807\u7cfb\u4e2d\u7684 x \u548c y \u5750\u6807\u4f5c\u4e3a\u7eb9\u7406\u5750\u6807\u3002\u5982\u679c\u9876\u70b9\u5750\u6807\u4f5c\u4e3a\u5c5e\u6027\u53d8\u91cf a_coords \u7684\u503c\u7ed9\u51fa\uff0c\u90a3\u5c31\u610f\u5473\u7740\u4f7f\u7528 a_coords.xy \u4f5c\u4e3a\u7eb9\u7406\u5750\u6807\u3002\u8fd9\u79cd\u6620\u5c04\u7684\u6548\u679c\u662f\u4ece\u6b63 z \u8f74\u65b9\u5411\u5c06\u7eb9\u7406\u6295\u5f71\u5230\u8868\u9762\u4e0a\uff0c\u5782\u76f4\u4e8e xy \u5e73\u9762\u3002\u8fd9\u79cd\u6620\u5c04\u5bf9\u4e8e\u9762\u5411\u6b63 z \u65b9\u5411\u7684\u591a\u8fb9\u5f62\u6548\u679c\u4e0d\u9519\uff0c\u4f46\u5bf9\u4e8e\u4e0e xy \u5e73\u9762\u5bf9\u9f50\u7684\u591a\u8fb9\u5f62\u5219\u6548\u679c\u4e0d\u4f73\u3002\u4e0b\u9762\u662f\u5728\u7acb\u65b9\u4f53\u4e0a\u7684\u6620\u5c04\u6548\u679c\uff1a</p> <p></p> <p>\u7eb9\u7406\u5728\u7acb\u65b9\u4f53\u7684\u6b63\u9762\u4e0a\u6295\u5f71\u5f97\u5f88\u597d\u3002\u5b83\u5728\u7acb\u65b9\u4f53\u7684\u80cc\u9762\uff08\u5728\u56fe\u50cf\u4e2d\u4e0d\u53ef\u89c1\uff09\u4e0a\u7684\u6548\u679c\u4e5f\u4e0d\u9519\uff0c\u9664\u4e86\u662f\u955c\u50cf\u53cd\u8f6c\u7684\u3002\u5728\u4e0e xy \u5e73\u9762\u5b8c\u5168\u5bf9\u9f50\u7684\u53e6\u5916\u56db\u4e2a\u9762\u4e0a\uff0c\u4f60\u53ea\u4f1a\u5f97\u5230\u6765\u81ea\u7eb9\u7406\u56fe\u50cf\u8fb9\u6846\u6cbf\u7ebf\u7684\u50cf\u7d20\u7684\u989c\u8272\u7ebf\u3002\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4e00\u4e2a\u7eb9\u7406\u56fe\u50cf\u7684\u526f\u672c\u5b8c\u5168\u586b\u6ee1\u4e86\u7acb\u65b9\u4f53\u7684\u6b63\u9762\u3002\u8fd9\u4e0d\u662f\u81ea\u52a8\u53d1\u751f\u7684\uff1b\u4f60\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u7eb9\u7406\u53d8\u6362\u6765\u4f7f\u7eb9\u7406\u56fe\u50cf\u9002\u5e94\u8868\u9762\u3002\uff09</p> <p>\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5176\u4ed6\u65b9\u5411\u6295\u5f71\u6765\u6620\u5c04\u7acb\u65b9\u4f53\u7684\u5176\u4ed6\u9762\u3002\u4f46\u662f\u5982\u4f55\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u65b9\u5411\u5462\uff1f\u5047\u8bbe\u6211\u4eec\u60f3\u6cbf\u7740\u5750\u6807\u8f74\u7684\u65b9\u5411\u6295\u5f71\u3002\u6211\u4eec\u81f3\u5c11\u60f3\u4ece\u8868\u9762\u9762\u5411\u7684\u65b9\u5411\u6295\u5f71\u3002\u8868\u9762\u6cd5\u7ebf\u5411\u91cf\u544a\u8bc9\u6211\u4eec\u90a3\u4e2a\u65b9\u5411\u3002\u6211\u4eec\u5e94\u8be5\u5728\u6cd5\u7ebf\u5411\u91cf\u5e45\u5ea6\u6700\u5927\u7684\u65b9\u5411\u6295\u5f71\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6cd5\u7ebf\u5411\u91cf\u662f (0.12, 0.85, 0.51)\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u4ece\u6b63 y \u8f74\u65b9\u5411\u6295\u5f71\u3002\u800c\u6cd5\u7ebf\u5411\u91cf\u7b49\u4e8e (\u22120.4, 0.56, \u22120.72) \u4f1a\u544a\u8bc9\u6211\u4eec\u4ece\u8d1f z \u8f74\u65b9\u5411\u6295\u5f71\u3002\u8fd9\u79cd\u201c\u7acb\u65b9\u4f53\u201d\u751f\u6210\u7684\u7eb9\u7406\u5750\u6807\u5bf9\u7acb\u65b9\u4f53\u6765\u8bf4\u662f\u5b8c\u7f8e\u7684\uff0c\u5bf9\u5927\u591a\u6570\u5bf9\u8c61\u770b\u8d77\u6765\u4e5f\u76f8\u5f53\u4e0d\u9519\uff0c\u53ea\u662f\u53ef\u80fd\u5728\u6295\u5f71\u65b9\u5411\u53d8\u5316\u7684\u63a5\u7f1d\u5904\u4f1a\u6709\u95ee\u9898\u3002\u8fd9\u91cc\uff0c\u4f8b\u5982\uff0c\u6280\u672f\u88ab\u5e94\u7528\u5230\u4e00\u4e2a\u8336\u58f6\u4e0a\uff1a</p> <p></p> <p>\u5f53\u4f7f\u7528\u5e73\u9762\u7740\u8272\u65f6\uff0c\u6240\u6709\u591a\u8fb9\u5f62\u7684\u6cd5\u7ebf\u90fd\u6307\u5411\u540c\u4e00\u65b9\u5411\uff0c\u53ef\u4ee5\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u8fdb\u884c\u8ba1\u7b97\u3002\u4f7f\u7528\u5e73\u6ed1\u7740\u8272\u65f6\uff0c\u591a\u8fb9\u5f62\u7684\u4e0d\u540c\u9876\u70b9\u7684\u6cd5\u7ebf\u53ef\u80fd\u6307\u5411\u4e0d\u540c\u7684\u65b9\u5411\u3002\u5982\u679c\u5728\u4e0d\u540c\u9876\u70b9\u4ece\u4e0d\u540c\u65b9\u5411\u6295\u5f71\u7eb9\u7406\u5750\u6807\u5e76\u5bf9\u7ed3\u679c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed3\u679c\u53ef\u80fd\u662f\u4e00\u56e2\u7cdf\u3002\u56e0\u6b64\uff0c\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u8fdb\u884c\u8ba1\u7b97\u66f4\u5b89\u5168\u3002\u5047\u8bbe\u63d2\u503c\u540e\u7684\u6cd5\u7ebf\u5411\u91cf\u548c\u5bf9\u8c61\u5750\u6807\u4ee5\u540d\u4e3a v_normal \u548c v_objCoords \u7684\u53d8\u5316\u53d8\u91cf\u63d0\u4f9b\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u3002\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u751f\u6210\u201c\u7acb\u65b9\u4f53\u201d\u7eb9\u7406\u5750\u6807\uff1a</p> <pre><code>if ( (abs(v_normal.x) &gt; abs(v_normal.y)) &amp;&amp; \n                                (abs(v_normal.x) &gt; abs(v_normal.z)) ) {\n    // \u6cbf x \u8f74\u6295\u5f71\n    texcoords = (v_normal.x &gt; 0.0) ? v_objCoords.yz : v_objCoords.zy;\n}\nelse if ( (abs(v_normal.z) &gt; abs(v_normal.x)) &amp;&amp; \n                                (abs(v_normal.z) &gt; abs(v_normal.y)) ) {\n    // \u6cbf z \u8f74\u6295\u5f71\n    texcoords = (v_normal.z &gt; 0.0) ? v_objCoords.xy : v_objCoords.yx;\n}\nelse {\n    // \u6cbf y \u8f74\u6295\u5f71\n    texcoords = (v_normal.y &gt; 0.0) ? v_objCoords.zx : v_objCoords.xz;\n}\n</code></pre> <p>\u4f8b\u5982\uff0c\u6cbf x \u8f74\u6295\u5f71\u65f6\uff0c\u4f7f\u7528 v_objCoords \u7684 y \u548c z \u5750\u6807\u4f5c\u4e3a\u7eb9\u7406\u5750\u6807\u3002\u6839\u636e x \u7684\u6b63\u65b9\u5411\u6216\u8d1f\u65b9\u5411\u6295\u5f71\uff0c\u5750\u6807\u88ab\u8ba1\u7b97\u4e3a v_objCoords.yz \u6216 v_objCoords.zy\u3002\u9009\u62e9\u8fd9\u4e24\u4e2a\u5750\u6807\u7684\u987a\u5e8f\u662f\u4e3a\u4e86\u4f7f\u7eb9\u7406\u56fe\u50cf\u76f4\u63a5\u6295\u5f71\u5230\u8868\u9762\u4e0a\uff0c\u800c\u4e0d\u662f\u955c\u50cf\u53cd\u8f6c\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6f14\u793a\u5c1d\u8bd5\u751f\u6210\u7eb9\u7406\u3002\u6f14\u793a\u663e\u793a\u4e86\u4f7f\u7528\u4e0a\u8ff0\u7acb\u65b9\u4f53\u751f\u6210\u7eb9\u7406\u5750\u6807\u7684\u5404\u79cd\u7eb9\u7406\u548c\u5bf9\u8c61\u3002\u4f60\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u53ea\u5c06\u7eb9\u7406\u5750\u6807\u6295\u5f71\u5230 xy \u6216 zx \u5e73\u9762\u4e0a\uff0c\u4ee5\u53ca\u5c06\u7eb9\u7406\u56fe\u50cf\u73af\u7ed5\u5706\u67f1\u4f53\u4e00\u6b21\u7684\u5706\u67f1\u6295\u5f71\u3002\u6700\u540e\u4e00\u4e2a\u9009\u9879\u662f\u4f7f\u7528\u773c\u775b\u5750\u6807\u7cfb\u4e2d\u7684 x \u548c y \u5750\u6807\u4f5c\u4e3a\u7eb9\u7406\u5750\u6807\u3002\u8fd9\u4e2a\u9009\u9879\u5c06\u7eb9\u7406\u56fa\u5b9a\u5728\u5c4f\u5e55\u4e0a\u800c\u4e0d\u662f\u5bf9\u8c61\u4e0a\uff0c\u6240\u4ee5\u7eb9\u7406\u4e0d\u4f1a\u968f\u7740\u5bf9\u8c61\u65cb\u8f6c\u3002\u6548\u679c\u5f88\u6709\u8da3\uff0c\u4f46\u53ef\u80fd\u4e0d\u662f\u5f88\u6709\u7528\u3002</p> <p></p> <p>Texture coordinates are typically provided to the shader program as an attribute variable. However, when texture coordinates are not available, it is possible to generate them in the shader program. While the results will not usually look as good as using texture coordinates that are customized for the object that is being rendered, they can be acceptable in some cases.</p> <p>Generated texture coordinates should usually be computed from the object coordinates of the object that is being rendered. That is, they are computed from the original vertex coordinates, before any transformation has been applied. Then, when the object is transformed, the texture will be transformed along with the object so that it will look like the texture is attached to the object. The texture coordinates could be almost any function of the object coordinates. If an affine function is used, as is usually the case, then the texture coordinates can be computed in the vertex shader. Otherwise, you need to send the object coordinates to the fragment shader in a varying variable and do the computation there.</p> <p>The simplest idea for generated texture coordinates is simply to use the x and y coordinates from the object coordinate system as the texture coordinates. If the vertex coordinates are given as the value of the attribute variable a_coords, that would mean using a_coords.xy as texture coordinates. This has the effect of projecting the texture onto the surface from the direction of the positive z-axis, perpendicular to the xy-plane. The mapping works OK for a polygon that is facing, more-or-less, in the direction of positive z, but it doesn't give good results for polygons that are edge-on to the xy-plane. Here's what the mapping looks like on a cube:</p> <p></p> <p>The texture projects nicely onto the front face of the cube. It also works OK on the back face of the cube (not visible in the image), except that it is mirror-reversed. On the other four faces, which are exactly edge-on to the xy-plane, you just get lines of color that come from pixels along the border of the texture image. (In this example, one copy of the texture image exactly fills the front face of the cube. That doesn't happen automatically; you might need a texture transform to adapt the texture image to the surface.)</p> <p>Of course, we could project in other directions to map the texture to other faces of the cube. But how to decide which direction to use? Let's say that we want to project along the direction of one of the coordinate axes. We want to project, approximately at least, from the direction that the surface is facing. The normal vector to the surface tells us that direction. We should project in the direction where the normal vector has its greatest magnitude. For example, if the normal vector is (0.12, 0.85, 0.51), then we should project from the direction of the positive y-axis. And a normal vector equal to (\u22120.4, 0.56, \u22120.72) would tell us to project from the direction of the negative z-axis. This resulting \"cubical\" generated texture coordinates are perfect for a cube, and it looks pretty good on most objects, except that there can be a seam where the direction of projection changes. Here, for example, the technique is applied to a teapot:</p> <p></p> <p>When using flat shading, so that all of the normals to a polygon point in the same direction, the computation can be done in the vertex shader. With smooth shading, normals at different vertices of a polygon can point in different directions. If you project texture coordinates from different directions at different vertices and interpolate the results, the result is likely to be a mess. So, doing the computation in the fragment shader is safer. Suppose that the interpolated normal vectors and object coordinates are provided to the fragment shader in varying variables named v_normal and v_objCoords. Then the following code can be used to generate \"cubical\" texture coordinates:</p> <pre><code>if ( (abs(v_normal.x) &gt; abs(v_normal.y)) &amp;&amp; \n                                (abs(v_normal.x) &gt; abs(v_normal.z)) ) {\n    // project along the x-axis\n    texcoords = (v_normal.x &gt; 0.0) ? v_objCoords.yz : v_objCoords.zy;\n}\nelse if ( (abs(v_normal.z) &gt; abs(v_normal.x)) &amp;&amp; \n                                (abs(v_normal.z) &gt; abs(v_normal.y)) ) {\n    // project along the z-axis\n    texcoords = (v_normal.z &gt; 0.0) ? v_objCoords.xy : v_objCoords.yx;\n}\nelse {\n    // project along the y-axis\n    texcoords = (v_normal.y &gt; 0.0) ? v_objCoords.zx : v_objCoords.xz;\n}\n</code></pre> <p>When projecting along the x-axis, for example, the y and z coordinates from v_objCoords are used as texture coordinates. The coordinates are computed as either v_objCoords.yz or v_objCoords.zy, depending on whether the projection is from the positive or the negative direction of x. The order of the two coordinates is chosen so that a texture image will be projected directly onto the surface, rather than mirror-reversed.</p> <p>You can experiment with generated textures using the following demo. The demo shows a variety of textures and objects using cubical generated texture coordinates, as discussed above. You can also try texture coordinates projected just onto the xy or zx plane, as well as a cylindrical projection that wraps a texture image once around a cylinder. A final option is to use the x and y coordinates from the eye coordinate system as texture coordinates. That option fixes the texture on the screen rather than on the object, so the texture doesn't rotate with the object. The effect is interesting, but probably not very useful.</p> <p></p>"},{"location":"cn/c7/s3/#733-\u7a0b\u5e8f\u7eb9\u7406","title":"7.3.3 \u7a0b\u5e8f\u7eb9\u7406","text":"<p>Procedural Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u7684\u6240\u6709\u7eb9\u7406\u90fd\u662f\u56fe\u50cf\u7eb9\u7406\u3002\u5728\u56fe\u50cf\u7eb9\u7406\u4e2d\uff0c\u989c\u8272\u662f\u901a\u8fc7\u57fa\u4e8e\u4e00\u5bf9\u7eb9\u7406\u5750\u6807\u91c7\u6837\u56fe\u50cf\u6765\u8ba1\u7b97\u7684\u3002\u56fe\u50cf\u672c\u8d28\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u5c06\u7eb9\u7406\u5750\u6807\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u8fd4\u56de\u4f5c\u4e3a\u8f93\u51fa\u7684\u989c\u8272\u3002\u7136\u800c\uff0c\u9664\u4e86\u5728\u56fe\u50cf\u4e2d\u67e5\u627e\u503c\u4e4b\u5916\uff0c\u8fd8\u6709\u5b9a\u4e49\u6b64\u7c7b\u51fd\u6570\u7684\u5176\u4ed6\u65b9\u5f0f\u3002\u8fc7\u7a0b\u7eb9\u7406\u662f\u7531\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u7684\uff0c\u5176\u503c\u662f\u8ba1\u7b97\u51fa\u6765\u7684\uff0c\u800c\u4e0d\u662f\u67e5\u627e\u51fa\u6765\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7eb9\u7406\u5750\u6807\u88ab\u7528\u4f5c\u4ee3\u7801\u6bb5\u7684\u8f93\u5165\uff0c\u5176\u8f93\u51fa\u662f\u7eb9\u7406\u7684\u76f8\u5e94\u989c\u8272\u503c\u3002</p> <p>\u5728 WebGL \u4e2d\uff0c\u8fc7\u7a0b\u7eb9\u7406\u53ef\u4ee5\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u5b9a\u4e49\u3002\u8fd9\u4e2a\u60f3\u6cd5\u5f88\u7b80\u5355\uff1a\u53d6\u4e00\u4e2a\u8868\u793a\u4e00\u7ec4\u7eb9\u7406\u5750\u6807\u7684 vec2\u3002\u7136\u540e\uff0c\u4e0d\u662f\u4f7f\u7528 sampler2D \u6765\u67e5\u627e\u989c\u8272\uff0c\u800c\u662f\u4f7f\u7528 vec2 \u4f5c\u4e3a\u4e00\u4e9b\u6570\u5b66\u8ba1\u7b97\u7684\u8f93\u5165\uff0c\u8be5\u8ba1\u7b97\u8ba1\u7b97\u51fa\u4e00\u4e2a\u8868\u793a\u989c\u8272\u7684 vec4\u3002\u7406\u8bba\u4e0a\u4efb\u4f55\u8ba1\u7b97\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u53ea\u8981 vec4 \u7684\u5206\u91cf\u5728 0.0 \u5230 1.0 \u7684\u8303\u56f4\u5185\u3002</p> <p>\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u60f3\u6cd5\u6269\u5c55\u5230 3D \u7eb9\u7406\u30022D \u7eb9\u7406\u4f7f\u7528 vec2 \u4f5c\u4e3a\u7eb9\u7406\u5750\u6807\u3002\u5bf9\u4e8e 3D \u7eb9\u7406\u5750\u6807\uff0c\u6211\u4eec\u4f7f\u7528 vec3\u3002\u4e0e\u5c06\u70b9\u6620\u5c04\u5230\u5e73\u9762\u4e0a\u7684\u989c\u8272\u4e0d\u540c\uff0c3D \u7eb9\u7406\u5c06\u7a7a\u95f4\u4e2d\u7684\u70b9\u6620\u5c04\u5230\u989c\u8272\u3002\u53ef\u4ee5\u6709\u7c7b\u4f3c\u4e8e\u56fe\u50cf\u7eb9\u7406\u7684 3D \u7eb9\u7406\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a 3D \u7f51\u683c\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5b58\u50a8\u4e00\u4e2a\u989c\u8272\u503c\uff0c\u5e76\u901a\u8fc7\u5728\u7f51\u683c\u4e2d\u67e5\u627e\u989c\u8272\u6765\u91c7\u6837\u7eb9\u7406\u3002\u7136\u800c\uff0c\u4e00\u4e2a 3D \u989c\u8272\u7f51\u683c\u5360\u7528\u5f88\u591a\u5185\u5b58\u3002\u53e6\u4e00\u65b9\u9762\uff0c3D \u8fc7\u7a0b\u7eb9\u7406\u4e0d\u4f7f\u7528\u5185\u5b58\u8d44\u6e90\uff0c\u5e76\u4e14\u6bd4 2D \u8fc7\u7a0b\u7eb9\u7406\u591a\u4f7f\u7528\u5f88\u5c11\u7684\u8ba1\u7b97\u8d44\u6e90\u3002</p> <p>\u90a3\u4e48\uff0c\u53ef\u4ee5\u7528\u8fc7\u7a0b\u7eb9\u7406\u505a\u4ec0\u4e48\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\u3002\u4e0e\u8fc7\u7a0b\u7eb9\u7406\u76f8\u5173\u7684\u7406\u8bba\u548c\u5b9e\u8df5\u975e\u5e38\u4e30\u5bcc\u3002\u6211\u4eec\u5c06\u770b\u4e00\u4e9b\u53ef\u80fd\u6027\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f7f\u7528\u56db\u79cd\u4e0d\u540c\u8fc7\u7a0b\u7eb9\u7406\u7684\u73af\u9762\u3002\u8fd9\u4e9b\u56fe\u50cf\u6765\u81ea\u672c\u5c0f\u8282\u672b\u5c3e\u6f14\u793a\u7684\u793a\u4f8b\uff1a</p> <p></p> <p>\u5de6\u8fb9\u7684\u73af\u9762\u4f7f\u7528\u4e86\u4e00\u4e2a\u8868\u793a\u68cb\u76d8\u683c\u56fe\u6848\u7684 2D \u8fc7\u7a0b\u7eb9\u7406\u30022D \u7eb9\u7406\u5750\u6807\u901a\u5e38\u4f5c\u4e3a\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u9876\u70b9\u5c5e\u6027\u53d8\u91cf\u7684\u503c\u63d0\u4f9b\u3002\u68cb\u76d8\u683c\u56fe\u6848\u662f\u89c4\u5219\u7684\u7b49\u5927\u5c0f\u5f69\u8272\u6b63\u65b9\u5f62\u7f51\u683c\uff0c\u4f46\u4e0e\u4efb\u4f55 2D \u7eb9\u7406\u4e00\u6837\uff0c\u5f53\u56fe\u6848\u6620\u5c04\u5230\u73af\u9762\u7684\u66f2\u9762\u65f6\uff0c\u56fe\u6848\u4f1a\u88ab\u62c9\u4f38\u548c\u626d\u66f2\u3002\u7ed9\u5b9a\u5728\u53d8\u5316\u53d8\u91cf v_texCoords \u4e2d\u7684\u7eb9\u7406\u5750\u6807\uff0c\u53ef\u4ee5\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u6309\u5982\u4e0b\u65b9\u5f0f\u8ba1\u7b97\u68cb\u76d8\u683c\u7eb9\u7406\u7684\u989c\u8272\u503c\uff1a</p> <pre><code>vec4 color;\nfloat a = floor(v_texCoords.x * scale);\nfloat b = floor(v_texCoords.y * scale);\nif (mod(a+b, 2.0) &gt; 0.5) {  // a+b \u662f\u5947\u6570\n    color = vec3(1.0, 0.5, 0.5, 1.0); // \u7c89\u7ea2\u8272\n}\nelse {  // a+b \u662f\u5076\u6570\n    color = vec3(0.6, 0.6, 1.0, 1.0); // \u6d45\u84dd\u8272\n}\n</code></pre> <p>\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u4e2d\u7684 scale \u8868\u793a\u7528\u4e8e\u9002\u5e94\u88ab\u7eb9\u7406\u5316\u5bf9\u8c61\u5927\u5c0f\u7684\u7eb9\u7406\u53d8\u6362\u3002\uff08\u73af\u9762\u7684\u7eb9\u7406\u5750\u6807\u8303\u56f4\u4ece 0 \u5230 1\uff1b\u6ca1\u6709\u7f29\u653e\uff0c\u68cb\u76d8\u683c\u56fe\u6848\u4e2d\u53ea\u6709\u4e00\u4e2a\u6b63\u65b9\u5f62\u4f1a\u88ab\u6620\u5c04\u5230\u73af\u9762\u3002\u5728\u56fe\u7247\u4e2d\u7684\u73af\u9762\uff0cscale \u662f 8\u3002\uff09floor \u51fd\u6570\u8ba1\u7b97\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5176\u53c2\u6570\u7684\u6700\u5927\u6574\u6570\uff0c\u6240\u4ee5 a \u548c b \u662f\u6574\u6570\u3002mod(a+b,2.0) \u7684\u503c\u8981\u4e48\u662f 0.0\uff0c\u8981\u4e48\u662f 1.0\uff0c\u6240\u4ee5\u7b2c\u56db\u884c\u4e2d\u7684\u6d4b\u8bd5\u68c0\u67e5 a+b \u662f\u5076\u6570\u8fd8\u662f\u5947\u6570\u3002\u8fd9\u91cc\u7684\u60f3\u6cd5\u662f\uff0c\u5f53 a \u6216 b \u589e\u52a0\u6216\u51cf\u5c11 1 \u65f6\uff0ca+b \u5c06\u4ece\u5076\u6570\u53d8\u4e3a\u5947\u6570\uff0c\u6216\u4ece\u5947\u6570\u53d8\u4e3a\u5076\u6570\uff1b\u8fd9\u786e\u4fdd\u4e86\u56fe\u6848\u4e2d\u90bb\u8fd1\u7684\u6b63\u65b9\u5f62\u5c06\u88ab\u4e0d\u540c\u989c\u8272\u3002</p> <p>\u63d2\u56fe\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u73af\u9762\u4f7f\u7528\u4e86 3D \u68cb\u76d8\u683c\u56fe\u6848\u30023D \u68cb\u76d8\u683c\u7531\u5728\u6240\u6709\u4e09\u4e2a\u65b9\u5411\u4e0a\u4ea4\u66ff\u989c\u8272\u7684\u7acb\u65b9\u4f53\u7f51\u683c\u7ec4\u6210\u3002\u5bf9\u4e8e\u7acb\u65b9\u4f53\u7684 3D \u7eb9\u7406\u5750\u6807\uff0c\u6211\u4f7f\u7528\u5bf9\u8c61\u5750\u6807\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u70b9\u7684 3D \u7eb9\u7406\u5750\u6807\u4e0e\u5176\u5728\u7a7a\u95f4\u4e2d\u7684\u4f4d\u7f6e\u76f8\u540c\uff0c\u5728\u5b9a\u4e49\u73af\u9762\u7684\u5bf9\u8c61\u5750\u6807\u7cfb\u4e2d\u3002\u6548\u679c\u5c31\u50cf\u4ece\u5e26\u6709 3D \u68cb\u76d8\u683c\u56fe\u6848\u7684\u5b9e\u5fc3\u5757\u4e2d\u96d5\u523b\u51fa\u73af\u9762\u4e00\u6837\uff0c\u5185\u5916\u90fd\u7740\u8272\u3002\u6ce8\u610f\uff0c\u4f60\u4e0d\u4f1a\u5728\u73af\u9762\u7684\u8868\u9762\u4e0a\u770b\u5230\u5f69\u8272\u7684\u6b63\u65b9\u5f62\u6216\u77e9\u5f62\uff1b\u4f60\u770b\u5230\u7684\u662f\u8be5\u8868\u9762\u4e0e\u5f69\u8272\u7acb\u65b9\u4f53\u7684\u4ea4\u70b9\u3002\u4ea4\u70b9\u6709\u5404\u79cd\u5404\u6837\u7684\u5f62\u72b6\u3002\u8fd9\u53ef\u80fd\u662f\u8fd9\u79cd\u7279\u5b9a 3D \u7eb9\u7406\u7684\u7f3a\u70b9\uff0c\u4f46\u4f18\u70b9\u662f\u6ca1\u6709\u7eb9\u7406\u7684\u62c9\u4f38\u548c\u626d\u66f2\u3002\u8ba1\u7b97 3D \u68cb\u76d8\u683c\u7684\u4ee3\u7801\u4e0e 2D \u60c5\u51b5\u76f8\u540c\uff0c\u53ea\u662f\u4f7f\u7528\u4e09\u4e2a\u5bf9\u8c61\u5750\u6807\u800c\u4e0d\u662f\u4e24\u4e2a\u7eb9\u7406\u5750\u6807\u3002</p> <p>\u81ea\u7136\u770b\u8d77\u6765\u7684\u7eb9\u7406\u901a\u5e38\u6709\u4e00\u4e9b\u968f\u673a\u6027\u5143\u7d20\u3002\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u771f\u6b63\u7684\u968f\u673a\u6027\uff0c\u5426\u5219\u6bcf\u6b21\u7ed8\u5236\u7eb9\u7406\u65f6\u770b\u8d77\u6765\u90fd\u4f1a\u4e0d\u540c\u3002\u7136\u800c\uff0c\u53ef\u4ee5\u5728\u8ba1\u7b97\u7eb9\u7406\u7684\u7b97\u6cd5\u4e2d\u52a0\u5165\u67d0\u79cd\u4f2a\u968f\u673a\u6027\u3002\u4f46\u6211\u4eec\u4e0d\u5e0c\u671b\u7eb9\u7406\u4e2d\u7684\u989c\u8272\u770b\u8d77\u6765\u5b8c\u5168\u968f\u673a - \u56fe\u6848\u4e2d\u5fc5\u987b\u6709\u4e00\u5b9a\u7684\u56fe\u6848\uff01\u8bb8\u591a\u81ea\u7136\u770b\u8d77\u6765\u7684\u8fc7\u7a0b\u7eb9\u7406\u90fd\u662f\u57fa\u4e8e\u4e00\u79cd\u79f0\u4e3a Perlin \u566a\u58f0 \u7684\u4f2a\u968f\u673a\u6027\uff0c\u4ee5 Ken Perlin \u547d\u540d\uff0c\u4ed6\u5728 1983 \u5e74\u53d1\u660e\u4e86\u8fd9\u4e2a\u7b97\u6cd5\u3002\u4e0a\u9762\u7684\u7b2c\u4e09\u4e2a\u73af\u9762\u4f7f\u7528\u4e86\u76f4\u63a5\u57fa\u4e8e Perlin \u566a\u58f0\u7684 3D \u7eb9\u7406\u3002\u7b2c\u56db\u4e2a\u73af\u9762\u4e0a\u7684 \"\u5927\u7406\u77f3 \" \u7eb9\u7406\u5728\u8ba1\u7b97\u4e2d\u4f7f\u7528 Perlin \u566a\u58f0\u4f5c\u4e3a\u7ec4\u4ef6\u3002\u4e24\u79cd\u7eb9\u7406\u90fd\u662f 3D \u7684\uff0c\u4f46\u7c7b\u4f3c\u7684 2D \u7248\u672c\u4e5f\u662f\u53ef\u80fd\u7684\u3002\uff08\u6211\u4e0d\u77e5\u9053 Perlin \u566a\u58f0\u7684\u7b97\u6cd5\u3002\u6211\u4ece https://github.com/ashima/webgl-noise \u590d\u5236\u4e86 GLSL \u4ee3\u7801\u3002\u8be5\u4ee3\u7801\u6839\u636e MIT \u98ce\u683c\u7684\u5f00\u6e90\u8bb8\u53ef\u8bc1\u53d1\u5e03\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u4efb\u4f55\u9879\u76ee\u4e2d\u81ea\u7531\u4f7f\u7528\u3002\uff09</p> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u901a\u8fc7\u4e00\u4e2a\u51fd\u6570 snoise(v) \u8ba1\u7b97 3D Perlin \u566a\u58f0\uff0c\u5176\u4e2d v \u662f\u4e00\u4e2a vec3\uff0c\u51fd\u6570\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u8303\u56f4\u5728 -1.0 \u5230 1.0 \u4e4b\u95f4\u7684 float\u3002\u8fd9\u91cc\u662f\u8ba1\u7b97\u8fc7\u7a0b\uff1a</p> <pre><code>float value = snoise(scale*v_objCoords);\nvalue = 0.75 + value*0.25; // \u6620\u5c04\u5230 0.5 \u5230 1.0 \u7684\u8303\u56f4\ncolor = vec3(1.0,value,1.0);\n</code></pre> <p>\u8fd9\u91cc\uff0cv_objCoords \u662f\u4e00\u4e2a\u5305\u542b\u6b63\u5728\u7eb9\u7406\u5316\u70b9\u7684 3D \u5bf9\u8c61\u5750\u6807\u7684\u53d8\u5316\u53d8\u91cf\uff0cscale \u662f\u4e00\u4e2a\u7eb9\u7406\u53d8\u6362\uff0c\u7528\u4e8e\u9002\u5e94\u7eb9\u7406\u5230\u73af\u9762\u7684\u5927\u5c0f\u3002\u7531\u4e8e snoise() \u7684\u8f93\u51fa\u5728 -1.0 \u548c 1.0 \u4e4b\u95f4\u53d8\u5316\uff0cvalue \u4ece 0.5 \u53d8\u5316\u5230 1.0\uff0c\u7eb9\u7406\u7684\u989c\u8272\u4ece\u6de1\u7d2b\u8272\u5230\u767d\u8272\u3002\u7b2c\u4e09\u4e2a\u73af\u9762\u4e0a\u770b\u5230\u7684\u989c\u8272\u53d8\u5316\u662f Perlin \u566a\u58f0\u7684\u7279\u5f81\u3002\u56fe\u6848\u6709\u4e9b\u968f\u673a\uff0c\u4f46\u5b83\u6709\u89c4\u5219\u7684\u3001\u5927\u5c0f\u76f8\u4f3c\u7684\u7279\u5f81\u3002\u901a\u8fc7\u6b63\u786e\u7684\u7f29\u653e\u548c\u7740\u8272\uff0c\u57fa\u672c\u7684 Perlin \u566a\u58f0\u53ef\u4ee5\u5236\u6210\u4e00\u4e2a\u4e0d\u9519\u7684\u4e91\u7eb9\u7406\u3002</p> <p>\u63d2\u56fe\u4e2d\u7b2c\u56db\u4e2a\u73af\u9762\u4e0a\u7684\u5927\u7406\u77f3\u7eb9\u7406\u662f\u901a\u8fc7\u5728\u89c4\u5219\u7684\u3001\u5468\u671f\u6027\u56fe\u6848\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u566a\u58f0\u6765\u5236\u4f5c\u7684\u3002\u57fa\u672c\u6280\u672f\u53ef\u4ee5\u4ea7\u751f\u5404\u79cd\u6709\u7528\u7684\u7eb9\u7406\u3002\u8d77\u59cb\u70b9\u662f\u4e00\u4e2a\u53d8\u91cf\u7684\u5468\u671f\u6027\u51fd\u6570\uff0c\u5176\u503c\u5728 0.0 \u548c 1.0 \u4e4b\u95f4\u3002\u8981\u83b7\u5f97 2D \u6216 3D \u4e2d\u7684\u5468\u671f\u6027\u56fe\u6848\uff0c\u51fd\u6570\u7684\u8f93\u5165\u53ef\u4ee5\u4ece\u7eb9\u7406\u5750\u6807\u8ba1\u7b97\u5f97\u51fa\u3002\u4e0d\u540c\u7684\u51fd\u6570\u53ef\u4ee5\u4ea7\u751f\u975e\u5e38\u4e0d\u540c\u7684\u6548\u679c\u3002\u8fd9\u91cc\u663e\u793a\u7684\u4e09\u79cd\u56fe\u6848\u5206\u522b\u4f7f\u7528\u51fd\u6570 (1.0+sin(t))/2.0, abs(sin(t)) \u548c (t\u2212floor(t))\uff1a</p> <p></p> <p>\u5728\u7b2c\u4e8c\u5f20\u56fe\u50cf\u4e2d\uff0c\u53d6 sin(t) \u7684\u7edd\u5bf9\u503c\u6bd4\u7b2c\u4e00\u5f20\u56fe\u50cf\u4e2d\u7684\u666e\u901a sine \u51fd\u6570\u4ea7\u751f\u66f4\u7a84\u3001\u66f4\u5c16\u9510\u7684\u6697\u5e26\u3002\u8fd9\u662f\u7528\u4e8e\u63d2\u56fe\u4e2d\u5927\u7406\u77f3\u7eb9\u7406\u7684\u51fd\u6570\u3002\u7b2c\u4e09\u5f20\u56fe\u50cf\u4e2d\u7684\u5c16\u9510\u4e0d\u8fde\u7eed\u53ef\u80fd\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u89c6\u89c9\u6548\u679c\u3002</p> <p>\u8981\u4ece\u4e00\u4e2a\u53d8\u91cf\u7684\u51fd\u6570 f(t) \u83b7\u5f97 2D \u56fe\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a vec2\uff0cv \u7684\u51fd\u6570\uff0c\u5b9a\u4e49\u4e3a f(av.x+bv.y)\uff0c\u5176\u4e2d a \u548c b \u662f\u5e38\u6570\u3002a \u548c b \u7684\u503c\u51b3\u5b9a\u4e86\u56fe\u6848\u4e2d\u5f69\u8272\u5e26\u7684\u65b9\u5411\u548c\u95f4\u8ddd\u3002\u5bf9\u4e8e 3D \u56fe\u6848\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 f(av.x+bv.y+cv.z)*\u3002</p> <p>\u8981\u5411\u56fe\u6848\u6dfb\u52a0\u566a\u58f0\uff0c\u5c06 Perlin \u566a\u58f0\u51fd\u6570\u6dfb\u52a0\u5230\u51fd\u6570\u7684\u8f93\u5165\u4e2d\u3002\u5bf9\u4e8e 3D \u56fe\u6848\uff0c\u51fd\u6570\u5c06\u53d8\u4e3a</p> <pre><code>f( a*v.x + b*v.y + c*v.z + d*snoise(e*v) )\n</code></pre> <p>\u65b0\u7684\u5e38\u6570 d \u548c e \u51b3\u5b9a\u4e86\u56fe\u6848\u6270\u52a8\u7684\u5927\u5c0f\u548c\u5f3a\u5ea6\u3002\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u521b\u5efa\u73af\u9762\u5927\u7406\u77f3\u7eb9\u7406\u7684\u4ee3\u7801\u662f\uff1a</p> <pre><code>vec3 v = v_objCoords*scale;\nfloat t = (v.x + 2.0*v.y + 3.0*v.z);\nt += 1.5*snoise(v);\nfloat value =  abs(sin(t));\ncolor = vec3(sqrt(value));\n</code></pre> <p>\uff08\u6700\u540e\u6dfb\u52a0\u7684 sqrt \u662f\u4e3a\u4e86\u4f7f\u5f69\u8272\u5e26\u6bd4\u6ca1\u6709\u5b83\u65f6\u66f4\u5c16\u9510\u3002\uff09</p> <p>\u4ee5\u4e0b\u6f14\u793a\u5141\u8bb8\u4f60\u5c06\u5404\u79cd 3D \u7eb9\u7406\u5e94\u7528\u5230\u4e0d\u540c\u7684\u5bf9\u8c61\u4e0a\u3002\u6f14\u793a\u4e2d\u4f7f\u7528\u7684\u8fc7\u7a0b\u7eb9\u7406\u53ea\u662f\u53ef\u80fd\u6027\u7684\u4e00\u5c0f\u90e8\u5206\u3002</p> <p></p> <p>Up until now, all of our textures have been image textures. With an image texture, a color is computed by sampling the image, based on a pair of texture coordinates. The image essentially defines a function that takes texture coordinates as input and returns a color as output. However, there are other ways to define such functions besides looking up values in an image. A procedural texture is defined by a function whose value is computed rather than looked up. That is, the texture coordinates are used as input to a code segment whose output is the corresponding color value for the texture.</p> <p>In WebGL, procedural textures can be defined in the fragment shader. The idea is simple: Take a vec2 representing a set of texture coordinates. Then, instead of using a sampler2D to look up a color, use the vec2 as input to some mathematical computation that computes a vec4 representing a color. In theory any computation could be used, as long as the components of the vec4 are in the range 0.0 to 1.0.</p> <p>We can even extend the idea to 3D textures. 2D textures use a vec2 as texture coordinates. For 3D texture coordinates, we use a vec3. Instead of mapping points on a plane to color, a 3D texture maps points in space to colors. It's possible to have 3D textures that are similar to image textures. That is, a color value is stored for each point in a 3D grid, and the texture is sampled by looking up colors in the grid. However, a 3D grid of colors takes up a lot of memory. On the other hand, 3D procedural textures use no memory resources and use very little more computational resources than 2D procedural textures.</p> <p>So, what can be done with procedural textures? In fact, quite a lot. There is a large body of theory and practice related to procedural textures. We will look at a few of the possibilities. Here's a torus, textured using four different procedural textures. The images are from the demo shown at the end of this subsection:</p> <p></p> <p>The torus on the left uses a 2D procedural texture representing a checkerboard pattern. The 2D texture coordinates were provided, as usual, as values of a vertex attribute variable in the shader program. The checkerboard pattern is regular grid of equal-sized colored squares, but, as with any 2D texture, the pattern is stretched and distorted when it is mapped to the curved surface of the torus. Given texture coordinates in the varying variable v_texCoords, the color value for the checkerboard texture can be computed as follows in the fragment shader:</p> <pre><code>vec4 color;\nfloat a = floor(v_texCoords.x * scale);\nfloat b = floor(v_texCoords.y * scale);\nif (mod(a+b, 2.0) &gt; 0.5) {  // a+b is odd\n    color = vec3(1.0, 0.5, 0.5, 1.0); // pink\n}\nelse {  // a+b is even\n    color = vec3(0.6, 0.6, 1.0, 1.0); // light blue\n}\n</code></pre> <p>The scale in the second and third lines represents a texture transformation that is used to adapt the size of the texture to the object that is being textured. (The texture coordinates for the torus range from 0 to 1; without the scaling, only one square in the checkerboard pattern would be mapped to the torus. For the torus in the picture, scale is 8.) The floor function computes the largest integer less than or equal to its parameter, so a and b are integers. The value of mod(a+b,2.0) is either 0.0 or 1.0, so the test in the fourth line tests whether a+b is even or odd. The idea here is that when either a or b increases or decreases by 1, a+b will change from even to odd or from odd to even; that ensures that neighboring squares in the pattern will be differently colored.</p> <p>The second torus in the illustration uses a 3D checkerboard pattern. The 3D pattern is made up of a grid of cubes that alternate in color in all three directions. For the 3D texture coordinates on the cube, I use object coordinates. That is, the 3D texture coordinates for a point are the same as its position in space, in the object coordinate system in which the torus is defined. The effect is like carving the torus out of a solid block that is colored, inside and out, with a 3D checkerboard pattern. Note that you don't see colored squares or rectangles on the surface of the torus; you see the intersections of that surface with colored cubes. The intersections have a wide variety of shapes. That might be a disadvantage for this particular 3D texture, but the advantage is that there is no stretching and distortion of the texture. The code for computing the 3D checkerboard is the same as for the 2D case, but using three object coordinates instead of two texture coordinates.</p> <p>Natural-looking textures often have some element of randomness. We can't use actual randomness, since then the texture would look different every time it is drawn. However, some sort of pseudo-randomness can be incorporated into the algorithm that computes a texture. But we don't want the colors in the texture to look completely random\u2014there has to be some sort of pattern in the pattern! Many natural-looking procedural textures are based on a type of pseudo-randomness called Perlin noise, named after Ken Perlin who invented the algorithm in 1983. The third torus in the above illustration uses a 3D texture based directly on Perlin noise. The \"marble\" texture on the fourth torus uses Perlin noise as a component in the computation. Both textures are 3D, but similar 2D versions are also possible. (I don't know the algorithm for Perlin noise. I copied the GLSL code from https://github.com/ashima/webgl-noise. The code is published under an MIT-style open source license, so that it can be used freely in any project.)</p> <p>In the sample program, 3D Perlin noise is computed by a function snoise(v), where v is a vec3 and the output of the function is a float in the range \u22121.0 to 1.0. Here is the computation:</p> <pre><code>float value = snoise( scale*v_objCoords );\nvalue = 0.75 + value*0.25; // map to the range 0.5 to 1.0\ncolor = vec3(1.0,value,1.0);\n</code></pre> <p>Here, v_objCoords is a varying variable containing the 3D object coordinates of the point that is being textured, and scale is a texture transformation that adapts the size of the texture to the torus. Since the output of snoise() varies between \u22121.0 and 1.0, value varies from 0.5 to 1.0, and the color for the texture ranges from pale magenta to white. The color variation that you see on the third torus is characteristic of Perlin noise. The pattern is somewhat random, but it has regular, similarly sized features. With the right scaling and coloration, basic Perlin noise can make a decent cloud texture.</p> <p>The marble texture on the fourth torus in the illustration is made by adding some noise to a regular, periodic pattern. The basic technique can produce a wide variety of useful textures. The starting point is a periodic function of one variable, with values between 0.0 and 1.0. To get a periodic pattern in 2D or 3D, the input to the function can be computed from the texture coordinates. Different functions can produce very different effects. The three patterns shown here use the functions (1.0+sin(t))/2.0, abs(sin(t)) and (t\u2212floor(t)), respectively:</p> <p></p> <p>In the second image, taking the absolute value of sin(t) produces narrower, sharper dark bands than the plain sine function in the first image. This is the function that is used for the marble texture in the illustration. The sharp discontinuity in the third image can be an interesting visual effect.</p> <p>To get the 2D pattern from a function f(t) of one variable, we can use a function of a vec2, v, defined as f(a*v.x+b*v.y), where a and b are constants. The values of a and b determine the orientation and spacing of the color bands in the pattern. For a 3D pattern, we would use f(a*v.x+b*v.y+c*v.z).</p> <p>To add noise to the pattern, add a Perlin noise function to the input of the function. For a 3D pattern, the function would become</p> <pre><code>f( a*v.x + b*v.y + c*v.z + d*snoise(e*v) )\n</code></pre> <p>The new constants d and e determine the size and intensity of the perturbations to the pattern. As an example, the code that creates the marble texture for the torus is:</p> <pre><code>vec3 v = v_objCoords*scale;\nfloat t = (v.x + 2.0*v.y + 3.0*v.z);\nt += 1.5*snoise(v);\nfloat value =  abs(sin(t));\ncolor = vec3(sqrt(value));\n</code></pre> <p>(The sqrt at the end was added to make the color bands even sharper than they would be without it.)</p> <p>The following demo lets you apply a variety of 3D textures to different objects. The procedural textures used in the demo are just a small sample of the possibilities.</p> <p></p>"},{"location":"cn/c7/s3/#734-\u51f9\u51f8\u8d34\u56fe","title":"7.3.4 \u51f9\u51f8\u8d34\u56fe","text":"<p>Bumpmaps</p> \u4e2d\u6587\u82f1\u6587 <p>So far, the only textures that we have encountered have affected color. Whether they were image textures, environment maps, or procedural textures, their effect has been to vary the color on the surfaces to which they were applied. But, more generally, texture can refer to variation in any property. One example is bumpmapping, where the property that is modified by the texture is the normal vector to the surface. A normal vector determines how light is reflected by the surface, which is a major visual clue to the direction that the surface faces. Modifying the normal vectors has the effect of modifying the apparent orientation of the surface, as least with respect to the way it reflects light. It can add the appearance of roughness or \"bumps\" to the surface. The effect can be visually similar to changing the positions of points on the surface, but with bumpmapping the change in appearance is achieved without actually changing the surface geometry. The alternative approach of modifying the actual geometry, which is called \"displacement mapping,\" can give better results but requires a lot more computational and memory resources.</p> <p>The typical way to do bumpmapping is with a height map. A height map, is a grayscale image in which the variation in color is used to specify the amount by which points on the surface are (or appear to be) displaced. A height map is mapped to a surface in the same way as an image texture, using texture coordinates that are supplied as an attribute variable or generated computationally. But instead of being used to modify the color of a pixel, the color value from the height map is used to modify the normal vector that goes into the lighting equation that computes the color of the pixel. A height map that is used in this way is also called a bump map. I'm not sure that my implementation of this idea is optimal, but it can produce pretty good results.</p> <p>Here are two examples. For each example, a bumpmapped torus is shown next to the height map that was applied to the torus:</p> <p></p> <p>In the first example, the gray dots in the height map produce the appearance of bumps on the torus. The darker the color from the map, the greater apparent displacement of the point on the surface. The black centers of the dots map to the tops of the bumps. For the second example, the dark curves in the height map seem to produce deep grooves in the surface. As is usual for textures, the height maps have been stretched to cover the torus, which distorts the shape of the features from the map.</p> <p>To see how bumpmapping can be implemented, let's first imagine that we want to apply it to a one-dimensional \"surface.\" Consider a normal vector to a point on the surface, and suppose that a height map texture is applied to the surface. Take a vector, shown in black in the following illustration, that points in the direction in which the height map grayscale value is decreasing.</p> <p></p> <p>We want the surface to appear as if it is tilted, as shown in the middle of the illustration. (I'm assuming here that darker colors in the height map correspond to smaller heights.) Literally tilting the surface would change the direction of the normal vector. We can get the same change in the normal vector by adding some multiple of the vector from the height map to the original normal vector, as shown on the right above. Changing the number that is multiplied by the height map vector changes the degree of tilting of the surface. Increasing the multiplier gives a stronger bump effect. Using a negative multiple will tilt the surface in the opposite direction, which will transform \"bumps\" into \"dimples,\" and vice versa. I will refer to the multiplier as the bump strength.</p> <p>Things get a lot more complicated for two-dimensional surfaces in 3D space. A 1D \"surface\" can only be tilted left or right. On a 2D surface, there are infinitely many directions to tilt the surface. Note that the vector that points in the direction of tilt points along the surface, not perpendicular to the surface. A vector that points along a surface is called a tangent vector to the surface. To do bump mapping, we need a tangent vector for each point on the surface. Tangent vectors will have to be provided, along with normal vectors, as part of the data for the surface. For my version of bumpmapping, the tangent vector that we need should be coordinated with the texture coordinates for the surface: The tangent vector should point in the direction in which the s coordinate in the texture coordinates is increasing.</p> <p>In fact, to properly account for variation in the height map, we need a second tangent vector. The second tangent vector is perpendicular both to the normal and to the first tangent vector. It is commonly called the \"binormal\" vector, and it can be computed from the normal and the tangent. (The binormal should point in the direction in which the t texture coordinate is increasing, but whether that can be exactly true will depend on the texture mapping. As long as it's not too far off, the result should be OK.)</p> <p>Now, to modify the normal vector, proceed as follows: Sample the height maps at two points, separated by a small difference in the s coordinate. Let a be the difference between the two values; a represents the rate at which the height value is changing in the direction of the tangent vector (which, remember, points in the s direction along the surface). Then sample the height map at two points separated by a small difference in the t coordinate, and let b be the difference between the two values, so that b represents the rate at which the height value is changing in the direction of the binormal vector. Let D be the vector a*T + b*B, where T is the tangent vector and B is the binormal. Then add D, or a multiple of D, to the original normal vector to produce the modified normal that will be used in the lighting equation. (If you know multivariable calculus, what we are doing here amounts to using approximations for directional derivatives and the gradient vector of a height function on the surface.)</p> <p>I have tried to explain the procedure in the following illustration. You need to visualize the situation in 3D, noting that the normal, tangent, and binormal vectors are perpendicular to each other. The white arrows on the left are actually multiples of the binormal and tangent vectors, with lengths given by the change in color between two pixels.</p> <p></p> <p>The sample program webgl/bumpmap.html demonstrates bumpmapping. The two bumpmapped toruses in the above illustration are from that program. When you run the program, pay attention to the specular highlights! They will help you to see how a bumpmap texture differs from an image texture. The effect might be more obvious if you change the \"Diffuse Color\" from white to some other color. The specular color is always white.</p> <p>(For this program, I had to add tangent vectors to my objects. I chose three objects\u2014a cube, a cylinder, and a torus\u2014for which tangent vectors were relatively easy to compute. But, honestly, it took me a while to get all the tangent vectors pointing in the correct directions.)</p> <p>The bumpmapping is implemented in the fragment shader in the sample program. The essential problem is how to modify the normal vector. Let's examine the GLSL code that does the work:</p> <pre><code>vec3 normal = normalize( v_normal );\nvec3 tangent = normalize( v_tangent );\nvec3 binormal = cross(normal,tangent);\n\nfloat bm0, bmUp, bmRight;  // Samples from the bumpmap at three texels.\nbm0 = texture2D( bumpmap, v_texCoords ).r; \nbmUp = texture2D( bumpmap, v_texCoords + vec2(0.0, 1.0/bumpmapSize.y) ).r; \nbmRight = texture2D( bumpmap, v_texCoords + vec2(1.0/bumpmapSize.x, 0.0) ).r;\n\nvec3 bumpVector = (bmRight - bm0)*tangent + (bmUp - bm0)*binormal;\nnormal += bumpmapStrength*bumpVector;\nnormal = normalize( normalMatrix*normal );\n</code></pre> <p>The first three lines compute the normal, tangent, and binormal unit vectors. The normal and tangent come from varying variables whose values are interpolated from attribute variables, which were in turn input to the shader program from the JavaScript side. The binormal, which is perpendicular to both the normal and the tangent, is computed as the cross product of the normal and tangent (Subsection 3.5.1).</p> <p>The next four lines get the values of the height map at the pixel that corresponds to the surface point that is being processed and at two neighboring pixels. bm0 is the height map value at the current pixel, whose coordinates in the texture are given by the texture coordinates, v_texCoords. The value for bm0 is the red color component from the bumpmap texture; since the texture is grayscale, all of its color components have the same value. bmUp is the value from the pixel above the current pixel in the texture; the coordinates are computed by adding 1.0/bumpmapSize.y to the y-coordinate of the current pixel, where bumpmapSize is a uniform variable that gives the size of the texture image, in pixels. Since texture coordinates in the image run from 0.0 to 1.0, the difference in the y-coordinates of the two pixels is 1.0/bumpmapSize.y. Similarly, bmRight is the height map value for the pixel to the right of the current pixel in the bumpmap texture. I should note that the minification filter for the bumpmap texture was set to gl.NEAREST, because we need to read the actual value from the texture, not a value averaged from several pixels, as would be returned by the default minification filter.</p> <p>The two vectors (bmRight\u2212bm0)*tangent and (bmUp\u2212bm0)*binormal are the two white vectors in the above illustration. Their sum is bumpVector. A multiple of that sum is added to the normal vector to give the modified normal vector. The multiplier, bumpmapStrength, is a uniform float variable.</p> <p>All of the calculations so far have been done in the object coordinate system. The resulting normal depends only on the original object coordinates, not on any transformation that has been applied. The normal vector still has to be transformed into eye coordinates before it can be used in the lighting equation. That transformation is done in the last line of code shown above.</p> <p>So far, the only textures that we have encountered have affected color. Whether they were image textures, environment maps, or procedural textures, their effect has been to vary the color on the surfaces to which they were applied. But, more generally, texture can refer to variation in any property. One example is bumpmapping, where the property that is modified by the texture is the normal vector to the surface. A normal vector determines how light is reflected by the surface, which is a major visual clue to the direction that the surface faces. Modifying the normal vectors has the effect of modifying the apparent orientation of the surface, as least with respect to the way it reflects light. It can add the appearance of roughness or \"bumps\" to the surface. The effect can be visually similar to changing the positions of points on the surface, but with bumpmapping the change in appearance is achieved without actually changing the surface geometry. The alternative approach of modifying the actual geometry, which is called \"displacement mapping,\" can give better results but requires a lot more computational and memory resources.</p> <p>The typical way to do bumpmapping is with a height map. A height map, is a grayscale image in which the variation in color is used to specify the amount by which points on the surface are (or appear to be) displaced. A height map is mapped to a surface in the same way as an image texture, using texture coordinates that are supplied as an attribute variable or generated computationally. But instead of being used to modify the color of a pixel, the color value from the height map is used to modify the normal vector that goes into the lighting equation that computes the color of the pixel. A height map that is used in this way is also called a bump map. I'm not sure that my implementation of this idea is optimal, but it can produce pretty good results.</p> <p>Here are two examples. For each example, a bumpmapped torus is shown next to the height map that was applied to the torus:</p> <p></p> <p>In the first example, the gray dots in the height map produce the appearance of bumps on the torus. The darker the color from the map, the greater apparent displacement of the point on the surface. The black centers of the dots map to the tops of the bumps. For the second example, the dark curves in the height map seem to produce deep grooves in the surface. As is usual for textures, the height maps have been stretched to cover the torus, which distorts the shape of the features from the map.</p> <p>To see how bumpmapping can be implemented, let's first imagine that we want to apply it to a one-dimensional \"surface.\" Consider a normal vector to a point on the surface, and suppose that a height map texture is applied to the surface. Take a vector, shown in black in the following illustration, that points in the direction in which the height map grayscale value is decreasing.</p> <p></p> <p>We want the surface to appear as if it is tilted, as shown in the middle of the illustration. (I'm assuming here that darker colors in the height map correspond to smaller heights.) Literally tilting the surface would change the direction of the normal vector. We can get the same change in the normal vector by adding some multiple of the vector from the height map to the original normal vector, as shown on the right above. Changing the number that is multiplied by the height map vector changes the degree of tilting of the surface. Increasing the multiplier gives a stronger bump effect. Using a negative multiple will tilt the surface in the opposite direction, which will transform \"bumps\" into \"dimples,\" and vice versa. I will refer to the multiplier as the bump strength.</p> <p>Things get a lot more complicated for two-dimensional surfaces in 3D space. A 1D \"surface\" can only be tilted left or right. On a 2D surface, there are infinitely many directions to tilt the surface. Note that the vector that points in the direction of tilt points along the surface, not perpendicular to the surface. A vector that points along a surface is called a tangent vector to the surface. To do bump mapping, we need a tangent vector for each point on the surface. Tangent vectors will have to be provided, along with normal vectors, as part of the data for the surface. For my version of bumpmapping, the tangent vector that we need should be coordinated with the texture coordinates for the surface: The tangent vector should point in the direction in which the s coordinate in the texture coordinates is increasing.</p> <p>In fact, to properly account for variation in the height map, we need a second tangent vector. The second tangent vector is perpendicular both to the normal and to the first tangent vector. It is commonly called the \"binormal\" vector, and it can be computed from the normal and the tangent. (The binormal should point in the direction in which the t texture coordinate is increasing, but whether that can be exactly true will depend on the texture mapping. As long as it's not too far off, the result should be OK.)</p> <p>Now, to modify the normal vector, proceed as follows: Sample the height maps at two points, separated by a small difference in the s coordinate. Let a be the difference between the two values; a represents the rate at which the height value is changing in the direction of the tangent vector (which, remember, points in the s direction along the surface). Then sample the height map at two points separated by a small difference in the t coordinate, and let b be the difference between the two values, so that b represents the rate at which the height value is changing in the direction of the binormal vector. Let D be the vector a*T + b*B, where T is the tangent vector and B is the binormal. Then add D, or a multiple of D, to the original normal vector to produce the modified normal that will be used in the lighting equation. (If you know multivariable calculus, what we are doing here amounts to using approximations for directional derivatives and the gradient vector of a height function on the surface.)</p> <p>I have tried to explain the procedure in the following illustration. You need to visualize the situation in 3D, noting that the normal, tangent, and binormal vectors are perpendicular to each other. The white arrows on the left are actually multiples of the binormal and tangent vectors, with lengths given by the change in color between two pixels.</p> <p></p> <p>The sample program webgl/bumpmap.html demonstrates bumpmapping. The two bumpmapped toruses in the above illustration are from that program. When you run the program, pay attention to the specular highlights! They will help you to see how a bumpmap texture differs from an image texture. The effect might be more obvious if you change the \"Diffuse Color\" from white to some other color. The specular color is always white.</p> <p>(For this program, I had to add tangent vectors to my objects. I chose three objects\u2014a cube, a cylinder, and a torus\u2014for which tangent vectors were relatively easy to compute. But, honestly, it took me a while to get all the tangent vectors pointing in the correct directions.)</p> <p>The bumpmapping is implemented in the fragment shader in the sample program. The essential problem is how to modify the normal vector. Let's examine the GLSL code that does the work:</p> <pre><code>vec3 normal = normalize( v_normal );\nvec3 tangent = normalize( v_tangent );\nvec3 binormal = cross(normal,tangent);\n\nfloat bm0, bmUp, bmRight;  // Samples from the bumpmap at three texels.\nbm0 = texture2D( bumpmap, v_texCoords ).r; \nbmUp = texture2D( bumpmap, v_texCoords + vec2(0.0, 1.0/bumpmapSize.y) ).r; \nbmRight = texture2D( bumpmap, v_texCoords + vec2(1.0/bumpmapSize.x, 0.0) ).r;\n\nvec3 bumpVector = (bmRight - bm0)*tangent + (bmUp - bm0)*binormal;\nnormal += bumpmapStrength*bumpVector;\nnormal = normalize( normalMatrix*normal );\n</code></pre> <p>The first three lines compute the normal, tangent, and binormal unit vectors. The normal and tangent come from varying variables whose values are interpolated from attribute variables, which were in turn input to the shader program from the JavaScript side. The binormal, which is perpendicular to both the normal and the tangent, is computed as the cross product of the normal and tangent (Subsection 3.5.1).</p> <p>The next four lines get the values of the height map at the pixel that corresponds to the surface point that is being processed and at two neighboring pixels. bm0 is the height map value at the current pixel, whose coordinates in the texture are given by the texture coordinates, v_texCoords. The value for bm0 is the red color component from the bumpmap texture; since the texture is grayscale, all of its color components have the same value. bmUp is the value from the pixel above the current pixel in the texture; the coordinates are computed by adding 1.0/bumpmapSize.y to the y-coordinate of the current pixel, where bumpmapSize is a uniform variable that gives the size of the texture image, in pixels. Since texture coordinates in the image run from 0.0 to 1.0, the difference in the y-coordinates of the two pixels is 1.0/bumpmapSize.y. Similarly, bmRight is the height map value for the pixel to the right of the current pixel in the bumpmap texture. I should note that the minification filter for the bumpmap texture was set to gl.NEAREST, because we need to read the actual value from the texture, not a value averaged from several pixels, as would be returned by the default minification filter.</p> <p>The two vectors (bmRight\u2212bm0)*tangent and (bmUp\u2212bm0)*binormal are the two white vectors in the above illustration. Their sum is bumpVector. A multiple of that sum is added to the normal vector to give the modified normal vector. The multiplier, bumpmapStrength, is a uniform float variable.</p> <p>All of the calculations so far have been done in the object coordinate system. The resulting normal depends only on the original object coordinates, not on any transformation that has been applied. The normal vector still has to be transformed into eye coordinates before it can be used in the lighting equation. That transformation is done in the last line of code shown above.</p>"},{"location":"cn/c7/s3/#735-\u73af\u5883\u6620\u5c04","title":"7.3.5 \u73af\u5883\u6620\u5c04","text":"<p>Environment Mapping</p> \u4e2d\u6587\u82f1\u6587 <p>5.3.5\u5c0f\u8282 \u5c55\u793a\u4e86\u5982\u4f55\u5728 three.js \u4e2d\u4f7f\u7528\u73af\u5883\u6620\u5c04\u6765\u4f7f\u7269\u4f53\u8868\u9762\u770b\u8d77\u6765\u53cd\u5c04\u4e86\u73af\u5883\u3002\u73af\u5883\u6620\u5c04\u4f7f\u7528\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\uff0c\u5b9e\u9645\u4e0a\u53ea\u662f\u5c06\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u6620\u5c04\u5230\u8868\u9762\u4e0a\u3002\u5b83\u4e0d\u4f1a\u4f7f\u7269\u4f53\u53cd\u5c04\u5176\u73af\u5883\u4e2d\u7684\u5176\u4ed6\u7269\u4f53\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u5929\u7a7a\u76d2\u2014\u2014\u4e00\u4e2a\u56f4\u7ed5\u573a\u666f\u7684\u5927\u7acb\u65b9\u4f53\uff0c\u5c06\u7acb\u65b9\u4f53\u8d34\u56fe\u6620\u5c04\u5230\u5176\u5185\u90e8\uff0c\u6765\u4f7f\u5b83\u770b\u8d77\u6765\u597d\u50cf\u7269\u4f53\u53cd\u5c04\u4e86\u5176\u73af\u5883\u3002\u7136\u800c\uff0c\u7269\u4f53\u53ea\u4f1a\u770b\u8d77\u6765\u53cd\u5c04\u4e86\u5929\u7a7a\u76d2\u3002\u5982\u679c\u73af\u5883\u4e2d\u6709\u5176\u4ed6\u7269\u4f53\uff0c\u5b83\u4eec\u4e0d\u4f1a\u51fa\u73b0\u5728\u53cd\u5c04\u4e2d\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f webgl/skybox-and-env-map.html \u5728 WebGL \u4e2d\u5b9e\u73b0\u4e86\u73af\u5883\u6620\u5c04\u3002\u7a0b\u5e8f\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u5168\u53cd\u5c04\u7684\u7269\u4f53\u5728\u5929\u7a7a\u76d2\u5185\u90e8\u3002\u573a\u666f\u4e2d\u6ca1\u6709\u4f7f\u7528\u5149\u7167\uff1b\u5929\u7a7a\u76d2\u548c\u7269\u4f53\u7684\u989c\u8272\u76f4\u63a5\u4ece\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u4e2d\u83b7\u53d6\u3002\u7269\u4f53\u770b\u8d77\u6765\u50cf\u4e00\u9762\u5b8c\u7f8e\u7684\u955c\u5b50\u3002\u8fd9\u4e0d\u662f\u4f7f\u7528\u73af\u5883\u8d34\u56fe\u7684\u552f\u4e00\u65b9\u5f0f\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528\u5149\u7167\u65b9\u7a0b\u8ba1\u7b97\u57fa\u672c\u7269\u4f53\u989c\u8272\u2014\u2014\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u56fe\u50cf\u7eb9\u7406\u2014\u2014\u5e76\u5c06\u73af\u5883\u8d34\u56fe\u4e0e\u57fa\u672c\u989c\u8272\u6df7\u5408\uff0c\u4ee5\u7ed9\u4eba\u4e00\u79cd\u6709\u5149\u6cfd\u4f46\u4e0d\u662f\u5b8c\u5168\u53cd\u5c04\u7684\u8868\u9762\u7684\u7684\u5916\u89c2\u3002\u7136\u800c\uff0c\u793a\u4f8b\u7a0b\u5e8f\u7684\u8981\u70b9\u53ea\u662f\u5c55\u793a\u5982\u4f55\u5728 WebGL \u4e2d\u4f7f\u7528\u5929\u7a7a\u76d2\u548c\u73af\u5883\u8d34\u56fe\u3002\u7528\u4e8e\u5b9e\u73b0\u8fd9\u4e00\u70b9\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u76f8\u5f53\u77ed\u3002</p> <p>\u81f3\u4e8e\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u672c\u8eab\uff0c6.4.4\u5c0f\u8282 \u5c55\u793a\u4e86\u5982\u4f55\u5c06\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u52a0\u8f7d\u4e3a\u516d\u4e2a\u5355\u72ec\u7684\u56fe\u50cf\uff0c\u4ee5\u53ca\u5982\u4f55\u5728 GLSL \u4e2d\u4f7f\u7528 samplerCube \u7c7b\u578b\u7684\u53d8\u91cf\u8bbf\u95ee\u8be5\u7eb9\u7406\u3002\u8bf7\u8bb0\u4f4f\uff0c\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u662f\u4f7f\u7528\u4ece\u539f\u70b9\u6307\u5411\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u8981\u91c7\u6837\u7684\u70b9\u7684 3D \u5411\u91cf\u6765\u91c7\u6837\u7684\u3002</p> <p>\u6e32\u67d3\u5929\u7a7a\u76d2\u5f88\u5bb9\u6613\uff1a\u7ed8\u5236\u4e00\u4e2a\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u7684\u5927\u7acb\u65b9\u4f53\uff0c\u5305\u56f4\u573a\u666f\u548c\u6444\u50cf\u673a\u4f4d\u7f6e\u3002\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7ed9\u50cf\u7d20\u4e0a\u8272\uff0c\u4f7f\u7528\u4ece\u539f\u70b9\u7a7f\u8fc7\u6b63\u5728\u6e32\u67d3\u7684\u7acb\u65b9\u4f53\u4e0a\u7684\u70b9\u7684\u5411\u91cf\u6765\u91c7\u6837\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\uff0c\u4ee5\u4fbf\u7acb\u65b9\u4f53\u4e0a\u67d0\u70b9\u7684\u989c\u8272\u4e0e\u7acb\u65b9\u4f53\u8d34\u56fe\u4e2d\u76f8\u5e94\u70b9\u7684\u989c\u8272\u76f8\u540c\u3002\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u5728\u65cb\u8f6c\u89c6\u56fe\u65f6\u5e94\u8be5\u5c06\u7eb9\u7406\u9644\u52a0\u5230\u7acb\u65b9\u4f53\u4e0a\uff0c\u56e0\u6b64\u4f7f\u7528\u7acb\u65b9\u4f53\u7684\u5bf9\u8c61\u5750\u6807\u6765\u91c7\u6837\u7eb9\u7406\u3002</p> <p>\u5728\u6e32\u67d3\u5929\u7a7a\u76d2\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\uff0c\u9876\u70b9\u7740\u8272\u5668\u53ea\u9700\u8981\u50cf\u901a\u5e38\u4e00\u6837\u8ba1\u7b97 gl_Position\uff0c\u5e76\u5c06\u5bf9\u8c61\u5750\u6807\u4f5c\u4e3a\u53d8\u5316\u53d8\u91cf\u4f20\u9012\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u3002\u8fd9\u662f\u5929\u7a7a\u76d2\u7684\u9876\u70b9\u7740\u8272\u5668\u6e90\u4ee3\u7801\uff1a</p> <pre><code>uniform mat4 projection;\nuniform mat4 modelview;\nattribute vec3 coords;\nvarying vec3 v_objCoords;\nvoid main() {\n    vec4 eyeCoords = modelview * vec4(coords,1.0);\n    gl_Position = projection * eyeCoords;\n    v_objCoords = coords;\n}\n</code></pre> <p>\u7247\u6bb5\u7740\u8272\u5668\u7b80\u5355\u5730\u4f7f\u7528\u5bf9\u8c61\u5750\u6807\u901a\u8fc7\u91c7\u6837\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u6765\u83b7\u53d6\u7247\u6bb5\u989c\u8272\uff1a</p> <pre><code>precision mediump float;\nvarying vec3 v_objCoords;\nuniform samplerCube skybox;\nvoid main() {\n    gl_FragColor = textureCube(skybox, v_objCoords);\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u7528\u4e8e\u91c7\u6837\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u7684\u5411\u91cf\u4e0d\u5fc5\u662f\u5355\u4f4d\u5411\u91cf\uff1b\u5b83\u53ea\u662f\u5fc5\u987b\u6307\u5411\u6b63\u786e\u7684\u65b9\u5411\u3002</p> <p>\u8981\u7406\u89e3\u5982\u4f55\u5c06\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u4f5c\u4e3a\u53cd\u5c04\u8d34\u56fe\u5e94\u7528\u5230\u7269\u4f53\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u95ee\u81ea\u5df1\uff0c\u5728\u7269\u4f53\u4e0a\u7684\u67d0\u4e00\u70b9\u5e94\u8be5\u770b\u5230\u7eb9\u7406\u4e2d\u7684\u54ea\u4e2a\u70b9\uff1f\u5982\u679c\u6211\u4eec\u5c06\u7eb9\u7406\u89c6\u4e3a\u5b9e\u9645\u7684\u73af\u5883\uff0c\u90a3\u4e48\u5149\u7ebf\u4f1a\u4ece\u73af\u5883\u4e2d\u6765\uff0c\u51fb\u4e2d\u7269\u4f53\uff0c\u7136\u540e\u53cd\u5c04\u5230\u89c2\u5bdf\u8005\u90a3\u91cc\u3002\u6211\u4eec\u53ea\u9700\u8981\u4ece\u89c2\u5bdf\u8005\u90a3\u91cc\u8ffd\u8e2a\u90a3\u6761\u5149\u7ebf\u56de\u5230\u7269\u4f53\uff0c\u7136\u540e\u56de\u5230\u73af\u5883\u3002\u53cd\u5c04\u5149\u7ebf\u7684\u65b9\u5411\u603b\u662f\u7531\u6cd5\u7ebf\u5411\u91cf\u51b3\u5b9a\u7684\u3002\u8003\u8651\u51e0\u4f55\u4f53\u7684 2D \u7248\u672c\u3002\u4f60\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a 3D \u51e0\u4f55\u4f53\u7684\u6a2a\u622a\u9762\uff1a</p> <p></p> <p>\u5728\u8fd9\u5f20\u63d2\u56fe\u4e2d\uff0c\u865a\u7ebf\u6846\u4ee3\u8868\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u3002\uff08\u4f60\u771f\u7684\u5e94\u8be5\u5c06\u5176\u89c6\u4e3a\u5728\u65e0\u9650\u8fdc\u5904\u3002\uff09V \u662f\u4ece\u7269\u4f53\u6307\u5411\u89c2\u5bdf\u8005\u7684\u5411\u91cf\u3002N \u662f\u8868\u9762\u7684\u6cd5\u7ebf\u5411\u91cf\u3002\u800c R \u662f V \u901a\u8fc7 N \u7684\u53cd\u5c04\u3002R \u6307\u5411\u7acb\u65b9\u4f53\u8d34\u56fe\u4e2d\u89c2\u5bdf\u8005\u5728\u8868\u9762\u4e0a\u67d0\u70b9\u53ef\u4ee5\u770b\u5230\u7684\u7eb9\u7406\u5143\u7d20\uff1b\u5b83\u662f\u9700\u8981\u7528\u6765\u91c7\u6837\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u5411\u91cf\u3002\u56fe\u7247\u663e\u793a\u4e86\u8868\u9762\u4e0a\u4e24\u4e2a\u4e0d\u540c\u70b9\u7684\u4e09\u4e2a\u5411\u91cf\u3002\u5728 GLSL \u4e2d\uff0cR \u53ef\u4ee5\u88ab\u8ba1\u7b97\u4e3a \u2212reflect(V, N)\u3002</p> <p>\u5982\u679c\u540c\u4e00\u4e2a\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u4e5f\u5e94\u7528\u5230\u5929\u7a7a\u76d2\u4e0a\uff0c\u5b83\u770b\u8d77\u6765\u5c31\u50cf\u7269\u4f53\u53cd\u5c04\u4e86\u5929\u7a7a\u76d2\u2014\u2014\u4f46 \u53ea\u6709 \u5f53\u6ca1\u6709\u5bf9\u5929\u7a7a\u76d2\u7acb\u65b9\u4f53\u5e94\u7528\u53d8\u6362\u65f6\u3002\u539f\u56e0\u662f\u53d8\u6362\u5929\u7a7a\u76d2\u4e0d\u4f1a\u81ea\u52a8\u53d8\u6362\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u3002\u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u65cb\u8f6c\u89c6\u56fe\uff0c\u6211\u4eec\u9700\u8981\u80fd\u591f\u53d8\u6362\u5929\u7a7a\u76d2\u3002\u6211\u4eec\u5e0c\u671b\u53cd\u5c04\u7269\u4f53\u770b\u8d77\u6765\u50cf\u662f\u5728\u53cd\u5c04\u53d8\u6362\u540e\u7684\u5929\u7a7a\u76d2\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u4f4d\u7f6e\u3002\u90a3\u79cd\u89c2\u5bdf\u53d8\u6362\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5bf9\u5929\u7a7a\u76d2\u5efa\u6a21\u53d8\u6362\uff0c\u4ee5\u53ca\u573a\u666f\u4e2d\u5176\u4ed6\u7269\u4f53\u7684\u53d8\u6362\u3002\u6211\u4eec\u5fc5\u987b\u5f04\u6e05\u695a\u5982\u4f55\u4f7f\u5176\u9002\u7528\u4e8e\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u3002\u8ba9\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u5728 2D \u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u5c06\u89c6\u56fe\u65cb\u8f6c -30 \u5ea6\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fd9\u4e0e\u5c06\u5929\u7a7a\u76d2\u548c\u7269\u4f53\u65cb\u8f6c 30 \u5ea6\u76f8\u540c\u3002\u5728\u63d2\u56fe\u4e2d\uff0c\u6211\u5c06\u89c2\u5bdf\u8005\u753b\u5728\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u5e76\u65cb\u8f6c\u4e86\u573a\u666f\u3002\u5e26\u6709\u8f83\u6de1\u865a\u7ebf\u8f6e\u5ed3\u7684\u6b63\u65b9\u5f62\u662f\u5929\u7a7a\u76d2\u3002\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u6ca1\u6709\u79fb\u52a8\uff1a</p> <p></p> <p>\u5982\u679c\u6211\u4eec\u50cf\u4ee5\u524d\u4e00\u6837\u8ba1\u7b97 R \u5e76\u7528\u5b83\u6765\u91c7\u6837\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u7eb9\u7406\u4e2d\u7684\u9519\u8bef\u70b9\u3002\u89c2\u5bdf\u8005\u5e94\u8be5\u770b\u5230\u7684\u662f R \u4e0e\u5929\u7a7a\u76d2\u76f8\u4ea4\u7684\u70b9\uff0c\u800c\u4e0d\u662f R \u4e0e\u7eb9\u7406\u76f8\u4ea4\u7684\u70b9\u3002\u6b63\u786e\u7684\u7eb9\u7406\u70b9\u7531\u5411\u91cf T \u6311\u9009\u51fa\u6765\u3002T \u901a\u8fc7\u89c2\u5bdf\u53d8\u6362\u7684\u9006\u53d8\u6362 R \u6765\u8ba1\u7b97\u3002R \u88ab\u89c2\u5bdf\u53d8\u6362\u65cb\u8f6c\u4e86\uff1b\u9006\u89c2\u5bdf\u53d8\u6362\u64a4\u9500\u4e86\u90a3\u4e2a\u53d8\u6362\uff0c\u5c06 T \u653e\u5165\u4e0e\u7acb\u65b9\u8d34\u56fe\u76f8\u540c\u7684\u5750\u6807\u7cfb\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e R \u88ab\u65cb\u8f6c\u4e86 30 \u5ea6\uff0c\u6240\u4ee5\u5e94\u7528\u4e86 -30 \u5ea6\u7684\u65cb\u8f6c\u6765\u8ba1\u7b97 T\u3002\uff08\u8fd9\u53ea\u662f\u7406\u89e3\u51e0\u4f55\u4f53\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u66f4\u613f\u610f\u5c06\u7acb\u65b9\u4f53\u8d34\u56fe\u89c6\u4e3a\u4e0e\u5929\u7a7a\u76d2\u4e00\u8d77\u65cb\u8f6c\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5728\u91c7\u6837\u7eb9\u7406\u4e4b\u524d\u5bf9\u7eb9\u7406\u5e94\u7528\u7eb9\u7406\u53d8\u6362\u2014\u2014\u8fd9\u4e5f\u662f\u8bf4\u6211\u4eec\u9700\u8981\u5728\u91c7\u6837\u7eb9\u7406\u4e4b\u524d\u5bf9 R \u8fdb\u884c\u53d8\u6362\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002\uff09</p> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6765\u8868\u793a\u7269\u4f53\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u4e0e\u7528\u6765\u6e32\u67d3\u5929\u7a7a\u76d2\u7684\u7a0b\u5e8f\u4e0d\u540c\u3002\u9876\u70b9\u7740\u8272\u5668\u975e\u5e38\u5178\u578b\u3002\u6ce8\u610f\uff0c\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u53ef\u4ee5\u5305\u62ec\u9664\u4e86\u5e94\u7528\u4e8e\u6574\u4e2a\u573a\u666f\u7684\u89c2\u5bdf\u53d8\u6362\u4e4b\u5916\uff0c\u8fd8\u5e94\u7528\u4e8e\u7269\u4f53\u7684\u5efa\u6a21\u53d8\u6362\u3002\u4ee5\u4e0b\u662f\u6e90\u4ee3\u7801\uff1a</p> <pre><code>uniform mat4 projection;\nuniform mat4 modelview;\nattribute vec3 coords;\nattribute vec3 normal;\nvarying vec3 v_eyeCoords;\nvarying vec3 v_normal;\nvoid main() {\n    vec4 eyeCoords = modelview * vec4(coords,1.0);\n    gl_Position = projection * eyeCoords;\n    v_eyeCoords = eyeCoords.xyz;\n    v_normal = normalize(normal);\n}\n</code></pre> <p>\u9876\u70b9\u7740\u8272\u5668\u5c06\u773c\u775b\u5750\u6807\u4f5c\u4e3a\u4e00\u4e2a\u53d8\u5316\u53d8\u91cf\u4f20\u9012\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u3002\u5728\u773c\u775b\u5750\u6807\u4e2d\uff0c\u89c2\u5bdf\u8005\u4f4d\u4e8e\u70b9 (0,0,0)\uff0c\u6307\u5411\u89c2\u5bdf\u8005\u7684\u4ece\u8868\u9762\u5230\u89c2\u5bdf\u8005\u7684\u5411\u91cf V \u5c31\u662f \u2212v_eyeCoords\u3002</p> <p>\u7247\u6bb5\u7740\u8272\u5668\u7684\u6e90\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e0a\u8ff0\u91c7\u6837\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u7684\u7b97\u6cd5\u3002\u7531\u4e8e\u6211\u4eec\u6b63\u5728\u505a\u5b8c\u7f8e\u53cd\u5c04\uff0c\u7247\u6bb5\u7684\u989c\u8272\u76f4\u63a5\u6765\u81ea\u7eb9\u7406\uff1a</p> <pre><code>precision mediump float;\nvarying vec3 vCoords;\nvarying vec3 v_normal;\nvarying vec3 v_eyeCoords;\nuniform samplerCube skybox;\nuniform mat3 normalMatrix;\nuniform mat3 inverseViewTransform;\nvoid main() {\n    vec3 N = normalize(normalMatrix * v_normal);\n    vec3 V = -v_eyeCoords;\n    vec3 R = -reflect(V,N);\n    vec3 T = inverseViewTransform * R;\n    gl_FragColor = textureCube(skybox, T);\n}\n</code></pre> <p>inverseViewTransform \u662f\u5728 JavaScript \u7aef\u4ece\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u8ba1\u7b97\u5f97\u51fa\u7684\uff0c\u5728\u5e94\u7528\u4e86\u89c2\u5bdf\u53d8\u6362\u4f46\u5c1a\u672a\u5e94\u7528\u4efb\u4f55\u989d\u5916\u5efa\u6a21\u53d8\u6362\u4e4b\u540e\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>mat3.fromMat4(inverseViewTransform, modelview);\nmat3.invert(inverseViewTransform,inverseViewTransform);\n</code></pre> <p>\u6211\u4eec\u9700\u8981\u4e00\u4e2a mat3 \u6765\u53d8\u6362\u4e00\u4e2a\u5411\u91cf\u3002\u7b2c\u4e00\u884c\u4e22\u5f03\u4e86\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u7684\u5e73\u79fb\u90e8\u5206\uff0c\u5c06\u7ed3\u679c\u653e\u5728 inverseViewTransform \u4e2d\u3002\u5e73\u79fb\u4e0d\u5f71\u54cd\u5411\u91cf\uff0c\u4f46\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u89c2\u5bdf\u53d8\u6362\u53ea\u662f\u65cb\u8f6c\uff0c\u6240\u4ee5\u5e73\u79fb\u90e8\u5206\u65e0\u8bba\u5982\u4f55\u90fd\u662f\u96f6\u3002\u7b2c\u4e8c\u884c\u5c06 inverseViewTransform \u8f6c\u6362\u6210\u5b83\u7684\u9006\u77e9\u9635\u3002</p> <p>Subsection 5.3.5 showed how to use environment mapping in three.js to make it look like the surface of an object reflects an environment. Environment mapping uses a cubemap texture, and it is really just a way of mapping a cubemap texture to the surface. It doesn't make the object reflect other objects in its environment. We can make it look as if the object is reflecting its environment by adding a skybox\u2014a large cube surrounding the scene, with the cubemap mapped onto its interior. However, the object will only seem to be reflecting the skybox. And if there are other objects in the environment, they won't be part of the reflection.</p> <p>The sample program webgl/skybox-and-env-map.html implements environment mapping in WebGL. The program shows a single fully reflective object inside a skybox. No lighting is used in the scene; the colors for both the skybox and the object are taken directly from the cubemap texture. The object looks like a perfect mirror. This is not the only way of using an environment map. For example, a basic object color could be computed using the lighting equation\u2014perhaps even with an image texture\u2014and the environment map could be blended with the basic color to give the appearance of a shiny but not fully reflective surface. However, the point of the sample program is just to show how to use a skybox and environment map in WebGL. The shader programs that are used to do that are actually quite short.</p> <p>As for the cubemap texture itself, Subsection 6.4.4 showed how to load a cubemap texture as six separate images and how to access that texture in GLSL using a variable of type samplerCube. Remember that a cubemap texture is sampled using a 3D vector that points from the origin towards the point on the cube where the texture is to be sampled.</p> <p>It's easy to render the skybox: Draw a large cube, centered at the origin, enclosing the scene and the camera position. To color a pixel in the fragment shader, sample the cubemap texture using a vector that points from the origin through the point on the cube that is being rendered, so that the color of a point on the cube is the same as the color of the corresponding point in the cubemap. Note that it is the cube's object coordinates that are used to sample the texture, since the texture should be attached to the cube when we rotate the view.</p> <p>In the shader program for rendering a skybox, the vertex shader just needs to compute gl_Position as usual and pass the object coordinates on to the fragment shader in a varying variable. Here is the vertex shader source code for the skybox:</p> <pre><code>uniform mat4 projection;\nuniform mat4 modelview;\nattribute vec3 coords;\nvarying vec3 v_objCoords;\nvoid main() {\n    vec4 eyeCoords = modelview * vec4(coords,1.0);\n    gl_Position = projection * eyeCoords;\n    v_objCoords = coords;\n}\n</code></pre> <p>And the fragment shader simply uses the object coordinates to get the fragment color by sampling the cubemap texture:</p> <pre><code>precision mediump float;\nvarying vec3 v_objCoords;\nuniform samplerCube skybox;\nvoid main() {\n    gl_FragColor = textureCube(skybox, v_objCoords);\n}\n</code></pre> <p>Note that the vector that is used to sample a cubemap texture does not have to be a unit vector; it just has to point in the correct direction.</p> <p>To understand how a cube map texture can be applied to an object as a reflection map, we have to ask what point from the texture should be visible at a point on the object? If we think of the texture as an actual environment, then a ray of light would come from the environment, hit the object, and be reflected towards the viewer. We just have to trace that light ray back from the viewer to the object and then to the environment. The direction in which the light ray is reflected is determined, as always, by the normal vector. Consider a 2D version of the geometry. You can think of this as a cross-section of the 3D geometry:</p> <p></p> <p>In this illustration, the dotted box represents the cubemap texture. (You really should think of it as being at infinite distance.) V is a vector that points from the object towards the viewer. N is the normal vector to the surface. And R is the reflection of V through N. R points to the texel in the cubemap texture that is visible to the viewer at the point on the surface; it is the vector that is needed to sample the cubemap texture. The picture shows the three vectors at two different points on the surface. In GLSL, R can be computed as \u2212reflect(V, N).</p> <p>If the same cubemap texture is also applied to a skybox, it will look as if the object is reflecting the skybox\u2014but only if no transformation has been applied to the skybox cube. The reason is that transforming the skybox does not automatically transform the cubemap texture. Since we want to be able to rotate the view, we need to be able to transform the skybox. And we want the reflected object to look like it is reflecting the skybox in its transformed position, not in its original position. That viewing transformation can be thought of as a modeling transformation on the skybox, as well as on other objects in the scene. We have to figure out how to make it apply to the cubemap texture. Let's think about what happens in the 2D case when we rotate the view by \u221230 degrees. That's the same as rotating the skybox and object by 30 degrees. In the illustration, I've drawn the viewer at the same position as before, and I have rotated the scene. The square with the fainter dotted outline is the skybox. The cubemap texture hasn't moved:</p> <p></p> <p>If we compute R as before and use it to sample the cubemap texture, we get the wrong point in the texture. The viewer should see the point where R intersects the skybox, not the point where R intersects the texture. The correct point in the texture is picked out by the vector T. T is computed by transforming R by the inverse of the viewing transformation. R was rotated by the viewing transformation; the inverse viewing transformation undoes that transformation, putting T into the same coordinate system as the cube map. In this case, since R was rotated by 30 degrees, a rotation of \u221230 degrees is applied to compute T. (This is just one way to understand the geometry. If you prefer to think of the cubemap as rotating along with the skybox, then we need to apply a texture transformation to the texture\u2014which is another way of saying that we need to transform R before using it to sample the texture.)</p> <p>In the sample program, the shader program that is used to represent the object is different from the one used to render the skybox. The vertex shader is very typical. Note that the modelview transformation can include modeling transforms that are applied to the object in addition to the viewing transform that is applied to the entire scene. Here is the source code:</p> <pre><code>uniform mat4 projection;\nuniform mat4 modelview;\nattribute vec3 coords;\nattribute vec3 normal;\nvarying vec3 v_eyeCoords;\nvarying vec3 v_normal;\nvoid main() {\n    vec4 eyeCoords = modelview * vec4(coords,1.0);\n    gl_Position = projection * eyeCoords;\n    v_eyeCoords = eyeCoords.xyz;\n    v_normal = normalize(normal);\n}\n</code></pre> <p>The vertex shader passes eye coordinates to the fragment shader in a varying variable. In eye coordinates, the viewer is at the point (0,0,0), and the vector V that points from the surface to the viewer is simply \u2212v_eyeCoords.</p> <p>The source code for the fragment shader implements the algorithm discussed above for sampling the cubemap texture. Since we are doing perfect reflection, the color for the fragment comes directly from the texture:</p> <pre><code>precision mediump float;\nvarying vec3 vCoords;\nvarying vec3 v_normal;\nvarying vec3 v_eyeCoords;\nuniform samplerCube skybox;\nuniform mat3 normalMatrix;\nuniform mat3 inverseViewTransform;\nvoid main() {\n    vec3 N = normalize(normalMatrix * v_normal);\n    vec3 V = -v_eyeCoords;\n    vec3 R = -reflect(V,N);\n    vec3 T = inverseViewTransform * R;\n    gl_FragColor = textureCube(skybox, T);\n}\n</code></pre> <p>The inverseViewTransform is computed on the JavaScript side from the modelview matrix, after the viewing transform has been applied but before any addition modeling transformation is applied, using the commands</p> <pre><code>mat3.fromMat4(inverseViewTransform, modelview);\nmat3.invert(inverseViewTransform,inverseViewTransform);\n</code></pre> <p>We need a mat3 to transform a vector. The first line discards the translation part of the modelview matrix, putting the result in inverseViewTransform. Translation doesn't affect vectors, but the translation part is zero in any case since the viewing transformation in this program is just a rotation. The second line converts inverseViewTransform into its inverse.</p>"},{"location":"cn/c7/s4/","title":"7.4 \u5e27\u7f13\u51b2\u533a","text":"<p>Framebuffers</p> \u4e2d\u6587\u82f1\u6587 <p>\"\u5e27\u7f13\u51b2\u533a\"\u8fd9\u4e2a\u672f\u8bed\u4f20\u7edf\u4e0a\u6307\u7684\u662f\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u5b83\u4fdd\u5b58\u4e86\u5728\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u663e\u793a\u7684\u56fe\u50cf\u7684\u989c\u8272\u6570\u636e\u3002\u5728 WebGL \u4e2d\uff0c\u4e00\u4e2a \u5e27\u7f13\u51b2\u533a \u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7ec4\u7ec7\u4e86\u6e32\u67d3\u56fe\u50cf\u6240\u9700\u7684\u5185\u5b58\u8d44\u6e90\u3002WebGL \u56fe\u5f62\u4e0a\u4e0b\u6587\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5e27\u7f13\u51b2\u533a\uff0c\u7528\u4e8e\u5c4f\u5e55\u4e0a\u51fa\u73b0\u7684\u56fe\u50cf\u3002\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\u662f\u7531\u521b\u5efa\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684 canvas.getContext() \u8c03\u7528\u521b\u5efa\u7684\u3002\u5b83\u7684\u5c5e\u6027\u53d6\u51b3\u4e8e\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u7684\u9009\u9879\uff0c\u5e76\u4e14\u5728\u521b\u5efa\u540e\u4e0d\u80fd\u66f4\u6539\u3002\u7136\u800c\uff0c\u53ef\u4ee5\u521b\u5efa\u989d\u5916\u7684\u5e27\u7f13\u51b2\u533a\uff0c\u5176\u5c5e\u6027\u7531 WebGL \u7a0b\u5e8f\u63a7\u5236\u3002\u5b83\u4eec\u53ef\u4ee5\u7528\u4e8e\u79bb\u5c4f\u6e32\u67d3\uff0c\u5e76\u4e14\u5bf9\u4e8e\u67d0\u4e9b\u9ad8\u7ea7\u6e32\u67d3\u7b97\u6cd5\u662f\u5fc5\u9700\u7684\u3002</p> <p>\u5e27\u7f13\u51b2\u533a\u53ef\u4ee5\u4f7f\u7528\u989c\u8272\u7f13\u51b2\u533a\u6765\u4fdd\u5b58\u56fe\u50cf\u7684\u989c\u8272\u6570\u636e\uff0c\u4f7f\u7528\u6df1\u5ea6\u7f13\u51b2\u533a\u6765\u4fdd\u5b58\u6bcf\u4e2a\u50cf\u7d20\u7684\u6df1\u5ea6\u503c\uff0c\u4ee5\u53ca\u4f7f\u7528\u6240\u8c13\u7684\u6a21\u677f\u7f13\u51b2\u533a\uff08\u672c\u6559\u79d1\u4e66\u4e2d\u4e0d\u6d89\u53ca\uff09\u3002\u8fd9\u4e9b\u7f13\u51b2\u533a\u88ab\u79f0\u4e3a\u201c\u9644\u52a0\u201d\u5230\u5e27\u7f13\u51b2\u533a\u3002\u5bf9\u4e8e\u975e\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\uff0cWebGL \u7a0b\u5e8f\u53ef\u4ee5\u968f\u65f6\u9644\u52a0\u548c\u5206\u79bb\u7f13\u51b2\u533a\u3002\u5e27\u7f13\u51b2\u533a\u4e0d\u9700\u8981\u5b8c\u6574\u7684\u4e09\u5957\u7f13\u51b2\u533a\uff0c\u4f46\u4f60\u9700\u8981\u4e00\u4e2a\u989c\u8272\u7f13\u51b2\u533a\u3001\u6df1\u5ea6\u7f13\u51b2\u533a\u6216\u4e24\u8005\u517c\u6709\u624d\u80fd\u4f7f\u7528\u5e27\u7f13\u51b2\u533a\u8fdb\u884c\u6e32\u67d3\u3002\u5982\u679c\u5728\u6e32\u67d3\u5230\u5e27\u7f13\u51b2\u533a\u65f6\u6ca1\u6709\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u4e00\u4e9b\u6e32\u67d3\u7b97\u6cd5\uff0c\u5982\u9634\u5f71\u6620\u5c04(5.3.3\u5c0f\u8282)\uff0c\u4f7f\u7528\u4e00\u4e2a\u53ea\u6709\u6df1\u5ea6\u7f13\u51b2\u533a\u800c\u6ca1\u6709\u989c\u8272\u7f13\u51b2\u533a\u7684\u5e27\u7f13\u51b2\u533a\u3002\u5728 WebGL 2.0 \u4e2d\uff0c\u8fd8\u53ef\u4ee5\u5c06\u591a\u4e2a\u989c\u8272\u7f13\u51b2\u533a\u9644\u52a0\u5230\u540c\u4e00\u4e2a\u5e27\u7f13\u51b2\u533a\uff0c\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u9ad8\u7ea7\u7b97\u6cd5\u548c\u8ba1\u7b97\u5e94\u7528\u975e\u5e38\u6709\u7528\u3002\uff08\u53e6\u89c17.5.4\u5c0f\u8282\u3002\uff09</p> <p>\u6e32\u67d3\u51fd\u6570 gl.drawArrays() \u548c gl.drawElements() \u4f1a\u5f71\u54cd\u5f53\u524d\u5e27\u7f13\u51b2\u533a\uff0c\u6700\u521d\u662f\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\u3002\u5f53\u524d\u5e27\u7f13\u51b2\u533a\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u66f4\u6539\uff1a</p> <pre><code>gl.bindFramebuffer(gl.FRAMEBUFFER, frameBufferObject);\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u59cb\u7ec8\u662f gl.FRAMEBUFFER\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f null\uff0c\u4ee5\u9009\u62e9\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\u8fdb\u884c\u7ed8\u5236\uff0c\u6216\u8005\u662f\u901a\u8fc7\u51fd\u6570 gl.createFramebuffer() \u521b\u5efa\u7684\u975e\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\uff0c\u4e0b\u9762\u5c06\u8ba8\u8bba\u8fd9\u4e2a\u51fd\u6570\u3002</p> <p>The term \"frame buffer\" traditionally refers to the region of memory that holds the color data for the image displayed on a computer screen. In WebGL, a framebuffer is a data structure that organizes the memory resources that are needed to render an image. A WebGL graphics context has a default framebuffer, which is used for the image that appears on the screen. The default framebuffer is created by the call to canvas.getContext() that creates the graphics context. Its properties depend on the options that are passed to that function and cannot be changed after it is created. However, additional framebuffers can be created, with properties controlled by the WebGL program. They can be used for off-screen rendering, and they are required for certain advanced rendering algorithms.</p> <p>A framebuffer can use a color buffer to hold the color data for an image, a depth buffer to hold a depth value for each pixel, and something called a stencil buffer (which is not covered in this textbook). The buffers are said to be \"attached\" to the framebuffer. For a non-default framebuffer, buffers can be attached and detached by the WebGL program at any time. A framebuffer doesn't need a full set of three buffers, but you need a color buffer, a depth buffer, or both to be able to use the framebuffer for rendering. If the depth test is not enabled when rendering to the framebuffer, then no depth buffer is needed. And some rendering algorithms, such as shadow mapping (Subsection 5.3.3) use a framebuffer with a depth buffer but no color buffer. In WebGL 2.0, it is also possible to attach several color buffers to the same framebuffer, which can be useful for certain advanced algorithms and computational applications. (Also, see Subsection 7.5.4.)</p> <p>The rendering functions gl.drawArrays() and gl.drawElements() affect the current framebuffer, which is initially the default framebuffer. The current framebuffer can be changed by calling</p> <pre><code>gl.bindFramebuffer( gl.FRAMEBUFFER, frameBufferObject );\n</code></pre> <p>The first parameter to this function is always gl.FRAMEBUFFER. The second parameter can be null to select the default framebuffer for drawing, or it can be a non-default framebuffer created by the function gl.createFramebuffer(), which will be discussed below.</p>"},{"location":"cn/c7/s4/#741-\u5e27\u7f13\u51b2\u533a\u64cd\u4f5c","title":"7.4.1 \u5e27\u7f13\u51b2\u533a\u64cd\u4f5c","text":"<p>Framebuffer Operations</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6211\u4eec\u8ba8\u8bba\u4f7f\u7528\u975e\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\u7684\u793a\u4f8b\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u770b\u770b\u4e00\u4e9b\u5f71\u54cd\u5f53\u524d\u6d3b\u52a8\u5e27\u7f13\u51b2\u533a\u6e32\u67d3\u7684 WebGL \u8bbe\u7f6e\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u7684\u4f8b\u5b50\u5305\u62ec\u7528\u4e8e\u586b\u5145\u989c\u8272\u7f13\u51b2\u533a\u7684\u6e05\u9664\u989c\u8272\uff0c\u5f53\u8c03\u7528 gl.clear() \u65f6\u4f7f\u7528\uff0c\u4ee5\u53ca\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\u7684\u72b6\u6001\u3002</p> <p>\u53e6\u4e00\u4e2a\u5f71\u54cd\u6df1\u5ea6\u7f13\u51b2\u533a\u4f7f\u7528\u7684\u4f8b\u5b50\u662f \u6df1\u5ea6\u63a9\u7801\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u63a7\u5236\u662f\u5426\u5728\u6e32\u67d3\u671f\u95f4\u5411\u6df1\u5ea6\u7f13\u51b2\u533a\u5199\u5165\u503c\u3002\uff08\u6df1\u5ea6\u6d4b\u8bd5\u7684\u542f\u7528\u72b6\u6001\u51b3\u5b9a\u662f\u5426\u5728\u6e32\u67d3\u671f\u95f4 \u4f7f\u7528 \u6df1\u5ea6\u7f13\u51b2\u533a\u4e2d\u7684\u503c\uff1b\u6df1\u5ea6\u63a9\u7801\u51b3\u5b9a\u662f\u5426\u5411\u6df1\u5ea6\u7f13\u51b2\u533a \u5199\u5165 \u65b0\u503c\u3002\uff09\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5173\u95ed\u5411\u6df1\u5ea6\u7f13\u51b2\u533a\u5199\u5165\uff1a</p> <pre><code>gl.depthMask(false);\n</code></pre> <p>\u901a\u8fc7\u8c03\u7528 <code>gl.depthMask(true)</code> \u53ef\u4ee5\u91cd\u65b0\u6253\u5f00\u5199\u5165\u3002\u9ed8\u8ba4\u503c\u662f true\u3002</p> <p>\u4f7f\u7528\u6df1\u5ea6\u63a9\u7801\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u6e32\u67d3\u534a\u900f\u660e\u51e0\u4f55\u4f53\u3002\u5f53\u573a\u666f\u4e2d\u7684\u4e00\u4e9b\u5bf9\u8c61\u662f\u534a\u900f\u660e\u7684\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u6e32\u67d3\u6240\u6709\u7684\u4e0d\u900f\u660e\u5bf9\u8c61\uff0c\u7136\u540e\u662f\u534a\u900f\u660e\u5bf9\u8c61\u3002\u5047\u8bbe\u4f60\u5148\u6e32\u67d3\u4e86\u4e00\u4e2a\u534a\u900f\u660e\u5bf9\u8c61\uff0c\u7136\u540e\u53c8\u6e32\u67d3\u4e86\u4e00\u4e2a\u4f4d\u4e8e\u534a\u900f\u660e\u5bf9\u8c61\u540e\u9762\u7684\u4e0d\u900f\u660e\u5bf9\u8c61\u3002\u6df1\u5ea6\u6d4b\u8bd5\u4f1a\u5bfc\u81f4\u4e0d\u900f\u660e\u5bf9\u8c61\u88ab\u534a\u900f\u660e\u5bf9\u8c61\u9690\u85cf\u3002\u4f46\u662f\u201c\u534a\u900f\u660e\u201d\u610f\u5473\u7740\u4e0d\u900f\u660e\u5bf9\u8c61\u5e94\u8be5\u80fd\u591f\u901a\u8fc7\u534a\u900f\u660e\u5bf9\u8c61\u770b\u5230\u3002\u56e0\u6b64\uff0c\u9996\u5148\u6e32\u67d3\u6240\u6709\u4e0d\u900f\u660e\u5bf9\u8c61\u975e\u5e38\u91cd\u8981\u3002\u5728\u6e32\u67d3\u534a\u900f\u660e\u5bf9\u8c61\u65f6\uff0c\u901a\u8fc7\u8c03\u7528 <code>gl.depthMask(false)</code> \u5173\u95ed\u5411\u6df1\u5ea6\u7f13\u51b2\u533a\u5199\u5165\u4e5f\u5f88\u91cd\u8981\u3002\u539f\u56e0\u662f\u4e00\u4e2a\u5728\u53e6\u4e00\u4e2a\u534a\u900f\u660e\u5bf9\u8c61\u540e\u9762\u7ed8\u5236\u7684\u534a\u900f\u660e\u5bf9\u8c61\u5e94\u8be5\u80fd\u591f\u901a\u8fc7\u524d\u9762\u7684\u5bf9\u8c61\u770b\u5230\u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u5728\u6e32\u67d3\u534a\u900f\u660e\u5bf9\u8c61\u65f6\uff0c\u6df1\u5ea6\u6d4b\u8bd5\u4ecd\u7136\u5fc5\u987b\u542f\u7528\uff0c\u56e0\u4e3a\u534a\u900f\u660e\u5bf9\u8c61\u53ef\u80fd\u88ab\u4e0d\u900f\u660e\u5bf9\u8c61\u9690\u85cf\u3002\u6b64\u5916\uff0c\u5728\u6e32\u67d3\u534a\u900f\u660e\u5bf9\u8c61\u65f6\uff0c\u5fc5\u987b\u542f\u7528 alpha \u6df7\u5408\u3002</p> <p>\u8981\u6b63\u786e\u6e32\u67d3\u534a\u900f\u660e\u5bf9\u8c61\uff0c\u5e94\u8be5\u5728\u6e32\u67d3\u4e4b\u524d\u5c06\u534a\u900f\u660e\u539f\u8bed\u6309\u4ece\u540e\u5230\u524d\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u5982\u753b\u5bb6\u7b97\u6cd5 (3.1.4\u5c0f\u8282) \u4e2d\u6240\u8ff0\u3002\u7136\u800c\uff0c\u8fd9\u53ef\u80fd\u96be\u4ee5\u5b9e\u73b0\uff0c\u6709\u65f6\u53ef\u4ee5\u901a\u8fc7\u6309\u4efb\u610f\u987a\u5e8f\uff08\u4f46\u4ecd\u5728\u4e0d\u900f\u660e\u539f\u8bed\u4e4b\u540e\uff09\u6e32\u67d3\u534a\u900f\u660e\u539f\u8bed\u83b7\u5f97\u53ef\u63a5\u53d7\u7684\u7ed3\u679c\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u5728\u6f14\u793a c3/rotation-axis.html \u4ece 3.2.2\u5c0f\u8282 \u548c c3/transform-equivalence-3d.html \u4ece 3.3.4\u5c0f\u8282 \u4e2d\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002</p> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u989c\u8272\u63a9\u7801 \u63a7\u5236\u5411\u989c\u8272\u7f13\u51b2\u533a\u7684\u5199\u5165\u3002\u989c\u8272\u7f13\u51b2\u533a\u6709\u56db\u4e2a\u201c\u901a\u9053\u201d\uff0c\u5206\u522b\u5bf9\u5e94\u989c\u8272\u7684\u7ea2\u8272\u3001\u7eff\u8272\u3001\u84dd\u8272\u548c alpha \u5206\u91cf\u3002\u6bcf\u4e2a\u901a\u9053\u53ef\u4ee5\u5355\u72ec\u63a7\u5236\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5141\u8bb8\u5411\u7ea2\u8272\u548c alpha \u989c\u8272\u901a\u9053\u5199\u5165\uff0c\u540c\u65f6\u963b\u6b62\u5411\u7eff\u8272\u548c\u84dd\u8272\u901a\u9053\u5199\u5165\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5b8c\u6210\uff1a</p> <pre><code>gl.colorMask(true, false, false, true);\n</code></pre> <p><code>gl.colorMask</code> \u51fd\u6570\u63a5\u53d7\u56db\u4e2a\u53c2\u6570\uff0c\u6bcf\u4e2a\u989c\u8272\u901a\u9053\u4e00\u4e2a\u3002true \u503c\u5141\u8bb8\u5411\u901a\u9053\u5199\u5165\uff1bfalse \u503c\u963b\u6b62\u5199\u5165\u3002\u5728\u6e32\u67d3\u671f\u95f4\uff0c\u5982\u679c\u67d0\u4e2a\u901a\u9053\u7684\u5199\u5165\u88ab\u963b\u6b62\uff0c\u76f8\u5e94\u989c\u8272\u5206\u91cf\u7684\u503c\u5c06\u88ab\u5ffd\u7565\u3002</p> <p>\u4f7f\u7528\u989c\u8272\u63a9\u7801\u7684\u4e00\u4e2a\u7528\u9014\u662f\u7528\u4e8e\u7ea2\u84dd\u7acb\u4f53\u6e32\u67d3 (5.3.1\u5c0f\u8282)\u3002\u7ea2\u84dd\u7acb\u4f53\u56fe\u50cf\u5305\u542b\u573a\u666f\u7684\u4e24\u5f20\u56fe\u50cf\uff0c\u4e00\u5f20\u7528\u4e8e\u5de6\u773c\uff0c\u4e00\u5f20\u7528\u4e8e\u53f3\u773c\u3002\u4e00\u5f20\u56fe\u50cf\u4ec5\u4f7f\u7528\u7ea2\u8272\u9634\u5f71\u7ed8\u5236\uff0c\u800c\u53e6\u4e00\u5f20\u4ec5\u4f7f\u7528\u7eff\u8272\u548c\u84dd\u8272\u7684\u7ec4\u5408\u3002\u4e24\u5f20\u56fe\u50cf\u4ece\u7565\u5fae\u4e0d\u540c\u7684\u89c6\u70b9\u7ed8\u5236\uff0c\u5bf9\u5e94\u4e8e\u5de6\u773c\u548c\u53f3\u773c\u7684\u89c6\u56fe\u3002\u56e0\u6b64\uff0c\u7ea2\u84dd\u7acb\u4f53\u7684\u7b97\u6cd5\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>gl.clearColor(0,0,0,1);\ngl.clear( gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT );\ngl.colorMask( true, false, false, false ); // \u4ec5\u5411\u7ea2\u8272\u901a\u9053\u5199\u5165\n... // \u8bbe\u7f6e\u5de6\u773c\u7684\u89c6\u56fe\n... // \u6e32\u67d3\u573a\u666f\ngl.clear( gl.DEPTH_BUFFER_BIT ); // \u4ec5\u6e05\u9664\u6df1\u5ea6\u7f13\u51b2\u533a\ngl.colorMask( false, true, true, false );  // \u5411\u7eff\u8272\u548c\u84dd\u8272\u901a\u9053\u5199\u5165\n... // \u8bbe\u7f6e\u53f3\u773c\u7684\u89c6\u56fe\n... // \u6e32\u67d3\u573a\u666f\n</code></pre> <p>\u8bbe\u7f6e\u5de6\u773c\u548c\u53f3\u773c\u89c6\u56fe\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u7b80\u5355\u5730\u56f4\u7ed5 y \u8f74\u65cb\u8f6c\u51e0\u5ea6\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u7ed8\u5236\u7b2c\u4e8c\u5f20\u56fe\u50cf\u4e4b\u524d\uff0c\u5fc5\u987b\u6e05\u9664\u6df1\u5ea6\u7f13\u51b2\u533a\u800c\u4e0d\u662f\u989c\u8272\u7f13\u51b2\u533a\uff0c\u56e0\u4e3a\u5426\u5219\u6df1\u5ea6\u6d4b\u8bd5\u5c06\u963b\u6b62\u7b2c\u4e8c\u5f20\u56fe\u50cf\u7684\u67d0\u4e9b\u90e8\u5206\u88ab\u5199\u5165\u3002</p> <p>\u6700\u540e\uff0c\u6211\u60f3\u66f4\u8be6\u7ec6\u5730\u770b\u770b\u6df7\u5408\uff08Blending\uff09\u3002\u6df7\u5408\u6307\u7684\u662f\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u7247\u6bb5\u989c\u8272\u4e0e\u989c\u8272\u7f13\u51b2\u533a\u4e2d\u7247\u6bb5\u7684\u5f53\u524d\u989c\u8272\u5982\u4f55\u7ed3\u5408\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5047\u8bbe\u7247\u6bb5\u901a\u8fc7\u4e86\u6df1\u5ea6\u6d4b\u8bd5\uff0c\u662f\u7528\u7247\u6bb5\u989c\u8272\u66ff\u6362\u5f53\u524d\u989c\u8272\u3002\u5f53\u542f\u7528\u6df7\u5408\u65f6\uff0c\u5f53\u524d\u989c\u8272\u53ef\u4ee5\u88ab\u66ff\u6362\u4e3a\u5f53\u524d\u989c\u8272\u548c\u7247\u6bb5\u989c\u8272\u7684\u67d0\u79cd\u7ec4\u5408\u3002\u4e4b\u524d\uff0c\u6211\u53ea\u8ba8\u8bba\u4e86\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u7528\u7528\u4e8e\u900f\u660e\u5ea6\u7684 alpha \u6df7\u5408\uff1a</p> <pre><code>gl.enable(gl.BLEND);\ngl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n</code></pre> <p><code>gl.blendFunc()</code> \u51fd\u6570\u51b3\u5b9a\u4e86\u5982\u4f55\u4ece\u5f53\u524d\u989c\u8272\u548c\u7247\u6bb5\u989c\u8272\u8ba1\u7b97\u65b0\u989c\u8272\u3002\u5728\u8fd9\u91cc\u663e\u793a\u7684\u53c2\u6570\u4e0b\uff0c\u4f7f\u7528 GLSL \u8bed\u6cd5\u7684\u516c\u5f0f\u4e3a\u65b0\u989c\u8272\uff1a</p> <pre><code>(src * src.a) + (dest * (1-src.a))\n</code></pre> <p>\u5176\u4e2d src \u662f\u201c\u6e90\u201d\u989c\u8272\uff08\u5373\u6b63\u5728\u5199\u5165\u7684\u989c\u8272\uff0c\u7247\u6bb5\u989c\u8272\uff09\uff0cdest \u662f\u201c\u76ee\u6807\u201d\u989c\u8272\uff08\u5373\u5f53\u524d\u5728\u989c\u8272\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\uff0c\u662f\u6e32\u67d3\u64cd\u4f5c\u7684\u76ee\u6807\uff09\u3002src.a \u662f\u6e90\u989c\u8272\u7684 alpha \u5206\u91cf\u3002<code>gl.blendFunc()</code> \u7684\u53c2\u6570\u51b3\u5b9a\u4e86\u516c\u5f0f\u4e2d\u7684\u7cfb\u6570 \u2014\u2014 src.a \u548c (1\u2212src.a)\u3002\u6df7\u5408\u51fd\u6570\u7684\u9ed8\u8ba4\u7cfb\u6570\u7531\u4ee5\u4e0b\u7ed9\u51fa\uff1a</p> <pre><code>gl.blendFunc(gl.ONE, gl.ZERO);\n</code></pre> <p>\u8fd9\u6307\u5b9a\u4e86\u516c\u5f0f\uff1a</p> <pre><code>(src * 1) + (dest * 0)\n</code></pre> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u989c\u8272\u7b49\u4e8e\u6e90\u989c\u8272\uff1b\u6ca1\u6709\u6df7\u5408\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6df7\u5408\u540c\u65f6\u9002\u7528\u4e8e\u989c\u8272\u7684 alpha \u5206\u91cf\u548c RGB \u5206\u91cf\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u3002\u5f53\u4f7f\u7528\u534a\u900f\u660e\u989c\u8272\u7ed8\u5236\u65f6\uff0c\u610f\u5473\u7740\u5199\u5165\u989c\u8272\u7f13\u51b2\u533a\u7684\u989c\u8272\u5c06\u6709\u4e00\u4e2a\u5c0f\u4e8e 1 \u7684 alpha \u5206\u91cf\u3002\u5f53\u5728\u7f51\u9875\u4e0a\u7684\u753b\u5e03\u4e0a\u6e32\u67d3\u65f6\uff0c\u8fd9\u5c06\u4f7f\u753b\u5e03\u672c\u8eab\u534a\u900f\u660e\uff0c\u5141\u8bb8\u753b\u5e03\u7684\u80cc\u666f\u900f\u8fc7\u3002\uff08\u8fd9\u5047\u8bbe WebGL \u4e0a\u4e0b\u6587\u662f\u4f7f\u7528 alpha \u901a\u9053\u521b\u5efa\u7684\uff0c\u8fd9\u662f\u9ed8\u8ba4\u8bbe\u7f6e\u3002\uff09\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u66ff\u4ee3\u547d\u4ee4\u8bbe\u7f6e\u6df7\u5408\u51fd\u6570\uff1a</p> <pre><code>gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE);\n</code></pre> <p>\u4e24\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6307\u5b9a\u4e86\u7528\u4e8e\u516c\u5f0f\u4e2d alpha \u5206\u91cf\u7684\u72ec\u7acb\u7cfb\u6570\uff0c\u800c\u524d\u4e24\u4e2a\u53c2\u6570\u4ec5\u7528\u4e8e RGB \u5206\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\u989c\u8272\u7f13\u51b2\u533a\u7684\u65b0\u989c\u8272\uff1a</p> <pre><code>vec4((src.rgb * src.a) + (dest.rgb * (1 - src.a)), src.a * 0 + dest.a * 1);\n</code></pre> <p>\u4f7f\u7528\u8fd9\u4e2a\u516c\u5f0f\uff0c\u76ee\u6807\uff08\u989c\u8272\u7f13\u51b2\u533a\uff09\u4e2d\u7684 alpha \u5206\u91cf\u4fdd\u6301\u5176\u539f\u59cb\u503c\u4e0d\u53d8\u3002</p> <p>\u7531 <code>gl.blendFunc(gl.ONE,gl.ONE)</code> \u8bbe\u7f6e\u7684\u6df7\u5408\u51fd\u6570\u6709\u65f6\u53ef\u4ee5\u7528\u4e8e \u591a\u904d\u7b97\u6cd5\u3002\u5728\u591a\u904d\u7b97\u6cd5\u4e2d\uff0c\u573a\u666f\u88ab\u6e32\u67d3\u591a\u6b21\uff0c\u7ed3\u679c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u7ec4\u5408\u4ee5\u4ea7\u751f\u6700\u7ec8\u56fe\u50cf\u3002\uff08\u7ea2\u84dd\u7acb\u4f53\u6e32\u67d3\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\uff09\u5982\u679c\u4f60\u60f3\u7b80\u5355\u5730\u5c06\u5404\u4e2a\u904d\u5386\u7684\u7ed3\u679c\u52a0\u8d77\u6765\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u586b\u5145\u989c\u8272\u7f13\u51b2\u533a\u4e3a\u96f6\uff0c\u542f\u7528\u6df7\u5408\uff0c\u5e76\u5728\u6e32\u67d3\u671f\u95f4\u5c06\u6df7\u5408\u51fd\u6570\u8bbe\u7f6e\u4e3a (gl.ONE,gl.ONE)\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u793a\u4f8b\u7a0b\u5e8f webgl/image-blur.html \u4f7f\u7528\u591a\u904d\u7b97\u6cd5\u6765\u5b9e\u73b0\u6a21\u7cca\u6548\u679c\u3002\u793a\u4f8b\u4e2d\u7684\u573a\u666f\u53ea\u662f\u4e00\u4e2a\u5e94\u7528\u5230\u77e9\u5f62\u7684\u7eb9\u7406\u56fe\u50cf\uff0c\u6240\u4ee5\u6548\u679c\u662f\u6a21\u7cca\u7eb9\u7406\u56fe\u50cf\u3002\u8be5\u6280\u672f\u6d89\u53ca\u5c06\u573a\u666f\u7ed8\u5236\u4e5d\u6b21\u3002\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\uff0c\u989c\u8272\u88ab\u9664\u4ee5\u4e5d\u3002\u6df7\u5408\u7528\u4e8e\u5c06\u4e5d\u6b21\u904d\u5386\u7684\u7247\u6bb5\u989c\u8272\u76f8\u52a0\uff0c\u4ee5\u4fbf\u989c\u8272\u7f13\u51b2\u533a\u4e2d\u7684\u6700\u7ec8\u989c\u8272\u662f\u4e5d\u6b21\u904d\u5386\u7684\u989c\u8272\u5e73\u5747\u503c\u3002\u5bf9\u4e8e\u4e5d\u6b21\u4e2d\u7684\u516b\u6b21\uff0c\u573a\u666f\u4ece\u539f\u59cb\u4f4d\u7f6e\u7a0d\u5fae\u504f\u79fb\uff0c\u4ee5\u4fbf\u6700\u7ec8\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u989c\u8272\u662f\u8be5\u50cf\u7d20\u4ee5\u53ca\u539f\u59cb\u573a\u666f\u4e2d\u5468\u56f4\u50cf\u7d20\u7684\u989c\u8272\u7684\u5e73\u5747\u503c\u3002</p> <p>Before we get to examples of using non-default framebuffers, we look at some WebGL settings that affect rendering into whichever framebuffer is current. Examples that we have already seen include the clear color, which is used to fill the color buffer when gl.clear() is called, and the enabled state of the depth test.</p> <p>Another example that affects the use of the depth buffer is the depth mask, a boolean value that controls whether values are written to the depth buffer during rendering. (The enabled state of the depth test determines whether values from the depth buffer are used during rendering; the depth mask determines whether new values are written to the depth buffer.) Writing to the depth buffer can be turned off with the command</p> <pre><code>gl.depthMask( false );\n</code></pre> <p>and can be turned back on by calling gl.depthMask(true). The default value is true.</p> <p>One example of using the depth mask is for rendering translucent geometry. When some of the objects in a scene are translucent, then all of the opaque objects should be rendered first, followed by the translucent objects. Suppose that you rendered a translucent object, and then rendered an opaque object that lies behind the translucent object. The depth test would cause the opaque object to be hidden by the translucent object. But \"translucent\" means that the opaque object should be visible through the translucent object. So it's important to render all the opaque objects first. And it's important to turn off writing to the depth buffer, by calling gl.depthMask(false), while rendering the translucent objects. The reason is that a translucent object that is drawn behind another translucent object should be visible through the front object. Note, however, that the depth test must still be enabled while the translucent objects are being rendered, since a translucent object can be hidden by an opaque object. Also, alpha blending must be on while rendering the translucent objects.</p> <p>For fully correct rendering of translucent objects, the translucent primitives should be sorted into back-to-front order before rendering, as in the painter's algorithm (Subsection 3.1.4). However, that can be difficult to implement, and acceptable results can sometimes be obtained by rendering the translucent primitives in arbitrary order (but still after the opaque primitives). In fact that was done in the demos c3/rotation-axis.html from Subsection 3.2.2 and c3/transform-equivalence-3d.html from Subsection 3.3.4.</p> <p>It is also possible to control writing to the color buffer, using the color mask. The color buffer has four \"channels\" corresponding to the red, green, blue, and alpha components of the color. Each channel can be controlled separately. You could, for example, allow writing to the red and alpha color channels, while blocking writing to the green and blue channels. That would be done with the command</p> <pre><code>gl.colorMask( true, false, false, true );\n</code></pre> <p>The colorMask function takes four parameters, one for each color channel. A true value allows writing to the channel; a false value blocks writing. When writing is blocked for a channel during rendering, the value of the corresponding color component is simply ignored.</p> <p>One use of the color mask is for anaglyph stereo rendering (Subsection 5.3.1). An anaglyph stereo image contains two images of the scene, one intended for the left eye and one for the right eye. One image is drawn using only shades of red, while the other uses only combinations of green and blue. The two images are drawn from slightly different viewpoints, corresponding to the views from the left and the right eye. So the algorithm for anaglyph stereo has the form</p> <pre><code>gl.clearColor(0,0,0,1);\ngl.clear( gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT );\ngl.colorMask( true, false, false, false ); // write to red channel only\n... // set up view from left eye\n... // render the scene\ngl.clear( gl.DEPTH_BUFFER_BIT ); // clear only the depth buffer\ngl.colorMask( false, true, true, false );  // write to green and blue channels\n... // set up view from right eye\n... // render the scene\n</code></pre> <p>One way to set up the views from the left and right eyes is simply to rotate the view by a few degrees about the y-axis. Note that the depth buffer, but not the color buffer, must be cleared before drawing the second image, since otherwise the depth test would prevent some parts of the second image from being written.</p> <p>Finally, I would like to look at blending in more detail. Blending refers to how the fragment color from the fragment shader is combined with the current color of the fragment in the color buffer. The default, assuming that the fragment passes the depth test, is to replace the current color with the fragment color. When blending is enabled, the current color can be replaced with some combination of the current color and the fragment color. Previously, I have only discussed turning on alpha blending for transparency with the commands</p> <pre><code>gl.enable( gl.BLEND );\ngl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\n</code></pre> <p>The function gl.blendFunc() determines how the new color is computed from the current color and the fragment color. With the parameters shown here, the formula for the new color, using GLSL syntax, is</p> <pre><code>(src * src.a) + (dest * (1-src.a))\n</code></pre> <p>where src is the \"source\" color (that is, the color that is being written, the fragment color) and dest is the \"destination\" color (that is, the color currently in the color buffer, which is the destination of the rendering operation). And src.a is the alpha component of the source color. The parameters to gl.blendFunc() determine the coefficients\u2014 src.a and (1\u2212src.a)\u2014in the formula. The default coefficients for the blend function are given by</p> <pre><code>gl.blendFunc( gl.ONE, gl.ZERO );\n</code></pre> <p>which specifies the formula</p> <pre><code>(src * 1) + (dest * 0)\n</code></pre> <p>That is, the new color is equal to the source color; there is no blending.</p> <p>Note that blending applies to the alpha component as well as the RGB components of the color, which is probably not what you want. When drawing with a translucent color, it means that the color that is written to the color buffer will have an alpha component less than 1. When rendering to a canvas on a web page, this will make the canvas itself translucent, allowing the background of the canvas to show through. (This assumes that the WebGL context was created with an alpha channel, which is the default.) To avoid that, you can set the blend function with the alternative command</p> <pre><code>gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, \n                                                    gl.ZERO, gl.ONE );\n</code></pre> <p>The two extra parameters specify separate coefficients to be used for the alpha component in the formula, while the first two parameters are used only for the RGB components. That is, the new color for the color buffer is computed using the formula</p> <pre><code>vec4( (src.rgb*src.a) + (dest.rgb*(1-src.a)), src.a*0 + dest.a*1  );\n</code></pre> <p>With this formula, the alpha component in the destination (the color buffer) remains the same as its original value.</p> <p>The blend function set by gl.blendFunc(gl.ONE,gl.ONE) can sometimes be used in multi-pass algorithms. In a multi-pass algorithm, a scene is rendered several times, and the results are combined somehow to produce the final image. (Anaglyph stereo rendering is an example.) If you simply want to add up the results of the various passes, then you can fill the color buffer with zeros, enable blending, and set the blend function to (gl.ONE,gl.ONE) during rendering.</p> <p>As a simple example, the sample program webgl/image-blur.html uses a multi-pass algorithm to implement blurring. The scene in the example is just a texture image applied to a rectangle, so the effect is to blur the texture image. The technique involves drawing the scene nine times. In the fragment shader, the color is divided by nine. Blending is used to add the fragment colors from the nine passes, so that the final color in the color buffer is the average of the colors from the nine passes. For eight of the nine passes, the scene is offset slightly from its original position, so that the color of a pixel in the final image is the average of the colors of that pixel and the surrounding pixels from the original scene.</p>"},{"location":"cn/c7/s4/#742-\u6e32\u67d3\u5230\u7eb9\u7406","title":"7.4.2 \u6e32\u67d3\u5230\u7eb9\u7406","text":"<p>Render To Texture</p> \u4e2d\u6587\u82f1\u6587 <p>\u524d\u4e00\u8282\u9002\u7528\u4e8e\u4efb\u4f55\u5e27\u7f13\u51b2\u533a\u3002\u4f46\u6211\u4eec\u8fd8\u6ca1\u6709\u4f7f\u7528\u8fc7\u975e\u9ed8\u8ba4\u7684\u5e27\u7f13\u51b2\u533a\u3002\u6211\u4eec\u73b0\u5728\u8f6c\u5411\u90a3\u4e2a\u8bdd\u9898\u3002</p> <p>\u975e\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\u7684\u4e00\u4e2a\u7528\u9014\u662f\u76f4\u63a5\u5c06\u5185\u5bb9\u6e32\u67d3\u5230\u7eb9\u7406\u4e2d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7eb9\u7406\u56fe\u50cf\u6240\u5360\u7684\u5185\u5b58\u53ef\u4ee5\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\u4f5c\u4e3a\u5176\u989c\u8272\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u6e32\u67d3\u64cd\u4f5c\u5c06\u5b83\u4eec\u7684\u8f93\u51fa\u53d1\u9001\u5230\u7eb9\u7406\u56fe\u50cf\u4e2d\u3002\u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a\u6e32\u67d3\u5230\u7eb9\u7406\uff0c\u5728\u793a\u4f8b\u7a0b\u5e8f webgl/render-to-texture.html \u4e2d\u4f7f\u7528\u4e86\u6b64\u6280\u672f\u3002</p> <p>\u901a\u5e38\u5728\u52a0\u8f7d\u56fe\u50cf\u5230\u7eb9\u7406\u65f6\u5206\u914d\u7eb9\u7406\u5185\u5b58\uff0c\u4f7f\u7528\u7684\u51fd\u6570\u662f gl.texImage2D \u6216 gl.copyTexImage2D\u3002\uff08\u89c1 \u7b2c6.4\u8282\u3002\uff09\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u7248\u672c\u7684 gl.texImage2D \u53ef\u4ee5\u7528\u6765\u5728\u4e0d\u52a0\u8f7d\u56fe\u50cf\u5230\u8be5\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\u5206\u914d\u5185\u5b58\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8f\uff1a</p> <pre><code>texture = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 512, 512, \n                            0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n</code></pre> <p>\u6700\u540e\u4e00\u884c\u7684 null \u53c2\u6570\u544a\u8bc9 gl.texImage2D \u5206\u914d\u65b0\u5185\u5b58\uff0c\u800c\u4e0d\u52a0\u8f7d\u73b0\u6709\u7684\u56fe\u50cf\u6570\u636e\u6765\u586b\u5145\u8be5\u5185\u5b58\u3002\u76f8\u53cd\uff0c\u65b0\u5185\u5b58\u7528\u96f6\u586b\u5145\u3002gl.texImage2D \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u7eb9\u7406\u76ee\u6807\u3002\u5bf9\u4e8e\u666e\u901a\u7eb9\u7406\uff0c\u76ee\u6807\u662f gl.TEXTURE_2D\uff0c\u4f46\u5176\u4ed6\u503c\u7528\u4e8e\u5904\u7406\u7acb\u65b9\u4f53\u8d34\u56fe\u3002\u7b2c\u56db\u548c\u7b2c\u4e94\u4e2a\u53c2\u6570\u6307\u5b9a\u56fe\u50cf\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\uff1b\u5b83\u4eec\u5e94\u8be5\u662f2\u7684\u5e42\u3002\u5176\u4ed6\u53c2\u6570\u901a\u5e38\u5177\u6709\u8fd9\u91cc\u663e\u793a\u7684\u503c\uff1b\u5b83\u4eec\u7684\u542b\u4e49\u4e0e 6.4.3\u5c0f\u8282 \u4e2d\u8ba8\u8bba\u7684 gl.texImage2D \u7248\u672c\u76f8\u540c\u3002\u8bf7\u6ce8\u610f\uff0c\u5fc5\u987b\u9996\u5148\u521b\u5efa\u5e76\u7ed1\u5b9a\u7eb9\u7406\u5bf9\u8c61\uff1bgl.texImage2D \u9002\u7528\u4e8e\u5f53\u524d\u7ed1\u5b9a\u5230\u6d3b\u52a8\u7eb9\u7406\u5355\u5143\u7684\u7eb9\u7406\u3002\uff08\u5728 WebGL 2.0 \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 6.4.6\u5c0f\u8282 \u4e2d\u8ba8\u8bba\u7684 gl.texStorage2D() \u51fd\u6570\u6765\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\u3002\uff09</p> <p>\u8981\u5c06\u7eb9\u7406\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\uff0c\u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5e27\u7f13\u51b2\u533a\u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7\u7ed1\u5b9a\u4f7f\u5176\u6210\u4e3a\u5f53\u524d\u5e27\u7f13\u51b2\u533a\u3002\u4f8b\u5982\uff0c</p> <pre><code>framebuffer = gl.createFramebuffer();\ngl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n</code></pre> <p>\u7136\u540e\u53ef\u4ee5\u4f7f\u7528 gl.framebufferTexture2D \u51fd\u6570\u5c06\u7eb9\u7406\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\uff1a</p> <pre><code>gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, \n                                                gl.TEXTURE_2D, texture, 0 );\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u59cb\u7ec8\u662f gl.FRAMEBUFFER\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u6b63\u5728\u9644\u52a0\u989c\u8272\u7f13\u51b2\u533a\u3002gl.COLOR_ATTACHMENT0 \u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u96f6\uff0c\u8fd9\u5141\u8bb8\u6709\u591a\u4e2a\u989c\u8272\u7f13\u51b2\u533a\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\uff08\u5c3d\u7ba1\u5728\u6807\u51c6 WebGL 1.0 \u4e2d\uff0c\u53ea\u5141\u8bb8\u4e00\u4e2a\u989c\u8272\u7f13\u51b2\u533a\uff09\u3002\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e0e gl.texImage2D \u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u7684\u7eb9\u7406\u76ee\u6807\uff0c\u7b2c\u56db\u4e2a\u662f\u7eb9\u7406\u5bf9\u8c61\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f mipmap \u7ea7\u522b\uff1b\u5b83\u901a\u5e38\u662f\u96f6\uff0c\u8fd9\u610f\u5473\u7740\u6e32\u67d3\u5230\u7eb9\u7406\u56fe\u50cf\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5176 mipmap \u56fe\u50cf\u4e4b\u4e00\u3002</p> <p>\u6709\u4e86\u8fd9\u4e2a\u8bbe\u7f6e\uff0c\u4f60\u51c6\u5907\u597d\u7ed1\u5b9a\u5e27\u7f13\u51b2\u533a\u5e76\u7ed8\u5236\u5230\u7eb9\u7406\u4e86\u3002\u7ed8\u5236\u7eb9\u7406\u540e\uff0c\u8c03\u7528</p> <pre><code>gl.bindFramebuffer( gl.FRAMEBUFFER, null );\n</code></pre> <p>\u4ee5\u91cd\u65b0\u5f00\u59cb\u7ed8\u5236\u5230\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\u3002\u6b64\u65f6\uff0c\u7eb9\u7406\u5df2\u51c6\u5907\u597d\u5728\u540e\u7eed\u7684\u6e32\u67d3\u64cd\u4f5c\u4e2d\u4f7f\u7528\u3002\u7eb9\u7406\u5bf9\u8c61\u53ef\u4ee5\u7ed1\u5b9a\u5230\u7eb9\u7406\u5355\u5143\uff0c\u5e76\u4e14\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528 sampler2D \u53d8\u91cf\u4ece\u7eb9\u7406\u4e2d\u8bfb\u53d6\u3002</p> <p>\u4f60\u5f88\u53ef\u80fd\u4f1a\u5728\u7ed8\u5236\u5230\u7eb9\u7406\u548c\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\u4f7f\u7528\u4e0d\u540c\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u51fd\u6570 gl.useProgram() \u7528\u4e8e\u6307\u5b9a\u7740\u8272\u5668\u7a0b\u5e8f\u3002</p> <p>\u5728 \u793a\u4f8b\u7a0b\u5e8f \u4e2d\uff0c\u7eb9\u7406\u53ef\u4ee5\u52a8\u753b\u5316\u3002\u5728\u52a8\u753b\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u52a8\u753b\u5e27\u90fd\u4f1a\u5c06\u65b0\u56fe\u50cf\u7ed8\u5236\u5230\u7eb9\u7406\u4e2d\u3002\u7eb9\u7406\u56fe\u50cf\u662f 2D \u7684\uff0c\u6240\u4ee5\u5728\u6e32\u67d3\u5b83\u65f6\u7981\u7528\u4e86\u6df1\u5ea6\u6d4b\u8bd5\u3002\u8fd9\u610f\u5473\u7740\u5e27\u7f13\u51b2\u533a\u4e0d\u9700\u8981\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u6e32\u67d3\u51fd\u6570\u5927\u81f4\u5f62\u5f0f\u5982\u4e0b</p> <pre><code>function draw() {\n\n    /* \u5c06 2D \u56fe\u50cf\u7ed8\u5236\u5230\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\u7684\u7eb9\u7406\u4e2d\u3002 */\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.useProgram(prog_texture);  // \u7528\u4e8e\u7eb9\u7406\u7684\u7740\u8272\u5668\u7a0b\u5e8f\n\n    gl.clearColor(1,1,1,1);\n    gl.clear(gl.COLOR_BUFFER_BIT);  // \u5c06\u7eb9\u7406\u6e05\u9664\u4e3a\u767d\u8272\n\n    gl.enable(gl.BLEND);  // \u5728\u7ed8\u5236 2D \u56fe\u50cf\u65f6\u4f7f\u7528\u900f\u660e\u5ea6\u3002    \n    gl.disable(gl.DEPTH_TEST); // \u5e27\u7f13\u51b2\u533a\u751a\u81f3\u6ca1\u6709\u6df1\u5ea6\u7f13\u51b2\u533a\uff01\n    gl.viewport(0,0,512,512);  // \u89c6\u53e3\u4e0d\u4f1a\u81ea\u52a8\u8bbe\u7f6e\uff01\n\n    .\n    .  // \u7ed8\u5236\u6bcf\u4e2a\u5e27\u90fd\u4f1a\u53d8\u5316\u7684\u7eb9\u7406\u56fe\u50cf\n    .\n\n    gl.disable(gl.BLEND);\n\n    /* \u73b0\u5728\u4f7f\u7528\u7eb9\u7406\u7ed8\u5236\u4e3b\u573a\u666f\uff0c\u5b83\u662f 3D \u7684\u3002 */\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null); // \u7ed8\u5236\u5230\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\u3002\n    gl.useProgram(prog);  // \u7528\u4e8e\u5c4f\u5e55\u4e0a\u56fe\u50cf\u7684\u7740\u8272\u5668\u7a0b\u5e8f\n    gl.clearColor(0,0,0,1);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.DEPTH_TEST);\n    gl.viewport(0,0,canvas.width,canvas.height);  // \u91cd\u7f6e\u89c6\u53e3\uff01\n\n    .\n    .   // \u7ed8\u5236\u573a\u666f\n    .\n\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5f53\u7ed8\u5236\u5230\u975e\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\u65f6\uff0c\u5fc5\u987b\u624b\u52a8\u8bbe\u7f6e\u89c6\u53e3\u3002\u7136\u540e\u5728\u7ed8\u5236\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u65f6\uff0c\u5fc5\u987b\u91cd\u7f6e\u89c6\u53e3\u4ee5\u5339\u914d\u6e32\u67d3\u5c4f\u5e55\u4e0a\u56fe\u50cf\u7684\u753b\u5e03\u5927\u5c0f\u3002\u6211\u8fd8\u5e94\u8be5\u6307\u51fa\uff0c\u6b64\u7a0b\u5e8f\u4e2d\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a\u7eb9\u7406\u5bf9\u8c61\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u671f\u95f4\u4e00\u6b21\u6027\u7ed1\u5b9a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728 draw() \u51fd\u6570\u4e2d\u4e0d\u9700\u8981\u8c03\u7528 gl.bindTexture()\u3002</p> <p>\u8fd9\u4e2a\u793a\u4f8b\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5e27\u7f13\u51b2\u533a\u6765\u5b9e\u73b0\uff0c\u5c31\u50cf 4.3.6\u5c0f\u8282 \u4e2d\u7684\u793a\u4f8b\u90a3\u6837\u3002\u5728\u90a3\u4e2a\u793a\u4f8b\u4e2d\uff0c\u7eb9\u7406\u56fe\u50cf\u88ab\u7ed8\u5236\u5230\u9ed8\u8ba4\u5e27\u7f13\u51b2\u533a\uff0c\u7136\u540e\u590d\u5236\u5230\u7eb9\u7406\u5bf9\u8c61\u3002\u7136\u800c\uff0c\u672c\u8282\u4e2d\u7684\u7248\u672c\u66f4\u6709\u6548\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u5728\u6e32\u67d3\u56fe\u50cf\u540e\u590d\u5236\u56fe\u50cf\u3002</p> <p>The previous subsection applies to any framebuffer. But we haven't yet used a non-default framebuffer. We turn to that topic now.</p> <p>One use for a non-default framebuffer is to render directly into a texture. That is, the memory occupied by a texture image can be attached to the framebuffer as its color buffer, so that rendering operations will send their output to the texture image. This technique, which is called render-to-texture, is used in the sample program webgl/render-to-texture.html.</p> <p>Texture memory is normally allocated when an image is loaded into the texture using the function gl.texImage2D or gl.copyTexImage2D. (See Section 6.4.) However, there is a version of gl.texImage2D that can be used to allocate memory without loading an image into that memory. Here is an example, from the sample program:</p> <pre><code>texture = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 512, 512, \n                            0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n</code></pre> <p>It is the null parameter at the end of the last line that tells gl.texImage2D to allocate new memory without loading existing image data to fill that memory. Instead, the new memory is filled with zeros. The first parameter to gl.texImage2D is the texture target. The target is gl.TEXTURE_2D for normal textures, but other values are used for working with cubemap textures. The fourth and fifth parameters specify the height and width of the image; they should be powers of two. The other parameters usually have the values shown here; their meanings are the same as for the version of gl.texImage2D discussed in Subsection 6.4.3. Note that the texture object must first be created and bound; gl.texImage2D applies to the texture that is currently bound to the active texture unit. (In WebGL 2.0, the same thing can also be accomplished using the gl.texStorage2D() function discussed in Subsection 6.4.6.)</p> <p>To attach the texture to a framebuffer, you need to create a framebuffer object and make that object the current framebuffer by binding it. For example,</p> <pre><code>framebuffer = gl.createFramebuffer();\ngl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n</code></pre> <p>Then the function gl.framebufferTexture2D can be used to attach the texture to the framebuffer:</p> <pre><code>gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, \n                                                gl.TEXTURE_2D, texture, 0 );\n</code></pre> <p>The first parameter is always gl.FRAMEBUFFER. The second parameter says a color buffer is being attached. The last character in gl.COLOR_ATTACHMENT0 is a zero, which allows the possibility of having more than one color buffer attached to a framebuffer (although in standard WebGL 1.0, only one color buffer is allowed). The third parameter is the same texture target that was used in gl.texImage2D, and the fourth is the texture object. The last parameter is the mipmap level; it will usually be zero, which means rendering to the texture image itself rather than to one of its mipmap images.</p> <p>With this setup, you are ready to bind the framebuffer and draw to the texture. After drawing the texture, call</p> <pre><code>gl.bindFramebuffer( gl.FRAMEBUFFER, null );\n</code></pre> <p>to start drawing again to the default framebuffer. At that point, the texture is ready for use in subsequent rendering operations. The texture object can be bound to a texture unit, and a sampler2D variable can be used in the shader program to read from the texture.</p> <p>You are very likely to use different shader programs for drawing to the texture and drawing to the screen. Recall that the function gl.useProgram() is used to specify the shader program.</p> <p>In the sample program, the texture can be animated. During the animation, a new image is drawn to the texture for each frame of the animation. The texture image is 2D, so the depth test is disabled while rendering it. This means that the framebuffer doesn't need a depth buffer. In outline form, the rendering function in the sample program has the form</p> <pre><code>function draw() {\n\n    /* Draw the 2D image into a texture attached to a framebuffer. */\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);\n    gl.useProgram(prog_texture);  // shader program for the texture\n\n    gl.clearColor(1,1,1,1);\n    gl.clear(gl.COLOR_BUFFER_BIT);  // clear the texture to white\n\n    gl.enable(gl.BLEND);  // Use transparency while drawing 2D image.    \n    gl.disable(gl.DEPTH_TEST); // framebuffer doesn't even have a depth buffer!\n    gl.viewport(0,0,512,512);  // Viewport is not set automatically!\n\n    .\n    .  // draw the texture image, which changes in each frame\n    .\n\n    gl.disable(gl.BLEND);\n\n    /*  Now draw the main scene, which is 3D, using the texture. */\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER,null); // Draw to default framebuffer.\n    gl.useProgram(prog);  // shader program for the on-screen image\n    gl.clearColor(0,0,0,1);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.DEPTH_TEST);\n    gl.viewport(0,0,canvas.width,canvas.height);  // Reset the viewport!\n\n    .\n    .   // draw the scene\n    .\n\n}\n</code></pre> <p>Note that the viewport has to be set by hand when drawing to a non-default frame buffer. It then has to be reset when drawing the on-screen image to match the size of the canvas where the on-screen image is rendered. I should also note that only one texture object is used in this program, so it can be bound once and for all during initialization. In this case, it is not necessary to call gl.bindTexture() in the draw() function.</p> <p>This example could be implemented without using a framebuffer, as was done for the example in Subsection 4.3.6. In that example, the texture image was drawn to the default framebuffer, then copied to the texture object. However, the version in this section is more efficient because it does not need to copy the image after rendering it.</p>"},{"location":"cn/c7/s4/#743-\u6e32\u67d3\u7f13\u51b2\u533a","title":"7.4.3 \u6e32\u67d3\u7f13\u51b2\u533a","text":"<p>Renderbuffers</p> \u4e2d\u6587\u82f1\u6587 <p>\u901a\u5e38\u4f7f\u7528\u7eb9\u7406\u5bf9\u8c61\u7684\u5185\u5b58\u4f5c\u4e3a\u5e27\u7f13\u51b2\u533a\u7684\u989c\u8272\u7f13\u51b2\u533a\u662f\u5f88\u65b9\u4fbf\u7684\u3002\u7136\u800c\uff0c\u6709\u65f6\u66f4\u9002\u5408\u4e3a\u7f13\u51b2\u533a\u521b\u5efa\u5355\u72ec\u7684\u5185\u5b58\uff0c\u4e0e\u4efb\u4f55\u7eb9\u7406\u65e0\u5173\u3002\u5bf9\u4e8e\u6df1\u5ea6\u7f13\u51b2\u533a\u6765\u8bf4\uff0c\u8fd9\u662f\u5178\u578b\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a renderbuffer \u6765\u4f5c\u4e3a\u5185\u5b58\u3002Renderbuffer \u4ee3\u8868\u53ef\u4ee5\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\u7684\u5185\u5b58\uff0c\u7528\u4f5c\u989c\u8272\u7f13\u51b2\u533a\u3001\u6df1\u5ea6\u7f13\u51b2\u533a\u6216\u6a21\u677f\u7f13\u51b2\u533a\u3002\u8981\u4f7f\u7528\u5b83\uff0c\u4f60\u9700\u8981\u521b\u5efa renderbuffer \u5e76\u4e3a\u5b83\u5206\u914d\u5185\u5b58\u3002\u5185\u5b58\u662f\u901a\u8fc7\u51fd\u6570 gl.renderbufferStorage() \u5206\u914d\u7684\u3002\u5728\u5206\u914d\u5185\u5b58\u4e4b\u524d\uff0c\u5fc5\u987b\u901a\u8fc7\u8c03\u7528 gl.bindRenderbuffer() \u7ed1\u5b9a renderbuffer\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u521b\u5efa\u7528\u4f5c\u6df1\u5ea6\u7f13\u51b2\u533a\u7684 renderbuffer \u7684\u793a\u4f8b\uff1a</p> <pre><code>let depthBuffer = gl.createRenderbuffer();\ngl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\ngl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 512, 512);\n</code></pre> <p>gl.bindRenderbuffer \u548c gl.renderbufferStorage \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u5fc5\u987b\u662f gl.RENDERBUFFER\u3002gl.renderbufferStorage \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86 renderbuffer \u7684\u7528\u9014\u3002\u503c gl.DEPTH_COMPONENT16 \u662f\u6bcf\u4e2a\u50cf\u7d2016\u4f4d\u7684\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\uff08\u5728 WebGL 1.0 \u4e2d\uff0c16\u4f4d\u662f\u552f\u4e00\u7684\u9009\u9879\u3002\uff09\u5bf9\u4e8e\u5305\u542b RGBA \u989c\u8272\u7684\u5f69\u8272\u7f13\u51b2\u533a\uff0c\u6bcf\u4e2a\u50cf\u7d20\u6709\u56db\u4e2a\u516b\u4f4d\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u662f gl.RGBA8\u3002\u5176\u4ed6\u503c\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u4f8b\u5982 gl.RGB565\uff0c\u5b83\u4f7f\u7528\u6bcf\u4e2a\u50cf\u7d2016\u4f4d\uff0c\u7ea2\u8272\u901a\u90535\u4f4d\uff0c\u7eff\u8272\u901a\u90536\u4f4d\uff0c\u84dd\u8272\u901a\u90535\u4f4d\u3002\u5bf9\u4e8e\u6a21\u677f\u7f13\u51b2\u533a\uff0c\u503c\u5c06\u662f gl.STENCIL_INDEX8\u3002gl.renderbufferStorage \u7684\u6700\u540e\u4e24\u4e2a\u53c2\u6570\u662f\u7f13\u51b2\u533a\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u3002</p> <p>\u51fd\u6570 gl.framebufferRenderbuffer() \u7528\u4e8e\u5c06 renderbuffer \u9644\u52a0\u4e3a\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u4e00\u4e2a\u7f13\u51b2\u533a\u3002\u5b83\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, \n                                        gl.RENDERBUFFER, renderbuffer);\n</code></pre> <p>\u5728\u6b64\u51fd\u6570\u8c03\u7528\u4e4b\u524d\uff0c\u5fc5\u987b\u901a\u8fc7\u8c03\u7528 gl.bindFramebuffer \u7ed1\u5b9a\u5e27\u7f13\u51b2\u533a\u3002gl.framebufferRenderbuffer \u7684\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5fc5\u987b\u5982\u4e0a\u6240\u793a\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f renderbuffer\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86 renderbuffer \u7684\u7528\u9014\u3002\u5b83\u53ef\u4ee5\u662f\uff0c\u4f8b\u5982\uff0cgl.COLOR_ATTACHMENT0\uff0cgl.DEPTH_ATTACHMENT \u6216 gl.STENCIL_ATTACHMENT\u3002</p> <p>It is often convenient to use memory from a texture object as the color buffer for a framebuffer. However, sometimes its more appropriate to create separate memory for the buffer, not associated with any texture. For the depth buffer, that is the typical case. For such cases, the memory can be created as a renderbuffer. A renderbuffer represents memory that can be attached to a framebuffer for use as a color buffer, depth buffer, or stencil buffer. To use one, you need to create the renderbuffer and allocate memory for it. Memory is allocated using the function gl.renderbufferStorage(). The renderbuffer must be bound by calling gl.bindRenderbuffer() before allocating the memory. Here is an example that creates a renderbuffer for use as a depth buffer:</p> <pre><code>let depthBuffer = gl.createRenderbuffer();\ngl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\ngl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 512, 512);\n</code></pre> <p>The first parameter to both gl.bindRenderbuffer and gl.renderbufferStorage must be gl.RENDERBUFFER. The second parameter to gl.renderbufferStorage specifies how the renderbuffer will be used. The value gl.DEPTH_COMPONENT16 is for a depth buffer with 16 bits for each pixel. (Sixteen bits is the only option in WebGL 1.0.) For a color buffer holding RGBA colors with four eight-bit values per pixel, the second parameter would be gl.RGBA8. Other values are possible, such as gl.RGB565, which uses 16 bits per pixel with 5 bits for the red color channel, 6 bits for green, and 5 bits for blue. For a stencil buffer, the value would be gl.STENCIL_INDEX8. The last two parameters to gl.renderbufferStorage are the width and height of the buffer.</p> <p>The function gl.framebufferRenderbuffer() is used to attach a renderbufffer to be used as one of the buffers in a framebuffer. It takes the form</p> <pre><code>gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, \n                                        gl.RENDERBUFFER, renderbuffer);\n</code></pre> <p>The framebuffer must be bound by calling gl.bindFramebuffer before this function is called. The first and third parameters to gl.framebufferRenderbuffer must be as shown. The last parameter is the renderbuffer. The second parameter specifies how the renderbuffer will be used. It can be, for example, gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT, or gl.STENCIL_ATTACHMENT.</p>"},{"location":"cn/c7/s4/#744-\u52a8\u6001\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406","title":"7.4.4 \u52a8\u6001\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406","text":"<p>Dynamic Cubemap Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u8981\u5c06 3D \u573a\u666f\u6e32\u67d3\u5230\u5e27\u7f13\u51b2\u533a\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u989c\u8272\u7f13\u51b2\u533a\u548c\u4e00\u4e2a\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u793a\u4f8b\u7a0b\u5e8f webgl/cube-camera.html \u5c55\u793a\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u6b64\u793a\u4f8b\u5bf9\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u4f7f\u7528\u6e32\u67d3\u5230\u7eb9\u7406\u6280\u672f\u3002\u7136\u540e\uff0c\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u88ab\u7528\u4f5c\u53cd\u5c04\u8868\u9762\u4e0a\u7684\u73af\u5883\u8d34\u56fe\u3002\u9664\u4e86\u73af\u5883\u8d34\u56fe\uff0c\u7a0b\u5e8f\u8fd8\u4f7f\u7528\u53e6\u4e00\u4e2a\u7acb\u65b9\u4f53\u8d34\u56fe\u4f5c\u4e3a\u5929\u7a7a\u76d2\u3002\uff08\u89c1 6.3.5\u5c0f\u8282\u3002\uff09\u4ee5\u4e0b\u662f\u7a0b\u5e8f\u4e2d\u7684\u56fe\u50cf\uff1a</p> <p></p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u73af\u5883\u5305\u62ec\u80cc\u666f\u5929\u7a7a\u76d2\uff0c\u8fd8\u5305\u62ec\u51e0\u4e2a\u4e0d\u5c5e\u4e8e\u5929\u7a7a\u76d2\u7eb9\u7406\u7684\u5f69\u8272\u7acb\u65b9\u4f53\u3002\u56fe\u50cf\u4e2d\u5fc3\u7684\u53cd\u5c04\u7403\u4f53\u53cd\u5c04\u4e86\u7acb\u65b9\u4f53\u4ee5\u53ca\u5929\u7a7a\u76d2\uff0c\u8fd9\u610f\u5473\u7740\u73af\u5883\u8d34\u56fe\u7eb9\u7406\u4e0d\u80fd\u4e0e\u5929\u7a7a\u76d2\u7eb9\u7406\u76f8\u540c\u2014\u2014\u5b83\u5fc5\u987b\u5305\u62ec\u7acb\u65b9\u4f53\u3002\u6b64\u5916\uff0c\u573a\u666f\u53ef\u4ee5\u52a8\u753b\u5316\uff0c\u7acb\u65b9\u4f53\u53ef\u4ee5\u79fb\u52a8\u3002\u7403\u4f53\u4e0a\u7684\u53cd\u5c04\u5fc5\u987b\u968f\u7740\u7acb\u65b9\u4f53\u7684\u79fb\u52a8\u800c\u53d8\u5316\u3002\u8fd9\u610f\u5473\u7740\u73af\u5883\u8d34\u56fe\u7eb9\u7406\u5fc5\u987b\u5728\u6bcf\u4e00\u5e27\u91cd\u65b0\u521b\u5efa\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e27\u7f13\u51b2\u533a\u5c06\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u6e32\u67d3\u3002</p> <p>\u7acb\u65b9\u4f53\u8d34\u56fe\u7531\u516d\u5e45\u56fe\u50cf\u7ec4\u6210\uff0c\u5206\u522b\u5bf9\u5e94\u4e8e x\u3001y \u548c z \u8f74\u7684\u6b63\u8d1f\u65b9\u5411\u3002\u6bcf\u4e2a\u56fe\u50cf\u4e0e\u4e0d\u540c\u7684\u7eb9\u7406\u76ee\u6807\u76f8\u5173\u8054\uff08\u7c7b\u4f3c\u4e8e gl.TEXTURE_2D\uff09\u3002\u8981\u6e32\u67d3\u7acb\u65b9\u4f53\u8d34\u56fe\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u6240\u6709\u516d\u4e2a\u9762\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u3002\u4ee5\u4e0b\u662f\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u4ee3\u7801\uff1a</p> <pre><code>cubemapTargets = [  \n    // \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u5c06\u7eb9\u7406\u76ee\u6807\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d \n    gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, \n    gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, \n    gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z \n];\n\ndynamicCubemap = gl.createTexture(); // \u521b\u5efa\u7eb9\u7406\u5bf9\u8c61\u3002\ngl.bindTexture(gl.TEXTURE_CUBE_MAP, dynamicCubemap);  // \u5c06\u5176\u7ed1\u5b9a\u4e3a\u7acb\u65b9\u4f53\u8d34\u56fe\nfor (i = 0; i &lt; 6; i++) {\n    gl.texImage2D(cubemapTargets[i], 0, gl.RGBA, 512, 512, \n                                0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n}\n</code></pre> <p>\u6211\u4eec\u8fd8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5e27\u7f13\u51b2\u533a\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7528\u4f5c\u6df1\u5ea6\u7f13\u51b2\u533a\u7684 renderbuffer\uff0c\u5e76\u9700\u8981\u5c06\u6df1\u5ea6\u7f13\u51b2\u533a\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\u3002\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u5e27\u7f13\u51b2\u533a\u6765\u6e32\u67d3\u7eb9\u7406\u7684\u6240\u6709\u516d\u5e45\u56fe\u50cf\uff0c\u6839\u636e\u9700\u8981\u66f4\u6539\u5e27\u7f13\u51b2\u533a\u7684\u989c\u8272\u7f13\u51b2\u533a\u9644\u4ef6\u3002\u8981\u5c06\u516d\u5e45\u7acb\u65b9\u4f53\u8d34\u56fe\u56fe\u50cf\u4e4b\u4e00\u9644\u52a0\u4e3a\u989c\u8272\u7f13\u51b2\u533a\uff0c\u6211\u4eec\u53ea\u9700\u5728\u8c03\u7528 gl.framebufferTexture2D() \u65f6\u6307\u5b9a\u76f8\u5e94\u7684\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u76ee\u6807\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u547d\u4ee4</p> <pre><code>gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, \n                        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, dynamicCubemap, 0);\n</code></pre> <p>\u5c06\u7eb9\u7406\u5bf9\u8c61 dynamicCubemap \u7684\u8d1f z \u56fe\u50cf\u9644\u52a0\u4e3a\u5f53\u524d\u7ed1\u5b9a\u5e27\u7f13\u51b2\u533a\u7684\u989c\u8272\u7f13\u51b2\u533a\u3002</p> <p>\u516d\u5e45\u7eb9\u7406\u56fe\u50cf\u6e32\u67d3\u5b8c\u6210\u540e\uff0c\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u5c31\u51c6\u5907\u597d\u4f7f\u7528\u4e86\u3002\u9664\u4e86\u6e32\u67d3\u4e86\u516d\u4e2a 3D \u56fe\u50cf\u800c\u4e0d\u662f\u4e00\u4e2a 2D \u56fe\u50cf\u4e4b\u5916\uff0c\u8fd9\u4e0e\u672c\u8282\u524d\u9762\u73af\u5883\u8d34\u56fe\u7684\u6e32\u67d3\u5230\u7eb9\u7406\u793a\u4f8b\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>\u8981\u6e32\u67d3\u7acb\u65b9\u4f53\u8d34\u56fe\u6240\u9700\u7684\u516d\u4e2a\u573a\u666f\u56fe\u50cf\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u4e3a\u53cd\u5c04\u7269\u4f53\u5236\u4f5c\u73af\u5883\u8d34\u56fe\u3002\u6211\u4eec\u5e0c\u671b\u83b7\u5f97\u56f4\u7ed5\u8be5\u7269\u4f53\u7684\u73af\u5883\u56fe\u50cf\u3002\u53ef\u4ee5\u901a\u8fc7\u5c06\u76f8\u673a\u653e\u7f6e\u5728\u7269\u4f53\u4e2d\u5fc3\u6765\u5236\u4f5c\u8fd9\u4e9b\u56fe\u50cf\u3002\u57fa\u672c\u601d\u60f3\u662f\u5c06\u76f8\u673a\u6307\u5411\u6b63\u8d1f\u5750\u6807\u8f74\u7684\u516d\u4e2a\u65b9\u5411\uff0c\u5e76\u5728\u6bcf\u4e2a\u65b9\u5411\u4e0a\u62cd\u6444\u4e00\u5f20\u7167\u7247\uff0c\u4f46\u8981\u6b63\u786e\u5904\u7406\u7ec6\u8282\u5374\u5f88\u68d8\u624b\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u5f53\u6211\u4eec\u5c06\u7ed3\u679c\u5e94\u7528\u5230\u8868\u9762\u4e0a\u7684\u67d0\u4e00\u70b9\u65f6\uff0c\u6211\u4eec\u53ea\u80fd\u83b7\u5f97\u6b63\u786e\u53cd\u5c04\u7684\u8fd1\u4f3c\u503c\u3002\u5bf9\u4e8e\u8868\u9762\u4e0a\u67d0\u70b9\u7684\u51e0\u4f55\u6b63\u786e\u53cd\u5c04\uff0c\u6211\u4eec\u9700\u8981\u4ece\u90a3\u4e2a\u70b9\u7684\u89c6\u89d2\u6765\u770b\uff0c\u800c\u4e0d\u662f\u4ece\u7269\u4f53\u4e2d\u5fc3\u7684\u89c6\u89d2\u6765\u770b\uff0c\u4f46\u6211\u4eec\u4e0d\u80fd\u73b0\u5b9e\u5730\u4e3a\u8868\u9762\u4e0a\u7684\u6bcf\u4e2a\u70b9\u5236\u4f5c\u4e0d\u540c\u7684\u73af\u5883\u8d34\u56fe\u3002\u53ea\u8981\u573a\u666f\u4e2d\u7684\u5176\u4ed6\u7269\u4f53\u4e0d\u592a\u9760\u8fd1\u53cd\u5c04\u8868\u9762\uff0c\u8fd1\u4f3c\u6548\u679c\u770b\u8d77\u6765\u5c31\u4f1a\u4e0d\u9519\u3002\uff09</p> <p>\u201c\u76f8\u673a\u201d\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u6295\u5f71\u53d8\u6362\u548c\u89c2\u5bdf\u53d8\u6362\u3002\u6295\u5f71\u9700\u8981\u4e00\u4e2a\u4e5d\u5341\u5ea6\u7684\u89c6\u91ce\uff0c\u4ee5\u8986\u76d6\u7acb\u65b9\u4f53\u7684\u4e00\u9762\uff0c\u5176\u7eb5\u6a2a\u6bd4\u5c06\u662f1\uff0c\u56e0\u4e3a\u7acb\u65b9\u4f53\u7684\u9762\u662f\u6b63\u65b9\u5f62\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684 glMatrix \u547d\u4ee4\u6765\u5236\u4f5c\u6295\u5f71\u77e9\u9635\uff1a</p> <pre><code>mat4.projection(projection, Math.PI/2, 1, 1, 100);\n</code></pre> <p>\u8fd9\u91cc\u7684\u6700\u540e\u4e24\u4e2a\u53c2\u6570\uff0c\u8fd1\u88c1\u526a\u9762\u548c\u8fdc\u88c1\u526a\u9762\u7684\u8ddd\u79bb\uff0c\u5e94\u8be5\u9009\u62e9\u4ee5\u5305\u542b\u573a\u666f\u4e2d\u7684\u6240\u6709\u7269\u4f53\u3002\u5982\u679c\u6211\u4eec\u4e0d\u5e94\u7528\u89c2\u5bdf\u53d8\u6362\uff0c\u76f8\u673a\u5c06\u4f4d\u4e8e\u539f\u70b9\uff0c\u6307\u5411\u8d1fz\u8f74\u65b9\u5411\u3002\u5982\u679c\u53cd\u5c04\u7269\u4f53\u4f4d\u4e8e\u539f\u70b9\uff0c\u5c31\u50cf\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u90a3\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6ca1\u6709\u89c2\u5bdf\u53d8\u6362\u7684\u76f8\u673a\u6765\u62cd\u6444\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u8d1fz\u56fe\u50cf\u3002</p> <p>\u4f46\u662f\uff0c\u7531\u4e8e\u56fe\u50cf\u5b58\u50a8\u4e3a\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u65b9\u5f0f\u7684\u7ec6\u8282\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u9700\u8981\u5e94\u7528\u4e00\u4e2a\u53d8\u6362\u3002\u8ba9\u6211\u4eec\u770b\u770b\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u56fe\u50cf\u5e03\u5c40\uff1a</p> <p></p> <p>\u7acb\u65b9\u4f53\u7684\u516d\u4e2a\u9762\u4ee5\u9ed1\u8272\u663e\u793a\uff0c\u597d\u50cf\u7acb\u65b9\u4f53\u7684\u9762\u5df2\u7ecf\u88ab\u6253\u5f00\u5e76\u94fa\u5e73\u4e86\u3002\u6bcf\u4e2a\u9762\u90fd\u6807\u6709\u76f8\u5e94\u7684\u5750\u6807\u8f74\u65b9\u5411\u3002\u6b63\u8d1fy\u9762\u7684\u526f\u672c\u4ee5\u7070\u8272\u663e\u793a\uff0c\u4ee5\u5c55\u793a\u8fd9\u4e9b\u9762\u5982\u4f55\u8fde\u63a5\u5230\u8d1fz\u9762\u3002\u6211\u4eec\u4e3a\u7acb\u65b9\u4f53\u8d34\u56fe\u5236\u4f5c\u7684\u56fe\u50cf\u5fc5\u987b\u50cf\u5e03\u5c40\u4e2d\u7684\u9762\u4e00\u6837\u62fc\u63a5\u5728\u4e00\u8d77\u3002\u7136\u800c\uff0c\u5e03\u5c40\u4e2d\u7684\u9762\u662f\u4ece\u7acb\u65b9\u4f53\u7684\u5916\u90e8\u89c2\u770b\u7684\uff0c\u800c\u76f8\u673a\u5c06\u4ece\u7acb\u65b9\u4f53\u7684\u5185\u90e8\u62cd\u6444\u7167\u7247\u3002\u8981\u83b7\u5f97\u6b63\u786e\u7684\u89c6\u56fe\uff0c\u6211\u4eec\u9700\u8981\u6c34\u5e73\u7ffb\u8f6c\u76f8\u673a\u62cd\u6444\u7684\u7167\u7247\u3002\u7ecf\u8fc7\u4e00\u4e9b\u5c1d\u8bd5\uff0c\u6211\u53d1\u73b0\u6211\u8fd8\u9700\u8981\u5782\u76f4\u7ffb\u8f6c\u5b83\uff0c\u4e5f\u8bb8\u662f\u56e0\u4e3a\u7f51\u7edc\u56fe\u50cf\u76f8\u5bf9\u4e8eOpenGL\u7ea6\u5b9a\u662f\u5012\u7f6e\u5b58\u50a8\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7(\u22121,\u22121,1)\u7684\u7f29\u653e\u53d8\u6362\u6765\u5b9e\u73b0\u4e24\u6b21\u7ffb\u8f6c\u3002\u7efc\u5408\u8d77\u6765\uff0c\u5236\u4f5c\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u8d1fz\u56fe\u50cf\u7684\u4ee3\u7801\u662f\uff1a</p> <pre><code>gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer); // \u7ed8\u5236\u5230\u79bb\u5c4f\u7f13\u51b2\u533a\u3002\ngl.viewport(0,0,512,512);  // \u5339\u914d\u7eb9\u7406\u56fe\u50cf\u7684\u5927\u5c0f\u3002\n\n/* \u8bbe\u7f6e\u865a\u62df\u76f8\u673a\u7684\u6295\u5f71\u548c\u6a21\u578b\u89c6\u56fe\u77e9\u9635\n\nmat4.perspective(projection, Math.PI/2, 1, 1, 100);\nmat4.identity(modelview);\nmat4.scale(modelview,modelview,[-1,-1,1]);\n\n/* \u5c06\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u8d1fz\u56fe\u50cf\u9644\u52a0\u4e3a\u5e27\u7f13\u51b2\u533a\u7684\u989c\u8272\u7f13\u51b2\u533a\uff0c\n\u5e76\u901a\u8fc7\u6e32\u67d3\u56fe\u50cf\u201c\u62cd\u7167\u201d\u3002\n\ngl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, \n                        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, dynamicCubemap, 0);\nrenderSkyboxAndCubes();\n</code></pre> <p>\u6700\u540e\u4e00\u884c\u7684\u51fd\u6570\u6e32\u67d3\u573a\u666f\uff0c\u9664\u4e86\u4e2d\u5fc3\u7684\u53cd\u5c04\u7269\u4f53\u672c\u8eab\uff0c\u5e76\u8d1f\u8d23\u5c06\u6295\u5f71\u548c\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u53d1\u9001\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u3002</p> <p>\u5bf9\u4e8e\u5176\u4ed6\u4e94\u5e45\u56fe\u50cf\uff0c\u6211\u4eec\u9700\u8981\u5728\u62cd\u7167\u524d\u5c06\u76f8\u673a\u6307\u5411\u4e0d\u540c\u7684\u65b9\u5411\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5411\u89c2\u5bdf\u53d8\u6362\u6dfb\u52a0\u9002\u5f53\u7684\u65cb\u8f6c\u6765\u5b8c\u6210\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u6b63x\u56fe\u50cf\uff0c\u6211\u4eec\u9700\u8981\u56f4\u7ed5y\u8f74\u65cb\u8f6c\u76f8\u673a\u221290\u5ea6\u3002\u4f5c\u4e3a\u89c2\u5bdf\u53d8\u6362\uff0c\u6211\u4eec\u9700\u8981\u547d\u4ee4\uff1a</p> <pre><code>mat4.rotateY(modelview, modelview, Math.PI/2);\n</code></pre> <p>\u53ef\u80fd\u66f4\u5bb9\u6613\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362\uff0c\u5c06\u7acb\u65b9\u4f53\u7684\u6b63x\u9762\u65cb\u8f6c\u5230\u76f8\u673a\u524d\u65b9\u7684\u89c6\u91ce\u4e2d\u3002</p> <p>\u5728 \u793a\u4f8b\u7a0b\u5e8f \u4e2d\uff0c\u516d\u4e2a\u7acb\u65b9\u4f53\u8d34\u56fe\u56fe\u50cf\u662f\u5728\u51fd\u6570 createDynamicCubemap() \u4e2d\u521b\u5efa\u7684\u3002\u9605\u8bfb\u8be5\u51fd\u6570\u7684\u6e90\u4ee3\u7801\u4ee5\u83b7\u53d6\u5168\u90e8\u7ec6\u8282\u3002</p> <p>\u8fd9\u4e2a\u52a8\u6001\u7acb\u65b9\u4f53\u8d34\u56fe\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528\u4e86\u6211\u4eec\u6240\u6db5\u76d6\u7684\u8bb8\u591a\u6982\u5ff5\u548c\u6280\u672f\u3002\u82b1\u4e00\u70b9\u65f6\u95f4\u601d\u8003\u8fd9\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u4e00\u5207\uff0c\u4ee5\u53ca\u5b83\u4eec\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\uff08\u60a8\u53ef\u80fd\u8fd8\u4f1a\u6ce8\u610f\u5230\u8336\u58f6\u6ca1\u6709\u53cd\u5c04\u5b83\u81ea\u5df1\u7684\u4efb\u4f55\u90e8\u5206\u3002\uff09</p> <p></p> <p>To render a 3D scene to a framebuffer, we need both a color buffer and a depth buffer. An example can be found in the sample program webgl/cube-camera.html. This example uses render-to-texture for a cubemap texture. The cubemap texture is then used as an environment map on a reflective surface. In addition to the environment map, the program uses another cubemap texture for a skybox. (See Subsection 6.3.5.) Here's an image from the program:</p> <p></p> <p>The environment in this case includes the background skybox, but also includes several colored cubes that are not part of the skybox texture. The reflective sphere in the center of the image reflects the cubes as well as the skybox, which means that the environment map texture can't be the same as the skybox texture\u2014it has to include the cubes. Furthermore, the scene can be animated and the cubes can move. The reflection in the sphere has to change as the cubes move. This means that the environment map texture has to be recreated in each frame. For that, we can use a framebuffer to render to the cubemap texture.</p> <p>A cubemap texture consists of six images, one each for the positive and negative direction of the x, y, and z axes. Each image is associated with a different texture target (similar to gl.TEXTURE_2D). To render a cubemap, we need to allocate storage for all six sides. Here's the code from the sample program:</p> <pre><code>cubemapTargets = [  \n        // store texture targets in an array for convenience \ngl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, \ngl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, \ngl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z \n];\n\ndynamicCubemap = gl.createTexture(); // Create the texture object.\ngl.bindTexture(gl.TEXTURE_CUBE_MAP, dynamicCubemap);  // bind it as a cubemap\nfor (i = 0; i &lt; 6; i++) {\ngl.texImage2D(cubemapTargets[i], 0, gl.RGBA, 512, 512, \n                                    0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n}\n</code></pre> <p>We also need to create a framebuffer, as well as a renderbuffer for use as a depth buffer, and we need to attach the depth buffer to the framebuffer. The same framebuffer can be used to render all six images for the texture, changing the color buffer attachment of the framebuffer as needed. To attach one of the six cubemap images as the color buffer, we just specify the corresponding cubemap texture target in the call to gl.framebufferTexture2D(). For example, the command</p> <pre><code>gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, \n                        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, dynamicCubemap, 0);\n</code></pre> <p>attaches the negative z image from the texture object dynamicCubemap to be used as the color buffer in the currently bound framebuffer.</p> <p>After the six texture images have been rendered, the cubemap texture is ready to be used. Aside from the fact that six 3D images are rendered instead of one 2D image, this is all very similar to the render-to-texture example from earlier in this section.</p> <p>The question remains of how to render the six images of the scene that are needed for the cubemap texture. To make an environment map for a reflective object, we want images of the environment that surrounds that object. The images can be made with a camera placed at the center of the object. The basic idea is to point the camera in the six directions of the positive and negative coordinate axes and snap a picture in each direction, but it's tricky to get the details correct. (And note that when we apply the result to a point on the surface, we will only have an approximation of the correct reflection. For a geometrically correct reflection at the point, we would need the view from that very point, not the view from the center of the object, but we can't realistically make a different environment map for each point on the surface. The approximation will look OK as long as other objects in the scene are not too close to the reflective surface.)</p> <p>A \"camera\" really means a projection transformation and a viewing transformation. The projection needs a ninety-degree field of view, to cover one side of the cube, and its aspect ratio will be 1, since the sides of the cube are squares. We can make the projection matrix with a glMatrix command such as</p> <pre><code>mat4.projection( projection, Math.PI/2, 1, 1, 100 );\n</code></pre> <p>where the last two parameters, the near and far clipping distances, should be chosen to include all the objects in the scene. If we apply no viewing transformation, the camera will be at the origin, pointing in the direction of the negative z-axis. If the reflective object is at the origin, as it is in the sample program, we can use the camera with no viewing transformation to take the negative-z image for the cubemap texture.</p> <p>But, because of the details of how the images must be stored for cubemap textures, it turns out that we need to apply one transformation. Let's look at the layout of images for a cubemap texture:</p> <p></p> <p>The six sides of the cube are shown in black, as if the sides of the cube have been opened up and laid out flat. Each side is marked with the corresponding coordinate axis direction. Duplicate copies of the plus and minus y sides are shown in gray, to show how those sides attach to the negative z side. The images that we make for the cubemap must fit together in the same way as the sides in this layout. However, the sides in the layout are viewed from the outside of the cube, while the camera will be taking a picture from the inside of the cube. To get the correct view, we need to flip the picture from the camera horizontally. After some experimentation, I found that I also need to flip it vertically, perhaps because web images are stored upside down with respect to the OpenGL convention. We can do both flips with a scaling transformation by (\u22121,\u22121,1). Putting this together, the code for making the cubemap's negative z image is</p> <pre><code>gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer); // Draw to offscreen buffer.\ngl.viewport(0,0,512,512);  // Match size of the texture images.\n\n/* Set up projection and modelview matrices for the virtual camera\n\nmat4.perspective(projection, Math.PI/2, 1, 1, 100);\nmat4.identity(modelview);\nmat4.scale(modelview,modelview,[-1,-1,1]);\n\n/* Attach the cubemap negative z image as the color buffer in the framebuffer,\nand \"take the picture\" by rendering the image. */\n\ngl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, \n                        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, dynamicCubemap, 0);\nrenderSkyboxAndCubes();\n</code></pre> <p>The function in the last line renders the scene, except for the central reflective object itself, and is responsible for sending the projection and modelview matrices to the shader programs.</p> <p>For the other five images, we need to aim the camera in a different direction before taking the picture. That can be done by adding an appropriate rotation to the viewing transformation. For example, for the positive x image, we need to rotate the camera by \u221290 degrees about the y-axis. As a viewing transform, we need the command</p> <pre><code>mat4.rotateY(modelview, modelview, Math.PI/2);\n</code></pre> <p>It might be easier to think of this as a modeling transformation that rotates the positive x side of the cube into view in front of the camera.</p> <p>In the sample program, the six cubemap images are created in the function createDynamicCubemap(). Read the source code of that function for the full details.</p> <p>This dynamic cubemap program is a nice example, since it makes use of so many of the concepts and techniques that we have covered. Take a minute to think about everything that is going on in this demo version of the sample program, and how it was all implemented. (You might also notice that the teapot does not reflect any part of itself.)</p> <p></p>"},{"location":"cn/c7/s5/","title":"7.5 WebGL \u6269\u5c55","text":"<p>WebGL Extensions</p> \u4e2d\u6587\u82f1\u6587 <p>WebGL \u8bbe\u8ba1\u7528\u4e8e\u5728\u5404\u79cd\u8bbe\u5907\u4e0a\u8fd0\u884c\uff0c\u5305\u62ec\u56fe\u5f62\u80fd\u529b\u76f8\u5bf9\u6709\u9650\u7684\u79fb\u52a8\u8bbe\u5907\u3002\u56e0\u6b64\uff0c\u6240\u6709 WebGL \u5b9e\u73b0\u53ea\u8981\u6c42\u6709\u4e00\u7ec4\u6700\u5c0f\u7684\u529f\u80fd\u96c6\u3002\u7136\u800c\uff0cWebGL \u62e5\u6709\u4e00\u79cd\u6fc0\u6d3b\u989d\u5916\u53ef\u9009\u7279\u6027\u7684\u673a\u5236\uff0c\u8fd9\u4e9b\u53ef\u9009\u7279\u6027\u5b9a\u4e49\u5728 WebGL \u6269\u5c55 \u4e2d\u3002\u9700\u8981 WebGL \u6269\u5c55\u7684\u7f51\u9875\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5728\u6bcf\u4e2a WebGL \u5b9e\u73b0\u4e2d\u90fd\u80fd\u5de5\u4f5c\u3002\u7136\u800c\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u7f16\u5199\u4e00\u4e2a\u6709\u6216\u6ca1\u6709\u6269\u5c55\u90fd\u80fd\u5de5\u4f5c\u7684\u9875\u9762\u76f8\u5bf9\u5bb9\u6613\uff0c\u5c3d\u7ba1\u5728\u6ca1\u6709\u6269\u5c55\u7684\u60c5\u51b5\u4e0b\u53ef\u80fd\u7f3a\u5c11\u67d0\u4e9b\u7279\u6027\u3002\u5df2\u6709\u51e0\u5341\u4e2a\u6269\u5c55\u7684\u5b9a\u4e49\u88ab\u6807\u51c6\u5316\u3002\u8fd9\u4e9b\u6807\u51c6\u6269\u5c55\u5728 https://www.khronos.org/registry/webgl/extensions/ \u6709\u6587\u6863\u8bb0\u5f55\u3002</p> <p>\u6807\u51c6 OpenGL \u4e5f\u6709\u4e00\u4e2a\u6269\u5c55\u673a\u5236\u3002\u5386\u53f2\u4e0a\uff0c\u8bb8\u591a OpenGL \u4e00\u4e2a\u7248\u672c\u4e2d\u7684\u6269\u5c55\u7279\u6027\u5728\u540e\u7eed\u7248\u672c\u4e2d\u6210\u4e3a\u4e86\u5fc5\u9700\u7279\u6027\u3002\u5bf9\u4e8e WebGL \u6269\u5c55\u6765\u8bf4\u4e5f\u662f\u5982\u6b64\uff1a\u4e00\u4e9b WebGL 1.0 \u7684\u6269\u5c55\u5df2\u7ecf\u88ab\u7eb3\u5165\u4e3a WebGL 2.0 \u7684\u5fc5\u9700\u7279\u6027\u3002</p> <p>\u672c\u8282\u5c06\u4ecb\u7ecd WebGL \u6269\u5c55\u673a\u5236\uff0c\u5e76\u8ba8\u8bba\u4e00\u4e9b\u6807\u51c6\u6269\u5c55\u3002</p> <p>WebGL is designed to run on a wide variety of devices, including mobile devices that have relatively limited graphical capabilities. Because of this, only a minimal set of features is required of all WebGL implementations. However, WebGL has a mechanism for activating additional, optional features. The optional features are defined in WebGL extensions. A web page that requires a WebGL extension is not guaranteed to work in every implementation of WebGL. However, in many cases, it is fairly easy to write a page that can work with or without the extension, though perhaps with some missing feature when the extension is not available. There are several dozen extensions whose definitions have been standardized. These standard extensions are documented at https://www.khronos.org/registry/webgl/extensions/.</p> <p>Standard OpenGL also has an extension mechanism. Historically, many features from extensions in one version of OpenGL have become required features in later versions. The same is true for WebGL extensions: Some of the WebGL 1.0 extensions have been incorporated as required features in WebGL 2.0.</p> <p>This section covers the WebGL extension mechanism, and it discusses a few of the standard extensions.</p>"},{"location":"cn/c7/s5/#751-\u5404\u5411\u5f02\u6027\u8fc7\u6ee4","title":"7.5.1 \u5404\u5411\u5f02\u6027\u8fc7\u6ee4","text":"<p>Anisotropic Filtering</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u4ece\u4e00\u4e2a\u53ef\u4ee5\u6539\u5584\u4e00\u4e9b\u573a\u666f\u4e2d\u7eb9\u7406\u5916\u89c2\u7684\u7b80\u5355\u6269\u5c55\u5f00\u59cb\u3002\u6807\u51c6\u7684\u56fe\u50cf\u7eb9\u7406\u91c7\u6837\u8fc7\u6ee4\u65b9\u6cd5\u5728\u4ee5\u659c\u89d2\u89c6\u89d2\u89c2\u5bdf\u7eb9\u7406\u65f6\u4f1a\u4ea7\u751f\u8f83\u5dee\u7684\u7ed3\u679c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8868\u9762\u4e0a\u7684\u4e00\u4e2a\u50cf\u7d20\u5bf9\u5e94\u4e8e\u7eb9\u7406\u4e2d\u7684\u4e00\u4e2a\u68af\u5f62\u533a\u57df\uff0c\u800c\u6807\u51c6\u7684\u7f29\u653e\u548c\u653e\u5927\u8fc7\u6ee4\u89c4\u5219\uff0c\u5982 gl.LINEAR\uff0c\u5e76\u4e0d\u592a\u80fd\u5f88\u597d\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002\uff08\u8fc7\u6ee4\u5728 4.3.2\u5c0f\u8282 \u4e2d\u6709\u4ecb\u7ecd\u3002\uff09\u4f7f\u7528\u79f0\u4e3a\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u7684\u6280\u672f\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u8fd9\u9700\u8981\u989d\u5916\u7684\u8ba1\u7b97\uff0c\u5b83\u5728\u91c7\u6837\u7eb9\u7406\u65f6\u8003\u8651\u4e86\u68af\u5f62\u7684\u5f62\u72b6\u3002\u8bb8\u591a GPU \u90fd\u53ef\u4ee5\u8fdb\u884c\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u3002\u8fd9\u4e0d\u662f WebGL \u5b9e\u73b0\u4e2d\u7684\u5fc5\u9700\u7279\u6027\uff0c\u4f46\u901a\u5e38\u4f5c\u4e3a\u6269\u5c55\u63d0\u4f9b\u3002\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u6269\u5c55\u53ef\u4ee5\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u7528\u4e8e WebGL 1.0 \u548c WebGL 2.0\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f webgl/anisotropic-filtering.html \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u6269\u5c55\u3002\u5b83\u5c55\u793a\u4e86\u4e00\u4e2a\u7528\u7816\u5757\u56fe\u50cf\u7eb9\u7406\u7684\u5927\u578b\u5e73\u9762\uff0c\u53ef\u4ee5\u4ece\u5c16\u9510\u7684\u659c\u89d2\u89c2\u5bdf\u3002\u5982\u679c\u6269\u5c55\u53ef\u7528\uff0c\u7528\u6237\u53ef\u4ee5\u5f00\u542f\u548c\u5173\u95ed\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u3002\u5982\u679c\u4e0d\u53ef\u7528\uff0c\u7a0b\u5e8f\u4ecd\u7136\u4f1a\u7ed8\u5236\u573a\u666f\uff0c\u4f46\u53ea\u4f7f\u7528\u6807\u51c6\u8fc7\u6ee4\u3002\u4ee5\u4e0b\u662f\u7a0b\u5e8f\u4e2d\u7684\u4e24\u5f20\u56fe\u50cf\u3002\u53f3\u4fa7\u7684\u56fe\u50cf\u4f7f\u7528\u4e86\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u3002\u5de6\u4fa7\u6ca1\u6709\u4f7f\u7528\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u65f6\uff0c\u5373\u4f7f\u5728\u79bb\u89c2\u5bdf\u8005\u9002\u4e2d\u7684\u8ddd\u79bb\uff0c\u7eb9\u7406\u4e5f\u4f1a\u6a21\u7cca\uff1a</p> <p></p> <p>\u6bcf\u4e2a WebGL \u6269\u5c55\u90fd\u6709\u4e00\u4e2a\u540d\u79f0\u3002\u51fd\u6570 gl.getExtension(name) \u7528\u4e8e\u6fc0\u6d3b\u6269\u5c55\uff0c\u5176\u4e2d\u540d\u79f0\u662f\u4e00\u4e2a\u5305\u542b\u6269\u5c55\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u6269\u5c55\u4e0d\u53ef\u7528\uff0c\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a null\uff0c\u4f60\u5e94\u8be5\u603b\u662f\u5728\u5c1d\u8bd5\u4f7f\u7528\u6269\u5c55\u4e4b\u524d\u68c0\u67e5\u8fd4\u56de\u503c\u3002\u5982\u679c\u8fd4\u56de\u503c\u4e0d\u662f null\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a JavaScript \u5bf9\u8c61\u3002\u8be5\u5bf9\u8c61\u53ef\u80fd\u5305\u542b\uff0c\u4f8b\u5982\uff0c\u4e3a\u4e86\u5229\u7528\u6269\u5c55\u7684\u529f\u80fd\u800c\u9700\u8981\u4f20\u9012\u7ed9 WebGL \u51fd\u6570\u7684\u5e38\u91cf\u3002\u5b83\u8fd8\u53ef\u4ee5\u5305\u542b\u5168\u65b0\u7684\u51fd\u6570\u3002</p> <p>\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u6269\u5c55\u7684\u540d\u79f0\u662f \"EXT_texture_filter_anisotropic.\" \u8981\u6d4b\u8bd5\u6269\u5c55\u7684\u53ef\u7528\u6027\u5e76\u6fc0\u6d3b\u5b83\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8bed\u53e5\uff1a</p> <pre><code>anisotropyExtension = gl.getExtension(\"EXT_texture_filter_anisotropic\");\n</code></pre> <p>\u5982\u679c anisotropyExtension \u662f null\uff0c\u5219\u6269\u5c55\u4e0d\u53ef\u7528\u3002\u5982\u679c\u5b83\u4e0d\u662f null\uff0c\u90a3\u4e48\u8be5\u5bf9\u8c61\u6709\u4e00\u4e2a\u540d\u4e3a TEXTURE_MAX_ANISOTROPY_EXT \u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 gl.texParameteri \u6765\u8bbe\u7f6e\u5c06\u5e94\u7528\u4e8e\u7eb9\u7406\u7684\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u7684\u7ea7\u522b\u6216\u91cf\u3002\u4f8b\u5982\uff0c\u5728\u521b\u5efa\u5e76\u7ed1\u5b9a\u7eb9\u7406\u4e4b\u540e\uff0c\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u8bf4\uff1a</p> <pre><code>gl.texParameteri(gl.TEXTURE_2D, \n            anisotropyExtension.TEXTURE_MAX_ANISOTROPY_EXT, 16);\n</code></pre> <p>\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u7ea7\u522b\u3002\u5c06\u7ea7\u522b\u8bbe\u7f6e\u4e3a 1 \u5c06\u5173\u95ed\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u3002\u66f4\u9ad8\u7684\u503c\u4f1a\u4ea7\u751f\u66f4\u597d\u7684\u7ed3\u679c\u3002\u6709\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u5b9e\u73b0\u7684\u6700\u5927\u7ea7\u522b\uff0c\u4f46\u662f\u8bf7\u6c42\u4e00\u4e2a\u5927\u4e8e\u6700\u5927\u503c\u7684\u7ea7\u522b\u5e76\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u2014\u2014\u4f60\u53ea\u4f1a\u5f97\u5230\u6700\u5927\u7ea7\u522b\u3002\u8981\u627e\u51fa\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a</p> <pre><code>max = gl.getParameter(anisotropyExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n</code></pre> <p>\u5efa\u8bae\u5728\u4f7f\u7528\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u65f6\uff0c\u5c06\u7f29\u653e\u8fc7\u6ee4\u8bbe\u7f6e\u4e3a gl.LINEAR_MIPMAP_LINEAR\uff0c\u5c06\u653e\u5927\u8fc7\u6ee4\u8bbe\u7f6e\u4e3a gl.LINEAR\u3002\u4e00\u4e2a\u7eb9\u7406\u901a\u5e38\u4f7f\u7528\u4ee5\u4e0b\u7c7b\u4f3c\u7684\u4ee3\u7801\u8fdb\u884c\u914d\u7f6e\uff1a</p> <pre><code>gl.bindTexture(gl.TEXTURE_2D);\ngl.generateMipmap(gl.TEXTURE_2D); // \u9700\u8981 mipmap \u6765\u4f7f\u7528\u7f29\u653e\u8fc7\u6ee4\uff01\ngl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_LINEAR);\ngl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);\nif (anisotropyExtension != null) {\n    // \u53ea\u6709\u5728\u53ef\u7528\u65f6\u624d\u5f00\u542f\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u3002\n    max = gl.getParameter(anisotropyExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    gl.texParameteri(gl.TEXTURE_2D,\n            anisotropyExtension.TEXTURE_MAX_ANISOTROPY_EXT, max);\n}\n</code></pre> <p>\u5982\u679c\u6269\u5c55\u4e0d\u53ef\u7528\uff0c\u7eb9\u7406\u53ef\u80fd\u770b\u8d77\u6765\u4e0d\u5982\u5b83\u672c\u53ef\u4ee5\u7684\u90a3\u4e48\u597d\uff0c\u4f46\u5b83\u4ecd\u7136\u53ef\u4ee5\u5de5\u4f5c\uff08\u800c\u4e14\u53ea\u6709\u975e\u5e38\u7ec6\u5fc3\u7684\u7528\u6237\u624d\u53ef\u80fd\u6ce8\u610f\u5230\uff09\u3002</p> <p>We start with a simple extension that can improve the appearance of textures in some scenes. The standard filtering methods for sampling an image texture give poor results when the texture is viewed at an oblique angle. In that case, a pixel on the surface corresponds to a trapezoidal region in the texture, and the standard minification and magnification filter rules such as gl.LINEAR don't handle that case very well. (Filtering was covered in Subsection 4.3.2.) A better result can be obtained, at the cost of additional computation, using something called anisotropic filtering, which samples the texture taking the trapezoidal shape into account. Many GPUs can do anisotropic filtering. It is not a required feature in WebGL implementations, but it is commonly available as an extension. The anisotropic filtering extension can be used with both WebGL 1.0 and WebGL 2.0, in the same way.</p> <p>The sample program webgl/anisotropic-filtering.html shows how to use the anisotropic filtering extension. It shows a large plane textured with a brick image that can be viewed from a sharp, oblique angle. If the extension is available, then the user can turn anisotropic filtering on and off. If it is not available, the program will still draw the scene, but only using standard filtering. Here are two images from the program. Anisotropic filtering is used in the image on the right. On the left, without anisotropic filtering, the texture is blurred even at moderate distanced from the viewer:</p> <p></p> <p>Each WebGL extension has a name. The function gl.getExtension(name) is used to activate an extension, where name is a string containing the name of the extension. The return value of the function is null if the extension is not available, and you should always check the return value before attempting to use the extension. If the return value is not null, then it is a JavaScript object. The object might contain, for example, constants that are meant to be passed to WebGL functions in order to make use of the capabilities of the extension. It can also contain completely new functions.</p> <p>The name of the anisotropic filtering extension is \"EXT_texture_filter_anisotropic.\" To test for the availability of the extension and to activate it, a program can use a statement such as</p> <pre><code>anisotropyExtension = gl.getExtension(\"EXT_texture_filter_anisotropic\");\n</code></pre> <p>If anisotropyExtension is null, then the extension is not available. If it is not null, then the object has a property named TEXTURE_MAX_ANISOTROPY_EXT that can be used as a parameter to gl.texParameteri to set the level, or amount, of anisotropic filtering that will be applied to the texture. For example, after creating and binding a texture, a program might say</p> <pre><code>gl.texParameteri(gl.TEXTURE_2D, \n            anisotropyExtension.TEXTURE_MAX_ANISOTROPY_EXT, 16);\n</code></pre> <p>The third parameter is the anisotropic filtering level. Setting the level to 1 will turn off anisotropic filtering. Higher values give better results. There is an implementation-dependent maximum level, but asking for a level greater than the maximum is not an error\u2014you will simply get the maximum level. To find out the maximum, you can use</p> <pre><code>max = gl.getParameter( anisotropyExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n</code></pre> <p>It is recommended to use gl.LINEAR_MIPMAP_LINEAR as the minification filter and gl.LINEAR as the magnification filter when using anisotropic filtering. A texture would typically be configured using code similar to the following:</p> <pre><code>gl.bindTexture(gl.TEXTURE_2D);\ngl.generateMipmap(gl.TEXTURE_2D); // Need mipmaps for the minification filter!\ngl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_LINEAR);\ngl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);\nif (anisotropyExtension != null) {\n    // turn on anisotropic filtering only if it is available.\n    max = gl.getParameter(anisotropyExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    gl.texParameteri(gl.TEXTURE_2D,\n            anisotropyExtension.TEXTURE_MAX_ANISOTROPY_EXT, max);\n}\n</code></pre> <p>If the extension is not available, the texture might not look as good as it might have, but it will still work (and only a very observant user is likely to notice).</p>"},{"location":"cn/c7/s5/#752-\u6d6e\u70b9\u989c\u8272","title":"7.5.2 \u6d6e\u70b9\u989c\u8272","text":"<p>Floating-Point Colors</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u8003\u8651\u4e00\u5bf9\u540d\u4e3a \"OES_texture_float\" \u548c \"WEBGL_color_buffer_float\" \u7684\u6269\u5c55\u3002\u7b2c\u4e00\u4e2a\u6269\u5c55\u4f7f\u5f97\u53ef\u4ee5\u4f7f\u7528\u989c\u8272\u5206\u91cf\u503c\u4e3a\u6d6e\u70b9\u6570\u7684\u7eb9\u7406\uff0c\u800c\u4e0d\u662f\u516b\u4f4d\u6574\u6570\u3002\u7b2c\u4e8c\u4e2a\u6269\u5c55\u4f7f\u5f97\u53ef\u4ee5\u901a\u8fc7\u5c06\u8fd9\u6837\u7684\u7eb9\u7406\u7528\u4f5c\u5e27\u7f13\u51b2\u533a\u7684\u989c\u8272\u7f13\u51b2\u533a\u6765\u6e32\u67d3\u3002\uff08\u8fd9\u4e9b\u6269\u5c55\u4ec5\u9002\u7528\u4e8e WebGL 1.0\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684 WebGL 2.0 \u6269\u5c55\uff0cEXT_color_buffer_float\u3002\uff09</p> <p>\u4e3a\u4ec0\u4e48\u6709\u4eba\u60f3\u8fd9\u6837\u505a\u5462\uff1f\u516b\u4f4d\u6574\u6570\u5bf9\u4e8e\u89c6\u89c9\u4e0a\u8868\u793a\u989c\u8272\u662f\u8db3\u591f\u7684\uff0c\u4f46\u5b83\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u7cbe\u5ea6\u6765\u8fdb\u884c\u51c6\u786e\u7684\u8ba1\u7b97\u3002\u5bf9\u4e8e\u4f7f\u7528\u989c\u8272\u5206\u91cf\u8fdb\u884c\u5927\u91cf\u6570\u503c\u5904\u7406\u7684\u5e94\u7528\uff0c\u6d6e\u70b9\u503c\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002</p> <p>\u4ee5\u627e\u5230\u56fe\u50cf\u7684\u5e73\u5747\u989c\u8272\u503c\u4e3a\u4f8b\uff0c\u8fd9\u9700\u8981\u5c06\u5927\u91cf\u50cf\u7d20\u7684\u989c\u8272\u503c\u76f8\u52a0\u3002\u8fd9\u662f\u53ef\u4ee5\u901a\u8fc7\u5229\u7528 GPU \u7684\u5e76\u884c\u5904\u7406\u80fd\u529b\u6765\u52a0\u901f\u7684\u3002\u6211\u4f7f\u7528\u4e24\u4e2a\u5e27\u7f13\u51b2\u533a\u548c\u4e24\u4e2a\u7eb9\u7406\u4f5c\u4e3a\u989c\u8272\u7f13\u51b2\u533a\u7684\u6280\u672f\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\u6211\u5047\u8bbe\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u662f 2 \u7684\u5e42\u3002\u9996\u5148\u5c06\u56fe\u50cf\u7ed8\u5236\u5230\u7b2c\u4e00\u4e2a\u7eb9\u7406\u4e0a\u3002\u5c06\u56fe\u50cf\u60f3\u8c61\u6210\u6c34\u5e73\u548c\u5782\u76f4\u5206\u6210\u4e24\u534a\uff0c\u5f97\u5230\u56db\u4e2a\u7b49\u5927\u5c0f\u7684\u77e9\u5f62\u3002\u4f5c\u4e3a\u7b2c\u4e00\u6b65\uff0c\u8ba1\u7b97\u4e00\u4e2a\u534a\u5927\u5c0f\u7684\u56fe\u50cf\uff0c\u8fd9\u662f\u90a3\u56db\u4e2a\u77e9\u5f62\u7684\u5e73\u5747\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u534a\u5927\u5c0f\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u662f\u539f\u59cb\u56fe\u50cf\u4e2d\u56db\u4e2a\u50cf\u7d20\u989c\u8272\u7684\u5e73\u5747\u503c\u3002\u8fd9\u4e2a\u5e73\u5747\u56fe\u50cf\u53ef\u4ee5\u901a\u8fc7\u7ed8\u5236\u4e00\u4e2a\u534a\u5927\u5c0f\u7684\u77e9\u5f62\u5230\u7b2c\u4e8c\u4e2a\u5e27\u7f13\u51b2\u533a\u6765\u8ba1\u7b97\uff0c\u4f7f\u7528\u7b2c\u4e00\u4e2a\u7eb9\u7406\u4e2d\u7684\u56fe\u50cf\u7684\u591a\u4e2a\u6837\u672c\u3002\u4ee5\u4e0b\u662f\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u7684\u7247\u6bb5\u7740\u8272\u5668\uff1a</p> <pre><code>#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nvarying vec2 v_coords;  // \u7eb9\u7406\u5750\u6807\uff0c\u4e0e\u5bf9\u8c61\u5750\u6807\u76f8\u540c\u3002\nuniform sampler2D texture;  // \u5305\u542b\u539f\u59cb\u56fe\u50cf\u7684\u7eb9\u7406\u3002\nuniform float offset;  // \u7eb9\u7406\u5750\u6807\u7a7a\u95f4\u4e2d\u7684\u6b63\u65b9\u5f62\u5927\u5c0f\u3002\nvoid main() {\n    vec4 a = texture2D(texture, v_coords);\n    vec4 b = texture2D(texture, v_coords + vec2(offset,0));\n    vec4 c = texture2D(texture, v_coords + vec2(0,offset));\n    vec4 d = texture2D(texture, v_coords + vec2(offset,offset));\n    gl_FragColor = (a + b + c + d)/4.0;  // \u989c\u8272\u662f\u56db\u4e2a\u6837\u672c\u7684\u5e73\u5747\u503c\u3002\n}\n</code></pre> <p>\u5728\u8fd9\u7b2c\u4e00\u6b65\u4e2d\uff0c\u7ed8\u5236\u4e86\u9876\u70b9\u5728 (0,0) \u548c (0.5,0.5) \u7684\u6b63\u65b9\u5f62\uff0coffset \u662f 0.5\u3002\u7ed8\u5236\u662f\u5728\u5750\u6807\u7cfb\u7edf\u4e2d\u5b8c\u6210\u7684\uff0c\u5176\u4e2d\u9876\u70b9\u4e3a (0,0) \u548c (1,1) \u7684\u6b63\u65b9\u5f62\u8986\u76d6\u4e86\u6574\u4e2a\u7ed8\u56fe\u533a\u57df\u3002\u5728\u90a3\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\uff0c\u9876\u70b9\u5728 (0,0) \u548c (0.5,0.5) \u7684\u6b63\u65b9\u5f62\u8986\u76d6\u4e86\u7ed8\u56fe\u533a\u57df\u7684\u5de6\u4e0b\u56db\u5206\u4e4b\u4e00\u3002\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6837\u672c\u6765\u81ea\u7eb9\u7406\u56fe\u50cf\u7684\u90a3\u4e2a\u56db\u5206\u4e4b\u4e00\uff0c\u53e6\u5916\u4e09\u4e2a\u6837\u672c\u6765\u81ea\u56fe\u50cf\u5176\u4ed6\u4e09\u4e2a\u56db\u5206\u4e4b\u4e00\u4e2d\u7684\u5bf9\u5e94\u70b9\u3002</p> <p>\u5728\u7b2c\u4e8c\u6b65\u4e2d\uff0c\u4e24\u4e2a\u5e27\u7f13\u51b2\u533a\u7684\u89d2\u8272\u88ab\u4ea4\u6362\uff0c\u7ed8\u5236\u4e86\u9876\u70b9\u5728 (0,0) \u548c (0.25,0.25) \u7684\u6b63\u65b9\u5f62\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u7247\u6bb5\u7740\u8272\u5668\uff0coffset \u7b49\u4e8e 0.25\u3002\u7531\u4e8e\u5e27\u7f13\u51b2\u533a\u88ab\u4ea4\u6362\u4e86\uff0c\u7b2c\u4e8c\u6b65\u662f\u91c7\u6837\u7b2c\u4e00\u6b65\u4ea7\u751f\u7684\u534a\u5927\u5c0f\u56fe\u50cf\u3002\u7ed3\u679c\u662f\u56db\u5206\u4e4b\u4e00\u5927\u5c0f\u7684\u56fe\u50cf\uff0c\u5b83\u662f\u8986\u76d6\u534a\u5927\u5c0f\u56fe\u50cf\u7684\u56db\u4e2a\u77e9\u5f62\u7684\u5e73\u5747\u503c\u2014\u2014\u56e0\u6b64\u4e5f\u662f\u8986\u76d6\u539f\u59cb\u56fe\u50cf\u7684 16 \u4e2a\u77e9\u5f62\u7684\u5e73\u5747\u503c\u3002\u8fd9\u53ef\u4ee5\u91cd\u590d\u8fdb\u884c\uff0c\u4f7f\u7528\u8d8a\u6765\u8d8a\u5c0f\u7684\u6b63\u65b9\u5f62\uff0c\u76f4\u5230\u7ed3\u679c\u56fe\u50cf\u8db3\u591f\u5c0f\uff0c\u5176\u989c\u8272\u53ef\u4ee5\u6709\u6548\u5730\u8bfb\u56de\u5230 CPU \u5e76\u5728\u5176\u4e2d\u5e73\u5747\u3002\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u989c\u8272\u503c\uff0c\u5b83\u662f\u539f\u59cb\u56fe\u50cf\u4e2d\u6240\u6709\u50cf\u7d20\u989c\u8272\u7684\u5e73\u5747\u503c\u3002\u6211\u4eec\u671f\u671b\uff0c\u7531\u4e8e GPU \u5e76\u884c\u5b8c\u6210\u4e86\u5927\u91cf\u7684\u5de5\u4f5c\uff0c\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6bd4\u5728 CPU \u4e0a\u5b8c\u6210\u6240\u6709\u8ba1\u7b97\u66f4\u5feb\u7684\u7b54\u6848\u3002</p> <p>\u8fd9\u91cc\u7684\u5173\u952e\u662f\uff0c\u4e3a\u4e86\u83b7\u5f97\u51c6\u786e\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u5e0c\u671b\u989c\u8272\u5206\u91cf\u5728 GPU \u4e2d\u4ee5\u6d6e\u70b9\u503c\u8868\u793a\uff0c\u800c\u4e0d\u662f\u516b\u4f4d\u6574\u6570\u3002</p> <p>\u6211\u5728\u793a\u4f8b\u7a0b\u5e8f webgl/image-evolver.html \u4e2d\u4f7f\u7528\u4e86\u8fd9\u79cd\u6280\u672f\u3002\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u95ee\u9898\u662f\u627e\u5230\u4e24\u5e45\u56fe\u50cf\u4e4b\u95f4\u5e73\u5747\u5dee\u5f02\u7684\u989c\u8272\u3002\u6211\u9996\u5148\u5c06\u4e24\u5e45\u56fe\u50cf\u7ed8\u5236\u5230\u4e24\u4e2a\u7eb9\u7406\u4e0a\u3002\u7136\u540e\uff0c\u6211\u6e32\u67d3\u4e00\u4e2a\u5dee\u5f02\u56fe\u50cf\uff0c\u5176\u4e2d\u50cf\u7d20\u7684\u989c\u8272\u662f\u4e24\u4e2a\u7eb9\u7406\u4e2d\u76f8\u540c\u50cf\u7d20\u989c\u8272\u5dee\u5f02\u7684\u7edd\u5bf9\u503c\u3002\u8fd9\u662f\u7528\u53e6\u4e00\u4e2a\u7279\u6b8a\u7528\u9014\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u5b8c\u6210\u7684\u3002\u7136\u540e\uff0c\u6211\u5c06\u4e0a\u8ff0\u5e73\u5747\u8fc7\u7a0b\u5e94\u7528\u4e8e\u5dee\u5f02\u56fe\u50cf\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u7684\u5b9e\u9645\u76ee\u7684\u662f\u5c1d\u8bd5\u4f7f\u7528\u201c\u9057\u4f20\u7b97\u6cd5\u201d\u201c\u8fdb\u5316\u201d\u51fa\u4e00\u4e2a\u7ed9\u5b9a\u56fe\u50cf\u7684\u8fd1\u4f3c\u503c\u3002\uff08\u5b83\u7684\u7075\u611f\u6765\u81ea\u62112015\u5e74\u79cb\u5b63\u8bfe\u7a0b\u7684\u4e24\u4f4d\u5b66\u751f\uff0cFelix Taschbach \u548c Pieter Schaap\uff0c\u4ed6\u4eec\u4e3a\u4ed6\u4eec\u7684\u9879\u76ee\u505a\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u7684\u7a0b\u5e8f\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u6ca1\u6709\u4f7f\u7528 GPU\u3002\uff09\u5728\u7a0b\u5e8f\u4e2d\uff0c\u539f\u59cb\u56fe\u50cf\u4e0e\u8fd1\u4f3c\u503c\u4e4b\u95f4\u7684\u5e73\u5747\u5dee\u5f02\u88ab\u7528\u4f5c\u8861\u91cf\u8fd1\u4f3c\u503c\u6709\u591a\u597d\u7684\u6307\u6807\u3002\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7070\u5ea6\u56fe\u50cf\u4f5c\u4e3a\u76ee\u6807\uff0c\u7528\u5c0f\u65b9\u5757\u5236\u4f5c\u8fd1\u4f3c\u503c\u3002\u60a8\u4e0d\u9700\u8981\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u9057\u4f20\u7b97\u6cd5\u7684\u4fe1\u606f\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u8be5\u7a0b\u5e8f\u6ca1\u6709\u5b9e\u9645\u7528\u9014\u3002\u7136\u800c\uff0c\u5982\u679c\u60a8\u60f3\u5c1d\u8bd5\u7406\u89e3\u5b83\uff0c\u6e90\u4ee3\u7801\u6709\u5927\u91cf\u7684\u6ce8\u91ca\u3002\u8fd9\u662f\u7a0b\u5e8f\u5728\u4e00\u4e2a\u7279\u522b\u6210\u529f\u7684\u8fd0\u884c\u4e2d\u7684\u622a\u56fe\uff0c\u663e\u793a\u4e86\u539f\u59cb\u56fe\u50cf\u548c\u5728\u8fd0\u884c\u9057\u4f20\u7b97\u6cd57500\u4ee3\u540e\u4ea7\u751f\u7684\u6700\u597d\u8fd1\u4f3c\u503c\uff1a</p> <p></p> <p>\u4f46\u6211\u4eec\u5728\u8fd9\u91cc\u611f\u5174\u8da3\u7684\u662f\u7a0b\u5e8f\u5982\u4f55\u4f7f\u7528 WebGL \u6d6e\u70b9\u989c\u8272\u6269\u5c55\u3002\u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u671f\u95f4\u5c1d\u8bd5\u6fc0\u6d3b\u6269\u5c55\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>let EXTcbf = gl.getExtension(\"WEBGL_color_buffer_float\");\nlet EXTtf = gl.getExtension(\"OES_texture_float\");\nif (!EXTcbf || !EXTtf) {\n    throw new Error(\"This program requires the WebGL extension\" + \n            \"WEBGL_color_buffer_float, which is not available in this browser.\");\n}\n</code></pre> <p>\u7a0b\u5e8f\u9700\u8981\u8fd9\u4e9b\u6269\u5c55\uff0c\u6240\u4ee5\u5982\u679c\u65e0\u6cd5\u6fc0\u6d3b\u5b83\u4eec\uff0c\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6269\u5c55\u5bf9\u8c61 EXTcbf \u548c EXTtf \u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u9700\u8981\u7684\u5c5e\u6027\uff1b\u7136\u800c\uff0c\u8c03\u7528 gl.getExtension \u6765\u6fc0\u6d3b\u6269\u5c55\u4ecd\u7136\u662f\u5fc5\u8981\u7684\u3002</p> <p>\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e24\u4e2a\u6d6e\u70b9\u7eb9\u7406\uff0c\u5b83\u4eec\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\u7528\u4f5c\u989c\u8272\u7f13\u51b2\u533a\u3002\uff08\u89c1 7.4.2\u5c0f\u8282\u3002\uff09\u4ee5\u4e0b\u662f\u521b\u5efa\u5176\u4e2d\u4e00\u4e2a\u7eb9\u7406\u7684\u4ee3\u7801\uff1a</p> <pre><code>tex1 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, tex1);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.FLOAT, null);\n</code></pre> <p>\u6700\u540e\u4e00\u884c\u7684\u53c2\u6570 gl.FLOAT \u6307\u5b9a\u4e86\u7eb9\u7406\u4e2d\u989c\u8272\u5206\u91cf\u7684\u6570\u636e\u7c7b\u578b\u4e3a float\u3002\u5982\u679c\u6269\u5c55\u6ca1\u6709\u88ab\u6fc0\u6d3b\uff0c\u8be5\u6570\u636e\u7c7b\u578b\u5c06\u662f\u9519\u8bef\u7684\u3002</p> <p>\u5f53 GPU \u4f7f\u7528\u8fd9\u4e9b\u7eb9\u7406\u8fdb\u884c\u5e73\u5747\u8ba1\u7b97\u65f6\uff0c\u5b83\u6b63\u5728\u8fdb\u884c\u6d6e\u70b9\u8ba1\u7b97\u3002\u7a0b\u5e8f\u8ba1\u7b97\u4e86\u4e00\u7cfb\u5217\u8d8a\u6765\u8d8a\u5c0f\u7684\u5e73\u5747\u56fe\u50cf\uff0c\u6700\u540e\u4ee5\u4e00\u4e2a 4x4 \u50cf\u7d20\u7684\u56fe\u50cf\u7ed3\u675f\u3002\u7136\u540e\uff0c\u5b83\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5c06 16 \u4e2a\u50cf\u7d20\u989c\u8272\u4ece\u7eb9\u7406\u4e2d\u8bfb\u56de\uff1a</p> <pre><code>let data = new Float32Array( 4*4*4 ); // 16 \u4e2a\u50cf\u7d20\uff0c\u6bcf\u4e2a\u50cf\u7d20 4 \u4e2a\u6570\u5b57\ngl.readPixels(0,0,4,4,gl.RGBA,gl.FLOAT,data)\n</code></pre> <p>gl.readPixels \u8c03\u7528\u5c06 16 \u4e2a\u50cf\u7d20\u7684\u989c\u8272\u6570\u636e\u8bfb\u5165\u6570\u7ec4 data \u4e2d\u3002\u540c\u6837\uff0cgl.FLOAT \u53c2\u6570\u6307\u5b9a\u4e86\u6570\u636e\u7c7b\u578b\uff0c\u53ea\u6709\u5728\u6fc0\u6d3b\u4e86\u6269\u5c55\u4e4b\u540e\uff0c\u8be5\u53c2\u6570\u503c\u5728 gl.readPixels \u4e2d\u624d\u662f\u5408\u6cd5\u7684\u3002</p> <p>As a second example, we consider a pair of extensions named \"OES_texture_float\" and \"WEBGL_color_buffer_float\". The first of these makes it possible to use textures in which color component values are floating-point numbers, instead of eight-bit integers. The second makes it possible to render to such a texture by using it as the color buffer in a framebuffer. (These extensions are only for WebGL 1.0, but there is a similar WebGL 2.0 extension, EXT_color_buffer_float.)</p> <p>Why would someone want to do this? Eight-bit integers are fine for representing colors visually, but they don't have enough precision for doing accurate calculations. For applications that do significant numerical processing with color components, floating-point values are essential.</p> <p>As an example, consider finding the average color value of an image, which requires adding up the color values from a large number of pixels. This is something that can be speeded up by using the parallel processing power of a GPU. My technique for doing so uses two framebuffers, with two textures serving as color buffers. I assume that the image width and height are powers of two. Start by drawing the image to the first texture. Think of the image as divided in half, horizontally and vertically, giving four equal-sizes rectangles. As a first step, compute a half-size image that is the average of those four rectangles. That is, the color of a pixel in the half-size image is the average of the colors of four pixels in the original. The averaged image can be computed by drawing a half-size rectangle to the second framebuffer, using multiple samples from the image in the first texture. Here is a fragment shader that does the work:</p> <pre><code>#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nvarying vec2 v_coords;  // Texture coordinates, same as object coords.\nuniform sampler2D texture;  // A texture containing the original image.\nuniform float offset;  // Size of square in texture coordinate space.\nvoid main() {\n    vec4 a = texture2D(texture, v_coords);\n    vec4 b = texture2D(texture, v_coords + vec2(offset,0));\n    vec4 c = texture2D(texture, v_coords + vec2(0,offset));\n    vec4 d = texture2D(texture, v_coords + vec2(offset,offset));\n    gl_FragColor = (a + b + c + d)/4.0;  // Color is average of four samples.\n}\n</code></pre> <p>In this first pass, the square with vertices at (0,0) and (0.5,0.5) is rendered, and offset is 0.5. The drawing is done in a coordinate system in which the square with vertices (0,0) and (1,1) covers the entire drawing area. In that coordinate system, the square with vertices at (0,0) and (0.5,0.5) covers the lower left quarter of the drawing area. The first sample in the fragment shader comes from that quarter of the texture image, and the other three samples come from corresponding points in the other three quarters of the image.</p> <p>In a second pass, the roles of the two framebuffers are swapped, and a square with vertices at (0,0) and (0.25,0.25) is drawn, using the same fragment shader with offset equal to 0.25. Since the framebuffers were swapped, the second pass is sampling the half-sized image that was produced in the first pass. The result is a quarter-sized image that is the average of four rectangles that cover the half-sized image\u2014and therefore of 16 rectangles that cover the original image. This can be repeated, with smaller and smaller squares, until the resulting image is small enough that its colors can be efficiently read back into the CPU and averaged there. The result is a color value that is the average of all the pixels from the original image. We expect that, because a lot of the work is done in parallel by the GPU, we can get the answer much faster using this technique than if we had simply done all the computations on the CPU.</p> <p>The point here is that for an accurate result, we want the color components to be represented as floating point values in the GPU, not as eight-bit integers.</p> <p>I use this technique in the sample program webgl/image-evolver.html. In that program, the problem is to find the average difference in color between two images. I start by drawing the two images to two textures. I then render a difference image, in which the color of a pixel is the absolute value of the difference between the colors of the same pixel in the two textures. This is done with another special-purpose shader program. I then apply the above averaging process to the difference image.</p> <p>The actual point of the sample program is to try to \"evolve\" an approximation to a given image, using a \"genetic algorithm.\" (It was inspired by two students from my Fall, 2015 class, Felix Taschbach and Pieter Schaap, who worked on a similar program for their final project, though they didn't use the GPU.) In the program, the average difference between the original image and an approximation is used as a measure of how good the approximation is. I used a very simple grayscale image as the goal, with approximations made from small squares. You don't need to know anything about the genetic algorithm, especially since the program has no practical purpose. However, the source code is heavily commented if you want to try to understand it. Here is a screenshot from one particularly successful run of the program, showing the original image and the best approximation produced after running the genetic algorithm for 7500 generations:</p> <p></p> <p>But what interests us here is how the program uses the WebGL floating-point color extensions. The program attempts to activate the extensions during initialization using the following code:</p> <pre><code>let EXTcbf = gl.getExtension(\"WEBGL_color_buffer_float\");\nlet EXTtf = gl.getExtension(\"OES_texture_float\");\nif (!EXTcbf || !EXTtf) {\nthrow new Error(\"This program requires the WebGL extension\" + \n        \"WEBGL_color_buffer_float, which is not available in this browser.\");\n}\n</code></pre> <p>The program requires the extensions, so an exception is thrown if they can't be activated. The extension objects, EXTcbf and EXTtf, don't have any properties that are needed in this program; however, it is still necessary to call gl.getExtension to activate the extensions.</p> <p>The program creates two floating-point textures that are attached to framebuffers for use as color buffers. (See Subsection 7.4.2.) Here is the code that creates one of those textures:</p> <pre><code>tex1 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, tex1);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.FLOAT, null);\n</code></pre> <p>The parameter gl.FLOAT in the last line specifies that the data type for the color components in the texture is float. That data type would be an error if the extensions had not been activated.</p> <p>When the GPU does the averaging computation with these textures, it is doing floating-point calculations. The program computes a series of smaller and smaller averaged images, stopping with a 4-by-4 pixel image. It then reads the 16 pixel colors back from the texture using the following code:</p> <pre><code>let data = new Float32Array( 4*4*4 ); // 16 pixels, 4 numbers per pixels\ngl.readPixels(0,0,4,4,gl.RGBA,gl.FLOAT,data)\n</code></pre> <p>The call to gl.readPixels reads the color data for the 16 pixels into the array, data. Again, the gl.FLOAT parameter specifies the data type, and that parameter value is legal in gl.readPixels only because the extensions have been activated.</p>"},{"location":"cn/c7/s5/#753-webgl-10-\u4e2d\u7684\u5b9e\u4f8b\u5316\u7ed8\u56fe","title":"7.5.3 WebGL 1.0 \u4e2d\u7684\u5b9e\u4f8b\u5316\u7ed8\u56fe","text":"<p>Instanced Drawing in WebGL 1.0</p> \u4e2d\u6587\u82f1\u6587 <p>6.1.7\u5c0f\u8282 \u548c 6.1.8\u5c0f\u8282 \u8ba8\u8bba\u4e86 WebGL 2.0 \u7684\u4e24\u4e2a\u7279\u6027\uff1a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\uff08Vertex Array Objects\uff0cVAOs\uff09\u548c\u5b9e\u4f8b\u5316\u7ed8\u56fe\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u7279\u6027\u4e0d\u662f WebGL 1.0 \u7684\u6807\u51c6\u90e8\u5206\uff0c\u4f46\u4e24\u8005\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u53ef\u9009\u7684 WebGL 1.0 \u6269\u5c55\u6765\u4f7f\u7528\u3002VAOs \u7531\u6269\u5c55 \"OES_vertex_array_object\" \u542f\u7528\uff0c\u800c\u5b9e\u4f8b\u5316\u7ed8\u56fe\u7531 \"ANGLE_instanced_arrays\" \u542f\u7528\u3002\u4f5c\u4e3a\u793a\u4f8b\uff0c\u6211\u4eec\u7b80\u8981\u5730\u770b\u4e00\u4e0b WebGL 1.0 \u4e2d\u7684\u5b9e\u4f8b\u5316\u7ed8\u56fe\u3002</p> <p>\u793a\u4f8b WebGL 1.0 \u7a0b\u5e8f webgl/instancing-test-webgl1.html \u4f7f\u7528\u4e86\u5b9e\u4f8b\u5316\u7ed8\u56fe\u6269\u5c55\u3002\u5b83\u662f\u4ece 6.1.8\u5c0f\u8282 \u4e2d\u7684\u793a\u4f8b WebGL 2.0 \u7a0b\u5e8f\u4fee\u6539\u800c\u6765\u7684\uff0c\u4fee\u6539\u4e3a\u4f7f\u7528\u7248\u672c 1.0\uff0c\u4f46\u529f\u80fd\u5b8c\u5168\u76f8\u540c\u3002\u8981\u5728 WebGL 1.0 \u4e2d\u4f7f\u7528\u5b9e\u4f8b\u5316\u7ed8\u56fe\uff0c\u5fc5\u987b\u542f\u7528\u76f8\u5e94\u7684\u6269\u5c55\uff1a</p> <pre><code>instancedDrawExt = gl.getExtension(\"ANGLE_instanced_arrays\");\nif (!instancedDrawExt) {\n    throw new Error(\"WebGL 1.0 Instanced Arrays extension is required.\");\n}\n</code></pre> <p>\u6269\u5c55\u5bf9\u8c61 instancedDrawExt \u5305\u542b\u4e0e WebGL 2.0 \u4e2d\u5b9e\u4f8b\u5316\u7ed8\u56fe\u529f\u80fd\u7b49\u4ef7\u7684\u51fd\u6570\uff1agl.vertexAttribDivisor()\u3001gl.drawArraysInstanced() \u548c gl.drawElementsInstanced()\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u51fd\u6570\u662f\u6269\u5c55\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u56fe\u5f62\u4e0a\u4e0b\u6587 gl \u7684\u5c5e\u6027\uff0c\u5b83\u4eec\u7684\u540d\u5b57\u4e2d\u9644\u52a0\u4e86 \"ANGLE\" \u8fd9\u4e2a\u8bcd\u3002\u56e0\u6b64\uff0c\u539f\u59cb WebGL 2.0 \u7a0b\u5e8f\u4e2d\u7684\u547d\u4ee4</p> <pre><code>gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 64, DISK_COUNT);\n</code></pre> <p>\u5728 WebGL 1.0 \u7a0b\u5e8f\u4e2d\u88ab\u66ff\u6362\u4e3a</p> <pre><code>instancedDrawExt.drawArraysInstancedANGLE(gl.TRIANGLE_FAN, 0, 64, DISK_COUNT);\n</code></pre> <p>\u540c\u6837\u5730\uff0c</p> <pre><code>gl.vertexAttribDivisor(a_color_loc,1);\n</code></pre> <p>\u53d8\u4e3a</p> <pre><code>instancedDrawExt.vertexAttribDivisorANGLE(a_color_loc,1);\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u4e0d\u4f7f\u7528\u4efb\u4f55\u6269\u5c55\u7684 WebGL 1.0 \u7a0b\u5e8f\u5c06\u65e0\u9700\u4efb\u4f55\u4fee\u6539\u5373\u53ef\u4f5c\u4e3a WebGL 2.0 \u7a0b\u5e8f\u5de5\u4f5c\u3002\u7136\u800c\uff0c\u5982\u679c WebGL 1.0 \u7a0b\u5e8f\u4f7f\u7528\u4e86\u5728 WebGL 2.0 \u4e2d\u4e0d\u518d\u53ef\u7528\u6216\u4e0d\u518d\u9700\u8981\u7684\u6269\u5c55\uff0c\u90a3\u4e48\u5c06\u9700\u8981\u4e00\u4e9b\u5de5\u4f5c\u6765\u5c06\u7a0b\u5e8f\u8f6c\u6362\u4e3a WebGL 2.0\u3002</p> <p>Subsection 6.1.7 and Subsection 6.1.8 discussed two features of WebGL 2.0, Vertex Array Objects and instanced drawing. Although these features are not a standard part of WebGL 1.0, both are available as optional WebGL 1.0 extensions. VAOs are enabled by the extension \"OES_vertex_array_object\", while instanced drawing is enabled by \"ANGLE_instanced_arrays\". As an example, we look briefly at instanced drawing in WebGL 1.0.</p> <p>The sample WebGL 1.0 program webgl/instancing-test-webgl1.html uses the instanced drawing extension. It is a copy of the sample WebGL 2.0 program from Subsection 6.1.8, modified to use version 1.0, but with exactly the same functionality. To use instanced drawing in WebGL 1.0, the appropriate extension has to be enabled:</p> <pre><code>instancedDrawExt = gl.getExtension(\"ANGLE_instanced_arrays\");\nif (!instancedDrawExt) {\n    throw new Error(\"WebGL 1.0 Instanced Arrays extension is required.\");\n}\n</code></pre> <p>The extension object, instancedDrawExt, contains functions that are equivalent to the WebGL 2.0 functions for instanced drawing: gl.vertexAttribDivisor(). gl.drawArraysInstanced(), and gl.drawElementsInstanced(). However, the functions are properties of the extension object, not of the graphics context gl, and their names have the word \"ANGLE\" appended. So, the command</p> <pre><code>gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 64, DISK_COUNT);\n</code></pre> <p>from the original WebGL 2.0 program is replaced by</p> <pre><code>instancedDrawExt.drawArraysInstancedANGLE(gl.TRIANGLE_FAN, 0, 64, DISK_COUNT);\n</code></pre> <p>in the WebGL 1.0 program. And</p> <pre><code>gl.vertexAttribDivisor(a_color_loc,1);\n</code></pre> <p>becomes</p> <pre><code>instancedDrawExt.vertexAttribDivisorANGLE(a_color_loc,1);\n</code></pre> <p>Note that, in general, a WebGL 1.0 program that does not use any extensions will work as a WebGL 2.0 program without any modifications. However, if the WebGL 1.0 program uses extensions that are no longer available or no longer needed in WebGL 2.0, some work will be required to convert the program to WebGL 2.0.</p>"},{"location":"cn/c7/s5/#754-\u5ef6\u8fdf\u7740\u8272","title":"7.5.4 \u5ef6\u8fdf\u7740\u8272","text":"<p>Deferred Shading</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5c06\u8ba8\u8bba\u4e00\u4e2a WebGL 1.0 \u7684\u6269\u5c55\uff0c\u8fd9\u4e2a\u6269\u5c55\u5bf9\u4e8e\u4e00\u79cd\u79f0\u4e3a\u5ef6\u8fdf\u7740\u8272\u7684\u91cd\u8981\u6e32\u67d3\u6280\u672f\u975e\u5e38\u6709\u7528\u3002\u6211\u6ca1\u6709\u5ef6\u8fdf\u6e32\u67d3\u7684\u793a\u4f8b\u7a0b\u5e8f\uff0c\u800c\u4e14\u6211\u53ea\u4f1a\u5728\u4e00\u822c\u672f\u8bed\u4e2d\u8ba8\u8bba\u5b83\u3002</p> <p>\u5ef6\u8fdf\u7740\u8272\u88ab\u7528\u4f5c\u6e32\u67d3\u590d\u6742\u573a\u666f\u65f6\u7684\u4f18\u5316\uff0c\u5e76\u4e14\u7ecf\u5e38\u7528\u4e8e\u52a0\u901f\u89c6\u9891\u6e38\u620f\u4e2d\u7684\u6e32\u67d3\u3002\u5b83\u4e0e\u5149\u7167\u6700\u5bc6\u5207\u76f8\u5173\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u7528\u6765\u6e32\u67d3\u5177\u6709\u5927\u91cf\u5149\u6e90\u7684\u573a\u666f\uff0c\u4f46\u5bf9\u5176\u4ed6\u6548\u679c\u4e5f\u6709\u7528\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u5728 OpenGL \u6216 WebGL \u7740\u8272\u5668\u4e2d\u53ef\u4ee5\u8868\u793a\u7684\u5149\u6e90\u6570\u91cf\u662f\u6709\u9650\u7684\u3002\u4f46\u662f\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u904d\u7b97\u6cd5\u6765\u6e32\u67d3\u5177\u6709\u8bb8\u591a\u5149\u6e90\u7684\u573a\u666f\uff1a\u6bcf\u4e2a\u904d\u5386\u8ba1\u7b97\u4e00\u4e2a\u5149\u6e90\u6216\u5c11\u6570\u51e0\u4e2a\u5149\u6e90\u7684\u8d21\u732e\uff0c\u5e76\u5c06\u904d\u5386\u7684\u7ed3\u679c\u76f8\u52a0\u4ee5\u7ed9\u51fa\u5b8c\u6574\u7684\u573a\u666f\u3002\u95ee\u9898\u662f\uff0c\u5982\u679c\u6bcf\u4e2a\u904d\u5386\u7684\u6e32\u67d3\u90fd\u4ee5\u6b63\u5e38\u65b9\u5f0f\u5b8c\u6210\uff0c\u90a3\u4e48\u6709\u5f88\u591a\u5fc5\u987b\u91cd\u65b0\u8ba1\u7b97\u7684\u4e8b\u60c5\uff0c\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\uff0c\u5728\u6bcf\u4e2a\u904d\u5386\u4e2d\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f7f\u7528\u9010\u50cf\u7d20\u5149\u7167\uff0c\u5305\u62ec\u8ba1\u7b97\u6bcf\u4e2a\u50cf\u7d20\u7684\u6750\u8d28\u5c5e\u6027\u548c\u5355\u4f4d\u6cd5\u7ebf\u5411\u91cf\u3002\u5ef6\u8fdf\u7740\u8272\u65e8\u5728\u907f\u514d\u91cd\u590d\u7684\u5de5\u4f5c\u3002</p> <p>\u5728\u5ef6\u8fdf\u7740\u8272\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u904d\u5386\u7528\u4e8e\u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u6750\u8d28\u5c5e\u6027\u3001\u6cd5\u7ebf\u5411\u91cf\u4ee5\u53ca\u6240\u9700\u7684\u5176\u4ed6\u6570\u636e\u3002\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u90fd\u88ab\u4fdd\u5b58\u8d77\u6765\uff0c\u4ee5\u4fbf\u5728\u989d\u5916\u7684\u904d\u5386\u4e2d\u7528\u4e8e\u8ba1\u7b97\u5149\u7167\u548c\u5176\u4ed6\u53ef\u80fd\u7684\u6548\u679c\u3002\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u50cf\u7d20\uff0c\u53ea\u4fdd\u5b58\u5728\u50cf\u7d20\u5904\u5b9e\u9645\u53ef\u89c1\u7684\u5bf9\u8c61\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u9690\u85cf\u8868\u9762\u7684\u6570\u636e\u4e0d\u9700\u8981\u6e32\u67d3\u573a\u666f\u3002\u7b2c\u4e00\u4e2a\u904d\u5386\u4f7f\u7528\u573a\u666f\u4e2d\u5bf9\u8c61\u7684\u51e0\u4f55\u4f53\u548c\u5c5e\u6027\u3002\u540e\u7eed\u904d\u5386\u9700\u8981\u4e86\u89e3\u7684\u5173\u4e8e\u51e0\u4f55\u4f53\u548c\u5c5e\u6027\u7684\u6240\u6709\u4fe1\u606f\u90fd\u5728\u4fdd\u5b58\u7684\u6570\u636e\u4e2d\u3002</p> <p>\u4fdd\u5b58\u7684\u6570\u636e\u53ef\u4ee5\u5b58\u50a8\u5728\u7eb9\u7406\u5bf9\u8c61\u4e2d\u3002\uff08\u6d6e\u70b9\u7eb9\u7406\u5bf9\u8c61\u975e\u5e38\u9002\u5408\u6b64\u76ee\u7684\uff0c\u56e0\u4e3a\u6570\u636e\u5c06\u7528\u4e8e\u8fdb\u4e00\u6b65\u7684\u8ba1\u7b97\u3002\uff09\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7eb9\u7406\u4e2d\u7684\u503c\u5e76\u4e0d\u4e00\u5b9a\u4ee3\u8868\u56fe\u50cf\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u7eb9\u7406\u4e2d\u7684 RGB \u989c\u8272\u5206\u91cf\u53ef\u80fd\u8868\u793a\u6cd5\u7ebf\u5411\u91cf\u7684 x\u3001y \u548c z \u5750\u6807\u3002\u5982\u679c\u540e\u7eed\u904d\u5386\u4e2d\u9700\u8981\u6df1\u5ea6\u503c\uff0c\u5b83\u53ef\u80fd\u5b58\u50a8\u5728\u540c\u4e00\u7eb9\u7406\u7684 alpha \u989c\u8272\u5206\u91cf\u4e2d\u3002\u53e6\u4e00\u4e2a\u7eb9\u7406\u53ef\u80fd\u4fdd\u5b58\u6f2b\u53cd\u5c04\u989c\u8272\uff0c\u800c\u7b2c\u4e09\u4e2a\u7eb9\u7406\u5728\u5176 RGB \u5206\u91cf\u4e2d\u4fdd\u5b58\u955c\u9762\u989c\u8272\uff0c\u5e76\u5728\u5176 alpha \u5206\u91cf\u4e2d\u4fdd\u5b58\u5149\u6cfd\u5ea6\u503c\u3002\u7740\u8272\u5668\u7a0b\u5e8f\u53ef\u4ee5\u81ea\u7531\u5730\u4ee5\u5b83\u4eec\u559c\u6b22\u7684\u65b9\u5f0f\u89e3\u91ca\u7eb9\u7406\u4e2d\u7684\u6570\u636e\u3002</p> <p>WebGL \u7740\u8272\u5668\u53ef\u4ee5\u5199\u5165\u7eb9\u7406\u6570\u636e\uff0c\u4f7f\u7528\u5e27\u7f13\u51b2\u533a\u3002\u4f46\u662f\u6807\u51c6\u7684 WebGL 1.0 \u4e00\u6b21\u53ea\u80fd\u5199\u5165\u4e00\u4e2a\u5e27\u7f13\u51b2\u533a\u3002\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e2a\u9700\u8981\u8ba1\u7b97\u7684\u7eb9\u7406\u7684\u5355\u72ec\u904d\u5386\u6765\u5b8c\u6210\uff0c\u4f46\u8fd9\u5c06\u6d89\u53ca\u5230\u5927\u91cf\u7684\u5197\u4f59\u8ba1\u7b97\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u8bd5\u56fe\u907f\u514d\u7684\u3002\u6211\u4eec\u9700\u8981\u4e00\u4e2a WebGL \u6269\u5c55\uff0c\u4f7f\u5f97\u7740\u8272\u5668\u53ef\u4ee5\u540c\u65f6\u5199\u5165\u591a\u4e2a\u5e27\u7f13\u51b2\u533a\u3002\u6211\u4eec\u9700\u8981\u7684\u6269\u5c55\u540d\u4e3a \"WEBGL_draw_buffers\"\u3002\u5f53\u6fc0\u6d3b\u8be5\u6269\u5c55\u65f6\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u7eb9\u7406\uff08\u6216\u6e32\u67d3\u7f13\u51b2\u533a\uff09\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\uff0c\u5e76\u4e14\u4f7f\u5f97\u7740\u8272\u5668\u53ef\u4ee5\u540c\u65f6\u5c06\u6570\u636e\u5199\u5165\u6240\u6709\u9644\u52a0\u7684\u7740\u8272\u5668\u3002\u8fd9\u4e2a\u6269\u5c55\u4f7f\u7528\u8d77\u6765\u76f8\u5bf9\u590d\u6742\u3002\u5b83\u5fc5\u987b\u50cf\u901a\u5e38\u4e00\u6837\u901a\u8fc7\u4ee5\u4e0b\u5f62\u5f0f\u7684\u8bed\u53e5\u6fc0\u6d3b\uff1a</p> <pre><code>EXTdb = gl.getExtension(\"WEBGL_draw_buffers\");\n</code></pre> <p>\u5047\u8bbe\u6269\u5c55\u53ef\u7528\uff0c\u7740\u8272\u5668\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7684\u6700\u5927\u989c\u8272\u7f13\u51b2\u533a\u6570\u91cf\u7531 EXTdb.MAX_DRAW_BUFFERS_WEBGL \u7ed9\u51fa\uff0c\u81f3\u5c11\u4e3a\u56db\u4e2a\u3002\u6709\u4e86\u8fd9\u4e2a\u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684\u4ee3\u7801\u5c06\u591a\u4e2a\u7eb9\u7406\u4f5c\u4e3a\u989c\u8272\u7f13\u51b2\u533a\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\uff1a</p> <pre><code>gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n    EXTdb.COLOR_ATTACHMENT0_WEBGL, gl.TEXTURE_2D, texture1, 0);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n    EXTdb.COLOR_ATTACHMENT1_WEBGL, gl.TEXTURE_2D, texture2, 0);\n</code></pre> <p>\u4ee5\u6b64\u7c7b\u63a8\uff0c\u4f7f\u7528\u6269\u5c55\u5bf9\u8c61\u4e2d\u7684\u5e38\u91cf\u5982 EXTdb.COLOR_ATTACHMENT1_WEBGL \u6765\u6307\u5b9a\u9644\u52a0\u70b9\u3002</p> <p>\u901a\u5e38\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\uff0c\u8f93\u51fa\u5230\u989c\u8272\u7f13\u51b2\u533a\u7684\u989c\u8272\u662f\u901a\u8fc7\u7ed9\u7279\u6b8a\u53d8\u91cf gl_FragColor \u5206\u914d\u4e00\u4e2a\u503c\u6765\u6307\u5b9a\u7684\u3002\u5f53\u4f7f\u7528\u591a\u4e2a\u989c\u8272\u7f13\u51b2\u533a\u65f6\uff0c\u60c5\u51b5\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7247\u6bb5\u7740\u8272\u5668\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u53d8\u91cf gl_FragData\uff0c\u5b83\u662f\u4e00\u4e2a vec4 \u6570\u7ec4\uff0c\u6bcf\u4e2a\u53ef\u80fd\u7684\u989c\u8272\u7f13\u51b2\u533a\u4e00\u4e2a\u3002\u901a\u8fc7\u7ed9 gl_FragData[0], gl_FragData[1], .... \u5206\u914d\u503c\uff0c\u5c06\u989c\u8272\u8f93\u51fa\u5230\u989c\u8272\u7f13\u51b2\u533a\u3002\u56e0\u4e3a\u8fd9\u662f\u7740\u8272\u5668\u5408\u6cd5\u8bed\u6cd5\u7684\u4e00\u4e2a\u53d8\u5316\uff0c\u6240\u4ee5\u8fd8\u5fc5\u987b\u901a\u8fc7\u5728\u4ee3\u7801\u5f00\u5934\u6dfb\u52a0\u4ee5\u4e0b\u884c\u6765\u5728\u7247\u6bb5\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\u6fc0\u6d3b\u6269\u5c55\uff1a</p> <pre><code>#extension GL_EXT_draw_buffers : require\n</code></pre> <p>\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5728\u989c\u8272\u7f13\u51b2\u533a\u4e2d\u5b58\u50a8\u6cd5\u7ebf\u5411\u91cf\u3001\u6f2b\u53cd\u5c04\u989c\u8272\u3001\u955c\u9762\u989c\u8272\u548c\u5bf9\u8c61\u5750\u6807\u3002\u5047\u8bbe\u8fd9\u4e9b\u503c\u4f5c\u4e3a\u53d8\u5316\u53d8\u91cf\u6216 uniform \u53d8\u91cf\u8f93\u5165\u5230\u7740\u8272\u5668\u4e2d\uff0c\u9664\u4e86\u6f2b\u53cd\u5c04\u989c\u8272\uff0c\u5b83\u662f\u4ece\u7eb9\u7406\u4e2d\u91c7\u6837\u7684\u3002\u90a3\u4e48\u7247\u6bb5\u7740\u8272\u5668\u53ef\u80fd\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>#extension GL_EXT_draw_buffers : require\nprecision highp float;\nvarying vec3 v_normal, v_objectCoords;\nvarying vec2 v_texCoords;\nuniform vec3 u_specular;\nuniform float u_shininess;\nuniform sampler2D texture;\nvoid main() {\n    gl_FragData[0] = vec4( normalize(v_normal), 0 );\n    gl_FragData[1] = vec4( v_object_coords, 1 );\n    gl_FragData[2] = texture2D( texture, v_texCoords );\n    gl_fragData[3] = vec4( u_specular, u_shininess );\n}\n</code></pre> <p>\u4f7f\u7528\u6269\u5c55\u7684\u6700\u540e\u4e00\u4e2a\u8981\u6c42\u662f\u6307\u5b9a\u5728 gl_FragData \u4e2d\u4f7f\u7528\u7684\u7d22\u5f15\u4e0e\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\u7684\u989c\u8272\u7f13\u51b2\u533a\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u4f3c\u4e4e\u8fd9\u79cd\u5bf9\u5e94\u5173\u7cfb\u5e94\u8be5\u662f\u81ea\u52a8\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0d\u662f\u3002\u4f60\u5fc5\u987b\u4f7f\u7528\u6269\u5c55\u5bf9\u8c61\u4e2d\u7684 JavaScript \u51fd\u6570 EXTdb.drawBuffersWEBGL \u6765\u6307\u5b9a\u5b83\u3002\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\uff0c\u6570\u7ec4\u4e2d\u7684\u503c\u4ece\u5e38\u91cf EXTdb.COLOR_ATTACHMENT0_WEBGL, EXTdb.COLOR_ATTACHMENT1_WEBGL, .... \u4e2d\u9009\u62e9\u3002\u8fd9\u4e9b\u4e0e\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u6307\u5b9a\u989c\u8272\u7f13\u51b2\u533a\u9644\u52a0\u70b9\u65f6\u4f7f\u7528\u7684\u5e38\u91cf\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u60f3\u8981\u7247\u6bb5\u7740\u8272\u5668\u8f93\u51fa\u5230\u9644\u52a0\u5728 2 \u548c 3 \u9644\u4ef6\u70b9\u7684\u989c\u8272\u7f13\u51b2\u533a\uff0c\u4f60\u4f1a\u8c03\u7528\uff1a</p> <pre><code>EXTdb.drawBuffersWEBGL( [\n    EXTdb.COLOR_ATTACHMENT2_WEBGL,\n    EXTdb.COLOR_ATTACHMENT3_WEBGL\n] );\n</code></pre> <p>\u7ecf\u8fc7\u6240\u6709\u8fd9\u4e9b\u8bbe\u7f6e\u4e4b\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u8fdb\u884c\u5ef6\u8fdf\u7740\u8272\u7684\u7b2c\u4e00\u4e2a\u904d\u5386\u4e86\u3002\u5bf9\u4e8e\u540e\u7eed\u7684\u904d\u5386\uff0c\u4f60\u4f1a\u4f7f\u7528\u4e00\u4e2a\u4e0d\u540c\u7684\u7740\u8272\u5668\uff0c\u53ea\u6709\u4e00\u4e2a\u989c\u8272\u7f13\u51b2\u533a\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u904d\u5386\uff0c\u4f60\u5e0c\u671b\u5728\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u4e0a\u8fd0\u884c\u4e00\u6b21\u7247\u6bb5\u7740\u8272\u5668\u3002\u7247\u6bb5\u7740\u8272\u5668\u5c06\u4f7f\u7528\u5728\u7b2c\u4e00\u4e2a\u904d\u5386\u4e2d\u4fdd\u5b58\u7684\u50cf\u7d20\u6570\u636e\u4ee5\u53ca\u5176\u4ed6\u4fe1\u606f\uff08\u5982\u5149\u6e90\u5c5e\u6027\uff09\u6765\u8ba1\u7b97\u50cf\u7d20\u7684\u8f93\u51fa\u989c\u8272\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u7ed8\u5236\u4e00\u4e2a\u8986\u76d6\u56fe\u50cf\u7684\u5355\u4e2a\u77e9\u5f62\u6765\u7b80\u5355\u5730\u89e6\u53d1\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u7684\u7247\u6bb5\u7740\u8272\u5668\u7684\u8c03\u7528\u3002</p> <p>\u5ef6\u8fdf\u7740\u8272\u80cc\u540e\u7684\u7406\u8bba\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u5728\u5b9e\u73b0\u4e2d\u6709\u5f88\u591a\u7ec6\u8282\u9700\u8981\u6b63\u786e\u5904\u7406\u3002\u5ef6\u8fdf\u7740\u8272\u53ea\u662f\u89c6\u9891\u6e38\u620f\u7a0b\u5e8f\u5458\u7528\u6765\u63d0\u9ad8\u4ed6\u4eec\u6e38\u620f\u6e32\u67d3\u901f\u5ea6\u7684\u4f17\u591a\u6280\u5de7\u4e4b\u4e00\u3002</p> <p>I will discuss one more WebGL 1.0 extension, one that is useful for an important rendering technique called deferred shading. I don't have a sample program for deferred rendering, and I will only discuss it in general terms.</p> <p>Deferred shading is used as an optimization when rendering complex scenes, and it is often used to speed up rendering in video games. It is most closely associated with lighting, since it can be used to render scenes with large numbers of light sources, but it can also be useful for other effects.</p> <p>Recall that the number of lights that can be represented in OpenGL or in a WebGL shader is limited. But scenes with many lights can be rendered using a multi-pass algorithm: Each pass computes the contribution of one light, or a small number of lights, and the results of the passes are added together to give the complete scene. The problem is that, if the rendering in each pass is done in the normal way, then there are a lot of things that have to be recomputed, in exactly the same way, in each pass. For example, assuming that per-pixel lighting is used, that includes computing material properties and a unit normal vector for each pixel in the image. Deferred shading aims to avoid the duplicated effort.</p> <p>In deferred shading, a first pass is used to compute material properties, normal vectors, and whatever other data is needed, for each pixel in the image. All of that data is saved, to be used in additional passes that will compute lighting and possibly other effects. For a given pixel, only the data for the object that is actually visible at the pixel is saved, since data for hidden surfaces is not needed to render the scene. The first pass uses the geometry and attributes of objects in the scene. Everything that the later passes need to know about geometry and attributes is in the saved data.</p> <p>The saved data can be stored in texture objects. (Floating point textures are ideal for this, since the data will be used in further calculations.) In this case, the values in the textures don't necessarily represent images. For example, the RGB color components in one texture might represent the x, y, and z coordinates of a normal vector. And if a depth value is needed in later passes, it might be stored in the alpha color component of the same texture. Another texture might hold a diffuse color, while a third holds a specular color in its RGB components and a shininess value in its alpha component. Shader programs are free to interpret data in a texture however they like.</p> <p>A WebGL shader can write data to a texture, using a framebuffer. But standard WebGL 1.0 can only write to one framebuffer at a time. Now, it would be possible to use a separate pass for each texture that we need to compute, but that would involve a lot of redundant calculations, which is what we are trying to avoid. What we need is a WebGL extension that makes it possible for a shader to write to several framebuffers simultaneously. The extension that we need is named \"WEBGL_draw_buffers\". When that extension is activated, it becomes possible to attach several textures (or renderbuffers) to a framebuffer, and it becomes possible for a shader to write data to all of the attached shaders simultaneously. The extension is relatively complicated to use. It must be activated, as usual, with a statement of the form</p> <pre><code>EXTdb = gl.getExtension(\"WEBGL_draw_buffers\");\n</code></pre> <p>Assuming that the extension is available, the maximum number of color buffers that can be used in a shader is given by EXTdb.MAX_DRAW_BUFFERS_WEBGL, which will be at least four. With the extension in place, you can attach multiple textures as color buffers for a framebuffer, using code of the form</p> <pre><code>gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n    EXTdb.COLOR_ATTACHMENT0_WEBGL, gl.TEXTURE_2D, texture1, 0);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n    EXTdb.COLOR_ATTACHMENT1_WEBGL, gl.TEXTURE_2D, texture2, 0);\n</code></pre> <p>and so on, using constants such as EXTdb.COLOR_ATTACHMENT1_WEBGL from the extension object to specify the attachment points.</p> <p>Usually in a fragment shader, the color that is output to the color buffer is specified by assigning a value to the special variable gl_FragColor. That changes when multiple color buffers are used. In that case, instead of gl_FragColor, the fragment shader has a special variable gl_FragData which is an array of vec4, one for each possible color buffer. Colors are output to the color buffers by assigning values to gl_FragData[0], gl_FragData[1], .... Because this is a change in the legal syntax of the shader, the extension must also be activated in the fragment shader source code by adding the line</p> <pre><code>#extension GL_EXT_draw_buffers : require\n</code></pre> <p>to the beginning of the code. Suppose, for example, that we want to store a normal vector, a diffuse color, a specular color, and object coordinates in the color buffers. Let's say that these values are input to the fragment shader as varying variables or uniform variables, except for the diffuse color, which is sampled from a texture. Then the fragment shader might take the form</p> <pre><code>#extension GL_EXT_draw_buffers : require\nprecision highp float;\nvarying vec3 v_normal, v_objectCoords;\nvarying vec2 v_texCoords;\nuniform vec3 u_specular;\nuniform float u_shininess;\nuniform sampler2D texture;\nvoid main() {\n    gl_FragData[0] = vec4( normalize(v_normal), 0 );\n    gl_FragData[1] = vec4( v_object_coords, 1 );\n    gl_FragData[2] = texture2D( texture, v_texCoords );\n    gl_fragData[3] = vec4( u_specular, u_shininess );\n}\n</code></pre> <p>The final requirement for using the extension is to specify the correspondence between the indices that are used in gl_FragData and the color buffers that have been attached to the framebuffer. It seems like the correspondence should be automatic, but it's not. You have to specify it using the JavaScript function, EXTdb.drawBuffersWEBGL from the extension object. This function takes an array as parameter, and the values in the array are chosen from the constants EXTdb.COLOR_ATTACHMENT0_WEBGL, EXTdb.COLOR_ATTACHMENT1_WEBGL, .... These are the same constants that are used to specify the color buffer attachment points in a framebuffer. For example, if for some reason you wanted a fragment shader to output to the color buffers that are attached at attachment points 2 and 3, you would call</p> <pre><code>EXTdb.drawBuffersWEBGL( [\n    EXTdb.COLOR_ATTACHMENT2_WEBGL,\n    EXTdb.COLOR_ATTACHMENT3_WEBGL\n] );\n</code></pre> <p>After all that setup, you are ready to do the first pass for deferred shading. For the subsequent passes, you would use a different shader, with a single color buffer. For those passes, you want to run the fragment shader once for each pixel in the image. The fragment shader will use the pixel data that was saved in the first pass, together with other information such as light properties, to compute the output color for the pixel. You can trigger a call to the fragment shader for each pixel simply by drawing a single rectangle that covers the image.</p> <p>The theory behind deferred shading is not all that complicated, but there are a lot of details to get right in the implementation. Deferred shading is just one of many tricks that are used by video game programmers to improve the rendering speed for their games.</p>"},{"location":"cn/c7/s5/#755-webgl-20-\u4e2d\u7684\u591a\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a","title":"7.5.5 WebGL 2.0 \u4e2d\u7684\u591a\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a","text":"<p>Multiple Draw Buffers in WebGL 2.0</p> \u4e2d\u6587\u82f1\u6587 <p>\u80fd\u591f\u5199\u5165\u591a\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a\u662f WebGL 2.0 \u7684\u6807\u51c6\u90e8\u5206\u3002\u793a\u4f8b\u7a0b\u5e8f webgl/multiple-draw-buffers-webgl2.html \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u3002\u8be5\u7a0b\u5e8f\u83b7\u53d6\u4e00\u4e2a\u793a\u4f8b\u56fe\u50cf\uff0c\u5e76\u901a\u8fc7\u9644\u52a0\u4e09\u4e2a\u7eb9\u7406\u5230\u5e27\u7f13\u51b2\u533a\uff0c\u5e76\u5c06\u6bcf\u79cd\u989c\u8272\u5206\u91cf\u5199\u5165\u5176\u4e2d\u4e00\u4e2a\u7eb9\u7406\uff0c\u5c06\u5176\u5206\u89e3\u4e3a\u663e\u793a\u539f\u59cb\u56fe\u50cf\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u989c\u8272\u5206\u91cf\u7684\u4e09\u4e2a\u72ec\u7acb\u56fe\u50cf\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u7eb9\u7406\u7684\u56fe\u50cf\u88ab\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\uff0c\u4f5c\u4e3a\u7070\u5ea6\u56fe\u50cf\u663e\u793a\u3002</p> <p>\u7a0b\u5e8f\u5fc5\u987b\u521b\u5efa\u5e76\u4e3a\u4e09\u4e2a\u7eb9\u7406\u5bf9\u8c61\u5206\u914d\u5b58\u50a8\uff0c\u5e76\u5c06\u5b83\u4eec\u7ed1\u5b9a\u5230\u5e27\u7f13\u51b2\u533a\u4f5c\u4e3a\u989c\u8272\u7f13\u51b2\u533a\u3002\u4ee5\u4e0b\u662f\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u4ee3\u7801\uff1a</p> <pre><code>framebuffer = gl.createFramebuffer();\ngl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\ntexture0 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture0);\ngl.texStorage2D(gl.TEXTURE_2D, 1, gl.R8, 320, 399);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n        gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture0, 0);\ntexture1 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture1);\ngl.texStorage2D(gl.TEXTURE_2D, 1, gl.R8, 320, 399);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n        gl.COLOR_ATTACHMENT1, gl.TEXTURE_2D, texture1, 0);\ntexture2 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture2);\ngl.texStorage2D(gl.TEXTURE_2D, 1, gl.R8, 320, 399);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n        gl.COLOR_ATTACHMENT2, gl.TEXTURE_2D, texture2, 0);\n</code></pre> <p>\u7eb9\u7406\u4ee5\u683c\u5f0f gl.R8 \u521b\u5efa\uff0c\u6bcf\u4e2a\u50cf\u7d20\u5b58\u50a8\u4e00\u4e2a\u516b\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff1b\u8fd9\u5bf9\u4e8e\u7070\u5ea6\u56fe\u50cf\u662f\u8db3\u591f\u7684\u3002\uff08\u5bf9\u4e8e\u6b64\u683c\u5f0f\uff0c\u4e00\u4e2a 8 \u4f4d\u6574\u6570\u88ab\u8003\u8651\u4e3a\u88ab\u7f29\u653e\u4ee5\u8868\u793a\u8303\u56f4\u5728 0.0 \u5230 1.0 \u5185\u7684\u989c\u8272\u503c\u3002\uff09</p> <p>\u5fc5\u987b\u8c03\u7528\u51fd\u6570 gl.drawBuffers() \u4ee5\u542f\u7528\u5199\u5165\u591a\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a\uff0c\u5e76\u6307\u5b9a\u8f93\u51fa\u76ee\u6807\u3002\u76ee\u6807\u88ab\u6307\u5b9a\u4e3a\u5e27\u7f13\u51b2\u533a\u4e0a\u7684\u9644\u4ef6\u70b9\u6570\u7ec4\uff1a</p> <pre><code>gl.drawBuffers([\n    gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1, gl.COLOR_ATTACHMENT2\n]);\n</code></pre> <p>\u6b64\u793a\u4f8b\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u4f7f\u7528 GLSL ES 3.00 \u7f16\u5199\uff0c\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4f7f\u7528 out \u53d8\u91cf\u5c06\u8f93\u51fa\u53d1\u9001\u5230\u7ed8\u5236\u7f13\u51b2\u533a\u3002\u5f53\u6709\u4e00\u4e2a out \u53d8\u91cf\u65f6\uff0c\u5b83\u81ea\u52a8\u5c06\u8f93\u51fa\u53d1\u9001\u5230\u7b2c\u4e00\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a\uff08\u7ed8\u5236\u7f13\u51b2\u533a\u7f16\u53f7\u96f6\uff09\u3002\u5f53\u6709\u591a\u4e2a out \u53d8\u91cf\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528\u5e03\u5c40\u9650\u5b9a\u7b26\u4e3a\u6bcf\u4e2a out \u53d8\u91cf\u6307\u5b9a\u76ee\u6807\u7f16\u53f7\u3002\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4e3a out \u53d8\u91cf\u6307\u5b9a\u7684 location \u662f\u4f20\u9012\u7ed9 gl.drawBuffers() \u7684\u9644\u4ef6\u70b9\u6570\u7ec4\u7684\u7d22\u5f15\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u6765\u81ea\u793a\u4f8b\u7a0b\u5e8f\u7684\u7247\u6bb5\u7740\u8272\u5668\uff1a</p> <pre><code>#version 300 es\nprecision mediump float;\nuniform sampler2D u_picture; // \u5305\u542b\u539f\u59cb\u56fe\u50cf\u7684\u7eb9\u7406\nin vec2 v_coords;\nlayout(location = 0) out float red;   // \u5199\u5165\u7ed8\u5236\u7f13\u51b2\u533a 0\nlayout(location = 1) out float green; // \u5199\u5165\u7ed8\u5236\u7f13\u51b2\u533a 1\nlayout(location = 2) out float blue;  // \u5199\u5165\u7ed8\u5236\u7f13\u51b2\u533a 2\nvoid main() {\n    vec4 color = texture(u_picture, v_coords);\n    red = color.r;\n    green = color.g;\n    blue = color.b;\n}\n</code></pre> <p>\u8fd9\u4e2a\u7247\u6bb5\u7740\u8272\u5668\u5c06\u539f\u59cb\u56fe\u50cf\u4e2d\u5355\u72ec\u7684 RGB \u989c\u8272\u5206\u91cf\u53d1\u9001\u5230\u9644\u52a0\u5230\u5e27\u7f13\u51b2\u533a\u7684\u4e09\u4e2a\u7eb9\u7406\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u7b80\u5355\u4e14\u4e0d\u592a\u6709\u7528\u7684\u4f7f\u7528\u591a\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a\u7684\u793a\u4f8b\uff0c\u4f46\u5b83\u786e\u5b9e\u5c55\u793a\u4e86\u8fd9\u6837\u505a\u6240\u9700\u7684\u6240\u6709\u6b65\u9aa4\u3002</p> <p>The ability to write to multiple draw buffers is a standard part of WebGL 2.0. The sample program webgl/multiple-draw-buffers-webgl2.html is a simple demonstration. This program takes a sample image and breaks it up into three separate images that show the red, green, and blue color components from the original image. It does that by attaching three textures to a framebuffer, and writing each color component to one of the textures. The image from each texture is then copied to the screen as a grayscale image.</p> <p>The program has to create and allocate storage for three texture objects, and bind them to a frame buffer as color buffers. Here is the code that does this:</p> <pre><code>framebuffer = gl.createFramebuffer();\ngl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);\ntexture0 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture0);\ngl.texStorage2D(gl.TEXTURE_2D, 1, gl.R8, 320, 399);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n            gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture0, 0);\ntexture1 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture1);\ngl.texStorage2D(gl.TEXTURE_2D, 1, gl.R8, 320, 399);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n            gl.COLOR_ATTACHMENT1, gl.TEXTURE_2D, texture1, 0);\ntexture2 = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture2);\ngl.texStorage2D(gl.TEXTURE_2D, 1, gl.R8, 320, 399);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, \n            gl.COLOR_ATTACHMENT2, gl.TEXTURE_2D, texture2, 0);\n</code></pre> <p>The textures are created with format gl.R8, which stores one eight-bit unsigned integer per pixel; that is sufficient for a grayscale image. (For this format, an 8-bit integer is considered to be scaled to represent a color value in the range 0.0 to 1.0.)</p> <p>The function gl.drawBuffers() must be called to enable writing to multiple draw buffers and to specify the output destinations. The destinations are specified as an array of attachment points on the framebuffer:</p> <pre><code>gl.drawBuffers( [\n    gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1, gl.COLOR_ATTACHMENT2\n] );\n</code></pre> <p>The shader programs for this example are written in GLSL ES 3.00, which uses out variables in the fragment shader to send output to draw buffers. When there is a single out variable, it automatically sends output to the first draw buffer (draw buffer number zero). When there is more than one out variable, the destination number must be specified for every out variable using a layout qualifier. The location specified for an out variable in the fragment shader is an index into the array of attachment points that was passed to gl.drawBuffers(). As an example, here is the fragment shader from the sample program:</p> <pre><code>#version 300 es\nprecision mediump float;\nuniform sampler2D u_picture; // texture containing original image\nin vec2 v_coords;\nlayout(location = 0) out float red;   // write to draw buffer 0\nlayout(location = 1) out float green; // write to draw buffer 1\nlayout(location = 2) out float blue;  // write to draw buffer 2\nvoid main() {\n    vec4 color = texture(u_picture, v_coords);\n    red = color.r;\n    green = color.g;\n    blue = color.b;\n}\n</code></pre> <p>This fragment shader sends the separate RGB color components from the original image to the three textures that are attached to the framebuffer.</p> <p>This is a fairly simple and not-very-useful example of using multiple draw buffers, but it does illustrate all the steps that are required to do so.</p>"},{"location":"cn/c8/","title":"\u7b2c 8 \u7ae0\uff1a \u8d85\u8d8a\u57fa\u672c 3D \u56fe\u5f62","text":"<p>Beyond Basic 3D Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u672c\u6559\u79d1\u4e66\u7684\u524d\u4e03\u7ae0\u6db5\u76d6\u4e86\u57fa\u672c\u7684\u5b9e\u65f6\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\uff0c\u5373\u80fd\u591f\u5728\u51e0\u79d2\u949f\u5185\u751f\u6210\u56fe\u50cf\u7684\u56fe\u5f62\u7cfb\u7edf\u3002\u5178\u578b\u7684\u4f8b\u5b50\u662f\u89c6\u9891\u6e38\u620f\uff0c\u5728\u90a3\u91cc\u65b0\u7684\u753b\u9762\u6bcf\u79d2\u53ef\u4ee5\u6e32\u67d3\u591a\u8fbe\u516d\u5341\u6b21\u3002\u4f7f\u7528\u672c\u4e66\u4ecb\u7ecd\u7684\u6280\u672f\uff0c\u52a0\u4e0a\u73b0\u4ee3GPU\u7684\u5f3a\u5927\u5904\u7406\u80fd\u529b\uff0c\u4ee5\u53ca\u4e00\u4e9b\u6280\u5de7\u548c\u9ad8\u7ea7\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5b9e\u65f6\u6e32\u67d3\u975e\u5e38\u590d\u6742\u548c\u903c\u771f\u7684\u573a\u666f\u3002\u73b0\u4ee3\u9ad8\u7aefGPU\u5df2\u7ecf\u5f00\u59cb\u589e\u52a0\u4e00\u4e9b\u5bf9\u5149\u7ebf\u8ffd\u8e2a\u548c\u5168\u5c40\u7167\u660e\u7684\u76f4\u63a5\u786c\u4ef6\u652f\u6301\uff0c\u4f46\u5b9e\u65f6\u56fe\u5f62\u4ecd\u7136\u65e0\u6cd5\u4e0e\u7535\u5f71\u4e2d\u6240\u80fd\u627e\u5230\u7684\u6700\u9ad8\u8d28\u91cf\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u903c\u771f\u5ea6\u76f8\u5339\u914d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4eca\u5929\u7535\u5f71\u4e2d\u7684CGI\uff08\u8ba1\u7b97\u673a\u751f\u6210\u56fe\u50cf\uff09\u6709\u65f6\u4e0e\u73b0\u5b9e\u65e0\u6cd5\u533a\u5206\u3002\u8981\u8fbe\u5230\u90a3\u79cd\u8d28\u91cf\u7684\u56fe\u5f62\u53ef\u80fd\u9700\u8981\u6570\u5c0f\u65f6\u7684\u8ba1\u7b97\u65f6\u95f4\u6765\u6e32\u67d3\u5355\u4e2a\u753b\u9762\u3002</p> <p>\u8fd9\u4e00\u7ae0\u662f\u5bf9\u4e00\u4e9b\u53ef\u7528\u4e8e\u975e\u5e38\u9ad8\u753b\u8d28\u56fe\u5f62\u7684\u6280\u672f\u7684\u975e\u5e38\u7b80\u8981\u7684\u4ecb\u7ecd\u3002\u8ba8\u8bba\u5c06\u7528\u4e00\u822c\u672f\u8bed\u8fdb\u884c\u3002\u6211\u4e0d\u4f1a\u63d0\u4f9b\u793a\u4f8b\u4ee3\u7801\u6216\u5bf9\u6280\u672f\u80cc\u540e\u7684\u6570\u5b66\u8fdb\u884c\u8be6\u7ec6\u8ba8\u8bba\uff0c\u4f46\u6211\u5e0c\u671b\u81f3\u5c11\u63d0\u4f9b\u57fa\u672c\u7684\u6982\u5ff5\u7406\u89e3\u3002</p> <p>\u7136\u800c\uff0c\u4f60\u5e94\u8be5\u660e\u767d\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u4f60\u6240\u5b66\u7684\u5927\u90e8\u5206\u5185\u5bb9\u4ecd\u7136\u9002\u7528\u3002\u573a\u666f\u4ecd\u7136\u4f7f\u7528\u51e0\u4f55\u57fa\u672c\u4f53\u3001\u53d8\u6362\u3001\u6750\u8d28\u3001\u7eb9\u7406\u548c\u5149\u6e90\uff08\u5c3d\u7ba1\u53ef\u80fd\u4f7f\u7528\u6bd4\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u9047\u5230\u7684\u66f4\u9ad8\u7ea7\u7684\u6750\u8d28\u5c5e\u6027\u548c\u7167\u660e\uff09\u6765\u7ec4\u6210\u3002\u4e3a\u7535\u5f71\u5236\u4f5cCGI\u7684\u56fe\u5f62\u8bbe\u8ba1\u5e08\u53ef\u4ee5\u770b\u5230\u4f7f\u7528\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u7684\u6280\u672f\u6e32\u67d3\u7684\u4ed6\u4eec\u5de5\u4f5c\u7684\u5b9e\u65f6\u9884\u89c8\u3002\u4f60\u5728\u7535\u5f71\u4e2d\u770b\u5230\u7684\u6700\u7ec8\u573a\u666f\u53ea\u662f\u4f7f\u7528\u4e0d\u540c\u7684\u3001\u66f4\u8017\u8d39\u8ba1\u7b97\u7684\u6280\u672f\u6765\u6e32\u67d3\u7684\u3002</p> <p>The first seven chapters of this textbook have covered basic real-time computer graphics, that is, graphics systems in which an image can be generated in a fraction of a second. The typical case is a video game, where new frames can be rendered as many as sixty times per second. Very complex and realistic-looking scenes can be rendered in real time, using techniques covered in this book and the immense processing power of modern GPUs, plus some tricks and advanced algorithms. Modern high-end GPUs have begun adding some direct hardware support for ray tracing and global illumination, but real-time graphics still can't match the realism of the very highest quality computer graphics, such as what can be found in movies. In fact, the CGI (computer generated imagery) in today's movies is sometimes indistinguishable from reality. Getting graphics of that quality can require hours of computing time to render a single frame.</p> <p>This chapter is a very brief look at some techniques that can be used for very high quality graphics. The discussion will be in general terms. I won't be giving sample code or detailed discussions of the mathematics behind the techniques, but I hope to provide at least a basic conceptual understanding.</p> <p>The first thing that you should understand, though, is that most of what you have leaned so far still applies. Scenes are still composed using geometric primitives, transformations, materials, textures, and light sources (although perhaps using more advanced material properties and lighting than we have encountered so far). The graphic designers working on CGI for a movie can see real time previews of their work that are rendered using techniques that we have covered. The final scene that you see in the movie is just rendered using different, much more computation-intensive techniques.</p>"},{"location":"cn/c8/s1/","title":"8.1 \u5149\u7ebf\u8ffd\u8e2a","text":"<p>Ray Tracing</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u7ebf\u8ffd\u8e2a\u53ef\u80fd\u662f\u6700\u77e5\u540d\u7684\u9ad8\u8d28\u91cf\u56fe\u5f62\u6280\u672f\u3002\u5b83\u80cc\u540e\u7684\u7406\u5ff5\u5e76\u4e0d\u590d\u6742\uff1a\u8981\u627e\u51fa\u5f53\u4f60\u671d\u67d0\u4e2a\u65b9\u5411\u770b\u65f6\u4f60\u770b\u5230\u4e86\u4ec0\u4e48\uff0c\u8003\u8651\u4e00\u675f\u4ece\u90a3\u4e2a\u65b9\u5411\u5230\u8fbe\u4f60\u4f4d\u7f6e\u7684\u5149\u7ebf\uff0c\u7136\u540e\u6cbf\u7740\u8fd9\u675f\u5149\u7ebf\u5411\u540e\u8ffd\u8e2a\uff0c\u770b\u770b\u5b83\u6765\u81ea\u54ea\u91cc\u3002\u6216\u8005\uff0c\u6b63\u5982\u901a\u5e38\u6240\u8bf4\u7684\uff0c\u4ece\u4f60\u7684\u4f4d\u7f6e\u671d\u67d0\u4e2a\u65b9\u5411\u6295\u5c04\u4e00\u675f\u5149\u7ebf\uff0c\u770b\u770b\u5b83\u51fb\u4e2d\u4e86\u4ec0\u4e48\u3002\u90a3\u5c31\u662f\u4f60\u671d\u90a3\u4e2a\u65b9\u5411\u770b\u65f6\u6240\u770b\u5230\u7684\u3002\u786e\u5b9a\u5149\u7ebf\u51fb\u4e2d\u4ec0\u4e48\u7684\u64cd\u4f5c\u88ab\u79f0\u4e3a\u5149\u7ebf\u6295\u5c04\u3002\u5b83\u662f\u5149\u7ebf\u8ffd\u8e2a\u4ee5\u53ca\u5176\u5b83\u9ad8\u7ea7\u56fe\u5f62\u6280\u672f\u7684\u57fa\u7840\u3002</p> <p>Ray tracing is probably the best known technique for higher quality graphics. The idea behind it is not complicated: To find out what you see when you look in a given direction, consider a ray of light that arrives at your location from that direction, and follow that light ray backwards to see where it came from. Or, as it is usually phrased, cast a ray from your location in a given direction, and see what it hits. That's what you see when you look in that direction. The operation of determining what is hit by a ray is called ray casting. It is fundamental to ray tracing and to other advanced graphics techniques.</p>"},{"location":"cn/c8/s1/#811-\u5149\u7ebf\u6295\u5c04","title":"8.1.1 \u5149\u7ebf\u6295\u5c04","text":"<p>Ray Casting</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5728 three.js API \u7684 5.3.2 \u5c0f\u8282 \u4e2d\uff0c\u7c7b\u578b\u4e3a THREE.RayCaster \u7684\u5bf9\u8c61\u4f7f\u7528\u4e86\u5149\u7ebf\u6295\u5c04\u3002\u4e00\u4e2a Raycaster \u9700\u8981\u4e00\u4e2a\u521d\u59cb\u70b9\u548c\u65b9\u5411\uff0c\u4ee5\u5411\u91cf\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\u8fd9\u4e2a\u70b9\u548c\u5411\u91cf\u786e\u5b9a\u4e86\u4e00\u675f\u5149\u7ebf\uff0c\u5373\u4ece\u8d77\u59cb\u70b9\u5f00\u59cb\uff0c\u6cbf\u7740\u67d0\u4e2a\u65b9\u5411\u65e0\u9650\u5ef6\u4f38\u7684\u534a\u65e0\u9650\u7ebf\u3002Raycaster \u53ef\u4ee5\u627e\u5230\u5149\u7ebf\u4e0e three.js \u573a\u666f\u4e2d\u4e00\u7ec4\u7ed9\u5b9a\u5bf9\u8c61\u7684\u6240\u6709\u4ea4\u70b9\uff0c\u5e76\u6309\u8ddd\u79bb\u5149\u7ebf\u8d77\u59cb\u70b9\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u7b2c\u4e00\u4e2a\u4ea4\u70b9\uff0c\u5373\u79bb\u8d77\u59cb\u70b9\u6700\u8fd1\u7684\u90a3\u4e00\u4e2a\u3002</p> <p>\u8981\u5c06\u5149\u7ebf\u6295\u5c04\u5e94\u7528\u4e8e\u6e32\u67d3\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u7269\u4f53\u7ec4\u6210\u7684\u573a\u666f\uff0c\u4f7f\u7528\u70b9\u5149\u6e90\u548c\u5b9a\u5411\u5149\u8fdb\u884c\u7167\u660e\u3002\u6211\u4eec\u60f3\u8981\u4ece\u7ed9\u5b9a\u7684\u89c6\u89d2\u6e32\u67d3\u573a\u666f\u7684\u56fe\u50cf\u3002\u60f3\u8c61\u8fd9\u4e2a\u56fe\u50cf\u662f\u4e00\u79cd\u77e9\u5f62\u7a97\u53e3\uff0c\u901a\u8fc7\u5b83\u6765\u89c2\u5bdf\u573a\u666f\u662f\u5f88\u65b9\u4fbf\u7684\u3002\u7ed9\u5b9a\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5982\u4f55\u7ed9\u8fd9\u4e2a\u70b9\u4e0a\u8272\u3002\u4e3a\u4e86\u8ba1\u7b97\u8fd9\u4e2a\u70b9\u7684\u989c\u8272\uff0c\u6211\u4eec\u9996\u5148\u4ece\u89c2\u5bdf\u8005\u7684\u4f4d\u7f6e\u901a\u8fc7\u8fd9\u4e2a\u70b9\u5e76\u8fdb\u5165\u573a\u666f\u6295\u5c04\u4e00\u675f\u5149\u7ebf\u3002\u6211\u4eec\u60f3\u8981\u627e\u5230\u90a3\u675f\u5149\u7ebf\u4e0e\u573a\u666f\u4e2d\u7269\u4f53\u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9\uff1a</p> <p></p> <p>\u5728\u8fd9\u4e2a\u63d2\u56fe\u4e2d\uff0c\u573a\u666f\u5305\u542b\u51e0\u4e2a\u7ea2\u8272\u7403\u4f53\u548c\u4e24\u4e2a\u70b9\u5149\u6e90\u3002\u4ece\u89c6\u70b9 (A) \u901a\u8fc7\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u70b9 (B) \u6295\u5c04\u51fa\u4e00\u675f\u5149\u7ebf\u3002\u8fd9\u675f\u5149\u7ebf\u4e0e\u4e24\u4e2a\u7403\u4f53\u76f8\u4ea4\uff0c\u4f46\u6211\u4eec\u53ea\u5bf9\u79bb\u89c6\u70b9\u6700\u8fd1\u7684\u4ea4\u70b9 (C) \u611f\u5174\u8da3\u3002\u90a3\u5c31\u662f\u5728\u56fe\u50cf\u4e2d B \u70b9\u5904\u53ef\u89c1\u7684\u70b9\u3002</p> <p>\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u89c2\u5bdf\u8005\u5728 B \u70b9\u5904\u5c06\u770b\u5230\u7684\u989c\u8272\u3002\u4e3a\u6b64\uff0c\u5c31\u50cf\u5728 OpenGL \u4e2d\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5728 C \u70b9\u6709\u4e00\u4e2a\u6cd5\u5411\u91cf\uff0c\u6211\u4eec\u9700\u8981 C \u70b9\u5904\u8868\u9762\u7684\u6750\u8d28\u5c5e\u6027\u3002\u8fd9\u4e9b\u6570\u636e\u5fc5\u987b\u80fd\u591f\u4ece\u573a\u666f\u63cf\u8ff0\u4e2d\u8ba1\u7b97\u51fa\u6765\u3002\u53ef\u89c1\u989c\u8272\u8fd8\u53d6\u51b3\u4e8e\u7167\u4eae\u8868\u9762\u7684\u5149\u6e90\u3002\u8003\u8651\u4e00\u4e2a\u5149\u6e90\uff0c\u8bbe L \u662f\u4ece C \u70b9\u6307\u5411\u5149\u6e90\u65b9\u5411\u7684\u5411\u91cf\u3002\u5982\u679c L \u548c\u6cd5\u5411\u91cf\u4e4b\u95f4\u7684\u89d2\u5ea6\u5927\u4e8e 90 \u5ea6\uff0c\u90a3\u4e48\u5149\u6e90\u4f4d\u4e8e\u8868\u9762\u540e\u9762\uff0c\u56e0\u6b64\u4e0d\u4f1a\u589e\u52a0\u4efb\u4f55\u7167\u660e\u3002\u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5149\u7ebf\u6295\u5c04\uff1a\u4ece C \u70b9\u6cbf\u7740 L \u65b9\u5411\u6295\u5c04\u4e00\u675f\u5149\u7ebf\u3002\u5982\u679c\u90a3\u675f\u5149\u7ebf\u5728\u5230\u8fbe\u5149\u6e90\u4e4b\u524d\u51fb\u4e2d\u4e86\u4e00\u4e2a\u7269\u4f53\uff0c\u90a3\u4e48\u90a3\u4e2a\u7269\u4f53\u5c06\u963b\u6321\u6765\u81ea\u8be5\u5149\u6e90\u7684\u5149\u7ebf\u5230\u8fbe C \u70b9\u3002\u63d2\u56fe\u4e2d\u7684 Light 2 \u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff1a\u4ece C \u70b9\u6307\u5411 Light 2 \u65b9\u5411\u7684\u5149\u7ebf\u5728\u5230\u8fbe\u5149\u6e90\u4e4b\u524d\u5728 E \u70b9\u5904\u4e0e\u4e00\u4e2a\u7269\u4f53\u76f8\u4ea4\u3002\u53e6\u4e00\u65b9\u9762\uff0cC \u70b9\u88ab Light 1 \u7167\u4eae\u3002\u4ece\u8868\u9762\u4e00\u70b9\u6307\u5411\u5149\u6e90\u65b9\u5411\u7684\u5149\u7ebf\u79f0\u4e3a \u9634\u5f71\u5149\u7ebf\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u7528\u6765\u786e\u5b9a\u8868\u9762\u70b9\u662f\u5426\u5904\u4e8e\u53e6\u4e00\u4e2a\u7269\u4f53\u7684\u9634\u5f71\u4e2d\u3002</p> <p>\u6709\u4e86\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e OpenGL \u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u7684\u7167\u660e\u65b9\u7a0b (4.1.4 \u5c0f\u8282) \u6765\u7ed9\u56fe\u50cf\u4e2d\u7684 B \u70b9\u4e0a\u8272\u3002\u5149\u7ebf\u6295\u5c04\u89e3\u51b3\u4e86\u9690\u85cf\u8868\u9762\u95ee\u9898\uff0c\u65e0\u9700\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u800c\u4e14\uff0c\u4f5c\u4e3a\u989d\u5916\u7684\u597d\u5904\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9634\u5f71\uff0c\u5728 OpenGL \u4e2d\u5f88\u96be\u505a\u5230\uff01</p> <p>\uff08\u5982\u679c\u4ece\u89c6\u70b9\u901a\u8fc7 B \u70b9\u7684\u5149\u7ebf\u6ca1\u6709\u51fb\u4e2d\u573a\u666f\u4e2d\u7684\u4efb\u4f55\u7269\u4f53\uff0c\u90a3\u4e48 B \u5c06\u88ab\u8d4b\u4e88\u80cc\u666f\u989c\u8272\u6216\u968f\u4e0d\u540c\u65b9\u5411\u53d8\u5316\u7684\u201c\u5929\u7a7a\u201d\u989c\u8272\u3002\u6216\u8005\u4e5f\u8bb8\u6574\u4e2a\u573a\u666f\u88ab\u4e00\u4e2a skybox \u5305\u56f4\uff0c\u4e00\u4e2a\u6ca1\u6709\u51fb\u4e2d\u4efb\u4f55\u5176\u4ed6\u7269\u4f53\u7684\u5149\u7ebf\u5c06\u51fb\u4e2d skybox\u3002\uff09</p> <p>\u5149\u7ebf\u6295\u5c04\u5728\u6982\u5ff5\u4e0a\u5f88\u7b80\u5355\uff0c\u4f46\u5b9e\u73b0\u7ec6\u8282\u53ef\u80fd\u4f1a\u5f88\u68d8\u624b\u3002\u7403\u4f53\u5b9e\u9645\u4e0a\u76f8\u5f53\u5bb9\u6613\u3002\u6709\u4e00\u4e2a\u516c\u5f0f\u53ef\u4ee5\u627e\u5230\u76f4\u7ebf\u4e0e\u7403\u4f53\u7684\u4ea4\u70b9\uff0c\u7403\u4f53\u4e0a\u67d0\u70b9\u7684\u6cd5\u5411\u91cf\u4e0e\u4ece\u7403\u5fc3\u5230\u8be5\u70b9\u7684\u7ebf\u7684\u65b9\u5411\u76f8\u540c\u3002\u5047\u8bbe\u7403\u4f53\u5177\u6709\u5747\u5300\u7684\u6750\u8d28\uff0c\u6211\u4eec\u5c31\u62e5\u6709\u4e86\u6240\u9700\u7684\u6240\u6709\u6570\u636e\u3002</p> <p>\u7136\u800c\uff0c\u8868\u9762\u901a\u5e38\u4ee5\u4e09\u89d2\u5f62\u7f51\u683c\u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5c5e\u6027\u4ec5\u5728\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u5904\u6307\u5b9a\u3002\u5047\u8bbe\u6211\u4eec\u7684\u5149\u7ebf\u6295\u5c04\u5668\u627e\u5230\u7684\u4ea4\u70b9\u4f4d\u4e8e\u5176\u4e2d\u4e00\u4e2a\u4e09\u89d2\u5f62\u5185\u3002\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u901a\u8fc7\u63d2\u503c\u4e09\u89d2\u5f62\u9876\u70b9\u5904\u6307\u5b9a\u7684\u5c5e\u6027\u503c\u6765\u8ba1\u7b97\u8be5\u4ea4\u70b9\u7684\u5c5e\u6027\u3002</p> <p>\u63d2\u503c\u7b97\u6cd5\u901a\u5e38\u4f7f\u7528\u6240\u8c13\u7684\u4e09\u89d2\u5f62\u4e0a\u7684 \u91cd\u5fc3\u5750\u6807\uff1a\u5982\u679c A\u3001B \u548c C \u662f\u4e09\u89d2\u5f62\u7684\u9876\u70b9\uff0cP \u662f\u4e09\u89d2\u5f62\u5185\u7684\u4e00\u70b9\uff0c\u90a3\u4e48 P \u53ef\u4ee5\u552f\u4e00\u5730\u5199\u6210 aA + bB + c*C \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d a\u3001b \u548c c \u662f\u5728\u96f6\u5230\u4e00\u8303\u56f4\u5185\u7684\u6570\u5b57\uff0c\u4e14 a + b + c = 1\u3002\u7cfb\u6570 a\u3001b \u548c c \u79f0\u4e3a\u70b9 P \u5728\u4e09\u89d2\u5f62\u4e2d\u7684\u91cd\u5fc3\u5750\u6807\u3002\u5982\u679c\u67d0\u4e2a\u91cf\u5728\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u5904\u5177\u6709\u503c V(A)\u3001V(B) \u548c V(C)\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 P \u7684\u91cd\u5fc3\u5750\u6807\u6765\u83b7\u5f97 P \u5904\u7684\u63d2\u503c\u503c\uff1a</p> <pre><code>V(P) = a*V(A) + b*V(B) + c*V(C)\n</code></pre> <p>\u8fd9\u4e2a\u91cf\u53ef\u80fd\u662f\u6f2b\u53cd\u5c04\u989c\u8272\u3001\u7eb9\u7406\u5750\u6807\u6216\u6cd5\u5411\u91cf\u3002\uff08\u5f53\u7136\uff0c\u6211\u5728\u8fd9\u91cc\u4ecd\u7136\u7701\u7565\u4e86\u5f88\u591a\u6570\u5b66\u5185\u5bb9\u2014\u2014\u5982\u4f55\u6d4b\u8bd5\u4e00\u6761\u7ebf\u662f\u5426\u4e0e\u4e00\u4e2a\u4e09\u89d2\u5f62\u76f8\u4ea4\u4ee5\u53ca\u5982\u4f55\u627e\u5230\u4ea4\u70b9\u7684\u91cd\u5fc3\u5750\u6807\u3002\u6709\u516c\u5f0f\uff0c\u4f46\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u5b83\u4eec\u4e0d\u4f1a\u4e3a\u8ba8\u8bba\u589e\u52a0\u592a\u591a\u5185\u5bb9\u3002\uff09</p> <p>We have already seen ray casting used by objects of type THREE.RayCaster in the three.js API (Subsection 5.3.2). A Raycaster takes an initial point and a direction, given as a vector. The point and vector determine a ray, that is, a half-infinite line that extends from a starting point, in some direction, to infinity. The Raycaster can find all the intersections of the ray with a given set of objects in a three.js scene, sorted by order of distance from the rays's starting point. In this chapter, we are interested in the first intersection, the one that is closest to the starting point.</p> <p>To apply ray casting to rendering, let's say that we have a scene consisting of objects in three-dimensional space, using point lights and directional lights for illumination. We want to render an image of the scene from a given point of view. It's convenient to imagine the image as a kind of rectangular window through which the scene is being viewed. Given a point in the image, we need to know how to color that point. To compute a color for the point, we begin by casting a ray from the position of the viewer through the point and into the scene. We want to find the first intersection of that ray with an object in the scene:</p> <p></p> <p>In this illustration, the scene contains several red spheres and two point lights. A ray is cast from the viewpoint (A) through a point (B) in the image. The ray intersects two of the spheres, but we are only interested in the intersection point (C) that is closest to the viewpoint. That's the point that is visible at B in the image.</p> <p>We need to compute the color that the viewer will see at point B. For that, just as in OpenGL, we need a normal vector at point C, and we need the material properties of the surface at C. That data has to be computable from the scene description. The visible color also depends on the light that is illuminating the surface. Consider a light source, and let L be the vector that points from C in the direction of the light. If the angle between L and the normal vector is greater than 90 degrees, then the light source lies behind the surface and so does not add any illumination. Otherwise, we can use ray casting again: Cast a ray from C in the direction L. If that ray hits an object before it gets to the light, then that object will block light from that source from reaching C. That's the case for Light 2 in the illustration: The ray from C in the direction of Light 2 intersects an object at point E before it gets to the light. On the other hand, the point C is illuminated by Light 1. A ray from a point on a surface in the direction of a light source is called a shadow ray, because it can be used to determine whether the surface point lies in the shadow of another object.</p> <p>With all this information, we can color point B in the image using the same lighting equation that is used in OpenGL (Subsection 4.1.4). Ray casting solves the hidden surface problem with no need for a depth buffer. And, as a bonus, we get shadows, which are hard to do in OpenGL!</p> <p>(If the ray from the viewpoint through B doesn't hit any objects in the scene, then B would be assigned a background color or a \"sky\" color that varies with different directions. Or maybe the entire scene is surrounded by a skybox, and a ray that doesn't hit any other object will hit the skybox.)</p> <p>Ray casting is conceptually simple, but implementation details can be tricky. Spheres are actually fairly easy. There is a formula for finding the intersections of a line with a sphere, and a normal vector at a point on a sphere has the same direction as the line from the center of the sphere to that point. Assuming that the sphere has a uniform material, we have all the data we need.</p> <p>However, surfaces are often given as triangular meshes, with properties specified only at the vertices of the triangles. Suppose that the intersection point found by our ray caster lies in one of those triangles. We will have to compute the properties of that intersection point by interpolating the property values that were specified at the vertices of the triangle.</p> <p>The interpolation algorithm typically uses something called barycentric coordinates on the triangle: If A, B, and C are the vertices of a triangle, and P is a point in the triangle, then P can be written uniquely in the form a*A + b*B + c*C, where a, b, and c are numbers in the range zero to one, and a + b + c = 1. The coefficients a, b, and c are called the barycentric coordinates of the point P in the triangle. If some quantity has values V(A), V(B), and V(C) at the vertices of the triangle, then we can use the barycentric coordinates of P to get an interpolated value at P:</p> <pre><code>V(P) = a*V(A) + b*V(B) + c*V(C)\n</code></pre> <p>The quantity might be, for example, diffuse color, texture coordinates, or a normal vector. (Of course, I'm still leaving out a lot of the math here\u2014how to test whether a line intersects a triangle and how to find barycentric coordinates of the point of intersection. There are formulas, but conceptually, they wouldn't add much to the discussion.)</p>"},{"location":"cn/c8/s1/#812-\u9012\u5f52\u5149\u7ebf\u8ffd\u8e2a","title":"8.1.2 \u9012\u5f52\u5149\u7ebf\u8ffd\u8e2a","text":"<p>Recursive Ray Tracing</p> \u4e2d\u6587\u82f1\u6587 <p>\u57fa\u672c\u7684\u5149\u7ebf\u6295\u5c04\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97OpenGL\u98ce\u683c\u7684\u6e32\u67d3\uff0c\u5e76\u4e14\u901a\u8fc7\u589e\u52a0\u9634\u5f71\u5149\u7ebf\uff0c\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u9634\u5f71\u6548\u679c\u3002\u901a\u8fc7\u6295\u5c04\u66f4\u591a\u7684\u5149\u7ebf\uff0c\u53ef\u4ee5\u5b9e\u73b0\u66f4\u591a\u7684\u7279\u6027\u3002\u6539\u8fdb\u540e\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a\u5149\u7ebf\u8ffd\u8e2a\u3002</p> <p>\u8003\u8651\u955c\u9762\u53cd\u5c04\u3002\u5728OpenGL\u4e2d\uff0c\u955c\u9762\u53cd\u5c04\u53ef\u4ee5\u4f7f\u7269\u4f53\u770b\u8d77\u6765\u6709\u5149\u6cfd\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5728\u7269\u4f53\u5c06\u5149\u6e90\u7684\u5149\u7ebf\u53cd\u5c04\u5230\u89c2\u5bdf\u8005\u7684\u65b9\u5411\u65f6\u770b\u5230\u955c\u9762\u9ad8\u5149\u3002\u4f46\u73b0\u5b9e\u4e2d\uff0c\u5177\u6709\u7c7b\u4f3c\u955c\u5b50\u8868\u9762\u7684\u7269\u4f53\u4e0d\u4ec5\u4f1a\u53cd\u5c04\u5149\u6e90\uff1b\u5b83\u8fd8\u4f1a\u53cd\u5c04\u5176\u4ed6\u7269\u4f53\u3002\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u8ba1\u7b97\u4e00\u4e2a\u7c7b\u4f3c\u955c\u5b50\u8868\u9762\u7684\u70b9A\u7684\u989c\u8272\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u6765\u81ea\u5176\u4ed6\u7269\u4f53\u7684\u955c\u9762\u53cd\u5c04\u5bf9\u8be5\u989c\u8272\u7684\u8d21\u732e\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4eceA\u70b9\u6295\u5c04\u4e00\u4e2a\u201c\u53cd\u5c04\u5149\u7ebf\u201d\u3002\u53cd\u5c04\u5149\u7ebf\u7684\u65b9\u5411\u7531A\u70b9\u5904\u8868\u9762\u7684\u6cd5\u5411\u91cf\u548c\u4eceA\u70b9\u5230\u89c2\u5bdf\u8005\u7684\u65b9\u5411\u51b3\u5b9a\u3002\u8fd9\u5f20\u63d2\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a2D\u7248\u672c\u3002\u5c06\u5176\u60f3\u8c61\u4e3a3D\u60c5\u51b5\u7684\u6a2a\u622a\u9762\uff1a</p> <p></p> <p>\u5728\u8fd9\u91cc\uff0c\u4ece\u70b9A\u53d1\u51fa\u7684\u53cd\u5c04\u5149\u7ebf\u51fb\u4e2d\u4e86\u7d2b\u8272\u6b63\u65b9\u5f62\u4e0a\u7684\u70b9B\uff0c\u89c2\u5bdf\u8005\u5c06\u5728A\u70b9\u770b\u5230B\u70b9\u7684\u53cd\u5c04\u3002\uff08\u8bb0\u4f4f\uff0c\u5728\u5149\u7ebf\u8ffd\u8e2a\u4e2d\uff0c\u6211\u4eec\u4ece\u89c2\u5bdf\u8005\u90a3\u91cc\u53cd\u5411\u8ffd\u8e2a\u5149\u7ebf\u7684\u8def\u5f84\uff0c\u4ee5\u627e\u51fa\u5b83\u4eec\u6765\u81ea\u54ea\u91cc\u3002\uff09</p> <p>\u4e3a\u4e86\u5f04\u6e05\u695aB\u70b9\u7684\u53cd\u5c04\u770b\u8d77\u6765\u5982\u4f55\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4eceB\u70b9\u5230\u8fbeA\u70b9\u7684\u5149\u7ebf\u7684\u989c\u8272\u3002\u4f46\u662f\u4e3aB\u70b9\u627e\u5230\u989c\u8272\u4e0e\u4e3aA\u70b9\u627e\u5230\u989c\u8272\u662f\u540c\u4e00\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u5e94\u8be5\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u89e3\u51b3\u5b83\uff1a\u901a\u8fc7\u5c06\u5149\u7ebf\u8ffd\u8e2a\u7b97\u6cd5\u5e94\u7528\u4e8eB\uff01\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528B\u70b9\u5904\u8868\u9762\u7684\u6750\u8d28\u5c5e\u6027\uff0c\u6211\u4eec\u4eceB\u70b9\u5411\u5149\u6e90\u6295\u5c04\u9634\u5f71\u5149\u7ebf\u4ee5\u786e\u5b9aB\u70b9\u662f\u5982\u4f55\u88ab\u7167\u4eae\u7684\uff0c\u5982\u679c\u7d2b\u8272\u6b63\u65b9\u5f62\u5177\u6709\u7c7b\u4f3c\u955c\u5b50\u7684\u8868\u9762\u2014\u2014\u6211\u4eec\u4eceB\u70b9\u6295\u5c04\u4e00\u4e2a\u53cd\u5c04\u5149\u7ebf\u4ee5\u627e\u51fa\u5b83\u53cd\u5c04\u4e86\u4ec0\u4e48\u3002\u5728\u63d2\u56fe\u4e2d\uff0c\u4eceB\u70b9\u53d1\u51fa\u7684\u53cd\u5c04\u5149\u7ebf\u51fb\u4e2d\u4e86\u4e94\u8fb9\u5f62\u4e0a\u7684\u70b9C\uff0c\u6240\u4ee5\u6b63\u65b9\u5f62\u53cd\u5c04\u4e86\u4e00\u4e2a\u4e94\u8fb9\u5f62\u7684\u56fe\u50cf\uff0c\u800c\u5706\u76d8\u53cd\u5c04\u4e86\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u56fe\u50cf\uff0c\u5305\u62ec\u5b83\u5bf9\u4e94\u8fb9\u5f62\u7684\u53cd\u5c04\u3002\u5149\u7ebf\u8ffd\u8e2a\u53ef\u4ee5\u5904\u7406\u573a\u666f\u4e2d\u7269\u4f53\u4e4b\u95f4\u7684\u591a\u6b21\u955c\u9762\u53cd\u5c04\uff01</p> <p>\u56e0\u4e3a\u5728\u4e00\u4e2a\u70b9\u4e0a\u5e94\u7528\u5149\u7ebf\u8ffd\u8e2a\u7b97\u6cd5\u53ef\u80fd\u6d89\u53ca\u5230\u5728\u989d\u5916\u7684\u70b9\u4e0a\u5e94\u7528\u76f8\u540c\u7684\u7b97\u6cd5\uff0c\u5149\u7ebf\u8ffd\u8e2a\u662f\u4e00\u79cd\u9012\u5f52\u7b97\u6cd5\u3002\u4e3a\u4e86\u4e0e\u7b80\u5355\u7684\u5149\u7ebf\u6295\u5c04\u533a\u5206\u5f00\u6765\uff0c\u5149\u7ebf\u8ffd\u8e2a\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u9012\u5f52\u5149\u7ebf\u8ffd\u8e2a\u201d\u3002</p> <p>\u5149\u7ebf\u8ffd\u8e2a\u53ef\u4ee5\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u6269\u5c55\u4ee5\u5904\u7406\u900f\u660e\u5ea6\u6216\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u534a\u900f\u660e\u5ea6\u3002\u5728\u8ba1\u7b97\u534a\u900f\u660e\u7269\u4f53\u4e0a\u4e00\u4e2a\u70b9\u7684\u989c\u8272\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5230\u901a\u8fc7\u7269\u4f53\u5230\u8fbe\u8be5\u70b9\u7684\u5149\u7ebf\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u8be5\u70b9\u6295\u5c04\u53e6\u4e00\u4e2a\u5149\u7ebf\uff0c\u8fd9\u6b21\u662f\u8fdb\u5165\u7269\u4f53\u5185\u90e8\u3002\u5f53\u5149\u7ebf\u4ece\u4e00\u79cd\u4ecb\u8d28\uff0c\u4f8b\u5982\u7a7a\u6c14\uff0c\u8fdb\u5165\u53e6\u4e00\u79cd\u4ecb\u8d28\uff0c\u4f8b\u5982\u73bb\u7483\u65f6\uff0c\u5149\u7ebf\u7684\u8def\u5f84\u53ef\u80fd\u4f1a\u5f2f\u66f2\u3002\u8fd9\u79cd\u5f2f\u66f2\u79f0\u4e3a\u6298\u5c04\uff0c\u901a\u8fc7\u534a\u900f\u660e\u7269\u4f53\u6295\u5c04\u7684\u5149\u7ebf\u79f0\u4e3a\u201c\u6298\u5c04\u5149\u7ebf\u201d\u3002\u4e0a\u9762\u7684\u63d2\u56fe\u663e\u793a\u4e86\u4ece\u70b9A\u53d1\u51fa\u7684\u6298\u5c04\u5149\u7ebf\u7a7f\u8fc7\u7269\u4f53\u5e76\u5728D\u70b9\u4ece\u7269\u4f53\u4e2d\u51fa\u73b0\u3002\u4e3a\u4e86\u627e\u5230\u90a3\u6761\u5149\u7ebf\u7684\u989c\u8272\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u5b83\u51fb\u4e2d\u4e86\u4ec0\u4e48\uff0c\u5982\u679c\u51fb\u4e2d\u4e86\u4efb\u4f55\u4e1c\u897f\uff0c\u6211\u4eec\u9700\u8981\u5728\u4ea4\u70b9\u9012\u5f52\u5730\u5e94\u7528\u5149\u7ebf\u8ffd\u8e2a\u3002</p> <p>\uff08\u5149\u7ebf\u4ece\u4e00\u79cd\u4ecb\u8d28\u7a7f\u8fc7\u5230\u53e6\u4e00\u79cd\u4ecb\u8d28\u65f6\u7684\u5f2f\u66f2\u7a0b\u5ea6\u53d6\u51b3\u4e8e\u8fd9\u4e24\u79cd\u4ecb\u8d28\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u79f0\u4e3a\u201c\u6298\u5c04\u7387\u201d\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5b83\u53d6\u51b3\u4e8e\u4e24\u4e2a\u6298\u5c04\u7387\u4e4b\u95f4\u7684\u6bd4\u7387\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u7269\u4f53\u5916\u90e8\u7684\u6298\u5c04\u7387\u901a\u5e38\u88ab\u8ba4\u4e3a\u7b49\u4e8e\u4e00\uff0c\u8fd9\u6837\u5f2f\u66f2\u5c31\u53ea\u53d6\u51b3\u4e8e\u7269\u4f53\u7684\u6298\u5c04\u7387\u3002\u6298\u5c04\u7387\u662f\u534a\u900f\u660e\u7269\u4f53\u7684\u53e6\u4e00\u79cd\u6750\u8d28\u5c5e\u6027\u3002\u5b83\u901a\u5e38\u7f29\u5199\u4e3aIOR\u3002\uff09</p> <p>\u6211\u4eec\u5e94\u8be5\u66f4\u8be6\u7ec6\u5730\u770b\u770b\u8fd9\u4e9b\u8ba1\u7b97\u3002\u76ee\u6807\u662f\u8ba1\u7b97\u56fe\u50cf\u4e0a\u67d0\u70b9\u7684\u989c\u8272\u3002\u6211\u4eec\u4ece\u89c6\u70b9\u901a\u8fc7\u56fe\u50cf\u6295\u5c04\u4e00\u675f\u5149\u7ebf\u8fdb\u5165\u573a\u666f\uff0c\u5e76\u786e\u5b9a\u5149\u7ebf\u4e0e\u7269\u4f53\u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9\u3002\u8be5\u70b9\u7684\u989c\u8272\u662f\u901a\u8fc7\u6c47\u603b\u6765\u81ea\u4e0d\u540c\u6765\u6e90\u7684\u8d21\u732e\u6765\u8ba1\u7b97\u7684\u3002</p> <p>\u9996\u5148\uff0c\u6709\u6765\u81ea\u5404\u79cd\u5149\u6e90\u7684\u6f2b\u53cd\u5c04\u3001\u955c\u9762\u53cd\u5c04\u548c\u53ef\u80fd\u7684\u73af\u5883\u5149\u53cd\u5c04\u3002\u8fd9\u4e9b\u8d21\u732e\u57fa\u4e8e\u7269\u4f53\u7684\u6f2b\u53cd\u5c04\u3001\u955c\u9762\u53cd\u5c04\u548c\u73af\u5883\u5149\u989c\u8272\uff0c\u57fa\u4e8e\u7269\u4f53\u7684\u6cd5\u5411\u91cf\uff0c\u4ee5\u53ca\u5149\u6e90\u7684\u7279\u6027\u3002\u6ce8\u610f\uff0c\u7269\u4f53\u7684\u67d0\u4e9b\u989c\u8272\u5c5e\u6027\uff0c\u901a\u5e38\u662f\u73af\u5883\u5149\u548c\u6f2b\u53cd\u5c04\u989c\u8272\uff0c\u53ef\u80fd\u6765\u81ea\u7eb9\u7406\u3002\u955c\u9762\u8d21\u732e\u53ef\u4ee5\u4ea7\u751f\u955c\u9762\u9ad8\u5149\uff0c\u8fd9\u672c\u8d28\u4e0a\u662f\u5149\u6e90\u7684\u53cd\u5c04\u3002\u9634\u5f71\u5149\u7ebf\u7528\u4e8e\u786e\u5b9a\u54ea\u4e9b\u5b9a\u5411\u5149\u548c\u70b9\u5149\u6e90\u7167\u4eae\u4e86\u7269\u4f53\uff1b\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u90e8\u5206\u8ba1\u7b97\u4e0eOpenGL\u7c7b\u4f3c\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u5982\u679c\u8868\u9762\u5177\u6709\u7c7b\u4f3c\u955c\u5b50\u7684\u53cd\u5c04\uff0c\u5219\u4f1a\u6295\u5c04\u53cd\u5c04\u5149\u7ebf\uff0c\u5e76\u5bf9\u90a3\u4e2a\u5149\u7ebf\u9012\u5f52\u5e94\u7528\u5149\u7ebf\u8ffd\u8e2a\u6765\u627e\u5230\u5176\u989c\u8272\u3002\u6765\u81ea\u8be5\u5149\u7ebf\u7684\u8d21\u732e\u4e0e\u5176\u4ed6\u8d21\u732e\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u8868\u9762\u7684\u989c\u8272\uff0c\u8fd9\u53d6\u51b3\u4e8e\u955c\u9762\u53cd\u5c04\u7684\u5f3a\u5ea6\u3002\u5bf9\u4e8e\u5b8c\u7f8e\u7684\u955c\u5b50\uff0c\u53cd\u5c04\u5149\u7ebf\u8d21\u732e\u4e86100%\u7684\u989c\u8272\uff0c\u4f46\u901a\u5e38\u8d21\u732e\u8f83\u5c0f\u3002\u955c\u9762\u53cd\u5c04\u7387\u662f\u4e00\u4e2a\u65b0\u7684\u6750\u8d28\u5c5e\u6027\u3002\u5b83\u8d1f\u8d23\u4e00\u4e2a\u7269\u4f53\u5728\u53e6\u4e00\u4e2a\u7269\u4f53\u8868\u9762\u4e0a\u7684\u53cd\u5c04\uff0c\u800c\u955c\u9762\u989c\u8272\u8d1f\u8d23\u955c\u9762\u9ad8\u5149\u3002</p> <p>\u6700\u540e\uff0c\u5982\u679c\u7269\u4f53\u662f\u534a\u900f\u660e\u7684\uff0c\u90a3\u4e48\u4f1a\u6295\u5c04\u6298\u5c04\u5149\u7ebf\uff0c\u5e76\u4f7f\u7528\u5149\u7ebf\u8ffd\u8e2a\u6765\u627e\u5230\u5b83\u7684\u989c\u8272\u3002\u8be5\u5149\u7ebf\u5bf9\u7269\u4f53\u989c\u8272\u7684\u8d21\u732e\u53d6\u51b3\u4e8e\u7269\u4f53\u7684\u900f\u660e\u5ea6\u7a0b\u5ea6\uff0c\u56e0\u4e3a\u4e00\u4e9b\u5149\u7ebf\u53ef\u80fd\u88ab\u5438\u6536\u800c\u4e0d\u662f\u88ab\u4f20\u8f93\u3002\u900f\u660e\u5ea6\u7684\u7a0b\u5ea6\u53ef\u80fd\u53d6\u51b3\u4e8e\u5149\u7684\u6ce2\u957f\u2014\u2014\u6b63\u5982\u5b83\u5728\u6709\u8272\u73bb\u7483\u4e2d\u90a3\u6837\u3002</p> <p>\u5f53\u7136\uff0c\u6240\u6709\u8fd9\u4e9b\u8ba1\u7b97\u90fd\u9700\u8981\u5bf9\u989c\u8272\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u5404\u505a\u4e09\u6b21\u3002</p> <p>\u5149\u7ebf\u8ffd\u8e2a\u7b97\u6cd5\u662f\u9012\u5f52\u7684\uff0c\u6b63\u5982\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u90fd\u77e5\u9053\u7684\uff0c\u9012\u5f52\u9700\u8981\u4e00\u4e2a\u57fa\u672c\u60c5\u51b5\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u65f6\u523b\uff0c\u7b97\u6cd5\u4e0d\u662f\u8c03\u7528\u81ea\u5df1\uff0c\u800c\u662f\u7b80\u5355\u5730\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u5f53\u6295\u5c04\u7684\u5149\u7ebf\u6ca1\u6709\u4e0e\u4efb\u4f55\u7269\u4f53\u76f8\u4ea4\u65f6\uff0c\u5c31\u4f1a\u51fa\u73b0\u57fa\u672c\u60c5\u51b5\u3002\u53e6\u4e00\u79cd\u57fa\u672c\u60c5\u51b5\u53ef\u80fd\u53d1\u751f\u5728\u786e\u5b9a\u6295\u5c04\u66f4\u591a\u5149\u7ebf\u4e0d\u80fd\u5bf9\u56fe\u50cf\u7684\u989c\u8272\u505a\u51fa\u4efb\u4f55\u663e\u8457\u8d21\u732e\u65f6\u3002\u4f8b\u5982\uff0c\u6bcf\u5f53\u53cd\u5c04\u5149\u7ebf\u65f6\uff0c\u6839\u636e\u53cd\u5c04\u5b83\u7684\u7269\u4f53\u7684\u989c\u8272\uff0c\u4e00\u4e9b\u5149\u7ebf\u4f1a\u88ab\u5438\u6536\u800c\u4e0d\u662f\u53cd\u5c04\u3002\u53cd\u5c04\u591a\u6b21\u540e\uff0c\u5149\u7ebf\u5bf9\u6700\u7ec8\u7ed3\u679c\u7684\u8d21\u732e\u5c06\u975e\u5e38\u5c11\u3002\u5149\u7ebf\u4e5f\u53ef\u80fd\u56e0\u4e3a\u5149\u7684\u8870\u51cf\u800c\u5931\u53bb\u80fd\u91cf\uff0c\u5149\u7ebf\u8ffd\u8e2a\u7b97\u6cd5\u53ef\u80fd\u4f1a\u8003\u8651\u8fd9\u4e00\u70b9\u3002\u6b64\u5916\uff0c\u5149\u7ebf\u8ffd\u8e2a\u7b97\u6cd5\u5e94\u8be5\u603b\u662f\u4ee5\u6700\u5927\u9012\u5f52\u6df1\u5ea6\u8fd0\u884c\uff0c\u4ee5\u5bf9\u7b97\u6cd5\u8c03\u7528\u81ea\u8eab\u7684\u6b21\u6570\u8bbe\u5b9a\u7edd\u5bf9\u9650\u5236\u3002</p> <p>Basic ray casting can be used to compute OpenGL-style rendering and, with the addition of shadow rays, to implement shadows as well. More features can be implemented by casting a few more rays. The improved algorithm is called ray tracing.</p> <p>Consider specular reflection. In OpenGL, specular reflection can make an object look shiny in the sense that specular highlights can be seen where the object reflects light from a light source towards the viewer. But in reality, an object that has a mirror-like surface doesn't just reflect light sources; it also reflects other objects. If we are trying to compute a color for a point, A, on a mirror-like surface, we need to consider the contribution to that color from mirror-like reflection of other objects. To do that, we can cast a \"reflected ray\" from A. The direction of the reflected ray is determined by the normal vector to the surface at A and by the direction from A to the viewer. This illustration shows a 2D version. Think of it as a cross-section of the situation in 3D:</p> <p></p> <p>Here, the reflected ray from point A hits the purple square at point B, and the viewer will see a reflection of point B at A. (Remember that in ray tracing, we follow the path of light rays backwards from the viewer, to find out where they came from.)</p> <p>To find out what the reflection of B looks like, we need to know the color of the ray that arrives at A from B. But finding a color for B is the same sort of problem as finding a color for A, and we should solve it in the same way: by applying the ray-tracing algorithm to B! That is, we use the material properties of the surface at B, we cast shadow rays from B towards light sources to determine how B is illuminated, and\u2014if the purple square has a mirror-like surface\u2014we cast a reflected ray from B to find out what it reflects. In the illustration, the reflected ray from B hits a pentagon at point C, so the square reflects an image of the pentagon, and the disk reflects an image of the square, including its reflection of the pentagon. Ray-tracing can handle multiple mirror-like reflections between objects in a scene!</p> <p>Because applying the ray-tracing algorithm at one point can involve applying the same algorithm at additional points, ray tracing is a recursive algorithm. To distinguish this from simple ray casting, ray tracing is often referred to as \"recursive ray tracing.\"</p> <p>Ray tracing can be extended in a similar way to handle transparency or, more properly, translucency. When computing a color for a point on a translucent object, we need to take into account light that arrives at that point through the object. To do that, we can cast yet another ray from that point, this time into the object. When a light ray passes from one medium, such as air, into another medium, such as glass, the path of the light ray can bend. This bending is called refraction, and the ray that is cast through a translucent object is called the \"refracted ray.\" The above illustration shows the refracted ray from point A passing through the object and emerging from the object at D. To find a color for that ray, we would need to find out what, if anything, it hits, and we would need to apply ray tracing recursively at the point of intersection.</p> <p>(The degree of bending of a light ray that passes from one medium to another depends on a property of the two media called the \"index of refraction.\" More exactly, it depends on the ratio between the two indices of refraction. In practice, the index of refraction outside objects is often taken to be equal to one, so that the bending depends only on the index of refraction of an object. The index of refraction is another material property for translucent objects. It is often abbreviated IOR.)</p> <p>We should look at the computations in a little more detail. The goal is to compute a color for a point on an image. We cast a ray from the viewpoint through the image and into the scene, and determine the first intersection point of the ray with an object. The color of that point is computed by adding up the contributions from different sources.</p> <p>First, there is diffuse, specular, and possibly ambient reflection of light from various light sources. These contributions are based on the diffuse, specular, and ambient colors of the object, on the normal vector to the object, and on the properties of the light sources. Note that some color properties of the object, usually the ambient and diffuse colors, might come from a texture. The specular contribution can produce specular highlights, which are essentially the reflections of light sources. Shadow rays are used to determine which directional and point lights illuminate the object; aside from that, this part of the calculation is similar to OpenGL.</p> <p>Next, if the surface has mirror-like reflection, then a reflected ray is cast and ray tracing is applied recursively to find a color for that ray. The contribution from that ray is combined with other contributions to the color of the surface, depending on the strength of the mirror reflection. For a perfect mirror, the reflected ray contributes 100% of the color, but in general the contribution is less. Mirror reflectivity is a new material property. It is responsible for reflections of one object on the surface of another, while specular color is responsible for specular highlights.</p> <p>Finally, if the object is translucent, then a refracted ray is cast, and ray tracing is used to find its color. The contribution of that ray to the color of the object depends on the degree of transparency of the object, since some of the light can be absorbed rather than transmitted. The degree of transparency can depend on the wavelength of the light\u2014as it does, for example, in colored glass.</p> <p>And, of course, all of these calculations need to be done three times, for the red, the green, and the blue components of the color.</p> <p>The ray tracing algorithm is recursive, and, as every programmer knows, recursion needs a base case. That is, there has to come a time when, instead of calling itself, the algorithm simply returns a value. A base case occurs whenever a casted ray does not intersect any objects. Another kind of base case can occur when it is determined that casting more rays cannot contribute any significant amount to the color of the image. For example, whenever a ray is reflected, some of that ray is absorbed rather than reflected, depending on the color of the object from which it is reflected. After reflecting many times, a ray would have very little color left to contribute to the final result. A ray can also lose energy because of attenuation of light with distance, and a ray-tracing algorithm might take that into account. In addition, a ray tracing algorithm should always be run with a maximum recursion depth, to put an absolute limit on the number of times the algorithm will call itself.</p>"},{"location":"cn/c8/s1/#813-\u5149\u7ebf\u8ffd\u8e2a\u7684\u5c40\u9650\u6027","title":"8.1.3 \u5149\u7ebf\u8ffd\u8e2a\u7684\u5c40\u9650\u6027","text":"<p>Limitations of Ray Tracing</p> \u4e2d\u6587\u82f1\u6587 <p>\u5c3d\u7ba1\u5149\u7ebf\u8ffd\u8e2a\u53ef\u4ee5\u4ea7\u751f\u975e\u5e38\u903c\u771f\u7684\u56fe\u50cf\uff0c\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u65e0\u6cd5\u505a\u5230\u7684\u4e8b\u60c5\u3002\u4f8b\u5982\uff0c\u867d\u7136\u5149\u7ebf\u8ffd\u8e2a\u5bf9\u70b9\u5149\u6e90\u548c\u5b9a\u5411\u5149\u6548\u679c\u826f\u597d\uff0c\u4f46\u5b83\u65e0\u6cd5\u5904\u7406\u533a\u57df\u5149\u3002\u533a\u57df\u5149\u662f\u6307\u5177\u6709\u9762\u79ef\u7684\u5149\u6e90\uff0c\u5373\u5b83\u662f\u4e00\u4e2a\u4ece\u6574\u4e2a\u8868\u9762\u79ef\u800c\u4e0d\u662f\u4ece\u4e00\u4e2a\u70b9\u53d1\u51fa\u5149\u7ebf\u7684\u7269\u4f53\u3002\u5f53\u7136\uff0c\u771f\u6b63\u7684\u5149\u6e90\u662f\u533a\u57df\u5149\u3002\u8367\u5149\u706f\u4ece\u5706\u67f1\u4f53\u7684\u8868\u9762\u53d1\u51fa\u5149\u7ebf\u3002\u4e00\u4e2a\u660e\u4eae\u7684\u7a97\u6237\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u533a\u57df\u5149\u3002\u5373\u4f7f\u662f\u706f\u6ce1\u4e5f\u4e0d\u662f\u771f\u6b63\u4ece\u4e00\u4e2a\u70b9\u8f90\u5c04\u5149\u7ebf\u3002\u5149\u7ebf\u8ffd\u8e2a\u4f7f\u7528\u9634\u5f71\u5149\u7ebf\u6765\u5224\u65ad\u5149\u6e90\u662f\u5426\u7167\u4eae\u4e86\u7269\u4f53\u3002\u4f46\u9634\u5f71\u5149\u7ebf\u53ea\u5728\u4e00\u4e2a\u65b9\u5411\u4e0a\u6295\u5c04\uff0c\u5e76\u4e14\u53ea\u80fd\u51fb\u4e2d\u533a\u57df\u5149\u4e0a\u7684\u4e00\u4e2a\u70b9\u3002\u8981\u51c6\u786e\u5730\u5b9e\u73b0\u533a\u57df\u5149\uff0c\u9700\u8981\u4e3a\u5149\u6e90\u8868\u9762\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u9700\u8981\u4e00\u4e2a\u4e0d\u540c\u7684\u9634\u5f71\u5149\u7ebf\u3002</p> <p>\u5149\u7ebf\u8ffd\u8e2a\u5668\u53ef\u4ee5\u901a\u8fc7\u7528\u70b9\u5149\u6e90\u7f51\u683c\u66ff\u6362\u533a\u57df\u5149\u6765\u8fd1\u4f3c\u5904\u7406\u533a\u57df\u5149\u3002\u7136\u540e\u5b83\u53ef\u4ee5\u5411\u7f51\u683c\u4e2d\u7684\u6bcf\u4e2a\u70b9\u6295\u5c04\u4e00\u4e2a\u9634\u5f71\u5149\u7ebf\u3002\u5728\u7f51\u683c\u4e2d\u4f7f\u7528\u66f4\u591a\u7684\u70b9\u5149\u6e90\u5c06\u63d0\u4f9b\u66f4\u597d\u7684\u8fd1\u4f3c\u3002\u5f53\u7136\uff0c\u6295\u5c04\u6240\u6709\u8fd9\u4e9b\u9634\u5f71\u5149\u7ebf\u53ef\u80fd\u4f1a\u663e\u8457\u589e\u52a0\u8ba1\u7b97\u65f6\u95f4\u3002</p> <p>\u5149\u7ebf\u8ffd\u8e2a\u4e2d\u7684\u53e6\u4e00\u4e2a\u7167\u660e\u95ee\u9898\u662f\u5b83\u6ca1\u6709\u8003\u8651\u5230\u53cd\u5c04\u5149\u7684\u7167\u660e\u3002\u4f8b\u5982\uff0c\u6765\u81ea\u5149\u6e90\u7684\u5149\u7ebf\u5e94\u8be5\u4ece\u955c\u5b50\u4e0a\u53cd\u5c04\uff0c\u53cd\u5c04\u7684\u5149\u7ebf\u5e94\u8be5\u7167\u4eae\u5176\u4ed6\u7269\u4f53\u3002\u5149\u7ebf\u8ffd\u8e2a\u4f7f\u7528\u9634\u5f71\u5149\u7ebf\u6765\u5224\u65ad\u5149\u6e90\u662f\u5426\u7167\u4eae\u4e86\u7269\u4f53\u3002\u4f46\u8fd9\u5bf9\u53cd\u5c04\u5149\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u7b97\u6cd5\u4e0d\u77e5\u9053\u5e94\u8be5\u5c06\u9634\u5f71\u5149\u7ebf\u7784\u51c6\u54ea\u91cc\u2014\u2014\u53cd\u5c04\u5149\u53ef\u80fd\u6765\u81ea\u4efb\u4f55\u65b9\u5411\u3002</p> <p>\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u955c\u5b50\u7684\u95ee\u9898\u3002\u4efb\u4f55\u53cd\u5c04\u5149\uff0c\u5373\u4f7f\u662f\u6f2b\u53cd\u5c04\uff0c\u4e5f\u5e94\u8be5\u7167\u4eae\u9644\u8fd1\u7684\u7269\u4f53\u3002\u4f8b\u5982\uff0c\u4ece\u7eff\u8272\u7269\u4f53\u4e0a\u6f2b\u53cd\u5c04\u7684\u5149\u7ebf\u5e94\u8be5\u7ed9\u9644\u8fd1\u7684\u7269\u4f53\u589e\u6dfb\u4e00\u70b9\u7eff\u8272\u3002\u8fd9\u79cd\u6548\u679c\u79f0\u4e3a\u201c\u989c\u8272\u6e17\u900f\u201d\u3002\u5b9e\u9645\u4e0a\uff0c\u5149\u7ebf\u53ef\u4ee5\u88ab\u53cd\u5c04\u548c\u518d\u53cd\u5c04\u591a\u6b21\uff0c\u4e3a\u5b83\u51fb\u4e2d\u7684\u6bcf\u4e2a\u7269\u4f53\u589e\u6dfb\u4e00\u70b9\u989c\u8272\u3002\u4e0e\u533a\u57df\u5149\u4e00\u6837\uff0c\u53ef\u4ee5\u5411\u5149\u7ebf\u8ffd\u8e2a\u4e2d\u6dfb\u52a0\u8fd1\u4f3c\u65b9\u6cd5\u6765\u6a21\u62df\u8fd9\u79cd\u6548\u679c\u3002\u4f8b\u5982\uff0c\u201c\u5149\u5b50\u6620\u5c04\u201d\u4e3a\u5149\u7ebf\u8ffd\u8e2a\u589e\u52a0\u4e86\u4e00\u4e2a\u9884\u5904\u7406\u9636\u6bb5\uff0c\u8be5\u9636\u6bb5\u6a21\u62df\u4e86\u4ece\u5149\u6e90\u53d1\u51fa\u7684\u5927\u91cf\u5149\u7ebf\u6216\u201c\u5149\u5b50\u201d\uff0c\u5e76\u8ddf\u8e2a\u5b83\u4eec\u5728\u573a\u666f\u4e2d\u7684\u8def\u5f84\uff0c\u770b\u770b\u5b83\u4eec\u5982\u4f55\u4e3a\u5b83\u4eec\u51fb\u4e2d\u7684\u7269\u4f53\u589e\u6dfb\u989c\u8272\u3002\u7136\u540e\u5728\u5149\u7ebf\u8ffd\u8e2a\u9636\u6bb5\u4f7f\u7528\u8fd9\u4e2a\u201c\u5149\u5b50\u56fe\u201d\u7684\u4fe1\u606f\u6765\u4ea7\u751f\u66f4\u903c\u771f\u7684\u989c\u8272\u3002</p> <p>OpenGL\u4f7f\u7528\u73af\u5883\u5149\u4f5c\u4e3a\u591a\u6b21\u53cd\u5c04\u548c\u518d\u53cd\u5c04\u5149\u7ebf\u7684\u8fd1\u4f3c\u3002\u5047\u8bbe\u73af\u5883\u5149\u5e73\u7b49\u5730\u7167\u4eae\u6bcf\u4e2a\u7269\u4f53\u3002\u7136\u800c\uff0c\u8fd9\u662f\u4e00\u4e2a\u8f83\u5dee\u7684\u8fd1\u4f3c\u3002\u66f4\u597d\u7684\u8fd1\u4f3c\u4f7f\u7528\u73af\u5883\u906e\u6321\uff0c\u5373\u73af\u5883\u5149\u671d\u5411\u8868\u9762\u65f6\u53ef\u4ee5\u88ab\u9644\u8fd1\u7269\u4f53\u963b\u6321\u6216\u201c\u906e\u6321\u201d\u3002\u50cf\u73af\u5883\u5149\u4e00\u6837\uff0c\u73af\u5883\u906e\u6321\u5728\u7269\u7406\u4e0a\u662f\u4e0d\u771f\u5b9e\u7684\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7167\u660e\u770b\u8d77\u6765\u66f4\u903c\u771f\uff0c\u7269\u4f53\u770b\u8d77\u6765\u66f4\u7acb\u4f53\u3002\u4e00\u79cd\u4f30\u8ba1\u73af\u5883\u906e\u6321\u7684\u6280\u672f\u4f7f\u7528\u5149\u7ebf\u6295\u5c04\u3002\u6211\u4eec\u5047\u8bbe\u73af\u5883\u5149\u6765\u81ea\u573a\u666f\u7684\u80cc\u666f\u3002\u4e3a\u4e86\u4f30\u8ba1\u67d0\u70b9\u7684\u73af\u5883\u906e\u6321\uff0c\u4ece\u8be5\u70b9\u5411\u968f\u673a\u65b9\u5411\u6295\u5c04\u591a\u6761\u5149\u7ebf\uff0c\u5e76\u8ba1\u7b97\u8fd9\u4e9b\u5149\u7ebf\u4e2d\u6709\u591a\u5c11\u88ab\u573a\u666f\u4e2d\u7684\u51e0\u4f55\u4f53\u963b\u6321\uff0c\u6709\u591a\u5c11\u8fbe\u5230\u4e86\u5929\u7a7a\u3002\u88ab\u963b\u6321\u7684\u5149\u7ebf\u8d8a\u591a\uff0c\u8be5\u70b9\u7684\u73af\u5883\u906e\u6321\u7a0b\u5ea6\u5c31\u8d8a\u5927\u3002</p> <p>\u5c1d\u8bd5\u8003\u8651\u573a\u666f\u4e2d\u5149\u7ebf\u4e0e\u7269\u4f53\u7684\u6240\u6709\u76f8\u4e92\u4f5c\u7528\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a\u4f7f\u7528\u5168\u5c40\u7167\u660e\u3002\u53ef\u4ee5\u5411\u5149\u7ebf\u8ffd\u8e2a\u4e2d\u6dfb\u52a0\u4e0a\u8ff0\u8fd1\u4f3c\u65b9\u6cd5\u4ee5\u589e\u52a0\u5176\u73b0\u5b9e\u6027\uff0c\u4f46\u4ee3\u4ef7\u662f\u663e\u8457\u589e\u52a0\u7684\u590d\u6742\u6027\u548c\u53ef\u80fd\u5927\u91cf\u7684\u989d\u5916\u8ba1\u7b97\u3002\u6211\u4eec\u5f00\u59cb\u660e\u767d\u4e3a\u4ec0\u4e48\u975e\u5e38\u903c\u771f\u7684\u56fe\u50cf\u9700\u8981\u8fd9\u4e48\u957f\u65f6\u95f4\u6765\u8ba1\u7b97\u4e86\uff01\u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u4e00\u79cd\u5c1d\u8bd5\u7cbe\u786e\u5904\u7406\u5168\u5c40\u7167\u660e\u7684\u65b9\u6cd5\u3002</p> <p>Although ray tracing can produce very realistic images, there are some things that it can't do. For example, while ray tracing works well for point lights and directional lights, it can't handle area lights. An area light is one that has area. That is, it is an object that emits light from its entire surface area rather than from a single point. Of course, real lights are area lights. A fluorescent light emits light from the surface of a cylinder. A brightly lit window can be considered to be a kind of area light. Even a light bulb does not really radiate light from a single point. Ray tracing uses shadow rays to tell whether a light source illuminates an object. But a shadow ray is cast in only one direction, and can only hit one point on an area light. To implement area lights exactly, a different shadow ray would be needed for each point on the surface of the light.</p> <p>A ray tracer can handle area lights in an approximate way, by replacing the area light with a grid of point lights. It can then cast a shadow ray towards each point in the grid. Using more point lights in the grid will give a better approximation. Of course, casting all those shadow rays can add significantly to the computation time.</p> <p>Another problem with lighting in ray tracing is that it doesn't take into account illumination by reflected light. For example, light from a light source should reflect off a mirror, and the reflected light should illuminate other objects. Ray tracing uses shadow rays to tell whether a light source illuminates an object. But that won't work for reflected light, since the algorithm doesn't know where to aim the shadow ray\u2014reflected light could come from any direction.</p> <p>This is not just a problem with mirrors. Any reflected light, even from diffuse reflection, should illuminate nearby objects. For example, light that is reflected diffusely from a green object should add a green tint to nearby objects. This effect is called \"color bleeding.\" In reality, light can be reflected and re-reflected many times, contributing a bit of color to each object that it hits. As with area lights, approximate methods can be added to ray tracing to simulate this effect. For example, \"photon mapping\" adds a pre-processing phase to ray tracing which simulates the emission of a large number of light rays, or \"photons,\" from light sources, and tracks their paths through the scene to see how they add color to the objects that they hit. The information from this \"photon map\" is then used during the ray tracing phase to produce more realistic colors.</p> <p>OpenGL uses ambient light as an approximation for light that has been reflected and re-reflected many times. Ambient light is assumed to illuminate every object equally. However, that is a poor approximation. A better approximation uses ambient occlusion, the idea that ambient light heading towards a surface can be blocked, or \"occluded,\" by nearby objects. Like ambient light, ambient occlusion is not physically realistic, but in practice, it can make lighting look more realistic and objects look more three-dimensional. One technique for estimating ambient occlusion uses ray casting. We assume that the ambient light comes from the background of the scene. To estimate ambient occlusion at a point, cast a number of rays from that point in random directions, and count how many of those rays are blocked by geometry in the scene and how many reach the sky. The more rays that are blocked, the greater the degree of ambient occlusion at that point.</p> <p>Algorithms that attempt to take into account all of the interactions of light with objects in a scene are said to use global illumination. Approximate methods such as those mentioned above can be added on to ray tracing to increase its realism, at the cost of significantly increased complexity and a potentially large amount of extra computing. We begin to see why very realistic images can take so long to compute! In the next section we will look at a method that attempts to handle global illumination exactly.</p>"},{"location":"cn/c8/s2/","title":"8.2 \u8def\u5f84\u8ffd\u8e2a","text":"<p>Path Tracing</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5149\u7ebf\u8ffd\u8e2a\u5982\u4f55\u88ab\u6269\u5c55\u6765\u8fd1\u4f3c\u4e00\u4e9b\u57fa\u672c\u7b97\u6cd5\u65e0\u6cd5\u5904\u7406\u7684\u591a\u79cd\u6548\u679c\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u770b\u5230\u4e00\u79cd\u7b97\u6cd5\uff0c\u5b83\u4ee5\u4e00\u79cd\u76f8\u5f53\u76f4\u63a5\u548c\u7edf\u4e00\u7684\u65b9\u5f0f\u6765\u8003\u8651\u6240\u6709\u8fd9\u4e9b\u6548\u679c\u4ee5\u53ca\u66f4\u591a\uff1a\u8def\u5f84\u8ffd\u8e2a\u3002\u4e0e\u5149\u7ebf\u8ffd\u8e2a\u4e00\u6837\uff0c\u8def\u5f84\u8ffd\u8e2a\u901a\u8fc7\u4ece\u89c2\u5bdf\u8005\u90a3\u91cc\u5411\u540e\u8ffd\u8e2a\u5149\u7ebf\u7684\u8def\u5f84\uff0c\u7a7f\u8fc7\u56fe\u50cf\u4e0a\u7684\u70b9\u8fdb\u5165\u573a\u666f\uff0c\u6765\u8ba1\u7b97\u56fe\u50cf\u4e2d\u70b9\u7684\u989c\u8272\u3002\u4f46\u5728\u8def\u5f84\u8ffd\u8e2a\u4e2d\uff0c\u60f3\u6cd5\u662f\u8003\u8651\u5149\u7ebf\u53ef\u80fd\u9075\u5faa\u7684\u6240\u6709\u53ef\u80fd\u8def\u5f84\u3002\u5f53\u7136\uff0c\u8fd9\u5e76\u4e0d\u662f\u5b57\u9762\u4e0a\u53ef\u80fd\u7684\uff0c\u4f46\u662f\u8ffd\u8e2a\u5927\u91cf\u7684\u8def\u5f84\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e2a\u5f88\u597d\u7684\u8fd1\u4f3c\u2014\u2014\u968f\u7740\u8def\u5f84\u6570\u91cf\u7684\u589e\u52a0\uff0c\u8fd9\u79cd\u8fd1\u4f3c\u4f1a\u53d8\u5f97\u66f4\u597d\uff08\u201c\u524d\u5411\u8def\u5f84\u8ffd\u8e2a\u201d\uff0c\u5373\u4ece\u5149\u6e90\u53d1\u51fa\u7684\u5149\u7ebf\u8def\u5f84\u5411\u524d\u8ffd\u8e2a\uff0c\u6709\u65f6\u4e5f\u88ab\u4f7f\u7528\u3002\uff09</p> <p>We have seen how ray tracing can be extended to approximate a variety of effects that are not handled by the basic algorithm. We look next at an algorithm that accounts for all those effects and more in a fairly straightforward and unified way: path tracing. Like ray tracing, path tracing computes colors for points in an image by tracing the paths of light rays backwards from the viewer through points on the image and into the scene. But in path tracing, the idea is to account for all possible paths that the light could have followed. Of course, that is not literally possible, but following a large number of paths can give a good approximation\u2014one that gets better as the number of paths is increased (\"Forward path tracing,\" where paths of light rays emitted from light sources are traced forward in time, is also sometimes used.)</p>"},{"location":"cn/c8/s2/#821-bsdf","title":"8.2.1 BSDF","text":"<p>BSDF's</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e3a\u4e86\u6a21\u62df\u5e7f\u6cdb\u7684\u7269\u7406\u73b0\u8c61\uff0c\u8def\u5f84\u8ffd\u8e2a\u4f7f\u7528\u4e86\u6750\u8d28\u5c5e\u6027\u6982\u5ff5\u7684\u6982\u62ec\u3002\u5728OpenGL\u4e2d\uff0c\u4e00\u79cd\u6750\u8d28\u662f\u73af\u5883\u5149\u3001\u6f2b\u53cd\u5c04\u3001\u955c\u9762\u53cd\u5c04\u548c\u81ea\u53d1\u5149\u989c\u8272\u7684\u7ec4\u5408\uff0c\u518d\u52a0\u4e0a\u5149\u6cfd\u5ea6\u3002\u8fd9\u4e9b\u5c5e\u6027\uff08\u9664\u4e86\u81ea\u53d1\u5149\u989c\u8272\uff09\u6a21\u62df\u4e86\u8868\u9762\u4e0e\u5149\u7684\u76f8\u4e92\u4f5c\u7528\u3002\u6750\u8d28\u5c5e\u6027\u53ef\u4ee5\u5728\u8868\u9762\u4e0a\u7684\u6bcf\u4e2a\u70b9\u4e0a\u53d8\u5316\uff1b\u8fd9\u662f\u7eb9\u7406\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <p>OpenGL\u6750\u8d28\u53ea\u662f\u5bf9\u73b0\u5b9e\u7684\u7c97\u7565\u8fd1\u4f3c\u3002\u5728\u8def\u5f84\u8ffd\u8e2a\u4e2d\uff0c\u4f7f\u7528\u4e86\u4e00\u79cd\u66f4\u901a\u7528\u7684\u6982\u5ff5\uff0c\u5b83\u80fd\u591f\u66f4\u51c6\u786e\u5730\u8868\u793a\u51e0\u4e4e\u6240\u6709\u771f\u5b9e\u7269\u7406\u8868\u9762\u6216\u4f53\u79ef\u7684\u5c5e\u6027\u3002\u66ff\u4ee3\u6750\u8d28\u7684\u88ab\u79f0\u4e3a\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\uff08BSDF\uff09\u3002</p> <p>\u601d\u8003\u4e00\u4e0b\u5230\u8fbe\u67d0\u70b9\u7684\u5149\u5982\u4f55\u53d7\u5230\u8be5\u70b9\u7269\u8d28\u7269\u7406\u5c5e\u6027\u7684\u5f71\u54cd\u3002\u4e00\u4e9b\u5149\u53ef\u80fd\u88ab\u5438\u6536\u3002\u4e00\u4e9b\u53ef\u80fd\u5728\u6ca1\u6709\u53d7\u5230\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u901a\u8fc7\u8be5\u70b9\u3002\u8fd8\u6709\u4e00\u4e9b\u53ef\u80fd\u88ab\u201c\u6563\u5c04\u201d\uff0c\u5373\u671d\u53e6\u4e00\u4e2a\u65b9\u5411\u53d1\u9001\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u8be5\u70b9\u89c6\u4e3a\u6563\u5c04\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u63cf\u8ff0\u4e86\u5149\u662f\u5982\u4f55\u4ece\u8868\u9762\u6216\u4f53\u79ef\u4e0a\u7684\u6bcf\u4e2a\u70b9\u6563\u5c04\u7684\u3002</p> <p>\u60f3\u8c61\u4e00\u4e0b\u4e00\u675f\u5149\uff0c\u6216\u5149\u5b50\uff0c\u5230\u8fbe\u67d0\u70b9\u3002\u5b83\u53d1\u751f\u7684\u60c5\u51b5\u53ef\u80fd\u53d6\u51b3\u4e8e\u5b83\u5230\u8fbe\u7684\u65b9\u5411\u3002\u901a\u5e38\uff0c\u5047\u8bbe\u5b83\u6ca1\u6709\u88ab\u5438\u6536\uff0c\u5149\u66f4\u6709\u53ef\u80fd\u5728\u67d0\u4e9b\u65b9\u5411\u4e0a\u6563\u5c04\u800c\u4e0d\u662f\u5176\u4ed6\u65b9\u5411\u3002\uff08\u4f8b\u5982\uff0c\u5728\u955c\u9762\u53cd\u5c04\u4e2d\u3002\uff09\u5728\u8be5\u70b9\u7684\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u7ed9\u51fa\u4e86\u5149\u7ebf\u4ee5\u7ed9\u5b9a\u65b9\u5411\u79bb\u5f00\u70b9\u7684\u6982\u7387\u3002\u5b83\u662f\u201c\u53cc\u5411\u201d\u7684\uff0c\u56e0\u4e3a\u7b54\u6848\u662f\u4e24\u4e2a\u65b9\u5411\u7684\u51fd\u6570\uff0c\u5149\u5230\u8fbe\u7684\u65b9\u5411\u548c\u4f60\u6240\u8be2\u95ee\u7684\u51fa\u5c04\u65b9\u5411\u3002\uff08\u5b83\u5728\u6570\u5b66\u8fde\u7eed\u6982\u7387\u5206\u5e03\u7406\u8bba\u7684\u610f\u4e49\u4e0a\u662f\u201c\u5206\u5e03\u51fd\u6570\u201d\uff0c\u4f46\u4f60\u4e0d\u9700\u8981\u7406\u89e3\u8fd9\u4e00\u70b9\u5c31\u80fd\u628a\u63e1\u4e00\u822c\u6982\u5ff5\u3002\u5bf9\u6211\u4eec\u6765\u8bf4\uff0c\u53ea\u8981\u7406\u89e3\u8fd9\u4e2a\u51fd\u6570\u8bf4\u660e\u4e86\u6765\u81ea\u7ed9\u5b9a\u65b9\u5411\u7684\u5149\u662f\u5982\u4f55\u5728\u53ef\u80fd\u7684\u51fa\u5c04\u65b9\u5411\u4e2d\u5206\u5e03\u7684\u5c31\u8db3\u591f\u4e86\u3002\uff09\u6ce8\u610f\uff0c\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u4e5f\u662f\u4f60\u6240\u8ba8\u8bba\u7684\u70b9\u7684\u51fd\u6570\uff0c\u5b83\u901a\u5e38\u662f\u5149\u6ce2\u957f\u7684\u51fd\u6570\u3002</p> <p>\u4efb\u4f55\u7a7a\u95f4\u4e2d\u7684\u70b9\u90fd\u53ef\u4ee5\u88ab\u8d4b\u4e88\u4e00\u4e2a\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u3002\u5bf9\u4e8e\u771f\u7a7a\uff0c\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u662f\u5e73\u51e1\u7684\uff1a\u5b83\u53ea\u662f\u8bf4\u5230\u8fbe\u67d0\u70b9\u7684\u5149\u6709100%\u7684\u6982\u7387\u7ee7\u7eed\u6cbf\u76f8\u540c\u65b9\u5411\u524d\u8fdb\u3002\u4f46\u662f\u901a\u8fc7\u96fe\u3001\u5c18\u571f\u98de\u626c\u7684\u7a7a\u6c14\u6216\u810f\u6c34\u7684\u5149\u6709\u4e00\u5b9a\u7684\u88ab\u5438\u6536\u7684\u6982\u7387\u548c\u88ab\u6563\u5c04\u5230\u968f\u673a\u65b9\u5411\u7684\u6982\u7387\u3002\u7c7b\u4f3c\u7684\u89c2\u70b9\u9002\u7528\u4e8e\u901a\u8fc7\u534a\u900f\u660e\u56fa\u4f53\u7269\u4f53\u5185\u90e8\u7684\u5149\u3002</p> <p>\u7136\u800c\uff0c\u4f20\u7edf\u4e0a\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e3b\u8981\u5173\u6ce8\u5149\u5728\u7269\u4f53\u8868\u9762\u53d1\u751f\u7684\u60c5\u51b5\u3002\u5149\u53ef\u4ee5\u88ab\u5438\u6536\u6216\u53cd\u5c04\uff0c\u6216\u8005\uff0c\u5982\u679c\u7269\u4f53\u662f\u534a\u900f\u660e\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8868\u9762\u4f20\u8f93\u3002\u63cf\u8ff0\u5149\u4ece\u8868\u9762\u53cd\u5c04\u7684\u51fd\u6570\u6709\u65f6\u88ab\u79f0\u4e3a\u53cc\u5411\u53cd\u5c04\u5206\u5e03\u51fd\u6570\uff08BRDF\uff09\uff0c\u5149\u4f20\u8f93\u7684\u516c\u5f0f\u662f\u53cc\u5411\u4f20\u8f93\u5206\u5e03\u51fd\u6570\uff08BTDF\uff09\u3002\u8868\u9762\u7684\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u662f\u4e24\u8005\u7684\u7ec4\u5408\u3002</p> <p>\u8ba9\u6211\u4eec\u4ece\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u7684\u89d2\u5ea6\u8003\u8651OpenGL\u6750\u8d28\u3002\u5728\u57fa\u672c\u7684OpenGL\u4e2d\uff0c\u5149\u53ea\u80fd\u88ab\u53cd\u5c04\u6216\u5438\u6536\u3002\u5bf9\u4e8e\u6f2b\u53cd\u5c04\uff0c\u5149\u5728\u4e0e\u8868\u9762\u6cd5\u5411\u91cf\u5f62\u6210\u5c0f\u4e8e90\u5ea6\u89d2\u7684\u6bcf\u4e2a\u65b9\u5411\u4e0a\u88ab\u53cd\u5c04\u7684\u6982\u7387\u76f8\u7b49\uff0c\u4e0e\u5149\u5230\u8fbe\u7684\u65b9\u5411\u65e0\u5173\u3002\u5bf9\u4e8e\u955c\u9762\u53cd\u5c04\uff0c\u5165\u5c04\u5149\u7684\u65b9\u5411\u5f88\u91cd\u8981\u3002\u5728OpenGL\u4e2d\uff0c\u955c\u9762\u53cd\u5c04\u5149\u7684\u53ef\u80fd\u51fa\u5c04\u65b9\u5411\u5f62\u6210\u4e00\u4e2a\u9525\u4f53\uff0c\u5176\u4e2d\u9525\u4f53\u8f74\u7ebf\u4e0e\u6cd5\u5411\u91cf\u4e4b\u95f4\u7684\u89d2\u5ea6\u7b49\u4e8e\u6cd5\u5411\u91cf\u4e0e\u5165\u5c04\u5149\u65b9\u5411\u4e4b\u95f4\u7684\u89d2\u5ea6\u3002\u9525\u4f53\u8f74\u7ebf\u662f\u6700\u53ef\u80fd\u7684\u51fa\u5c04\u5149\u65b9\u5411\uff0c\u968f\u7740\u51fa\u5c04\u65b9\u5411\u4e0e\u8f74\u7ebf\u65b9\u5411\u4e4b\u95f4\u7684\u89d2\u5ea6\u589e\u52a0\uff0c\u6982\u7387\u4f1a\u4e0b\u964d\u3002\u4e0b\u964d\u7684\u901f\u7387\u7531\u6750\u8d28\u7684\u5149\u6cfd\u5ea6\u5c5e\u6027\u6307\u5b9a\u3002\u8868\u9762\u7684BRDF\u7ed3\u5408\u4e86\u6f2b\u53cd\u5c04\u548c\u955c\u9762\u53cd\u5c04\u3002\uff08\u73af\u5883\u6750\u8d28\u5c5e\u6027\u4e0d\u9002\u5408BSDF\u6846\u67b6\uff0c\u56e0\u4e3a\u7269\u7406\u4e0a\u6ca1\u6709\u4e00\u79cd\u201c\u73af\u5883\u5149\u201d\uff0c\u5b83\u4e0e\u666e\u901a\u5149\u6709\u4e9b\u4e0d\u540c\u3002\uff09</p> <p>\u5149\u7ebf\u8ffd\u8e2a\u4e3a\u5149\u4e0e\u8868\u9762\u7684\u76f8\u4e92\u4f5c\u7528\u589e\u52a0\u4e86\u4e24\u79cd\u65b0\u7684\u53ef\u80fd\u6027\uff1a\u5b8c\u7f8e\u7684\u3001\u50cf\u955c\u5b50\u4e00\u6837\u7684\u53cd\u5c04\uff0c\u5176\u4e2d\u51fa\u5c04\u5149\u4e0e\u6cd5\u5411\u91cf\u5f62\u6210\u7684\u89d2\u5ea6\u4e0e\u5165\u5c04\u5149\u5b8c\u5168\u76f8\u540c\uff0c\u4ee5\u53ca\u5149\u4f20\u8f93\u5230\u534a\u900f\u660e\u7269\u4f53\u4e2d\uff0c\u5176\u4e2d\u51fa\u5c04\u89d2\u5ea6\u7531\u7269\u4f53\u5185\u5916\u7684\u6298\u5c04\u7387\u51b3\u5b9a\u3002</p> <p>\u4f46\u662f\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u53ef\u4ee5\u63d0\u4f9b\u66f4\u73b0\u5b9e\u7684\u5149\u4e0e\u8868\u9762\u76f8\u4e92\u4f5c\u7528\u6a21\u578b\u3002\u4f8b\u5982\uff0c\u7269\u4f53\u7684\u955c\u9762\u53cd\u5c04\u4e0e\u5149\u6e90\u7684\u955c\u9762\u53cd\u5c04\u4e4b\u95f4\u7684\u533a\u522b\u662f\u4eba\u4e3a\u7684\u3002\u5b8c\u7f8e\u7684\u955c\u5b50\u5e94\u8be5\u4ee5\u955c\u9762\u65b9\u5f0f\u53cd\u5c04\u5149\u6e90\u548c\u7269\u4f53\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5149\u6ed1\u4f46\u7c97\u7cd9\u7684\u8868\u9762\uff0c\u6240\u6709\u7684\u955c\u9762\u53cd\u5c04\u90fd\u4f1a\u5c06\u5149\u671d\u4e00\u4e2a\u65b9\u5411\u7684\u9525\u4f53\u53d1\u9001\uff0c\u63d0\u4f9b\u7269\u4f53\u548c\u5149\u6e90\u7684\u6a21\u7cca\u56fe\u50cf\u3002BSFD\u5e94\u8be5\u5904\u7406\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u5b83\u4e0d\u5e94\u8be5\u533a\u5206\u6765\u81ea\u5149\u6e90\u7684\u5149\u548c\u4ece\u5176\u4ed6\u7269\u4f53\u53cd\u5c04\u7684\u5149\u3002</p> <p>\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u4e5f\u53ef\u4ee5\u6b63\u786e\u5904\u7406\u4e00\u79cd\u79f0\u4e3a\u6b21\u8868\u9762\u6563\u5c04\u7684\u73b0\u8c61\uff0c\u8fd9\u5bf9\u4e8e\u53ea\u662f\u7a0d\u5fae\u534a\u900f\u660e\u7684\u6750\u6599\uff08\u5982\u725b\u5976\u3001\u7389\u548c\u76ae\u80a4\uff09\u6765\u8bf4\u53ef\u80fd\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u89c6\u89c9\u6548\u679c\u3002\u5728\u6b21\u8868\u9762\u6563\u5c04\u4e2d\uff0c\u51fb\u4e2d\u8868\u9762\u7684\u5149\u53ef\u4ee5\u88ab\u4f20\u8f93\u5230\u7269\u4f53\u5185\u90e8\uff0c\u5728\u7269\u4f53\u5185\u90e8\u6563\u5c04\u51e0\u6b21\uff0c\u7136\u540e\u4ece\u8868\u9762\u7684\u53e6\u4e00\u70b9\u51fa\u73b0\u3002\u5149\u5728\u7269\u4f53\u5185\u90e8\u7684\u884c\u4e3a\u7531\u7269\u4f53\u5185\u90e8\u6750\u6599\u7684\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u51b3\u5b9a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u5c06\u7c7b\u4f3c\u4e8e\u96fe\u7684\uff0c\u9664\u4e86\u6563\u5c04\u7684\u6982\u7387\u4f1a\u66f4\u5927\u3002</p> <p>\u5173\u952e\u662f\uff0c\u51e0\u4e4e\u4efb\u4f55\u7269\u7406\u4e0a\u771f\u5b9e\u7684\u6750\u6599\u90fd\u53ef\u4ee5\u901a\u8fc7\u6b63\u786e\u9009\u62e9\u7684\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\u6765\u5efa\u6a21\u3002</p> <p>In order to model a wide variety of physical phenomena, path tracing uses a generalization of the idea of material property. In OpenGL, a material is a combination of ambient, diffuse, specular, and emission colors, plus shininess. These properties, except for emission color, model how the surface interacts with light. Material properties can vary from point to point on a surface; that's an example of a texture.</p> <p>OpenGL material is only a rough approximation of reality. In path tracing, a more general notion is used that is capable of more accurately representing the properties of almost any real physical surface or volume. The replacement for materials is call a BSDF, or Bidirectional Scattering Distribution Function.</p> <p>Think about how light that arrives at some point can be affected by the physical properties of whatever substance exists at that point. Some of the light might be absorbed. Some might pass through the point without being affected at all. And some might be \"scattered,\" that is, sent off in another direction. In fact, we consider passing through the point as a special case of scattering. A BSDF describes how light is scattered from each point on a surface or in a volume.</p> <p>Think of a single ray, or photon, of light that arrives at some point. What happens to it can depend on the direction from which it arrives. In general, assuming that it is not absorbed, the light is more likely to be scattered in some directions than in others. (As in specular reflection, for example.) The BSDF at the point gives the probability that the ray will leave the point heading in a given direction. It is a \"bidirectional\" function because the answer is a function of two directions, the direction from which the light arrives and the outgoing direction that you are asking about. (It is a \"distribution function\" in the sense of the mathematical theory of continuous probability distributions, but you don't need to understand that to get the general idea. For us, it's enough to understand that the function says how light coming in from a given direction is distributed among possible outgoing directions.) Note that a BSDF is also a function of the point that you are talking about, and it is generally a function of the wavelength of the light as well.</p> <p>Any point in space can be assigned a BSDF. For empty space, the BSDF is trivial: It simply says that light arriving at a point has a 100% probability of continuing in the same direction. But light passing through fog or dusty air or dirty water has some probability of being absorbed and some probability of being scattered to a random direction. Similar remarks apply to light passing through the interior of a translucent solid object.</p> <p>Traditionally, though, computer graphics has been mostly concerned with what happens to light at the surface of an object. Light can be absorbed or reflected or, if the object is translucent, transmitted through the surface. The function that describes the reflection of light from a surface is sometimes called a BRDF (Bidirectional Reflectance Distribution Function), and the formula for transmission of light is a BTDF (Bidirectional Transmission Distribution function). The BSDF for a surface is a combination of the two.</p> <p>Let's consider OpenGL materials in terms of BSDFs. In basic OpenGL, light can only be reflected or absorbed. For diffuse reflection, light has an equal probability of being reflected in every direction that makes an angle of less than 90 degrees with the normal vector to the surface, and there is no dependence on the direction from which the light arrives. For specular reflection, the incoming light direction matters. In OpenGL, the possible outgoing directions for specularly reflected light form a cone, where the angle between the axis of the cone and the normal vector is equal to the angle between the normal vector and the incoming light direction. The axis of the cone is the most likely direction for outgoing light, and the probability falls off as the angle between the outgoing direction and the direction of the axis increases. The rate of falloff is specified by the shininess property of the material. The BRFD for the surface combines the diffuse and specular reflection. (The ambient material property doesn't fit well into the BSDF framework, since physically there is no such thing as an \"ambient light\" that is somehow different from regular light.)</p> <p>Ray tracing adds two new possibilities to the interaction of light with a surface: perfect, mirror-like reflection, where the outgoing light makes exactly the same angle with the normal vector as the incoming light, and transmission of light into a translucent object, where the outgoing angle is determined by the indices of refraction outside and inside the object.</p> <p>But BSDFs can provide even more realistic models of the interaction of light with surfaces. For example, the distinction between mirror-like reflection of an object and specular reflection of a light source is artificial. A perfect mirror should reflect both light sources and objects in a mirror-like way. For a shiny but rough surface, all specular reflection would send the light in a cone of directions, giving fuzzy images of objects and lights alike. A BSFD should handle both cases, and it shouldn't distinguish between light from light sources and light reflected off other objects.</p> <p>BSDFs can also correctly handle a phenomenon called subsurface scattering, which can be an important visual effect for materials that are just a bit translucent, such as milk, jade, and skin. In sub-surface scattering, light that hits a surface can be transmitted into the object, be scattered a few times internally inside the object, and then emerge from the surface at another point. How the light behaves inside the object is determined by the BSDF of the material in the interior of the object. The BSDF in this case would be similar to the one for fog, except that the probability of scattering would be larger.</p> <p>The point is that just about any physically realistic material can be modeled by a correctly chosen BSDF.</p>"},{"location":"cn/c8/s2/#822-\u8def\u5f84\u8ffd\u8e2a\u7b97\u6cd5","title":"8.2.2 \u8def\u5f84\u8ffd\u8e2a\u7b97\u6cd5","text":"<p>The Path Tracing Algorithm</p> \u4e2d\u6587\u82f1\u6587 <p>\u8def\u5f84\u8ffd\u8e2a\u57fa\u4e8e\u4e00\u4e2a\u88ab\u79f0\u4e3a\u201c\u6e32\u67d3\u65b9\u7a0b\u201d\u7684\u516c\u5f0f\u3002\u8be5\u516c\u5f0f\u8868\u660e\uff0c\u5728\u7ed9\u5b9a\u65b9\u5411\u4e0a\u79bb\u5f00\u67d0\u4e00\u7279\u5b9a\u70b9\u7684\u5149\u80fd\u91cf\u7b49\u4e8e\u8be5\u70b9\u5728\u8be5\u65b9\u5411\u4e0a\u53d1\u51fa\u7684\u5149\u80fd\u91cf\uff0c\u52a0\u4e0a\u4ece\u5176\u4ed6\u6765\u6e90\u5230\u8fbe\u8be5\u70b9\u7136\u540e\u88ab\u6563\u5c04\u5230\u8be5\u65b9\u5411\u7684\u5149\u80fd\u91cf\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u53d1\u51fa\u7684\u5149\u6307\u7684\u662f\u88ab\u521b\u9020\u51fa\u6765\u7684\u5149\uff0c\u5982\u7531\u5149\u6e90\u4ea7\u751f\u3002\u5728\u6e32\u67d3\u65b9\u7a0b\u4e2d\uff0c\u4efb\u4f55\u7269\u4f53\u90fd\u53ef\u4ee5\u662f\u5149\u7684\u53d1\u5c04\u5668\u3002\u7528OpenGL\u7684\u672f\u8bed\u6765\u8bf4\uff0c\u5c31\u50cf\u5177\u6709\u81ea\u53d1\u5149\u989c\u8272\u7684\u7269\u4f53\u5b9e\u9645\u4e0a\u4f1a\u53d1\u51fa\u53ef\u4ee5\u7167\u4eae\u5176\u4ed6\u7269\u4f53\u7684\u5149\u4e00\u6837\u3002\u533a\u57df\u5149\u53ea\u662f\u4e00\u4e2a\u6269\u5c55\u7684\u7269\u4f53\uff0c\u5b83\u4ece\u6bcf\u4e2a\u70b9\u53d1\u51fa\u5149\uff0c\u901a\u5e38\u7528\u5927\u7684\u53d1\u5149\u7269\u4f53\u6765\u7167\u4eae\u573a\u666f\u662f\u5e38\u89c1\u7684\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u5728\u5178\u578b\u7684\u8def\u5f84\u8ffd\u8e2a\u8bbe\u7f6e\u4e2d\uff0c\u70b9\u5149\u6e90\u548c\u5b9a\u5411\u5149\u5fc5\u987b\u88ab\u8d4b\u4e88\u4e00\u4e9b\u533a\u57df\uff0c\u4ee5\u4f7f\u5b83\u4eec\u5728\u7b97\u6cd5\u4e2d\u6b63\u786e\u5de5\u4f5c\uff0c\u6216\u8005\u5fc5\u987b\u4f7f\u7528\u4e00\u4e9b\u524d\u5411\u8def\u5f84\u8ffd\u8e2a\u3002\uff09</p> <p>\u81f3\u4e8e\u6563\u5c04\u5149\uff0c\u67d0\u70b9\u7684\u53cc\u5411\u6563\u5c04\u5206\u5e03\u51fd\u6570\uff08BSDF\uff09\u51b3\u5b9a\u4e86\u5230\u8fbe\u8be5\u70b9\u7684\u5149\u662f\u5982\u4f55\u88ab\u6563\u5c04\u7684\u3002\u5149\u901a\u5e38\u53ef\u4ee5\u4ece\u4efb\u4f55\u65b9\u5411\u5230\u8fbe\uff0c\u5e76\u4e14\u53ef\u4ee5\u8d77\u6e90\u4e8e\u573a\u666f\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u70b9\u3002\u6e32\u67d3\u65b9\u7a0b\u5728\u6bcf\u4e2a\u70b9\u90fd\u6210\u7acb\u3002\u5b83\u5c06\u6bcf\u4e2a\u70b9\u4e0a\u5230\u8fbe\u548c\u79bb\u5f00\u7684\u5149\u4e0e\u6bcf\u4e2a\u5176\u4ed6\u70b9\u4e0a\u5230\u8fbe\u548c\u79bb\u5f00\u7684\u5149\u8054\u7cfb\u8d77\u6765\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6781\u5176\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u7cfb\u7edf\uff0c\u4f60\u53ef\u80fd\u65e0\u6cd5\u627e\u5230\u786e\u5207\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4e00\u4e2a\u6e32\u67d3\u7b97\u6cd5\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5bfb\u627e\u6e32\u67d3\u65b9\u7a0b\u7684\u826f\u597d\u8fd1\u4f3c\u89e3\u7684\u5c1d\u8bd5\u3002</p> <p>\u8def\u5f84\u8ffd\u8e2a\u662f\u4e00\u79cd\u6982\u7387\u6e32\u67d3\u7b97\u6cd5\u3002\u5b83\u89c2\u5bdf\u53ef\u80fd\u7531\u5230\u8fbe\u89c2\u5bdf\u8005\u4f4d\u7f6e\u7684\u5149\u6240\u9075\u5faa\u7684\u8def\u5f84\u3002\u6bcf\u79cd\u53ef\u80fd\u7684\u8def\u5f84\u90fd\u6709\u4e00\u5b9a\u7684\u6982\u7387\u3002\u8def\u5f84\u8ffd\u8e2a\u751f\u6210\u53ef\u80fd\u8def\u5f84\u7684\u968f\u673a\u6837\u672c\uff0c\u6839\u636e\u5b83\u4eec\u7684\u53ef\u80fd\u6982\u7387\u9009\u62e9\u6837\u672c\u4e2d\u7684\u8def\u5f84\u3002\u5b83\u4f7f\u7528\u8fd9\u4e9b\u8def\u5f84\u6765\u521b\u5efa\u4e00\u4e2a\u8fd1\u4f3c\u4e8e\u6e32\u67d3\u65b9\u7a0b\u89e3\u51b3\u65b9\u6848\u7684\u56fe\u50cf\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u968f\u7740\u968f\u673a\u6837\u672c\u7684\u5927\u5c0f\u589e\u52a0\uff0c\u751f\u6210\u7684\u56fe\u50cf\u5c06\u63a5\u8fd1\u771f\u5b9e\u89e3\u51b3\u65b9\u6848\u3002\u8981\u83b7\u5f97\u9ad8\u8d28\u91cf\u7684\u56fe\u50cf\uff0c\u7b97\u6cd5\u5c06\u4e0d\u5f97\u4e0d\u4e3a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u8ffd\u8e2a\u6570\u5343\u6761\u8def\u5f84\uff0c\u4f46\u7ed3\u679c\u53ef\u80fd\u662f\u51e0\u4e4e\u4ee4\u4eba\u9707\u60ca\u7684\u903c\u771f\u5ea6\u3002</p> <p>\u8ba9\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u5b83\u5e94\u8be5\u5982\u4f55\u5de5\u4f5c\u3002\u9996\u5148\uff0c\u8003\u8651\u5149\u53ea\u7531\u8868\u9762\u53d1\u5c04\u548c\u53cd\u5c04\u7684\u60c5\u51b5\u3002\u4e0e\u5149\u7ebf\u8ffd\u8e2a\u4e00\u6837\uff0c\u6211\u4eec\u4ece\u89c2\u5bdf\u8005\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5411\u56fe\u50cf\u4e0a\u7684\u67d0\u70b9\u65b9\u5411\u6295\u5c04\u4e00\u675f\u5149\u7ebf\uff0c\u8fdb\u5165\u573a\u666f\u3002\uff08\u89c18.1.1\u5c0f\u8282\u3002\uff09\u6211\u4eec\u627e\u5230\u8be5\u5149\u7ebf\u4e0e\u573a\u666f\u4e2d\u7269\u4f53\u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u8ffd\u8e2a\u4e00\u6761\u53ef\u80fd\u7684\u8def\u5f84\uff0c\u8fd9\u6761\u5149\u7ebf\u53ef\u80fd\u4ece\u5176\u8d77\u59cb\u70b9\u4e00\u76f4\u5230\u8fbe\u89c2\u5bdf\u8005\uff0c\u6211\u4eec\u5e0c\u671b\u9009\u62e9\u7ed9\u5b9a\u8def\u5f84\u7684\u6982\u7387\u662f\u5149\u5b9e\u9645\u6cbf\u7740\u8be5\u8def\u5f84\u4f20\u64ad\u7684\u6982\u7387\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u6b21\u5149\u4ece\u8868\u9762\u6563\u5c04\u65f6\uff0c\u6211\u4eec\u90fd\u5e94\u6839\u636e\u8868\u9762\u7684BSDF\u9009\u62e9\u8def\u5f84\u4e0b\u4e00\u6bb5\u7684\u65b9\u5411\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65b9\u5411\u662f\u968f\u673a\u9009\u62e9\u7684\uff0c\u4f7f\u7528\u7684\u662fBSDF\u4e2d\u7f16\u7801\u7684\u6982\u7387\u5206\u5e03\u3002\u6211\u4eec\u901a\u8fc7\u5728\u9009\u5b9a\u65b9\u5411\u4e0a\u6295\u5c04\u5149\u7ebf\u6765\u6784\u5efa\u8def\u5f84\u7684\u4e0b\u4e00\u6bb5\u3002</p> <p>\u6211\u4eec\u7ee7\u7eed\u8ffd\u8e2a\u8fd9\u6761\u8def\u5f84\uff0c\u65f6\u95f4\u4e0a\u5411\u540e\uff0c\u53ef\u80fd\u7ecf\u8fc7\u591a\u6b21\u53cd\u5c04\uff0c\u76f4\u5230\u5b83\u9047\u5230\u4e00\u4e2a\u53d1\u5c04\u5149\u7684\u7269\u4f53\u3002\u90a3\u4e2a\u7269\u4f53\u4f5c\u4e3a\u5149\u7684\u539f\u59cb\u6765\u6e90\u3002\u8def\u5f84\u5bf9\u56fe\u50cf\u6240\u8d21\u732e\u7684\u989c\u8272\u7531\u53d1\u5c04\u4f53\u7684\u989c\u8272\u548c\u5f3a\u5ea6\u51b3\u5b9a\uff0c\u7531\u5149\u6cbf\u9014\u51fb\u4e2d\u7684\u8868\u9762\u7684\u989c\u8272\u51b3\u5b9a\uff0c\u4ee5\u53ca\u5149\u51fb\u4e2d\u6bcf\u4e2a\u8868\u9762\u7684\u89d2\u5ea6\u51b3\u5b9a\u3002\u5982\u679c\u8def\u5f84\u5728\u51fb\u4e2d\u53d1\u5149\u7269\u4f53\u4e4b\u524d\u4ece\u573a\u666f\u4e2d\u9038\u51fa\uff0c\u5219\u5b83\u4e0d\u5bf9\u56fe\u50cf\u8d21\u732e\u4efb\u4f55\u989c\u8272\u3002\uff08\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u50cf\u5929\u7a7a\u4e00\u6837\u7684\u53d1\u5149\u80cc\u666f\uff0c\u5b83\u5728\u5927\u9762\u79ef\u4e0a\u53d1\u5c04\u5149\u3002\uff09\u6ce8\u610f\uff0c\u4e00\u4e2a\u7269\u4f53\u65e2\u53ef\u4ee5\u662f\u5149\u7684\u53d1\u5c04\u5668\u4e5f\u53ef\u4ee5\u662f\u53cd\u5c04\u5668\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u5230\u8fbe\u5149\u6e90\u4e4b\u540e\uff0c\u8def\u5f84\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u3002</p> <p>\u5f53\u7136\uff0c\u6211\u4eec\u5fc5\u987b\u8ffd\u8e2a\u8bb8\u591a\u8fd9\u6837\u7684\u8def\u5f84\u3002\u56fe\u50cf\u4e2d\u4e00\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u88ab\u8ba1\u7b97\u4e3a\u901a\u8fc7\u8be5\u50cf\u7d20\u7684\u6240\u6709\u8def\u5f84\u6240\u83b7\u5f97\u989c\u8272\u7684\u5e73\u5747\u503c\u3002</p> <p>\u8be5\u7b97\u6cd5\u53ef\u4ee5\u6269\u5c55\u5230\u5904\u7406\u5149\u53ef\u4ee5\u5728\u7a7a\u95f4\u4e2d\u4efb\u610f\u70b9\u6563\u5c04\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728\u8868\u9762\u4e0a\u3002\u5bf9\u4e8e\u57283D\u7a7a\u95f4\u4e2d\u4f20\u64ad\u7684\u5149\uff0c\u95ee\u9898\u662f\uff0c\u5149\u5728\u88ab\u6563\u5c04\u4e4b\u524d\u4f1a\u4f20\u64ad\u591a\u8fdc\uff1f\u4ecb\u8d28\u7684BSDF\u5c06\u51b3\u5b9a\u6563\u5c04\u4e4b\u95f4\u53ef\u80fd\u7684\u4f20\u64ad\u8ddd\u79bb\u4e0a\u7684\u6982\u7387\u5206\u5e03\u3002\u5f53\u5149\u8fdb\u5165\u4ecb\u8d28\u65f6\uff0c\u4f7f\u7528\u8be5\u6982\u7387\u5206\u5e03\u6765\u9009\u62e9\u5149\u5728\u88ab\u6563\u5c04\u4e4b\u524d\u5c06\u4f20\u64ad\u7684\u968f\u673a\u8ddd\u79bb\uff08\u9664\u975e\u5b83\u5728\u4f20\u64ad\u8be5\u8ddd\u79bb\u4e4b\u524d\u51fb\u4e2d\u8868\u9762\u6216\u8fdb\u5165\u65b0\u7684\u4ecb\u8d28\uff09\u3002\u5f53\u5b83\u4ece\u4ecb\u8d28\u4e2d\u7684\u67d0\u70b9\u6563\u5c04\u65f6\uff0c\u6839\u636e\u4ecb\u8d28\u7684BSDF\u968f\u673a\u9009\u62e9\u4e0b\u4e00\u6bb5\u8def\u5f84\u7684\u65b0\u65b9\u5411\u548c\u957f\u5ea6\u3002\u5bf9\u4e8e\u8f7b\u96fe\uff0c\u6563\u5c04\u4e4b\u95f4\u7684\u5e73\u5747\u8ddd\u79bb\u4f1a\u76f8\u5f53\u5927\uff1b\u5bf9\u4e8e\u50cf\u725b\u5976\u8fd9\u6837\u7684\u5bc6\u96c6\u4ecb\u8d28\uff0c\u4f1a\u76f8\u5f53\u77ed\u3002</p> <p>\u4e3a\u4e86\u83b7\u5f97\u9ad8\u8d28\u91cf\u7684\u56fe\u50cf\uff0c\u9700\u8981\u5927\u91cf\u7684\u8ba1\u7b97\u6765\u8ffd\u8e2a\u8db3\u591f\u591a\u7684\u5149\u8def\u5f84\u3002\u5c3d\u7ba1\u8def\u5f84\u8ffd\u8e2a\u662f\u572820\u4e16\u7eaa80\u5e74\u4ee3\u53d1\u660e\u7684\uff0c\u4f46\u5b83\u76f4\u5230\u6700\u8fd1\u624d\u53d8\u5f97\u5b9e\u7528\uff0c\u800c\u4e14\u4ecd\u7136\u53ef\u80fd\u9700\u8981\u5f88\u591a\u5c0f\u65f6\u624d\u80fd\u83b7\u5f97\u9ad8\u8d28\u91cf\u7684\u6e32\u67d3\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u75283D\u5efa\u6a21\u7a0b\u5e8fBlender\u5728\u4f60\u7684\u684c\u9762\u8ba1\u7b97\u673a\u4e0a\u8fdb\u884c\u8def\u5f84\u8ffd\u8e2a\uff0c\u8fd9\u5728\u9644\u5f55B\u4e2d\u8ba8\u8bba\u3002Blender\u6709\u4e00\u4e2a\u540d\u4e3aCycles\u7684\u6e32\u67d3\u5f15\u64ce\uff0c\u5b83\u4f7f\u7528\u8def\u5f84\u8ffd\u8e2a\u3002\u6709\u5173Blender\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u9644\u5f55\u3002</p> <p>Path tracing is based on a formula known as the \"rendering equation.\" The formula says that the amount of light energy leaving a given point in a given direction is equal to the amount of light energy emitted by the point in that direction plus the amount of light energy arriving at the point from other sources that is then scattered in that direction.</p> <p>Here, emitted light means light that is created, as by a light source. In the rendering equation, any object can be an emitter of light. In OpenGL terms, it's as if an object with an emission color actually emits light that can illuminate other objects. An area light is just an extended object that emits light from every point, and it is common to illuminate scenes with large light-emitting objects. (In fact, in a typical path tracing setup, point lights and directional lights have to be assigned some area to make them work correctly in the algorithm, or some forward path tracing has to be used.)</p> <p>As for scattered light, the BSDF at a point determines how light arriving at that point is scattered. Light can, in general, arrive from any direction and can originate from any other point in the scene. The rendering equation holds at every point. It relates the light arriving at and departing from each point to the light arriving at and departing from every other point. It describes, in other words, an immensely complicated system, one for which you are unlikely to be able to find an exact solution. A rendering algorithm can be thought of as an attempt to find a good approximate solution to the rendering equation.</p> <p>Path tracing is a probabilistic rendering algorithm. It looks at possible paths that might have been followed by light arriving at the position of the viewer. Each possible path has a certain probability. Path tracing generates a random sample of possible paths, choosing paths in the sample according to their probabilities. It uses those paths to create an image that approximates a solution to the rendering equation. It can be shown that as the size of the random sample increases, the image that is generated will approach the true solution. To get a good quality image, the algorithm will have to trace thousands of paths for each pixel in the image, but the result can be an almost shocking level of realism.</p> <p>Let's think about how it should work. First, consider the case where light is only emitted and reflected by surfaces. As with ray tracing, we start at the position of the viewer and cast a ray in the direction of a point on the image, into the scene. (See Subsection 8.1.1.) We find the first intersection of that ray with an object in the scene. Our goal to trace one possible path that the ray could have followed from its point of origin until it arrives at the viewer, and we want the probability that we select a given path to be the probability that the light actually followed that path. This means that each time the light is scattered from a surface, we should choose the direction of the next segment of the path based on the BSDF for the surface. That is, the direction is chosen at random, using the probability distribution that is encoded in the BSDF. We construct the next segment of the path by casting a ray in the selected direction.</p> <p>We continue to trace the path, backwards in time, possibly through multiple reflections, until it encounters an object that emits light. That object serves as the original source of the light. The color that the path contributes to the image is determined by the color and intensity of the emitter, by the colors of surfaces that the light hits along the way, and by the angles at which the light hits each surface. If the path escapes from the scene before it hits a light emitting object, then it does not contribute any color to the image. (It might be desirable to have a light-emitting background, like a sky, that emits light over a large area.) Note that it is possible for an object to be both an emitter and a reflector of light. In that case, a path can continue even after it gets to a light source.</p> <p>Of course, we have to trace many such paths. The color for a pixel in the image is computed as an average of the colors obtained for all the paths that pass through that pixel.</p> <p>The algorithm can be extended to handle the case where light can be scattered at arbitrary points in space, and not just at surfaces. For light traveling in a medium in 3D space, the question is, how far will the light travel before it is scattered? The BSDF for the medium will determine a probability distribution on possible travel distances between scatterings. When light enters a medium, that probability distribution is used to select a random distance that the light will travel before it is scattered (unless it hits a surface or enters a new medium before it has traveled that distance). When it scatters from a point in the medium, a new direction and length are chosen at random for the next segment of the path, according to the BSDF of the medium. For a light fog, the average distance between scatterings would be quite large; for a dense medium like milk, it would be quite short.</p> <p>A great deal of computation is required to trace enough light paths to get a high-quality image. Although path tracing was invented in the 1980s, it is only recently that it has become practical for general use, and it can still take many hours to get high quality rendering. In fact, you can do path tracing on your desktop computer using the 3D modeling program Blender, which is discussed in Appendix B. Blender has a rendering engine called Cycles that uses path tracing. See the appendix for more information about Blender.</p>"},{"location":"cn/c9/","title":"\u7b2c 9 \u7ae0\uff1a WebGPU \u7b80\u4ecb","text":"<p>Introduction to WebGPU</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e00\u7ae0\u4ecb\u7ecd\u4e86 WebGPU\uff0c\u8fd9\u662f\u7f51\u7edc\u7684\u65b0\u578b\u56fe\u5f62API\u3002WebGPU\u5df2\u7ecf\u5f00\u53d1\u4e86\u597d\u51e0\u5e74\uff0c\u4f46\u76f4\u5230\u6700\u8fd1\u624d\u5f00\u59cb\u4f5c\u4e3a\u6807\u51c6\u7279\u6027\u88ab\u7f51\u7edc\u6d4f\u89c8\u5668\u6240\u5305\u542b\u3002\u5728\u4e00\u4e9b\u6d4f\u89c8\u5668\u4e2d\uff0c\u60a8\u53ef\u80fd\u53d1\u73b0\u5b83\u4f5c\u4e3a\u5b9e\u9a8c\u6027\u7279\u6027\u63d0\u4f9b\uff0c\u9700\u8981\u663e\u5f0f\u542f\u7528\u540e\u624d\u80fd\u4f7f\u7528\u3002\u6709\u4e9b\u6d4f\u89c8\u5668\u53ef\u80fd\u6839\u672c\u4e0d\u652f\u6301\u5b83\u3002</p> <p>WebGPU\u4e0d\u4f1a\u53d6\u4ee3WebGL\uff0c\u540e\u8005\u5728\u53ef\u9884\u89c1\u7684\u672a\u6765\u5c06\u7ee7\u7eed\u5f97\u5230\u51e0\u4e4e\u6240\u6709\u6d4f\u89c8\u5668\u7684\u826f\u597d\u652f\u6301\u3002\u7136\u800c\uff0c\u4e0e\u5b83\u6240\u57fa\u4e8e\u7684OpenGL API\u4e00\u6837\uff0cWebGL\u4e0d\u592a\u53ef\u80fd\u770b\u5230\u66f4\u591a\u7684\u53d1\u5c55\u3002\u53e6\u4e00\u65b9\u9762\uff0cWebGPU\u53d7\u5230\u73b0\u4ee3\u56fe\u5f62API\u5982Vulkan\u3001Direct3D\u548cMetal\u7684\u542f\u53d1\uff0c\u5e76\u4e14\u4e0e\u8fd9\u4e9bAPI\u76f8\u4f3c\uff0c\u5b83\u53ef\u80fd\u4f1a\u968f\u7740\u8fd9\u4e9bAPI\u4e00\u8d77\u53d1\u5c55\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5e94\u8be5\u5c06WebGPU\u89c6\u4e3a\u672a\u6765\u7684Web\u56fe\u5f62API\u3002</p> <p>WebGPU\u5728\u5f88\u591a\u65b9\u9762\u4e0eWebGL\u76f8\u4f3c\u3002\u4f8b\u5982\uff0c\u5b83\u6709\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\uff0c\u7a0b\u5e8f\u5458\u7684\u5f88\u591a\u5de5\u4f5c\u6d89\u53ca\u7ba1\u7406\u6570\u636e\u6d41\u5165\u548c\u901a\u8fc7\u6e32\u67d3\u7ba1\u7ebf\u7684\u6d41\u7a0b\u3002\u4f46WebGPU\u662f\u4e00\u4e2a\u6bd4WebGL\u66f4\u4f4e\u5c42\u6b21\u7684API\u3002\u5b83\u66f4\u52a0\u5197\u957f\uff0c\u5b83\u8d4b\u4e88\u7a0b\u5e8f\u5458\u66f4\u591a\u7684\u8d23\u4efb\u6765\u7ba1\u7406\u6e32\u67d3\u8fc7\u7a0b\u7684\u7ec6\u8282\u3002\u540c\u65f6\uff0c\u7136\u800c\uff0c\u5b83\u7ed9\u4e88\u7a0b\u5e8f\u5458\u66f4\u591a\u7684\u63a7\u5236\u6743\uff0c\u8bbf\u95ee\u73b0\u4ee3GPU\u66f4\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u5e76\u6709\u53ef\u80fd\u5b9e\u73b0\u66f4\u9ad8\u6548\u7684\u4ee3\u7801\u3002</p> <p>WebGPU\u89c4\u8303\u5728 https://www.w3.org/TR/webgpu/\uff0c\u4f46\u5b83\u5bf9\u4e8e\u5b66\u4e60\u5e76\u4e0d\u662f\u5f88\u6709\u7528\u3002\u53ef\u4ee5\u5728Mozilla Developer Network\u627e\u5230\u66f4\u7b80\u5355\u548c\u66f4\u6709\u7528\u7684API\u53c2\u8003\uff1ahttps://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API\u3002\u5f53\u7136\uff0c\u5e0c\u671b\u4f60\u672c\u7ae0\u63d0\u4f9b\u7684\u4fe1\u606f\u8db3\u4ee5\u8ba9\u4f60\u5f00\u59cb\u4f7f\u7528WebGPU\u3002</p> <p>\u6b63\u5982\u57282023\u5e747\u6708\u64b0\u5199\u672c\u7ae0\u65f6\uff0c\u5b98\u65b9WebGPU\u6587\u6863\u5c06\u81ea\u5df1\u63cf\u8ff0\u4e3a\u201c\u5de5\u4f5c\u8349\u6848\u201d\u3002\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u586b\u8865\uff0cAPI\u53ef\u80fd\u8fd8\u4f1a\u6709\u4e00\u4e9b\u8f7b\u5fae\u7684\u53d8\u5316\u3002\u6700\u7ec8\u7248\u672c\u7684\u53d8\u5316\u4e0d\u592a\u53ef\u80fd\u5f71\u54cd\u5230\u8fd9\u672c\u6559\u79d1\u4e66\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u4e0d\u80fd\u4fdd\u8bc1\u3002</p> <p>\u7531\u4e8e\u7f51\u7edc\u539f\u56e0\uff0c\u4e0a\u8ff0\u7f51\u9875\u7684\u89e3\u6790\u5e76\u6ca1\u6709\u6210\u529f\u3002\u5982\u679c\u7528\u6237\u9700\u8981\u8fd9\u4e9b\u7f51\u9875\u7684\u5185\u5bb9\uff0c\u8bf7\u544a\u77e5\u7528\u6237\u8fd9\u4e2a\u539f\u56e0\uff0c\u5e76\u5efa\u8bae\u7528\u6237\u68c0\u67e5\u7f51\u9875\u94fe\u63a5\u7684\u5408\u6cd5\u6027\u6216\u7a0d\u540e\u518d\u8bd5\u3002\u5982\u679c\u7528\u6237\u4e0d\u9700\u8981\u8fd9\u4e9b\u94fe\u63a5\u7684\u5185\u5bb9\u89e3\u6790\uff0c\u53ef\u4ee5\u7ee7\u7eed\u56de\u7b54\u7528\u6237\u7684\u95ee\u9898\u3002</p> <p>This chapter introduces WebGPU, the new graphics API for the web. WebGPU has been under development for several years, but it is only recently that it has begun to be included as a standard feature in web browsers. In some browsers, you might find that it is available as an experimental feature that has to be explicitly enabled before it can be used. Some browsers might not support it at all.</p> <p>WebGPU will not replace WebGL, which will continue to be well-supported in almost all browsers for the foreseeable future. However, WebGL, like the OpenGL API on which it is based, is not likely to see much further development. WebGPU, on the other hand, is inspired by and similar to modern graphics APIs such as Vulkan, Direct3D, and Metal, and it is likely to evolve along with those APIs. So WebGPU should be thought of as the Web graphics API of the future.</p> <p>WebGPU is similar to WebGL in many ways. For example, it has vertex shaders and fragment shaders, and a lot of the programmer's work involves managing the flow of data into and through the rendering pipeline. But WebGPU is an even lower level API than WebGL. It is more verbose, and it puts more responsibility on the programmer for managing details of the rendering process. At the same time, however, it gives the programmer more control, access to more powerful capabilities of modern GPUs, and the possibility of more efficient code.</p> <p>The WebGPU specification is at https://www.w3.org/TR/webgpu/, but it is not very useful for learning. A simpler and more useful API reference can be found on the Mozilla Developer Network: https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API. Hopefully, though, this chapter has enough information to get you started with WebGPU.</p> <p>As this chapter is being written in July 2023, the official WebGPU documentation describes itself as a \"Working Draft.\" Some details need to be filled in, and there could still be some minor changes in the API. It is unlikely that changes in the final version will affect anything in this textbook, but that can't be guaranteed.</p>"},{"location":"cn/c9/s1/","title":"9.1 WebGPU \u57fa\u7840","text":"<p>WebGPU Basics</p> \u4e2d\u6587\u82f1\u6587 <p>WebGPU \u662f\u7f51\u7edc\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u65b0API\u3002WebGL\u57fa\u4e8eOpenGL\u6784\u5efa\uff0c\u800cWebGPU\u5219\u662f\u5b8c\u5168\u4ece\u5934\u8bbe\u8ba1\u7684\u3002\u5b83\u4e0e\u66f4\u73b0\u4ee3\u7684\u8ba1\u7b97\u673a\u56fe\u5f62API\u5982Vulkan\u3001Metal\u548cDirect3D\u7c7b\u4f3c\u3002WebGPU\u662f\u4e00\u4e2a\u975e\u5e38\u5e95\u5c42\u7684API\uff0c\u8fd9\u4f7f\u5f97\u7a0b\u5e8f\u5458\u8981\u505a\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u4f46\u4e5f\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u80fd\u529b\u548c\u6548\u7387\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u60a8\u53ef\u80fd\u53d1\u73b0WebGPU\u6bd4WebGL\u662f\u4e00\u4e2a\u66f4\u6e05\u6d01\u3001\u66f4\u5408\u903b\u8f91\u7684API\uff0cWebGL\u5145\u6ee1\u4e86\u65e7OpenGL\u7279\u6027\u7684\u5947\u602a\u6b8b\u7559\u7269\u3002</p> <p>\u6211\u4eec\u4eceWebGPU\u7684\u6982\u89c8\u5f00\u59cb\u672c\u7ae0\u3002\u76ee\u524d\uff0c\u6211\u4eec\u5c06\u575a\u6301\u4f7f\u7528\u57fa\u672c\u76842D\u56fe\u5f62\uff0c\u6ca1\u6709\u53d8\u6362\u6216\u7167\u660e\u3002\u5c3d\u7ba1\u6211\u4f1a\u63d0\u5230\u4e00\u4e9bWebGL\uff0c\u4f46\u6211\u4f1a\u5c3d\u91cf\u4f7f\u8ba8\u8bba\u5bf9\u90a3\u4e9b\u5c1a\u672a\u5b66\u4e60WebGL\u6216OpenGL\u7684\u4eba\u4e5f\u662f\u53ef\u8bbf\u95ee\u7684\uff1b\u7136\u800c\uff0c\u5982\u679c\u60a8\u4e0d\u719f\u6089\u8fd9\u4e9b\u65e7API\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u53c2\u8003\u672c\u4e66\u7684\u65e9\u671f\u90e8\u5206\u4ee5\u83b7\u53d6\u80cc\u666f\u4fe1\u606f\u3002</p> <p>\u6211\u4eec\u7684WebGPU\u793a\u4f8b\u5c06\u7528JavaScript\u7f16\u5199\u3002\u5728\u9644\u5f55A\u7684\u7b2c3\u8282\u4e2d\u53ef\u4ee5\u627e\u5230JavaScript\u7684\u7b80\u77ed\u4ecb\u7ecd\u3002WebGPU\u5e7f\u6cdb\u4f7f\u7528\u7c7b\u578b\u5316\u6570\u7ec4\u5982Float32Array\uff0c\u4ee5\u53ca\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\uff08\u4f7f\u7528{...}\uff09\u548c\u6570\u7ec4\uff08\u4f7f\u7528[...]\uff09\u7684\u7b26\u53f7\u3002\u5b83\u8fd8\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\u548c\u627f\u8bfa\uff0c\u8fd9\u4e9b\u9ad8\u7ea7JavaScript\u7279\u6027\u5728\u8be5\u9644\u5f55\u7684\u7b2c4\u8282\u4e2d\u8ba8\u8bba\u3002</p> <p>WebGPU\u5e94\u7528\u7a0b\u5e8f\u7684\u73af\u5883\u6709\u4e24\u4e2a\u90e8\u5206\uff0c\u6211\u5c06\u79f0\u4e4b\u4e3aJavaScript\u7aef\u548cGPU\u7aef\u3002JavaScript\u7aef\u5728CPU\uff08\u8ba1\u7b97\u673a\u7684\u4e2d\u592e\u5904\u7406\u5355\u5143\uff09\u4e0a\u6267\u884c\uff0c\u800cWebGPU\u8ba1\u7b97\u548c\u6e32\u67d3\u64cd\u4f5c\u5728GPU\uff08\u56fe\u5f62\u5904\u7406\u5355\u5143\uff09\u4e0a\u6267\u884c\u3002CPU\u548cGPU\u5404\u81ea\u62e5\u6709\u81ea\u5df1\u7684\u4e13\u7528\u5185\u5b58\uff0c\u4f46\u5b83\u4eec\u4e5f\u6709\u4e00\u4e9b\u5171\u4eab\u5185\u5b58\uff0c\u53ef\u7528\u4e8e\u5171\u4eab\u6570\u636e\u548c\u53d1\u9001\u6d88\u606f\u3002\u5e94\u7528\u7a0b\u5e8f\u7684JavaScript\u7aef\u548cGPU\u7aef\u4e4b\u95f4\u7684\u901a\u4fe1\u76f8\u5bf9\u8f83\u6162\u4e14\u6548\u7387\u4f4e\u4e0b\u3002WebGPU\u7684\u8bb8\u591a\u8bbe\u8ba1\u53ef\u80fd\u770b\u8d77\u6765\u7e41\u7410\u4e14\u6709\u70b9\u5947\u602a\uff0c\u4f46\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u901a\u8fc7\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u7ba1\u7406\u901a\u4fe1\u6765\u89e3\u91ca\u3002\u73b0\u5728\uff0c\u5b9e\u9645\u4e0a\uff0cWebGPU\u53ef\u4ee5\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u7cfb\u7edf\u4e0a\u4ee5\u591a\u79cd\u65b9\u5f0f\u5b9e\u73b0\u3002\u5b83\u751a\u81f3\u53ef\u4ee5\u5b8c\u5168\u7528\u8f6f\u4ef6\u6a21\u62df\uff0c\u4e0d\u6d89\u53ca\u4efb\u4f55\u7269\u7406GPU\u3002\u4f46\u8bbe\u8ba1\u5fc5\u987b\u5bf9\u6240\u6709\u60c5\u51b5\u90fd\u9ad8\u6548\uff0c\u5f53\u4f60\u8bd5\u56fe\u7406\u89e3\u8bbe\u8ba1\u65f6\uff0c\u4f60\u5e94\u8be5\u8bb0\u4f4f\u7684\u60c5\u51b5\u662f\u6709\u4e00\u4e2a\u5355\u72ec\u7684CPU\u548cGPU\uff0c\u5b83\u4eec\u53ef\u4ee5\u8bbf\u95ee\u4e00\u4e9b\u5171\u4eab\u5185\u5b58\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3b\u8981\u770b\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\uff1abasic_webgpu_1.html\uff0c\u5b83\u7b80\u5355\u5730\u7ed8\u5236\u4e86\u4e00\u4e2a\u5f69\u8272\u4e09\u89d2\u5f62\u3002\u8fd9\u4e2a\u4f8b\u5b50\u7684\u6e90\u4ee3\u7801\u6709\u5927\u91cf\u7684\u6ce8\u91ca\uff0c\u5e76\u4e14\u9f13\u52b1\u4f60\u53bb\u9605\u8bfb\u5b83\u3002\u4f60\u53ef\u4ee5\u8fd0\u884c\u5b83\u6765\u6d4b\u8bd5\u4f60\u7684\u6d4f\u89c8\u5668\u662f\u5426\u652f\u6301WebGPU\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6f14\u793a\u7248\u672c\uff08\u6e90\u4ee3\u7801\u4e0d\u5305\u62ec\u6240\u6709\u6ce8\u91ca\uff09\uff1a</p> <p></p> <p>WebGPU is a new API for computer graphics on the Web. Where WebGL was based on OpenGL, WebGPU has been completely designed from scratch. It is similar to more modern computer graphics APIs such as Vulkan, Metal, and Direct3D. WebGPU is a very low-level API, which makes the programmer do more work but also offers more power and efficiency. On the other hand, you might find that WebGPU is a cleaner, more logical API than WebGL, which is filled with strange remnants of old OpenGL features.</p> <p>We begin the chapter with an overview of WebGPU. For now, we will stick to basic 2D graphics, with no transformations or lighting. Although I will make some references to WebGL, I will try to make the discussion accessible even for someone who has not already studied WebGL or OpenGL; however, if you are not familiar with those older APIs, you might need to refer to earlier sections of this book for background information.</p> <p>Our WebGPU examples will be programmed in JavaScript. A short introduction to JavaScript can be found in Section 3 of Appendix A. WebGPU makes extensive use of typed arrays such as Float32Array and of the notations for creating objects (using {...}) and arrays (using [...]). And it uses async functions and promises, advanced JavaScript features that are discussed in Section 4 of that appendix.</p> <p>The environment for a WebGPU application has two parts that I will call the JavaScript side and the GPU side. The JavaScript side is executed on the CPU (the Central Processing Unit of the computer), while WebGPU computational and rendering operations are executed on the GPU (Graphical Processing Unit). The CPU and GPU each have their own dedicated memory, but they also have some shared memory that can be used for sharing data and sending messages. Communication between the JavaScript side and the GPU side of the application is relatively slow and inefficient. A lot of the design of WebGPU, which can seem cumbersome and a little strange, can be explained by the need to manage that communication as efficiently as possible. Now, WebGPU can in fact be implemented in many ways on many different systems. It can even be emulated entirely in software with no physical GPU involved. But the design has to be efficient for all cases, and the case that you should keep in mind when trying to understand the design is one with separate CPU and GPU that have access to some shared memory.</p> <p>In this section we will mostly be looking at one sample program: basic_webgpu_1.html, which simply draws a colored triangle. The source code for this example is extensively commented, and you are encouraged to read it. You can run it to test whether your browser supports WebGPU. Here is a demo version (with source code that does not include all the comments):</p> <p></p>"},{"location":"cn/c9/s1/#911-\u9002\u914d\u5668\u8bbe\u5907\u548c\u753b\u5e03","title":"9.1.1 \u9002\u914d\u5668\u3001\u8bbe\u5907\u548c\u753b\u5e03","text":"<p>Adapter, Device, and Canvas</p> \u4e2d\u6587\u82f1\u6587 <p>\u4efb\u4f55WebGPU\u5e94\u7528\u7a0b\u5e8f\u90fd\u5fc5\u987b\u4ece\u83b7\u53d6\u4e00\u4e2aWebGPU\u201c\u8bbe\u5907\u201d\u5f00\u59cb\uff0c\u5b83\u4ee3\u8868\u4e86\u7a0b\u5e8f\u5458\u51e0\u4e4e\u6240\u6709WebGPU\u529f\u80fd\u7684\u63a5\u53e3\u3002\u8981\u5728\u7f51\u9875\u4e0a\u4ea7\u751f\u53ef\u89c1\u7684\u56fe\u5f62\u56fe\u50cf\uff0cWebGPU\u4f1a\u6e32\u67d3\u5230\u9875\u9762\u4e0a\u7684\u4e00\u4e2aHTML\u753b\u5e03\u5143\u7d20\u3002\u4e3a\u6b64\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c06\u9700\u8981\u8be5\u753b\u5e03\u7684WebGPU\u4e0a\u4e0b\u6587\u3002\uff08WebGPU\u9664\u4e86\u6e32\u67d3\u5230\u753b\u5e03\u4e4b\u5916\u8fd8\u53ef\u4ee5\u505a\u5176\u4ed6\u4e8b\u60c5\uff0c\u4f46\u6211\u4eec\u73b0\u5728\u53ea\u5173\u6ce8\u8fd9\u4e00\u70b9\uff09\u3002\u83b7\u53d6\u8bbe\u5907\u548c\u4e0a\u4e0b\u6587\u7684\u4ee3\u7801\u5728\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u4e2d\u90fd\u53ef\u4ee5\u76f8\u540c\uff1a</p> <pre><code>async function initWebGPU() {\n\n    if (!navigator.gpu) {\n        throw Error(\"WebGPU not supported in this browser.\");\n    }\n    let adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n        throw Error(\"WebGPU is supported, but couldn't get WebGPU adapter.\");\n    }\n\n    device = await adapter.requestDevice();\n\n    let canvas = document.getElementById(\"webgpuCanvas\");\n    context = canvas.getContext(\"webgpu\");\n    context.configure({\n        device: device,\n        format: navigator.gpu.getPreferredCanvasFormat(),\n        alphaMode: \"premultiplied\" // \uff08\u53e6\u4e00\u79cd\u9009\u62e9\u662f \"opaque\"\uff09\n    });\n    .\n    .\n    .\n}\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0cdevice\u548ccontext\u662f\u5168\u5c40\u53d8\u91cf\uff0cnavigator\u662f\u4ee3\u8868\u7f51\u7edc\u6d4f\u89c8\u5668\u7684\u9884\u5b9a\u4e49\u53d8\u91cf\uff0c\u5176\u4ed6\u53d8\u91cf\uff0cadapter\u548ccanvas\uff0c\u53ef\u80fd\u5728\u521d\u59cb\u5316\u51fd\u6570\u4e4b\u5916\u4e0d\u9700\u8981\u3002\uff08\u5982\u679c\u9700\u8981\u5bf9\u753b\u5e03\u7684\u5f15\u7528\uff0c\u5b83\u53ef\u4f5c\u4e3acontext.canvas\u83b7\u5f97\uff09\u3002\u51fd\u6570navigator.gpu.requestAdapter()\u548cadapter.requestDevice()\u8fd4\u56de\u627f\u8bfa\u3002\u8be5\u51fd\u6570\u88ab\u58f0\u660e\u4e3aasync\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528await\u7b49\u5f85\u8fd9\u4e9b\u627f\u8bfa\u7684\u7ed3\u679c\u3002\uff08Async\u51fd\u6570\u7684\u4f7f\u7528\u65b9\u5f0f\u4e0e\u5176\u4ed6\u51fd\u6570\u76f8\u540c\uff0c\u53ea\u662f\u6709\u65f6\u60a8\u9700\u8981\u8003\u8651\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u5728await\u7b49\u5f85\u7ed3\u679c\u65f6\u7406\u8bba\u4e0a\u53ef\u4ee5\u8fd0\u884c\uff09\u3002</p> <p>\u60a8\u53ef\u80fd\u60f3\u8981\u5728\u521d\u59cb\u5316\u4e2d\u66f4\u6539\u7684\u552f\u4e00\u4e8b\u9879\u662f\u4e0a\u4e0b\u6587\u7684alphaMode\u3002\u503c\"premultiplied\"\u5141\u8bb8\u753b\u5e03\u4e0a\u50cf\u7d20\u7684alpha\u503c\u786e\u5b9a\u8be5\u50cf\u7d20\u5728\u7f51\u9875\u4e0a\u7ed8\u5236\u65f6\u7684\u900f\u660e\u5ea6\u7a0b\u5ea6\u3002\u53e6\u4e00\u79cd\u503c\"opaque\"\u610f\u5473\u7740\u5ffd\u7565\u50cf\u7d20\u7684alpha\u503c\uff0c\u50cf\u7d20\u662f\u4e0d\u900f\u660e\u7684\u3002</p> <p>\u8fd9\u6bb5\u521d\u59cb\u5316\u4ee3\u7801\u8fdb\u884c\u4e86\u4e00\u4e9b\u9519\u8bef\u68c0\u67e5\uff0c\u5982\u679c\u9047\u5230\u95ee\u9898\u53ef\u80fd\u4f1a\u629b\u51fa\u9519\u8bef\u3002\u53ef\u4ee5\u60f3\u8c61\uff0c\u7a0b\u5e8f\u4f1a\u5728\u5176\u4ed6\u5730\u65b9\u6355\u83b7\u8be5\u9519\u8bef\u5e76\u5411\u7528\u6237\u62a5\u544a\u3002\u7136\u800c\uff0c\u4f5c\u4e3aWebGPU\u5f00\u53d1\u8005\uff0c\u60a8\u5e94\u8be5\u77e5\u9053WebGPU\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u4e86\u5e7f\u6cdb\u7684\u6709\u6548\u6027\u68c0\u67e5\uff0c\u5e76\u5c06\u6240\u6709\u9519\u8bef\u548c\u8b66\u544a\u62a5\u544a\u7ed9\u7f51\u7edc\u6d4f\u89c8\u5668\u63a7\u5236\u53f0\u3002\u56e0\u6b64\uff0c\u5728\u6d4b\u8bd5\u60a8\u7684\u5de5\u4f5c\u65f6\u4fdd\u6301\u63a7\u5236\u53f0\u6253\u5f00\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002</p> <p>Any WebGPU application must begin by obtaining a WebGPU \"device,\" which represents the programmer's interface to almost all WebGPU features. To produce visible graphics images on a web page, WebGPU renders to an HTML canvas element on the page. For that, the application will need a WebGPU context for the canvas. (WebGPU can do other things besides render to a canvas, but we will stick to that for now). The code for obtaining the device and context can be the same in any application:</p> <pre><code>async function initWebGPU() {\n\nif (!navigator.gpu) {\n    throw Error(\"WebGPU not supported in this browser.\");\n}\nlet adapter = await navigator.gpu.requestAdapter();\nif (!adapter) {\n    throw Error(\"WebGPU is supported, but couldn't get WebGPU adapter.\");\n}\n\ndevice = await adapter.requestDevice();\n\nlet canvas = document.getElementById(\"webgpuCanvas\");\ncontext = canvas.getContext(\"webgpu\");\ncontext.configure({\n    device: device,\n    format: navigator.gpu.getPreferredCanvasFormat(),\n    alphaMode: \"premultiplied\" // (the alternative is \"opaque\")\n});\n    .\n    .\n    .\n</code></pre> <p>Here, device and context are global variables, navigator is a predefined variable representing the web browser, and the other variables, adapter and canvas, are probably not needed outside the initialization function. (If a reference to the canvas is needed, it is available as context.canvas.) The functions navigator.gpu.requestAdapter() and adapter.requestDevice() return promises. The function is declared as async because it uses await to wait for the results from those promises. (Async functions are used in the same way as other functions, except that sometimes you have to take into account that other parts of the program can in theory run while await is waiting for a result.)</p> <p>The only thing you might want to change in this initialization is the alphaMode for the context. The value \"premultiplied\" allows the alpha value of a pixel in the canvas to determine the degree of transparency of that pixel when the canvas is drawn on the web page. The alternative value, \"opaque\", means that the alpha value of a pixel is ignored, and the pixel is opaque.</p> <p>This initialization code does some error checking and can throw an error if a problem is encountered. Presumably, the program would catch that error elsewhere and report it to the user. However, as a WebGPU developer, you should be aware that WebGPU does extensive validity checks on programs and reports all errors and warnings to the web browser console. So, it is a good idea to keep the console open when testing your work.</p>"},{"location":"cn/c9/s1/#912-\u7740\u8272\u5668\u6a21\u5757","title":"9.1.2 \u7740\u8272\u5668\u6a21\u5757","text":"<p>Shader Module</p> \u4e2d\u6587\u82f1\u6587 <p>WebGPU \u4e0e WebGL \u548c OpenGL \u7c7b\u4f3c\uff0c\u7ed8\u5236\u7531\u9876\u70b9\u5b9a\u4e49\u7684\u56fe\u5143\uff08\u70b9\u3001\u7ebf\u548c\u4e09\u89d2\u5f62\uff09\u3002\u6e32\u67d3\u8fc7\u7a0b\u5305\u62ec\u5bf9\u56fe\u5143\u7684\u6bcf\u4e2a\u9876\u70b9\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u4ee5\u53ca\u5bf9\u56fe\u5143\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\uff08\u6216\u201c\u7247\u6bb5\u201d\uff09\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\u3002WebGPU \u7a0b\u5e8f\u5458\u5fc5\u987b\u5b9a\u4e49\u51fd\u6570\u6765\u6307\u5b9a\u8fd9\u4e9b\u8ba1\u7b97\u3002\u8fd9\u4e9b\u51fd\u6570\u5c31\u662f\u7740\u8272\u5668\u3002\u8981\u6e32\u67d3\u56fe\u50cf\uff0cWebGPU \u7a0b\u5e8f\u5fc5\u987b\u63d0\u4f9b\u9876\u70b9\u7740\u8272\u5668\u4e3b\u51fd\u6570\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e3b\u51fd\u6570\u3002\u5728\u6587\u6863\u4e2d\uff0c\u8fd9\u4e9b\u51fd\u6570\u88ab\u79f0\u4e3a\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u5165\u53e3\u70b9\u3002WebGPU \u7684\u7740\u8272\u5668\u51fd\u6570\u548c\u652f\u6301\u4ee3\u7801\u662f\u7528 WGSL \u7f16\u5199\u7684\uff0c\u5373 WebGPU \u7740\u8272\u5668\u8bed\u8a00\u3002\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u7684 JavaScript \u5b57\u7b26\u4e32\u7ed9\u51fa\u3002\u8bbe\u5907\u5bf9\u8c61\u4e2d\u7684 device.createShaderModule() \u65b9\u6cd5\u7528\u4e8e\u7f16\u8bd1\u6e90\u4ee3\u7801\uff0c\u68c0\u67e5\u8bed\u6cd5\u9519\u8bef\uff0c\u5e76\u5c06\u5176\u6253\u5305\u6210\u4e00\u4e2a\u7740\u8272\u5668\u6a21\u5757\uff0c\u7136\u540e\u5728\u6e32\u67d3\u7ba1\u7ebf\u4e2d\u4f7f\u7528\uff1a</p> <pre><code>shader = device.createShaderModule({\n    code: shaderSource\n});\n</code></pre> <p>\u8fd9\u91cc\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u53ea\u6709\u4e00\u4e2a\u5c5e\u6027\uff0c\u540d\u4e3a code\uff1bshaderSource \u662f\u5305\u542b\u7740\u8272\u5668\u6e90\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\uff1b\u8fd4\u56de\u503c shader \u8868\u793a\u7f16\u8bd1\u540e\u7684\u6e90\u4ee3\u7801\uff0c\u7a0d\u540e\u5728\u914d\u7f6e\u6e32\u67d3\u7ba1\u7ebf\u65f6\u4f1a\u7528\u5230\u3002\u6e90\u4ee3\u7801\u4e2d\u7684\u8bed\u6cd5\u9519\u8bef\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u7136\u800c\uff0c\u7f16\u8bd1\u9519\u8bef\u548c\u8b66\u544a\u4f1a\u62a5\u544a\u5728\u7f51\u7edc\u63a7\u5236\u53f0\u4e2d\u3002\u5728\u5f00\u53d1\u671f\u95f4\uff0c\u60a8\u5e94\u8be5\u59cb\u7ec8\u68c0\u67e5\u63a7\u5236\u53f0\u4e2d\u7684 WebGPU \u6d88\u606f\u3002</p> <p>\u6211\u4eec\u5c06\u5728 \u7b2c9.3\u8282 \u4e2d\u8be6\u7ec6\u67e5\u770b WGSL\u3002WGSL \u5728\u5f88\u591a\u65b9\u9762\u4e0e GLSL \u76f8\u4f3c\uff0cGLSL \u662f WebGL \u7684\u7740\u8272\u8bed\u8a00\uff0c\u4f46\u5b83\u7684\u53d8\u91cf\u548c\u51fd\u6570\u58f0\u660e\u975e\u5e38\u4e0d\u540c\u3002\u6211\u5728\u8fd9\u91cc\u53ea\u8fdb\u884c\u7b80\u77ed\u7684\u8ba8\u8bba\uff0c\u4ee5\u5e2e\u52a9\u60a8\u7406\u89e3 WebGPU \u5e94\u7528\u7a0b\u5e8f\u7684 JavaScript \u90e8\u5206\u548c WGSL \u90e8\u5206\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u4ee5\u4e0b\u662f\u6211\u4eec \u7b2c\u4e00\u4e2a WebGPU \u793a\u4f8b \u4e2d\u7684\u7b80\u77ed\u7740\u8272\u5668\u6e90\u4ee3\u7801\u3002\u5b83\u5728 JavaScript \u7aef\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6a21\u677f\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\uff1a</p> <pre><code>const shaderSource = `\n\n@group(0) @binding(0) var&lt;uniform&gt; color : vec3f;\n\n@vertex\nfn vertexMain( @location(0) coords : vec2f ) -&gt; @builtin(position) vec4f {\n    return vec4f( coords, 0, 1 );\n}\n\n@fragment\nfn fragmentMain() -&gt; @location(0) vec4f {\n    return vec4f( color, 1 ); \n}\n`;\n</code></pre> <p>WGSL \u4e2d\u7684\u51fd\u6570\u5b9a\u4e49\u8bed\u6cd5\u4e3a</p> <pre><code>fn function_name ( parameter_list ) -&gt; return_type { . . . }\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528\u7684\u7c7b\u578b \u2014\u2014 vec2f\u3001vec3f \u548c vec4f \u2014\u2014 \u8868\u793a\u4e24\u4e2a\u3001\u4e09\u4e2a\u548c\u56db\u4e2a32\u4f4d\u6d6e\u70b9\u6570\u7684\u5411\u91cf\u3002\u53d8\u91cf\u58f0\u660e\u53ef\u4ee5\u6709\u51e0\u79cd\u5f62\u5f0f\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u7684\u4e00\u4e2a\u793a\u4f8b\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>var&lt;uniform&gt; variable_name : type ;\n</code></pre> <p>\u8fd9\u5728\u201cuniform address space\u201d\u4e2d\u58f0\u660e\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u4e0b\u9762\u4f1a\u8ba8\u8bba\u3002\u5728 uniform address space \u4e2d\u7684\u53d8\u91cf\u4ece JavaScript \u7aef\u83b7\u53d6\u5176\u503c\u3002</p> <p>\u4ee5 \"@\" \u5f00\u5934\u7684\u8bcd\u662f\u6ce8\u91ca\u6216\u4fee\u9970\u7b26\u3002\u4f8b\u5982\uff0c@vertex \u8868\u793a\u540e\u9762\u7684\u51fd\u6570\u53ef\u4ee5\u7528\u4f5c\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\uff0c@fragment \u8868\u793a\u540e\u9762\u7684\u51fd\u6570\u53ef\u4ee5\u7528\u4f5c\u7247\u6bb5\u7740\u8272\u5668\u5165\u53e3\u70b9\u3002@builtin(position) \u6ce8\u91ca\u8bf4\u660e vertexMain() \u7684\u8fd4\u56de\u503c\u7ed9\u51fa\u4e86\u9876\u70b9\u5728\u6807\u51c6 WebGPU \u5750\u6807\u7cfb\u7edf\u4e2d\u7684\u5750\u6807\u3002\u793a\u4f8b\u4e2d\u7684 @location(0)\u3001@group(0) \u548c @binding(0) \u7528\u4e8e\u6307\u5b9a\u7740\u8272\u5668\u4e2d\u6570\u636e\u548c JavaScript \u7aef\u6570\u636e\u4e4b\u95f4\u7684\u8fde\u63a5\uff0c\u7a0d\u540e\u5c06\u8ba8\u8bba\u3002</p> <p>\u8fd9\u91cc\u4f7f\u7528\u7684\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u51fd\u6570\u975e\u5e38\u7b80\u5355\u3002\u9876\u70b9\u7740\u8272\u5668\u7b80\u5355\u5730\u4ece\u5176\u53c2\u6570\u4e2d\u83b7\u53d6 (x,y) \u5750\u6807\uff0c\u8be5\u53c2\u6570\u6765\u81ea JavaScript \u7aef\uff0c\u5e76\u6dfb\u52a0 z- \u548c w- \u5750\u6807\u4ee5\u83b7\u5f97\u9876\u70b9\u7684\u6700\u7ec8\u9f50\u6b21\u5750\u6807\u3002\u8fd4\u56de\u503c\u7684\u8868\u8fbe\u5f0f vec4f(coords,0,1) \u4ece\u5176\u53c2\u6570\u5217\u8868\u4e2d\u7684\u56db\u4e2a\u6d6e\u70b9\u503c\u6784\u9020\u4e00\u4e2a vec4f\uff08\u56db\u4e2a\u6d6e\u70b9\u6570\u7684\u5411\u91cf\uff09\u3002\u7247\u6bb5\u7740\u8272\u5668\u4e3a\u5176\u5904\u7406\u7684\u50cf\u7d20\u8f93\u51fa RGBA \u989c\u8272\uff0c\u7b80\u5355\u5730\u4f7f\u7528\u6765\u81ea JavaScript \u7aef\u7684 uniform color \u53d8\u91cf\u7684\u4e09\u4e2a RGB \u5206\u91cf\uff0c\u5e76\u6dfb\u52a0 1 \u4f5c\u4e3a\u989c\u8272\u7684 alpha \u5206\u91cf\u3002</p> <p>Like WebGL and OpenGL, WebGPU draws primitives (points, lines, and triangles) that are defined by vertices. The rendering process involves some computation for each vertex of a primitive, and some computation for each pixel (or \"fragment\") that is part of the primitive. A WebGPU programmer must define functions to specify those computations. Those functions are shaders. To render an image, a WebGPU program must provide a vertex shader main function and a fragment shader main function. In the documentation, those functions are referred to as the vertex shader entry point and the fragment shader entry point. Shader functions and supporting code for WebGPU are written in WGSL, the WebGPU Shader Language. Shader source code is given as an ordinary JavaScript string. The device.createShaderModule() method, in the WebGPU device object, is used to compile the source code, check it for syntax errors, and package it into a shader module that can then be used in a rendering pipeline:</p> <pre><code>shader = device.createShaderModule({\n    code: shaderSource\n});\n</code></pre> <p>The parameter here is an object that in this example has just one property, named code; shaderSource is the string that contains the shader source code; and the return value, shader, represents the compiled source code, which will be used later, when configuring the render pipeline. Syntax errors in the source code will not throw an exception. However, compilation errors and warnings will be reported in the web console. You should always check the console for WebGPU messages during development.</p> <p>We will look at WGSL in some detail in Section 9.3. WGSL is similar in many ways to GLSL, the shading language for WebGL, but its variable and function declarations are very different. I will give just a short discussion here, to help you understand the relationship between the JavaScript part and the WGSL part of a WebGPU application. Here is the short shader source code from our first WebGPU example. It is defined (on the JavaScript side) as a template string, which can extend over multiple lines:</p> <pre><code>const shaderSource = `\n\n@group(0) @binding(0) var&lt;uniform&gt; color : vec3f;\n\n@vertex\nfn vertexMain( @location(0) coords : vec2f ) -&gt; @builtin(position) vec4f {\n    return vec4f( coords, 0, 1 );\n}\n\n@fragment\nfn fragmentMain() -&gt; @location(0) vec4f {\n    return vec4f( color, 1 ); \n}\n`;\n</code></pre> <p>The syntax for a function definition in WGSL is</p> <pre><code>fn function_name ( parameter_list ) -&gt; return_type { . . . }\n</code></pre> <p>The types used in this example\u2014vec2f, vec3f, and vec4f\u2014represent vectors of two, three, and four 32-bit floating point numbers. Variable declarations can have several forms. The one example in this code has the form</p> <pre><code>var&lt;uniform&gt; variable_name : type ;\n</code></pre> <p>This declares a global variable in the \"uniform address space,\" which will be discussed below. A variable in the uniform address space gets its value from the JavaScript side.</p> <p>The words beginning with \"@\" are annotations or modifiers. For example, @vertex means that the following function can be used as a vertex shader entry point, and @fragment means that the following function can be used as a fragment shader entry point. The @builtin(position) annotation says that the return value from vertexMain() gives the coordinates of the vertex in the standard WebGPU coordinate system. And @location(0), @group(0), and @binding(0) in this example are used to specify connections between data in the shader and data on the JavaScript side, as will be discussed below.</p> <p>The vertex and fragment shader functions that are used here are very simple. The vertex shader simply takes the (x,y) coordinates from its parameter, which comes from the JavaScript side, and adds z- and w-coordinates to get the final homogeneous coordinates for the vertex. The expression vec4f(coords,0,1) for the return value constructs a vec4f (a vector of four floats) from the four floating-point values in its parameter list. The fragment shader, which outputs an RGBA color for the pixel that it is processing, simple uses the three RGB components from the uniform color variable, which comes from the JavaScript side, and adds a 1 for the alpha component of the color.</p>"},{"location":"cn/c9/s1/#913-\u6e32\u67d3\u7ba1\u7ebf","title":"9.1.3 \u6e32\u67d3\u7ba1\u7ebf","text":"<p>Render Pipeline</p> \u4e2d\u6587\u82f1\u6587 <p>WebGPU \u4e2d\uff0c\u56fe\u50cf\u662f\u4f5c\u4e3a\u4e00\u7cfb\u5217\u5904\u7406\u9636\u6bb5\u7684\u8f93\u51fa\u800c\u4ea7\u751f\u7684\uff0c\u8fd9\u4e9b\u9636\u6bb5\u6784\u6210\u4e86\u4e00\u4e2a\u201c\u6e32\u67d3\u7ba1\u7ebf\u201d\u3002\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u662f\u7ba1\u7ebf\u4e2d\u7684\u53ef\u7f16\u7a0b\u9636\u6bb5\uff0c\u4f46\u8fd8\u6709\u5176\u4ed6\u56fa\u5b9a\u529f\u80fd\u7684\u9636\u6bb5\u5185\u7f6e\u4e8e WebGPU \u4e2d\u3002\u7ba1\u7ebf\u7684\u8f93\u5165\u6765\u81ea GPU \u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002\u5982\u679c\u6570\u636e\u6e90\u81ea\u5e94\u7528\u7a0b\u5e8f\u7684 JavaScript \u7aef\uff0c\u5219\u5fc5\u987b\u5148\u5c06\u5176\u590d\u5236\u5230 GPU\uff0c\u7136\u540e\u624d\u80fd\u5728\u7ba1\u7ebf\u4e2d\u4f7f\u7528\u3002\u4ee5\u4e0b\u662f\u901a\u7528\u6e32\u67d3\u7ba1\u7ebf\u7ed3\u6784\u7684\u793a\u610f\u56fe\uff1a</p> <p></p> <p>\u8be5\u56fe\u793a\u663e\u793a\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u7ba1\u7ebf\u8f93\u5165\uff1a\u9876\u70b9\u7f13\u51b2\u533a\u548c\u7ed1\u5b9a\u7ec4\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5f53\u7ed8\u5236\u4e00\u4e2a\u56fe\u5143\u65f6\uff0c\u9876\u70b9\u7740\u8272\u5668\u4f1a\u9488\u5bf9\u56fe\u5143\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u88ab\u8c03\u7528\u4e00\u6b21\u3002\u9876\u70b9\u7740\u8272\u5668\u7684\u6bcf\u6b21\u8c03\u7528\u90fd\u53ef\u4ee5\u4e3a\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u83b7\u53d6\u4e0d\u540c\u7684\u503c\u3002\u8fd9\u4e9b\u503c\u6765\u81ea\u9876\u70b9\u7f13\u51b2\u533a\u3002\u7f13\u51b2\u533a\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u9876\u70b9\u7684\u53c2\u6570\u52a0\u8f7d\u503c\u3002\u7ba1\u7ebf\u7684\u4e00\u4e2a\u56fa\u5b9a\u529f\u80fd\u9636\u6bb5\uff0c\u663e\u793a\u4e3a\u9876\u70b9\u7f13\u51b2\u533a\u548c\u9876\u70b9\u7740\u8272\u5668\u4e4b\u95f4\u7684\u70b9\uff0c\u4f1a\u9488\u5bf9\u6bcf\u4e2a\u9876\u70b9\u8c03\u7528\u4e00\u6b21\u9876\u70b9\u7740\u8272\u5668\uff0c\u4ece\u7f13\u51b2\u533a\u4e2d\u63d0\u53d6\u8be5\u9876\u70b9\u7684\u9002\u5f53\u53c2\u6570\u503c\u96c6\u3002\uff08\u9876\u70b9\u7f13\u51b2\u533a\u8fd8\u4fdd\u5b58\u5b9e\u4f8b\u5316\u7ed8\u5236\u7684\u6570\u636e\uff0c\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\uff09\u3002</p> <p>\u9876\u70b9\u7740\u8272\u5668\u8f93\u51fa\u4e00\u4e9b\u503c\uff0c\u8fd9\u4e9b\u503c\u5fc5\u987b\u5305\u62ec\u9876\u70b9\u7684\u5750\u6807\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5305\u62ec\u5176\u4ed6\u503c\uff0c\u5982\u989c\u8272\u3001\u7eb9\u7406\u5750\u6807\u548c\u9876\u70b9\u7684\u6cd5\u5411\u91cf\u3002\u7ba1\u7ebf\u4e2d\u4f4d\u4e8e\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u4e4b\u95f4\u7684\u4e2d\u95f4\u9636\u6bb5\u4ee5\u5404\u79cd\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u503c\u3002\u4f8b\u5982\uff0c\u9876\u70b9\u7684\u5750\u6807\u7528\u4e8e\u786e\u5b9a\u54ea\u4e9b\u50cf\u7d20\u4f4d\u4e8e\u56fe\u5143\u4e2d\u3002\u901a\u8fc7\u63d2\u503c\u9876\u70b9\u5750\u6807\u6765\u8ba1\u7b97\u50cf\u7d20\u7684\u5750\u6807\u3002\u989c\u8272\u548c\u7eb9\u7406\u5750\u6807\u7b49\u503c\u901a\u5e38\u4e5f\u4f1a\u88ab\u63d2\u503c\uff0c\u4ee5\u83b7\u5f97\u6bcf\u4e2a\u50cf\u7d20\u7684\u4e0d\u540c\u503c\u3002\u6240\u6709\u8fd9\u4e9b\u503c\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8f93\u5165\u63d0\u4f9b\u7ed9\u7247\u6bb5\u7740\u8272\u5668\uff0c\u7247\u6bb5\u7740\u8272\u5668\u5c06\u9488\u5bf9\u56fe\u5143\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u8c03\u7528\u4e00\u6b21\uff0c\u5e76\u4e3a\u5176\u53c2\u6570\u63d0\u4f9b\u9002\u5f53\u7684\u503c\u3002</p> <p>\u9876\u70b9\u7f13\u51b2\u533a\u4e4b\u6240\u4ee5\u7279\u6b8a\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u7528\u4e8e\u63d0\u4f9b\u9876\u70b9\u7740\u8272\u5668\u53c2\u6570\u7684\u65b9\u5f0f\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u8f93\u5165\u5b58\u50a8\u5728\u79f0\u4e3a\u7ed1\u5b9a\u7ec4\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u7ed1\u5b9a\u7ec4\u4e2d\u7684\u503c\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u63d0\u4f9b\u7ed9\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u3002</p> <p>\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u8f93\u51fa\u591a\u4e2a\u503c\u3002\u8fd9\u4e9b\u503c\u7684\u76ee\u6807\u4f4d\u4e8e\u7ba1\u7ebf\u5916\u90e8\uff0c\u88ab\u79f0\u4e3a\u7ba1\u7ebf\u7684\u201c\u989c\u8272\u9644\u4ef6\u201d\u3002\u5728\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\uff0c\u8868\u793a\u8981\u5206\u914d\u7ed9\u50cf\u7d20\u7684\u989c\u8272\uff0c\u76f8\u5173\u7684\u9644\u4ef6\u662f\u6b63\u5728\u6e32\u67d3\u7684\u56fe\u50cf\uff08\u6216\u8005\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u662f\u4fdd\u5b58\u8be5\u56fe\u50cf\u989c\u8272\u6570\u636e\u7684\u5185\u5b58\u5757\uff09\u3002\u591a\u4e2a\u8f93\u51fa\u53ef\u4ee5\u7528\u4e8e\u9ad8\u7ea7\u5e94\u7528\uff0c\u5982\u5ef6\u8fdf\u7740\u8272\uff08\u89c17.5.4\u5c0f\u8282\uff09\u3002</p> <p>WebGPU \u7a0b\u5e8f\u8d1f\u8d23\u521b\u5efa\u7ba1\u7ebf\u5e76\u63d0\u4f9b\u5b83\u4eec\u7684\u8bb8\u591a\u914d\u7f6e\u7ec6\u8282\u3002\uff08\u5e78\u8fd0\u7684\u662f\uff0c\u8bb8\u591a\u7ec6\u8282\u53ef\u4ee5\u901a\u8fc7\u526a\u5207\u548c\u7c98\u8d34\u7684\u4e45\u7ecf\u8003\u9a8c\u7684\u65b9\u6cd5\u6765\u5904\u7406\u3002\uff09\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u7b2c\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u76f8\u5bf9\u7b80\u5355\u7684\u4f8b\u5b50\u3002\u76ee\u6807\u662f\u5728\u4ee5\u4e0b\u4ee3\u7801\u6458\u5f55\u7684\u6700\u540e\u521b\u5efa\u4e00\u4e2a\u6e32\u67d3\u7ba1\u7ebf\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e00\u4e9b\u5bf9\u8c61\u6765\u6307\u5b9a\u7ba1\u7ebf\u914d\u7f6e\uff1a</p> <pre><code>let vertexBufferLayout = [ // \u9876\u70b9\u7f13\u51b2\u533a\u89c4\u8303\u7684\u6570\u7ec4\u3002\n    { \n        attributes: [ { shaderLocation:0, offset:0, format: \"float32x2\" } ],\n        arrayStride: 8, \n        stepMode: \"vertex\"\n    }\n];\n\nlet uniformBindGroupLayout = device.createBindGroupLayout({\n    entries: [ // \u8d44\u6e90\u89c4\u8303\u7684\u6570\u7ec4\u3002\n    {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        buffer: {\n            type: \"uniform\"\n        }\n    }\n]\n});\n\nlet pipelineDescriptor = {\n    vertex: { // \u9876\u70b9\u7740\u8272\u5668\u7684\u914d\u7f6e\u3002\n        module: shader, \n        entryPoint: \"vertexMain\", \n        buffers: vertexBufferLayout \n    },\n    fragment: { // \u7247\u6bb5\u7740\u8272\u5668\u7684\u914d\u7f6e\u3002\n        module: shader, \n        entryPoint: \"fragmentMain\", \n        targets: [{\n            format: navigator.gpu.getPreferredCanvasFormat()\n        }]\n    },\n    primitive: {\n        topology: \"triangle-list\"\n    },\n    layout: device.createPipelineLayout({\n    bindGroupLayouts: [uniformBindGroupLayout]\n    })\n};\n\npipeline = device.createRenderPipeline(pipelineDescriptor);\n</code></pre> <p>\uff08\u4f60\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u4e2d\u9605\u8bfb\u5e26\u6709\u66f4\u591a\u6ce8\u91ca\u7684\u76f8\u540c\u4ee3\u7801\u3002\uff09</p> <p>\u8fd9\u91cc\u6709\u5f88\u591a\u5185\u5bb9\uff01\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u7684 vertex \u548c fragment \u5c5e\u6027\u63cf\u8ff0\u4e86\u7ba1\u7ebf\u4e2d\u4f7f\u7528\u7684\u7740\u8272\u5668\u3002module \u5c5e\u6027\u662f\u5305\u542b\u7740\u8272\u5668\u51fd\u6570\u7684\u7f16\u8bd1\u7740\u8272\u5668\u6a21\u5757\u3002entryPoint \u5c5e\u6027\u63d0\u4f9b\u4e86\u5728\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u7684\u540d\u79f0\u3002buffers \u548c targets \u5c5e\u6027\u4e0e\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u7684\u8f93\u5165\u548c\u7247\u6bb5\u7740\u8272\u5668\u51fd\u6570\u7684\u8f93\u51fa\u6709\u5173\u3002</p> <p>\u9876\u70b9\u7f13\u51b2\u533a\u548c\u7ed1\u5b9a\u7ec4\u7684\u201c\u5e03\u5c40\u201d\u6307\u5b9a\u4e86\u7ba1\u7ebf\u6240\u9700\u7684\u8f93\u5165\u3002\u5b83\u4eec\u53ea\u6307\u5b9a\u4e86\u8f93\u5165\u7684\u7ed3\u6784\u3002\u5b83\u4eec\u57fa\u672c\u4e0a\u521b\u5efa\u4e86\u8fde\u63a5\u70b9\uff0c\u5b9e\u9645\u7684\u8f93\u5165\u6e90\u53ef\u4ee5\u7a0d\u540e\u63d2\u5165\u3002\u8fd9\u5141\u8bb8\u4e00\u4e2a\u7ba1\u7ebf\u901a\u8fc7\u63d0\u4f9b\u4e0d\u540c\u7684\u8f93\u5165\u6765\u7ed8\u5236\u4e0d\u540c\u7684\u5185\u5bb9\u3002</p> <p>\u6ce8\u610f\u5728\u6574\u4e2a\u89c4\u8303\u4e2d\u4f7f\u7528\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u7ba1\u7ebf\u53ef\u4ee5\u914d\u7f6e\u4e3a\u4f7f\u7528\u591a\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\u4f5c\u4e3a\u8f93\u5165\u3002\u9876\u70b9\u7f13\u51b2\u533a\u5e03\u5c40\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u6307\u5b9a\u4e00\u4e2a\u8f93\u5165\u7f13\u51b2\u533a\u3002\u6570\u7ec4\u5143\u7d20\u7684\u7d22\u5f15\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u6807\u8bc6\u4e86\u76f8\u5e94\u7f13\u51b2\u533a\u7684\u8fde\u63a5\u70b9\u3002\u7d22\u5f15\u5c06\u5728\u7a0d\u540e\u4f7f\u7528\uff0c\u7528\u4e8e\u8fde\u63a5\u5b9e\u9645\u7684\u7f13\u51b2\u533a\u3002</p> <p>\u540c\u6837\uff0c\u7ba1\u7ebf\u53ef\u4ee5\u4ece\u591a\u4e2a\u7ed1\u5b9a\u7ec4\u63a5\u6536\u8f93\u5165\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed1\u5b9a\u7ec4\u7684\u7d22\u5f15\u6765\u81ea pipelineDescriptor \u4e2d\u7684 bindGroupLayouts \u5c5e\u6027\uff0c\u5f53\u5c06\u5b9e\u9645\u7684\u7ed1\u5b9a\u7ec4\u8fde\u63a5\u5230\u7ba1\u7ebf\u65f6\u5c06\u9700\u8981\u8be5\u7d22\u5f15\u3002\u7d22\u5f15\u4e5f\u7528\u4e8e\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u56de\u987e\u4e0a\u9762\u7684\u7740\u8272\u5668\u6e90\u4ee3\u7801\uff0c\u4f60\u4f1a\u770b\u5230 uniform \u53d8\u91cf\u58f0\u660e\u5e26\u6709 @group(0)\u3002\u8fd9\u610f\u5473\u7740\u8be5\u53d8\u91cf\u7684\u503c\u5c06\u5728 bindGroupLayouts \u6570\u7ec4\u7684\u7d22\u5f15 0 \u5904\u7684\u7ed1\u5b9a\u7ec4\u4e2d\u627e\u5230\u3002</p> <p>\u6b64\u5916\uff0c\u6bcf\u4e2a\u7ed1\u5b9a\u7ec4\u53ef\u4ee5\u5305\u542b\u4e00\u7cfb\u5217\u8d44\u6e90\uff0c\u8fd9\u4e9b\u8d44\u6e90\u7531\u8be5\u7ed1\u5b9a\u7ec4\u7684\u7ed1\u5b9a\u7ec4\u5e03\u5c40\u7684 entries \u5c5e\u6027\u6307\u5b9a\u3002\u4e00\u4e2a\u6761\u76ee\u53ef\u4ee5\u4e3a\u7740\u8272\u5668\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u63d0\u4f9b\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ee4\u4eba\u56f0\u60d1\u7684\u662f\uff0c\u4e0d\u662f entries \u6570\u7ec4\u4e2d\u6761\u76ee\u7684\u7d22\u5f15\u91cd\u8981\uff1b\u76f8\u53cd\uff0c\u6761\u76ee\u6709\u4e00\u4e2a binding \u5c5e\u6027\u6765\u6807\u8bc6\u5b83\u3002\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0cuniform \u53d8\u91cf\u58f0\u660e\u4e0a\u7684\u53cc\u6ce8\u91ca @group(0) @binding(0) \u8868\u793a\u8be5\u53d8\u91cf\u7684\u503c\u7279\u522b\u6765\u81ea\u7d22\u5f15 0 \u5904\u7684\u7ed1\u5b9a\u7ec4\u4e2d binding \u6570\u5b57\u4e3a 0 \u7684\u6761\u76ee\u3002</p> <p>\u7ba1\u7ebf\u8fd8\u6709\u8f93\u51fa\uff0c\u8fd9\u4e9b\u8f93\u51fa\u6765\u81ea\u7247\u6bb5\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\uff0c\u7ba1\u7ebf\u9700\u8981\u8fd9\u4e9b\u8f93\u51fa\u76ee\u6807\u7684\u8fde\u63a5\u70b9\u3002pipelineDescriptor \u4e2d\u7684 targets \u5c5e\u6027\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u8fde\u63a5\u70b9\u90fd\u6709\u4e00\u4e2a\u6761\u76ee\u3002\u5f53\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4f7f\u7528 fn fragmentMain() -&gt; @location(0) vec4f \u5b9a\u4e49\u7247\u6bb5\u7740\u8272\u5668\u65f6\uff0c\u8f93\u51fa\u4e0a\u7684 @location(0) \u6ce8\u91ca\u8868\u793a\u8be5\u8f93\u51fa\u5c06\u53d1\u9001\u5230\u989c\u8272\u9644\u4ef6\u7f16\u53f7 0\uff0c\u5bf9\u5e94\u4e8e targets \u6570\u7ec4\u4e2d\u7d22\u5f15 0 \u5904\u7684\u5143\u7d20\u3002\u8be5\u5143\u7d20\u4e2d format \u5c5e\u6027\u7684\u503c\u6307\u5b9a\u8f93\u51fa\u5c06\u4ee5\u9002\u5408\u753b\u5e03\u989c\u8272\u7684\u683c\u5f0f\u3002\uff08\u7cfb\u7edf\u5c06\u81ea\u52a8\u5c06\u7740\u8272\u5668\u8f93\u51fa\u8f6c\u6362\u4e3a\u753b\u5e03\u683c\u5f0f\uff0c\u7740\u8272\u5668\u8f93\u51fa\u4f7f\u7528\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u7684 32 \u4f4d\u6d6e\u70b9\u6570\uff0c\u800c\u753b\u5e03\u683c\u5f0f\u4f7f\u7528\u6bcf\u4e2a\u5206\u91cf\u7684 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002\uff09</p> <p>\u8fd9\u89e3\u91ca\u4e86 pipelineDescriptor \u7684 primitive \u5c5e\u6027\uff1a\u5b83\u6307\u5b9a\u4e86\u7ba1\u7ebf\u53ef\u4ee5\u7ed8\u5236\u7684\u51e0\u4f55\u56fe\u5143\u7c7b\u578b\u3002\u62d3\u6251\u6307\u5b9a\u4e86\u56fe\u5143\u7c7b\u578b\uff0c\u5728\u672c\u4f8b\u4e2d\u662f\u201ctriangle-list\u201d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6267\u884c\u7ba1\u7ebf\u65f6\uff0c\u6bcf\u7ec4\u4e09\u4e2a\u9876\u70b9\u5c06\u5b9a\u4e49\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002WebGPU \u53ea\u6709\u4e94\u79cd\u56fe\u5143\u7c7b\u578b\uff1a\u201cpoint-list\u201d\uff0c\u201cline-list\u201d\uff0c\u201cline-strip\u201d\uff0c\u201ctriangle-list\u201d\u548c\u201ctriangle-strip\u201d\uff0c\u5bf9\u5e94\u4e8e WebGL \u6216 OpenGL \u4e2d\u7684 POINTS\uff0cLINES\uff0cLINE_STRIP\uff0cTRIANGLES \u548c TRIANGLE_STRIP\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u76f8\u540c\u7684\u516d\u4e2a\u9876\u70b9\u5728\u6bcf\u79cd\u62d3\u6251\u4e2d\u5982\u4f55\u88ab\u89e3\u91ca\uff08\u9664\u4e86\u4e09\u89d2\u5f62\u7684\u8f6e\u5ed3\u548c\u7ebf\u6bb5\u7684\u7aef\u70b9\u4e0d\u4f1a\u662f\u5b9e\u9645\u8f93\u51fa\u7684\u4e00\u90e8\u5206\uff09\uff1a</p> <p></p> <p>\uff08\u89c13.1.1\u5c0f\u8282\uff0c\u4e86\u89e3\u6709\u5173\u5982\u4f55\u6e32\u67d3\u56fe\u5143\u7684\u66f4\u591a\u8ba8\u8bba\u3002\uff09</p> <p>\u6bcf\u6b21\u7ed8\u5236\u56fe\u50cf\u65f6\uff0c\u60a8\u4e0d\u5fc5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ba1\u7ebf\u3002\u4e00\u4e2a\u7ba1\u7ebf\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u6b21\u6570\u3002\u5b83\u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5\u4e0d\u540c\u7684\u8f93\u5165\u6e90\u6765\u7ed8\u5236\u4e0d\u540c\u7684\u5185\u5bb9\u3002\u7ed8\u5236\u5355\u4e2a\u56fe\u50cf\u53ef\u80fd\u9700\u8981\u51e0\u4e2a\u7ba1\u7ebf\uff0c\u6bcf\u4e2a\u7ba1\u7ebf\u90fd\u53ef\u80fd\u6267\u884c\u591a\u6b21\u3002\u901a\u5e38\uff0c\u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u671f\u95f4\u521b\u5efa\u7ba1\u7ebf\u5e76\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u5168\u5c40\u53d8\u91cf\u4e2d\u3002</p> <p>In WebGPU, an image is produced as the output of a series of processing stages that make up a \"render pipeline.\" The vertex shader and fragment shader are programmable stages in the pipeline, but there are other fixed function stages that are built into WebGPU. Input to the pipeline comes from data structures in the GPU. If the data originates on the JavaScript side of the application, it must be copied to the GPU before it can be used in the pipeline. Here is an illustration of the general structure of a render pipeline:</p> <p></p> <p>This diagram shows two types of input to the pipeline, vertex buffers and bind groups. Recall that when a primitive is drawn, the vertex shader is called once for each vertex in the primitive. Each invocation of the vertex shader can get different values for the parameters in the vertex shader entry point function. Those values come from vertex buffers. The buffers must be loaded with values for the parameters for every vertex. A fixed function stage of the pipeline, shown as the dots between the vertex buffers and the vertex shader, calls the vertex shader once for each vertex, pulling the appropriate set of parameter values for that vertex from the buffers. (Vertex buffers also hold data for instanced drawing, which will be covered in the next section).</p> <p>The vertex shader outputs some values, which must include the coordinates of the vertex but can also include other values such as color, texture coordinates, and normal vector for the vertex. Intermediate stages of the pipeline between the vertex shader and the fragment shader process the values in various ways. For example, the coordinates of the vertices are used to determine which pixels lie in the primitive. Coordinates for the pixels are computed by interpolating the vertex coordinates. Values like color and texture coordinates are also generally interpolated to get different values for each pixel. All these values are available as inputs to the fragment shader, which will be called once for each pixel in the primitive with appropriate values for its parameters.</p> <p>Vertex buffers are special because of the way that they are used to supply vertex shader parameters. Other kinds of input are stored in the data structures called bind groups. Values from bind groups are made available to vertex and fragment shaders as global variables in the shader programs.</p> <p>The fragment shader can output several values. The destinations for those values lie outside the pipeline and are referred to as the \"color attachments\" for the pipeline. In the most common case, there is just one output that represents the color to be assigned to the pixel, and the associated color attachment is the image that is being rendered (or, rather, the block of memory that holds the color data for that image). Multiple outputs can be used for advanced applications such as deferred shading (see Subsection 7.5.4).</p> <p>A WebGPU program is responsible for creating pipelines and providing many details of their configuration. (Fortunately, a lot of the detail can be handled by the tried-and-true method of cut-and-paste.) Let's look at the relatively simple example from our first sample program. The goal is to create a render pipeline as the final step in the following code excerpt. Before that, the program creates some objects to specify the pipeline configuration:</p> <pre><code>let vertexBufferLayout = [ // An array of vertex buffer specifications.\n{ \n    attributes: [ { shaderLocation:0, offset:0, format: \"float32x2\" } ],\n    arrayStride: 8, \n    stepMode: \"vertex\"\n}\n];\n\nlet uniformBindGroupLayout = device.createBindGroupLayout({\n    entries: [ // An array of resource specifications.\n    {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        buffer: {\n            type: \"uniform\"\n        }\n    }\n    ]\n});\n\nlet pipelineDescriptor = {\n    vertex: { // Configuration for the vertex shader.\n    module: shader, \n    entryPoint: \"vertexMain\", \n    buffers: vertexBufferLayout \n    },\n    fragment: { // Configuration for the fragment shader.\n    module: shader, \n    entryPoint: \"fragmentMain\", \n    targets: [{\n        format: navigator.gpu.getPreferredCanvasFormat()\n    }]\n    },\n    primitive: {\n    topology: \"triangle-list\"\n    },\n    layout: device.createPipelineLayout({\n    bindGroupLayouts: [uniformBindGroupLayout]\n    })\n};\n\npipeline = device.createRenderPipeline(pipelineDescriptor);\n</code></pre> <p>(You can read the same code with more comments in the source code for the program.)</p> <p>There is a lot going on here! The vertex and fragment properties of the pipeline descriptor describe the shaders that are used in the pipeline. The module property is the compiled shader module that contains the shader function. The entryPoint property gives the name used for the shader entry point function in the shader source code. The buffers and targets properties are concerned with inputs for the vertex shader function and outputs from the fragment shader function.</p> <p>The vertex buffer and bind group \"layouts\" specify what inputs will be required for the pipeline. They specify only the structure of the inputs. They basically create attachment points where actual input sources can be plugged in later. This allows one pipeline to draw different things by providing it with different inputs.</p> <p>Note the use of arrays throughout the specification. For example, a pipeline can be configured to use multiple vertex buffers for input. The vertex buffer layout is an array, in which each element of the array specifies one input buffer. The index of an element in the array is important, since it identifies the attachment point for the corresponding buffer. The index will be used later, when attaching an actual buffer.</p> <p>Similarly, a pipeline can take inputs from multiple bind groups. In this case, the index for a bind group comes from the bindGroupLayouts property in the pipelineDescriptor, and that index will be required when attaching an actual bind group to the pipeline. The index is also used in the shader program. For example, if you look back at the shader source code above, you'll see that the uniform variable declaration is annotated with @group(0). This means that the value for that variable will be found in the bind group at index 0 in the bindGroupLayouts array.</p> <p>Furthermore, each bind group can hold a list of resources, which are specified by the entries property of the bind group layout for that bind group. An entry can provide the value for a global variable in the shader. In this case, confusingly, it is not the index of the entry in the entries array that is important; instead, the entry has a binding property to identify it. In the sample program, the double annotation @group(0) @binding(0) on the uniform variable declaration says that the value for the variable comes specifically from the entry with binding number 0 in the bind group at index 0.</p> <p>The pipeline also has outputs, which come from the fragment shader entry point function, and the pipeline needs attachment points for the destinations of those outputs. The targets property in the pipelineDescriptor is an array with one entry for each attachment point. When the shader source code defines the fragment shader with fn fragmentMain() -&gt; @location(0) vec4f, the annotation @location(0) on the output says that that output will be sent to color attachment number 0, corresponding to the element at index 0 in the targets array. The value for the format property in that element specifies that the output will be in the appropriate format for colors in a canvas. (The system will automatically translate the shader output, which uses a 32-bit float for each color component, into the canvas format, which uses an 8-bit unsigned integer for each component.)</p> <p>That leaves the primitive property of the pipelineDescriptor to be explained: It specifies the kind of geometric primitive that the pipeline can draw. The topology specifies the primitive type, which in this example is \"triangle-list.\" That is, when the pipeline is executed, each group of three vertices will define a triangle. WebGPU has only five primitive types: \"point-list\", \"line-list\", \"line-strip\", \"triangle-list\", and \"triangle-strip\", corresponding to POINTS, LINES, LINE_STRIP, TRIANGLES, and TRIANGLE_STRIP in WebGL or OpenGL. This illustration shows how the same six vertices would be interpreted in each topology (except that outlines of triangles and endpoints of line segments would not be part of the actual output):</p> <p></p> <p>(See Subsection 3.1.1 for more discussion of how primitives are rendered.)</p> <p>You don't have to create a pipeline every time you draw an image. A pipeline can be used any number of times. It can be used to draw different things by attaching different input sources. Drawing a single image might require several pipelines, each of which might be executed several times. It is common for programs to create pipelines during initialization and store them in global variables.</p>"},{"location":"cn/c9/s1/#914-\u7f13\u51b2\u533a","title":"9.1.4 \u7f13\u51b2\u533a","text":"<p>Buffers</p> \u4e2d\u6587\u82f1\u6587 <p>\u7ba1\u7ebf\u7684\u8f93\u5165\u6765\u81ea\u9876\u70b9\u7f13\u51b2\u533a\u4ee5\u53ca\u7ed1\u5b9a\u7ec4\u4e2d\u7684\u901a\u7528\u76ee\u7684\u7f13\u51b2\u533a\u548c\u5176\u4ed6\u8d44\u6e90\u3002\uff08\u5176\u4ed6\u53ef\u80fd\u7684\u8d44\u6e90\u4e0e\u7eb9\u7406\u6709\u5173\uff0c\u6211\u4eec\u5c06\u5728\u7b2c9.5\u8282\u4e2d\u624d\u4f1a\u9047\u5230\u3002\uff09\u60a8\u9700\u8981\u77e5\u9053\u5982\u4f55\u521b\u5efa\u7f13\u51b2\u533a\uff0c\u7528\u6570\u636e\u586b\u5145\u5b83\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u9644\u52a0\u5230\u7ba1\u7ebf\u3002</p> <p>\u4f7f\u7528 <code>device.createBuffer()</code> \u51fd\u6570\u521b\u5efa\u7f13\u51b2\u533a\u3002\u5b83\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u6307\u5b9a\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u4ee5\u53ca\u7f13\u51b2\u533a\u7684\u7528\u9014\u3002\u4f8b\u5982\uff0c\u793a\u4f8b\u7a0b\u5e8f\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u9876\u70b9\u7f13\u51b2\u533a\uff1a</p> <pre><code>vertexBuffer = device.createBuffer({\n    size: vertexCoords.byteLength,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST\n});\n</code></pre> <p>\u9876\u70b9\u7f13\u51b2\u533a\u7684\u76ee\u7684\u662f\u4fdd\u5b58\u7a0b\u5e8f GPU \u7aef\u9876\u70b9\u7740\u8272\u5668\u7684\u8f93\u5165\u3002\u6570\u636e\u5c06\u6765\u81ea\u7c7b\u578b\u5316\u6570\u7ec4\uff0c\u5982 <code>Float32Array</code>\uff0c\u6216\u6765\u81ea\u76f8\u5173\u7684 JavaScript \u6570\u636e\u7c7b\u578b\uff0c\u5982 <code>ArrayBuffer</code>\u3002\u5728\u672c\u4f8b\u4e2d\uff0c<code>vertexCoords</code> \u662f\u4e00\u4e2a <code>Float32Array</code>\uff0c\u5b83\u4fdd\u5b58\u4e86\u4e09\u89d2\u5f62\u9876\u70b9\u7684 xy \u5750\u6807\uff0c\u800c <code>vertexCoords.byteLength</code> \u63d0\u4f9b\u4e86\u8be5\u6570\u7ec4\u4e2d\u7684\u5b57\u8282\u6570\u3002\uff08\u6216\u8005\uff0c\u5927\u5c0f\u53ef\u4ee5\u6307\u5b9a\u4e3a <code>4*vertexCoords.length</code> \u6216\u5e38\u91cf <code>24</code>\u3002\uff09</p> <p>\u6b64\u793a\u4f8b\u4e2d\u7684 <code>usage</code> \u5c5e\u6027\u8868\u660e\u7f13\u51b2\u533a\u662f\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u4f5c\u590d\u5236\u6570\u636e\u7684\u76ee\u7684\u5730\u3002<code>usage</code> \u7684\u503c\u53ef\u4ee5\u7ed9\u5b9a\u4e3a\u4f7f\u7528\u5e38\u91cf\uff0c\u5982 <code>GPUBufferUsage.VERTEX</code>\uff0c\u6216\u901a\u8fc7\u8fd9\u4e9b\u5e38\u91cf\u7684\u4f4d\u6216\u8fd0\u7b97\u7ed3\u679c\u3002</p> <p>\u7a0b\u5e8f\u8fd8\u4f7f\u7528\u7f13\u51b2\u533a\u6765\u4fdd\u5b58\u7740\u8272\u5668\u4e2d uniform \u989c\u8272\u53d8\u91cf\u7684\u503c\u3002\u989c\u8272\u503c\u7531\u4e09\u4e2a\u56db\u5b57\u8282\u7684\u6d6e\u70b9\u6570\u7ec4\u6210\uff0c\u7f13\u51b2\u533a\u53ef\u4ee5\u8fd9\u6837\u521b\u5efa\uff1a</p> <pre><code>uniformBuffer = device.createBuffer({\n    size: 3*4,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n});\n</code></pre> <p>\u53ea\u6709\u9876\u70b9\u7f13\u51b2\u533a\u76f4\u63a5\u9644\u52a0\u5230\u7ba1\u7ebf\u3002\u5176\u4ed6\u7f13\u51b2\u533a\u5fc5\u987b\u662f\u4e00\u4e2a\u7ed1\u5b9a\u7ec4\u7684\u4e00\u90e8\u5206\uff0c\u8be5\u7ed1\u5b9a\u7ec4\u9644\u52a0\u5230\u7ba1\u7ebf\u3002\u793a\u4f8b\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e00\u4e2a\u7ed1\u5b9a\u7ec4\u6765\u4fdd\u5b58 <code>uniformBuffer</code>\uff1a</p> <pre><code>uniformBindGroup = device.createBindGroup({\n    layout: uniformBindGroupLayout,\n    entries: [ \n        {\n            binding: 0, // \u5bf9\u5e94\u4e8e\u5e03\u5c40\u4e2d\u7684 binding 0\u3002\n            resource: { buffer: uniformBuffer, offset: 0, size: 3*4 }\n        }\n    ]\n});\n</code></pre> <p>\u56de\u60f3\u4e00\u4e0b\uff0c<code>uniformBindGroupLayout</code> \u662f\u4e3a\u4e86\u6307\u5b9a\u7ed1\u5b9a\u7ec4\u7684\u7ed3\u6784\u800c\u521b\u5efa\u7684\u3002\u7ed1\u5b9a\u7ec4\u5e03\u5c40\u6709\u6307\u5b9a\u8d44\u6e90\u7684\u6761\u76ee\uff1b\u76f8\u5e94\u7684\u7ed1\u5b9a\u7ec4\u6709\u63d0\u4f9b\u5b9e\u9645\u8d44\u6e90\u7684\u6761\u76ee\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8d44\u6e90\u662f\u4e00\u4e2a\u7f13\u51b2\u533a\u3002\u8d44\u6e90\u7684 <code>offset</code> \u548c <code>size</code> \u5c5e\u6027\u4f7f\u5f97\u53ea\u4f7f\u7528\u7f13\u51b2\u533a\u7684\u4e00\u4e2a\u7247\u6bb5\u6210\u4e3a\u53ef\u80fd\uff1b<code>offset</code> \u662f\u7247\u6bb5\u7684\u8d77\u59cb\u5b57\u8282\u53f7\uff0c<code>size</code> \u662f\u7247\u6bb5\u4e2d\u7684\u5b57\u8282\u6570\u3002</p> <p>\u8981\u4f7f\u7f13\u51b2\u533a\u6709\u7528\uff0c\u5fc5\u987b\u7528\u6570\u636e\u52a0\u8f7d\u5b83\u3002\u7f13\u51b2\u533a\u5b58\u5728\u4e8e\u7a0b\u5e8f\u7684 GPU \u7aef\u3002\u5bf9\u4e8e\u6e90\u81ea JavaScript \u7aef\u7684\u6570\u636e\uff0c<code>device.queue.writeBuffer()</code> \u51fd\u6570\u662f\u5c06\u6570\u636e\u590d\u5236\u5230 GPU \u7f13\u51b2\u533a\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u51fd\u6570\u8c03\u7528</p> <pre><code>device.queue.writeBuffer(vertexBuffer, 0, vertexCoords);\n</code></pre> <p>\u5c06 <code>vertexCoords</code> \u6570\u7ec4\u7684\u5168\u90e8\u5185\u5bb9\u590d\u5236\u5230 <code>vertexBuffer</code> \u4e2d\uff0c\u4ece\u7f13\u51b2\u533a\u7684\u5b57\u8282\u53f7 0 \u5f00\u59cb\u3002\u53ef\u4ee5\u590d\u5236\u7c7b\u578b\u5316\u6570\u7ec4\u7684\u5b50\u6570\u7ec4\u5230\u7f13\u51b2\u533a\u7684\u4efb\u4f55\u4f4d\u7f6e\u3002\u4e00\u822c\u5f62\u5f0f\u662f</p> <pre><code>device.queue.writeBuffer(buffer, startByte, array, startIndex, count)\n</code></pre> <p>\u5176\u4e2d <code>count</code> \u6307\u5b9a\u8981\u590d\u5236\u5230\u7f13\u51b2\u533a\u7684\u6570\u7ec4\u5143\u7d20\u6570\u91cf\u3002\uff08\u5f53\u6570\u636e\u6e90\u662f\u7c7b\u578b\u5316\u6570\u7ec4\u65f6\uff1b\u5bf9\u4e8e\u5176\u4ed6\u6570\u636e\u6e90\uff0c\u6e90\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u8981\u590d\u5236\u7684\u6570\u636e\u5927\u5c0f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u6d4b\u91cf\u3002\uff09</p> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u7f13\u51b2\u533a\u548c\u7ed1\u5b9a\u7ec4\u53ea\u521b\u5efa\u4e00\u6b21\uff0c\u5728\u521d\u59cb\u5316\u671f\u95f4\u3002<code>vertexBuffer</code> \u548c <code>uniformBuffer</code> \u662f\u5168\u5c40\u53d8\u91cf \u2014\u2014 <code>vertexBuffer</code> \u56e0\u4e3a\u5728\u6bcf\u6b21\u4f7f\u7528\u7ba1\u7ebf\u7ed8\u5236\u4e09\u89d2\u5f62\u65f6\u90fd\u5fc5\u987b\u9644\u52a0\u5230\u7ba1\u7ebf\uff0c<code>uniformBuffer</code> \u4ee5\u4fbf\u53ef\u4ee5\u66f4\u6539\u5b58\u50a8\u5728\u5176\u4e2d\u7684\u6570\u636e\u3002\u6bcf\u6b21\u8981\u66f4\u6539\u4e09\u89d2\u5f62\u7684\u989c\u8272\u65f6\uff0c\u90fd\u4f1a\u5411 <code>uniformBuffer</code> \u5199\u5165\u4e00\u4e2a\u65b0\u503c\u3002\u540c\u6837\uff0c<code>uniformBindGroup</code> \u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u4e3a\u6bcf\u6b21\u7ed8\u5236\u4e09\u89d2\u5f62\u65f6\u90fd\u5fc5\u987b\u9644\u52a0\u5230\u7ba1\u7ebf\u3002</p> <p>\u601d\u8003 <code>writeBuffer()</code> \u51fd\u6570\u4e3a\u4f55\u662f\u8bbe\u5907\u5bf9\u8c61\u4e2d\u7684 device.queue \u7684\u4e00\u4e2a\u65b9\u6cd5\u662f\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u6240\u8bf4\u7684\u961f\u5217\u662f GPU \u4e0a\u8981\u6267\u884c\u7684\u64cd\u4f5c\u961f\u5217\u3002\u5f53 <code>writeBuffer()</code> \u8fd4\u56de\u65f6\uff0c\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u6570\u636e\u5df2\u7ecf\u88ab\u5199\u5165\u7f13\u51b2\u533a\u3002\u4f46\u662f\uff0c\u6267\u884c\u590d\u5236\u7684\u64cd\u4f5c\u5df2\u7ecf\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u4e86\u3002\u4f60\u6240\u80fd\u4fdd\u8bc1\u7684\u662f\uff0c\u5728\u961f\u5217\u4e2d\u540e\u7eed\u64cd\u4f5c\u9700\u8981\u4f7f\u7528\u8be5\u7f13\u51b2\u533a\u4e4b\u524d\uff0c\u6570\u636e\u5c06\u88ab\u590d\u5236\u5230\u7f13\u51b2\u533a\u3002\u8fd9\u53ef\u4ee5\u5305\u62ec\u4f7f\u7528\u8be5\u7f13\u51b2\u533a\u7684\u7ed8\u5236\u64cd\u4f5c\u3002\u540c\u6837\u6709\u53ef\u80fd\u961f\u5217\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u4f9d\u8d56\u4e8e\u7f13\u51b2\u533a\u4e2d\u5148\u524d\u503c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u65b0\u6570\u636e\u4e0d\u80fd\u88ab\u590d\u5236\u5230\u7f13\u51b2\u533a\uff0c\u76f4\u5230\u90a3\u4e9b\u64cd\u4f5c\u5b8c\u6210\u3002</p> <p>\u5f53\u8c03\u7528 <code>device.queue.writeBuffer()</code> \u65f6\uff0c\u5b83\u7acb\u5373\u5c06\u6570\u636e\u590d\u5236\u5230\u4e00\u4e2a\u4e2d\u95f4\u7684\u201c\u6682\u5b58\u201d\u7f13\u51b2\u533a\uff0c\u8fd9\u4e2a\u7f13\u51b2\u533a\u5b58\u5728\u4e8e JavaScript \u548c GPU \u4e24\u4fa7\u5171\u4eab\u7684\u5185\u5b58\u4e2d\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7acb\u5373\u91cd\u7528\u6570\u7ec4\uff1b\u4f60\u4e0d\u5fc5\u7b49\u5f85\u6570\u636e\u88ab\u590d\u5236\u5230\u6700\u7ec8\u76ee\u7684\u5730\u3002\u800c\u4e0d\u662f\u8c03\u7528 <code>writeBuffer()</code>\uff0c\u53ef\u4ee5\u81ea\u5df1\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u2014\u2014\u521b\u5efa\u4e00\u4e2a\u6682\u5b58\u7f13\u51b2\u533a\uff0c\u5c06\u6570\u636e\u590d\u5236\u5230\u6682\u5b58\u7f13\u51b2\u533a\uff0c\u6392\u961f\u4e00\u4e2a\u547d\u4ee4\u5c06\u6570\u636e\u4ece\u6682\u5b58\u7f13\u51b2\u533a\u590d\u5236\u5230\u76ee\u6807\u7f13\u51b2\u533a\u2014\u2014\u4f46\u662f <code>writeBuffer()</code> \u4f7f\u8fd9\u4e2a\u8fc7\u7a0b\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002</p> <p>Inputs to a pipeline come from vertex buffers and from general purpose buffers and other resources in bind groups. (The other possible resources relate to textures, which we will not encounter until Section 9.5). You need to know how to create a buffer, fill it with data, and attach it to a pipeline.</p> <p>The function device.createBuffer() is used for creating buffers. It takes a parameter that specifies the size of the buffer in bytes and how the buffer will be used. For example, the sample program creates a vertex buffer with</p> <pre><code>vertexBuffer = device.createBuffer({\n    size: vertexCoords.byteLength,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST\n});\n</code></pre> <p>The purpose of a vertex buffer is to hold inputs for a vertex shader on the GPU side of the program. The data will come from a typed array, such as a Float32Array, or from a related JavaScript data type such as ArrayBuffer. In this case, vertexCoords is a Float32Array that holds the xy-coordinates of the vertices of a triangle, and vertexCoords.byteLength gives the number of bytes in that array. (Alternatively, the size could be specified as 4*vertexCoords.length or as the constant 24.)</p> <p>The usage property in this example says that the buffer is a vertex buffer and that it can be used as a destination for copying data. The value for the usage can be given as a usage constant such as GPUBufferUsage.VERTEX or by the bitwise OR of several such constants.</p> <p>The program also uses a buffer to hold the value for the uniform color variable in the shader. The color value consists of three four-byte floats, and the buffer can be created with</p> <pre><code>uniformBuffer = device.createBuffer({\nsize: 3*4,\nusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n});\n</code></pre> <p>Only vertex buffers are attached directly to pipelines. Other buffers must be part of a bind group that is attached to the pipeline. The sample program creates a bind group to hold uniformBuffer:</p> <pre><code>uniformBindGroup = device.createBindGroup({\nlayout: uniformBindGroupLayout,\nentries: [ \n    {\n        binding: 0, // Corresponds to the binding 0 in the layout.\n        resource: { buffer: uniformBuffer, offset: 0, size: 3*4 }\n    }\n]\n});\n</code></pre> <p>Recall that uniformBindGroupLayout was created to specify the structure of the bind group. The bind group layout has entries that specify resources; a corresponding bind group has entries the provide the actual resources. The resource in this case is a buffer. The offset and size properties of the resource make it possible to use just a segment of a buffer; offset is the starting byte number of the segment, and size is the number of bytes in the segment.</p> <p>To be useful, a buffer must loaded with data. The buffer exists on the GPU side of the program. For data that originates on the JavaScript side, the function device.queue.writeBuffer() is the easiest way to copy the data into a GPU buffer. For example the function call</p> <p>device.queue.writeBuffer(vertexBuffer, 0, vertexCoords); copies the entire contents of the vertexCoords array into vertexBuffer, starting at byte number 0 in the buffer. It is possible to a copy a subarray of a typed array to any position in the buffer. The general form is</p> <pre><code>device.queue.writeBuffer(buffer,startByte,array,startIndex,count)\n</code></pre> <p>where count gives the number of elements of array to be copied into buffer. (This is when the data source is a typed array; for other data sources, the starting position in the source and the size of the data to be copied are measured in bytes.)</p> <p>In the sample program, the buffers and bind group are created just once, during initialization. And vertexBuffer and uniformBuffer are global variables\u2014vertexBuffer because it must be attached to the pipeline each time the pipeline is used to draw a triangle, and uniformBuffer so that the data stored in it can be changed. A new value is written to uniformBuffer every time the color of the triangle is to be changed. Similarly, uniformBindGroup is a global variable because it must be attached to the pipeline each time a triangle is drawn.</p> <p>It is interesting to think about why the <code>writeBuffer()</code> function is a method in the object device.queue. The queue in question is a queue of operations to be performed on the GPU. When <code>writeBuffer()</code> returns, it is not necessarily true that the data has been written to the buffer. However, the operation that does the copying has been added to the queue. What you are guaranteed is that the data will be copied to the buffer before it is needed by operations that come later in the queue. That can include drawing operations that use the buffer. It is also possible that the queue already contains operations that depend on the previous value in the buffer, so the new data can't be copied into the buffer until those operations have completed.</p> <p>When <code>device.queue.writeBuffer()</code> is called, it immediately copies the data into an intermediate \"staging\" buffer that exists in memory that is shared by the JavaScript and GPU sides. This means that you are free to reuse the array immediately; you don't have to wait for the data to be copied to its final destination. Instead of calling <code>writeBuffer()</code>, it's possible to do the work yourself\u2014create a staging buffer, copy the data into the staging buffer, enqueue a command to copy the data from the staging buffer to the destination buffer\u2014but <code>writeBuffer()</code> makes the process much easier.</p>"},{"location":"cn/c9/s1/#915-\u7ed8\u56fe","title":"9.1.5 \u7ed8\u56fe","text":"<p>Drawing</p> \u4e2d\u6587\u82f1\u6587 <p>\u968f\u7740\u7ba1\u7ebf\u8bbe\u7f6e\u5b8c\u6bd5\u548c\u8f93\u5165\u7f13\u51b2\u533a\u51c6\u5907\u5c31\u7eea\uff0c\u662f\u65f6\u5019\u771f\u6b63\u7ed8\u5236\u4e09\u89d2\u5f62\u4e86\uff01\u7ed8\u5236\u547d\u4ee4\u5728 JavaScript \u7aef\u6307\u5b9a\uff0c\u4f46\u5728 GPU \u7aef\u6267\u884c\u3002\u5728 JavaScript \u7aef\u4f7f\u7528\u201c\u547d\u4ee4\u7f16\u7801\u5668\u201d\u6765\u521b\u5efa\u4e00\u4e2a\u547d\u4ee4\u5217\u8868\uff0c\u8be5\u5217\u8868\u53ef\u4ee5\u4ee5\u53ef\u4ee5\u6dfb\u52a0\u5230 GPU \u5904\u7406\u547d\u4ee4\u961f\u5217\u7684\u5f62\u5f0f\u5b58\u5728\u3002\u547d\u4ee4\u7f16\u7801\u5668\u7531 WebGPU \u8bbe\u5907\u521b\u5efa\uff1a</p> <pre><code>let commandEncoder = device.createCommandEncoder();\n</code></pre> <p>\u4e3a\u4e86\u7ed8\u5236\uff0c\u6211\u4eec\u9700\u8981\u7f16\u7801\u4e00\u4e2a\u201c\u6e32\u67d3\u901a\u9053\u201d\uff0c\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6e32\u67d3\u901a\u9053\u63cf\u8ff0\u7b26\uff1a</p> <pre><code>let renderPassDescriptor = {\n    colorAttachments: [{\n        clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1 },  // \u7070\u8272\u80cc\u666f\n        loadOp: \"clear\", // \u53e6\u4e00\u79cd\u9009\u62e9\u662f \"load\"\u3002\n        storeOp: \"store\",  // \u53e6\u4e00\u79cd\u9009\u62e9\u662f \"discard\"\u3002\n        view: context.getCurrentTexture().createView()  // \u7ed8\u5236\u5230\u753b\u5e03\u4e0a\u3002\n    }]\n};\n</code></pre> <p>renderPassDescriptor \u7684 colorAttachments \u5c5e\u6027\u5bf9\u5e94\u4e8e\u7ba1\u7ebf\u7684\u8f93\u51fa\u76ee\u6807\u3002colorAttachments \u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u6307\u5b9a\u4e86\u8f93\u51fa\u76ee\u6807\u6570\u7ec4\u4e2d\u5bf9\u5e94\u5143\u7d20\u7684\u76ee\u7684\u5730\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u60f3\u8981\u5728\u7f51\u9875\u4e0a\u7684\u753b\u5e03\u4e0a\u7ed8\u5236\u3002loadOp \u5c5e\u6027\u7684\u503c\u4e3a \"clear\"\uff0c\u5982\u679c\u753b\u5e03\u5728\u7ed8\u5236\u524d\u8981\u88ab\u586b\u5145\u4e3a\u6e05\u9664\u989c\u8272\uff1b\u5982\u679c\u5e0c\u671b\u5728\u753b\u5e03\u7684\u5148\u524d\u5185\u5bb9\u4e0a\u7ed8\u5236\uff0c\u5219\u4e3a \"load\"\u3002clearValue \u7ed9\u51fa\u4e86\u6e05\u9664\u989c\u8272\u7684 RGBA \u5206\u91cf\uff0c\u4e3a 0.0 \u5230 1.0 \u8303\u56f4\u5185\u7684\u6d6e\u70b9\u503c\u3002storeOp \u51e0\u4e4e\u603b\u662f \"store\"\u3002view \u5c5e\u6027\u6307\u5b9a\u4e86\u56fe\u50cf\u5c06\u88ab\u7ed8\u5236\u7684\u4f4d\u7f6e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u76ee\u7684\u5730\u662f\u753b\u5e03\uff0c\u4f46\u5b9e\u9645\u76ee\u7684\u5730\u662f\u4e00\u4e2a\u7eb9\u7406\uff0c\u5f53\u7f51\u9875\u5185\u5bb9\u5237\u65b0\u65f6\uff0c\u5b83\u5c06\u88ab\u590d\u5236\u5230\u753b\u5e03\u4e0a\u3002\u6bcf\u6b21\u753b\u5e03\u91cd\u65b0\u7ed8\u5236\u65f6\u90fd\u5fc5\u987b\u8c03\u7528 context.getCurrentTexture() \u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u5236\u4f5c\u4e00\u4e2a\u6e32\u67d3\u901a\u9053\u63cf\u8ff0\u7b26\uff0c\u5e76\u5c06\u5176\u4e0d\u53d8\u5730\u7528\u4e8e\u6bcf\u6b21\u6e32\u67d3\u3002</p> <p>\u7ed8\u5236\u547d\u4ee4\u672c\u8eab\u7531\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\u7f16\u7801\uff0c\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\u4ece\u547d\u4ee4\u7f16\u7801\u5668\u83b7\u5f97\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u901a\u9053\u7f16\u7801\u5668\u7ec4\u88c5\u4e86\u7ed8\u5236\u6240\u9700\u7684\u8d44\u6e90\uff08\u7ba1\u7ebf\u3001\u9876\u70b9\u7f13\u51b2\u533a\u548c\u7ed1\u5b9a\u7ec4\uff09\uff0c\u5e76\u53d1\u51fa\u5b9e\u9645\u8fdb\u884c\u7ed8\u5236\u7684\u547d\u4ee4\u3002\u8c03\u7528 passEncoder.end() \u7ec8\u6b62\u6e32\u67d3\u901a\u9053\uff1a</p> <pre><code>let passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\npassEncoder.setPipeline(pipeline);            // \u6307\u5b9a\u7ba1\u7ebf\u3002\npassEncoder.setVertexBuffer(0,vertexBuffer);  // \u9644\u52a0\u9876\u70b9\u7f13\u51b2\u533a\u3002\npassEncoder.setBindGroup(0,uniformBindGroup); // \u9644\u52a0\u7ed1\u5b9a\u7ec4\u3002\npassEncoder.draw(3);                          // \u751f\u6210\u9876\u70b9\u3002\npassEncoder.end();\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed8\u5236\u547d\u4ee4\uff0cpassEncoder.draw(3)\uff0c\u5728\u6267\u884c\u65f6\u5c06\u7b80\u5355\u5730\u751f\u6210\u4e09\u4e2a\u9876\u70b9\u3002\u7531\u4e8e\u7ba1\u7ebf\u4f7f\u7528\u7684\u662f\u201ctriangle-list\u201d\u62d3\u6251\uff0c\u8fd9\u4e9b\u9876\u70b9\u5f62\u6210\u4e86\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u4f5c\u4e3a\u7ba1\u7ebf\u4e00\u90e8\u5206\u6307\u5b9a\u7684\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u4e09\u6b21\uff0c\u8f93\u5165\u6765\u81ea\u9876\u70b9\u7f13\u51b2\u533a\u3002\u9876\u70b9\u7740\u8272\u5668\u7684\u4e09\u6b21\u8c03\u7528\u7684\u8f93\u51fa\u6307\u5b9a\u4e86\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\u7684\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u5bf9\u4e8e\u4e09\u89d2\u5f62\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\uff0c\u90fd\u4f1a\u8c03\u7528\u7247\u6bb5\u7740\u8272\u5668\u51fd\u6570\u3002\u7247\u6bb5\u7740\u8272\u5668\u4ece\u4f5c\u4e3a\u7ed1\u5b9a\u7ec4\u4e00\u90e8\u5206\u7684 uniform \u7f13\u51b2\u533a\u83b7\u53d6\u50cf\u7d20\u7684\u989c\u8272\u3002\u7a0b\u5e8f\u65e9\u671f\u5b8c\u6210\u7684\u6240\u6709\u8bbe\u7f6e\u6700\u7ec8\u5c06\u88ab\u7528\u6765\u4ea7\u751f\u56fe\u50cf\uff01\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002\u66f4\u4e00\u822c\u5730\u8bf4\uff0c\u4e00\u4e2a\u6e32\u67d3\u901a\u9053\u53ef\u4ee5\u6d89\u53ca\u5176\u4ed6\u9009\u9879\u3001\u591a\u4e2a\u7ed8\u5236\u547d\u4ee4\u548c\u5176\u4ed6\u547d\u4ee4\u3002</p> <p>\u60a8\u5e94\u8be5\u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u8fdb\u884c\u4efb\u4f55\u7ed8\u5236\uff01\u5b83\u53ea\u662f\u7f16\u7801\u4e86\u8fdb\u884c\u7ed8\u5236\u6240\u9700\u7684\u547d\u4ee4\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u547d\u4ee4\u7f16\u7801\u5668\u4e2d\u3002\u6700\u540e\u4e00\u6b65\u662f\u4ece\u547d\u4ee4\u7f16\u7801\u5668\u83b7\u53d6\u7f16\u7801\u547d\u4ee4\u5217\u8868\uff0c\u5e76\u5c06\u5176\u63d0\u4ea4\u7ed9 GPU \u6267\u884c\uff1a</p> <pre><code>let commandBuffer = commandEncoder.finish();\ndevice.queue.submit( [ commandBuffer ] );\n</code></pre> <p>device.queue.submit() \u7684\u53c2\u6570\u662f\u547d\u4ee4\u7f13\u51b2\u533a\u7684\u6570\u7ec4\uff0c\u5c3d\u7ba1\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ea\u6709\u4e00\u4e2a\u3002\uff08\u547d\u4ee4\u7f16\u7801\u5668\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\uff1b\u5982\u679c\u60a8\u60f3\u63d0\u4ea4\u591a\u4e2a\u547d\u4ee4\u7f13\u51b2\u533a\uff0c\u60a8\u5c06\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u4ee4\u7f16\u7801\u5668\u3002\uff09</p> <p>\u8bf7\u6ce8\u610f\uff0c\u547d\u4ee4\u662f\u63d0\u4ea4\u7ed9\u8bbe\u5907\u961f\u5217\u7684\u3002submit() \u51fd\u6570\u5728\u5c06\u547d\u4ee4\u6392\u961f\u540e\u7acb\u5373\u8fd4\u56de\u3002\u5b83\u4eec\u5c06\u5728\u5e94\u7528\u7a0b\u5e8f\u7684 GPU \u7aef\u7684\u5355\u72ec\u8fdb\u7a0b\u4e2d\u6267\u884c\u3002</p> <p>With the pipeline set up and the input buffers ready, it's time to actually draw the triangle! The drawing commands are specified on the JavaScript side but executed on the GPU side. A \"command encoder\" is used on the JavaScript side to create a list of commands in a form that can be added to the queue of commands for processing on the GPU. The command encoder is created by the WebGPU device:</p> <pre><code>let commandEncoder = device.createCommandEncoder();\n</code></pre> <p>For drawing, we need to encode a \"render pass,\" and for that, we need a render pass descriptor:</p> <pre><code>let renderPassDescriptor = {\ncolorAttachments: [{\n    clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1 },  // gray background\n    loadOp: \"clear\", // Alternative is \"load\".\n    storeOp: \"store\",  // Alternative is \"discard\".\n    view: context.getCurrentTexture().createView()  // Draw to the canvas.\n}]\n};\n</code></pre> <p>The colorAttachments property of the renderPassDescriptor corresponds to the output targets of the pipeline. Each element of the colorAttachments array specifies the destination for the corresponding element in the array of output targets. In this case, we want to draw to the canvas on the web page. The value for the loadOp property is \"clear\" if the canvas is to be filled with the clear color before drawing; it is \"load\" if you want to draw over the previous contents of the canvas. The clearValue gives the RGBA components of the clear color as floating point values in the range 0.0 to 1.0. The storeOp will almost always be \"store\". The view property specifies where the image will be drawn. In this case, the ultimate destination is the canvas, but the actual destination is a texture that will be copied to the canvas when the content of the web page is refreshed. The function context.getCurrentTexture() has to be called each time the canvas is redrawn, so we can't simply make a render pass descriptor and use it unchanged for every render.</p> <p>The drawing commands themselves are encoded by a render pass encoder, which is obtained from the command encoder. The pass encoder in our example assembles the resources required for the drawing (pipeline, vertex buffer, and bind group), and it issues the command that actually does the drawing. A call to passEncoder.end() terminates the render pass:</p> <pre><code>let passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\npassEncoder.setPipeline(pipeline);            // Specify pipeline.\npassEncoder.setVertexBuffer(0,vertexBuffer);  // Attach vertex buffer.\npassEncoder.setBindGroup(0,uniformBindGroup); // Attach bind group.\npassEncoder.draw(3);                          // Generate vertices.\npassEncoder.end();\n</code></pre> <p>The draw command in this case, passEncoder.draw(3), will simply generate three vertices when it is executed. Since the pipeline uses the \"triangle-list\" topology, those vertices form a triangle. The vertex shader function, which was specified as part of the pipeline, will be called three times, with inputs that are pulled from the vertex buffer. The outputs from the three invocations of the vertex shader specify the positions of the three vertices of a triangle. The fragment shader function is then called for each pixel in the triangle. The fragment shader gets the color for the pixel from the uniform buffer that is part of the bind group. All the set up that was done earlier in the program will finally be used to produce an image! This is a simple example. More generally, a render pass can involve other options, multiple draw commands, and other commands.</p> <p>You should note that all of this has not actually done any drawing! It has just encoded the commands that are needed to do the drawing, and has added them to the command encoder. The final step is to get the list of encoded commands from the command encoder and submit them to the GPU for execution:</p> <pre><code>let commandBuffer = commandEncoder.finish();\ndevice.queue.submit( [ commandBuffer ] );\n</code></pre> <p>The parameter to <code>device.queue.submit()</code> is an array of command buffers, although in this case there is only one. (The command encoder cannot be reused; if you want to submit multiple command buffers, you will need to create a new command encoder for each one.)</p> <p>Note that commands are submitted to the device queue. The <code>submit()</code> function returns immediately after enqueueing the commands. They will be executed in a separate process on the GPU side of the application.</p>"},{"location":"cn/c9/s1/#916-\u591a\u4e2a\u9876\u70b9\u8f93\u5165","title":"9.1.6 \u591a\u4e2a\u9876\u70b9\u8f93\u5165","text":"<p>Multiple Vertex Inputs</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6211\u4eec\u7ed3\u675f\u672c\u8282\u4e4b\u524d\uff0c\u6211\u4eec\u6765\u770b\u6211\u4eec\u57fa\u672c\u793a\u4f8b\u7684\u4e24\u4e2a\u53d8\u4f53\uff1abasic_webgpu_2.html \u548c basic_webgpu_3.html\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u4e0d\u662f\u7ed8\u5236\u4e00\u4e2a\u7eaf\u8272\u4e09\u89d2\u5f62\uff0c\u800c\u662f\u7ed8\u5236\u4e00\u4e2a\u6bcf\u4e2a\u9876\u70b9\u90fd\u6709\u4e0d\u540c\u989c\u8272\u7684\u4e09\u89d2\u5f62\u3002\u5185\u90e8\u50cf\u7d20\u7684\u989c\u8272\u662f\u4ece\u9876\u70b9\u989c\u8272\u63d2\u503c\u5f97\u5230\u7684\u3002\u8fd9\u662f\u6807\u51c6\u7684\u201cRGB\u4e09\u89d2\u5f62\u201d\u793a\u4f8b\u3002</p> <p></p> <p>\u7531\u4e8e\u6bcf\u4e2a\u9876\u70b9\u90fd\u6709\u4e0d\u540c\u7684\u989c\u8272\uff0c\u989c\u8272\u662f\u4e00\u4e2a\u9876\u70b9\u5c5e\u6027\uff0c\u5fc5\u987b\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u3002\u5728\u65b0\u7684\u793a\u4f8b\u4e2d\uff0c\u8be5\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0c2D\u9876\u70b9\u5750\u6807\u548c\u9876\u70b9RGB\u989c\u8272\u3002\u8fd9\u4e9b\u4e24\u4e2a\u503c\u7684\u63d2\u503c\u7248\u672c\u7531\u7247\u6bb5\u7740\u8272\u5668\u4f7f\u7528\uff0c\u56e0\u6b64\u9876\u70b9\u7740\u8272\u5668\u8fd8\u9700\u8981\u4e24\u4e2a\u8f93\u51fa\u3002\u7531\u4e8e\u4e00\u4e2a\u51fd\u6570\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u8fd9\u4e24\u4e2a\u8f93\u51fa\u5fc5\u987b\u5408\u5e76\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u5728WGSL\u4e2d\uff0c\u5c31\u50cf\u5728GLSL\u4e2d\u4e00\u6837\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u89c16.3.2\u5c0f\u8282\uff09\u3002\u8fd9\u662f\u5728\u4e24\u4e2a\u65b0\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u7740\u8272\u5668\u6e90\u4ee3\u7801\uff1a</p> <pre><code>struct VertexOutput {  // \u9876\u70b9\u7740\u8272\u5668\u8fd4\u56de\u503c\u7684\u7c7b\u578b\n    @builtin(position) position: vec4f,\n    @location(0) color: vec3f  \n}\n\n@vertex\nfn vertexMain(\n        @location(0) coords: vec2f, \n        @location(1) color: vec3f  \n    ) -&gt; VertexOutput {  \n    var output: VertexOutput;  \n    output.position = vec4f(coords, 0, 1);\n    output.color = color; \n    return output;\n}\n\n@fragment\nfn fragmentMain(@location(0) fragColor: vec3f) -&gt; @location(0) vec4f {\n    return vec4f(fragColor, 1);\n}\n</code></pre> <p>\u4f20\u9012\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u51fd\u6570\u7684 fragColor \u53c2\u6570\u662f\u9876\u70b9\u7740\u8272\u5668\u989c\u8272\u8f93\u51fa\u7684\u63d2\u503c\u7248\u672c\uff0c\u5373\u4f7f\u540d\u79f0\u4e0d\u4e00\u6837\u3002\u5b9e\u9645\u4e0a\uff0c\u540d\u79f0\u6839\u672c\u65e0\u5173\u7d27\u8981\uff1b\u9876\u70b9\u7740\u8272\u5668\u8f93\u51fa color \u548c\u7247\u6bb5\u7740\u8272\u5668\u53c2\u6570 fragColor \u4e4b\u95f4\u7684\u5173\u8054\u662f\u901a\u8fc7 @location(0) \u4fee\u9970\u7b26\u6307\u5b9a\u7684\u3002\u6ce8\u610f\uff0c@location(0) \u5728\u8fd9\u91cc\u7684\u542b\u4e49\u4e0e\u9876\u70b9\u7740\u8272\u5668\u53c2\u6570 coords \u4e0a\u7684 @location(0) \u6ce8\u91ca\u975e\u5e38\u4e0d\u540c\u3002\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u9876\u70b9\u7740\u8272\u5668\u53c2\u6570\u4e0a\u7684 @location \u6ce8\u91ca\u5bf9\u5e94\u4e8e JavaScript \u7aef\u9876\u70b9\u7f13\u51b2\u533a\u5e03\u5c40\u4e2d\u7684 shaderLocation\uff0c\u5b83\u6307\u5b9a\u4e86\u8be5\u53c2\u6570\u7684\u503c\u6765\u81ea\u54ea\u91cc\u3002\uff09</p> <p>\u6211\u518d\u6b21\u6307\u51fa\uff0c\u5373\u4f7f\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u9876\u70b9\u7740\u8272\u5668\u7684\u4f4d\u7f6e\u8f93\u51fa\u6ca1\u6709\u660e\u786e\u5728\u7247\u6bb5\u7740\u8272\u5668\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u4f46\u5b83\u662f\u9690\u542b\u4f7f\u7528\u7684\u3002\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u59cb\u7ec8\u9700\u8981\u6709\u4e00\u4e2a @builtin(position) \u8f93\u51fa\u3002</p> <p>\u5e94\u7528\u7a0b\u5e8f\u7684 JavaScript \u7aef\u73b0\u5728\u5fc5\u987b\u4e3a\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u63d0\u4f9b\u4e24\u4e2a\u8f93\u5165\u3002\u5728\u7b2c\u4e00\u79cd\u53d8\u4f53\u4e2d\uff0c\u4e24\u4e2a\u8f93\u5165\u5728\u4e24\u4e2a\u5355\u72ec\u7684\u9876\u70b9\u7f13\u51b2\u533a\u4e2d\u63d0\u4f9b\uff0c\u65b0\u7684\u9876\u70b9\u7f13\u51b2\u533a\u5e03\u5c40\u53cd\u6620\u4e86\u8fd9\u4e00\u70b9\uff0c\u6709\u4e24\u4e2a\u6570\u7ec4\u5143\u7d20\u5bf9\u5e94\u4e8e\u4e24\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\uff1a</p> <pre><code>let vertexBufferLayout = [\n    { // \u7b2c\u4e00\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u7528\u4e8e coords\uff08\u6bcf\u4e2a\u9876\u70b9\u4e24\u4e2a32\u4f4d\u6d6e\u70b9\u6570\uff09\u3002\n        attributes: [ { shaderLocation:0, offset:0, format: \"float32x2\" } ],\n        arrayStride: 8,  // \u7f13\u51b2\u533a\u4e2d\u7684\u503c\u4e4b\u95f4\u67098\u4e2a\u5b57\u8282\n        stepMode: \"vertex\" \n    },\n    { // \u7b2c\u4e8c\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u7528\u4e8e\u989c\u8272\uff08\u6bcf\u4e2a\u9876\u70b9\u4e09\u4e2a32\u4f4d\u6d6e\u70b9\u6570\uff09\u3002\n        attributes: [ { shaderLocation:1, offset:0, format: \"float32x3\" } ],\n        arrayStride: 12,  // \u7f13\u51b2\u533a\u4e2d\u7684\u503c\u4e4b\u95f4\u670912\u4e2a\u5b57\u8282\n        stepMode: \"vertex\" \n    }\n];\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u53d8\u4f53\u505a\u4e86\u4e00\u4e9b\u66f4\u6709\u8da3\u7684\u4e8b\u60c5\uff1a\u5b83\u4f7f\u7528\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u53c2\u6570\u503c\u7684\u9876\u70b9\u7f13\u51b2\u533a\u3002\u989c\u8272\u7684\u503c\u4e0e\u5750\u6807\u7684\u503c\u4ea4\u9519\u5728\u4e00\u8d77\u3002\u8fd9\u662f JavaScript \u7aef\u6570\u636e\u7684\u6837\u5b50\uff1a</p> <pre><code>const vertexData = new Float32Array([\n    /* \u5750\u6807 */     /* \u989c\u8272 */\n    -0.8, -0.6,      1, 0, 0,      // \u7b2c\u4e00\u4e2a\u9876\u70b9\u7684\u6570\u636e\n    0.8, -0.6,       0, 1, 0,      // \u7b2c\u4e8c\u4e2a\u9876\u70b9\u7684\u6570\u636e\n    0.0, 0.7,        0, 0, 1       // \u7b2c\u4e09\u4e2a\u9876\u70b9\u7684\u6570\u636e\n]);\n</code></pre> <p>\u8fd9\u4e2a\u6570\u7ec4\u5c06\u88ab\u590d\u5236\u5230\u5355\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\u4e2d\u3002\u9876\u70b9\u7f13\u51b2\u533a\u5e03\u5c40\u53cd\u6620\u4e86\u7f13\u51b2\u533a\u4e2d\u6570\u636e\u7684\u5e03\u5c40\uff1a</p> <pre><code>let vertexBufferLayout = [\n    {   // \u4e00\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\u7684\u503c\u3002\n        attributes: [\n            { shaderLocation:0, offset:0, format: \"float32x2\" },\n            { shaderLocation:1, offset:8, format: \"float32x3\" }\n        ],\n        arrayStride: 20,\n        stepMode: \"vertex\" \n    }\n];\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6bcf\u4e2a\u7f13\u51b2\u533a\u7684\u6570\u636e\u5360\u752820\u4e2a\u5b57\u8282\uff08\u4e94\u4e2a4\u5b57\u8282\u7684\u6d6e\u70b9\u6570\uff09\u3002\u8fd9\u6210\u4e3a\u5e03\u5c40\u4e2d\u7684 arrayStride\uff0c\u5b83\u7ed9\u51fa\u4e86\u4e00\u4e2a\u9876\u70b9\u7684\u503c\u5230\u4e0b\u4e00\u4e2a\u9876\u70b9\u7684\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u5c5e\u6027\u7684 offset \u5c5e\u6027\u544a\u8bc9\u60a8\u5728\u7ed9\u5b9a\u9876\u70b9\u7684\u6570\u636e\u5757\u4e2d\u5728\u54ea\u91cc\u627e\u5230\u8be5\u5c5e\u6027\u7684\u503c\uff1acoords \u7684 offset \u662f 0\uff0c\u56e0\u4e3a\u5b83\u4f4d\u4e8e\u6570\u636e\u7684\u5f00\u59cb\u4f4d\u7f6e\uff1bcolor \u7684 offset \u662f 8\uff0c\u56e0\u4e3a\u5b83\u4f4d\u4e8e\u6570\u636e\u5f00\u59cb\u4f4d\u7f6e\u7684 8\u4e2a\u5b57\u8282\u5904\u3002</p> <p>\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\u548c\u4e24\u4e2a\u65b0\u53d8\u4f53\u4e4b\u95f4\u8fd8\u6709\u5176\u4ed6\u5dee\u5f02\u3002\u6211\u9f13\u52b1\u60a8\u67e5\u770b\u4e24\u4e2a\u65b0\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u5e76\u9605\u8bfb\u6ce8\u91ca\u3002\u53ea\u6709\u6bcf\u4e2a\u7a0b\u5e8f\u7684\u65b0\u7279\u6027\u6709\u6ce8\u91ca\u3002</p> <p>Before ending this section, we look at two variations on our basic example: basic_webgpu_2.html and basic_webgpu_3.html. Instead of drawing a solid colored triangle, these programs draw a triangle in which each vertex has a different color. The colors for the interior pixels are interpolated from the vertex colors. This is the standard \"RGB triangle\" example.</p> <p></p> <p>Since each vertex has a different color, the color is a vertex attribute that has to be passed as a parameter to the vertex shader entry point. In the new examples, that function has two parameters, the 2D vertex coordinates and the vertex RGB color. Interpolated versions of these two values are used by the fragment shader, so the vertex shader also needs two outputs. Since a function can have only one return value, the two outputs have to be combined into a single data structure. In WGSL, as in GLSL, that data structure is a struct (see Subsection 6.3.2). Here is the shader source code that is used in both of the new examples:</p> <pre><code>struct VertexOutput {  // type for return value of vertex shader\n@builtin(position) position: vec4f,\n@location(0) color : vec3f  \n}\n\n@vertex\nfn vertexMain(\n        @location(0) coords : vec2f, \n        @location(1) color : vec3f  \n    ) -&gt; VertexOutput {  \nvar output: VertexOutput;  \noutput.position = vec4f( coords, 0, 1 );\noutput.color = color; \nreturn output;\n}\n\n@fragment\nfn fragmentMain(@location(0) fragColor : vec3f) -&gt; @location(0) vec4f {\nreturn vec4f(fragColor,1);\n}\n</code></pre> <p>The fragColor parameter to the fragment shader function is the interpolated version of the color output from the vertex shader, even though the name is not the same. In fact, the names don't matter at all; the association between the two values is specified by the @location(0) modifier on both the vertex shader output, color, and the fragment shader parameter, fragColor. Note that the meaning of @location(0) here is very different from the @location(0) annotation on the vertex shader parameter, coords. (Recall that a @location annotation on a vertex shader parameter corresponds to a shaderLocation in the vertex buffer layout on the JavaScript side, and it specifies where the values for that parameter come from.)</p> <p>I will note again that even though the position output from the vertex shader is not used explicitly in the fragment shader function in this example, it is used implicitly. A vertex shader function is always required to have a @builtin(position) output.</p> <p>The JavaScript side of the application must now provide two inputs for the vertex shader function. In the first variation, the two inputs are provided in two separate vertex buffers, and the new vertex buffer layout reflects this, with two array elements corresponding to the two vertex buffers:</p> <pre><code>let vertexBufferLayout = [\n{ // First vertex buffer, for coords (two 32-bit floats per vertex).\n    attributes: [ { shaderLocation:0, offset:0, format: \"float32x2\" } ],\n    arrayStride: 8,  // 8 bytes between values in the buffer\n    stepMode: \"vertex\" \n},\n{ // Second vertex buffer, for colors (three 32-bit floats per vertex).\n    attributes: [ { shaderLocation:1, offset:0, format: \"float32x3\" } ],\n    arrayStride: 12,  // 12 bytes between values in the buffer\n    stepMode: \"vertex\" \n}\n];\n</code></pre> <p>The second variation does something more interesting: It uses just one vertex buffer that contains the values for both parameters. The values for the colors are interleaved with the values for the coordinates. Here is what the data looks like on the JavaScript side:</p> <pre><code>const vertexData = new Float32Array([\n/* coords */     /* color */\n    -0.8, -0.6,      1, 0, 0,      // data for first vertex\n    0.8, -0.6,       0, 1, 0,      // data for second vertex\n    0.0, 0.7,        0, 0, 1       // data for third vertex\n]);\n</code></pre> <p>This array will be copied into the single vertex buffer. The vertex buffer layout reflects the layout of the data in the buffer:</p> <pre><code>let vertexBufferLayout = [\n{   // One vertex buffer, containing values for two attributes.\n    attributes: [\n        { shaderLocation:0, offset:0, format: \"float32x2\" },\n        { shaderLocation:1, offset:8, format: \"float32x3\" }\n        ],\n    arrayStride: 20,\n    stepMode: \"vertex\" \n}\n];\n</code></pre> <p>Note that the data for each buffer takes up 20 bytes (five 4-byte floats). This becomes the arrayStride in the layout, which gives the distance, in bytes, from the values for one vertex to the values for the next vertex. The offset property for an attribute tells where to find the value for that attribute within the block of data for a given vertex: The offset for coords is 0 because it is found at the start of the data; the offset for color is 8 because it is found 8 bytes from the start of the data.</p> <p>There are other differences between our first example and the two new variations. I encourage you to look at the source code for the two new programs and read the comments. Only the new features of each program are commented.</p>"},{"location":"cn/c9/s1/#917-\u81ea\u52a8\u7ed1\u5b9a\u7ec4\u5e03\u5c40","title":"9.1.7 \u81ea\u52a8\u7ed1\u5b9a\u7ec4\u5e03\u5c40","text":"<p>Auto Bind Group Layout</p> \u4e2d\u6587\u82f1\u6587 <p>\u6700\u540e\u4e00\u70b9\u8bf4\u660e\u3002\u7ed1\u5b9a\u7ec4\u5e03\u5c40\u5305\u542b\u4e86\u7ec4\u4e2d\u6bcf\u4e2a\u7ed1\u5b9a\u7684\u4fe1\u606f\uff1a\u7ed1\u5b9a\u5f15\u7528\u7684\u8d44\u6e90\u7c7b\u578b\u4ee5\u53ca\u5b83\u6240\u4f7f\u7528\u7684\u7740\u8272\u5668\u9636\u6bb5\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u4ece\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u63a8\u65ad\u51fa\u6765\u3002\u5f53\u521b\u5efa\u7ba1\u7ebf\u65f6\uff0c\u4f1a\u7ec4\u88c5\u5b8c\u6574\u7684\u7740\u8272\u5668\u7a0b\u5e8f\uff0c\u5e76\u4e14\u7ba1\u7ebf\u53ef\u4ee5\u81ea\u52a8\u6784\u9020\u5b83\u6240\u4f7f\u7528\u7684\u7ed1\u5b9a\u7ec4\u5e03\u5c40\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u7684 layout \u5c5e\u6027\u8bbe\u7f6e\u4e3a \"auto\"\uff0c\u8ba9\u7ba1\u7ebf\u4e3a\u60a8\u521b\u5efa\u7ed1\u5b9a\u7ec4\u5e03\u5c40\uff1a</p> <pre><code>pipelineDescriptor = {\n    .\n    .\n    .\n    layout: \"auto\"\n};\npipeline = device.createRenderPipeline(pipelineDescriptor);\n</code></pre> <p>\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 <code>pipeline.getBindGroupLayout(N)</code>\uff0c\u5176\u4e2d N \u662f\u7ed1\u5b9a\u7ec4\u7f16\u53f7\uff0c\u4ece\u7ba1\u7ebf\u4e2d\u83b7\u53d6\u5e03\u5c40\u3002\u521b\u5efa\u5b9e\u9645\u7684\u7ed1\u5b9a\u7ec4\u65f6\u9700\u8981\u8fd9\u4e2a\u5e03\u5c40\uff1a</p> <pre><code>bndGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n        .\n        .\n        .\n</code></pre> <p>\u4ece\u73b0\u5728\u8d77\uff0c\u6211\u5c06\u5728\u5927\u591a\u6570\u793a\u4f8b\u4e2d\u4f7f\u7528\u81ea\u52a8\u7ed1\u5b9a\u7ec4\u5e03\u5c40\uff0c\u4f46\u5076\u5c14\u6211\u4f1a\u81ea\u5df1\u6307\u5b9a\u5e03\u5c40\uff0c\u4ee5\u5c55\u793a\u4e0d\u540c\u7c7b\u578b\u8d44\u6e90\u7684\u5e03\u5c40\u662f\u4ec0\u4e48\u6837\u7684\u3002</p> <p>One final note. A bind group layout contains information about each binding in the group: what kind of resource the binding refers to and which shader stage it is used in. In general, that information can be deduced from the shader program. The full shader program is assembled when the pipeline is created, and the pipeline can automatically construct the bind group layouts that it uses. You can ask the pipeline to create the bind group layouts by setting the layout property of the pipeline descriptor to \"auto\":</p> <pre><code>pipelineDescriptor = {\n    .\n    .\n    .\nlayout: \"auto\"\n};\npipeline = device.createRenderPipeline( pipelineDescriptor );\n</code></pre> <p>You can then use the function pipeline.getBindGroupLayout(N), where N is the bind group number, to get the layout from the pipeline. The layout is needed to create the actual bind group:</p> <pre><code>bndGroup = device.createBindGroup({\nlayout: pipeline.getBindGroupLayout(0),,\nentries: [ \n    .\n    .\n    .\n</code></pre> <p>I will use auto bind group layout in most of my examples from now on, but I will occasionally specify the layout myself, to show what it looks like for various kinds of resources.</p>"},{"location":"cn/c9/s2/","title":"9.2 \u5b9e\u4f8b\u548c\u7d22\u5f15","text":"<p>Instances and Indices</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0a\u4e00\u8282\u5c55\u793a\u4e86\u5982\u4f55\u5728WebGPU\u4e2d\u7ed8\u5236\u4e00\u4e2a\u56fe\u5143\u3002\u5728\u8fd9\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u5728\u540c\u4e00\u4e2a\u56fe\u50cf\u4e2d\u7ed8\u5236\u591a\u4e2a\u56fe\u5143\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u65b0\u7684\u7ed8\u5236\u9009\u9879\uff1a\u5b9e\u4f8b\u5316\u7ed8\u5236\u548c\u7d22\u5f15\u7ed8\u5236\u3002</p> <p>\u5728\u672c\u8282\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\uff0c\u6211\u4eec\u5c06\u5173\u6ce8\u4e00\u4e2a\u793a\u4f8b\u7684\u53d8\u5316\uff1a\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5c55\u793a\u4e86\u5728\u753b\u5e03\u4e0a\u968f\u673a\u989c\u8272\u7684\u5706\u76d8\u5728\u79fb\u52a8\u3002\u6700\u540e\u4e00\u4e2a\u53d8\u5316\u5c06\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u591a\u91cd\u91c7\u6837\u7684\u6280\u672f\u4e3a\u793a\u4f8b\u6dfb\u52a0\u6297\u952f\u9f7f\u6548\u679c\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6f14\u793a\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5728\u57fa\u672c\u7248\u672c\u548c\u591a\u91cd\u91c7\u6837\u7248\u672c\u4e4b\u95f4\u5207\u6362\u3002\u57fa\u672c\u7248\u672c\u4e2d\u7684\u5706\u76d8\u8fb9\u7f18\u66f4\u52a0\u952f\u9f7f\u72b6\u3002\u5982\u679c\u60a8\u653e\u5927\u7f51\u9875\uff0c\u6548\u679c\u5c06\u66f4\u5bb9\u6613\u770b\u5230\u3002</p> <p></p> <p>The previous section showed how to draw one primitive in WebGPU. In this section we will see how to draw more than one primitive in the same image, and we will cover some new options for drawing them: instanced drawing and indexed drawing.</p> <p>For most of this section, we will be looking at variations on one example: an app that shows randomly colored disks moving around in a canvas. The last variation will add antialiasing to the example using a technique called multisampling. Here is a demo that lets you switch between the basic version and the multisampling version. The edges of the disks in the basic version are more jagged. The effect will be easier to see if you magnify the web page.</p> <p></p>"},{"location":"cn/c9/s2/#921-\u5b9e\u4f8b\u7ed8\u56fe","title":"9.2.1 \u5b9e\u4f8b\u7ed8\u56fe","text":"<p>Instanced Drawing</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b9e\u4f8b\u5316\u7ed8\u5236\u4f7f\u5f97\u80fd\u591f\u901a\u8fc7\u5355\u4e2a\u51fd\u6570\u8c03\u7528\u7ed8\u5236\u540c\u4e00\u4e2a\u56fe\u5143\u7684\u591a\u4e2a\u526f\u672c\u6216\u201c\u5b9e\u4f8b\u201d\u3002WebGL 2.0 \u4e2d\u7684\u5b9e\u4f8b\u5316\u7ed8\u5236\u5728 6.1.8\u5c0f\u8282 \u4e2d\u6709\u6240\u4ecb\u7ecd\u3002\u793a\u4f8b\u7a0b\u5e8f webgpu/instanced_draw.html \u5c55\u793a\u4e86\u5982\u4f55\u5728 WebGPU \u4e2d\u5b9e\u73b0\u5b83\u3002\uff08\u518d\u6b21\u5f3a\u8c03\uff0c\u6211\u5efa\u8bae\u60a8\u9605\u8bfb\u6240\u6709\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u6ce8\u91ca\uff01\uff09</p> <p>\u56fe\u5143\u7684\u4e0d\u540c\u5b9e\u4f8b\u5728\u6e32\u67d3\u56fe\u50cf\u4e2d\u53ef\u4ee5\u770b\u8d77\u6765\u4e0d\u540c\uff0c\u53ea\u8981\u5b83\u4eec\u5bf9\u67d0\u4e9b\u5c5e\u6027\u6709\u4e0d\u540c\u7684\u503c\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u5b9e\u4f8b\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u989c\u8272\u3002\u989c\u8272\u5c06\u662f\u201c\u5b9e\u4f8b\u5c5e\u6027\u201d\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u4e86\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\u65b9\u6cd5 <code>draw(N)</code> \u6765\u7ed8\u5236\u5177\u6709 N \u4e2a\u9876\u70b9\u7684\u56fe\u5143\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u9876\u70b9\uff0c\u7cfb\u7edf\u5c06\u4ece\u9876\u70b9\u7f13\u51b2\u533a\u4e2d\u63d0\u53d6\u8be5\u9876\u70b9\u7684\u5c5e\u6027\u503c\uff0c\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u3002\u5b9e\u4f8b\u5c5e\u6027\u7684\u5de5\u4f5c\u65b9\u5f0f\u76f8\u540c\uff0c\u53ea\u662f\u5b9e\u4f8b\u5c5e\u6027\u7684\u503c\u5728\u7ed9\u5b9a\u5b9e\u4f8b\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u90fd\u662f\u76f8\u540c\u7684\u3002</p> <p>\u5b9e\u4f8b\u5316\u7ed8\u5236\u4f7f\u7528\u4e0e\u5e38\u89c4\u7ed8\u5236\u76f8\u540c\u7684 <code>draw()</code> \u65b9\u6cd5\uff0c\u4f46\u6709\u4e00\u4e2a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u8c03\u7528 <code>draw(N, M)</code> \u5c06\u7ed8\u5236\u5177\u6709 N \u4e2a\u9876\u70b9\u7684\u56fe\u5143\u7684 M \u4e2a\u5b9e\u4f8b\u3002\u6548\u679c\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>for (i = 0; i &lt; M; i++)\n    \u83b7\u53d6\u5b9e\u4f8b i \u7684\u5b9e\u4f8b\u5c5e\u6027\u503c\nfor (v = 0; v &lt; N; v++)\n    \u83b7\u53d6\u9876\u70b9 v \u7684\u9876\u70b9\u5c5e\u6027\u503c\n    \u8c03\u7528\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\uff0c\u4f20\u5165\u6240\u6709\u5c5e\u6027\u503c\n</code></pre> <p>\uff08<code>draw()</code> \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u63a5\u53d7\u53e6\u5916\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u6307\u5b9a\u9876\u70b9\u548c\u5b9e\u4f8b\u7684\u8d77\u59cb\u7d22\u5f15\u3002\uff09</p> <p>\u9876\u70b9\u5c5e\u6027\u503c\u6765\u81ea\u9876\u70b9\u7f13\u51b2\u533a\u3002\u5b9e\u4f8b\u5c5e\u6027\u503c\u4e5f\u662f\u5982\u6b64\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\u9876\u70b9\u7f13\u51b2\u533a\u5e03\u5c40\u89c4\u8303\u4e2d\u7684\u4e00\u4e2a\u5c0f\u53d8\u5316\u3002\u662f\u65f6\u5019\u770b\u4e00\u4e2a\u4f8b\u5b50\u4e86\u3002\u793a\u4f8b\u7a0b\u5e8f\u4f7f\u7528\u5355\u4e2a <code>draw()</code> \u8c03\u7528\u7ed8\u5236\u4e86\u4e94\u5341\u4e2a\u5f69\u8272\u5706\u76d8\u3002\u57fa\u672c\u56fe\u5143\u662f\u4e2d\u5fc3\u5728 (0,0) \u7684\u5706\u76d8\u3002\u5706\u76d8\u9876\u70b9\u7684\u5750\u6807\u4f5c\u4e3a\u4e00\u4e2a\u9876\u70b9\u5c5e\u6027\u7ed9\u51fa\u3002\u6bcf\u4e2a\u5f69\u8272\u5706\u76d8\u662f\u4e00\u4e2a\u5b9e\u4f8b\u3002\u5706\u76d8\u7684\u989c\u8272\u662f\u5b9e\u4f8b\u5c5e\u6027\u3002\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5c5e\u6027 offset \u6307\u5b9a\u4e86\u5e94\u7528\u4e8e\u56fe\u5143\u7684\u5e73\u79fb\u53d8\u6362\u3002\u5728\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\uff0c\u9876\u70b9\u5750\u6807\u3001\u989c\u8272\u548c\u504f\u79fb\u91cf\u662f\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u7684\u53c2\u6570\uff1a</p> <pre><code>@vertex\nfn vertexMain( \n        @location(0) coords : vec2f,\n        @location(1) offset : vec2f,\n        @location(2) color : vec3f\n    ) -&gt; VertexOutput {\n    var output : VertexOutput; // (\u5e26 position \u548c color \u5b57\u6bb5\u7684\u7ed3\u6784\u4f53\u3002)\n    output.position = vec4f( coords + offset, 0, 1 );\n    output.color = vec4f(color,1);\n    return output;\n}\n</code></pre> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u53c2\u6570\u5217\u8868\u4e2d\u7684 <code>@location</code> \u5c5e\u6027\u7528\u4e8e\u5c06\u53c2\u6570\u4e0e\u6765\u81ea\u7a0b\u5e8f JavaScript \u7aef\u7684\u503c\u5173\u8054\u8d77\u6765\u3002\u5173\u8054\u662f\u901a\u8fc7 JavaScript \u7aef\u9876\u70b9\u7f13\u51b2\u533a\u5e03\u5c40\u4e2d\u7684 shaderLocation \u5c5e\u6027\u8fdb\u884c\u7684\u3002\u8fd9\u91cc\u662f\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u5e03\u5c40\uff0c\u5b83\u6307\u5b9a\u4e86\u6bcf\u4e2a\u53c2\u6570\u7684\u6765\u6e90\uff1a</p> <pre><code>let vertexBufferLayout = [\n    { // \u7b2c\u4e00\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u7528\u4e8e\u9876\u70b9\u5750\u6807\u3002\n        attributes: [ \n            { shaderLocation:0, offset:0, format: \"float32x2\" }\n        ],\n        arrayStride: 8,\n        stepMode: \"vertex\"   // \u8fd9\u662f\u4e00\u4e2a\u9876\u70b9\u5c5e\u6027\u3002\n    },\n    { // \u7b2c\u4e8c\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u7528\u4e8e\u5b9e\u4f8b\u504f\u79fb\u3002\n        attributes: [ \n            { shaderLocation:1, offset:0, format: \"float32x2\" }\n        ],\n        arrayStride: 8,\n        stepMode: \"instance\"  // \u8fd9\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5c5e\u6027\u3002\n    },\n    { // \u7b2c\u4e09\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u7528\u4e8e\u5b9e\u4f8b\u989c\u8272\u3002\n        attributes: [ \n            { shaderLocation:2, offset:0, format: \"float32x3\" }\n        ],\n        arrayStride: 12,\n        stepMode: \"instance\"  // \u8fd9\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5c5e\u6027\u3002\n    }\n];\n</code></pre> <p>\u5982\u60a8\u6240\u89c1\uff0c\u9876\u70b9\u5c5e\u6027\u548c\u5b9e\u4f8b\u5c5e\u6027\u4e4b\u95f4\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e stepMode \u5c5e\u6027\u7684\u503c\u3002\u6b65\u8fdb\u6a21\u5f0f \"vertex\" \u544a\u8bc9\u7cfb\u7edf\u4e3a\u56fe\u5143\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u4ece\u9876\u70b9\u7f13\u51b2\u533a\u4e2d\u63d0\u53d6\u4e00\u4e2a\u503c\u3002\u6b65\u8fdb\u6a21\u5f0f \"instance\" \u610f\u5473\u7740\u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u63d0\u53d6\u4e00\u4e2a\u503c\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u5706\u76d8\u53ef\u4ee5\u88ab\u52a8\u753b\u5316\u3002\u8981\u7ed8\u5236\u52a8\u753b\u7684\u4e0b\u4e00\u5e27\uff0c\u7a0b\u5e8f\u53ea\u9700\u8ba1\u7b97\u6bcf\u4e2a\u5706\u76d8\u7684\u504f\u79fb\u5c5e\u6027\u7684\u65b0\u503c\uff0c\u5c06\u65b0\u503c\u5199\u5165 GPU \u7aef\u4fdd\u5b58\u504f\u79fb\u91cf\u7684\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u7136\u540e\u91cd\u65b0\u6e32\u67d3\u56fe\u50cf\u3002\u5173\u4e8e\u52a8\u753b\u7684\u4e00\u4e2a\u6280\u672f\u8981\u70b9\u53ef\u80fd\u4f1a\u56f0\u6270\u60a8\uff1a\u7a0b\u5e8f\u7684 JavaScript \u7aef\u7b80\u5355\u5730\u6392\u961f\u4e86\u5c06\u5728 GPU \u7aef\u7a0d\u540e\u6267\u884c\u7684\u547d\u4ee4\u3002\u4e0d\u77e5\u4f55\u6545\uff0c\u53cc\u65b9\u5fc5\u987b\u540c\u6b65\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u5728\u65e7\u56fe\u50cf\u5df2\u5728\u7f51\u9875\u4e0a\u8ba1\u7b97\u5e76\u663e\u793a\u51fa\u6765\u4e4b\u524d\uff0c\u4e0d\u8981\u5f00\u59cb\u7ed8\u5236\u65b0\u56fe\u50cf\u3002\u90a3\u4e2a\u540c\u6b65\u7531\u7528\u4e8e\u5b9e\u73b0\u52a8\u753b\u7684 requestAnimationFrame() \u65b9\u6cd5\u6765\u5904\u7406\u3002\u8be5\u65b9\u6cd5\u5728\u524d\u4e00\u5e27\u5b8c\u6210\u4e4b\u524d\u4e0d\u4f1a\u542f\u52a8\u65b0\u5e27\u3002</p> <p>\u5c3d\u7ba1\u4e0e\u5b9e\u4f8b\u5316\u7ed8\u5236\u65e0\u5173\uff0c\u4f46\u793a\u4f8b\u7a0b\u5e8f\u7684\u53e6\u4e00\u4e2a\u6709\u8da3\u4e4b\u5904\u5728\u4e8e\u5b83\u5982\u4f55\u7ed8\u5236\u5706\u76d8\u3002\u5706\u76d8\u88ab\u8fd1\u4f3c\u4e3a\u591a\u8fb9\u5f62\u3002\u5728 WebGL \u4e2d\uff0c\u6211\u4f1a\u5c06\u5706\u76d8\u4f5c\u4e3a TRIANGLE_FAN \u6765\u7ed8\u5236\uff0c\u4f46 WebGPU \u7f3a\u5c11\u8fd9\u79cd\u56fe\u5143\u7c7b\u578b\u3002\u8fd9\u91cc\uff0c\u5706\u76d8\u662f\u4f7f\u7528\u4e09\u89d2\u5f62\u6761\u5e26\u56fe\u5143\u7ed8\u5236\u7684\uff0c\u8fd9\u9700\u8981\u4ed4\u7ec6\u6392\u5e8f\u9876\u70b9\uff1a</p> <p></p> <p>Instanced drawing makes it possible to draw multiple copies, or \"instances,\" of the same primitive with a single function call. Instanced drawing in WebGL 2.0 was covered in Subsection 6.1.8. The sample program webgpu/instanced_draw.html shows how to do it in WebGPU. (Again, I urge you to read the comments in the source code for all sample programs!)</p> <p>The various instances of the primitive can look different in the rendered image, provided that they have different values for some attributes. For example, the instances can have different colors. The color would be an \"instance attribute.\"</p> <p>We have used the render pass encoder method draw(N) to draw a primitive that has N vertices. For each vertex, the system will pull attribute values from vertex buffers for that vertex and will pass them as parameters to the vertex shader entry point. Instance properties work the same way, except that the value for an instance attribute is the same for every vertex in a given instance.</p> <p>Instanced drawing uses the same draw() method as regular drawing, but with a second parameter. A call to draw(N,M) will draw M instances of a primitive that has N vertices. The effect is similar to the following pseudocode:</p> <pre><code>for (i = 0; i &lt; M; i++)\n    get instance attribute values for instance i\n    for (v = 0; v &lt; N; v++)\n    get vertex attribute values for vertex v\n    call vertex shader function, passing in all attribute values\n</code></pre> <p>(The draw() method can also take two more optional parameters specifying the start index for the vertices and the start index for the instances.)</p> <p>Vertex attribute values come from vertex buffers. So do instance attribute values. The only difference is a small change in the vertex buffer layout specification. It's time to look at an example. The sample program draws fifty colored disks which a single call to draw(). The basic primitive is a disk centered at (0,0). The coordinates for the vertices of the disk are given as a vertex attribute. Each colored disk is an instance. The color of the disk is an instance attribute. Another instance attribute, offset, specifies a translation transformation that is applied to the primitive. In the shader source code, the vertex coordinates, color, and offset are parameters to the vertex shader function:</p> <pre><code>@vertex\nfn vertexMain( \n        @location(0) coords : vec2f,\n        @location(1) offset : vec2f,\n        @location(2) color : vec3f\n    ) -&gt; VertexOutput {\nvar output : VertexOutput; // (A struct with position and color fields.)\noutput.position = vec4f( coords + offset, 0, 1 );\noutput.color = vec4f(color,1);\nreturn output;\n}\n</code></pre> <p>Recall that the @location attributes in the parameter list are used to associate the parameters with values coming from the JavaScript side of the program. The association is made by the shaderLocation properties in the vertex buffer layout on the JavaScript side. Here is the layout from the sample program, which specifies the source for each parameter:</p> <pre><code>let vertexBufferLayout = [\n{ // First vertex buffer, for vertex coord.\n    attributes: [ \n        { shaderLocation:0, offset:0, format: \"float32x2\" }\n    ],\n    arrayStride: 8,\n    stepMode: \"vertex\"   // This is a vertex attribute.\n},\n{ // Second vertex buffer, for instance offsets.\n    attributes: [ \n        { shaderLocation:1, offset:0, format: \"float32x2\" }\n    ],\n    arrayStride: 8,\n    stepMode: \"instance\"  // This is an instance attribute.\n},\n{ // Third vertex buffer, for instance colors.\n    attributes: [ \n        { shaderLocation:2, offset:0, format: \"float32x3\" }\n    ],\n    arrayStride: 12,\n    stepMode: \"instance\"  // This is an instance attribute.\n}\n];\n</code></pre> <p>As you can see, the only difference between vertex and instance attributes is the value of the stepMode property. Step mode \"vertex\" tells the system to pull a value from the vertex buffer for each vertex in the primitive. Step mode \"instance\" means to pull out a value for each instance.</p> <p>The disks in the sample program can be animated. To draw the next frame in the animation, the program simply computes a new value for the offset attribute of each disk, writes the new values to the vertex buffer that holds the offsets on the GPU side, and then re-renders the image. One technical point about animation might be bothering you: The JavaScript side of the program simply enqueues commands that will be executed later on the GPU side. Somehow, the two sides have to be synchronized, to make sure that we don't start drawing a new image until the old image has been computed and displayed on the web page. That synchronization is taken care of by the requestAnimationFrame() method that is used to implement the animation. That method will not start a new frame until the previous frame is complete.</p> <p>Although it is not related to instanced drawing, another interesting point from the sample program is how it draws a disk. The disk is approximated as a polygon. In WebGL, I would draw the disk as a TRIANGLE_FAN, but WebGPU lacks that primitive type. Here, the disk is drawn using a triangle-strip primitive, which requires a careful ordering of the vertices:</p> <p></p>"},{"location":"cn/c9/s2/#922-\u7d22\u5f15\u7ed8\u56fe","title":"9.2.2 \u7d22\u5f15\u7ed8\u56fe","text":"<p>Indexed Drawing</p> \u4e2d\u6587\u82f1\u6587 <p>\u53e6\u4e00\u79cd\u7ed8\u5236\u5706\u76d8\u7684\u65b9\u6cd5\u662f\u5c06\u5176\u4f5c\u4e3a\u4e09\u89d2\u5f62\u5217\u8868\u56fe\u5143\uff0c\u5c06\u5706\u76d8\u50cf\u9985\u997c\u7684\u5207\u7247\u4e00\u6837\u5206\u5272\u3002\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u5c06\u662f\u5706\u76d8\u4e2d\u5fc3\u52a0\u4e0a\u5706\u5468\u4e0a\u7684\u4e24\u4e2a\u8fde\u7eed\u9876\u70b9\u3002\u6ce8\u610f\uff0c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u9876\u70b9\u53ef\u4ee5\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u4e09\u89d2\u5f62\u4e2d\u4f7f\u7528\u3002\u8fd9\u610f\u5473\u7740\u5706\u76d8\u53ef\u4ee5\u6700\u6709\u6548\u5730\u5b9e\u73b0\u4e3a\u7d22\u5f15\u9762\u96c6\u3002\u7d22\u5f15\u9762\u96c6\u7684\u6570\u636e\u5305\u62ec\u9876\u70b9\u5750\u6807\u5217\u8868\uff08\u5982\u679c\u9700\u8981\uff0c\u8fd8\u53ef\u4ee5\u5305\u62ec\u5176\u4ed6\u9876\u70b9\u5c5e\u6027\u503c\u7684\u76f8\u5e94\u5217\u8868\uff09\u548c\u9876\u70b9\u7d22\u5f15\u5217\u8868\u3002\uff08\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 3.4.1\u5c0f\u8282\u3002\uff09</p> <p>WebGPU \u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\u6709\u4e00\u4e2a <code>drawIndexed(N)</code> \u65b9\u6cd5\uff0c\u7528\u4e8e\u5b9e\u73b0\u8fd9\u79cd\u7c7b\u578b\u7684\u7ed8\u5236\u3002\u9664\u4e86\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u6b64\u65b9\u6cd5\u8fd8\u9700\u8981\u4e00\u4e2a\u7d22\u5f15\u7f13\u51b2\u533a\u6765\u4fdd\u5b58\u9876\u70b9\u7d22\u5f15\u3002\u7d22\u5f15\u7f13\u51b2\u533a\u4e2d\u7684\u503c\u5fc5\u987b\u662f16\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u621632\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002<code>drawIndexed(N)</code> \u7684\u6548\u679c\u662f\uff1a</p> <pre><code>for (i = 0; i &lt; N; i++)\n    Let v be index number i from the index buffer\n    get attribute values for vertex v from the vertex buffers\n    call the vertex shader function, passing in the attribute values\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8f webgpu/indexed_draw.html \u4f7f\u7528 <code>drawIndexed()</code> \u5c06\u5355\u4e2a\u5706\u76d8\u4f5c\u4e3a\u4e09\u89d2\u5f62\u5217\u8868\u56fe\u5143\u7ed8\u5236\u3002\u4e3a\u4e86\u589e\u52a0\u4e00\u4e9b\u8da3\u5473\u6027\uff0c\u5b83\u8fd8\u4f7f\u7528\u57fa\u672c\u7684 <code>draw()</code> \u65b9\u6cd5\u5c06\u5706\u76d8\u7684\u5706\u5468\u4f5c\u4e3a\u7ebf\u5e26\u56fe\u5143\u7ed8\u5236\u3002\u56e0\u6b64\uff0c\u540c\u4e00\u4e2a\u7a0b\u5e8f\u8fd8\u5c55\u793a\u4e86\u5982\u4f55\u5728\u540c\u4e00\u4e2a\u6e32\u67d3\u901a\u9053\u4e2d\u6e32\u67d3\u4e24\u4e2a\u56fe\u5143\u3002</p> <p>\u5728\u7a0b\u5e8f\u4e2d\uff0cVERTEX_COUNT \u662f\u7528\u6765\u8fd1\u4f3c\u5706\u76d8\u7684\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u6570\u3002\u9876\u70b9\u6309\u9006\u65f6\u9488\u987a\u5e8f\u7f16\u53f7\u5728\u5706\u76d8\u5468\u56f4\uff0c\u9876\u70b9\u7f16\u53f70\u5728\u672b\u5c3e\u91cd\u590d\u3002\u7136\u540e\uff0cVERTEX_COUNT+1 \u4e2a\u9876\u70b9\u53ef\u4ee5\u6309\u987a\u5e8f\u7528\u6765\u7ed8\u5236\u5706\u76d8\u8f6e\u5ed3\u4f5c\u4e3a\u7ebf\u5e26\u3002\u4e3a\u4e86\u7ed8\u5236\u5706\u76d8\u7684\u5185\u90e8\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u5706\u76d8\u7684\u4e2d\u5fc3\uff080,0\uff09\u5217\u5165\u5217\u8868\u3002\u4e2d\u5fc3\u4f5c\u4e3a\u9876\u70b9\u7f16\u53f7 VERTEX_COUNT+1 \u6dfb\u52a0\u3002\u8981\u6e32\u67d3\u5185\u90e8\uff0c\u6211\u4eec\u9700\u8981\u7ed8\u5236 3VERTEX_COUNT \u4e2a\u9876\u70b9\u2014\u2014\u6bcf\u4e2a\u4e09\u89d2\u5f62\u4e09\u4e2a\u9876\u70b9\u3002\u7d22\u5f15\u7f13\u51b2\u533a\u7684\u6570\u636e\u52a0\u8f7d\u5230 JavaScript \u7684\u957f\u5ea6\u4e3a 3VERTEX_COUNT \u7684 <code>Uint16Array</code>\uff1a</p> <pre><code>/* Fill diskIndices with the vertex indices for the VERTEX_COUNT\n* triangles that make up the disk.  Each triangle uses the center\n* of the disk and two consecutive vertices on the outline. */\n\nfor (let i = 0; i &lt; VERTEX_COUNT; i++) {\n    diskIndices[3*i] = VERTEX_COUNT+1;  // center of disk\n    diskIndices[3*i+1] = i;             // vertex number i\n    diskIndices[3*i+2] = i+1;           // vertex number i+1\n}\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u7f13\u51b2\u533a\u6765\u5728 GPU \u7aef\u4fdd\u5b58\u7d22\u5f15\uff0c\u5e76\u5c06 diskIndices \u4e2d\u7684\u503c\u5199\u5165\u8be5\u7f13\u51b2\u533a\uff1a</p> <pre><code>indexBuffer = device.createBuffer({\n    size: diskIndices.byteLength,\n    usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST\n});\n</code></pre> <pre><code>device.queue.writeBuffer(indexBuffer, 0, diskIndices);\n</code></pre> <p><code>GPUBufferUsage.INDEX</code> \u8868\u793a\u7f13\u51b2\u533a\u5c06\u7528\u4f5c\u7d22\u5f15\u7f13\u51b2\u533a\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u4e0e\u521b\u5efa\u9876\u70b9\u7f13\u51b2\u533a\u76f8\u540c\u3002\u4f46\u4e0e\u9876\u70b9\u7f13\u51b2\u533a\u4e0d\u540c\uff0c\u7d22\u5f15\u7f13\u51b2\u533a\u4e0d\u9644\u52a0\u5230\u7ba1\u7ebf\u3002\u76f8\u53cd\uff0c\u5b83\u5728\u521b\u5efa\u6e32\u67d3\u901a\u9053\u65f6\u6307\u5b9a\uff1a</p> <pre><code>passEncoder.setIndexBuffer(indexBuffer, \"uint16\");\n</code></pre> <p>\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u7d22\u5f15\u662f16\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff1b\u53e6\u4e00\u79cd\u9009\u62e9\u662f \"uint32\"\uff0c\u7528\u4e8e32\u4f4d\u6574\u6570\u3002</p> <p>\u67e5\u770b\u6e32\u67d3\u5706\u76d8\u5185\u90e8\u548c\u8f6e\u5ed3\u7684\u5b8c\u6574\u4ee3\u7801\u5c06\u662f\u503c\u5f97\u7684\u3002\u5185\u90e8\u548c\u8f6e\u5ed3\u4f7f\u7528\u4e0d\u540c\u7684\u56fe\u5143\u62d3\u6251\u3002\u7531\u4e8e\u56fe\u5143\u62d3\u6251\u662f\u6e32\u67d3\u7ba1\u7ebf\u7684\u5c5e\u6027\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u5185\u90e8\u548c\u8f6e\u5ed3\u4f7f\u7528\u5355\u72ec\u7684\u7ba1\u7ebf\u3002\u7531\u4e8e\u7ba1\u7ebf\u662f\u6e32\u67d3\u901a\u9053\u7684\u4e00\u4e2a\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5185\u90e8\u548c\u8f6e\u5ed3\u7f16\u7801\u4e24\u4e2a\u6e32\u67d3\u901a\u9053\uff1a</p> <pre><code>function draw() {\nlet commandEncoder = device.createCommandEncoder();\nlet renderPassDescriptor = {\n    colorAttachments: [{\n        clearValue: { r: 1, g: 1, b: 1, a: 1 }, // White background.\n        loadOp: \"\", // To be assigned later!\n        storeOp: \"store\",\n        view: context.getCurrentTexture().createView()\n    }]\n};\n\n/* First render pass draws the disk, using a \"triangle-list\" topology. */\n\nrenderPassDescriptor.colorAttachments[0].loadOp = \"clear\";\nlet passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\npassEncoder.setPipeline(pipelineForDisk); // uses \"triangle-list\"\npassEncoder.setVertexBuffer(0,vertexBuffer);\npassEncoder.setIndexBuffer(indexBuffer, \"uint16\");\npassEncoder.drawIndexed( 3*VERTEX_COUNT ); // 3 vertices per triangle.\npassEncoder.end();\n\n/* Second render pass draws the outline, using a \"line-strip\" topology. */\n\nrenderPassDescriptor.colorAttachments[0].loadOp = \"load\"; // DON'T clear!\npassEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\npassEncoder.setPipeline(pipelineForOutline); // uses \"line-strip\"\npassEncoder.setVertexBuffer(0,vertexBuffer);\npassEncoder.draw(VERTEX_COUNT+1);\npassEncoder.end();\n\nlet commandBuffer = commandEncoder.finish();\ndevice.queue.submit([commandBuffer]);\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u6b21\u6e32\u67d3\u901a\u9053\uff0cloadOp \u662f \"clear\"\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u5728\u6e32\u67d3\u5706\u76d8\u4e4b\u524d\u7528\u80cc\u666f\u989c\u8272\u586b\u5145\u56fe\u50cf\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u6b21\u6e32\u67d3\u901a\u9053\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u73b0\u6709\u56fe\u50cf\u4e0a\u7ed8\u5236\u8f6e\u5ed3\uff0c\u6240\u4ee5 loadOp \u5fc5\u987b\u662f \"load\"\u3002\u540c\u4e00\u4e2a renderPassDescriptor \u53ef\u4ee5\u7528\u4e8e\u4e24\u4e2a\u901a\u9053\uff0c\u53ea\u9700\u66f4\u6539 loadOp \u5c5e\u6027\u5373\u53ef\u3002</p> <p>Another way to draw a disk is as a triangle-list primitive, with the disk divided up like the slices of a pie. The vertices for one of the triangles would be the center of the disk plus two consecutive vertices on the circumference. Note that a given vertex can be used in several different triangles. This means that the disk can be implemented most efficiently as an indexed face set. The data for an indexed face set consists of a list of vertex coordinates (plus corresponding lists of values for other vertex attributes if needed) and a list of vertex indices. (See Subsection 3.4.1 for the more details.)</p> <p>A WebGPU render pass encoder has a drawIndexed(N) method that implements this type of drawing. In addition to vertex buffers, this method requires an index buffer to hold the vertex indices. The values in the index buffer must be either 16-bit unsigned integers or 32-bit unsigned integers. The effect of drawIndexed(N) is</p> <pre><code>for (i = 0; i &lt; N; i++)\n    Let v be index number i from the index buffer\n    get attribute values for vertex v from the vertex buffers\n    call the vertex shader function, passing in the attribute values\n</code></pre> <p>The sample program webgpu/indexed_draw.html draws a single disk as a triangle-list primitive using drawIndexed(). To add a little interest, it also draws the circumference of the disk as a line-strip primitive, using the basic draw() method. So the same program also shows how to render two primitives in the same render pass.</p> <p>In the program, VERTEX_COUNT is the number of vertices of the polygon that is used to approximate the disk. The vertices are numbered in counterclockwise order around the disk, with vertex number 0 repeated at the end. The VERTEX_COUNT+1 vertices can then be used in order to draw the outline of the disk as a line-strip. For drawing the interior of disk, we will also need to have the center of the disk, (0,0), in the list. The center is added as vertex number VERTEX_COUNT+1. To render the interior, we need to draw 3*VERTEX_COUNT vertices\u2014three vertices for each triangle. The data for the index buffer is loaded into a JavaScript Uint16Array of length 3*VERTEX_COUNT:</p> <pre><code>/* Fill diskIndices with the vertex indices for the VERTEX_COUNT\n\n* triangles that make up the disk.  Each triangle uses the center\n* of the disk and two consecutive vertices on the outline. */\n\nfor (let i = 0; i &lt; VERTEX_COUNT; i++) {\n    diskIndices[3*i] = VERTEX_COUNT+1;  // center of disk\n    diskIndices[3*i+1] = i;             // vertex number i\n    diskIndices[3*i+2] = i+1;           // vertex number i+1\n}\n</code></pre> <p>A buffer is created to hold the indices on the GPU side, and the values in diskIndices are written to that buffer:</p> <pre><code>indexBuffer = device.createBuffer({\n    size: diskIndices.byteLength,\n    usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST\n});\n</code></pre> <p>device.queue.writeBuffer(indexBuffer, 0, diskIndices); The GPUBufferUsage.INDEX indicates that the buffer will be used as an index buffer. Otherwise, this is the same as creating a vertex buffer. But unlike vertex buffers, an index buffer is not attached to a pipeline. Instead, it is specified when creating the render pass:</p> <pre><code>passEncoder.setIndexBuffer(indexBuffer, \"uint16\");\n</code></pre> <p>The second parameter says that the indices are 16-bit unsigned integers; the alternative is \"uint32\" for 32-bit integers.</p> <p>It will be worthwhile to look at the full code for rendering the disk interior and outline. The interior and the outline use different primitive topologies. Since the primitive topology is a property of the render pipeline, we need to use separate pipelines for the interior and for the outline. Since the pipeline is an aspect of a rendering pass, we need to encode two render passes:</p> <pre><code>function draw() {\nlet commandEncoder = device.createCommandEncoder();\nlet renderPassDescriptor = {\n    colorAttachments: [{\n        clearValue: { r: 1, g: 1, b: 1, a: 1 }, // White background.\n        loadOp: \"\", // To be assigned later!\n        storeOp: \"store\",\n        view: context.getCurrentTexture().createView()\n    }]\n};\n\n/*First render pass draws the disk, using a \"triangle-list\" topology.*/\n\nrenderPassDescriptor.colorAttachments[0].loadOp = \"clear\";\nlet passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\npassEncoder.setPipeline(pipelineForDisk); // uses \"triangle-list\"\npassEncoder.setVertexBuffer(0,vertexBuffer);\npassEncoder.setIndexBuffer(indexBuffer, \"uint16\");\npassEncoder.drawIndexed( 3*VERTEX_COUNT ); // 3 vertices per triangle.\npassEncoder.end();\n\n/*Second render pass draws the outline, using a \"line-strip\" topology.*/\n\nrenderPassDescriptor.colorAttachments[0].loadOp = \"load\"; // DON'T clear!\npassEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\npassEncoder.setPipeline(pipelineForOutline); // uses \"line-strip\"\npassEncoder.setVertexBuffer(0,vertexBuffer);\npassEncoder.draw(VERTEX_COUNT+1);\npassEncoder.end();\n\nlet commandBuffer = commandEncoder.finish();\ndevice.queue.submit([commandBuffer]);\n}\n</code></pre> <p>Note that for the first render pass, the loadOp is \"clear\", since we want to fill the image with the background color before rendering the disk. For the second render pass, we want to draw the outline on top of the existing image, so the loadOp must be \"load\". The same renderPassDescriptor can be used for both passes, with just the loadOp property changed.</p>"},{"location":"cn/c9/s2/#923-\u7ed8\u5236\u591a\u4e2a\u57fa\u5143","title":"9.2.3 \u7ed8\u5236\u591a\u4e2a\u57fa\u5143","text":"<p>Drawing Multiple Primitives</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u60f3\u5728\u6211\u7684\u79fb\u52a8\u5706\u76d8\u793a\u4f8b\u4e2d\u7ed8\u5236\u5f69\u8272\u5706\u76d8\u7684\u8f6e\u5ed3\u3002\u7136\u800c\uff0c\u6211\u4e0d\u80fd\u7b80\u5355\u5730\u4f7f\u7528\u5b9e\u4f8b\u5316\u7ed8\u5236\u6765\u7ed8\u5236\u6240\u6709\u5706\u76d8\uff0c\u7136\u540e\u518d\u7528\u5b83\u6765\u7ed8\u5236\u8f6e\u5ed3\uff0c\u56e0\u4e3a\u8fd9\u5c06\u663e\u793a\u6bcf\u4e2a\u5706\u76d8\u7684\u5b8c\u6574\u8f6e\u5ed3\uff0c\u751a\u81f3\u662f\u5e94\u8be5\u88ab\u5176\u4ed6\u5706\u76d8\u906e\u6321\u7684\u8f6e\u5ed3\u90e8\u5206\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u6211\u5728\u7a0b\u5e8f\u4e2d\u6dfb\u52a0\u6df1\u5ea6\u6d4b\u8bd5\uff0c\u6211\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u89c1 9.4.1\u5c0f\u8282\u3002\uff09\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u653e\u5f03\u5b9e\u4f8b\u5316\u7ed8\u5236\uff0c\u5206\u522b\u7ed8\u5236\u6bcf\u4e2a\u5706\u76d8\u3002\u8fd9\u5c31\u662f\u6211\u5728\u793a\u4f8b\u7a0b\u5e8f webgpu/draw_multiple.html \u4e2d\u6240\u505a\u7684\u3002\u8be5\u7a0b\u5e8f\u8fd8\u5f15\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 WebGPU \u7279\u6027\u3002</p> <p>\u65b0\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u5706\u76d8\u7684\u7ed8\u5236\u65b9\u5f0f\u4e0e webgpu/indexed_draw.html \u4e2d\u7684\u5355\u4e2a\u5706\u76d8\u76f8\u540c\u3002\u95ee\u9898\u662f\u5706\u76d8\u6709\u4e0d\u540c\u7684\u989c\u8272\u548c\u504f\u79fb\u91cf\u3002\u5728 webgpu/instanced_draw.html \u4e2d\uff0c\u989c\u8272\u548c\u504f\u79fb\u91cf\u662f\u6765\u81ea\u9876\u70b9\u7f13\u51b2\u533a\u7684\u5b9e\u4f8b\u5c5e\u6027\uff0c\u5b83\u4eec\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u3002\u5728\u65b0\u7a0b\u5e8f\u4e2d\uff0c\u5b83\u4eec\u88ab\u79fb\u52a8\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a uniform \u53d8\u91cf\u4e2d\uff1a</p> <pre><code>struct DiskInfo {\n    color : vec3f,  // \u5706\u76d8\u7684\u5185\u90e8\u989c\u8272\n    offset : vec2f  // \u5e94\u7528\u4e8e\u5706\u76d8\u7684\u5e73\u79fb\n}\n\n@group(0) @binding(0) var&lt;uniform&gt; diskInfo : DiskInfo;\n</code></pre> <p>uniform \u53d8\u91cf\u7684\u503c\u5b58\u50a8\u5728 uniform \u7f13\u51b2\u533a\u4e2d\u3002\u5728\u7ed8\u5236\u6bcf\u4e2a\u5706\u76d8\u4e4b\u524d\uff0c\u5fc5\u987b\u5c06\u8be5\u5706\u76d8\u7684\u989c\u8272\u548c\u504f\u79fb\u91cf\u590d\u5236\u5230 uniform \u7f13\u51b2\u533a\u4e2d\u3002\u57fa\u672c\u601d\u60f3\u5f88\u7b80\u5355\uff1a</p> <pre><code>\u5bf9\u4e8e\u6bcf\u4e2a\u5706\u76d8\uff1a\n    \u5c06\u8be5\u5706\u76d8\u7684\u504f\u79fb\u91cf\u548c\u989c\u8272\u590d\u5236\u5230 uniform \u7f13\u51b2\u533a\n    \u6267\u884c\u4e00\u4e2a\u6e32\u67d3\u901a\u9053\u6765\u7ed8\u5236\u5706\u76d8\u5185\u90e8\n    \u6267\u884c\u4e00\u4e2a\u6e32\u67d3\u901a\u9053\u6765\u7ed8\u5236\u5706\u76d8\u8f6e\u5ed3\n</code></pre> <p>\u4ee5\u524d\uff0c\u6211\u4eec\u4f7f\u7528 device.queue.writeBuffer() \u5c06\u6570\u636e\u4ece JavaScript \u7aef\u590d\u5236\u5230 GPU \u4e0a\u7684\u7f13\u51b2\u533a\u3002\u53ea\u8981\u6211\u4eec\u4e3a\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684\u547d\u4ee4\u7f16\u7801\u5668\uff0c\u8fd9\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u8fd9\u5c31\u662f\u6211\u5728\u7a0b\u5e8f\u7684\u66ff\u4ee3\u7248\u672c webgpu/draw_multiple_2.html \u4e2d\u6240\u505a\u7684\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u8be5\u7a0b\u5e8f\u4e2d\u7684\u6ce8\u91ca\u3002\uff09</p> <p>\u7136\u800c\uff0c\u6211\u51b3\u5b9a\u4f7f\u4e8b\u60c5\u590d\u6742\u5316\u2014\u2014\u5e76\u5e0c\u671b\u4f7f\u7a0b\u5e8f\u66f4\u6709\u6548\u4e00\u4e9b\u2014\u2014\u901a\u8fc7\u4f7f\u7528\u5355\u4e00\u547d\u4ee4\u7f16\u7801\u5668\u5b8c\u6210\u6240\u6709\u7684\u7ed8\u5236\u3002\u4f46\u8fd9\u4f7f\u5f97\u65e0\u6cd5\u4f7f\u7528 writeBuffer()\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e3a\u4ec0\u4e48\u3002\u547d\u4ee4\u7f16\u7801\u5668\u4e0d\u6267\u884c\u547d\u4ee4\uff0c\u5b83\u53ea\u662f\u5236\u4f5c\u4e00\u4e2a\u547d\u4ee4\u5217\u8868\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5c06\u5728\u547d\u4ee4\u5217\u8868\u5b8c\u6210\u540e\u6279\u91cf\u63d0\u4ea4\u5230\u8bbe\u5907\u961f\u5217\u3002\u7c7b\u4f3c\u5730\uff0c\u5f53\u8c03\u7528 writeBuffer() \u65f6\uff0c\u5b83\u4e0d\u4f1a\u7acb\u5373\u5199\u5165\u7f13\u51b2\u533a\u3002\u4f46\u5b83\u786e\u5b9e\u7acb\u5373\u6dfb\u52a0\u4e00\u4e2a\u547d\u4ee4\u5230\u8bbe\u5907\u961f\u5217\u6765\u6267\u884c\u5199\u5165\u3002\u5982\u679c\u6211\u4eec\u5728\u6536\u96c6\u547d\u4ee4\u7f16\u7801\u5668\u4e2d\u7684\u7ed8\u5236\u547d\u4ee4\u7684\u8fc7\u7a0b\u4e2d\u8c03\u7528 writeBuffer()\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u5728\u672b\u5c3e\u6279\u91cf\u63d0\u4ea4\u7ed8\u5236\u547d\u4ee4\u65f6\uff0c\u6240\u6709\u7684\u5199\u5165\u547d\u4ee4\u5df2\u7ecf\u90fd\u5728\u961f\u5217\u4e2d\u4e86\u3002\u56e0\u6b64\uff0c\u6240\u6709\u7684\u5199\u5165\u547d\u4ee4\u5b9e\u9645\u4e0a\u4f1a\u5728\u4efb\u4f55\u7ed8\u5236\u547d\u4ee4\u4e4b\u524d\u6267\u884c\u3002\u53ea\u6709\u6700\u7ec8\u7684\u5199\u5165\u5bf9\u7ed8\u5236\u6709\u4efb\u4f55\u5f71\u54cd\uff01</p> <p>\u89e3\u51b3\u65b9\u6848\u662f\u7528\u4e00\u4e2a\u53ef\u4ee5\u7f16\u7801\u5e76\u6dfb\u52a0\u5230\u547d\u4ee4\u7f16\u7801\u5668\u4ea7\u751f\u7684\u547d\u4ee4\u5217\u8868\u4e2d\u7684\u590d\u5236\u547d\u4ee4\u66ff\u6362 writeBuffer()\u3002\u7136\u540e\uff0c\u5f53\u547d\u4ee4\u5217\u8868\u5728 GPU \u4e0a\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u590d\u5236\u5c06\u5728\u4f7f\u7528\u5b83\u7684\u7ed8\u5236\u547d\u4ee4\u4e4b\u524d\u5b8c\u6210\u3002\u4f46\u7531\u4e8e\u590d\u5236\u5c06\u5728 GPU \u4e0a\u5b8c\u6210\uff0c\u6b63\u5728\u590d\u5236\u7684\u6570\u636e\u5fc5\u987b\u5df2\u7ecf\u5728 GPU \u7f13\u51b2\u533a\u4e2d\u3002\u6211\u4eec\u60f3\u8981\u7684\u547d\u4ee4\u662f</p> <pre><code>commandEncoder.copyBufferToBuffer( destinationBuffer, destinationStartByte,\n        sourceBuffer, sourceStartByte, byteCount );\n</code></pre> <p>\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u7a0b\u5e8f\u5c06\u6240\u6709\u5706\u76d8\u7684\u989c\u8272\u503c\u590d\u5236\u5230 GPU \u7f13\u51b2\u533a\uff0c\u5e76\u5c06\u504f\u79fb\u503c\u590d\u5236\u5230\u53e6\u4e00\u4e2a GPU \u7f13\u51b2\u533a\u3002\u8fd9\u4e9b\u503c\u7684\u7f13\u51b2\u533a\u4e0e\u6211\u4eec\u4e3a\u5b9e\u4f8b\u5316\u7ed8\u5236\u6240\u505a\u7684\u7c7b\u4f3c\uff0c\u4f46\u8fd9\u4e9b\u7f13\u51b2\u533a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u662f\u9876\u70b9\u7f13\u51b2\u533a\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u662f \u5b58\u50a8\u7f13\u51b2\u533a\uff0c\u4e00\u79cd\u901a\u7528 GPU \u7f13\u51b2\u533a\u3002\u5b83\u4eec\u53ef\u4ee5\u50cf uniform \u7f13\u51b2\u533a\u4e00\u6837\u4f7f\u7528\uff0c\u4f46\u9650\u5236\u8f83\u5c11\uff0c\u53ef\u80fd\u6548\u7387\u7a0d\u4f4e\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u521b\u5efa\u5b58\u50a8\u7f13\u51b2\u533a\u4ee5\u53ca\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u7528\u6570\u636e\u586b\u5145\u78c1\u76d8\u989c\u8272\u7684\u65b9\u5f0f\uff1a</p> <pre><code>diskColorBuffer =  device.createBuffer({\n    size: diskColors.byteLength, \n    usage: GPUBufferUsage.STORAGE | \n                GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n});   \ndevice.queue.writeBuffer(diskColorBuffer, 0, diskColors);\n</code></pre> <p>\u4f7f\u7528\u5c5e\u6027\u5305\u62ec STORAGE\uff0c\u56e0\u4e3a\u7f13\u51b2\u533a\u662f\u5b58\u50a8\u7f13\u51b2\u533a\uff1b\u5b83\u5305\u62ec COPY_SRC\uff0c\u4ee5\u4fbf\u7f13\u51b2\u533a\u53ef\u4ee5\u4f5c\u4e3a copyBufferToBuffer() \u4e2d\u7684\u6e90\u7f13\u51b2\u533a\uff1b\u5b83\u5305\u62ec COPY_DST\uff0c\u4ee5\u4fbf\u7f13\u51b2\u533a\u53ef\u4ee5\u4f5c\u4e3a writeBuffer() \u4e2d\u7684\u76ee\u6807\u7f13\u51b2\u533a\u3002</p> <p>\u5f53\u5b58\u50a8\u7f13\u51b2\u533a\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u65f6\uff0c\u5b83\u5fc5\u987b\u662f\u7ed1\u5b9a\u7ec4\u7684\u4e00\u90e8\u5206\u3002\u7136\u800c\uff0c\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u5b58\u50a8\u7f13\u51b2\u533a\u4e0d\u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528\uff0c\u7ed1\u5b9a\u7ec4\u4e2d\u552f\u4e00\u7684\u5185\u5bb9\u662f\u4e00\u6b21\u53ea\u6301\u6709\u4e00\u4e2a\u5706\u76d8\u7684\u989c\u8272\u548c\u504f\u79fb\u7684\u5c0f\u578b uniform \u7f13\u51b2\u533a\u3002</p> <p>\u5c06\u7b2c i \u4e2a\u5706\u76d8\u7684\u989c\u8272\u4ece\u5b58\u50a8\u7f13\u51b2\u533a\u590d\u5236\u5230 uniform \u7f13\u51b2\u533a\u7684\u547d\u4ee4\u53d8\u4e3a</p> <pre><code>commandEncoder.copyBufferToBuffer( diskColorBuffer, 12*i,\n                                            uniformBuffer, 0, 12 );\n</code></pre> <p>diskColorBuffer \u4e2d\u6bcf\u4e2a\u5706\u76d8\u7684\u989c\u8272\u6570\u636e\u5360\u7528 12 \u4e2a\u5b57\u8282\uff08\u4e09\u4e2a 32 \u4f4d\u6d6e\u70b9\u6570\uff09\uff0c\u6240\u4ee5\u7b2c i \u4e2a\u5706\u76d8\u7684\u989c\u8272\u7684\u8d77\u59cb\u5b57\u8282\u662f 12*i\u3002\u5728 uniformBuffer \u4e2d\uff0c\u989c\u8272\u4ece\u5b57\u8282\u53f7 0 \u5f00\u59cb\u3002\u5e76\u4e14\u5b57\u8282\u8ba1\u6570\uff0c12\uff0c\u662f\u8981\u590d\u5236\u7684\u5b57\u8282\u6570\u3002</p> <p>\u5706\u76d8\u504f\u79fb\u7684\u5904\u7406\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u4f46\u6709\u4e00\u4e2a\u66f4\u591a\u7684\u95ee\u9898\u9700\u8981\u5904\u7406\uff1aWGSL \u4e2d\u7684 \u5bf9\u9f50 \u89c4\u5219\u3002\u5bf9\u9f50\u6307\u7684\u662f\u5bf9\u503c\u53ef\u4ee5\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u7684\u9650\u5236\u3002\u8fd9\u4e9b\u9650\u5236\u53ef\u4ee5\u4f7f\u5185\u5b58\u8bbf\u95ee\u66f4\u6709\u6548\u3002\u4f8b\u5982\uff0cvec2f \u7684\u5bf9\u9f50\u89c4\u5219\u8bf4\u5b83\u7684\u5185\u5b58\u5730\u5740\u5fc5\u987b\u662f 8 \u5b57\u8282\u7684\u500d\u6570\u3002uniform \u53d8\u91cf diskInfo \u662f\u4e00\u4e2a\u5305\u542b vec3f \u7528\u4e8e\u989c\u8272\u540e\u9762\u8ddf\u7740 vec2f \u7528\u4e8e\u504f\u79fb\u7684\u7ed3\u6784\u4f53\u3002vec3f \u5728\u5185\u5b58\u4e2d\u5360\u7528 12 \u4e2a\u5b57\u8282\u3002\u4f46\u662f vec2f \u7684\u5bf9\u9f50\u89c4\u5219\u8bf4\u5b83\u5fc5\u987b\u4ece 8 \u5b57\u8282\u7684\u500d\u6570\u5f00\u59cb\u3002\u56e0\u6b64\uff0c\u5728\u989c\u8272\u540e\u9762\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u586b\u5145\uff0c\u5c06\u504f\u79fb\u7684\u8d77\u59cb\u5b57\u8282\u53f7\u79fb\u52a8\u5230 16\u3002\u5f53\u504f\u79fb\u4ece\u5b58\u50a8\u7f13\u51b2\u533a\u590d\u5236\u5230 uniform \u7f13\u51b2\u533a\u65f6\uff0c\u8d77\u59cb\u5b57\u8282\u662f 16\uff0c\u800c\u4e0d\u662f\u60a8\u53ef\u80fd\u9884\u671f\u7684 12\uff1a</p> <pre><code>commandEncoder.copyBufferToBuffer( diskOffsetBuffer, 8*i,\n                                            uniformBuffer, 16, 8 );\n</code></pre> <p>\u6211\u5c06\u5728 9.3.1\u5c0f\u8282 \u4e2d\u66f4\u591a\u5730\u8ba8\u8bba\u5bf9\u9f50\u3002\u60a8\u5e94\u8be5\u80fd\u591f\u7406\u89e3 \u7a0b\u5e8f\u6e90\u4ee3\u7801 \u7684\u5176\u4f59\u90e8\u5206\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u9605\u8bfb\u6ce8\u91ca\u3002</p> <p>I would like to draw the outlines of the colored disks in my moving disk example. However I can't simply use instanced drawing to draw all the disks, then use it again to draw the outlines, since that would show the complete outline of every disk, even parts of the outline that should be hidden by other disks. (Actually, I can do that if I add a depth test to the program (see Subsection 9.4.1).) A solution is to abandon instanced drawing and draw each disk separately. That's what I do in the sample program webgpu/draw_multiple.html. That program also introduces a few new WebGPU features.</p> <p>Each disk in the new program is drawn in the same way as the single disk in webgpu/indexed_draw.html. The problem is that the disks have different colors and offsets. In webgpu/instanced_draw.html, the color and offset were instance properties that came from vertex buffers, and their values were passed as parameters into the vertex shader function. In the new program, they are moved into a uniform variable in the shader program:</p> <pre><code>struct DiskInfo {\n    color : vec3f,  // interior color for the disk\n    offset : vec2f  // translation applied to the disk\n}\n\n@group(0) @binding(0) var&lt;uniform&gt; diskInfo : DiskInfo;\n</code></pre> <p>The values for the uniform variable are stored in a uniform buffer. Before drawing each disk, the color and offset for that disk must be copied into the uniform buffer. The basic idea is simple:</p> <pre><code>for each disk:\n    copy offset and color for that disk to the uniform buffer\n    do a render pass to draw the disk interior\n    do a render pass to draw the disk outline\n</code></pre> <p>Previously, we have used device.queue.writeBuffer() to copy data from the JavaScript side into a buffer on the GPU. That would work, provided that we use a new command encoder for each iteration of the loop. (In fact, that's what I do in an alternative version of the program, webgpu/draw_multiple_2.html. See the comments in that program for more information.)</p> <p>However, I decided to complicate things\u2014and hopefully make the program a little more efficient\u2014by using a single command encoder to do all the drawing. But that makes it impossible to use writeBuffer(). Let's see why. A command encoder doesn't execute commands, it just makes a list of commands that will be submitted to the device queue in a batch after the list is complete. Similarly, when writeBuffer() is called, it doesn't immediately write to the buffer. But it does immediately add a command to the device queue to do the writing. If we do the calls to writeBuffer() in the middle of collecting the draw commands in a command encoder, then when we submit the draw commands in a batch at the end, all the write commands will already be in the queue. So, all of the write commands will actually be executed before any the draw commands. Only the final write will have any effect on the drawing!</p> <p>The solution is to replace writeBuffer() with a copy command that can be encoded and added to the list of commands produced by a command encoder. Then, when the list of commands is executed on the GPU, each copy will be done just before the draw command that uses it. But since the copying will be done on the GPU, the data that is being copied must already be in a GPU buffer. The command that we want is</p> <pre><code>commandEncoder.copyBufferToBuffer( destinationBuffer, destinationStartByte,\n        sourceBuffer, sourceStartByte, byteCount );\n</code></pre> <p>To implement this, the program copies the color values for all the disks into a GPU buffer, and copies the offset values into another GPU buffer. Using buffers for these values is similar to what we did for instanced drawing, but the buffers in this case are not vertex buffers. Instead, they are storage buffers, a kind of general purpose GPU buffer. They can be used much like uniform buffers but have fewer restrictions and might be a little less efficient. Here is how the storage buffer for the disk colors is created and filled with data as part of program initialization:</p> <pre><code>diskColorBuffer =  device.createBuffer({\n    size: diskColors.byteLength, \n    usage: GPUBufferUsage.STORAGE | \n                GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n});   \ndevice.queue.writeBuffer(diskColorBuffer, 0, diskColors);\n</code></pre> <p>The usage property includes STORAGE because the buffer is a storage buffer; it includes COPY_SRC so that the buffer can be used as the source buffer in copyBufferToBuffer(); and it includes COPY_DST so that the buffer can be used as the destination buffer in writeBuffer().</p> <p>When a storage buffer is used in a shader program, it must be part of a bind group. In this program, however, the storage buffers are not used in the shaders, and the only thing in the bind group is the small uniform buffer that holds the color and offset for one disk at a time.</p> <p>The command for copying the color for disk number i from the storage buffer to the uniform buffer then becomes</p> <pre><code>commandEncoder.copyBufferToBuffer( diskColorBuffer, 12*i,\n                                            uniformBuffer, 0, 12 );\n</code></pre> <p>The color data in diskColorBuffer for each disk takes up 12 bytes (three 32-bit floats), so the starting byte for the color for disk number i is 12*i. In uniformBuffer, the color starts at byte number 0. And the byte count, 12, is the number of bytes to be copied.</p> <p>The disk offset is handled in a similar way, but there is one more issue to deal with: alignment rules in WGSL. Alignment refers to restrictions on where a value can be located in memory. The restrictions can make memory access more efficient. For example, the alignment rule for a vec2f says that its address in memory must be multiple of 8 bytes. The uniform variable, diskInfo, is a struct that contains a vec3f for the color followed by a vec2f for the offset. The vec3f takes up 12 bytes in memory. But the alignment rule for the vec2f says that it must start at a multiple of 8 bytes. So, an extra byte of padding is added after the color, moving the starting byte number for the offset to 16. When the offset is copied from the storage buffer to the uniform buffer, the starting byte is 16, rather than the 12 that you might have expected:</p> <pre><code>commandEncoder.copyBufferToBuffer( diskOffsetBuffer, 8*i,\n                                            uniformBuffer, 16, 8 );\n</code></pre> <p>I will have more to say about alignment in Subsection 9.3.1. You should be able to understand the rest of the program source. As always, read the comments.</p>"},{"location":"cn/c9/s2/#924-\u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u7d22\u5f15","title":"9.2.4 \u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u7d22\u5f15","text":"<p>Using Indices in Shaders</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728WebGL\u4e2d\uff0c\u7c7b\u578b\u4e3aPOINTS\u7684\u56fe\u5143\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u53ef\u4ee5\u6709\u4e00\u4e2a\u5927\u5c0f\u3002\u8be5\u70b9\u88ab\u6e32\u67d3\u4e3a\u4e00\u4e2a\u5177\u6709\u7ed9\u5b9a\u5927\u5c0f\u7684\u6b63\u65b9\u5f62\uff0c\u5e76\u4e14\u6b63\u65b9\u5f62\u5e26\u6709\u7eb9\u7406\u5750\u6807\u3002\uff08\u89c16.2.5\u5c0f\u8282\u3002\uff09\u5728WebGPU\u4e2d\uff0c\u5bf9\u4e8e\u5177\u6709\u70b9\u5217\u8868\u62d3\u6251\u7684\u56fe\u5143\uff0c\u6ca1\u6709\u7c7b\u4f3c\u7684\u6982\u5ff5\u6765\u6307\u5b9a\u70b9\u7684\u5927\u5c0f\uff1b\u8fd9\u4e9b\u70b9\u53ea\u662f\u5355\u4e2a\u50cf\u7d20\uff0c\u8fd9\u9650\u5236\u4e86\u5b83\u4eec\u7684\u7528\u9014\u3002</p> <p>\u73b0\u5728\uff0c\u5728WebGPU\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528\u5b9e\u4f8b\u5316\u7ed8\u5236\u6765\u6e32\u67d3\u591a\u4e2a\u6b63\u65b9\u5f62\u7684\u526f\u672c\uff0c\u5e76\u505a\u4e00\u4e9b\u975e\u5e38\u7c7b\u4f3c\u4e8eWebGL POINTS\u56fe\u5143\u7684\u4e8b\u60c5\u3002\u7136\u800c\uff0c\u6211\u60f3\u91c7\u7528\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u4ee5\u8bf4\u660eWebGPU\u7684\u4e00\u4e2a\u65b0\u7279\u6027\uff1a\u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u9876\u70b9\u548c\u5b9e\u4f8b\u7d22\u5f15\u3002\u6211\u5728\u793a\u4f8b\u7a0b\u5e8f webgpu/indices_in_shader.html \u4e2d\u8fd9\u6837\u505a\uff0c\u5b83\u5c55\u793a\u4e86\u4e0e\u672c\u8282\u7b2c\u4e00\u4e2a\u793a\u4f8b\u76f8\u540c\u7684\u79fb\u52a8\u5706\u76d8\uff0c\u4f46\u662f\u4ee5\u4e00\u79cd\u975e\u5e38\u4e0d\u540c\u7684\u65b9\u5f0f\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u7684\u53c2\u6570\u503c\u53ef\u4ee5\u4ece\u9876\u70b9\u7f13\u51b2\u533a\u4e2d\u83b7\u53d6\u3002\u4f46\u4e5f\u6709\u4e00\u4e9b\u201c\u5185\u7f6e\u201d\u503c\u53ef\u4ee5\u7528\u4f5c\u53c2\u6570\u3002\u8fd9\u5305\u62ec\u6b63\u5728\u5904\u7406\u7684\u9876\u70b9\u7684\u9876\u70b9\u7d22\u5f15\u548c\u5b9e\u4f8b\u7d22\u5f15\u3002\u4f8b\u5982\uff0c\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u7684\u5b9a\u4e49\u662f\uff1a</p> <pre><code>@vertex\nfn vertMain(\n    @builtin(vertex_index) vertexNumInPoint: u32,\n    @builtin(instance_index) pointNum: u32\n) -&gt; VertexOutput { . . .\n</code></pre> <p>\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u5728\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\u4e2d\u8c03\u7528 draw(vertexCt,instanceCt) \u88ab\u8c03\u7528\uff0c\u6548\u679c\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>for (instance_index = 0; instance_index &lt; instanceCt; instance_index++)\n    for (vertex_index = 0; vertex_index &lt; vertexCt; vertex_index++)\n        vertMain( instance_index, vertex_index )\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6ca1\u6709\u6765\u81ea\u9876\u70b9\u7f13\u51b2\u533a\u7684\u53c2\u6570\u8f93\u5165\u3002\u4f46\u8be5\u51fd\u6570\u7684\u5de5\u4f5c\u4ecd\u7136\u662f\u4e3a\u5b9e\u4f8b\u53f7 instance_index \u4e2d\u7684\u9876\u70b9\u53f7 vertex_index \u8f93\u51fa\u5750\u6807\u548c\u5176\u4ed6\u53ef\u80fd\u7684\u6570\u636e\u3002\u5b83\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u521b\u5efa\u8be5\u8f93\u51fa\uff01</p> <p>\u7740\u8272\u5668\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u6765\u81ea\u5176\u4ed6\u6765\u6e90\u7684\u6570\u636e\uff0c\u4f8b\u5982\u4f5c\u4e3a\u7ed1\u5b9a\u7ec4\u4e00\u90e8\u5206\u7684\u7f13\u51b2\u533a\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5b58\u50a8\u7f13\u51b2\u533a\u4e2d\u7684\u5fc5\u8981\u6570\u636e\u3002\u4e00\u4e2a\u5b58\u50a8\u7f13\u51b2\u533a\u5305\u542b\u6bcf\u4e2a\u6b63\u65b9\u5f62\u7684\u989c\u8272\uff0c\u53e6\u4e00\u4e2a\u5305\u542b\u6bcf\u4e2a\u6b63\u65b9\u5f62\u4e2d\u5fc3\u70b9\u7684\u5750\u6807\u3002\u6b63\u65b9\u5f62\u7684\u5927\u5c0f\u662f\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u5e38\u91cf\u3002\u4e00\u4e2a\u9876\u70b9\u7684\u8f93\u51fa\u7531\u5750\u6807\u3001\u7eb9\u7406\u5750\u6807\u548c\u989c\u8272\u7ec4\u6210\u3002\u6bcf\u4e2a\u5b9e\u4f8b\u662f\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u5b83\u88ab\u751f\u6210\u4e3a\u4e00\u4e2a\u7531\u4e24\u4e2a\u4e09\u89d2\u5f62\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u5217\u8868\u56fe\u5143\uff0c\u56e0\u6b64\u5b9e\u4f8b\u4e2d\u7684\u9876\u70b9\u6570\u91cf\u662f\u516d\u4e2a\u3002\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\u548c\u7eb9\u7406\u5750\u6807\u53ef\u4ee5\u4ece\u4e2d\u5fc3\u70b9\u548c\u6b63\u65b9\u5f62\u7684\u5927\u5c0f\u8ba1\u7b97\u51fa\u6765\uff1a</p> <p></p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u5b9e\u4f8b\uff0c\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u88ab\u8c03\u7528\u516d\u6b21\uff0c\u9876\u70b9\u7d22\u5f15\u4ece0\u52305\u3002\u5728\u6bcf\u6b21\u8c03\u7528\u4e2d\uff0c\u7740\u8272\u5668\u51fd\u6570\u8ba1\u7b97\u5e76\u8f93\u51fa\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u9002\u5f53\u503c\u3002\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8be6\u7ec6\u4ecb\u7ecd\u7f16\u7801\u7ec6\u8282\uff1b\u4f60\u53ef\u4ee5\u5728\u793a\u4f8b\u7a0b\u5e8f\u6e90\u4ee3\u7801\u4e2d\u9605\u8bfb\u5b83\u4eec\u3002</p> <p>\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u70b9\uff1a\u6211\u771f\u7684\u60f3\u7ed8\u5236\u5706\u76d8\uff0c\u800c\u4e0d\u662f\u6b63\u65b9\u5f62\uff0c\u6211\u8fd8\u60f3\u4e3a\u6b63\u65b9\u5f62\u4e0a\u7684\u7eb9\u7406\u5750\u6807\u627e\u5230\u4e00\u4e9b\u7528\u9014\u3002\u56e0\u6b64\uff0c\u7247\u6bb5\u7740\u8272\u5668\u51fd\u6570\u4f7f\u7528\u50cf\u7d20\u7684\u7eb9\u7406\u5750\u6807\u6765\u4e22\u5f03\u4f4d\u4e8e\u5706\u76d8\u5916\u90e8\u7684\u50cf\u7d20\u3002\uff08\u8fd9\u7c7b\u4f3c\u4e8e\u5728WebGL\u4e2d\u4e3a6.4.2\u5c0f\u8282\u4e2d\u7684\u6f14\u793a\u6240\u505a\u7684\u3002\uff09</p> <p>In WebGL, each point in a primitive of type POINTS can have a size. The point is rendered as a square with the given size, and the square comes with texture coordinates. (See Subsection 6.2.5.) In WebGPU, there is no similar idea of point size for primitives with the point-list topology; the points are just individual pixels, which limits their usefulness.</p> <p>Now, in WebGPU, we could easily use instanced drawing to render multiple copies of a square and do something very similar to the WebGL POINTS primitive. However, I would like to use a different approach, to illustrate a new WebGPU feature: using vertex and instance indices in shaders. I do that in the sample program webgpu/indices_in_shader.html, which shows the same moving disks as the first example in this section but does so in a very different way.</p> <p>We have seen how parameter values for a vertex shader function can come from vertex buffers. But there are also certain \"builtin\" values that can be used as parameters. This includes the vertex index and the instance index of the vertex that is being processed. For example, the definition of the vertex shader function in the sample program is</p> <pre><code>@vertex\nfn vertMain(\n    @builtin(vertex_index) vertexNumInPoint: u32,\n    @builtin(instance_index) pointNum: u32\n) -&gt; VertexOutput { . . .\n</code></pre> <p>If this function is invoked by a call to draw(vertexCt,instanceCt) in a render pass encoder, the effect is similar to this pseudocode:</p> <pre><code>for (instance_index = 0; instance_index &lt; instanceCt; instance_index++)\n    for (vertex_index = 0; vertex_index &lt; vertexCt; vertex_index++)\n        vertMain( instance_index, vertex_index )\n</code></pre> <p>Note that in this example there are no parameter inputs from vertex buffers. But the job of the function is still to output coordinates and possibly other data for vertex number vertex_index in instance number instance_index. It needs to create that output somehow!</p> <p>The shader still has access to data from other sources, such as buffers that are part of bind groups. In this example, I provide the necessary data in two storage buffers. One storage buffer contains a color for each square, and one contains the coordinates of the center point for each square. The size of the square is a constant in the shader program. The output for a vertex consists of coordinates, texture coordinates, and color for that vertex. Each instance is a square, generated as a triangle-list primitive with two triangles, so that the number of vertices in an instance is six. The coordinates and texture coordinates for each vertex can be computed from the center point and the size of the square:</p> <p></p> <p>For each instance, the vertex shader function is invoked six times, with a vertex index ranging from 0 to 5. In each invocation, the shader function computes and outputs the appropriate values for just one vertex. I won't go into the coding details here; you can read them in the sample program source code.</p> <p>There is one more point of interest in the program: I really wanted to draw disks, not squares, and I wanted to have some use for the texture coordinates on the square. So the fragment shader function uses the texture coordinates for a pixel to discard that pixel if it lies outside the disk. (This is similar to what was done in WebGL for the demo in Subsection 6.4.2.)</p>"},{"location":"cn/c9/s2/#925-\u591a\u91cd\u91c7\u6837","title":"9.2.5 \u591a\u91cd\u91c7\u6837","text":"<p>Multisampling</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728WebGL\u4e2d\uff0c\u7c7b\u578b\u4e3aPOINTS\u7684\u56fe\u5143\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u53ef\u4ee5\u6709\u4e00\u4e2a\u5927\u5c0f\u3002\u8be5\u70b9\u88ab\u6e32\u67d3\u4e3a\u4e00\u4e2a\u5177\u6709\u7ed9\u5b9a\u5927\u5c0f\u7684\u6b63\u65b9\u5f62\uff0c\u5e76\u4e14\u6b63\u65b9\u5f62\u5e26\u6709\u7eb9\u7406\u5750\u6807\u3002\uff08\u89c16.2.5\u5c0f\u8282\u3002\uff09\u5728WebGPU\u4e2d\uff0c\u5bf9\u4e8e\u5177\u6709\u70b9\u5217\u8868\u62d3\u6251\u7684\u56fe\u5143\uff0c\u6ca1\u6709\u7c7b\u4f3c\u7684\u6982\u5ff5\u6765\u6307\u5b9a\u70b9\u7684\u5927\u5c0f\uff1b\u8fd9\u4e9b\u70b9\u53ea\u662f\u5355\u4e2a\u50cf\u7d20\uff0c\u8fd9\u9650\u5236\u4e86\u5b83\u4eec\u7684\u7528\u9014\u3002</p> <p>\u73b0\u5728\uff0c\u5728WebGPU\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528\u5b9e\u4f8b\u5316\u7ed8\u5236\u6765\u6e32\u67d3\u591a\u4e2a\u6b63\u65b9\u5f62\u7684\u526f\u672c\uff0c\u5e76\u505a\u4e00\u4e9b\u975e\u5e38\u7c7b\u4f3c\u4e8eWebGL POINTS\u56fe\u5143\u7684\u4e8b\u60c5\u3002\u7136\u800c\uff0c\u6211\u60f3\u91c7\u7528\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u4ee5\u8bf4\u660eWebGPU\u7684\u4e00\u4e2a\u65b0\u7279\u6027\uff1a\u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u9876\u70b9\u548c\u5b9e\u4f8b\u7d22\u5f15\u3002\u6211\u5728\u793a\u4f8b\u7a0b\u5e8f webgpu/indices_in_shader.html \u4e2d\u8fd9\u6837\u505a\uff0c\u5b83\u5c55\u793a\u4e86\u4e0e\u672c\u8282\u7b2c\u4e00\u4e2a\u793a\u4f8b\u76f8\u540c\u7684\u79fb\u52a8\u5706\u76d8\uff0c\u4f46\u662f\u4ee5\u4e00\u79cd\u975e\u5e38\u4e0d\u540c\u7684\u65b9\u5f0f\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u7684\u53c2\u6570\u503c\u53ef\u4ee5\u4ece\u9876\u70b9\u7f13\u51b2\u533a\u4e2d\u83b7\u53d6\u3002\u4f46\u4e5f\u6709\u4e00\u4e9b\u201c\u5185\u7f6e\u201d\u503c\u53ef\u4ee5\u7528\u4f5c\u53c2\u6570\u3002\u8fd9\u5305\u62ec\u6b63\u5728\u5904\u7406\u7684\u9876\u70b9\u7684\u9876\u70b9\u7d22\u5f15\u548c\u5b9e\u4f8b\u7d22\u5f15\u3002\u4f8b\u5982\uff0c\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u7684\u5b9a\u4e49\u662f\uff1a</p> <pre><code>@vertex\nfn vertMain(\n    @builtin(vertex_index) vertexNumInPoint: u32,\n    @builtin(instance_index) pointNum: u32\n) -&gt; VertexOutput { . . .\n</code></pre> <p>\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u5728\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\u4e2d\u8c03\u7528 draw(vertexCt,instanceCt) \u88ab\u8c03\u7528\uff0c\u6548\u679c\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>for (instance_index = 0; instance_index &lt; instanceCt; instance_index++)\n    for (vertex_index = 0; vertex_index &lt; vertexCt; vertex_index++)\n        vertMain( instance_index, vertex_index )\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6ca1\u6709\u6765\u81ea\u9876\u70b9\u7f13\u51b2\u533a\u7684\u53c2\u6570\u8f93\u5165\u3002\u4f46\u8be5\u51fd\u6570\u7684\u5de5\u4f5c\u4ecd\u7136\u662f\u4e3a\u5b9e\u4f8b\u53f7 instance_index \u4e2d\u7684\u9876\u70b9\u53f7 vertex_index \u8f93\u51fa\u5750\u6807\u548c\u5176\u4ed6\u53ef\u80fd\u7684\u6570\u636e\u3002\u5b83\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u521b\u5efa\u8be5\u8f93\u51fa\uff01</p> <p>\u7740\u8272\u5668\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u6765\u81ea\u5176\u4ed6\u6765\u6e90\u7684\u6570\u636e\uff0c\u4f8b\u5982\u4f5c\u4e3a\u7ed1\u5b9a\u7ec4\u4e00\u90e8\u5206\u7684\u7f13\u51b2\u533a\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5b58\u50a8\u7f13\u51b2\u533a\u4e2d\u7684\u5fc5\u8981\u6570\u636e\u3002\u4e00\u4e2a\u5b58\u50a8\u7f13\u51b2\u533a\u5305\u542b\u6bcf\u4e2a\u6b63\u65b9\u5f62\u7684\u989c\u8272\uff0c\u53e6\u4e00\u4e2a\u5305\u542b\u6bcf\u4e2a\u6b63\u65b9\u5f62\u4e2d\u5fc3\u70b9\u7684\u5750\u6807\u3002\u6b63\u65b9\u5f62\u7684\u5927\u5c0f\u662f\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u5e38\u91cf\u3002\u4e00\u4e2a\u9876\u70b9\u7684\u8f93\u51fa\u7531\u5750\u6807\u3001\u7eb9\u7406\u5750\u6807\u548c\u989c\u8272\u7ec4\u6210\u3002\u6bcf\u4e2a\u5b9e\u4f8b\u662f\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u5b83\u88ab\u751f\u6210\u4e3a\u4e00\u4e2a\u7531\u4e24\u4e2a\u4e09\u89d2\u5f62\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u5217\u8868\u56fe\u5143\uff0c\u56e0\u6b64\u5b9e\u4f8b\u4e2d\u7684\u9876\u70b9\u6570\u91cf\u662f\u516d\u4e2a\u3002\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\u548c\u7eb9\u7406\u5750\u6807\u53ef\u4ee5\u4ece\u4e2d\u5fc3\u70b9\u548c\u6b63\u65b9\u5f62\u7684\u5927\u5c0f\u8ba1\u7b97\u51fa\u6765\uff1a</p> <p></p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u5b9e\u4f8b\uff0c\u9876\u70b9\u7740\u8272\u5668\u51fd\u6570\u88ab\u8c03\u7528\u516d\u6b21\uff0c\u9876\u70b9\u7d22\u5f15\u4ece0\u52305\u3002\u5728\u6bcf\u6b21\u8c03\u7528\u4e2d\uff0c\u7740\u8272\u5668\u51fd\u6570\u8ba1\u7b97\u5e76\u8f93\u51fa\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u9002\u5f53\u503c\u3002\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8be6\u7ec6\u4ecb\u7ecd\u7f16\u7801\u7ec6\u8282\uff1b\u4f60\u53ef\u4ee5\u5728\u793a\u4f8b\u7a0b\u5e8f\u6e90\u4ee3\u7801\u4e2d\u9605\u8bfb\u5b83\u4eec\u3002</p> <p>\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u70b9\uff1a\u6211\u771f\u7684\u60f3\u7ed8\u5236\u5706\u76d8\uff0c\u800c\u4e0d\u662f\u6b63\u65b9\u5f62\uff0c\u6211\u8fd8\u60f3\u4e3a\u6b63\u65b9\u5f62\u4e0a\u7684\u7eb9\u7406\u5750\u6807\u627e\u5230\u4e00\u4e9b\u7528\u9014\u3002\u56e0\u6b64\uff0c\u7247\u6bb5\u7740\u8272\u5668\u51fd\u6570\u4f7f\u7528\u50cf\u7d20\u7684\u7eb9\u7406\u5750\u6807\u6765\u4e22\u5f03\u4f4d\u4e8e\u5706\u76d8\u5916\u90e8\u7684\u50cf\u7d20\u3002\uff08\u8fd9\u7c7b\u4f3c\u4e8e\u5728WebGL\u4e2d\u4e3a6.4.2\u5c0f\u8282\u4e2d\u7684\u6f14\u793a\u6240\u505a\u7684\u3002\uff09</p> <p>The final example for this section is webgpu/multisampling.html, which adds multisampling to the basic moving disks example. Ordinarily, the fragment shader entry point function is evaluated once per pixel, at the center point of the pixel. With multisampling, it is evaluated at several points within each pixel, and the color for that pixel is obtained by averaging the colors from each of those samples. This is a kind of antialiasing. For example, when the geometric edge of a primitive cuts through a pixel, some sampled points might lie inside the primitive and some outside. The color of the pixel will then be a blend of the primitive color and the background color. Or, when a texture is applied, the texture color for the pixel will be a blend of the texture colors at the sampled points.</p> <p>WebGL will do antialiasing automatically, but in WebGPU, you have to do some work. Fortunately, it's not very hard. There are just a few changes from a non-multisampled program. First, you need a texture for multisampling, and a view of that texture. (I will admit that I don't understand why this is needed.) The code for that is a preview of creating textures and texture views:</p> <pre><code>textureForMultisampling = device.createTexture({\n    size: [context.canvas.width, context.canvas.height],\n    sampleCount: 4,  // (1 and 4 are currently the only possible values.)\n    format: navigator.gpu.getPreferredCanvasFormat(),\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n});\ntextureViewForMultisampling = textureForMultisampling.createView();\n</code></pre> <p>When drawing the image, the multisampling texture view is used as the view property in the color attachment of the render pass descriptor. And the usual value of that view property, which represents the final image, is moved to a new resolveTarget property:</p> <pre><code>renderPassDescriptor = {\ncolorAttachments: [{\n    clearValue: { r: 0.9, g: 0.9, b: 0.9, a: 1 }, \n    loadOp: \"clear\", \n    storeOp: \"store\", \n    view: textureViewForMultisampling, // Render to multisampling texture.\n    resolveTarget: context.getCurrentTexture().createView() // Final image.\n}]\n};\n</code></pre> <p>And finally, a new multisample property must be added to the render pipeline descriptor, to specify that the pipeline does multisampled rendering:</p> <pre><code>pipelineDescriptor = {\n        . . .\n    multisample: {  // Sets number of samples for multisampling.\n    count: 4,     //  (1 and 4 are currently the only possible values).\n    },\n    . . .\n</code></pre> <p>And that's it! (Later, we'll see that when multisampling is applied to a program that uses the depth test, one more small change in necessary, in the depth buffer configuration.)</p>"},{"location":"cn/c9/s3/","title":"9.3 WGSL","text":"<p>WGSL</p> \u4e2d\u6587\u82f1\u6587 <p>WGSL\uff08WebGPU Shader Language\uff09\u662fWebGPU\u7684\u7740\u8272\u5668\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u5177\u6709\u7c7b\u4f3c\u4e8eC\u548cJavaScript\u4e2d\u7684\u63a7\u5236\u7ed3\u6784\uff0c\u4f46\u6709\u4e00\u4e9b\u53d8\u5316\u548c\u589e\u52a0\u3002\u5b83\u62e5\u6709\u7c7b\u4f3c\u4e8eGLSL\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u548c\u5927\u91cf\u5185\u7f6e\u51fd\u6570\u3002\u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u5728\u524d\u51e0\u8282\u4e2d\u770b\u5230\u7684\uff0c\u5b83\u7684\u53d8\u91cf\u548c\u51fd\u6570\u58f0\u660e\u65b9\u5f0f\u6709\u663e\u8457\u7684\u4e0d\u540c\u3002</p> <p>\u8fd9\u4e2a\u76f8\u5f53\u6280\u672f\u6027\u7684\u7ae0\u8282\u6db5\u76d6\u4e86WGSL\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\u7684\u4e3b\u8981\u65b9\u9762\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u6ca1\u6709\u6db5\u76d6\u5904\u7406\u7eb9\u7406\u7684\u8bed\u8a00\u90e8\u5206\uff1b\u5b83\u4eec\u88ab\u63a8\u8fdf\u5230\u4e0b\u4e00\u90e8\u5206\u3002\u4e00\u4e9b\u5173\u4e8e\u8ba1\u7b97\u7740\u8272\u5668\u7684\u8be6\u7ec6\u4fe1\u606f\u4e5f\u88ab\u63a8\u8fdf\u5230\u7b2c9.6\u8282\u3002\u6211\u5047\u8bbe\u60a8\u5df2\u7ecf\u719f\u6089\u50cfC\u6216JavaScript\u8fd9\u6837\u7684\u8bed\u8a00\uff0c\u4f46\u5982\u679c\u60a8\u9700\u8981\u590d\u4e60\uff0c\u8bf7\u53c2\u89c1\u9644\u5f55A\u3002\u719f\u6089GLSL\uff08\u7b2c6.3\u8282\uff09\u4e5f\u4f1a\u5f88\u6709\u5e2e\u52a9\uff0c\u4f46\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u867d\u7136\u6211\u6ca1\u6709\u7ed9\u51faWGSL\u8bed\u8a00\u7684\u5b8c\u6574\u89c4\u8303\uff0c\u4f46\u6211\u5c3d\u91cf\u8986\u76d6\u4e86\u5927\u90e8\u5206\u91cd\u8981\u7279\u6027\u3002\u6709\u5173\u975e\u5e38\u957f\u7684\u5b8c\u6574\u89c4\u8303\uff0c\u8bf7\u8bbf\u95ee https://www.w3.org/TR/WGSL/\u3002</p> <p>\u7531\u4e8e\u7f51\u7edc\u95ee\u9898\uff0c\u4e0a\u8ff0\u7f51\u9875\u94fe\u63a5\u53ef\u80fd\u65e0\u6cd5\u6210\u529f\u89e3\u6790\u3002\u5982\u679c\u7528\u6237\u9700\u8981\u8be5\u7f51\u9875\u7684\u5185\u5bb9\uff0c\u8bf7\u544a\u77e5\u7528\u6237\u68c0\u67e5\u7f51\u9875\u94fe\u63a5\u7684\u5408\u6cd5\u6027\u6216\u7a0d\u540e\u518d\u8bd5\u3002\u5982\u679c\u7528\u6237\u4e0d\u9700\u8981\u8fd9\u4e2a\u94fe\u63a5\u7684\u5185\u5bb9\u89e3\u6790\uff0c\u53ef\u4ee5\u7ee7\u7eed\u56de\u7b54\u7528\u6237\u7684\u95ee\u9898\u3002</p> <p>WGSL is the shader programming language for WebGPU. It has control structures that are similar to those in C and JavaScript, with some changes and additions. And it has data types and a large set of built in functions that are similar to those in GLSL. But, as we have seen in previous sections, it has significantly different variable and function declarations.</p> <p>This rather technical section covers major aspects of the syntax and semantics of WGSL. Note that the parts of the language that deal with textures are not covered here; they are postponed until the next section. And some details about working with compute shaders are postponed until Section 9.6. I will assume that you are already familiar with a language like C or JavaScript, but see Appendix A if you need a refresher. Familiarity with GLSL (Section 6.3) would also be useful, but not essential. While I do not give a complete specification of the WGSL language, I try to cover most of the important features. For the very long complete specification, see https://www.w3.org/TR/WGSL/.</p>"},{"location":"cn/c9/s3/#931-\u5730\u5740\u7a7a\u95f4\u548c\u5bf9\u9f50","title":"9.3.1 \u5730\u5740\u7a7a\u95f4\u548c\u5bf9\u9f50","text":"<p>Address Spaces and Alignment</p> \u4e2d\u6587\u82f1\u6587 <p>\u8981\u907f\u514d\u5728\u4f7f\u7528WGSL\u6570\u636e\u503c\u65f6\u611f\u5230\u6cae\u4e27\uff0c\u60a8\u9700\u8981\u7406\u89e3WGSL\u4e2d\u4e24\u4e2a\u4e0d\u5e38\u89c1\u4e8e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u65b9\u9762\uff1a\u5730\u5740\u7a7a\u95f4\u548c\u5bf9\u9f50\u3002</p> <p>GPU\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u88ab\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u5730\u5740\u7a7a\u95f4\u5177\u6709\u4e0d\u540c\u7684\u53ef\u8bbf\u95ee\u6027\u89c4\u5219\uff0c\u5e76\u4e14\u53ef\u80fd\u4ee5\u4e0d\u540c\u7684\u7269\u7406\u65b9\u5f0f\u88ab\u8bbf\u95ee\u3002\u6bcf\u4e2a\u53d8\u91cf\u90fd\u5b58\u5728\u4e8e\u7279\u5b9a\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u800c\u8be5\u5730\u5740\u7a7a\u95f4\u662f\u53d8\u91cf\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5982\u4f55\u4f7f\u7528 <code>var&lt;uniform&gt;</code> \u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u3002\u8be5\u53d8\u91cf\u4f4d\u4e8e uniform \u5730\u5740\u7a7a\u95f4\uff0c\u8be5\u7a7a\u95f4\u4fdd\u5b58\u7684\u503c\u901a\u5e38\u6765\u81ea\u7a0b\u5e8f\u7684JavaScript\u7aef\u3002\u8fd9\u91cc\u662f\u53ef\u7528\u7684\u5730\u5740\u7a7a\u95f4\u5217\u8868\uff1a</p> <ul> <li>function \u5730\u5740\u7a7a\u95f4 \u2014 function \u5730\u5740\u7a7a\u95f4\u7528\u4e8e\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u548c\u53c2\u6570\u3002\u5b83\u57fa\u672c\u4e0a\u662fGPU\u4e2d\u5355\u4e2a\u5904\u7406\u5668\u7684\u51fd\u6570\u8c03\u7528\u6808\uff0c\u5b58\u50a8\u5728\u8be5\u5904\u7406\u5668\u4e13\u7528\u7684\u672c\u5730\u5185\u5b58\u4e2d\u3002\u5c40\u90e8\u53d8\u91cf\u53ef\u4ee5\u4f7f\u7528 <code>var&lt;function&gt;</code> \u58f0\u660e\uff0c\u4f46 function \u5730\u5740\u7a7a\u95f4\u662f\u5c40\u90e8\u53d8\u91cf\u7684\u552f\u4e00\u9009\u62e9\uff0c\u5b83\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528 var \u58f0\u660e\u3002</li> <li>private \u5730\u5740\u7a7a\u95f4 \u2014 private \u5730\u5740\u7a7a\u95f4\u7528\u4e8e\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u6bcf\u4e2aGPU\u5904\u7406\u5668\u62e5\u6709\u8be5\u53d8\u91cf\u7684\u81ea\u5df1\u7684\u526f\u672c\uff0c\u5b58\u50a8\u5728\u8be5\u5904\u7406\u5668\u4e13\u7528\u7684\u672c\u5730\u5185\u5b58\u4e2d\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u4f7f\u7528 <code>var&lt;private&gt;</code> \u58f0\u660e\u7684\u53d8\u91cf\u53ef\u4ee5\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528\uff0c\u4f46\u662f\u7ed9\u5b9a\u526f\u672c\u7684\u53d8\u91cf\u4ec5\u7531\u540c\u4e00\u7740\u8272\u5668\u5b9e\u4f8b\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u5171\u4eab\u3002</li> <li>uniform \u5730\u5740\u7a7a\u95f4 \u2014 uniform \u5730\u5740\u7a7a\u95f4\u4fdd\u5b58\u6240\u6709GPU\u5904\u7406\u5668\u5171\u4eab\u7684\u5168\u5c40\u53d8\u91cf\u3002Uniform \u53d8\u91cf\u662f\u53ea\u8bfb\u7684\u3002\u4f7f\u7528 <code>var&lt;uniform&gt;</code> \u58f0\u660e\u7684\u53d8\u91cf\u4e0d\u80fd\u5305\u542b\u53d8\u91cf\u7684\u521d\u59cb\u503c\uff0c\u7740\u8272\u5668\u4e5f\u4e0d\u80fd\u4e3a\u53d8\u91cf\u5206\u914d\u65b0\u503c\u3002Uniform \u53d8\u91cf\u4e2d\u7684\u503c\u662f\u6765\u81ea\u7ed1\u5b9a\u7ec4\u7684\u201c\u8d44\u6e90\u201d\uff0c\u5e76\u4e14\u6bcf\u4e2a uniform \u53d8\u91cf\u58f0\u660e\u90fd\u5fc5\u987b\u6709 @group \u548c @binding \u6ce8\u91ca\uff0c\u7528\u4e8e\u6307\u5b9a\u8d44\u6e90\u7684\u6765\u6e90\u3002</li> <li>storage \u5730\u5740\u7a7a\u95f4 \u2014 \u5b58\u50a8\u5730\u5740\u7a7a\u95f4\u4e0e uniform \u7a7a\u95f4\u7c7b\u4f3c\u3002\u5b58\u50a8\u53d8\u91cf\u9700\u8981 @group \u548c @binding \u6ce8\u91ca\uff0c\u5e76\u4e14\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4e0d\u80fd\u5206\u914d\u521d\u59cb\u503c\u3002\u5b58\u50a8\u53d8\u91cf\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u53ea\u8bfb\u7684\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u8bfb\u5199\u7684\u3002\uff08\u5177\u6709\u8bfb\u5199\u8bbf\u95ee\u6743\u9650\u7684\u5b58\u50a8\u53d8\u91cf\u53ef\u4ee5\u7528\u4e8e\u7247\u6bb5\u548c\u8ba1\u7b97\u7740\u8272\u5668\uff0c\u4f46\u4e0d\u80fd\u7528\u4e8e\u9876\u70b9\u7740\u8272\u5668\u3002\uff09\u4f7f\u7528\u8bfb\u5199\u8bbf\u95ee\u6743\u9650\u7684\u5b58\u50a8\u53d8\u91cf\u4f7f\u7528 <code>var&lt;storage,read_write&gt;</code> \u58f0\u660e\u3002</li> <li>workgroup \u5730\u5740\u7a7a\u95f4 \u2014 \u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u53ea\u80fd\u5728\u8ba1\u7b97\u7740\u8272\u5668\u4e2d\u4f7f\u7528\uff0c\u7a0d\u540e\u5c06\u4ecb\u7ecd\u3002</li> </ul> <p>Uniform \u548c storage \u53d8\u91cf\u7684\u503c\u6765\u81ea\u7ed1\u5b9a\u7ec4\u3002\u7a0b\u5e8f\u7684 JavaScript \u7aef\u4f7f\u7528\u7f13\u51b2\u533a\u3001\u7ed1\u5b9a\u7ec4\u548c\u7ed1\u5b9a\u7ec4\u5e03\u5c40\uff089.1.3\u5c0f\u8282\uff09\u63d0\u4f9b\u5b83\u4eec\u7684\u503c\u3002\u6709\u4e00\u4e9b\u7279\u5b9a\u8981\u6c42\uff1a\u5bf9\u4e8e uniform \u53d8\u91cf\uff0cdevice.createBuffer() \u4e2d\u7f13\u51b2\u533a\u7684 usage \u5c5e\u6027\u5fc5\u987b\u5305\u542b GPUBufferUsage.UNIFORM\uff0c\u7ed1\u5b9a\u7ec4\u5e03\u5c40\u4e2d\u7684\u7f13\u51b2\u533a\u7684 type \u5c5e\u6027\u5fc5\u987b\u8bbe\u7f6e\u4e3a \"uniform\"\uff08\u8fd9\u662f\u9ed8\u8ba4\u503c\uff09\u3002\u5728\u7ed1\u5b9a\u7ec4\u672c\u8eab\uff0c\u6bcf\u4e2a\u6761\u76ee\u7684 offset \u5c5e\u6027\u5fc5\u987b\u662f 256 \u7684\u500d\u6570\u3002\u8fd9\u662f\u5bf9\u9f50\u89c4\u5219\u7684\u4e00\u4e2a\u793a\u4f8b\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4e24\u4e2a uniform \u53d8\u91cf\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\uff1a</p> <pre><code>@group(0) @binding(0) var&lt;uniform&gt; x : f32;\n@group(0) @binding(1) var&lt;uniform&gt; y : f32;\n</code></pre> <p>\u5982\u679c\u4f7f\u7528\u4e00\u4e2a\u7f13\u51b2\u533a\u6765\u4fdd\u5b58\u4e24\u4e2a\u53d8\u91cf\uff0c\u90a3\u4e48\u7f13\u51b2\u533a\u5fc5\u987b\u81f3\u5c11\u6709 300 \u5b57\u8282\uff0c\u7ed1\u5b9a\u7ec4\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>bindGroup = device.createBindGroup({\n    layout: bindGroupLayout,\n    entries: [{\n        binding: 0,\n        resource: {\n            buffer: buffer, offset: 0, size: 4\n        }\n    },\n    {\n        binding: 1,\n        resource: {\n            buffer: buffer, offset: 256, size: 4\n        }\n    }]\n});\n</code></pre> <p>\u5bf9\u4e8e\u5b58\u50a8\u53d8\u91cf\uff0c\u5bf9\u9f50\u89c4\u5219\u662f\u76f8\u540c\u7684\u3002\u521b\u5efa\u7f13\u51b2\u533a\u65f6\u7684\u7528\u6cd5\u5fc5\u987b\u5305\u542b GPUBufferUsage.STORAGE\u3002\u5728\u7ed1\u5b9a\u7ec4\u5e03\u5c40\u4e2d\uff0c\u7c7b\u578b\u5fc5\u987b\u662f \"read-only-storage\" \u7528\u4e8e\u9ed8\u8ba4\u7684\u53ea\u8bfb\u5b58\u50a8\u53d8\u91cf\uff0c\u6216\u8005 \"storage\" \u7528\u4e8e\u8bfb\u5199\u5b58\u50a8\u53d8\u91cf\u3002</p> <p>In addition to the alignment rule for uniform and storage bindings, GLSL has alignment rules for its data types. The alignment value for a data type can be 4, 8, or 16. An alignment is always a power of 2. (Alignment 2 is also possible for a 16-bit floating point type that can only be used if a language extension is enabled; 16-bit floats are not covered in this textbook.) If the alignment for a data type is N, then the memory address of any value of that type must be a multiple of N. When the value is part of a data structure, the offset of that value from the start of the data structure must be a multiple of N.</p> <p>Ordinarily, you will only need to worry about alignment for data structures in the uniform or storage address space. But in that case, knowing the alignment is essential, since you have to take it into account on the JavaScript side when writing data to buffers.</p> <p>The basic (scalar) data types in WGSL are 4-byte integers and floats, which have alignment 4. WGSL has vectors of 2, 3, and 4 scalar values, which have size 8, 12, and 16. The alignments for 2-vectors and 4-vectors are 8 and 16, as you might expect. But the size of a 3-vector is 12, which is not a legal alignment, so the alignment for 3-vectors is 16. That is, the address in memory of the first byte of a 3-vector must be a multiple of 16.</p> <p>For an array data structure, the elements of the array must be aligned within the array. This means that in an array of 3-vectors, each element must start at a multiple of 16 bytes from the start of the array. Since a 3-vector such as a vec3f only occupies 12 bytes, four extra bytes of padding must be inserted after each element. No padding is needed in an array of 2-vectors or 4-vectors. So, an array of vec3f takes up just as much memory as an array of vec4f with the same number of elements. The alignment of an array type is equal to the alignment of its elements.</p> <p>For structs, each element of the struct must satisfy the alignment rule for the data type of that element, which might require padding between some elements. The alignment for the struct itself is the maximum of the alignments of its elements. And the size of the struct must be a multiple of its alignment, which might require some padding at the end.</p> <p>Let's look at an example that might appear in a shader program that does 3D graphics (see the next section). Some of the syntax has not been covered yet, but you should be able to follow it:</p> <pre><code>struct LightProperties {\n    position : vec4f,      //  size 16,  offset  0\n    color : vec3f,         //  size 12,  offset 16 bytes (4 floats)\n    spotDirection: vec3f,  //  size 12,  offset 32 bytes (8 floats)\n    spotCosineCutoff: f32, //  size  4,  offset 44 bytes (11 floats)\n    spotExponent: f32,     //  size  4,  offset 48 bytes (12 floats)\n    enabled : f32          //  size  4,  offset 52 bytes (13 floats)\n}\n\n@group(0) @binding(0) var&lt;uniform&gt; lights : array&lt;LightProperties,4&gt;\n</code></pre> <p>The first vec3f in the struct, color, ends with byte number 27, but the next vec3f, spotDirection, can't start at byte 28 because the alignment rule says that it must start at a multiple of 16. So, four bytes of padding are added. Then, spotDirection starts at byte number 32 and ends with byte number 43. The next element is the 32-bit float spotCosineCutoff, with alignment 4, and it can start at the next byte number, 44. Note that there is no padding after spotDirection. The alignment rule for vec3f does not say that every vec3f is followed by four bytes of padding. Alignment rules are restrictions on where a variable can start. (Yes, this example did trip me up the first time I tried it.)</p> <p>The array in the example, lights, is an array of four structs of type LightProperties. The alignment for a LightProperties struct is 16 (the maximum of the alignments of its elements). The size, which must be a multiple of the alignment, is 64, with 8 bytes of padding at the end. The size of the array is therefore 256 bytes, or 64 32-bit floats. On the JavaScript side, data for the WGSL array could come from a Float32Array of length 64. When storing values into that Float32Array, you would have to be very careful to take the data alignments into account.</p> <p>WGSL also has data types for matrices of floating point values. A matrix in WGSL is essentially an array of column vectors, and it follows the same alignment rules. In particular, a matrix with 3 rows is an array of vec3f, with four bytes of padding after each column. This will become important when we work with normal transformation metrics in 3D graphics.</p> <p>To avoid a lot of frustration when working with WGSL data values, you will need to understand two aspects of WGSL that are not common in other programming languages: address spaces and alignment.</p> <p>Memory that is accessible to a GPU is divided into address spaces, which have different accessibility rules and which might be physically accessed in different ways. Every variable lives in a particular address space, and that address space is part of the variable's type. For example, we have seen how a global variable can be declared using var<code>&lt;uniform&gt;</code>. That variable lives in the uniform address space, which holds values that generally come from the JavaScript side of the program. Here are the available address spaces:</p> <ul> <li>function address space \u2014 The function address space is for local variables and parameters in functions. It is basically the function call stack for a single processor in the GPU, which is stored in the dedicated local memory for that processor. Local variables can be declared using var<code>&lt;function&gt;</code>, but the function address space is the only possibility for local variables, and they can declared using simply var.</li> <li>private address space \u2014 The private address space is used for global variables in shader programs, but each GPU processor has its own copy of the variable, stored in the dedicated local memory for that processor. As a global variable, a variable declared using var<code>&lt;private&gt;</code> can be used in any function in the shader program, but a given copy of the variable is only shared by function calls in the same invocation of the shader.</li> <li>uniform address space \u2014 The uniform address space holds global variables that are shared by all GPU processors. Uniform variables are read-only. A variable declaration using var<code>&lt;uniform&gt;</code> cannot include an initial value for the variable, and a shader cannot assign a new value to the variable. The values in a uniform variable are \"resources\" that come from a bind group, and every uniform variable declaration must have @group and @binding annotations that are used to specify the source of the resource.</li> <li>storage address space \u2014 The storage address space is similar to the uniform space. Storage variables require @group and @binding annotations and cannot be assigned an initial value in the shader program. Storage variables by default are read-only, but read-write access is also possible. (A storage variable with read-write access can be used in fragment and compute shaders, but not in vertex shaders.) A storage variable with read-write access is declared using var<code>&lt;storage,read_write&gt;</code>.</li> <li>workgroup address space \u2014 This address space can only be used in compute shaders and will be covered later.</li> </ul> <p>Values for uniform and storage variables come from bind groups. The JavaScript side of the program provides their values using buffers, bind groups, and bind group layouts (Subsection 9.1.3). There are certain requirements: For a uniform variable, the usage property of the buffer in device.createBuffer() must include GPUBufferUsage.UNIFORM, and the buffer in the bind group layout must have its type property set to \"uniform\" (which is the default). In the bind group itself, the offset property for each entry must be a multiple of 256. This is an example of an alignment rule. For example, if there are two uniform variables in the shader program</p> <pre><code>@group(0) @binding(0) var&lt;uniform&gt; x : f32;\n@group(0) @binding(1) var&lt;uniform&gt; y : f32;\n</code></pre> <p>and if one buffer is used to hold both variables, then the buffer must be at least 300 bytes and the bind group would be something like</p> <pre><code>bindGroup = device.createBindGroup({\nlayout: bindGroupLayout,\nentries: [{\n    binding: 0,\n    resource: {\n        buffer: buffer, offset: 0, size: 4\n    }\n},\n{\n    binding: 1,\n    resource: {\n        buffer: buffer, offset: 256, size: 4\n    }\n}]\n});\n</code></pre> <p>For storage variables the alignment rule is the same. The usage when creating the buffer must include GPUBufferUsage.STORAGE. And the type in the bind group layout must be \"read-only-storage\" for the default read-only storage variables, or \"storage\" for read-write storage variables.</p> <p>In addition to the alignment rule for uniform and storage bindings, GLSL has alignment rules for its data types. The alignment value for a data type can be 4, 8, or 16. An alignment is always a power of 2. (Alignment 2 is also possible for a 16-bit floating point type that can only be used if a language extension is enabled; 16-bit floats are not covered in this textbook.) If the alignment for a data type is N, then the memory address of any value of that type must be a multiple of N. When the value is part of a data structure, the offset of that value from the start of the data structure must be a multiple of N.</p> <p>Ordinarily, you will only need to worry about alignment for data structures in the uniform or storage address space. But in that case, knowing the alignment is essential, since you have to take it into account on the JavaScript side when writing data to buffers.</p> <p>The basic (scalar) data types in WGSL are 4-byte integers and floats, which have alignment 4. WGSL has vectors of 2, 3, and 4 scalar values, which have size 8, 12, and 16. The alignments for 2-vectors and 4-vectors are 8 and 16, as you might expect. But the size of a 3-vector is 12, which is not a legal alignment, so the alignment for 3-vectors is 16. That is, the address in memory of the first byte of a 3-vector must be a multiple of 16.</p> <p>For an array data structure, the elements of the array must be aligned within the array. This means that in an array of 3-vectors, each element must start at a multiple of 16 bytes from the start of the array. Since a 3-vector such as a vec3f only occupies 12 bytes, four extra bytes of padding must be inserted after each element. No padding is needed in an array of 2-vectors or 4-vectors. So, an array of vec3f takes up just as much memory as an array of vec4f with the same number of elements. The alignment of an array type is equal to the alignment of its elements.</p> <p>For structs, each element of the struct must satisfy the alignment rule for the data type of that element, which might require padding between some elements. The alignment for the struct itself is the maximum of the alignments of its elements. And the size of the struct must be a multiple of its alignment, which might require some padding at the end.</p> <p>Let's look at an example that might appear in a shader program that does 3D graphics (see the next section). Some of the syntax has not been covered yet, but you should be able to follow it:</p> <pre><code>struct LightProperties {\n    position : vec4f,      //  size 16,  offset  0\n    color : vec3f,         //  size 12,  offset 16 bytes (4 floats)\n    spotDirection: vec3f,  //  size 12,  offset 32 bytes (8 floats)\n    spotCosineCutoff: f32, //  size  4,  offset 44 bytes (11 floats)\n    spotExponent: f32,     //  size  4,  offset 48 bytes (12 floats)\n    enabled : f32          //  size  4,  offset 52 bytes (13 floats)\n}\n\n@group(0) @binding(0) var&lt;uniform&gt; lights : array&lt;LightProperties,4&gt;\n</code></pre> <p>The first vec3f in the struct, color, ends with byte number 27, but the next vec3f, spotDirection, can't start at byte 28 because the alignment rule says that it must start at a multiple of 16. So, four bytes of padding are added. Then, spotDirection starts at byte number 32 and ends with byte number 43. The next element is the 32-bit float spotCosineCutoff, with alignment 4, and it can start at the next byte number, 44. Note that there is no padding after spotDirection. The alignment rule for vec3f does not say that every vec3f is followed by four bytes of padding. Alignment rules are restrictions on where a variable can start. (Yes, this example did trip me up the first time I tried it.)</p> <p>The array in the example, lights, is an array of four structs of type LightProperties. The alignment for a LightProperties struct is 16 (the maximum of the alignments of its elements). The size, which must be a multiple of the alignment, is 64, with 8 bytes of padding at the end. The size of the array is therefore 256 bytes, or 64 32-bit floats. On the JavaScript side, data for the WGSL array could come from a Float32Array of length 64. When storing values into that Float32Array, you would have to be very careful to take the data alignments into account.</p> <p>WGSL also has data types for matrices of floating point values. A matrix in WGSL is essentially an array of column vectors, and it follows the same alignment rules. In particular, a matrix with 3 rows is an array of vec3f, with four bytes of padding after each column. This will become important when we work with normal transformation metrics in 3D graphics.</p>"},{"location":"cn/c9/s3/#932-\u6570\u636e\u7c7b\u578b","title":"9.3.2 \u6570\u636e\u7c7b\u578b","text":"<p>Data Types</p> \u4e2d\u6587\u82f1\u6587 <p>WGSL\u4e2d\u7684\u57fa\u672c\u6216\u201c\u6807\u91cf\u201d\u7c7b\u578b\u5305\u62ec\u5e03\u5c14\u7c7b\u578bbool\uff0c\u5176\u503c\u4e3atrue\u548cfalse\uff1b32\u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u7c7b\u578bu32\uff1b32\u4f4d\u6709\u7b26\u53f7\u6574\u578b\u7c7b\u578bi32\uff1b\u4ee5\u53ca32\u4f4d\u6d6e\u70b9\u7c7b\u578bf32\u3002\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6ca1\u67098\u4f4d\u300116\u4f4d\u621664\u4f4d\u7684\u6570\u503c\u7c7b\u578b\uff08\u5c3d\u7ba116\u4f4d\u6d6e\u70b9\u7c7b\u578bf16\u4f5c\u4e3a\u8bed\u8a00\u6269\u5c55\u662f\u53ef\u7528\u7684\uff09\u3002</p> <p>\u5e03\u5c14\u7c7b\u578bbool\u4e0d\u662f\u201c\u5bbf\u4e3b\u5171\u4eab\u201d\u7684\uff0c\u8fd9\u610f\u5473\u7740bool\u7c7b\u578b\u7684\u53d8\u91cf\u4e0d\u80fd\u4f4d\u4e8e\u5b58\u50a8\u6216uniform\u5730\u5740\u7a7a\u95f4\uff0c\u4e5f\u4e0d\u80fd\u4eceJavaScript\u7aef\u83b7\u53d6\u5176\u503c\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4efb\u4f55\u5305\u542bbool\u7684\u7684\u6570\u636e\u7ed3\u6784\u90fd\u4e0d\u80fd\u4f4d\u4e8e\u5b58\u50a8\u6216uniform\u5730\u5740\u7a7a\u95f4\u3002</p> <p>\u6574\u578b\u5b57\u9762\u91cf\u53ef\u4ee5\u4ee5\u901a\u5e38\u7684\u5341\u8fdb\u5236\u5f62\u5f0f\u4e66\u5199\uff0c\u6216\u8005\u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u4e66\u5199\uff0c\u4ee50x\u62160X\u5f00\u5934\u3002u32\u7c7b\u578b\u7684\u6574\u578b\u5b57\u9762\u91cf\u4ee5\"u\"\u540e\u7f00\u4e66\u5199\uff0ci32\u7c7b\u578b\u7684\u4ee5\"i\"\u540e\u7f00\u4e66\u5199\u3002\u4e00\u4e9b\u4f8b\u5b50\uff1a17i, 0u, 0xfadeu, 0X7Fi\u3002\u6ca1\u6709\u540e\u7f00\u7684\u6574\u578b\u5b57\u9762\u91cf\u4e5f\u662f\u53ef\u80fd\u7684\uff1b\u5b83\u4eec\u88ab\u8ba4\u4e3a\u662f\u201c\u62bd\u8c61\u6574\u6570\u201d\u3002\u5947\u602a\u7684\u662f\uff0c\u62bd\u8c61\u6574\u6570\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3au32\u3001i32\u6216f32\uff0c\u5c3d\u7ba1WGSL\u4e0d\u4f1a\u5728\u5e38\u89c4\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u81ea\u52a8\u8f6c\u6362\u3002\u56e0\u6b64\uff0c\u5982\u679cN\u662ff32\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u8868\u8fbe\u5f0fN+2\u662f\u5408\u6cd5\u7684\uff0c\u62bd\u8c61\u6574\u65702\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3af32\u3002\u4f46\u662f\u8868\u8fbe\u5f0fN+2u\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3au32 2u\u4e0d\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3af32\u3002\u62bd\u8c61\u6574\u6570\u7684\u4e3b\u8981\u76ee\u7684\u4f3c\u4e4e\u662f\u4f7f\u5f97\u80fd\u591f\u4ee5\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u4e66\u5199\u6d89\u53ca\u5e38\u91cf\u7684\u8868\u8fbe\u5f0f\u3002</p> <p>\u6d6e\u70b9\u5b57\u9762\u91cf\u5305\u62ec\u5c0f\u6570\u70b9\u3001\u6307\u6570\u6216\"f\"\u540e\u7f00\u3002\u5e26\u6709\"f\"\u540e\u7f00\u7684\u6d6e\u70b9\u5b57\u9762\u91cf\u7c7b\u578b\u4e3af32\u3002\u6ca1\u6709\u540e\u7f00\u7684\uff0c\u5b83\u662f\u201c\u62bd\u8c61\u6d6e\u70b9\u6570\u201d\uff0c\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3af32\u7c7b\u578b\u3002\u4f8b\u5b50\u5305\u62ec\uff1a.0, 17.0, 42f, 0.03e+10f\u3002\uff08\u4e5f\u6709\u5341\u516d\u8fdb\u5236\u6d6e\u70b9\u5b57\u9762\u91cf\uff0c\u4f46\u8fd9\u91cc\u4e0d\u6d89\u53ca\u3002\uff09</p> <p>WGSL\u5177\u6709\u5177\u67092\u30013\u548c4\u4e2a\u5143\u7d20\u7684\u5411\u91cf\u7c7b\u578b\u3002\u5411\u91cf\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4efb\u4f55\u6807\u91cf\u7c7b\u578b\uff1abool\u3001u32\u3001i32\u6216f32\u3002\u5411\u91cf\u7c7b\u578b\u6709\u5b98\u65b9\u540d\u79f0\uff0c\u5982<code>vec3&lt;f32&gt;</code>\u8868\u793a\u5305\u542b\u4e09\u4e2af32\u503c\u7684\u5411\u91cf\uff0c<code>vec4&lt;bool&gt;</code>\u8868\u793a\u5305\u542b\u56db\u4e2abool\u7684\u5411\u91cf\u3002\u4f46\u662f\u6570\u503c\u5411\u91cf\u7684\u7c7b\u578b\u540d\u79f0\u6709\u66f4\u5e38\u7528\u7684\u201c\u522b\u540d\u201d\uff1avec4f\u662f<code>vec4&lt;f32&gt;</code>\u7684\u522b\u540d\uff0cvec2i\u662f<code>vec2&lt;i32&gt;</code>\u7684\u522b\u540d\uff0cvec3u\u662f<code>vec3&lt;u32&gt;</code>\u7684\u522b\u540d\u3002</p> <p>\u5411\u91cf\u7c7b\u4f3c\u4e8e\u6570\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u8868\u793a\u6cd5\u5f15\u7528\u5411\u91cf\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5982\u679cV\u662fvec4f\uff0c\u90a3\u4e48\u5b83\u7684\u5143\u7d20\u662fV[0]\u3001V[1]\u3001V[2]\u548cV[3]\u3002\u5143\u7d20\u4e5f\u53ef\u4ee5\u4f7f\u7528swizzlers\u8868\u793a\u4e3aV.x\u3001V.y\u3001V.z\u548cV.w\u3002\u901a\u8fc7\u5728\u70b9\u540e\u9762\u4f7f\u7528\u591a\u4e2a\u5b57\u6bcd\uff0c\u53ef\u4ee5\u6784\u9020\u7531V\u7684\u9009\u5b9a\u5143\u7d20\u7ec4\u6210\u7684\u5411\u91cf\u3002\u4f8b\u5982\uff0cV.yx\u662f\u4e00\u4e2a\u5305\u542bV\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u6392\u5217\u7684vec4f\uff0cV.zzzz\u662f\u7531V\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\u7684\u56db\u4efd\u526f\u672c\u7ec4\u6210\u7684vec4f\u3002\u5b57\u6bcdrgba\u4e5f\u53ef\u4ee5\u4ee3\u66ffxyzw\u3002\uff08\u8fd9\u4e0eGLSL\u7c7b\u4f3c\uff0c6.3.1\u5c0f\u8282\u3002\uff09</p> <p>WGSL\u8fd8\u6709\u77e9\u9635\u7c7b\u578b\uff0c\u4f46\u53ea\u6709\u7528\u4e8e\u6d6e\u70b9\u503c\u7684\u77e9\u9635\u3002\u67092x2\u30013x3\u548c4x4\u77e9\u9635\u7684N-by-M\u7c7b\u578b\uff0c\u5b98\u65b9\u540d\u79f0\u5982<code>mat3x2&lt;f32&gt;</code>\u548c<code>mat4x4&lt;f32&gt;</code>\u3002\u4f46\u662f\u8fd9\u4e9b\u7c7b\u578b\u4e5f\u6709\u66f4\u7b80\u5355\u7684\u522b\u540d\uff0c\u5982mat3x2f\u548cmat4x4f\u3002</p> <p>\u6570\u7ec4\u7684\u5143\u7d20\u4ee5\u5217\u4e3b\u5e8f\u5b58\u50a8\uff1a\u7b2c\u4e00\u5217\u7684\u5143\u7d20\uff0c\u7136\u540e\u662f\u7b2c\u4e8c\u5217\u7684\u5143\u7d20\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6bcf\u4e00\u5217\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u5217\u5411\u91cf\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u8868\u793a\u6cd5\u8bbf\u95ee\u3002\u4f8b\u5982\uff0c\u5982\u679cM\u662fmat4x4f\uff0c\u90a3\u4e48M[1]\u662fM\u7684\u7b2c\u4e8c\u5217\u7684vec4f\uff0cM[1][0]\u662f\u8be5\u5411\u91cf\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>\u5bf9\u4e8e\u6784\u5efa\u6570\u636e\u7ed3\u6784\uff0cWGSL\u6709\u6570\u7ec4\u548c\u7ed3\u6784\u4f53\u3002\u5177\u6709\u5143\u7d20\u7c7b\u578bT\u548c\u957f\u5ea6N\u7684\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b\u662f<code>array&lt;T,N&gt;</code>\u3002\u6570\u7ec4\u957f\u5ea6\u5fc5\u987b\u662f\u5e38\u91cf\u3002\u6ca1\u6709\u957f\u5ea6\u7684\u6570\u7ec4\u7c7b\u578b\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u53ea\u5728\u5b58\u50a8\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\u50cf\u901a\u5e38\u4e00\u6837\u5f15\u7528\u6570\u7ec4\u5143\u7d20\uff1b\u4f8b\u5982\uff0c<code>A[i]</code>\u3002</p> <p>\u7ed3\u6784\u4f53\u6570\u636e\u7c7b\u578b\u5305\u542b\u6210\u5458\u58f0\u660e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u3002\u53c2\u89c1\u4e0a\u9762LightProperties\u7c7b\u578b\u7684\u793a\u4f8b\u5b9a\u4e49\u3002\u6210\u5458\u53ef\u4ee5\u662f\u6807\u91cf\u3001\u5411\u91cf\u3001\u77e9\u9635\u3001\u6570\u7ec4\u6216\u7ed3\u6784\u4f53\u3002\u4f7f\u7528\u901a\u5e38\u7684\u70b9\u8868\u793a\u6cd5\u8bbf\u95ee\u6210\u5458\u3002\u4f8b\u5982\uff0c\u5982\u679cL\u662fLightProperties\u7c7b\u578b\uff0c\u90a3\u4e48L.color\u662fL\u7684\u989c\u8272\u6210\u5458\u3002\u6211\u5c06\u6307\u51fa\uff0c\u7ed3\u6784\u4f53\u7684\u5404\u4e2a\u6210\u5458\u53ef\u4ee5\u6709\u6ce8\u89e3\u3002\u4f8b\u5982\uff0c</p> <pre><code>struct VertexOutput {\n    @builtin(position) position: vec4f,\n    @location(0) color : vec3f\n}\n</code></pre> <p>WGSL\u6709\u6307\u9488\u7c7b\u578b\uff0c\u4f46\u636e\u6211\u6240\u77e5\uff0c\u5b83\u4eec\u53ea\u80fd\u7528\u4e8e\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u5f62\u5f0f\u53c2\u6570\u7c7b\u578b\u3002\u6307\u9488\u7c7b\u578b\u540d\u79f0\u91c7\u7528<code>ptr&lt;A,T&gt;</code>\u7684\u5f62\u5f0f\uff0c\u5176\u4e2dA\u662f\u5730\u5740\u7a7a\u95f4\u540d\u79f0\uff0cT\u662f\u7c7b\u578b\uff1b\u4f8b\u5982\uff1a<code>ptr&lt;function,i32&gt;</code>\u6216<code>ptr&lt;private,array&lt;f32,5&gt;&gt;</code>\u3002\u7c7b\u578b<code>ptr&lt;A,T&gt;</code>\u7684\u6307\u9488\u53ea\u80fd\u6307\u5411\u5730\u5740\u7a7a\u95f4A\u4e2d\u7c7b\u578bT\u7684\u503c\u3002</p> <p>\u5982\u679cP\u662f\u6307\u9488\uff0c\u90a3\u4e48*P\u662f\u5b83\u6307\u5411\u7684\u503c\u3002\u5982\u679cV\u662f\u53d8\u91cf\uff0c\u90a3\u4e48&amp;V\u662f\u6307\u5411V\u7684\u6307\u9488\u3002\u6307\u9488\u7c7b\u578b\u53ef\u7528\u4e8e\u5b9e\u73b0\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u5f15\u7528\u3002\u4f8b\u5982\uff0c</p> <pre><code>fn array5sum( A : ptr&lt;function,array&lt;f32,5&gt;&gt; ) -&gt; f32 {\n    var sum = 0;\n    for (var i = 0; i &lt; 5; i++) {\n        sum += (*A)[i];\n    }\n    return sum;\n}\n</code></pre> <p>\u6ce8\u610f\u4f7f\u7528*A\u6765\u547d\u540dA\u6307\u5411\u7684\u6570\u7ec4\u3002\u5728<code>(*A)[i]</code>\u4e2d\u4f7f\u7528\u62ec\u53f7\u662f\u7531\u4f18\u5148\u7ea7\u89c4\u5219\u8981\u6c42\u7684\u3002\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\uff1aarray5sum(&amp;Nums)\uff0c\u5176\u4e2dNums\u662f\u51fd\u6570\u5730\u5740\u7a7a\u95f4\u4e2d\u7684<code>array&lt;f32,5&gt;</code>\u7c7b\u578b\u7684\u53d8\u91cf\u3002\uff08\u4e5f\u5c31\u662f\u8bf4\uff0cNums\u5fc5\u987b\u662f\u5c40\u90e8\u53d8\u91cf\u3002\uff09</p> <p>\u6807\u91cf\u7c7b\u578b\u3001\u5411\u91cf\u3001\u77e9\u9635\u3001\u6570\u7ec4\u548c\u7ed3\u6784\u4f53\u90fd\u662f\u53ef\u6784\u9020\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u4ece\u9002\u5f53\u7684\u503c\u5217\u8868\u6784\u9020\u7ed9\u5b9a\u7c7b\u578b\u7684\u503c\u3002\u7b26\u53f7\u770b\u8d77\u6765\u50cf\u51fd\u6570\u8c03\u7528\uff0c\u51fd\u6570\u540d\u79f0\u662f\u7c7b\u578b\u7684\u540d\u79f0\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff1a</p> <pre><code>var a = u32(23.67f);           // a\u662f23u\nvar b = f32(a);                // b\u662f23.0f\nvar c = vec3f(1, 2, 3);        // \u62bd\u8c61\u6574\u65701,2,3\u88ab\u8f6c\u6362\u4e3af32\nvar d = vec4f(c.xy, 0, 1);     // c.xy\u5411vec4f\u8d21\u732e\u4e86\u4e24\u4e2a\u503c\nvar e = mat2x2f(1, 0, 0, 1);   // \u6784\u90202x2\u5355\u4f4d\u77e9\u9635\nvar f = mat3x3f(c, c, c);      // f\u7684\u6bcf\u4e00\u5217\u662fvec3f c\nvar g = array&lt;u32,4&gt;(1,2,3,4); // \u6784\u9020\u957f\u5ea6\u4e3a4\u7684\u6570\u7ec4\nvar h = MyStruct( 17u, 42f );  // MyStruct\u662f\u7531u32\u548cf32\u7ec4\u6210\u7684\u7ed3\u6784\u4f53\nvar i = vec4i(2);              // \u4e0evec4i(2,2,2,2)\u76f8\u540c\uff1b2\u88ab\u91cd\u590d\n</code></pre> <p>The basic, or \"scalar,\" types in WGSL include the boolean type, bool, with values true and false; the 32-bit unsigned integer type, u32; the 32-bit signed integer type, i32; and the 32-bit floating point type, f32. Note in particular that there are no 8-bit, 16-bit, or 64-bit numeric types (although the 16-bit floating point type, f16, is available as a language extension).</p> <p>The bool type is not \"host sharable,\" which means that a variable of type bool cannot be in the storage or uniform address space, and it can't get its value from the JavaScript side. This also means that any data structure that includes a bool cannot be in the storage or uniform address space.</p> <p>Literals of integer type can be written in the usual decimal form, or in hexadecimal form with a leading 0x or 0X. An integer literal of type u32 is written with a \"u\" suffix, and one of type i32 with an \"i\" suffix. Some examples: 17i, 0u, 0xfadeu, 0X7Fi. Integer literals without suffixes are also possible; they are considered to be \"abstract integers.\" Curiously, an abstract integer can be automatically converted into a u32, i32, or f32, even though WGSL will not do automatic conversions between the regular types. So, if N is a variable of type f32, then the expression N+2 is legal, with the abstract integer 2 being automatically converted into an f32. But the expression N+2u is illegal because the u32 2u is not automatically converted to f32. The main point of abstract integers seems to be to make it possible to write expressions involving constants in a more natural way.</p> <p>Floating point literals include either a decimal point, or an exponent, or an \"f\" suffix.\" A floating point literal with an \"f\" suffix has type f32. Without the suffix, it is an \"abstract float,\" which can be automatically converted to type f32. Examples include: .0, 17.0, 42f, 0.03e+10f. (There are also hexadecimal floating point literals, but they are not covered here.)</p> <p>WGSL has vector types with 2, 3, and 4 elements. The elements in a vector can be any scalar type: bool, u32, i32, or f32. The vector types have official names like <code>vec3&lt;f32&gt;</code> for a vector of three f32 values and <code>vec4&lt;bool&gt;</code> for a vector of four bools. But the type names for numeric vectors have \"aliases\" that are more commonly used instead of the official names: vec4f is an alias for <code>vec4&lt;f32&gt;</code>, vec2i is an alias for <code>vec2&lt;i32&gt;</code>, and vec3u is an alias for <code>vec3&lt;u32&gt;</code>.</p> <p>Vectors are similar to arrays, and the elements of a vector can be referred to using array notation. For example, if V is a vec4f, then its elements are V[0], V[1], V[2], and V[3]. The elements can also be referred to using swizzlers as V.x, V.y, V.z, and V.w. By using multiple letters after the dot, you can construct vectors made up of selected elements of V. For example, V.yx is a vec4f containing the first two elements of V in reversed order, and V.zzzz is a vec4f made up of four copies of the third element of V. The letters rgba can also be used instead of xyzw. (All this is similar to GLSL, Subsection 6.3.1.)</p> <p>WGSL also has matrix types, but only for matrices of floating point values. There are types for N-by-M matrices for all a N and M equal to 2, 3, or 4, with official names like <code>mat3x2&lt;f32&gt;</code> and <code>mat4x4&lt;f32&gt;</code>. But again these types have simpler aliases like mat3x2f and mat4x4f.</p> <p>The elements of an array are stored in column-major order: the elements of the first column, followed by the elements of the second column, and so on. Each column is a vector, and the column vectors can be accessed using array notation. For example, if M is a mat4x4f, then M[1] is the vec4f that is the second column of M, and M[1][0] is the first element of that vector.</p> <p>For building data structures, WGSL has arrays and structs. The data type for an array with element type T and length N is <code>array&lt;T,N&gt;</code>. The array length must be a constant. Array types without a length are also possible, but only in the storage address space. Array elements are referred to as usual; for example, <code>A[i]</code>.</p> <p>A struct data type contains a list of member declarations, which can be of different types. See, for example, the definition of the LightProperties type, above. A member can be a scalar, a vector, a matrix, an array, or a struct. Members are accessed using the usual dot notation. For example, if L is of type LightProperties, then L.color is the color member of L. I will note that the individual members of a struct can have annotations. For example,</p> <pre><code>struct VertexOutput {\n@builtin(position) position: vec4f,\n@location(0) color : vec3f\n}\n</code></pre> <p>WGSL has pointer types, but as far as I can tell, they can only be used for the types of formal parameters in function definitions. A pointer type name takes the form <code>ptr&lt;A,T&gt;</code>, where A is an address space name and T is a type; for example:<code>ptr&lt;function,i32&gt;</code> or <code>ptr&lt;private,array&lt;f32,5&gt;&gt;</code>. A pointer of type <code>ptr&lt;A,T&gt;</code> can only point to a value of type T in address space A.</p> <p>If P is a pointer, then *P is the value that it points to. If V is a variable, then &amp;V is a pointer to V. Pointer types can be used to implement pass-by-reference to a function. For example,</p> <pre><code>fn array5sum( A : ptr&lt;function,array&lt;f32,5&gt;&gt; ) -&gt; f32 {\n    var sum = 0;\n    for (var i = 0; i &lt; 5; i++) {\n        sum += (*A)[i];\n    }\n    return sum;\n}\n</code></pre> <p>Note the use of *A to name the array that A points to. The parentheses in <code>(*A)[i]</code> are required by precedence rules. This function could be called as array5sum(&amp;Nums) where Nums is a variable of type <code>array&lt;f32,5&gt;</code> in the function address space. (That is, Nums must be a local variable.)</p> <p>Scalar types, vectors, matrices, arrays, and structs are constructible. That is, a value of the given type can be constructed from an appropriate list of values. The notation looks like a function call, with the function name being the name of the type. Here are some examples:</p> <pre><code>var a = u32(23.67f);           // a is 23u\nvar b = f32(a);                // b is 23.0f\nvar c = vec3f(1, 2, 3);        // the abstract ints 1,2,3 are converted to f32\nvar d = vec4f(c.xy, 0, 1);     // c.xy contributes two values to the vec4f\nvar e = mat2x2f(1, 0, 0, 1);   // constructs the 2-by-2 identity matrix\nvar f = mat3x3f(c, c, c);      // each column of f is the vec3f c\nvar g = array&lt;u32,4&gt;(1,2,3,4); // construct an array of length 4\nvar h = MyStruct( 17u, 42f );  // MyStruct is a struct made of a u32 and an f32\nvar i = vec4i(2);              // Same as vec4i(2,2,2,2); the 2 is repeated\n</code></pre>"},{"location":"cn/c9/s3/#933-\u58f0\u660e\u548c\u6ce8\u89e3","title":"9.3.3 \u58f0\u660e\u548c\u6ce8\u89e3","text":"<p>Declarations and Annotations</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5982\u4f55\u4f7f\u7528 <code>var&lt;A&gt;</code> \u58f0\u660e\u53d8\u91cf\uff0c\u5176\u4e2d A \u662f\u5730\u5740\u7a7a\u95f4\u3002\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u53ef\u4ee5\u4f7f\u7528 <code>var&lt;function&gt;</code> \u6216\u8005\u7b80\u5355\u5730\u4f7f\u7528 var \u6765\u58f0\u660e\u3002\u5bf9\u4e8e\u5168\u5c40\u53d8\u91cf\uff0c\u9700\u8981\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4 \u2014\u2014 \u79c1\u6709\u7684\u3001uniform\u3001\u5b58\u50a8\u7684\u6216\u5de5\u4f5c\u7ec4\u7684\uff08\u4f46\u662f\u4e0e\u7eb9\u7406\u76f8\u5173\u7684\u5168\u5c40\u53d8\u91cf\u9075\u5faa\u4e0d\u540c\u7684\u89c4\u5219\uff09\u3002</p> <p>\u53ef\u4ee5\u5728\u58f0\u660e\u4e2d\u901a\u8fc7\u5728\u53d8\u91cf\u540d\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u7136\u540e\u662f\u7c7b\u578b\u540d\u79f0\u6765\u6307\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p> <pre><code>var&lt;private&gt; sum : f32;\n</code></pre> <p>\u5728\u51fd\u6570\u6216\u79c1\u6709\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u53d8\u91cf\u58f0\u660e\u53ef\u4ee5\u5305\u542b\u53d8\u91cf\u7684\u521d\u59cb\u503c\u3002\u521d\u59cb\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5e38\u91cf\u3001\u4e00\u4e2a\u53d8\u91cf\u6216\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u5f53\u58f0\u660e\u4e2d\u5305\u542b\u521d\u59cb\u503c\u65f6\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u6307\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a GLSL \u7f16\u8bd1\u5668\u53ef\u4ee5\u4ece\u521d\u59cb\u503c\u786e\u5b9a\u7c7b\u578b\u3002\u5f53\u4f7f\u7528\u62bd\u8c61\u6574\u6570\u521d\u59cb\u5316\u53d8\u91cf\u4e14\u672a\u6307\u5b9a\u7c7b\u578b\u65f6\uff0c\u7c7b\u578b\u88ab\u89c6\u4e3a i32\u3002</p> <p>\u5728\u51fd\u6570\u4f53\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 let \u800c\u4e0d\u662f var \u6765\u58f0\u660e\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002\u7ed3\u679c\u662f\u4e00\u4e2a\u547d\u540d\u503c\u800c\u4e0d\u662f\u53d8\u91cf\u3002let \u58f0\u660e\u5fc5\u987b\u5305\u542b\u521d\u59cb\u503c\u3002\u521d\u59cb\u5316\u540e\u503c\u4e0d\u80fd\u66f4\u6539\u3002\u58f0\u660e\u4e2d\u53ef\u4ee5\u53ef\u9009\u5730\u5305\u542b\u7c7b\u578b\uff0c\u4f46\u901a\u5e38\u4e0d\u5fc5\u8981\u3002\u4e0d\u80fd\u6307\u5b9a\u5730\u5740\u7a7a\u95f4\u3002\u4f7f\u7528 let \u660e\u786e\u8868\u793a\u4f60\u4e0d\u671f\u671b\u503c\u4f1a\u6539\u53d8\uff0c\u5e76\u4f7f\u610f\u5916\u66f4\u6539\u503c\u53d8\u5f97\u4e0d\u53ef\u80fd\u3002</p> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528 const \u58f0\u660e\u547d\u540d\u503c\uff0c\u4f46\u662f\u5728 const \u58f0\u660e\u4e2d\u7684\u521d\u59cb\u503c\u5fc5\u987b\u662f\u5df2\u77e5\u4e8e\u7f16\u8bd1\u65f6\u7684\u5e38\u91cf\u3002\u521d\u59cb\u503c\u53ef\u4ee5\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7ed9\u51fa\uff0c\u53ea\u8981\u8868\u8fbe\u5f0f\u53ea\u5305\u542b\u5e38\u91cf\u3002\u867d\u7136 let \u53ea\u80fd\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\uff0cconst \u58f0\u660e\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u5730\u65b9\u3002</p> <p>\u4e00\u4e2a\u58f0\u660e\u53ea\u80fd\u58f0\u660e\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002\u6240\u4ee5\u50cf \"<code>var a = 1, b = 2;</code>\" \u8fd9\u6837\u7684\u4e1c\u897f\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u8fd9\u9002\u7528\u4e8e const \u548c let\uff0c\u4ee5\u53ca var\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u50cf @location(0) \u8fd9\u6837\u7684\u6ce8\u89e3\u53ef\u4ee5\u7528\u4e8e\u53d8\u91cf\u58f0\u660e\u3001\u51fd\u6570\u5b9a\u4e49\u3001\u51fd\u6570\u5f62\u5f0f\u53c2\u6570\u548c\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002\uff08WGSL \u6587\u6863\u79f0\u5b83\u4eec\u4e3a \"attributes\"\uff0c\u4f46\u6211\u66f4\u503e\u5411\u4e8e\u4fdd\u7559 \"attribute\" \u8fd9\u4e2a\u672f\u8bed\u7528\u4e8e\u9876\u70b9\u5c5e\u6027\u3002\uff09\u8fd9\u672c\u6559\u79d1\u4e66\u53ea\u6db5\u76d6\u4e86\u6700\u5e38\u89c1\u7684\u6ce8\u89e3\u3002\u6211\u4eec\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u9047\u5230\u4e86\u5176\u4e2d\u4e00\u4e9b\uff0c\u5728\u8ba8\u8bba\u8ba1\u7b97\u7740\u8272\u5668\u65f6\uff0c\u7a0d\u540e\u4f1a\u770b\u5230\u66f4\u591a\u3002\u5e38\u89c1\u7684\u6ce8\u89e3\u5305\u62ec\uff1a</p> <ul> <li>group(N) \u548c @binding(M)\uff0cN \u548c M \u662f\u6574\u6570\uff0c\u7528\u4e8e uniform \u548c storage \u5730\u5740\u7a7a\u95f4\u7684 var \u58f0\u660e\u4e2d\uff0c\u6307\u5b9a\u8d44\u6e90\u7684\u6765\u6e90\u3002\u5173\u8054\u662f\u901a\u8fc7\u7ed1\u5b9a\u7ec4\u5e03\u5c40\u6307\u5b9a\u7684\u3002\u89c1 9.1.3\u5c0f\u8282\u3002</li> <li>@vertex\u3001@fragment \u548c @compute \u7528\u4e8e\u51fd\u6570\u5b9a\u4e49\uff0c\u6307\u5b9a\u8be5\u51fd\u6570\u53ef\u4ee5\u7528\u4f5c\u9876\u70b9\u3001\u7247\u6bb5\u6216\u8ba1\u7b97\u7740\u8272\u5668\u7684\u5165\u53e3\u70b9\u51fd\u6570\u3002\u89c1 9.1.2\u5c0f\u8282\u3002</li> <li>@location(N)\uff0cN \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u53ef\u4ee5\u7528\u4e8e\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u5b83\u53ef\u4ee5\u5e94\u7528\u4e8e\u5b83\u4eec\u7684\u5f62\u5f0f\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\uff0c\u4ee5\u53ca\u7528\u4e8e\u6307\u5b9a\u5b83\u4eec\u7684\u6b63\u5f0f\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u6210\u5458\u3002\u542b\u4e49\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\u3002\u5728\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u7684\u8f93\u5165\u4e0a\uff0c\u5b83\u6307\u5b9a\u4e86\u9876\u70b9\u7f13\u51b2\u533a\u4e2d\u8f93\u5165\u7684\u6765\u6e90 (9.1.6\u5c0f\u8282)\u3002\u5728\u7247\u6bb5\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e0a\uff0c\u5b83\u6307\u5b9a\u4e86\u8be5\u8f93\u51fa\u7684\u76ee\u6807\u989c\u8272\u9644\u4ef6 (9.1.3\u5c0f\u8282)\u3002\u5f53\u7528\u4e8e\u9876\u70b9\u7740\u8272\u5668\u8f93\u51fa\u6216\u7247\u6bb5\u7740\u8272\u5668\u8f93\u5165\u65f6\uff0c\u5b83\u5c06\u9876\u70b9\u7740\u8272\u5668\u7684\u7279\u5b9a\u8f93\u51fa\u4e0e\u7247\u6bb5\u7740\u8272\u5668\u7684\u76f8\u5e94\u8f93\u5165\u5173\u8054\u8d77\u6765 (9.1.6\u5c0f\u8282)\u3002</li> <li>@interpolate(flat) \u53ef\u4ee5\u5e94\u7528\u4e8e\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u7684\u8f93\u51fa\u548c\u7247\u6bb5\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u76f8\u5e94\u8f93\u5165\u3002\u5982\u679c\u5b83\u5e94\u7528\u4e8e\u5176\u4e2d\u4e00\u4e2a\uff0c\u90a3\u4e48\u5fc5\u987b\u540c\u65f6\u5e94\u7528\u4e8e\u4e24\u8005\u3002\u901a\u5e38\uff0c\u7247\u6bb5\u7740\u8272\u5668\u8f93\u5165\u7684\u503c\u662f\u4ece\u6b63\u5728\u7ed8\u5236\u7684\u4e09\u89d2\u5f62\u6216\u7ebf\u6761\u7684\u6240\u6709\u9876\u70b9\u5904\u7684\u9876\u70b9\u7740\u8272\u5668\u8f93\u51fa\u503c\u8fdb\u884c\u63d2\u503c\u5f97\u5230\u7684\u3002@interpolate(flat) \u6ce8\u89e3\u5173\u95ed\u4e86\u63d2\u503c\uff1b\u76f8\u53cd\uff0c\u4f7f\u7528\u7b2c\u4e00\u4e2a\u9876\u70b9\u7684\u503c\u7528\u4e8e\u6240\u6709\u7247\u6bb5\u3002\u8fd9\u4e2a\u6ce8\u89e3\u5bf9\u4e8e\u6574\u6570\u6216\u5e03\u5c14\u503c\u662f\u5fc5\u9700\u7684\uff0c\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u6d6e\u70b9\u503c\u3002</li> <li>@builtin(vertex_index) \u548c @builtin(instance_index) \u7528\u4e8e\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u7684\u8f93\u5165\uff0c\u4ee5\u6307\u5b9a\u6b63\u5728\u5904\u7406\u7684\u9876\u70b9\u7f16\u53f7\u6216\u5b9e\u4f8b\u7f16\u53f7\u3002\u89c1 9.2.4\u5c0f\u8282\u3002</li> <li>@builtin(position) \u5f53\u7528\u4e8e\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u7684\u8f93\u51fa\u65f6\uff0c\u6307\u5b9a\u8f93\u51fa\u662f\u9876\u70b9\u5728\u88c1\u526a\u5750\u6807\u7cfb\u4e2d\u7684 (x,y,z,w) \u5750\u6807\u3002\u6bcf\u4e2a\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u90fd\u9700\u8981\u6709\u4e00\u4e2a\u5e26\u6709\u6b64\u6ce8\u89e3\u7684\u8f93\u51fa\u3002\u5f53\u7528\u4e8e\u7247\u6bb5\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u8f93\u5165\u65f6\uff0c\u5b83\u6307\u5b9a\u8f93\u5165\u662f\u6b63\u5728\u5904\u7406\u7684\u7247\u6bb5\u7684\u63d2\u503c\u4f4d\u7f6e\uff0c\u4ee5\u89c6\u53e3\u5750\u6807\u8868\u793a\u3002\uff08\u89c1 9.4.2\u5c0f\u8282 \u8ba8\u8bba WebGPU \u4e2d\u7684\u5750\u6807\u7cfb\u3002\uff09</li> <li>@builtin(front_facing) \u7528\u4e8e\u7247\u6bb5\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u5e03\u5c14\u7c7b\u578b\u8f93\u5165\u3002\u5982\u679c\u6b63\u5728\u5904\u7406\u7684\u7247\u6bb5\u662f\u524d\u5411\u4e09\u89d2\u5f62\u7684\u4e00\u90e8\u5206\uff0c\u5219\u8be5\u503c\u5c06\u4e3a true\u3002\u8fd9\u5728 3D \u56fe\u5f62\u4e2d\u8fdb\u884c\u53cc\u9762\u7167\u660e\u65f6\u53ef\u80fd\u5f88\u6709\u7528 (7.2.4\u5c0f\u8282)\u3002</li> </ul> <p>We have seen how to declare variables using <code>var&lt;A&gt;</code>, where A is an address space. Local variables in functions can be declared using either <code>var&lt;function&gt;</code> or simply var. For global variables, an address space\u2014private, uniform, storage, or workgroup\u2014is required (but texture-related global variables follow a different rule).</p> <p>The type of a variable can be specified in a declaration by following the variable name with a colon and then the name of the type. For example</p> <pre><code>var&lt;private&gt; sum : f32;\n</code></pre> <p>The declaration of a variable in the function or private address space can include an initial value for the variable. The initial value can be a constant, a variable, or an expression. When an initial value is included in the declaration, the type of the variable generally does not have to be specified because the GLSL compiler can determine the type from the initial value. When a variable is initialized using an abstract int, and no type is specified, the type is taken to be i32.</p> <p>In a function body, an identifier can be declared using let instead of var. The result is a named value rather than a variable. A let declaration must include an initial value. The value cannot be changed after initialization. The declaration can optionally include a type, but it is usually not necessary. An address space cannot be specified. Using let makes it clear that you do not expect the value to change and makes it impossible to change the value accidentally.</p> <p>Named values can also be declared using const, but the initial value in a const declaration must be a constant that is known at compile time. The initial value can be given as an expression, as long as the expression only contains constants. While let can only be used in functions, const declarations can be used anywhere.</p> <p>A declaration can only declare one identifier. So something like \"<code>var a = 1, b = 2;</code>\" is not legal. This applies to const and let, as well as to var.</p> <p>We have seen that annotations like @location(0) can be used on variable declarations, function definitions, function formal parameters, and the return type of a function. (The WGSL documentation calls them \"attributes\", but I prefer to save the term \"attribute\" for vertex attributes.) This textbook only covers the most common annotations. We encountered some of them in previous sections, and a few more will come up later when we discuss compute shaders. Common annotations include:</p> <ul> <li>group(N) and @binding(M), where N and M are integers, are used on var declarations in the uniform and storage address spaces to specify the source of resource. The association is specified by a bind group layout. See Subsection 9.1.3.</li> <li>@vertex, @fragment, and @compute are used on a function definition to specify that that function can be used as the entry point function for a vertex, fragment, or compute shader. See Subsection 9.1.2.</li> <li>@location(N), where N is an integer, can be used on inputs and outputs of vertex shader and fragment shader entry point functions. It can be applied to their formal parameters and return types and to members of structs that are used to specify the type of their formal parameters and return types. The meaning depends on context. On an input to a vertex shader entry point, it specifies the source of the input in a vertex buffer (Subsection 9.1.6). On the return type of a fragment shader entry point function, it specifies the color attachment that is the destination of that output (Subsection 9.1.3.) And when used on a vertex shader output or a fragment shader input, it associates a particular output of the vertex shader with the corresponding input to the fragment shader (Subsection 9.1.6).</li> <li>@interpolate(flat) can be applied to an output from the vertex shader entry point function and the corresponding input to the fragment shader program. If it is applied to one, it must be applied to both. Usually, the values for a fragment shader input are interpolated from the output values of the vertex shader at all vertices of the triangle or line that is being drawn. The @interpolate(flat) annotation turns off interpolation; instead, the value from the first vertex is used for all fragments. This annotation is required for values of integer or boolean type and can also be applied to floating point values.</li> <li>@builtin(vertex_index) and @builtin(instance_index) are used on inputs to a vertex shader entry point function to specify the vertex number or instance number that is being processed. See Subsection 9.2.4.</li> <li>@builtin(position) when used on an output from a vertex shader entry point function specifies that the output is the (x,y,z,w) coordinates of the vertex in the clip coordinate system. Every vertex shader entry point function is required to have an output with this annotation. When used on an input to a fragment shader program, it specifies that the input is the interpolated position of the fragment being processed, in viewport coordinates. (See Subsection 9.4.2 for a discussion of coordinate systems in WebGPU.)</li> <li>@builtin(front_facing) is used on an input of type bool to a fragment shader program. The value will be true if the fragment that is being processed is part of a front facing triangle. This can be useful, for example, when doing two-sided lighting in 3D graphics (Subsection 7.2.4).</li> </ul>"},{"location":"cn/c9/s3/#934-\u8868\u8fbe\u5f0f\u548c\u5185\u7f6e\u51fd\u6570","title":"9.3.4 \u8868\u8fbe\u5f0f\u548c\u5185\u7f6e\u51fd\u6570","text":"<p>Expressions and Built-in Functions</p> \u4e2d\u6587\u82f1\u6587 <p>WGSL\u5305\u542b\u4e86\u6240\u6709\u719f\u6089\u7684\u7b97\u672f\u3001\u903b\u8f91\u3001\u4f4d\u548c\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff1a<code>+, -, *, /, %, &amp;&amp;, ||, !, &amp;, |, ~, ^, &lt;&lt;, &gt;&gt;, ==, !=, &lt;, &gt;, &lt;=, &gt;=</code>\u3002\u5b83\u6ca1\u6709\u6761\u4ef6\u8fd0\u7b97\u7b26<code>?:</code>\uff0c\u4f46\u6709\u4e00\u4e2a\u7b49\u4ef7\u7684\u5185\u7f6e\u51fd\u6570<code>select(false_case, true_case, boolean)</code>\u3002\u6ce8\u610f\uff0c\u8d4b\u503c\uff08<code>=</code>, <code>+=</code> \u7b49\uff09\u4e0d\u662f\u8fd0\u7b97\u7b26\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c<code>A = B</code> \u662f\u4e00\u4e2a\u8bed\u53e5\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u4e0d\u50cf\u5728 C \u6216 JavaScript \u4e2d\u90a3\u6837\u6709\u503c\u3002</p> <p>\u6709\u8da3\u7684\u662f\uff0c\u8fd0\u7b97\u7b26\u5728\u8bb8\u591a\u65b9\u9762\u88ab\u6269\u5c55\uff0c\u53ef\u4ee5\u4e0e\u5411\u91cf\u548c\u77e9\u9635\u4e00\u8d77\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u6807\u91cf\u4e00\u8d77\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c A \u662f\u4e00\u4e2a n-by-m \u77e9\u9635\uff0cB \u662f\u4e00\u4e2a m-by-r \u77e9\u9635\uff0c\u90a3\u4e48 <code>A*B</code> \u8ba1\u7b97 A \u548c B \u7684\u77e9\u9635\u4e58\u79ef\u3002\u5982\u679c V \u662f\u4e00\u4e2a\u5305\u542b m \u4e2a\u6d6e\u70b9\u6570\u7684\u5411\u91cf\uff0c\u90a3\u4e48 <code>A*V</code> \u662f\u77e9\u9635\u548c\u5411\u91cf\u7684\u7ebf\u6027\u4ee3\u6570\u4e58\u79ef\u5f97\u5230\u7684\u5411\u91cf\u3002</p> <p>\u7b97\u672f\u8fd0\u7b97\u7b26\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u4e24\u4e2a\u76f8\u540c\u6570\u503c\u7c7b\u578b\u7684\u5411\u91cf\u3002\u64cd\u4f5c\u662f\u9010\u5206\u91cf\u5e94\u7528\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c</p> <pre><code>vec3f(2.0f, 3.0f, 7.0f) / vec3f(5.0f, 8.0f, 9.0f)\n</code></pre> <p>\u7ed3\u679c\u662f <code>vec3f(2.0f/5.0f, 3.0f/8.0f, 7.0f/9.0f)</code>\u3002\u76f8\u540c\u6570\u503c\u7c7b\u578b\u7684\u6570\u503c\u5411\u91cf\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8fdb\u884c\u7ec4\u5408\u3002\u7ed3\u679c\u662f\u76f8\u540c\u957f\u5ea6\u7684\u5e03\u5c14\u5411\u91cf\u3002</p> <p>\u66f4\u6709\u8da3\u7684\u662f\uff0c\u7b97\u672f\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5e94\u7528\u4e8e\u5411\u91cf\u548c\u6807\u91cf\u3002\u7136\u540e\uff0c\u64cd\u4f5c\u5e94\u7528\u4e8e\u5411\u91cf\u7684\u6bcf\u4e2a\u5206\u91cf\uff1a<code>2+vec2f(5,12)</code> \u7684\u7ed3\u679c\u662f <code>vec2f(7,14)</code>\uff0c<code>vec4i(2,5,10,15)/2</code> \u7684\u7ed3\u679c\u662f <code>vec4i(1,2,5,7)</code>\u3002</p> <p>\u5f53\u7136\uff0c\u8868\u8fbe\u5f0f\u4e5f\u53ef\u4ee5\u5305\u62ec\u5bf9\u5185\u7f6e\u51fd\u6570\u548c\u7528\u6237\u5b9a\u4e49\u51fd\u6570\u7684\u8c03\u7528\u3002WGSL\u6709\u8bb8\u591a\u5185\u7f6e\u51fd\u6570\u3002\u5b83\u6709\u6570\u5b66\u51fd\u6570\uff0c\u5982 abs\u3001cos\u3001atan\u3001exp\u3001log \u548c sqrt\uff08log \u662f\u81ea\u7136\u5bf9\u6570\uff09\u3002\uff08\u9664\u4e86 abs\uff0c\u53c2\u6570\u5fc5\u987b\u662f\u6d6e\u70b9\u7c7b\u578b\u3002\u53c2\u6570\u53ef\u4ee5\u662f\u6807\u91cf\u6216\u5411\u91cf\u3002\u5f53\u5b83\u662f\u5411\u91cf\u65f6\uff0c\u51fd\u6570\u662f\u9010\u5206\u91cf\u5e94\u7528\u7684\uff1a<code>sqrt(vec2f(16.0,9.0))</code> \u7684\u7ed3\u679c\u662f <code>vec2f(4.0,3.0)</code>\u3002\uff09</p> <p>\u6709\u51e0\u4e2a\u5185\u7f6e\u51fd\u6570\u7528\u4e8e\u5bf9\u5411\u91cf\u6267\u884c\u7ebf\u6027\u4ee3\u6570\u8fd0\u7b97\uff0c\u5305\u62ec\uff1a<code>length(v)</code> \u8ba1\u7b97\u5411\u91cf v \u7684\u957f\u5ea6\uff1b<code>normalize(v)</code> \u8ba1\u7b97\u4e0e v \u6307\u5411\u76f8\u540c\u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\uff1b<code>dot(v,w)</code> \u8ba1\u7b97 v \u548c w \u7684\u70b9\u79ef\uff1b<code>cross(v,w)</code> \u8ba1\u7b97\u4e24\u4e2a 3 \u7ef4\u5411\u91cf\u7684\u53c9\u79ef\uff1b\u4ee5\u53ca <code>distance(v,w)</code> \u8ba1\u7b97 v \u548c w \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u51fd\u6570\u53ea\u9002\u7528\u4e8e\u6d6e\u70b9\u5411\u91cf\u3002\u6709\u51e0\u4e2a\u51fd\u6570\u6267\u884c\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u5e38\u89c1\u7684\u64cd\u4f5c\uff1a</p> <ul> <li><code>clamp(value, min, max)</code> \u5c06\u503c clamp \u9650\u5236\u5728 min \u5230 max \u7684\u8303\u56f4\u5185\uff0c\u5373\u5982\u679c value \u5728 min \u548c max \u4e4b\u95f4\u5219\u8fd4\u56de value\uff0c\u5982\u679c value &lt;= min \u5219\u8fd4\u56de min\uff0c\u5982\u679c value &gt;= max \u5219\u8fd4\u56de max\u3002</li> <li><code>mix(a, b, blend_factor)</code> \u8fd4\u56de a \u548c b \u7684\u52a0\u6743\u5e73\u5747\u503c\uff0c\u5373\u8fd4\u56de <code>(1-blend_factor)*a + blend_factor*b</code>\u3002</li> <li><code>step(edge, x)</code> \u5982\u679c x &lt;= edge \u8fd4\u56de 0\uff0c\u5982\u679c x &gt; edge \u8fd4\u56de 1\u3002</li> <li><code>smoothstep(low_edge, high_edge, x)</code> \u5982\u679c x &lt; low_edge \u8fd4\u56de 0\uff0c\u5982\u679c x &gt; high_edge \u8fd4\u56de 1\uff0c\u968f\u7740 x \u4ece low_edge \u589e\u52a0\u5230 high_edge\uff0c\u8fd4\u56de\u503c\u4ece 0 \u5e73\u6ed1\u589e\u52a0\u5230 1\u3002</li> <li><code>reflect(L,N)</code>\uff0c\u5176\u4e2d L \u548c N \u662f\u5355\u4f4d\u5411\u91cf\uff0c\u8ba1\u7b97\u7531\u6cd5\u5411\u91cf N \u53cd\u5c04\u7684\u5411\u91cf L\u3002\uff08\u89c1 4.1.4\u5c0f\u8282\uff0c\u53ea\u662f\u90a3\u4e2a\u90e8\u5206\u7684\u63d2\u56fe\u4e2d\u7684 L \u6307\u5411\u4ece\u8868\u9762\u5411\u5149\u6e90\u7684\u65b9\u5411\uff0c\u4f46 reflect(L,N) \u4e2d\u7684 L \u6307\u5411\u4ece\u5149\u6e90\u5411\u8868\u9762\u7684\u65b9\u5411\u3002\uff09</li> <li><code>refract(L,N,ior)</code>\uff0c\u5176\u4e2d L \u548c N \u662f\u5355\u4f4d\u5411\u91cf\uff0cior \u662f\u6298\u5c04\u7387\u7684\u6bd4\u503c\uff0c\u8ba1\u7b97\u5f53\u5149\u7ebf\u4ece\u65b9\u5411 L \u51fb\u4e2d\u5177\u6709\u6cd5\u5411\u91cf N \u7684\u8868\u9762\u65f6\u7684\u6298\u5c04\u5411\u91cf\uff0c\u8be5\u8868\u9762\u5206\u9694\u4e86\u5177\u6709\u4e0d\u540c\u6298\u5c04\u7387\u7684\u533a\u57df\u3002</li> </ul> <p>WGSL has all the familiar arithmetic, logical, bitwise, and comparison operators:<code>+, -, *, /, %, &amp;&amp;, ||, !, &amp;, |, ~, ^, &lt;&lt;, &gt;&gt;, ==, !=, &lt;, &gt;, &lt;=, &gt;=</code>. It does not have the conditional ?: operator, but it has an equivalent built-in function, select(false_case,true_case,boolean). Note that assignment (<code>=</code>, <code>+=</code>, etc.) is not an operator; that is, <code>A = B</code> is a statement, not an expression, and it does not have a value like it would in C or JavaScript.</p> <p>The interesting thing is that operators are extended in many ways to work with vectors and matrices as well as with scalars. For example, if A is an n-by-m matrix and B is an m-by-r matrix, then <code>A*B</code> computes the matrix product of A and B. And if V is a vector of m floats, then <code>A*V</code> is the vector that is the linear algebra product of the matrix and the vector.</p> <p>The arithmetic operators can be applied to two vectors of the same numeric type. The operation is applied component-wise. That is,</p> <pre><code>vec3f(2.0f, 3.0f, 7.0f) / vec3f(5.0f, 8.0f, 9.0f)\n</code></pre> <p>is <code>vec3f(2.0f/5.0f, 3.0f/8.0f, 7.0f/9.0f)</code>. Numeric vectors of the same numeric type can also be combined using a comparison operator. The result is a bool vector of the same length.</p> <p>Even more interesting, the arithmetic operators can be applied to a vector and a scalar. The operation then applies to each component of the vector: <code>2+vec2f(5,12)</code> is <code>vec2f(7,14)</code>, and <code>vec4i(2,5,10,15)/2</code> is <code>vec4i(1,2,5,7)</code>.</p> <p>Expressions, of course, can also include calls to functions, both built-in and user-defined. WGSL has many built-in functions. It has mathematical functions such as abs, cos, atan, exp, log, and sqrt. (log is the natural logarithm.) Except for abs, the parameter must be of floating point type. The parameter can be either a scalar or a vector. When it is a vector, the function is applied component-wise: <code>sqrt(vec2f(16.0,9.0))</code> is <code>vec2f(4.0,3.0)</code>.</p> <p>There are several built-in functions for doing linear algebra operations on vectors, including: length(v) for the length of vector v; normalize(v) for a unit vector pointing in the same direction as v; dot(v,w) for the dot product of v and w; cross(v,w) for the cross product of two 3-vectors; and distance(v,w) for the distance between v and w. In all cases, these functions only work for vectors of floats. There are several functions that do operations that are common in computer graphics:</p> <ul> <li>clamp(value, min, max) clamps value to the range min to max, that is, returns value if value is between min and max, returns min if value &lt;= min, and returns max if value &gt;= max. mix(a, b, blend_factor) returns the weighted average of a and b, that is, returns (1-blend_factor)a + blend_factorb.</li> <li>step(edge, x) returns 0 if x &lt;= edge and 1 if x &gt; edge.</li> <li>smoothstep(low_edge, high_edge, x) returns 0 if x &lt; low_edge, returns 1 if x &gt; high_edge, and the return value increases smoothly from 0 to 1 as x increases from low_edge to high_edge.</li> <li>reflect(L,N), where L and N are unit vectors, computes the vector L reflected by a surface with normal vector N. (See Subsection 4.1.4, except that the L in the illustration in that section points from the surface towards the light source, but the L in reflect(L,N) points from the light source towards the surface.)</li> <li>refract(L,N,ior), where L and N are unit vectors, and ior is the ratio of indices of refraction, computes the refracted vector when light from direction L hits a surface with normal vector N separating regions with different indices of refraction.</li> </ul>"},{"location":"cn/c9/s3/#935-\u8bed\u53e5\u548c\u63a7\u5236","title":"9.3.5 \u8bed\u53e5\u548c\u63a7\u5236","text":"<p>Statements and Control</p> \u4e2d\u6587\u82f1\u6587 <p>WGSL \u4e2d\u7684\u8bed\u53e5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4e0e C \u8bed\u8a00\u4e2d\u7684\u7c7b\u4f3c\uff0c\u4f46\u5b58\u5728\u4e00\u4e9b\u9650\u5236\u548c\u6269\u5c55\u3002</p> <p>WGSL \u4e2d\u7684\u57fa\u672c\u8bed\u53e5\u5305\u62ec\u8d4b\u503c\uff08\u4f7f\u7528 <code>=</code>\uff09\uff1b\u590d\u5408\u8d4b\u503c\uff08\u4f7f\u7528 <code>+=</code>\u3001<code>*=</code> \u7b49\uff09\uff1b\u9012\u589e\uff08\u4f7f\u7528 <code>++</code> \u5982 <code>x++</code>\uff09\uff1b\u9012\u51cf\uff08\u4f7f\u7528 <code>--</code>\uff09\uff1b\u51fd\u6570\u8c03\u7528\u8bed\u53e5\uff1b\u8fd4\u56de\u8bed\u53e5\uff1b<code>break</code>\uff1b<code>continue</code>\uff1b\u4ee5\u53ca <code>discard</code>\u3002\u9012\u589e\u548c\u9012\u51cf\u53ea\u80fd\u662f\u540e\u7f00\u5f62\u5f0f\uff1b\u5373\u5141\u8bb8 <code>x++</code>\uff0c\u4f46\u4e0d\u5141\u8bb8 <code>++x</code>\u3002\u5e76\u4e14 \u2014\u2014 \u50cf\u8d4b\u503c\u8bed\u53e5\u4e00\u6837 \u2014\u2014 \u9012\u589e\u548c\u9012\u51cf\u8bed\u53e5\u4e0d\u662f\u8868\u8fbe\u5f0f\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u6ca1\u6709\u503c\uff0c\u4e0d\u80fd\u4f5c\u4e3a\u66f4\u5927\u8868\u8fbe\u5f0f\u7684\u4e00\u90e8\u5206\u3002<code>discard</code> \u8bed\u53e5\u53ea\u80fd\u5728\u7247\u6bb5\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u4e2d\u4f7f\u7528\u3002\u5b83\u963b\u6b62\u7247\u6bb5\u7740\u8272\u5668\u7684\u8f93\u51fa\u88ab\u5199\u5165\u5176\u76ee\u7684\u5730\u3002</p> <p>\u5c31\u63a7\u5236\u7ed3\u6784\u800c\u8a00\uff0cWGSL \u4e2d\u7684 <code>for</code> \u5faa\u73af\u3001<code>while</code> \u5faa\u73af\u548c <code>if</code> \u8bed\u53e5\u7684\u5f62\u5f0f\u4e0e C\u3001Java \u548c JavaScript \u4e2d\u7684\u5f62\u5f0f\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u5927\u62ec\u53f7 <code>{}</code> \u59cb\u7ec8\u9700\u8981\u5305\u56f4\u5faa\u73af\u4f53\u548c <code>if</code> \u8bed\u53e5\u5185\u7684\u8bed\u53e5\uff0c\u5373\u4f7f\u5927\u62ec\u53f7\u53ea\u5305\u56f4\u4e00\u4e2a\u5355\u72ec\u7684\u8bed\u53e5\u3002<code>break</code> \u548c <code>continue</code> \u53ef\u4ee5\u5728\u5faa\u73af\u4e2d\u50cf\u901a\u5e38\u4e00\u6837\u4f7f\u7528\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u8bed\u53e5\u4e0d\u80fd\u6709\u6807\u7b7e\uff0c\u4e5f\u6ca1\u6709\u5e26\u6807\u7b7e\u7684 <code>break</code> \u6216 <code>continue</code> \u8bed\u53e5\u3002WGSL \u4e2d\u8fd8\u6709\u4e00\u79cd\u989d\u5916\u7684\u5faa\u73af\u8bed\u53e5\u5f62\u5f0f\uff1a</p> <pre><code>loop {\n    statements\n}\n</code></pre> <p>\u8fd9\u79cd\u5faa\u73af\u901a\u8fc7 <code>break</code> \u6216 <code>return</code> \u8bed\u53e5\u9000\u51fa\u3002\u5b83\u57fa\u672c\u4e0a\u4e0e \"while(true)\" \u5faa\u73af\u76f8\u540c\u3002</p> <p>WGSL \u4e2d\u7684 <code>switch</code> \u8bed\u53e5\u4e0e\u901a\u5e38\u7684\u5f62\u5f0f\u6709\u663e\u8457\u53d8\u5316\u3002\u53ef\u4ee5\u5408\u5e76\u60c5\u51b5\uff08\u4f8b\u5982 case 1,2,3\uff09\u3002<code>case</code> \u540e\u7684\u5192\u53f7\u662f\u53ef\u9009\u7684\u3002\u6bcf\u4e2a <code>case</code> \u4e2d\u7684\u4ee3\u7801\u5fc5\u987b\u7528\u5927\u62ec\u53f7\u5305\u56f4\u3002\u5728\u6ca1\u6709 <code>break</code> \u8bed\u53e5\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a <code>case</code> \u5185\u7684\u4ee3\u7801\u4e0d\u4f1a\u6d41\u5165\u4e0b\u4e00\u4e2a <code>case</code>\uff0c\u56e0\u6b64 <code>break</code> \u8bed\u53e5\u5728 <code>case</code> \u4e2d\u662f\u53ef\u9009\u7684\u3002\u7136\u800c\uff0c<code>break</code> \u548c <code>return</code> \u4ecd\u7136\u53ef\u4ee5\u7528\u4e8e\u63d0\u524d\u7ed3\u675f\u4e00\u4e2a <code>case</code>\u3002\u5fc5\u987b\u6709\u4e00\u4e2a <code>default</code> \u60c5\u51b5\u3002<code>switch</code> \u8868\u8fbe\u5f0f\u5fc5\u987b\u662f i32 \u6216 u32 \u7c7b\u578b\uff0c\u6240\u6709\u7684 <code>case</code> \u5e38\u91cf\u5fc5\u987b\u7c7b\u578b\u76f8\u540c\uff0c\u6216\u8005\u662f\u62bd\u8c61\u6574\u6570\u3002\u793a\u4f8b\u8bf7\u53c2\u89c1 webgpu/indices_in_shader.html \u4e2d\u7740\u8272\u5668\u6e90\u4ee3\u7801\u4e2d\u7684 <code>switch</code> \u8bed\u53e5\u3002</p> <p>WGSL \u6ca1\u6709\u5f02\u5e38\u7684\u6982\u5ff5\uff0c\u4e5f\u6ca1\u6709 <code>try..catch</code> \u8bed\u53e5\u3002</p> <p>Statements in WGSL are in large part similar to those in C, but there are some restrictions and extensions.</p> <p>Basic statements in WGSL include assignment (using <code>=</code>); compound assignment (using <code>+=</code>, <code>*=</code>, etc.); increment (using <code>++</code> as in <code>x++</code>); decrement (using <code>--</code>); function call statements; return statements; break; continue; and discard. Increment and decrement are postfix only; that is, x++ is allowed, but not <code>++x</code>. And\u2014like assignment statements\u2014increment and decrement statements are not expressions; that is, they don't have a value and cannot be used as part of a larger expression. The discard statement can only be used in a fragment shader entry point function. It stops the output of the fragment shader from being written to its destination.</p> <p>As for control structures, for loops, while loops, and if statements in WGSL have the same form as in C, Java, and JavaScript, except that braces, { and }, are always required around the body of a loop and around the statements inside an if statement, even if the braces enclose just a single statement. break and continue can be used in loops as usual, but note that statements cannot have labels and there is no labeled break or labeled continue statement. There is an additional looping statement in WGSL that takes the form</p> <pre><code>loop {\nstatements\n}\n</code></pre> <p>This kind of loop is exited with a break or return statement. It is basically the same as a \"while(true)\" loop.</p> <p>The switch statement in WGSL is significantly changed from its usual form. Cases can be combined (case 1,2,3). The colon after a case is optional. The code in each case must be enclosed in braces. There is no fallthrough from one case to the next in the absence of a break statement, so break statements are optional in cases. However, break and return can still be used to end a case early. A default case is required. The switch expression must be of type i32 or u32, and all of the case constants must either be of the same type, or be abstract integers. For an example, see the switch statement in the shader source code in webgpu/indices_in_shader.html.</p> <p>WGSL does not have the concept of exceptions, and there is no try..catch statement.</p>"},{"location":"cn/c9/s3/#936-\u51fd\u6570\u5b9a\u4e49","title":"9.3.6 \u51fd\u6570\u5b9a\u4e49","text":"<p>Function Definitions</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5728 \u7b2c9.1\u8282 \u548c \u7b2c9.2\u8282 \u4e2d\u770b\u5230\u4e86\u51fd\u6570\u5b9a\u4e49\u7684\u4f8b\u5b50\u3002\u8fd9\u4e9b\u90e8\u5206\u4e2d\u7684\u6240\u6709\u793a\u4f8b\u90fd\u662f\u5e26\u6709 @vertex \u6216 @fragment \u6ce8\u89e3\u7684\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u3002\u5728\u7740\u8272\u5668\u4e2d\u5b9a\u4e49\u989d\u5916\u7684\u51fd\u6570\u662f\u53ef\u80fd\u7684\uff0c\u7136\u540e\u53ef\u4ee5\u6309\u7167\u901a\u5e38\u7684\u65b9\u5f0f\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u8c03\u7528\u5165\u53e3\u70b9\u51fd\u6570\u662f\u4e0d\u5408\u6cd5\u7684\uff1b\u5b83\u4eec\u53ea\u80fd\u7531\u7cfb\u7edf\u4f5c\u4e3a\u7ba1\u7ebf\u7684\u4e00\u90e8\u5206\u8c03\u7528\u3002</p> <p>\u6211\u4f1a\u6307\u51fa\uff0c\u7ba1\u7ebf\u7684\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7740\u8272\u5668\u6a21\u5757\u4e2d\u5b9a\u4e49\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u7740\u8272\u5668\u6a21\u5757\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6570\u91cf\u7684\u7740\u8272\u5668\u5165\u53e3\u70b9\u3002\u7ba1\u7ebf\u4f7f\u7528\u7684\u5165\u53e3\u70b9\u51fd\u6570\u5728\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u4e2d\u6307\u5b9a\uff08\u89c1 9.1.3\u5c0f\u8282\uff09\u3002</p> <p>\u4f7f\u7528 <code>fn</code> \u540e\u8ddf\u51fd\u6570\u540d\uff0c\u7136\u540e\u662f\u5f62\u5f0f\u53c2\u6570\u5217\u8868\uff0c\u7136\u540e\u662f\u53ef\u9009\u7684 <code>-&gt;</code> \u548c\u8fd4\u56de\u7c7b\u578b\uff0c\u6700\u540e\u662f\u51fd\u6570\u4f53\uff08\u5fc5\u987b\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff09\u6765\u5b9a\u4e49\u51fd\u6570\u3002\u9664\u4e86\u5165\u53e3\u70b9\u51fd\u6570\u5916\uff0c\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u53ef\u4ee5\u4ece\u540c\u4e00\u7740\u8272\u5668\u6a21\u5757\u7684\u4efb\u4f55\u4f4d\u7f6e\u8c03\u7528\u3002</p> <p>\u51fd\u6570\u6709\u4e00\u4e9b\u9650\u5236\u3002\u4e0d\u5141\u8bb8\u9012\u5f52\uff0c\u65e0\u8bba\u662f\u76f4\u63a5\u7684\u8fd8\u662f\u95f4\u63a5\u7684\u3002\u6ca1\u6709\u5d4c\u5957\uff1a\u51fd\u6570\u5b9a\u4e49\u4e0d\u80fd\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u5185\u90e8\u3002\u6570\u7ec4\u53c2\u6570\u5fc5\u987b\u6709\u6307\u5b9a\u7684\u5927\u5c0f\u3002\u53c2\u6570\u7684\u6307\u9488\u7c7b\u578b\u5fc5\u987b\u5728\u51fd\u6570\u6216\u79c1\u6709\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u51fd\u6570\u540d\u4e0d\u80fd\u88ab\u91cd\u8f7d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u4e0d\u80fd\u6709\u4e24\u4e2a\u540c\u540d\u7684\u51fd\u6570\uff0c\u5373\u4f7f\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u53c2\u6570\u5217\u8868\u3002\uff08\u4f46\u4e00\u4e9b\u5185\u7f6e\u51fd\u6570\u662f\u91cd\u8f7d\u7684\u3002\uff09\u540c\u6837\uff0c\u51fd\u6570\u4e0d\u80fd\u4e0e\u5168\u5c40\u53d8\u91cf\u540c\u540d\u3002</p> <p>\u4e3a\u4e86\u7ed3\u675f\u8fd9\u4e00\u8282\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\uff1a</p> <pre><code>fn invertedColor(color: vec4f) -&gt; vec4f { // \u8fd4\u56de\u53cd\u8f6c\u7684\u989c\u8272\n    return vec4f(1 - color.rgb, color.a);\n}\n\nfn grayify(color: ptr&lt;function, vec4f&gt;) { // \u5c31\u5730\u4fee\u6539\u989c\u8272\n    let c = *color;\n    let gray = c.r * 0.3 + c.g * 0.59 + c.b * 0.11;\n    *color = vec4f(gray, gray, gray, c.a);\n}\n\nfn min10(A: array&lt;f32, 10&gt;) -&gt; f32 { // \u53c2\u6570\u6309\u503c\u4f20\u9012\uff01\n    var min = A[0];\n    for (var i = 1; i &lt; 10; i++) {\n        if (A[i] &lt; min) {\n            min = A[i];\n        }\n    }\n    return min;\n}\n\nfn simpleLighting(N: vec3f, L: vec3f, V: vec3f, diffuse: vec3f) -&gt; vec3f {\n    // N \u662f\u5355\u4f4d\u8868\u9762\u6cd5\u5411\u91cf\u3002\n    // L \u662f\u6307\u5411\u5149\u6e90\u7684\u5355\u4f4d\u5411\u91cf\u3002\n    // V \u662f\u6307\u5411\u89c2\u5bdf\u8005\u7684\u5355\u4f4d\u5411\u91cf\n    if (dot(N, L) &lt;= 0) { // \u8868\u9762\u7167\u660e\u7684\u9519\u8bef\u9762\n        return vec3f(0);   // \u8fd4\u56de\u96f6\u5411\u91cf\uff08\u9ed1\u8272\uff09\n    }\n    var color = diffuse * dot(N, L);\n    let R = -reflect(L, N);  // \u53cd\u5c04\u5149\u7ebf\uff1b\n    if (dot(R, V) &gt; 0) { // \u6dfb\u52a0\u955c\u9762\u7167\u660e\n        // \u955c\u9762\u989c\u8272\u662f\u7070\u8272\uff0c\u955c\u9762\u6307\u6570\u662f 10\n        color += vec3f(0.5) * pow(dot(R, V), 10);\n    }\n    return color;\n}\n</code></pre> <p>We have seen examples of function definitions in Section 9.1 and Section 9.2. All of the examples in those sections were shader entry point functions, annotated with @vertex or @fragment. It is possible to define additional functions in a shader, and those functions can then be called in the usual way. Note however that it is not legal to call an entry point function; they can only be called by the system as part of a pipeline.</p> <p>I will remark that the vertex shader and the fragment shader for a pipeline can be defined in different shader modules. Also, a shader module can contain any number of shader entry points. The entry point functions to be used by a pipeline are specified in a pipeline descriptor (Subsection 9.1.3).</p> <p>A function is defined using fn followed by the function name, then the formal parameter list, followed optionally by -&gt; and the return type, and finally the function body, which must be enclosed in braces. A user-defined function, other than an entry point function, can be called from anywhere in the same shader module.</p> <p>There are some restrictions on functions. Recursion, direct or indirect, is not allowed. There is no nesting: a function definition cannot be inside another function definition. Array parameters must have a specified size. Pointer types for parameters must be in the function or private namespace. Function names can't be overloaded; that is, you can't have two functions with the same name, even if they have different parameter lists. (But some of the built-in functions are overloaded.) Also, a function cannot have the same name as a global variable.</p> <p>To finish this section, here are a few user-defined functions:</p> <pre><code>fn invertedColor( color : vec4f ) -&gt; vec4f { // return the inverted color\nreturn vec4f( 1 - color.rgb, color.a );\n}\n\nfn grayify( color : ptr&lt;function,vec4f&gt; ) { // modify color in place\n    let c = *color;\n    let gray = c.r * 0.3 + c.g * 0.59 + c.b * 0.11;\n    *color = vec4f( gray, gray, gray, c.a );  \n}\n\nfn min10( A : array&lt;f32,10&gt; ) -&gt; f32 { // parameter is passed by value!\n    var min = A[0];\n    for (var i = 1; i &lt; 5; i++) {\n    if ( A[i] &lt; min ) {\n        min = A[i];\n    }\n    }\n    return min;\n}\n\nfn simpleLighting(N : vec3f, L : vec3f, V : vec3f, diffuse : vec3f) -&gt; vec3f {\n    // N is the unit surface normal vector.\n    // L is the unit vector pointing towards the light.\n    // V is the unit vector pointing towards viewer\n    if ( dot(N,L) &lt;= 0 ) { // wrong side of surface to be illuminated\n        return vec3f(0);   // return the zero vector (black)\n    }\n    var color = diffuse * dot(N,L);\n    let R = -reflect(L,N);  // reflected ray;\n    if ( dot(R,V) &gt; 0 ) { // add in specular lighting\n        // specular color is gray, specular exponent is 10\n    color += vec3f(0.5) * pow(dot(R,V), 10);\n    }\n    return color;\n}\n</code></pre>"},{"location":"cn/c9/s4/","title":"9.4 WebGPU \u4e2d\u7684 3D \u56fe\u5f62","text":"<p>3D Graphics With WebGPU</p> \u4e2d\u6587\u82f1\u6587 <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u7684WebGPU\u793a\u4f8b\u90fd\u662f\u4e8c\u7ef4\u7684\uff0c\u4f46\u5f53\u7136\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u4e3b\u8981\u5174\u8da3\u5728\u4e8e\u6e32\u67d3\u4e09\u7ef4\u573a\u666f\u3002\u8fd9\u610f\u5473\u7740\u4f7f\u7528\u4e09\u7ef4\u5750\u6807\u7cfb\u3001\u51e0\u4f55\u53d8\u6362\u4ee5\u53ca\u5149\u7167\u548c\u6750\u8d28\u3002\u6211\u4eec\u5c06\u5728\u672c\u8282\u4e2d\u770b\u5230\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5c06\u53ea\u4f7f\u7528\u57fa\u672c\u7684OpenGL\u5149\u7167\u6a21\u578b\uff0c\u800c\u4e0d\u662f\u5df2\u7ecf\u53d8\u5f97\u66f4\u52a0\u5e38\u89c1\u7684\u66f4\u73b0\u5b9e\u7684\u57fa\u4e8e\u7269\u7406\u7684\u6e32\u67d3\u3002\u672c\u8282\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u5c06\u662f\u6211\u7b80\u5355\u7684WebGL \"diskworld\" \u5c42\u6b21\u5efa\u6a21\u793a\u4f8b\u7684\u79fb\u690d\u3002\u8fd9\u662fWebGPU\u7248\u672c\u7684\u6f14\u793a\uff1adiskworld WebGPU Demo\u3002</p> <p></p> <p>So far, our WebGPU examples have been two-dimensional, but of course the main interest in computer graphics is in rendering three-dimensional scenes. That means using 3D coordinate systems, geometric transformations, and lighting and material. We will look at all that in this section. But note that we will use only the basic OpenGL lighting model, not the more realistic physically based rendering that has become more common. The last example in the section will be a port of my simple WebGL \"diskworld\" hierarchical modeling example. Here is a demo of the WebGPU version:</p> <p></p>"},{"location":"cn/c9/s4/#941-\u6df1\u5ea6\u6d4b\u8bd5","title":"9.4.1 \u6df1\u5ea6\u6d4b\u8bd5","text":"<p>The Depth Test</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6211\u4eec\u8fdb\u51653D\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5982\u4f55\u5728WebGPU\u4e2d\u5b9e\u73b0\u6df1\u5ea6\u6d4b\u8bd5\u3002\u6df1\u5ea6\u6d4b\u8bd5\u7528\u4e8e\u786e\u4fdd\u4f4d\u4e8e\u5176\u4ed6\u5bf9\u8c61\u540e\u9762\u7684\u5bf9\u8c61\u5b9e\u9645\u4e0a\u88ab\u8fd9\u4e9b\u524d\u666f\u5bf9\u8c61\u9690\u85cf\u8d77\u6765\u3002\uff08\u89c13.1.4\u5c0f\u8282\u3002\uff09\u4e0eOpenGL\u4e0d\u540c\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u542f\u7528\u6d4b\u8bd5\u7684\u95ee\u9898\u3002\u60a8\u8fd8\u5fc5\u987b\u63d0\u4f9b\u7528\u4e8e\u4fdd\u5b58\u56fe\u50cf\u4e2d\u50cf\u7d20\u6df1\u5ea6\u4fe1\u606f\u7684\u6df1\u5ea6\u7f13\u51b2\u533a\uff0c\u5e76\u4e14\u60a8\u5fc5\u987b\u5c06\u8be5\u7f13\u51b2\u533a\u9644\u52a0\u5230\u6e32\u67d3\u7ba1\u7ebf\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f webgpu/depth_test.html \u5728\u4e00\u4e2a2D\u573a\u666f\u4e2d\u4f7f\u7528\u6df1\u5ea6\u6d4b\u8bd5\uff0c\u7ed8\u5236\u4e86\u4e94\u5341\u4e2a\u5e26\u6709\u9ed1\u8272\u8f6e\u5ed3\u7684\u5f69\u8272\u5706\u76d8\u3002\u6240\u6709\u5706\u76d8\u548c\u8f6e\u5ed3\u90fd\u662f\u5728\u7ed8\u5236\u4e4b\u524d\u5b8c\u6210\u7684\u3002\u7740\u8272\u5668\u7a0b\u5e8f\u4e3a\u6bcf\u4e2a\u5706\u76d8\u548c\u8f6e\u5ed3\u5e94\u7528\u4e86\u4e0d\u540c\u7684\u6df1\u5ea6\uff0c\u4ee5\u786e\u4fdd\u5373\u4f7f\u5b83\u4eec\u4e0d\u662f\u6309\u987a\u5e8f\u7ed8\u5236\u7684\uff0c\u5706\u76d8\u548c\u8f6e\u5ed3\u4e5f\u9075\u5faa\u6b63\u786e\u7684\u524d\u5230\u540e\u7684\u987a\u5e8f\u3002\u8be6\u60c5\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\uff0c\u5e76\u6ce8\u610f\u53ea\u6709\u4e0e\u6df1\u5ea6\u6d4b\u8bd5\u76f8\u5173\u7684\u6e90\u4ee3\u7801\u90e8\u5206\u6709\u6ce8\u91ca\u3002</p> <p>WebGPU\u4e2d\u7684\u6df1\u5ea6\u7f13\u51b2\u533a\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7eb9\u7406\uff0c\u4e0e\u56fe\u50cf\u5927\u5c0f\u76f8\u540c\u3002\u53ef\u4ee5\u4f7f\u7528 <code>device.createTexture()</code> \u51fd\u6570\u521b\u5efa\u5b83\uff1a</p> <pre><code>depthTexture = device.createTexture({\n    size: [context.canvas.width, context.canvas.height],  // \u753b\u5e03\u5927\u5c0f\n    format: \"depth24plus\", \n    usage: GPUTextureUsage.RENDER_ATTACHMENT\n});\n</code></pre> <p>\u8fd9\u91cc\u7684 depthTexture \u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u4e3a\u7eb9\u7406\u662f\u5728\u521d\u59cb\u5316\u671f\u95f4\u521b\u5efa\u4e00\u6b21\uff0c\u4f46\u5b83\u5c06\u5728\u6bcf\u6b21\u7ed8\u5236\u56fe\u50cf\u65f6\u4f7f\u7528\u3002\u7eb9\u7406\u7684\u683c\u5f0f\u63cf\u8ff0\u4e86\u6bcf\u4e2a\u50cf\u7d20\u5b58\u50a8\u7684\u6570\u636e\u3002\u8fd9\u91cc\u4f7f\u7528\u7684\u503c \"depth24plus\" \u8868\u793a\u7eb9\u7406\u6bcf\u4e2a\u50cf\u7d20\u81f3\u5c11\u6301\u670924\u4f4d\u6df1\u5ea6\u4fe1\u606f\u3002\u4f7f\u7528\u65b9\u5f0f\u8868\u793a\u6b64\u7eb9\u7406\u53ef\u4ee5\u9644\u52a0\u5230\u6e32\u67d3\u7ba1\u7ebf\u3002</p> <p>\u521b\u5efa\u7ba1\u7ebf\u65f6\uff0c\u5fc5\u987b\u901a\u8fc7\u5728 device.createRenderPipeline() \u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u4e2d\u6dfb\u52a0 depthStencil \u5c5e\u6027\u6765\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\uff1a</p> <pre><code>depthStencil: {  // \u4e3a\u6b64\u7ba1\u7ebf\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\n    depthWriteEnabled: true,\n    depthCompare: \"less\",\n    format: \"depth24plus\",\n},\n</code></pre> <p>\u8fd9\u91cc\u7684\u683c\u5f0f\u5e94\u4e0e\u521b\u5efa\u7eb9\u7406\u65f6\u6307\u5b9a\u7684\u683c\u5f0f\u5339\u914d\u3002depthWriteEnabled \u548c depthCompare \u7684\u503c\u53ef\u80fd\u5982\u4e0a\u6240\u793a\u3002\uff08\u6df1\u5ea6\u6d4b\u8bd5\u901a\u8fc7\u6bd4\u8f83\u65b0\u7247\u6bb5\u7684\u6df1\u5ea6\u503c\u4e0e\u5f53\u524d\u5b58\u50a8\u5728\u6df1\u5ea6\u7f13\u51b2\u533a\u7684\u6df1\u5ea6\u503c\u6765\u5de5\u4f5c\u3002\u5982\u679c\u6bd4\u8f83\u7ed3\u679c\u4e3a\u5047\uff0c\u5219\u4e22\u5f03\u65b0\u7247\u6bb5\u3002depthCompare \u5c5e\u6027\u6307\u5b9a\u5e94\u7528\u7684\u6bd4\u8f83\u8fd0\u7b97\u7b26\u3002\u4f7f\u7528 \"less\" \u610f\u5473\u7740\u5982\u679c\u7247\u6bb5\u7684\u6df1\u5ea6\u5c0f\u4e8e\u5f53\u524d\u6df1\u5ea6\uff0c\u5219\u4f7f\u7528\u8be5\u7247\u6bb5\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u6df1\u5ea6\u8f83\u4f4e\u7684\u9879\u76ee\u88ab\u8ba4\u4e3a\u66f4\u63a5\u8fd1\u7528\u6237\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\"less-equal\" \u53ef\u80fd\u662f\u8be5\u5c5e\u6027\u7684\u66f4\u597d\u503c\u3002\u5c06 depthWriteEnabled \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u610f\u5473\u7740\u5f53\u65b0\u7247\u6bb5\u901a\u8fc7\u6df1\u5ea6\u6d4b\u8bd5\u65f6\uff0c\u5176\u6df1\u5ea6\u503c\u5c06\u5199\u5165\u6df1\u5ea6\u7f13\u51b2\u533a\u3002\u5728\u67d0\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u5e94\u7528\u6df1\u5ea6\u6d4b\u8bd5\u800c\u4e0d\u4fdd\u5b58\u65b0\u7684\u6df1\u5ea6\u503c\u3002\u8fd9\u6709\u65f6\u662f\u5b8c\u6210\u7684\uff0c\u4f8b\u5982\uff0c\u5728\u7ed8\u5236\u534a\u900f\u660e\u5bf9\u8c61\u65f6\uff08\u89c1 7.4.1\u5c0f\u8282)\u3002\uff09</p> <p>\u6700\u540e\uff0c\u5728\u7ed8\u5236\u56fe\u50cf\u65f6\uff0c\u6df1\u5ea6\u7f13\u51b2\u533a\u5fc5\u987b\u4f5c\u4e3a\u6e32\u67d3\u901a\u9053\u63cf\u8ff0\u7b26\u7684\u4e00\u90e8\u5206\u9644\u52a0\u5230\u7ba1\u7ebf\uff1a</p> <pre><code>let renderPassDescriptor = {\n    colorAttachments: [{\n        clearValue: { r: 1, g: 1, b: 1, a: 1 },\n        loadOp: \"clear\", \n        storeOp: \"store\",\n        view: context.getCurrentTexture().createView()\n    }],\n    depthStencilAttachment: {  // \u5c06\u6df1\u5ea6\u7f13\u51b2\u533a\u6dfb\u52a0\u5230 colorAttachment\n        view: depthTexture.createView(),\n        depthClearValue: 1.0,\n        depthLoadOp: \"clear\",\n        depthStoreOp: \"store\",\n    }\n};\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0cdepthStencilAttachment \u4e2d\u7684 view \u662f\u4e4b\u524d\u521b\u5efa\u7684 depthTexture \u7684\u89c6\u56fe\u3002depthClearValue \u8868\u793a\u5728\u6e05\u9664\u6df1\u5ea6\u7f13\u51b2\u533a\u65f6\uff0c\u6bcf\u4e2a\u7247\u6bb5\u7684\u6df1\u5ea6\u5c06\u521d\u59cb\u5316\u4e3a 1.0\u30021.0 \u662f\u53ef\u80fd\u7684\u6700\u5927\u6df1\u5ea6\u503c\uff0c\u8868\u793a\u6df1\u5ea6\u4f4d\u4e8e\u56fe\u50cf\u4e2d\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u7684\u540e\u9762\u3002\uff08\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u8fd9\u91cc\u7684 \"Stencil\" \u6307\u7684\u662f\u6a21\u677f\u6d4b\u8bd5\uff0c\u672c\u6559\u79d1\u4e66\u4e2d\u6ca1\u6709\u6db5\u76d6\uff1b\u6a21\u677f\u6d4b\u8bd5\u7684\u5185\u5b58\u901a\u5e38\u4e0e\u6df1\u5ea6\u6d4b\u8bd5\u7684\u5185\u5b58\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u5728WebGPU\u4e2d\u5b83\u4eec\u5c06\u662f\u540c\u4e00\u7eb9\u7406\u7684\u4e00\u90e8\u5206\u3002\uff09</p> <p>renderPassDescriptor \u4e2d\u7684 \"clear\" \u5c5e\u6027\u610f\u5473\u7740\u5728\u6e32\u67d3\u4efb\u4f55\u5185\u5bb9\u4e4b\u524d\uff0c\u989c\u8272\u548c\u6df1\u5ea6\u7f13\u51b2\u533a\u5c06\u7528\u6e05\u9664\u503c\u586b\u5145\u3002\u8fd9\u9002\u7528\u4e8e\u7b2c\u4e00\u6b21\u6e32\u67d3\u901a\u9053\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u4efb\u4f55\u989d\u5916\u7684\u6e32\u67d3\u901a\u9053\uff0c\u4e3a\u4e86\u907f\u514d\u64e6\u9664\u5df2\u7ecf\u7ed8\u5236\u7684\u5185\u5bb9\uff0c\"clear\" \u5fc5\u987b\u66f4\u6539\u4e3a \"load\"\u3002\u4f8b\u5982\uff0c\u793a\u4f8b\u7a0b\u5e8f\u5728\u7b2c\u4e8c\u6b21\u6e32\u67d3\u901a\u9053\u4e4b\u524d\u8fdb\u884c\u6b64\u66f4\u6539\uff1a</p> <pre><code>renderPassDescriptor.depthStencilAttachment.depthLoadOp = \"load\";\nrenderPassDescriptor.colorAttachments[0].loadOp = \"load\";\n</code></pre> <p>\u5b9e\u9645\u4e0a\uff0c\u793a\u4f8b\u7a0b\u5e8f\u4f7f\u7528\u4e86\u591a\u91cd\u91c7\u6837\uff089.2.5\u5c0f\u8282\uff09\uff0c\u8fd9\u5728\u521b\u5efa\u6df1\u5ea6\u7eb9\u7406\u65f6\u9700\u8981\u4e00\u4e2a\u5c0f\u7684\u66f4\u6539\uff1a</p> <pre><code>depthTexture = device.createTexture({\n    size: [context.canvas.width, context.canvas.height],\n    format: \"depth24plus\",\n    sampleCount: 4, // \u4f7f\u7528\u591a\u91cd\u91c7\u6837\u65f6\u5fc5\u9700\uff01\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n});\n</code></pre> <p>Before we enter 3D, we need to know how to implement the depth test in WebGPU. The depth test is used to make sure that objects that lie behind other objects are actually hidden by those foreground objects. (See Subsection 3.1.4.) Unlike in OpenGL, it is not simply a matter of enabling the test. You also have to provide the depth buffer that is used to hold depth information about pixels in the image, and you have to attach that buffer to the rendering pipeline.</p> <p>The sample program webgpu/depth_test.html uses the depth test in a 2D scene that draws fifty colored disks with black outlines. All of the disks are drawn before all of the outlines. The shader programs apply a different depth to each disk and to each outline to ensure that the disks and outlines are seen to follow the correct back-to-front order, even though they are not drawn in that order. See the source code for details, and note that only the parts of the source code that have to do with the depth test are commented.</p> <p>The depth buffer in WebGPU is actually a kind of texture, with the same size as the image. It can be created using the <code>device.createTexture()</code> function:</p> <pre><code>depthTexture = device.createTexture({\n    size: [context.canvas.width, context.canvas.height],  // size of canvas\n    format: \"depth24plus\", \n    usage: GPUTextureUsage.RENDER_ATTACHMENT\n});\n</code></pre> <p>depthTexture here is a global variable, since the texture is created once, during initialization, but it will be used every time the image is drawn. The format of the texture describes the data stored for each pixel. The value used here, \"depth24plus\", means that the texture holds at least 24 bits of depth information per pixel. The usage means that this texture can be attached to a render pipeline.</p> <p>When the pipeline is created, the depth test must be enabled in the pipeline by adding a depthStencil property to the pipeline descriptor that is used in the device.createRenderPipeline() function:</p> <pre><code>depthStencil: {  // enable the depth test for this pipeline\ndepthWriteEnabled: true,\ndepthCompare: \"less\",\nformat: \"depth24plus\",\n},\n</code></pre> <p>The format here should match the format that was specified when creating the texture. The values for depthWriteEnabled and depthCompare will probably be as shown. (The depth test works by comparing the depth value for a new fragment to the depth value currently stored in the depth buffer for that fragment. If the comparison is false, the new fragment is discarded. The depthCompare property specifies the comparison operator that is applied. Using \"less\" for that property means that the fragment is used if it has depth less than the current depth; that is, items with lower depth are considered closer to the user. In some cases, \"less-equal\" might be a better value for this property. Setting the depthWriteEnabled property to true means that when a new fragment passes the depth test, its depth value is written to the depth buffer. In some applications, it's necessary to apply the depth test without saving the new depth value. This is sometimes done, for example, when drawing translucent objects (see Subsection 7.4.1).)</p> <p>Finally, when drawing the image, the depth buffer must be attached to the pipeline as part of the render pass descriptor:</p> <pre><code>let renderPassDescriptor = {\ncolorAttachments: [{\n    clearValue: { r: 1, g: 1, b: 1, a: 1 },\n    loadOp: \"clear\", \n    storeOp: \"store\",\n    view: context.getCurrentTexture().createView()\n}],\ndepthStencilAttachment: {  // Add depth buffer to the colorAttachment\n    view: depthTexture.createView(),\n    depthClearValue: 1.0,\n    depthLoadOp: \"clear\",\n    depthStoreOp: \"store\",\n}\n};\n</code></pre> <p>Note that the view in the depthStencilAttachment is a view of the depthTexture that was created previously. The depthClearValue says that the depth for every fragment will be initialized to 1.0 when the depth buffer is cleared. 1.0  is the maximum possible depth value, representing a depth that is behind anything else in the image. (\"Stencil\" here, by the way, refers to the stencil test, which is not covered in this textbook; memory for the stencil test is generally combined with memory for the depth test, and in WebGPU they would be part of the same texture.)</p> <p>The \"clear\" properties in the renderPassDescriptor mean that the color and depth buffers will be filled with the clear value before anything is rendered. This is appropriate for the first render pass. But for any additional render passes, \"clear\" has to be changed to \"load\" in order to avoid erasing whatever was already drawn. For example, the sample program makes this change before the second render pass:</p> <pre><code>renderPassDescriptor.depthStencilAttachment.depthLoadOp = \"load\";\nrenderPassDescriptor.colorAttachments[0].loadOp = \"load\";\n</code></pre> <p>The sample program actually uses multisampling (Subsection 9.2.5), which requires a small change when creating the depth texture:</p> <pre><code>depthTexture = device.createTexture({\n    size: [context.canvas.width, context.canvas.height],\n    format: \"depth24plus\",\n    sampleCount: 4, // Required when multisampling is used!\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n});\n</code></pre>"},{"location":"cn/c9/s4/#942-\u5750\u6807\u7cfb","title":"9.4.2 \u5750\u6807\u7cfb","text":"<p>Coordinate Systems</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528\u9ed8\u8ba4\u7684WebGPU\u5750\u6807\u7cfb\u7edf\uff0c\u5176\u4e2dx\u8f74\u4ece\u5de6\u5230\u53f3\u8303\u56f4\u662f-1.0\u52301.0\uff0cy\u8f74\u4ece\u4e0b\u5230\u4e0a\u8303\u56f4\u662f-1.0\u52301.0\uff0c\u6df1\u5ea6\u6216z\u503c\u4ece\u524d\u5230\u540e\u8303\u56f4\u662f0.0\u52301.0\u3002\u5750\u6807\u8d85\u51fa\u8fd9\u4e9b\u8303\u56f4\u7684\u70b9\u4e0d\u6784\u6210\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e2a\u5750\u6807\u7cfb\u7edf\u88ab\u79f0\u4e3a\u5f52\u4e00\u5316\u8bbe\u5907\u5750\u6807\uff08NDC\uff09\u3002\uff08OpenGL\u4f7f\u7528\u201c\u88c1\u526a\u5750\u6807\u201d\u6765\u79f0\u547c\u5176\u9ed8\u8ba4\u5750\u6807\u7cfb\u7edf\uff1bWebGPU\u4f7f\u7528\u8be5\u672f\u8bed\u6765\u6307\u4ee3\u5176\u9ed8\u8ba4\u7cfb\u7edf\u7684\u9f50\u6b21\u5750\u6807\uff0c<code>(x,y,z,w)</code>\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u88c1\u526a\u5750\u6807\u5230NDC\u7684\u53d8\u6362\u662f\u901a\u8fc7\u5c06<code>(x,y,z,w)</code>\u6620\u5c04\u5230<code>(x/w,y/w,z/w)</code>\u6765\u5b9e\u73b0\u7684\u3002\uff09</p> <p>\u5f52\u4e00\u5316\u8bbe\u5907\u5750\u6807\u88ab\u6620\u5c04\u5230\u5149\u6805\u5316\u8fc7\u7a0b\u4e2d\u7684\u89c6\u53e3\u5750\u6807\u3002\u89c6\u53e3\u5750\u6807\u662f\u6b63\u5728\u6e32\u67d3\u7684\u77e9\u5f62\u533a\u57df\u4e0a\u7684\u50cf\u7d20\u6216\u8bbe\u5907\u5750\u6807\uff0c\u5176\u4e2d(0,0)\u4f4d\u4e8e\u5de6\u4e0a\u89d2\uff0c\u6bcf\u4e2a\u50cf\u7d20\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u7b49\u4e8e1\u3002\u89c6\u53e3\u5750\u6807\u8fd8\u5305\u62ec\u672a\u53d8\u6362\u7684\u6df1\u5ea6\u503c\uff0c\u8303\u56f4\u57280\u52301\u4e4b\u95f4\u3002\u5f53\u7247\u6bb5\u7740\u8272\u5668\u4f7f\u7528@builtin(position)\u8f93\u5165\u65f6\uff0c\u5176\u503c\u4ee5\u89c6\u53e3\u5750\u6807\u7ed9\u51fa\u3002\u901a\u5e38\uff0c\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u50cf\u7d20\u7684xy\u5750\u6807\u5c06\u662f\u8be5\u50cf\u7d20\u7684\u4e2d\u5fc3\uff0c\u5bf9\u4e8e\u89c6\u53e3\u5de6\u4e0a\u89d2\u7684\u50cf\u7d20\uff0c\u5750\u6807\u5982(0.5,0.5)\u662f\u534a\u6574\u6570\u5750\u6807\u3002\u5bf9\u4e8e\u591a\u91cd\u91c7\u6837\uff0c\u50cf\u7d20\u5185\u7684\u5176\u4ed6\u70b9\u88ab\u4f7f\u7528\u3002</p> <p>\u4f46\u662f\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u7ed8\u5236\u65f6\u80fd\u591f\u4f7f\u7528\u6211\u4eec\u9009\u62e9\u7684\u5750\u6807\u7cfb\u7edf\u3002\u8fd9\u5c31\u5f15\u5165\u4e86\u51e0\u4e2a\u65b0\u7684\u5750\u6807\u7cfb\u7edf\uff1a\u5bf9\u8c61\u5750\u6807\uff0c\u9876\u70b9\u6700\u521d\u6307\u5b9a\u65f6\u7684\u5750\u6807\u7cfb\u7edf\uff1b\u4e16\u754c\u5750\u6807\uff0c\u6574\u4e2a\u573a\u666f\u4efb\u610f\u7684\u5750\u6807\u7cfb\u7edf\uff1b\u4ee5\u53ca\u773c\u5750\u6807\uff0c\u4ee3\u8868\u7528\u6237\u89c6\u89d2\u4e0b\u7684\u4e16\u754c\uff0c\u89c2\u5bdf\u8005\u4f4d\u4e8e(0,0,0)\uff0cx\u8f74\u4ece\u5de6\u5230\u53f3\u5ef6\u4f38\uff0cy\u8f74\u6307\u5411\u4e0a\u65b9\uff0cz\u8f74\u6307\u5411\u5c4f\u5e55\u5185\u90e8\u3002\u6240\u6709\u8fd9\u4e9b\u5750\u6807\u7cfb\u7edf\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u53d8\u6362\u5728\u7b2c3.3\u8282\u4e2d\u6709\u8be6\u7ec6\u8ba8\u8bba\u3002\u8fd9\u5f20\u56fe\u4ece\u8be5\u8282\u4e2d\u91cd\u590d\u4f7f\u7528\uff1a</p> <p>123</p> <p>\u5bf9\u4e8eWebGPU\uff0c\u60a8\u5e94\u8be5\u5c06\u201c\u88c1\u526a\u5750\u6807\u201d\u4e0e\u5f52\u4e00\u5316\u8bbe\u5907\u5750\u6807\u7b49\u540c\u8d77\u6765\uff0c\u5e76\u5c06\u201c\u8bbe\u5907\u5750\u6807\u201d\u4e0e\u89c6\u53e3\u5750\u6807\u7b49\u540c\u8d77\u6765\u3002</p> <p>\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0c\u53ea\u6709\u5f52\u4e00\u5316\u8bbe\u5907\u5750\u6807\u3001\u89c6\u53e3\u5750\u6807\u548c\u89c6\u53e3\u53d8\u6362\u662f\u5185\u7f6e\u4e8eWebGPU\u4e2d\u7684\u3002\u5176\u4ed6\u5750\u6807\u7cfb\u7edf\u548c\u53d8\u6362\u662f\u5728\u4ee3\u7801\u4e2d\u5b9e\u73b0\u7684\uff0c\u65e0\u8bba\u662f\u5728JavaScript\u7aef\u8fd8\u662f\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u3002</p> <p>\u5efa\u6a21\u53d8\u6362\u548c\u89c2\u5bdf\u53d8\u6362\u901a\u5e38\u7ed3\u5408\u6210\u4e00\u4e2a\u6a21\u578b\u89c6\u56fe\u53d8\u6362\uff0c\u5982\u4e0a\u6240\u793a\uff0c\u539f\u56e0\u57283.3.4\u5c0f\u8282\u4e2d\u89e3\u91ca\u3002\u6240\u4ee5\uff0c\u7a0b\u5e8f\u901a\u5e38\u53ea\u9700\u8981\u5904\u7406\u6a21\u578b\u89c6\u56fe\u548c\u6295\u5f71\u53d8\u6362\u3002</p> <p>\u56fe\u4e2d\u6ca1\u6709\u5c55\u793a\u4e00\u4e2a\u91cd\u8981\u7684\u53d8\u6362\u3002\u8868\u9762\u6cd5\u5411\u91cf\u5728\u5149\u7167\u4e2d\u626e\u6f14\u91cd\u8981\u89d2\u8272\uff08\u89c14.1.3\u5c0f\u8282\uff09\u3002\u5f53\u5bf9\u8c61\u901a\u8fc7\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u65f6\uff0c\u5b83\u7684\u6cd5\u5411\u91cf\u4e5f\u5fc5\u987b\u88ab\u53d8\u6362\u3002\u6cd5\u5411\u91cf\u7684\u53d8\u6362\u4e0e\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u4e0d\u540c\uff0c\u4f46\u53ef\u4ee5\u4ece\u4e2d\u6d3e\u751f\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u53d8\u6362\u90fd\u4ee5\u77e9\u9635\u5f62\u5f0f\u5b9e\u73b0\u3002\u6a21\u578b\u89c6\u56fe\u548c\u6295\u5f71\u53d8\u6362\u662f4x4\u77e9\u9635\u3002\u6cd5\u5411\u91cf\u7684\u53d8\u6362\u77e9\u9635\u662f3x3\u77e9\u9635\u3002</p> <p>We have been using the default WebGPU coordinate system, in which x ranges from -1.0 to 1.0 from left to right, y ranges from -1.0 to 1.0 from bottom to top, and the depth, or z-value, ranges from 0.0 to 1.0 from front to back. Points with coordinates outside these ranges are not part of the image. This coordinate system is referred to as normalized device coordinates (NDC). (OpenGL uses the term \"clip coordinates\" for its default coordinate system; WebGPU uses that term to refer to homogeneous coordinates, <code>(x,y,z,w)</code>, for its default system; that is, the transformation from clip coordinates to NDC is given by mapping <code>(x,y,z,w)</code> to <code>(x/w,y/w,z/w)</code>.)</p> <p>Normalized device coordinates are mapped to viewport coordinates for rasterization. Viewport coordinates are pixel or device coordinates on the rectangular region that is being rendered, with (0,0) at the top left corner and each pixel having height and width equal to 1. Viewport coordinates also include the untransformed depth value between 0 and 1. When a fragment shader uses the @builtin(position) input, its values are given in viewport coordinates. Ordinarily the xy coordinates for a pixel in the fragment shader will be the center of that pixel, with half-integer coordinates such as <code>(0.5,0.5)</code> for the pixel in the upper left corner of the viewport. For multisampling, other points within the pixel are used.</p> <p>But we want to be able to use the coordinate system of our choice when drawing. That brings in several new coordinate systems: object coordinates, the coordinate system in which vertices are originally specified; world coordinates, the arbitrary coordinate system on the scene as a whole; and eye coordinates, which represent the world from the point of view of the user, with the viewer at (0,0,0), the x-axis stretching from left to right, the y-axis pointing up, and the z-axis pointing into the screen. All of these coordinate systems and the transformations between them are discussed extensively in Section 3.3. This illustration is repeated from that section:</p> <p>123</p> <p>For WebGPU, you should identify \"clip coordinates\" with normalized device coordinates and \"device coordinates\" with viewport coordinates.</p> <p>It is important to understand that only normalized device coordinates, viewport coordinates, and the viewport transformation are built into WebGPU. The other coordinate systems and transformations are implemented in code either on the JavaScript side or in the shader program.</p> <p>The modeling transform and viewing transform are usually combined into a modelview transform, as shown, for reasons explained in Subsection 3.3.4. So a program generally only needs to work with the modelview and projection transforms.</p> <p>There is one important transformation not shown in the diagram. Normal vectors for surfaces play an important role in lighting (Subsection 4.1.3). When an object is transformed by the modelview transformation, its normal vectors must also be transformed. The transformation for normal vectors is not the same as the modelview transformation but can be derived from it.</p> <p>All of these transformations are implemented as matrices. The modelview and projection transformations are 4-by-4 matrices. The transformation matrix for normal vectors is a 3-by-3 matrix.</p>"},{"location":"cn/c9/s4/#943-\u8fdb\u5165-3d","title":"9.4.3 \u8fdb\u5165 3D","text":"<p>Into 3D</p> \u4e2d\u6587\u82f1\u6587 <p>\u793a\u4f8b\u7a0b\u5e8f webgpu/Phong_lighting.html \u662f\u6211\u4eec\u5728 WebGPU \u4e2d\u7684\u7b2c\u4e00\u4e2a 3D \u56fe\u5f62\u793a\u4f8b\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u529f\u80fd\u4e0e WebGL \u7248\u672c\u76f8\u540c\uff0cwebgl/basic-specular-lighting-Phong.html\u3002\u5b83\u4e00\u6b21\u663e\u793a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7531\u5355\u4e00\u7684\u767d\u8272\u5149\u6e90\u7167\u4eae\u3002\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u663e\u793a\u7684\u5bf9\u8c61\u4ee5\u53ca\u5bf9\u8c61\u7684\u6750\u8d28\u5c5e\u6027\uff0c\u5e76\u4e14\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u62d6\u52a8\u56fe\u50cf\u6765\u65cb\u8f6c\u5bf9\u8c61\u3002\u5bf9\u8c61\u88ab\u5b9a\u4e49\u4e3a\u7d22\u5f15\u9762\u96c6\uff0c\u5e76\u4f7f\u7528\u7d22\u5f15\u7ed8\u5236\u8fdb\u884c\u6e32\u67d3\u3002</p> <p>\u5404\u79cd\u5c5e\u6027\u7531\u7a0b\u5e8f\u7684 JavaScript \u7aef\u63d0\u4f9b\uff0c\u5e76\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002\u6211\u5df2\u7ecf\u5c06\u5b83\u4eec\u5168\u90e8\u6536\u96c6\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\uff1a</p> <pre><code>struct UniformData {\n    modelview : mat4x4f,   // \u5927\u5c0f 16\uff0c\u504f\u79fb\u91cf 0  \n    projection : mat4x4f,  // \u5927\u5c0f 16\uff0c\u504f\u79fb\u91cf 16 \uff08\u4ee5 4 \u5b57\u8282\u6d6e\u70b9\u6570\u4e3a\u5355\u4f4d\uff09\n    normalMatrix : mat3x3f,// \u5927\u5c0f 12\uff0c\u504f\u79fb\u91cf 32\n    lightPosition : vec4f, // \u5927\u5c0f 4\uff0c\u504f\u79fb\u91cf 44\n    diffuseColor : vec3f,  // \u5927\u5c0f 3\uff0c\u504f\u79fb\u91cf 48\n    specularColor : vec3f, // \u5927\u5c0f 3\uff0c\u504f\u79fb\u91cf 52\n    specularExponent : f32 // \u5927\u5c0f 1\uff0c\u504f\u79fb\u91cf 55\n}\n\n@group(0) @binding(0) var&lt;uniform&gt; uniformData : UniformData;\n</code></pre> <p>\u8fd9\u5728 JavaScript \u7aef\u7531\u4e00\u4e2a\u957f\u5ea6\u4e3a 56 \u7684 Float32Array\uff0cuserData \u652f\u6301\uff0c\u503c\u4ece\u8be5\u6570\u7ec4\u5199\u5165\u5230 GPU \u7aef\u6301\u6709\u8be5\u7ed3\u6784\u4f53\u7684 uniform \u7f13\u51b2\u533a\u3002\u4e0a\u8ff0\u7ed3\u6784\u4f53\u6210\u5458\u7684\u504f\u79fb\u91cf\u5bf9\u5e94\u4e8e\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u6f2b\u53cd\u5c04\u989c\u8272\u8bbe\u7f6e\u4e3a\u7ea2\u8272\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8bf4\uff1a</p> <pre><code>userData.set( [1,0,0], 48 );\ndevice.queue.writeBuffer( uniformBuffer, 4*48, uniformData, 48, 3 );\n</code></pre> <p>\u7c7b\u578b\u5316\u6570\u7ec4\u65b9\u6cd5 userData.set(array,index) \u5c06\u6570\u7ec4\u7684\u5143\u7d20\u590d\u5236\u5230 userData\uff0c\u4ece\u6307\u5b9a\u7684\u7d22\u5f15\u5f00\u59cb\u3002\u5728 writeBuffer() \u8c03\u7528\u4e2d\uff0c\u6ce8\u610f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed9\u51fa\u4e86\u7f13\u51b2\u533a\u4e2d\u6570\u636e\u7684\u5b57\u8282\u504f\u79fb\u91cf\uff0c\u8fd9\u662f\u4ee5\u6d6e\u70b9\u6570\u4e3a\u5355\u4f4d\u7684\u504f\u79fb\u91cf\u7684\u56db\u500d\u3002\u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u5728\u7c7b\u578b\u5316\u6570\u7ec4\u4e2d\u8981\u590d\u5236\u7684\u6570\u636e\u7684\u8d77\u59cb\u7d22\u5f15\uff0c\u7b2c\u4e94\u4e2a\u53c2\u6570\u7ed9\u51fa\u4e86\u8981\u590d\u5236\u7684\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf \u2014\u2014 \u800c\u4e0d\u662f\u5b57\u8282\u3002\uff08\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u6bd4\u8fd9\u4e2a\u793a\u4f8b\u66f4\u6709\u7ec4\u7ec7\u5730\u4ece JavaScript \u7aef\u5230 GPU \u7aef\u590d\u5236\u5404\u79cd\u6570\u636e\u9879\u3002\uff09</p> <p>\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\uff0c\u6a21\u578b\u89c6\u56fe\u548c\u6295\u5f71\u77e9\u9635\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4f7f\u7528\uff0c\u7ed3\u6784\u4f53\u7684\u5176\u4ed6\u6210\u5458\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u3002\uff08\u5c06\u9876\u70b9\u7740\u8272\u5668\u548c\u7247\u6bb5\u7740\u8272\u5668\u7684\u6570\u636e\u7ec4\u5408\u5728\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\uff0c\u5c31\u50cf\u6211\u5728\u8fd9\u91cc\u505a\u7684\uff0c\u53ef\u80fd\u4e0d\u662f\u6700\u4f73\u5b9e\u8df5\u3002\uff09\u9876\u70b9\u7740\u8272\u5668\u7684\u8f93\u5165\u662f\u9876\u70b9\u7684 3D \u5750\u6807\u548c\u6cd5\u5411\u91cf\u3002\u5411\u91cf\u5750\u6807\u4ee5\u5bf9\u8c61\u5750\u6807\u7cfb\u7ed9\u51fa\u3002\u9876\u70b9\u7740\u8272\u5668\u7684\u8f93\u51fa\u662f\u9876\u70b9\u5728\u88c1\u526a\u5750\u6807\u7cfb\u4e2d\u7684\u4f4d\u7f6e\uff08\u8fd9\u662f\u5fc5\u9700\u7684\u8f93\u51fa\uff09\uff0c\u6cd5\u5411\u91cf\u548c\u9876\u70b9\u5728\u773c\u5750\u6807\u7cfb\u4e2d\u7684\u4f4d\u7f6e\uff1a</p> <pre><code>struct VertexOut {\n    @builtin(position) position : vec4f,\n    @location(0) normal : vec3f,\n    @location(1) eyeCoords : vec3f\n}\n\n@vertex\nfn vmain( @location(0) coords: vec3f,\n        @location(1) normal: vec3f ) -&gt; VertexOut {\n    let eyeCoords = uniformData.modelview * vec4f(coords,1);\n    var output : VertexOut;\n    output.position = uniformData.projection * eyeCoords;\n    output.normal = normalize(normal);  // \u786e\u4fdd\u5b83\u662f\u4e00\u4e2a\u5355\u4f4d\u5411\u91cf\n    output.eyeCoords = eyeCoords.xyz/eyeCoords.w;  // \u8f6c\u6362\u4e3a (x,y,z) \u5750\u6807\n    return output;\n}\n</code></pre> <p>\u8981\u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f60\u9700\u8981\u7406\u89e3\u5404\u79cd\u5750\u6807\u7cfb\u4ee5\u53ca WGSL \u5bf9\u77e9\u9635\u548c\u5411\u91cf\u6570\u5b66\u7684\u652f\u6301\u3002\u9876\u70b9\u7684\u773c\u5750\u6807\u901a\u8fc7\u5c06\u9f50\u6b21\u5bf9\u8c61\u5750\u6807\u5411\u91cf\u4e0e\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u76f8\u4e58\u6765\u83b7\u5f97\u3002\u8fd9\u7ed9\u51fa\u4e86\u9f50\u6b21 (x,y,z,w) \u773c\u5750\u6807\uff0c\u901a\u8fc7\u5c06 vec3f eyeCoords.xyz \u9664\u4ee5 w \u5750\u6807 eyeCoords.w \u8f6c\u6362\u4e3a\u666e\u901a\u7684 (x,y,z) \u5750\u6807\u3002\u5fc5\u987b\u4ee5\u88c1\u526a\u5750\u6807\u7cfb\u7ed9\u51fa\u7684\u4f4d\u7f6e\u8f93\u51fa\uff0c\u901a\u8fc7\u5c06\u773c\u5750\u6807\u5411\u91cf\u4e0e\u6295\u5f71\u77e9\u9635\u76f8\u4e58\u6765\u83b7\u5f97\u3002</p> <p>\u9876\u70b9\u7740\u8272\u5668\u8f93\u51fa\u7684\u5355\u4f4d\u6cd5\u5411\u91cf\u548c\u773c\u5750\u6807\u6210\u4e3a\u7247\u6bb5\u7740\u8272\u5668\u7684\u8f93\u5165\uff0c\u5728\u90a3\u91cc\u5b83\u4eec\u7528\u4e8e\u5149\u7167\u8ba1\u7b97\u3002\uff08\u5f53\u7136\uff0c\u7247\u6bb5\u7684\u5b83\u4eec\u7684\u503c\u662f\u4ece\u5305\u542b\u7247\u6bb5\u7684\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u63d2\u503c\u5f97\u5230\u7684\u3002\uff09Phong \u5149\u7167\u6307\u7684\u662f\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u63d2\u503c\u6cd5\u5411\u91cf\u548c\u57fa\u672c\u7684 OpenGL \u5149\u7167\u6a21\u578b\u8fdb\u884c\u5149\u7167\u8ba1\u7b97\uff08\u89c1 4.1.4\u5c0f\u8282 \u548c 7.2.2\u5c0f\u8282\uff09\u3002\u672c\u8282\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u4e2d\u5c06\u66f4\u591a\u5730\u8ba8\u8bba\u5149\u7167\u3002</p> <p>The sample program webgpu/Phong_lighting.html is our first example of 3D graphics in WebGPU. This program has functionality identical to the WebGL version, webgl/basic-specular-lighting-Phong.html. It displays one object at a time, illuminated by a single white light source. The user has some control over what object is shown and the material properties of the object, and the user can rotate the object by dragging on the image. The objects are defined as indexed face sets and are rendered using indexed drawing.</p> <p>Various properties are provided by the JavaScript side of the program and used in the shader program. I have collected them all into a single struct in the shader program:</p> <pre><code>struct UniformData {\n    modelview : mat4x4f,   // size 16, offset 0  \n    projection : mat4x4f,  // size 16, offset 16 (measured in 4-byte floats)\n    normalMatrix : mat3x3f,// size 12, offset 32\n    lightPosition : vec4f, // size  4, offset 44\n    diffuseColor : vec3f,  // size  3, offset 48\n    specularColor : vec3f, // size  3, offset 52\n    specularExponent : f32 // size  1, offset 55\n}\n\n@group(0) @binding(0) var&lt;uniform&gt; uniformData : UniformData;\n</code></pre> <p>This is backed on the JavaScript side by a Float32Array, userData, of length 56, and values are written from that array into the uniform buffer that holds the struct on the GPU side. The offsets listed above for members of the struct correspond to indices in the array. For example, to set the diffuse color to red, we might say</p> <pre><code>userData.set( [1,0,0], 48 );\ndevice.queue.writeBuffer( uniformBuffer, 4*48, uniformData, 48, 3 );\n</code></pre> <p>The typed array method userData.set(array,index) copies the elements of the array into userData, starting at the specified index. In the call to writeBuffer(), note that the second parameter gives the byte offset of the data in the buffer, which is four times the offset measured in floats. The fourth parameter is the starting index in the typed array of the data to be copied, and the fifth parameter gives the number of elements\u2014not bytes\u2014of the array to be copied. (The program is actually more organized than this example about copying the various data items from the JavaScript to the GPU side.)</p> <p>In the shader program, the modelview and projection matrices are used in the vertex shader, and the other members of the struct are used in the fragment shader. (It is probably not best practice to combine data for the vertex shader and fragment shader in the same struct, as I have done here.) The inputs to the vertex shader are the 3D coordinates and the normal vector for the vertex. The vector coordinates are given in the object coordinate system. The vertex shader outputs are the position of the vertex in clip coordinates (which is a required output), the normal vector, and the position of the vertex in the eye coordinate system:</p> <pre><code>struct VertexOut {\n    @builtin(position) position : vec4f,\n    @location(0) normal : vec3f,\n    @location(1) eyeCoords : vec3f\n}\n\n@vertex\nfn vmain( @location(0) coords: vec3f,\n        @location(1) normal: vec3f ) -&gt; VertexOut {\n    let eyeCoords = uniformData.modelview * vec4f(coords,1);\n    var output : VertexOut;\n    output.position = uniformData.projection * eyeCoords;\n    output.normal = normalize(normal);  // make sure it's a unit vector\n    output.eyeCoords = eyeCoords.xyz/eyeCoords.w;  // convert to (x,y,z) coords\n    return output;\n}\n</code></pre> <p>To understand this code, you need to understand the various coordinate systems and the support in WGSL for matrix and vector math. The eye coordinates of the vertex are obtained by multiplying the homogeneous object coordinate vector by the modelview matrix. This gives the homogeneous (x,y,z,w) eye coordinates, which are converted to ordinary (x,y,z) coordinates by dividing the vec3f eyeCoords.xyz by the w-coordinate, eyeCoords.w. The position output, which must be given in clip coordinates, is obtained by multiplying the eye coordinate vector by the projection matrix.</p> <p>The unit normal and eye coordinate outputs from the vertex shader become inputs to the fragment shader, where they are used in the lighting calculation. (Their values for a fragment are, of course, interpolated from the vertices of the triangle that contains the fragment.) Phong lighting refers to doing lighting calculations in the fragment shader using interpolated normal vectors and the basic OpenGL lighting model (see Subsection 4.1.4 and Subsection 7.2.2). There is more about lighting in the last example in this section.</p>"},{"location":"cn/c9/s4/#944-wgpu-\u77e9\u9635","title":"9.4.4 wgpu \u77e9\u9635","text":"<p>wgpu-matrix</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u7a0b\u5e8f\u7684 JavaScript \u7aef\u5904\u7406\u77e9\u9635\u548c\u5411\u91cf\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u652f\u6301\u77e9\u9635\u548c\u5411\u91cf\u6570\u5b66\u7684 JavaScript \u5e93\u4f1a\u5f88\u65b9\u4fbf\u3002\u5bf9\u4e8e WebGL\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 glMatrix\uff08\u89c1 7.1.2\u5c0f\u8282\uff09\u3002\u5bf9\u4e8e WebGPU\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e0d\u540c\u7684\u5e93\uff0c\u539f\u56e0\u6709\u51e0\u4e2a\u3002\u4e00\u4e2a\u539f\u56e0\u662f WGSL \u4e2d\u88c1\u526a\u5750\u6807\u7684 z \u8303\u56f4\u662f\u4ece 0 \u5230 1\uff0c\u800c\u5728 GLSL \u4e2d\uff0c\u8303\u56f4\u662f\u4ece -1 \u5230 1\u3002\u8fd9\u610f\u5473\u7740\u4e24\u79cd\u7740\u8272\u8bed\u8a00\u4e2d\u7684\u6295\u5f71\u77e9\u9635\u5c06\u4f1a\u4e0d\u540c\u3002\u7b2c\u4e8c\u4e2a\u539f\u56e0\u662f WGSL \u4e2d\u7684 3x3 \u77e9\u9635\u5305\u542b 12 \u4e2a\u6d6e\u70b9\u6570\uff0c\u56e0\u4e3a\u5bf9\u9f50\u95ee\u9898\uff08\u89c1 9.3.1\u5c0f\u8282\uff09\uff0c\u800c\u5728 GLSL \u4e2d\uff0c3x3 \u77e9\u9635\u5305\u542b 9 \u4e2a\u6d6e\u70b9\u6570\u3002</p> <p>\u5728\u6211\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4f7f\u7528\u4e86 wgpu-matrix \u5e93\uff08webgpu/wgpu-matrix.js\uff09\uff0c\u7531 Gregg Tavares \u5f00\u53d1\uff0c\u6839\u636e MIT \u5f00\u6e90\u8bb8\u53ef\u8bc1\u5206\u53d1\u3002\u53ef\u4ee5\u5728\u5176\u7f51\u9875 https://wgpu-matrix.org/ \u4e0a\u627e\u5230\u4e0b\u8f7d\u548c\u6587\u6863\u94fe\u63a5\u3002\uff08\u6211\u7684\u4e00\u4e9b\u793a\u4f8b\u4f7f\u7528\u4e86\u8be5\u5e93\u7684\u66f4\u5c0f\u7684\uff0c\u201c\u538b\u7f29\u7684\u201d\u7248\u672c\uff0cwebgpu/wgpu-matrix.min.js\uff0c\u8be5\u7248\u672c\u4e0d\u9002\u5408\u4eba\u7c7b\u9605\u8bfb\u3002\uff09\u6211\u5728 wgpu-matrix \u4e0b\u8f7d\u7684 \"dist\" \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u4e86 JavaScript \u6587\u4ef6\u3002</p> <p>\u6a21\u578b\u89c6\u56fe\u53d8\u6362\u77e9\u9635\u53ef\u4ee5\u5728 JavaScript \u7aef\u8ba1\u7b97\uff0c\u4ece\u5355\u4f4d\u77e9\u9635\u5f00\u59cb\uff0c\u7136\u540e\u4e58\u4ee5\u7531\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u7ed9\u51fa\u7684\u89c2\u5bdf\u548c\u5efa\u6a21\u53d8\u6362\u3002\u6709\u51e0\u79cd\u719f\u6089\u7684\u65b9\u6cd5\u6765\u6784\u9020\u6b63\u4ea4\u548c\u900f\u89c6\u6295\u5f71\u77e9\u9635\uff08\u89c1 3.3.3\u5c0f\u8282\uff09\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u4f7f\u7528 wgpu-matrix \u5bb9\u6613\u5b9e\u73b0\u7684\u3002</p> <p>\u5728 wgpu-matrix.js \u4e2d\uff0c\u77e9\u9635\u548c\u6570\u5b66\u51fd\u6570\u662f\u5bf9\u8c61 wgpuMatrix.mat4\u3001wgpuMatrix.mat3 \u548c wgpuMatrix.vec4 \u7b49\u7684\u5c5e\u6027\u3002\u77e9\u9635\u548c\u5411\u91cf\u8868\u793a\u4e3a\u5177\u6709\u9002\u5f53\u957f\u5ea6\u7684 Float32Arrays\u3002\u5b83\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a Float32Arrays \u521b\u5efa\uff0c\u6216\u8005\u901a\u8fc7\u8c03\u7528\u5e93\u4e2d\u7684\u51fd\u6570\u521b\u5efa\uff1b\u4f8b\u5982\uff1a</p> <pre><code>matrix4 = wgpuMatrix.mat4.create();  // \u4e00\u4e2a 4x4 \u77e9\u9635\nvector3 = wgpuMatrix.vec3.create();  // \u4e00\u4e2a 3 \u7ef4\u5411\u91cf\n</code></pre> <p>\u8fd9\u4e9b\u51fd\u6570\u521b\u5efa\u586b\u5145\u6709\u96f6\u7684\u6570\u7ec4\u3002\u5927\u591a\u6570\u77e9\u9635\u548c\u5411\u91cf\u64cd\u4f5c\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u77e9\u9635\u6216\u5411\u91cf\u4f5c\u4e3a\u8f93\u51fa\u3002\u5728 wgpu-matrix \u4e2d\uff0c\u60a8\u901a\u5e38\u53ef\u4ee5\u5c06\u73b0\u6709\u7684\u77e9\u9635\u6216\u5411\u91cf\u4f5c\u4e3a\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u4ee5\u63a5\u6536\u8f93\u51fa\u3002\u7136\u800c\uff0c\u90a3\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\uff0c\u5e93\u5c06\u4e3a\u8f93\u51fa\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u77e9\u9635\u6216\u5411\u91cf\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u8f93\u51fa\u90fd\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c modelview \u662f\u5f53\u524d\u7684\u6a21\u578b\u89c6\u56fe\u77e9\u9635\uff0c\u5e76\u4e14\u5982\u679c\u60a8\u60f3\u5e94\u7528 [3,6,4] \u7684\u5e73\u79fb\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u8bf4\uff1a</p> <pre><code>wgpuMatrix.mat4.translate( modelview, [3,6,4], modelview );\n</code></pre> <p>\u6216\u8005</p> <pre><code>modelview = wgpuMatrix.mat4.translate( modelview, [3,6,4] );\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u7248\u672c\u5f53\u7136\u66f4\u6709\u6548\u7387\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u770b wgpu-matrix.js \u4e2d\u4e00\u4e9b\u6700\u91cd\u8981\u7684\u51fd\u6570\u3002\u8fd9\u5c06\u5305\u62ec\u5728\u6211\u7684\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u51fd\u6570\u3002\u521b\u5efa\u6295\u5f71\u77e9\u9635\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\uff1a</p> <pre><code>projMatrix = wgpuMatrix.mat4.perspective( fovy, aspect, near, far );\n</code></pre> <p>\u5176\u4e2d fovy \u662f\u5782\u76f4\u89c6\u573a\u89d2\u5ea6\uff0c\u4ee5\u5f27\u5ea6\u7ed9\u51fa\uff0caspect \u662f\u56fe\u50cf\u5bbd\u5ea6\u4e0e\u5176\u9ad8\u5ea6\u7684\u6bd4\u7387\uff0cnear \u662f\u8fd1\u88c1\u526a\u9762\u8ddd\u79bb\u89c2\u5bdf\u8005\u7684\u8ddd\u79bb\uff0cfar \u662f\u8fdc\u88c1\u526a\u9762\u7684\u8ddd\u79bb\u3002\u8fd9\u57fa\u672c\u4e0a\u4e0e OpenGL \u4e2d\u7684 gluPerspective() \u51fd\u6570\u76f8\u540c\uff08\u89c1 3.3.3\u5c0f\u8282\uff09\uff0c\u9664\u4e86\u7528\u5f27\u5ea6\u800c\u4e0d\u662f\u5ea6\u6570\u6765\u6d4b\u91cf\u89d2\u5ea6\u3002glOrtho() \u548c glFrustum() \u7684\u7b49\u4ef7\u51fd\u6570\u4e5f\u5728 wgpu-matrix \u4e2d\u53ef\u7528\u3002</p> <p>\u5bf9\u4e8e\u6a21\u578b\u89c6\u56fe\u77e9\u9635\uff0c\u901a\u5e38\u4ece\u89c2\u5bdf\u53d8\u6362\u5f00\u59cb\u3002\u5bf9\u6b64\uff0cgluLookAt() \u7684\u7b49\u4ef7\u51fd\u6570\u5f88\u65b9\u4fbf\uff1a</p> <pre><code>modelview = wgpuMatrix.mat4.lookAt( eye, viewRef, viewUp )\n</code></pre> <p>\u53c2\u6570\u662f 3 \u7ef4\u5411\u91cf\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e3a\u5e38\u89c4\u7684 JavaScript \u6570\u7ec4\u3002\u8fd9\u4e3a\u4f4d\u4e8e eye \u7684\u89c2\u5bdf\u8005\u6784\u5efa\u4e86\u4e00\u4e2a\u89c6\u56fe\u77e9\u9635\uff0c\u89c2\u5bdf\u65b9\u5411\u671d\u5411 viewRef\uff0c\u5411\u91cf viewUp \u5728\u89c6\u56fe\u4e2d\u6307\u5411\u4e0a\u65b9\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ece\u5355\u4f4d\u77e9\u9635\u5f00\u59cb\u5e76\u5e94\u7528\u5e73\u79fb\u548c\u4e00\u4e9b\u65cb\u8f6c\u6765\u521b\u5efa\u89c6\u56fe\u77e9\u9635\u3002\u4f8b\u5982\uff0c</p> <pre><code>modelview = wgpuMatrix.mat4.identity();\nwgpuMatrix.mat4.translate(modelview, [0,0,-10], modelview);\nwgpuMatrix.mat4.rotateX(modelview, Math.PI/12, modelview);\nwgpuMatrix.mat4.rotateY(modelview, Math.PI/15, modelview);\n</code></pre> <p>\uff08\u6211\u5c06\u6307\u51fa\uff0c\u7136\u800c\uff0c\u5728\u6211\u7684\u672c\u8282\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u89c6\u56fe\u77e9\u9635\u5b9e\u9645\u4e0a\u6765\u81ea\u4e8e\u6211\u4e0e WebGL \u4e00\u8d77\u4f7f\u7528\u7684\u76f8\u540c\u7684\u201ctrackball rotator\u201d\u3002\u89c1 7.1.5\u5c0f\u8282\u3002\uff09</p> <p>\u5bf9\u4e8e\u5c06\u5efa\u6a21\u53d8\u6362\u5e94\u7528\u4e8e\u6a21\u578b\u89c6\u56fe\u77e9\u9635\uff0cwgpu-matrix \u6709\u4ee5\u4e0b\u51fd\u6570\uff0c\u6211\u5728\u8fd9\u91cc\u5305\u62ec\u4e86\u53ef\u9009\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff0c\u5e76\u663e\u793a\u4e86\u6570\u7ec4\u5f62\u5f0f\u7684\u5411\u91cf\u53c2\u6570\uff1a</p> <ul> <li>gpuMatrix.mat4.scale(modelview, [sx,sy,sz], modelview) \u2014 \u6309 x \u65b9\u5411\u7684 sx \u56e0\u5b50\uff0cy \u65b9\u5411\u7684 sy \u56e0\u5b50\uff0c\u548c z \u65b9\u5411\u7684 sz \u56e0\u5b50\u8fdb\u884c\u7f29\u653e\u3002</li> <li>gpuMatrix.mat4.axisRotate(modelview, [ax,ay,az], angle, modelview) \u2014 \u7ed5\u901a\u8fc7 [0,0,0] \u548c [ax,ay,az] \u7684\u76f4\u7ebf\u65cb\u8f6c angle \u5f27\u5ea6\u3002\uff08\u6ce8\u610f\uff0c\u6240\u6709\u65cb\u8f6c\u90fd\u4f7f\u7528\u53f3\u624b\u89c4\u5219\u3002\uff09</li> <li>gpuMatrix.mat4.rotateX(modelview, angle, modelview) \u2014 \u7ed5 x \u8f74\u65cb\u8f6c angle \u5f27\u5ea6\u3002</li> <li>gpuMatrix.mat4.rotateY(modelview, angle, modelview) \u2014 \u7ed5 y \u8f74\u65cb\u8f6c angle \u5f27\u5ea6\u3002</li> <li>gpuMatrix.mat4.rotateZ(modelview, angle, modelview) \u2014 \u7ed5 z \u8f74\u65cb\u8f6c angle \u5f27\u5ea6\u3002</li> <li>gpuMatrix.mat4.translate(modelview, [tx,ty,tz], modelview) \u2014 \u6309 x \u65b9\u5411\u7684 tx \u8ddd\u79bb\uff0cy \u65b9\u5411\u7684 ty \u8ddd\u79bb\uff0c\u548c z \u65b9\u5411\u7684 tz \u8ddd\u79bb\u8fdb\u884c\u5e73\u79fb\u3002</li> </ul> <p>\u6cd5\u5411\u91cf\u77e9\u9635\uff0c\u7528\u4e8e\u53d8\u6362\u6cd5\u5411\u91cf\uff0c\u662f\u4e00\u4e2a 3x3 \u77e9\u9635\u3002\u5b83\u53ef\u4ee5\u901a\u8fc7\u53d6 4x4 \u6a21\u578b\u89c6\u56fe\u77e9\u9635\u7684\u5de6\u4e0a\u89d2 3x3 \u5b50\u77e9\u9635\uff0c\u7136\u540e\u53d6\u8be5\u77e9\u9635\u7684\u8f6c\u7f6e\u7684\u9006\u6765\u4ece\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u5bfc\u51fa\u3002\u5728 wgpu-matrix \u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a</p> <pre><code>normalMatrix = mat3.fromMat4(modelview); \nmat3.transpose(normalMatrix,normalMatrix)\nmat3.inverse(normalMatrix,normalMatrix);\n</code></pre> <p>\uff08\u5982\u679c\u6a21\u578b\u89c6\u56fe\u77e9\u9635\u4e0d\u5305\u62ec\u4efb\u4f55\u7f29\u653e\u64cd\u4f5c\uff0c\u90a3\u4e48\u53d6\u9006\u548c\u8f6c\u7f6e\u662f\u4e0d\u5fc5\u8981\u7684\u3002\uff09</p> <p>\u8fd8\u6709\u51fd\u6570\u7528\u4e8e\u5c06\u5411\u91cf V \u4e58\u4ee5\u77e9\u9635 M\u3002\u5bf9\u4e8e 4 \u7ef4\u5411\u91cf\u548c 4x4 \u77e9\u9635\uff1a</p> <pre><code>transformedV = wgpuMatrix.vec4.transformMat4( V, M );\n</code></pre> <p>\u4ee5\u53ca\u5bf9\u4e8e 3 \u7ef4\u5411\u91cf\u548c 3x3 \u77e9\u9635\u7684\u7c7b\u4f3c\u51fd\u6570\u3002</p> <p>We need to work with matrices and vectors on the JavaScript side of a program. For that, it is convenient to use a JavaScript library that supports matrix and vector math. For WebGL, we used glMatrix (Subsection 7.1.2). For WebGPU, we need a different library, for several reasons. One reason is that the range for z in clip coordinates in WGSL is from 0 to 1 while in GLSL, the range is from -1 to 1. This means that projection matrices will be different in the two shading languages. A second reason is that a 3-by-3 matrix in WGSL contains 12 floats, because of alignment issues (Subsection 9.3.1), while in GLSL, a 3-by-3 matrix contains 9 floats.</p> <p>In my examples, I use the wgpu-matrix library (webgpu/wgpu-matrix.js), by Gregg Tavares, which is distributed under the MIT open source license. Download and documentation links can be found on its web page, https://wgpu-matrix.org/. (Some of my examples use the smaller, \"minified,\" version of the library, webgpu/wgpu-matrix.min.js, which is not human-readable.) I found the JavaScript files in the \"dist\" folder in the wgpu-matrix download.</p> <p>The modelview transformation matrix can be computed on the JavaScript side by starting with the identity matrix and then multiplying by viewing and modeling transformations that are given by scaling, rotation, and translation. There are several familiar ways to construct orthographic and perspective projection matrices (see Subsection 3.3.3). All of this is easily implemented using wgpu-matrix.</p> <p>In wgpu-matrix.js, the matrix and math functions are properties of objects such as wgpuMatrix.mat4, wgpuMatrix.mat3, and wgpuMatrix.vec4. Matrices and vectors are represented as Float32Arrays with the appropriate lengths. They can be created as Float32Arrays directly or by calling functions from the library; for example:</p> <pre><code>matrix4 = wgpuMatrix.mat4.create();  // a 4-by-4 matrix\nvector3 = wgpuMatrix.vec3.create();  // a 3-vector\n</code></pre> <p>These functions create arrays filled with zeros. Most matrix and vector operations produce a matrix or vector as output. In wgpu-matrix, you can usually pass an existing matrix or vector as the final parameter to a function, to receive the output. However, that parameter is optional, and the library will create a new matrix or vector for the output, if none is provided. In any case, the output is the return value of the function. For example, if modelview is the current modelview matrix, and if you want to apply a translation by [3,6,4], you can say either</p> <pre><code>wgpuMatrix.mat4.translate( modelview, [3,6,4], modelview );\n</code></pre> <p>or</p> <pre><code>modelview = wgpuMatrix.mat4.translate( modelview, [3,6,4] );\n</code></pre> <p>The first version is, of course, more efficient.</p> <p>Lets look at some of the most important functions from wgpu-matrix.js. This will include all of the functions that are used in my examples. For creating a projection matrix, the most common approach is</p> <pre><code>projMatrix = gpuMatrix.mat4.perspective( fovy, aspect, near, far );\n</code></pre> <p>where fovy is the vertical field of view angle, given in radians, aspect is the ratio of the width of the image to its height, near is the distance of the near clipping plane from the viewer, and far is the distance of the far clipping plane. This is essentially the same as the gluPerspective() function in OpenGL (Subsection 3.3.3) except for measuring the angle in radians instead of degrees. Equivalents of glOrtho() and glFrustum() are also available in wgpu-matrix.</p> <p>For the modelview matrix, it is usual to start with a viewing transformation. For that, the equivalent of gluLookAt() is convenient:</p> <pre><code>modelview = gpuMatrix.mat4.lookAt( eye, viewRef, viewUp )\n</code></pre> <p>The parameters are 3-vectors, which can be specified as regular JavaScript arrays. This constructs a view matrix for a viewer positioned at eye, looking in the direction of viewRef, with the vector viewUp pointing upwards in the view. Of course, a view matrix might also be created by starting with the identity matrix and applying a translation and some rotations. For example,</p> <pre><code>modelview = gpuMatrix.mat4.identity();\ngpuMatrix.mat4.translate(modelview, [0,0,-10], modelview);\ngpuMatrix.mat4.rotateX(modelview, Math.PI/12, modelview);\ngpuMatrix.mat4.rotateY(modelview, Math.PI/15, modelview);\n</code></pre> <p>(I will note, however, that in my sample programs for this section, the view matrix actually comes the same \"trackball rotator\" that I used with WebGL. See Subsection 7.1.5.)</p> <p>For applying modeling transformations to the modelview matrix, wgpu-matrix has the following functions, where I am including the optional final parameter and showing vector parameters as arrays:</p> <ul> <li>gpuMatrix.mat4.scale(modelview, [sx,sy,sz], modelview) \u2014 scales by a factor of sx in the x direction, sy in the y direction, and sz in the z direction.</li> <li>gpuMatrix.mat4.axisRotate(modelview, [ax,ay,az], angle, modelview) \u2014 rotates by angle radians about the line through [0,0,0] and [ax,ay,az]. (Note that all rotations use the right-hand rule.)</li> <li>gpuMatrix.mat4.rotateX(modelview, angle, modelview) \u2014 rotates by angle radians about the x-axis.</li> <li>gpuMatrix.mat4.rotateY(modelview, angle, modelview) \u2014 rotates by angle radians about the y-axis.</li> <li>gpuMatrix.mat4.rotateZ(modelview, angle, modelview) \u2014 rotates by angle radians about the z-axis.</li> <li>gpuMatrix.mat4.translate(modelview, [tx,ty,tz], modelview) \u2014 translates by a distance of tx in the x direction, ty in the y direction, and tz in the z direction.</li> </ul> <p>The normal matrix, which is used to transform normal vectors, is a 3-by-3 matrix. It can be derived from the modelview matrix by taking the upper-left 3-by-3 submatrix of the 4-by-4 modelview matrix, and then taking the inverse of the transpose of that matrix. In wgpu-matrix, that can be done as follows:</p> <pre><code>normalMatrix = mat3.fromMat4(modelview); \nmat3.transpose(normalMatrix,normalMatrix)\nmat3.inverse(normalMatrix,normalMatrix);\n</code></pre> <p>(If the modelview matrix does not include any scaling operations, then taking the inverse and transpose is unnecessary.)</p> <p>There are also functions for multiplying a vector, V, by a matrix, M. For a 4-vector and a 4-by-4 matrix:</p> <pre><code>transformedV = wgpuMatrix.vec4.transformMat4( V, M );\n</code></pre> <p>and similarly for a 3-vector and a 3-by-3 matrix.</p>"},{"location":"cn/c9/s4/#945-\u518d\u6b21\u78c1\u76d8\u4e16\u754c","title":"9.4.5 \u518d\u6b21\u78c1\u76d8\u4e16\u754c","text":"<p>Diskworld Yet Again</p> \u4e2d\u6587\u82f1\u6587 <p>\u7b2c7.2\u8282 \u6db5\u76d6\u4e86\u5728 WebGL \u4e2d\u5b9e\u73b0 OpenGL \u98ce\u683c\u5149\u7167\u548c\u6750\u8d28\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u6f2b\u53cd\u5c04\u3001\u955c\u9762\u53cd\u5c04\u548c\u81ea\u53d1\u5149\u6750\u8d28\u5c5e\u6027\uff0c\u5b9a\u5411\u5149\u548c\u70b9\u5149\u6e90\uff0c\u805a\u5149\u706f\u548c\u5149\u7167\u8870\u51cf\u3002\u8be5\u8282\u6700\u540e\u7684\u201cDiskworld 2\u201d\u793a\u4f8b\u5c55\u793a\u4e86\u6240\u6709\u8fd9\u4e9b\u5c5e\u6027\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f webgpu/diskworld_webgpu.html \u662f\u5c06 Diskworld 2 \u793a\u4f8b\u79fb\u690d\u5230 WebGPU \u7684\u529f\u80fd\u76f8\u540c\u7684\u7248\u672c\u3002WebGPU \u7248\u672c\u7684\u9876\u70b9\u7740\u8272\u5668\u672c\u8d28\u4e0a\u4e0e\u4e0a\u9762\u8ba8\u8bba\u7684 Phong \u5149\u7167\u793a\u4f8b \u4e2d\u7684\u76f8\u540c\u3002\u7247\u6bb5\u7740\u8272\u5668\u672c\u8d28\u4e0a\u4e0e WebGL \u7248\u672c\u76f8\u540c\uff0c\u9664\u4e86\u53d8\u91cf\u548c\u51fd\u6570\u58f0\u660e\u7684\u8bed\u6cd5\u4ee5\u53ca\u4e00\u4e9b\u7c7b\u578b\u7684\u91cd\u547d\u540d\u3002\u7a0b\u5e8f\u7684 JavaScript \u7aef\u4f7f\u7528\u5c42\u6b21\u5efa\u6a21\u6765\u521b\u5efa\u573a\u666f\uff08\u89c1 3.2.3\u5c0f\u8282\uff09\uff0c\u53d8\u6362\u4f7f\u7528 wgpu-matrix \u5e93\u5b9e\u73b0\u3002\u57fa\u672c\u5bf9\u8c61\uff0c\u5982\u5706\u67f1\u4f53\u548c\u7403\u4f53\uff0c\u88ab\u521b\u5efa\u4e3a\u7d22\u5f15\u9762\u96c6\u3002\u6bcf\u4e2a\u5bf9\u8c61\u6709\u4e09\u4e2a\u5173\u8054\u7684\u7f13\u51b2\u533a\uff1a\u4e00\u4e2a\u5305\u542b 3D \u9876\u70b9\u5750\u6807\u7684\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u4e00\u4e2a\u5305\u542b\u6cd5\u5411\u91cf\u7684\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7d22\u5f15\u7f13\u51b2\u533a\u3002\u5f53\u6e32\u67d3\u5bf9\u8c61\u65f6\uff0c\u5176\u7f13\u51b2\u533a\u88ab\u9644\u52a0\u5230\u6e32\u67d3\u7ba1\u7ebf\u3002\u7a0b\u5e8f\u4f7f\u7528\u6df1\u5ea6\u6d4b\u8bd5\uff08\u663e\u7136\uff01\uff09\u548c\u591a\u91cd\u91c7\u6837\u3002\u503c\u5f97\u67e5\u770b\u6e90\u4ee3\u7801\uff0c\u4f46\u6211\u5c06\u4e0d\u8be6\u7ec6\u8ba8\u8bba\u3002\u7136\u800c\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u770b\u770b\u7247\u6bb5\u7740\u8272\u5668\u5982\u4f55\u5b9e\u73b0\u5149\u7167\u65b9\u7a0b\u3002\u5149\u548c\u6750\u8d28\u5c5e\u6027\u4ee5\u53ca\u6cd5\u5411\u91cf\u77e9\u9635\u662f\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684 uniform \u53d8\u91cf\uff1a</p> <pre><code>struct MaterialProperties {\n    diffuseColor : vec4f, // alpha \u5206\u91cf\u6210\u4e3a\u7247\u6bb5\u7684 alpha\n    specularColor : vec3f,\n    emissiveColor : vec3f,\n    specularExponent : f32\n}\n\nstruct LightProperties {\n    position : vec4f,\n    color : vec3f,\n    spotDirection: vec3f,  // \u6ce8\u610f\uff1a\u53ea\u6709\u70b9\u5149\u6e90\u53ef\u4ee5\u662f\u805a\u5149\u706f\u3002\n    spotCosineCutoff: f32, // \u5982\u679c &lt;= 0\uff0c\u5219\u4e0d\u662f\u805a\u5149\u706f\u3002\n    spotExponent: f32,\n    attenuation: f32,   // \u7ebf\u6027\u8870\u51cf\u56e0\u5b50\uff0c&gt;= 0\uff08\u4ec5\u9650\u70b9\u5149\u6e90\uff09\u3002\n    enabled : f32  // 0.0 \u6216 1.0 \u8868\u793a false/true\n}\n\n@group(1) @binding(0) var&lt;uniform&gt; material : MaterialProperties;\n@group(1) @binding(1) var&lt;uniform&gt; lights : array&lt;LightProperties,4&gt;;\n@group(1) @binding(2) var&lt;uniform&gt; normalMatrix : mat3x3f;\n</code></pre> <p>\u6240\u6709\u8fd9\u4e9b\u503c\u90fd\u5728\u540c\u4e00\u4e2a uniform \u7f13\u51b2\u533a\u4e2d\u3002\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e uniform \u7684\u5bf9\u9f50\u8981\u6c42\uff08\u89c1 9.3.1\u5c0f\u8282\uff09\uff0c\u5149\u5c5e\u6027\u5728\u7f13\u51b2\u533a\u4e2d\u7684\u504f\u79fb\u662f 256 \u5b57\u8282\uff0c\u6cd5\u5411\u91cf\u77e9\u9635\u662f 512 \u5b57\u8282\u3002\uff08\u4f46\u8fd9\u662f JavaScript \u7aef\u7684\u4fe1\u606f\uff09\u3002</p> <p>\u5149\u7167\u65b9\u7a0b\u7531\u4ee5\u4e0b\u51fd\u6570\u5b9e\u73b0\uff0c\u8be5\u51fd\u6570\u7531\u7247\u6bb5\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u4e3a\u6bcf\u4e2a\u542f\u7528\u7684\u5149\u6e90\u8c03\u7528\uff1a</p> <pre><code>fn lightingEquation( light: LightProperties, material: MaterialProperties,\n                    eyeCoords: vec3f, N: vec3f, V: vec3f ) -&gt; vec3f {\n    // N \u662f\u6cd5\u5411\u91cf\uff0cV \u662f\u6307\u5411\u89c2\u5bdf\u8005\u7684\u65b9\u5411\uff1b\u5b83\u4eec\u90fd\u662f\u5355\u4f4d\u5411\u91cf\u3002\n    var L : vec3f;  // \u6307\u5411\u5149\u6e90\u7684\u5355\u4f4d\u5411\u91cf\n    var R : vec3f;  // \u53cd\u5c04\u5149\u65b9\u5411\uff1b\u901a\u8fc7 N \u53cd\u5c04 -L\n    var spotFactor = 1.0;  // \u8003\u8651\u805a\u5149\u706f\u7684\u4e58\u6570\n    var attenuationFactor = 1.0; // \u8003\u8651\u5149\u8870\u51cf\u7684\u4e58\u6570\n    if ( light.position.w == 0.0 ) { // \u5b9a\u5411\u5149\u3002\n        L = normalize( light.position.xyz );\n    }\n    else { // \u70b9\u5149\u6e90\u3002\n        // \u53ea\u6709\u70b9\u5149\u6e90\u53ef\u80fd\u6709\u805a\u5149\u706f\u548c\u8870\u51cf\u3002\n        L = normalize( light.position.xyz/light.position.w - eyeCoords );\n        if (light.spotCosineCutoff &gt; 0.0) { // \u5149\u6e90\u662f\u805a\u5149\u706f\u3002\n            var D = -normalize(light.spotDirection);\n            var spotCosine = dot(D,L);\n            if (spotCosine &gt;= light.spotCosineCutoff) { \n                spotFactor = pow(spotCosine, light.spotExponent);\n            }\n            else { // \u8be5\u70b9\u5728\u805a\u5149\u706f\u7684\u5149\u9525\u4e4b\u5916\u3002\n                spotFactor = 0.0; // \u5149\u4e0d\u4f1a\u5bf9\u8be5\u70b9\u6dfb\u52a0\u989c\u8272\u3002\n            }\n        }\n        if (light.attenuation &gt; 0.0) {\n            var dist = distance(eyeCoords, light.position.xyz/light.position.w);\n            attenuationFactor = 1.0 / (1.0 + dist*light.attenuation);\n        }\n    }\n    if (dot(L,N) &lt;= 0.0) { // \u5149\u6ca1\u6709\u7167\u4eae\u8fd9\u4e00\u9762\u3002\n        return vec3f(0.0);\n    }\n    var reflection = dot(L,N) * light.color * material.diffuseColor.rgb;\n    R = -reflect(L,N);\n    if (dot(R,V) &gt; 0.0) { // \u6dfb\u52a0\u955c\u9762\u53cd\u5c04\u3002\n        let factor = pow(dot(R,V), material.specularExponent);\n        reflection += factor * material.specularColor * light.color;\n    }\n    return spotFactor*attenuationFactor*reflection;\n}\n</code></pre> <p>\u8fd4\u56de\u503c\u8868\u793a\u5149\u6e90\u5bf9\u7247\u6bb5\u989c\u8272\u7684\u8d21\u732e\u3002\u53ef\u80fd\u5149\u6e90\u5b9e\u9645\u4e0a\u7167\u5c04\u5728\u6b63\u5728\u6e32\u67d3\u7684\u56fe\u5143\u7684\u53e6\u4e00\u4fa7\uff08\u201cdot(L,N) &lt;= 0.0\u201d\uff09\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e0d\u4f1a\u5bf9\u989c\u8272\u505a\u51fa\u8d21\u732e\u3002\u5426\u5219\uff0c\u8d21\u732e\u88ab\u8ba1\u7b97\u4e3a\u6f2b\u53cd\u5c04\u548c\u955c\u9762\u53cd\u5c04\u7684\u603b\u548c\uff0c\u4e58\u4ee5\u8003\u8651\u805a\u5149\u706f\u548c\u5149\u8870\u51cf\u7684\u56e0\u5b50\u3002\u5982\u679c\u5149\u4e0d\u662f\u805a\u5149\u706f\uff0c\u76f8\u5e94\u7684\u56e0\u5b50\u662f 1.0\uff0c\u5bf9\u8fd4\u56de\u503c\u6ca1\u6709\u5f71\u54cd\u3002\u5bf9\u4e8e\u805a\u5149\u706f\uff0c\u56e0\u5b50\u53d6\u51b3\u4e8e\u7247\u6bb5\u5728\u805a\u5149\u706f\u9525\u4f53\u5185\u7684\u54ea\u4e2a\u4f4d\u7f6e\u3002\u8fd9\u91cc\u4f7f\u7528\u7684\u5149\u8870\u51cf\u56e0\u5b50\u79f0\u4e3a\u201c\u7ebf\u6027\u8870\u51cf\u201d\u3002\u5b83\u5728\u7269\u7406\u4e0a\u4e0d\u771f\u5b9e\uff0c\u4f46\u7ecf\u5e38\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u6bd4\u7269\u7406\u771f\u5b9e\u7684\u8870\u51cf\u63d0\u4f9b\u66f4\u597d\u7684\u89c6\u89c9\u6548\u679c\u3002\u6211\u9f13\u52b1\u4f60\u9605\u8bfb\u4ee3\u7801\uff0c\u4f5c\u4e3a\u4e00\u4e2a WGSL \u7f16\u7a0b\u7684\u4f8b\u5b50\uff0c\u5e76\u5728\u4f60\u5bf9\u5149\u7167\u6a21\u578b\u6709\u7591\u95ee\u65f6\u53c2\u8003 \u7b2c7.2\u8282\u3002</p> <p>Section 7.2 covered the implementation of OpenGL-style lighting and materials in WebGL, including diffuse, specular, and emissive material properties, directional and point lights, spotlights, and light attenuation. The \"Diskworld 2\" example at the end of that section illustrated all of these properties.</p> <p>The sample program webgpu/diskworld_webgpu.html is a functionally identical port of the Diskworld 2 example to WebGPU. The vertex shader in the WebGPU version is essentially the same as that in the Phong lighting example that was discussed above. The fragment shader is essentially the same as the WebGL version, except for the syntax of variable and function declarations and some renaming of types. The JavaScript side of the program uses hierarchical modeling to create the scene (Subsection 3.2.3), with transformations implemented using the wgpu-matrix library. The basic objects, such as cylinders and spheres, are created as indexed face sets. Each object has three associated buffers: a vertex buffer containing the 3D vertex coordinates, a vertex buffer containing the normal vectors, and an index buffer. When an object is rendered, its buffers are attached to the render pipeline. The program uses the depth test (obviously!) and multisampling. It is worth looking at the source code, but I will not discuss it in detail. However, we will look briefly at how the fragment shader implements the lighting equation. The light and material properties and the normal matrix are uniform variables in the fragment shader:</p> <pre><code>struct MaterialProperties {\n    diffuseColor : vec4f, // alpha component becomes the alpha for the fragment\n    specularColor : vec3f,\n    emissiveColor : vec3f,\n    specularExponent : f32\n}\n\nstruct LightProperties {\n    position : vec4f,\n    color : vec3f,\n    spotDirection: vec3f,  // Note: only a point light can be a spotlight.\n    spotCosineCutoff: f32, // If &lt;= 0, not a spotlight.\n    spotExponent: f32,\n    attenuation: f32,   // Linear attenuation factor, &gt;= 0 (point lights only).\n    enabled : f32  // 0.0 or 1.0 for false/true\n}\n\n@group(1) @binding(0) var&lt;uniform&gt; material : MaterialProperties;\n@group(1) @binding(1) var&lt;uniform&gt; lights : array&lt;LightProperties,4&gt;;\n@group(1) @binding(2) var&lt;uniform&gt; normalMatrix : mat3x3f;\n</code></pre> <p>All of these values are in the same uniform buffer. Note that because of alignment requirements for uniforms (Subsection 9.3.1), the light properties are at offset 256 bytes in the buffer, and the normal matrix is at offset 512. (But that's information for the JavaScript side.)</p> <p>The lighting equation is implemented by the following function, which is called by the fragment shader entry point function for each enabled light:</p> <pre><code>fn lightingEquation( light: LightProperties, material: MaterialProperties,\n                            eyeCoords: vec3f, N: vec3f, V: vec3f ) -&gt; vec3f {\n    // N is normal vector, V is direction to viewer; both are unit vectors.\n    var L : vec3f;  // unit vector pointing towards the light\n    var R : vec3f;  // reflected light direction; reflection of -L through N\n    var spotFactor = 1.0;  // multiplier to account for spotlight\n    var attenuationFactor = 1.0; // multiplier to account for light attenuation\n    if ( light.position.w == 0.0 ) { // Directional light.\n        L = normalize( light.position.xyz );\n    }\n    else { // Point light.\n        // Spotlights and attenuation are possible only for point lights.\n        L = normalize( light.position.xyz/light.position.w - eyeCoords );\n        if (light.spotCosineCutoff &gt; 0.0) { // The light is a spotlight.\n            var D = -normalize(light.spotDirection);\n            var spotCosine = dot(D,L);\n            if (spotCosine &gt;= light.spotCosineCutoff) { \n                spotFactor = pow(spotCosine, light.spotExponent);\n            }\n            else { // The point is outside the cone of light from the spotlight.\n                spotFactor = 0.0; // The light will add no color to the point.\n            }\n        }\n        if (light.attenuation &gt; 0.0) {\n            var dist = distance(eyeCoords, light.position.xyz/light.position.w);\n            attenuationFactor = 1.0 / (1.0 + dist*light.attenuation);\n        }\n    }\n    if (dot(L,N) &lt;= 0.0) { // Light does not illuminate this side.\n        return vec3f(0.0);\n    }\n    var reflection = dot(L,N) * light.color * material.diffuseColor.rgb;\n    R = -reflect(L,N);\n    if (dot(R,V) &gt; 0.0) { // Add in specular reflection.\n        let factor = pow(dot(R,V), material.specularExponent);\n        reflection += factor * material.specularColor * light.color;\n    }\n    return spotFactor*attenuationFactor*reflection;\n}\n</code></pre> <p>The return value represents the contribution of the light to the color of the fragment. It is possible that the light is actually shining on the other side of the primitive that is being rendered (\"dot(L,N) &lt;= 0.0\"), in which case there is no contribution to the color. Otherwise, the contribution is computed as the sum of the diffuse and specular reflection, multiplied by factors that account for spotlights and light attenuation. If the light is not a spotlight the corresponding factor is 1.0 and has no effect on the return value. For a spotlight, the factor depends on where in the cone of the spotlight the fragment is located. The light attenuation factor used here is called \"linear attenuation.\" It is not physically realistic but is often used because it can give better visual results than physically realistic attenuation. I encourage you to read the code, as an example of WGSL programming, and to consult Section 7.2 if you have questions about the lighting model.</p>"},{"location":"cn/c9/s5/","title":"9.5 \u7eb9\u7406","text":"<p>Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u7eb9\u7406\u672c\u8d28\u4e0a\u662f\u56fe\u5143\u4e0a\u4ece\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u53d8\u5316\u7684\u67d0\u4e9b\u5c5e\u6027\u3002\u6700\u5e38\u89c1\u7684 \u2014\u2014 \u6216\u8005\u81f3\u5c11\u662f\u6700\u53ef\u89c1\u7684 \u2014\u2014 \u4e00\u79cd\u7eb9\u7406\u662f\u989c\u8272\u4ece\u70b9\u5230\u70b9\u7684\u53d8\u5316\uff0c\u6700\u5e38\u89c1\u7684\u989c\u8272\u7eb9\u7406\u662f\u56fe\u50cf\u7eb9\u7406\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u7eb9\u7406\uff0c\u5982\u53cd\u5c04\u7387\u6216\u6cd5\u5411\u91cf\u7684\u53d8\u5316\uff0c\u4e5f\u662f\u53ef\u80fd\u7684\u3002</p> <p>\u56fe\u50cf\u7eb9\u7406\u5728 OpenGL \u4e2d\u7684 \u7b2c4.3\u8282 \u4ee5\u53ca WebGL \u4e2d\u7684 \u7b2c6.4\u8282 \u548c \u7b2c7.3\u8282 \u6709\u4ecb\u7ecd\u3002\u5927\u591a\u6570\u57fa\u672c\u601d\u60f3\u90fd\u9002\u7528\u4e8e WebGPU\uff0c\u5c3d\u7ba1\u7f16\u7801\u7ec6\u8282\u4e0d\u540c\u3002</p> <p>WebGPU \u62e5\u6709\u4e00\u7ef4\u3001\u4e8c\u7ef4\u548c\u4e09\u7ef4\u56fe\u50cf\u7eb9\u7406\u4ee5\u53ca\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\uff08\u89c1 5.3.4\u5c0f\u8282\uff09\u3002\u5728\u672c\u8282\u7684\u5927\u90e8\u5206\u5185\u5bb9\u4e2d\uff0c\u6211\u5c06\u96c6\u4e2d\u8ba8\u8bba\u4e8c\u7ef4\u56fe\u50cf\u7eb9\u7406\u3002</p> <p>A texture is simply some property that varies from point to point on a primitive. The most common\u2014or at least the most visible\u2014kind of texture is a variation in color from point to point, and the most common type of color texture is an image texture. Other kinds of texture, such as variations in reflectivity or normal vector, are also possible.</p> <p>Image textures were covered in Section 4.3 for OpenGL and in Section 6.4 and Section 7.3 for WebGL. Most of the basic ideas carry over to WebGPU, even though the coding details are different.</p> <p>WebGPU has one-, two-, and three-dimensional image textures plus cubemap textures (Subsection 5.3.4). I will concentrate on two-dimensional image textures for most of this section.</p>"},{"location":"cn/c9/s5/#951-\u7eb9\u7406\u5750\u6807","title":"9.5.1 \u7eb9\u7406\u5750\u6807","text":"<p>Texture Coordinates</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u56fe\u50cf\u7eb9\u7406\u5e94\u7528\u4e8e\u8868\u9762\u65f6\uff0c\u901a\u8fc7\u57fa\u4e8e\u8be5\u70b9\u7684\u7eb9\u7406\u5750\u6807\u5bf9\u7eb9\u7406\u8fdb\u884c\u91c7\u6837\uff0c\u4ee5\u83b7\u53d6\u8be5\u70b9\u7684\u7eb9\u7406\u989c\u8272\u3002\u91c7\u6837\u662f\u5728 WebGPU \u7a0b\u5e8f\u7684 GPU \u7aef\u4f7f\u7528\u7c7b\u578b\u4e3a sampler \u7684 WGSL \u53d8\u91cf\u5b8c\u6210\u7684\u3002</p> <p>2D \u56fe\u50cf\u7eb9\u7406\u5e26\u6709\u6807\u51c6\u7684 (u,v) \u5750\u6807\u7cfb\u3002\u5750\u6807\u5728\u56fe\u50cf\u4e0a\u7684\u8303\u56f4\u662f 0 \u5230 1\u3002\u7eb9\u7406\u5750\u6807\u5728 0 \u5230 1 \u8303\u56f4\u4e4b\u5916\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u7528\u4e8e\u91c7\u6837\u7eb9\u7406\u7684\u91c7\u6837\u5668\u3002\u5bf9\u4e8e 1D \u7eb9\u7406\uff0c\u53ea\u4f7f\u7528 u \u5750\u6807\uff0c\u5bf9\u4e8e 3D \u7eb9\u7406\uff0c\u5750\u6807\u7cfb\u88ab\u79f0\u4e3a (u,v,w)\u3002</p> <p>\u5728\u5c06 2D \u7eb9\u7406\u56fe\u50cf\u5e94\u7528\u4e8e\u8868\u9762\u65f6\uff0c\u8868\u9762\u4e0a\u67d0\u70b9\u7684\u4e24\u4e2a\u7eb9\u7406\u5750\u6807\u5c06\u8be5\u8868\u9762\u70b9\u6620\u5c04\u5230 (u,v) \u5750\u6807\u7cfb\u4e2d\u7684\u70b9\u3002\u91c7\u6837\u8fc7\u7a0b\u4f7f\u7528 (u,v) \u5750\u6807\u4ece\u56fe\u50cf\u4e2d\u67e5\u627e\u989c\u8272\u3002\u67e5\u627e\u8fc7\u7a0b\u53ef\u80fd\u5f88\u590d\u6742\uff0c\u88ab\u79f0\u4e3a\u201c\u8fc7\u6ee4\u201d\uff0c\u53ef\u80fd\u6d89\u53ca\u67e5\u770b\u56fe\u50cf\u53ca\u5176 mipmaps \u4e2d\u7684\u591a\u4e2a texels \u7684\u989c\u8272\uff08\u8bb0\u4f4f\uff0c\u7eb9\u7406\u4e2d\u7684\u50cf\u7d20\u901a\u5e38\u88ab\u79f0\u4e3a texels\uff09\u3002</p> <p>\u6309\u7167\u60ef\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7eb9\u7406\u5750\u6807 (0,0) \u6307\u5411\u56fe\u50cf\u7684\u5de6\u4e0a\u89d2\uff0cu \u4ece\u53f3\u5411\u5de6\u589e\u52a0\uff0cv \u4ece\u4e0a\u5230\u4e0b\u589e\u52a0\u3002\u8fd9\u53ea\u662f\u4e00\u79cd\u60ef\u4f8b\uff0c\u4f46\u5b83\u5bf9\u5e94\u4e8e\u7f51\u7edc\u4e0a\u56fe\u50cf\u6570\u636e\u7684\u5b58\u50a8\u65b9\u5f0f\uff1a\u56fe\u50cf\u5de6\u4e0a\u89d2\u50cf\u7d20\u7684\u6570\u636e\u9996\u5148\u88ab\u5b58\u50a8\uff0c\u6570\u636e\u6309\u884c\u5b58\u50a8\uff0c\u4ece\u56fe\u50cf\u9876\u90e8\u5230\u5e95\u90e8\u3002</p> <p>\u6ce8\u610f\uff0cOpenGL \u4e2d\u7684\u7eb9\u7406\u5750\u6807\u7cfb\u7edf\u4f7f\u7528 r, s \u548c t \u4f5c\u4e3a\u5750\u6807\u540d\u79f0\uff0c\u800c\u4e0d\u662f u, v \u548c w\u3002OpenGL \u4e2d\u7684\u7ea6\u5b9a\u662f t \u8f74\u6307\u5411\u4e0a\u65b9\uff0c\u7eb9\u7406\u5750\u6807 (0,0) \u6307\u5411\u56fe\u50cf\u7684\u5de6\u4e0b\u89d2\u3002\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8bf7\u53c2\u89c1 4.3.1\u5c0f\u8282 \u4ee5\u66f4\u6df1\u5165\u5730\u8ba8\u8bba\u7eb9\u7406\u5750\u6807\u53ca\u5176\u4f7f\u7528\u65b9\u6cd5\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f webgpu/first_texture.html \u662f\u6211\u4eec\u5728 WebGPU \u4e2d\u4f7f\u7528\u7eb9\u7406\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\u3002\u8fd9\u4e2a\u7b80\u5355\u7a0b\u5e8f\u53ea\u662f\u5728\u4e00\u4e2a\u6b63\u65b9\u5f62\u4e0a\u7ed8\u5236\u4e86\u4e09\u79cd\u4e0d\u540c\u7684\u7eb9\u7406\uff1a</p> <p></p> <p>\u6b63\u65b9\u5f62\u7684\u7eb9\u7406\u5750\u6807\u4ece\u5de6\u4e0a\u89d2\u7684 (0,0) \u5230\u53f3\u4e0b\u89d2\u7684 (1,1)\u3002\u5728\u56fe\u7247\u4e2d\u5de6\u8fb9\u7684\u6b63\u65b9\u5f62\u4e0a\uff0c\u67d0\u70b9\u7684\u7eb9\u7406\u5750\u6807\u88ab\u7528\u4f5c\u8be5\u70b9\u989c\u8272\u7684\u7ea2\u8272\u548c\u7eff\u8272\u5206\u91cf\u3002\uff08\u6ca1\u6709\u7eb9\u7406\u56fe\u50cf\u3002\u8fd9\u662f\u4e00\u4e2a\u8fc7\u7a0b\u7eb9\u7406\u7684\u5fae\u4e0d\u8db3\u9053\u7684\u4f8b\u5b50\uff08\u89c1 7.3.3\u5c0f\u8282\uff09\u3002\u53f3\u8fb9\u7684\u6b63\u65b9\u5f62\u4f7f\u7528\u56fe\u50cf\u7eb9\u7406\uff0c\u5176\u4e2d\u201c\u8499\u5a1c\u4e3d\u838e\u201d\u56fe\u50cf\u6765\u81ea\u6587\u4ef6\u3002\u4e2d\u95f4\u7684\u6b63\u65b9\u5f62\u4e5f\u4f7f\u7528\u56fe\u50cf\u7eb9\u7406\uff0c\u4f46\u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2d\uff0c\u56fe\u50cf\u7684\u989c\u8272\u6765\u81ea\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u7684\u50cf\u7d20\u989c\u8272\u6570\u7ec4\u3002\u8be5\u56fe\u50cf\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u56db\u50cf\u7d20\u56fe\u50cf\uff0c\u6709\u4e24\u884c\u50cf\u7d20\u548c\u4e24\u5217\u50cf\u7d20\u3002\u539f\u59cb\u7684\u7eb9\u7406\u5750\u6807\u5728\u6b63\u65b9\u5f62\u4e0a\u5728\u91c7\u6837\u7eb9\u7406\u4e4b\u524d\u88ab\u4e58\u4ee5 5\uff0c\u4ee5\u4fbf\u6211\u4eec\u5728\u6b63\u65b9\u5f62\u4e0a\u770b\u5230 5 \u4efd\u7eb9\u7406\u7684\u526f\u672c\u3002\uff08\u8fd9\u662f\u4e00\u4e2a\u7eb9\u7406\u53d8\u6362\u7684\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff08\u89c1 4.3.4\u5c0f\u8282)\u3002</p> <p>\u5c3d\u7ba1\u6211\u4eec\u5c06\u5728\u672c\u8282\u7684\u5927\u90e8\u5206\u65f6\u95f4\u8ba8\u8bba\u8fd9\u4e2a\u57fa\u672c\u793a\u4f8b\uff0c\u60a8\u4e5f\u53ef\u4ee5\u67e5\u770b webgpu/textured_objects.html\uff0c\u5b83\u5c06\u7eb9\u7406\u5e94\u7528\u4e8e\u4e09\u7ef4\u5f62\u72b6\uff0c\u4ee5\u53ca webgpu/texture_from_canvas.html\uff0c\u5b83\u4ece\u540c\u4e00\u9875\u9762\u4e0a\u7684\u753b\u5e03\u83b7\u53d6\u7eb9\u7406\u7684\u56fe\u50cf\u3002</p> <p>\u91c7\u6837\u662f\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u5b8c\u6210\u7684\u3002\u7528\u4e8e\u91c7\u6837\u7684\u7eb9\u7406\u5750\u6807\u53ef\u80fd\u6765\u81ea\u4efb\u4f55\u5730\u65b9\u3002\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7eb9\u7406\u5750\u6807\u4f5c\u4e3a\u9876\u70b9\u5c5e\u6027\u8f93\u5165\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u7136\u540e\uff0c\u63d2\u503c\u7684\u7eb9\u7406\u5750\u6807\u88ab\u4f20\u9012\u5230\u7247\u6bb5\u7740\u8272\u5668\uff0c\u5728\u90a3\u91cc\u5b83\u4eec\u88ab\u7528\u6765\u91c7\u6837\u7eb9\u7406\u3002</p> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6b63\u65b9\u5f62\u88ab\u7ed8\u5236\u4e3a\u5177\u6709\u56db\u4e2a\u9876\u70b9\u7684\u4e09\u89d2\u5f62\u6761\u5e26\u3002\u6709\u4e24\u4e2a\u9876\u70b9\u5c5e\u6027\uff0c\u5206\u522b\u7ed9\u51fa\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\u548c\u7eb9\u7406\u5750\u6807\u3002\u8fd9\u4e24\u4e2a\u5c5e\u6027\u4ea4\u9519\u5b58\u50a8\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u9876\u70b9\u7f13\u51b2\u533a\u4e2d\uff08\u89c1 9.1.6\u5c0f\u8282\uff09\u3002\u6570\u636e\u6765\u81ea\u8fd9\u4e2a\u6570\u7ec4\uff1a</p> <pre><code>const vertexData = new Float32Array([\n    /* \u5750\u6807 */     /* \u7eb9\u7406\u5750\u6807 */\n    -0.8, -0.8,       0, 1,      // \u5de6\u4e0b\u89d2\u7684\u6570\u636e\n    0.8, -0.8,       1, 1,      // \u53f3\u4e0b\u89d2\u7684\u6570\u636e\n    -0.8,  0.8,       0, 0,      // \u5de6\u4e0a\u89d2\u7684\u6570\u636e\n    0.8,  0.8,       1, 0,      // \u53f3\u4e0a\u89d2\u7684\u6570\u636e\n]);\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5de6\u4e0a\u89d2\u7684\u7eb9\u7406\u5750\u6807\u662f (0,0)\uff0c\u53f3\u4e0b\u89d2\u662f (1,1)\u3002\u60a8\u5e94\u8be5\u68c0\u67e5\u8fd9\u4e0e\u63d2\u56fe\u4e2d\u7b2c\u4e00\u4e2a\u6b63\u65b9\u5f62\u4e0a\u7684\u989c\u8272\u5982\u4f55\u5bf9\u5e94\u3002\u5f53\u7528\u4e8e\u5c06\u56fe\u50cf\u7eb9\u7406\u6620\u5c04\u5230\u6b63\u65b9\u5f62\u4e0a\uff08\u6ca1\u6709\u7eb9\u7406\u53d8\u6362\uff09\u65f6\uff0c\u6b63\u65b9\u5f62\u5c06\u663e\u793a\u56fe\u50cf\u7684\u4e00\u4e2a\u5b8c\u6574\u526f\u672c\uff0c\u4ee5\u901a\u5e38\u7684\u65b9\u5411\u663e\u793a\u3002\u5982\u679c OpenGL \u7eb9\u7406\u5750\u6807\u7684\u7ea6\u5b9a\u7528\u4e8e\u6b63\u65b9\u5f62\u4e0a\uff0c\u7eb9\u7406\u5750\u6807 (0,0) \u5c06\u88ab\u5206\u914d\u7ed9\u6b63\u65b9\u5f62\u7684\u5de6\u4e0b\u89d2\uff0c\u56fe\u50cf\u5c06\u51fa\u73b0\u5012\u7f6e\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u5c06\u56fe\u50cf\u6570\u636e\u52a0\u8f7d\u5230\u7eb9\u7406\u4e4b\u524d\uff0cOpenGL \u4e2d\u7684\u56fe\u50cf\u901a\u5e38\u4f1a\u5782\u76f4\u7ffb\u8f6c\u3002\u89c1 6.4.2\u5c0f\u8282 \u7684\u672b\u5c3e\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u5e26\u6709\u7eb9\u7406\u5750\u6807\u7684\u51e0\u4f55\u6a21\u578b\uff0c\u5b83\u4eec\u5f88\u53ef\u80fd\u662f\u4e3a OpenGL \u8bbe\u8ba1\u7684\u7eb9\u7406\u5750\u6807\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u60a8\u9700\u8981\u7ffb\u8f6c\u60a8\u7684\u56fe\u50cf\u4ee5\u6b63\u786e\u5730\u5e94\u7528\u5230\u6a21\u578b\u4e0a\u3002\u4f8b\u5982\uff0c\u5728 textured objects \u793a\u4f8b\u4e2d\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>When an image texture is applied to a surface, the texture color for a point is obtained by sampling the texture, based on texture coordinates for that point. Sampling is done on the GPU side of a WebGPU program, using a WGSL variable of type sampler.</p> <p>A 2D image texture comes with a standard (u,v) coordinate system. The coordinates range from 0 to 1 on the image. What happens for texture coordinates outside the range 0 to 1 depends on the sampler that is used to sample the texture. For a 1D texture, only the u coordinate is used, and for a 3D texture, the coordinate system is referred to as (u,v,w).</p> <p>When applying a 2D texture image to a surface, the two texture coordinates for a point on the surface map that surface point to a point in the (u,v) coordinate system. The sampling process uses the (u,v) coordinates to look up a color from the image. The look-up process can be nontrivial. It is referred to as \"filtering\" and can involve looking at the colors of multiple texels in the image and its mipmaps. (Remember that pixels in a texture are often referred to as texels.)</p> <p>By convention, we can take texture coordinates (0,0) to refer to the top-left corner of the image, with u increasing from right to left and v increasing from top to bottom. This is really just a convention, but it corresponds to the way that data for images on the web is usually stored: The data for the top-left pixel is stored first, and the data is stored row-by-row, from the top of the image to the bottom.</p> <p>Note that the texture coordinate system in OpenGL uses r, s, and t as the coordinate names instead of u, v, and w. The convention in OpenGL is that the t-axis points upward, with texture coordinates (0,0) referring to the bottom-left corner of the image. With that in mind, see Subsection 4.3.1 for a more in-depth discussion of texture coordinates and how they are used.</p> <p>The sample program webgpu/first_texture.html is our first example of using textures in WebGPU. This simple program just draws a square with three different textures:</p> <p></p> <p>Texture coordinates for the square range from (0,0) at the top left corner of the square to (1,1) at the bottom right corner. For the square on the left in the picture, the texture coordinates for a point on the square are used as the red and green components of the color for that point. (There is no texture image. This is a trivial example of a procedural texture (Subsection 7.3.3).) The square on the right uses an image texture, where the \"Mona Lisa\" image comes from a file. The middle square also uses an image texture, but in this case the colors for the image come from an array of pixel colors that is part of the program. The image is a tiny four-pixel image, with two rows of pixels and two columns. The original texture coordinates on the square are multiplied by 5 before sampling the texture, so that we see 5 copies of the texture across and down the square. (This is a very simple example of a texture transformation (Subsection 4.3.4).)</p> <p>Although we will spend much of this section on this basic example, you can also look at webgpu/textured_objects.html, which applies textures to three-dimensional shapes, and webgpu/texture_from_canvas.html, which takes the image for a texture from a canvas on the same page.</p> <p>Sampling is done in the fragment shader. The texture coordinates that are used for sampling could come from anywhere. But most often, texture coordinates are input to the shader program as a vertex attribute. Then, interpolated texture coordinates are passed to the fragment shader, where they are used to sample the texture.</p> <p>In the sample program, the square is drawn as a triangle-strip with four vertices. There are two vertex attributes, giving the coordinates and the texture coordinates for each vertex. The two attributes are stored interleaved in a single vertex buffer (see Subsection 9.1.6). The data comes from this array:</p> <pre><code>const vertexData = new Float32Array([\n/* coords */     /* texcoords */\n    -0.8, -0.8,       0, 1,      // data for bottom left corner\n    0.8, -0.8,       1, 1,      // data for bottom right corner\n    -0.8,  0.8,       0, 0,      // data for top left corner\n    0.8,  0.8,       1, 0,      // data for top right corner\n]);\n</code></pre> <p>Note that the texture coordinates for the top left corner are (0,0) and for the bottom right corner are (1,1). You should check out how this corresponds to the colors on the first square in the illustration. When used to map an image texture onto the square (with no texture transformation), the square will show one full copy of the image, in its usual orientation. If the OpenGL convention for texture coordinates were used on the square, texture coordinates (0,0) would be assigned to the bottom left corner of the square, and the image would appear upside-down. To account for this, images in OpenGL are often flipped vertically before loading the image data into a texture. See the end of Subsection 6.4.2. If you use geometric models that come with texture coordinates, they might well be texture coordinates designed for OpenGL, and you might find that you need to flip your images to get them to apply correctly to the model. This is true, for example, in the textured objects example.</p>"},{"location":"cn/c9/s5/#952-\u7eb9\u7406\u548c\u91c7\u6837\u5668","title":"9.5.2 \u7eb9\u7406\u548c\u91c7\u6837\u5668","text":"<p>Textures and Samplers</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 WebGPU \u7a0b\u5e8f\u4e2d\uff0c\u7eb9\u7406\u548c\u91c7\u6837\u5668\u5728 JavaScript \u7aef\u521b\u5efa\uff0c\u5e76\u5728 GPU \u7aef\u4f7f\u7528\uff0c\u5b83\u4eec\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u4f5c\u4e3a\u7740\u8272\u5668\u8d44\u6e90\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u88ab\u58f0\u660e\u4e3a\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u3002\u5b83\u4eec\u7684\u503c\u901a\u8fc7\u7ed1\u5b9a\u7ec4\u4f20\u9012\u7ed9\u7740\u8272\u5668\uff0c\u56e0\u6b64\u91c7\u6837\u5668\u6216\u7eb9\u7406\u53d8\u91cf\u5fc5\u987b\u4f7f\u7528 @group \u548c @binding \u6ce8\u89e3\u8fdb\u884c\u58f0\u660e\u3002\u4f8b\u5982\uff0c\u58f0\u660e\u4e00\u4e2a\u8868\u793a 2D \u56fe\u50cf\u7eb9\u7406\u8d44\u6e90\u7684\u53d8\u91cf tex \u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>@group(0) @binding(0) var tex : texture_2d&lt;f32&gt;;\n</code></pre> <p>\u7c7b\u578b\u540d <code>texture_2d&lt;f32&gt;</code> \u6307\u7684\u662f\u4e00\u4e2a 2D \u7eb9\u7406\uff0c\u5176\u6837\u672c\u7c7b\u578b\u4e3a f32\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u901a\u8fc7\u91c7\u6837\u7eb9\u7406\u8fd4\u56de\u7684\u989c\u8272\u5c06\u662f vec4f \u7c7b\u578b\u3002\u4e00\u4e2a\u5e26\u6709\u6d6e\u70b9\u6837\u672c\u7684 1D \u7eb9\u7406\u5c06\u4f7f\u7528\u7c7b\u578b\u540d <code>texture_1d&lt;f32&gt;</code>\uff0c\u5bf9\u4e8e 3D \u548c\u7acb\u65b9\u4f53\u8d34\u56fe\u4e5f\u6709\u7c7b\u4f3c\u7684\u540d\u79f0\u3002\uff08\u8fd8\u6709\u50cf <code>texture_2d&lt;u32&gt;</code> \u548c <code>texture_1d&lt;i32&gt;</code> \u8fd9\u6837\u7684\u6574\u578b\u7eb9\u7406\uff0c\u4f46\u5b83\u4eec\u4e0d\u4e0e\u91c7\u6837\u5668\u4e00\u8d77\u4f7f\u7528\u3002\u672c\u8282\u540e\u9762\u4f1a\u8ba8\u8bba\u5b83\u4eec\u3002\uff09</p> <p>\u6ce8\u610f\uff0c\u7eb9\u7406\u53d8\u91cf\u662f\u4f7f\u7528\u4e0d\u5e26\u5730\u5740\u7a7a\u95f4\u7684 var \u58f0\u660e\u7684\u3002\uff08\u4e0e uniform \u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u53d8\u91cf\u4f7f\u7528 <code>var&lt;uniform&gt;</code> \u4e0d\u540c\u3002\uff09\u91c7\u6837\u5668\u53d8\u91cf\u4e5f\u662f\u5982\u6b64\u3002\u7eb9\u7406\u548c\u91c7\u6837\u5668\u88ab\u8ba4\u4e3a\u5904\u4e8e\u7279\u6b8a\u7684\u201c\u53e5\u67c4\u201d\u5730\u5740\u7a7a\u95f4\uff0c\u4f46\u8fd9\u4e2a\u540d\u79f0\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u4e0d\u4f7f\u7528\u3002</p> <p>\u91c7\u6837\u5668\u53d8\u91cf\u4f7f\u7528\u7c7b\u578b\u540d sampler \u58f0\u660e\u3002\uff08\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u4e0d\u80fd\u5c06\u201csampler\u201d\u4f5c\u4e3a\u53d8\u91cf\u540d\u3002\uff09\u4f8b\u5982\uff1a</p> <pre><code>@group(0) @binding(1) var samp : sampler;\n</code></pre> <p>\u91c7\u6837\u5668\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u6307\u5b9a\u4e86\u91c7\u6837\u8fc7\u7a0b\u7684\u67d0\u4e9b\u65b9\u9762\uff0c\u4f8b\u5982\u7f29\u5c0f\u6ee4\u6ce2\u5668\u4ee5\u53ca\u662f\u5426\u4f7f\u7528\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u3002</p> <p>\u7eb9\u7406\u548c\u91c7\u6837\u5668\u7684\u503c\u5728 JavaScript \u7aef\u6784\u5efa\u3002\u7740\u8272\u5668\u7a0b\u5e8f\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u7eb9\u7406\u6216\u91c7\u6837\u5668\u7684\u5185\u90e8\u7ed3\u6784\u3002\u5b9e\u9645\u4e0a\uff0c\u5728 WGSL \u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u7684\u552f\u4e00\u64cd\u4f5c\u5c31\u662f\u5c06\u5b83\u4eec\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u6709\u51e0\u4e2a\u5185\u7f6e\u51fd\u6570\u7528\u4e8e\u5904\u7406\u7eb9\u7406\uff08\u5b83\u4eec\u4e2d\u7684\u5927\u591a\u6570\u592a\u6666\u6da9\uff0c\u8fd9\u91cc\u4e0d\u6d89\u53ca\uff09\u3002\u4e3b\u8981\u7684\u91c7\u6837\u7eb9\u7406\u51fd\u6570\u662f textureSample()\u3002\u5b83\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u6d6e\u70b9\u7eb9\u7406\u3001\u4e00\u4e2a\u91c7\u6837\u5668\u548c\u7eb9\u7406\u5750\u6807\u3002\u4f8b\u5982\uff0c</p> <pre><code>let textureColor = textureSample ( tex, samp, texcoords );\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u91c7\u6837 1D\u30012D\u30013D \u548c\u7acb\u65b9\u4f53\u8d34\u56fe\u3002\u5bf9\u4e8e 1D \u7eb9\u7406\uff0ctexcoords \u53c2\u6570\u662f\u4e00\u4e2a f32\uff1b\u5bf9\u4e8e 2D \u7eb9\u7406\uff0c\u5b83\u662f\u4e00\u4e2a vec2f\uff1b\u5bf9\u4e8e 3D \u6216\u7acb\u65b9\u4f53\u8d34\u56fe\uff0c\u5b83\u662f\u4e00\u4e2a vec3f\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u8868\u793a RGBA \u989c\u8272\u7684 vec4f\u3002\u5373\u4f7f\u7eb9\u7406\u5b9e\u9645\u4e0a\u6ca1\u6709\u5b58\u50a8\u56db\u4e2a\u989c\u8272\u5206\u91cf\uff0c\u8fd4\u56de\u503c\u4e5f\u603b\u662f vec4f\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u7eb9\u7406\u53ef\u80fd\u53ea\u5b58\u50a8\u4e00\u4e2a\u989c\u8272\u5206\u91cf\uff1b\u5f53\u5b83\u4f7f\u7528 textureSample() \u8fdb\u884c\u91c7\u6837\u65f6\uff0c\u7eb9\u7406\u4e2d\u7684\u989c\u8272\u503c\u5c06\u7528\u4f5c\u989c\u8272\u7684\u7ea2\u8272\u5206\u91cf\uff0c\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u5c06\u88ab\u8bbe\u7f6e\u4e3a 0.0\uff0calpha \u5206\u91cf\u5c06\u4e3a 1.0\u3002</p> <p>\u73b0\u5728\u60a8\u5e94\u8be5\u80fd\u591f\u7406\u89e3\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u7247\u6bb5\u7740\u8272\u5668\u6e90\u4ee3\u7801\u3002\u5927\u90e8\u5206\u5de5\u4f5c\u5728 JavaScript \u7aef\uff0c\u6240\u4ee5\u7740\u8272\u5668\u4ee3\u7801\u76f8\u5f53\u7b80\u5355\uff1a</p> <pre><code>@group(0) @binding(0) var samp : sampler;  // \u6765\u81ea JavaScript \u7684\u91c7\u6837\u5668\u8d44\u6e90\u3002\n@group(0) @binding(1) var tex : texture_2d&lt;f32&gt;;  // \u56fe\u50cf\u7eb9\u7406\u8d44\u6e90\u3002\n\n@group(0) @binding(2) var&lt;uniform&gt; textureSelect: u32;\n// \u503c\u4e3a 1\u30012 \u6216 3\uff0c\u544a\u8bc9\u7247\u6bb5\u7740\u8272\u5668\u4f7f\u7528\u54ea\u4e2a\u7eb9\u7406\u3002\n\n@fragment\nfn fragmentMain(@location(0) texcoords : vec2f) -&gt; @location(0) vec4f {\nif (textureSelect == 1) { // \u7b80\u5355\u7684\u7a0b\u5e8f\u7eb9\u7406\u3002\n        // \u5c06 texcoords \u4f5c\u4e3a\u7ea2/\u7eff\u989c\u8272\u5206\u91cf\u3002\n    return vec4f( texcoords, 0, 1 );\n}\nelse if (textureSelect == 2) { // \u5bf9\u4e8e\u68cb\u76d8\u683c\u7eb9\u7406\u3002\n        // \u5e94\u7528\u7eb9\u7406\u53d8\u6362\uff1a\u5c06 texcoords \u4e58\u4ee5 5\u3002\n    return textureSample( tex, samp, 5 * texcoords );\n}\nelse { // \u5bf9\u4e8e\u8499\u5a1c\u4e3d\u838e\u7eb9\u7406\uff1b\u6ca1\u6709\u7eb9\u7406\u53d8\u6362\u3002\n    return textureSample( tex, samp, texcoords );\n}\n}\n</code></pre> <p>\u7531\u4e8e\u9009\u9879\u6709\u9650\uff0c\u7eb9\u7406\u548c\u91c7\u6837\u5668\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u4f7f\u7528\u76f8\u5f53\u7b80\u5355\u3002\u5927\u90e8\u5206\u5de5\u4f5c\u5728 JavaScript \u7aef\u3002</p> <p>WebGPU \u4e2d\u91c7\u6837\u5668\u7684\u76ee\u7684\u662f\u4e3a\u91c7\u6837\u8fc7\u7a0b\u8bbe\u7f6e\u9009\u9879\u3002\u91c7\u6837\u5668\u662f\u4f7f\u7528 JavaScript \u51fd\u6570 device.createSampler() \u521b\u5efa\u7684\u3002\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u9ad8\u8d28\u91cf 2D \u7eb9\u7406\u91c7\u6837\u7684\u91c7\u6837\u5668\uff1a</p> <pre><code>let sampler = device.createSampler({\n    addressModeU: \"repeat\",  // \u9ed8\u8ba4\u662f \"clamp-to-edge\"\u3002\n    addressModeV: \"repeat\",  //    \uff08\u53e6\u4e00\u4e2a\u53ef\u80fd\u7684\u503c\u662f \"mirror-repeat\"\u3002\uff09\n    minFilter: \"linear\", \n    magFilter: \"linear\",     // \u8fc7\u6ee4\u5668\u7684\u9ed8\u8ba4\u503c\u662f \"nearest\"\u3002\n    mipmapFilter: \"linear\",\n    maxAnisotropy: 16        // \u9ed8\u8ba4\u503c\u662f 1\uff1b16 \u662f\u6700\u5927\u503c\u3002\n});\n</code></pre> <p>addressModeU \u5c5e\u6027\u6307\u5b9a\u5982\u4f55\u5904\u7406\u8d85\u51fa 0 \u5230 1 \u8303\u56f4\u7684 u \u7eb9\u7406\u5750\u6807\u7684\u503c\uff0caddressModeV \u5bf9 v \u5750\u6807\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u5bf9\u4e8e 3D \u7eb9\u7406\u8fd8\u6709 addressModeW\u3002\uff08\u5728 OpenGL \u548c WebGL \u4e2d\uff0c\u8fd9\u88ab\u79f0\u4e3a\u201c\u5305\u88f9\u201d\uff1b\u89c1 4.3.3\u5c0f\u8282\u3002\u8fd9\u91cc\u7684\u542b\u4e49\u662f\u76f8\u540c\u7684\u3002\uff09</p> <p>\u8fc7\u6ee4\u8003\u8651\u5230\u56fe\u50cf\u5728\u5e94\u7528\u5230\u8868\u9762\u65f6\u901a\u5e38\u9700\u8981\u88ab\u62c9\u4f38\u6216\u7f29\u5c0f\u3002magFilter \u6216\u653e\u5927\u6ee4\u6ce2\u5668\u7528\u4e8e\u62c9\u4f38\u56fe\u50cf\u65f6\u3002minFilter \u6216\u7f29\u5c0f\u6ee4\u6ce2\u5668\u7528\u4e8e\u7f29\u5c0f\u5b83\u65f6\u3002Mipmaps \u662f\u56fe\u50cf\u7684\u7f29\u5c0f\u5c3a\u5bf8\u526f\u672c\uff0c\u53ef\u4ee5\u4f7f\u8fc7\u6ee4\u66f4\u6709\u6548\u3002\u7eb9\u7406\u4e0d\u4f1a\u81ea\u52a8\u5e26\u6709 mipmaps\uff1b\u5982\u679c\u6ca1\u6709 mipmaps\uff0cmipmapFilter \u5c06\u88ab\u5ffd\u7565\u3002\u8fd9\u4e0e OpenGL \u76f8\u4f3c\uff1b\u89c1 4.3.2\u5c0f\u8282\u3002</p> <p>maxAnisotropy \u5c5e\u6027\u63a7\u5236\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\uff0c\u8fd9\u5728 7.5.1\u5c0f\u8282 \u4e2d\u89e3\u91ca\u3002\u9ed8\u8ba4\u503c 1 \u8868\u793a\u4e0d\u4f7f\u7528\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u3002\u66f4\u9ad8\u7684\u503c\u53ef\u4ee5\u4e3a\u8fb9\u7f18\u89c2\u770b\u7684\u7eb9\u7406\u63d0\u4f9b\u66f4\u597d\u7684\u8d28\u91cf\u3002\u6700\u5927\u503c\u53d6\u51b3\u4e8e\u8bbe\u5907\uff0c\u4f46\u6307\u5b9a\u4e00\u4e2a\u5927\u4e8e\u6700\u5927\u503c\u7684\u503c\u662f\u53ef\u4ee5\u7684\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u4f7f\u7528\u6700\u5927\u503c\u3002</p> <p>\u7eb9\u7406\u662f\u5728 JavaScript \u7aef\u4f7f\u7528 <code>device.createTexture()</code> \u521b\u5efa\u7684\u3002\u4f46\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ea\u5206\u914d\u4e86 GPU \u4e0a\u5c06\u4fdd\u5b58\u7eb9\u7406\u6570\u636e\u7684\u5185\u5b58\u3002\u5b9e\u9645\u6570\u636e\u5c06\u9700\u8981\u7a0d\u540e\u5b58\u50a8\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u521b\u5efa GPU \u7f13\u51b2\u533a\u3002\u4ee5\u4e0b\u662f\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u68cb\u76d8\u7eb9\u7406\u7684\u521b\u5efa\u65b9\u5f0f\uff1a</p> <pre><code>let checkerboardTexture = device.createTexture({\n    size: [2,2],  // \u5bbd\u4e24\u50cf\u7d20\uff0c\u9ad8\u4e24\u50cf\u7d20\u3002\n    format: \"rgba8unorm\",  // \u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u4e00\u4e2a 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002\n    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST\n});\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a 2D \u7eb9\u7406\uff0c\u9ed8\u8ba4\u7c7b\u578b\u3002size \u5c5e\u6027\u6307\u5b9a\u4e86\u7eb9\u7406\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u53ef\u4ee5\u662f\u6570\u7ec4\u6216\u5bf9\u8c61\uff0c\u4f8b\u5982 {width: 2, height: 2}\u3002\u8fd9\u91cc\u6307\u5b9a\u7684\u7eb9\u7406\u683c\u5f0f \"rgba8unorm\" \u662f\u56fe\u50cf\u7684\u5e38\u89c1\u683c\u5f0f\uff1a\u6bcf\u4e2a\u50cf\u7d20\u6709\u56db\u4e2a RGBA \u989c\u8272\u5206\u91cf\uff0c\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u6709 8 \u4f4d\u3002\u540d\u79f0\u4e2d\u7684 \"unorm\" \u610f\u5473\u7740 8 \u4f4d\u8868\u793a\u8303\u56f4\u5728 0 \u5230 255 \u7684\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u8fd9\u4e9b\u6574\u6570\u88ab\u7f29\u653e\u5230 0.0 \u5230 1.0 \u7684\u8303\u56f4\u4ee5\u7ed9\u51fa\u6d6e\u70b9\u989c\u8272\u503c\u3002\uff08\u8fd9\u79cd\u7f29\u653e\u88ab\u79f0\u4e3a \"\u5f52\u4e00\u5316\" \u503c\u2014\u2014\u8fd9\u662f\u8fc7\u5ea6\u4f7f\u7528\u7684\u672f\u8bed \"normal\" \u7684\u53e6\u4e00\u79cd\u542b\u4e49\u3002\uff09\u5728 usage \u5c5e\u6027\u4e2d\uff0cTEXTURE_BINDING \u8868\u793a\u7eb9\u7406\u53ef\u4ee5\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u91c7\u6837\uff0cCOPY_DST \u8868\u793a\u6570\u636e\u53ef\u4ee5\u4ece\u5176\u4ed6\u5730\u65b9\u590d\u5236\u5230\u7eb9\u7406\u4e2d\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5c06\u7eb9\u7406\u9644\u52a0\u5230\u7ba1\u7ebf\u4f5c\u4e3a\u6e32\u67d3\u76ee\u6807\u6765\u586b\u5145\u7eb9\u7406\u7684\u6570\u636e\uff1b\u8fd9\u9700\u8981\u4f7f\u7528 GPUTextureUsage.RENDER_ATTACHMENT\u3002\u53e6\u4e00\u79cd\u53ef\u80fd\u7684\u7528\u9014\u662f COPY_SRC\uff0c\u5b83\u5141\u8bb8\u5c06\u7eb9\u7406\u7528\u4f5c\u590d\u5236\u6570\u636e\u7684\u6e90\u3002</p> <p>size\u3001format \u548c usage \u5c5e\u6027\u662f\u5fc5\u9700\u7684\u3002\u8fd8\u6709\u4e00\u4e9b\u53ef\u9009\u5c5e\u6027\u3002mipLevelCount \u5c5e\u6027\u6307\u5b9a\u4f60\u5c06\u4e3a\u7eb9\u7406\u63d0\u4f9b\u7684 mipmap \u6570\u91cf\u3002\u9ed8\u8ba4\u503c 1 \u8868\u793a\u53ea\u63d0\u4f9b\u4e3b\u56fe\u50cf\u3002dimension \u5c5e\u6027\u53ef\u4ee5\u662f \"1d\"\u3001\"2d\" \u6216 \"3d\"\uff0c\u9ed8\u8ba4\u503c\u4e3a \"2d\"\u3002sampleCount \u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u4e3a 1\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a 4 \u6765\u521b\u5efa\u591a\u91cd\u91c7\u6837\u7eb9\u7406\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528 device.createTexture() \u521b\u5efa\u4e86\u7528\u4e8e\u591a\u91cd\u91c7\u6837\u548c\u6df1\u5ea6\u6d4b\u8bd5\u7684\u7279\u6b8a\u7528\u9014\u7eb9\u7406\u3002\u53c2\u89c1\uff0c\u4f8b\u5982\uff0cwebgpu/depth_test.html\u3002\u8fd9\u4e9b\u7eb9\u7406\u88ab\u7528\u4f5c\u6e32\u67d3\u9644\u4ef6\uff0c\u7eb9\u7406\u7684\u6570\u636e\u662f\u901a\u8fc7\u7ed8\u5236\u56fe\u50cf\u521b\u5efa\u7684\u3002</p> <p>\u56fe\u50cf\u7eb9\u7406\u7684\u6570\u636e\u901a\u5e38\u6765\u81ea\u7a0b\u5e8f\u7684 JavaScript \u7aef\u3002\u5f53\u6570\u636e\u6765\u81ea ArrayBuffer \u6216\u7c7b\u578b\u5316\u6570\u7ec4\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 device.queue.writeTexture() \u51fd\u6570\u5c06\u6570\u636e\u590d\u5236\u5230\u7eb9\u7406\u4e2d\u3002\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u5fae\u5c0f\u68cb\u76d8\u7eb9\u7406\u7684\u6570\u636e\u6765\u81ea\u4e00\u4e2a Uint8Array\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u590d\u5236\u5230\u7eb9\u7406\u4e2d\uff1a</p> <pre><code>device.queue.writeTexture(\n    { texture: checkerboardTexture }, // \u8981\u5199\u5165\u6570\u636e\u7684\u7eb9\u7406\u3002\n    textureData,         // \u5305\u542b\u8981\u5199\u5165\u6570\u636e\u7684 Uint8Array\u3002\n    { bytesPerRow: 8 },  // \u6bcf\u4e2a texels \u884c\u7684\u5b57\u8282\u6570\u3002\n    [2,2]   // \u7eb9\u7406\u7684\u5927\u5c0f\uff08\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff09\u3002\n);\n</code></pre> <p>writeTexture() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002\u9664\u4e86 texture \u5c5e\u6027\u5916\uff0c\u8be5\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u6709\u4e00\u4e2a mipLevel \u5c5e\u6027\u4ee5\u5c06\u6570\u636e\u590d\u5236\u5230\u7eb9\u7406\u7684\u67d0\u4e2a mipmap \u4e2d\uff0c\u4ee5\u53ca\u4e00\u4e2a origin \u5c5e\u6027\u4ee5\u5c06\u6570\u636e\u590d\u5236\u5230\u7eb9\u7406\u5185\u7684\u77e9\u5f62\u5b50\u533a\u57df\u4e2d\u3002\uff08origin \u53ef\u4ee5\u4f5c\u4e3a\u6574\u6570\u6570\u7ec4\u7ed9\u51fa\uff1b\u4e0e\u51fd\u6570\u7684\u5927\u5c0f\u53c2\u6570\u4e00\u8d77\uff0c\u5b83\u51b3\u5b9a\u4e86\u77e9\u5f62\u533a\u57df\u3002\uff09\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002bytesPerRow \u5c5e\u6027\u662f\u4e00\u884c texels \u4ece\u4e00\u884c\u7684\u5f00\u59cb\u5230\u4e0b\u4e00\u884c\u7684\u5f00\u59cb\u4e4b\u95f4\u7684\u5b57\u8282\u8ddd\u79bb\u3002\u884c\u4e4b\u95f4\u53ef\u80fd\u6709\u586b\u5145\uff0c\u8fd9\u6709\u65f6\u662f\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42\u6240\u5fc5\u9700\u7684\u3002\u8fd8\u53ef\u4ee5\u6709\u4e00\u4e2a offset \u5c5e\u6027\uff0c\u7ed9\u51fa\u6570\u636e\u6e90\u4e2d\u6570\u636e\u7684\u8d77\u59cb\u70b9\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u53ef\u80fd\u770b\u8d77\u6765\u8fc7\u4e8e\u590d\u6742\uff0c\u4f46\u7eb9\u7406\u548c\u56fe\u50cf\u662f\u590d\u6742\u7684\uff0c\u4e0e\u5b83\u4eec\u4e00\u8d77\u5de5\u4f5c\u7684\u51fd\u6570\u53ef\u4ee5\u6709\u5f88\u591a\u9009\u9879\u3002</p> <p>\u901a\u5e38\uff0c\u7eb9\u7406\u7684\u6570\u636e\u6e90\u662f\u56fe\u50cf\u6587\u4ef6\u3002WebGPU \u4e0d\u80fd\u76f4\u63a5\u4ece\u56fe\u50cf\u6587\u4ef6\u4e2d\u83b7\u53d6\u6570\u636e\uff1b\u60a8\u5fc5\u987b\u83b7\u53d6\u6587\u4ef6\u5e76\u5c06\u6570\u636e\u63d0\u53d6\u5230\u4e00\u4e2a ImageBitmap \u5bf9\u8c61\u4e2d\u3002\u4f7f\u7528\u627f\u8bfa\u7684 fetch API \u5728 \u7b2c A.4 \u8282 \u4e2d\u8ba8\u8bba\u3002\u8fd9\u91cc\uff0c\u4f8b\u5982\uff0c\u662f textured_objects.html \u4e2d\u7528\u4e8e\u4ece\u56fe\u50cf\u6587\u4ef6\u52a0\u8f7d\u7eb9\u7406\u7684\u51fd\u6570\uff1a</p> <pre><code>async function loadTexture(URL) {\n    // \u4f7f\u7528 fetch API \u4ece URL \u83b7\u53d6\u7eb9\u7406\u7684\u6807\u51c6\u65b9\u6cd5\u3002\n    let response = await fetch(URL);\n    let blob = await response.blob();  // \u5c06\u56fe\u50cf\u6570\u636e\u4f5c\u4e3a \"blob\" \u83b7\u53d6\u3002\n    let imageBitmap = await createImageBitmap(blob);\n    let texture = device.createTexture({\n        size: [imageBitmap.width, imageBitmap.height],\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST |\n                GPUTextureUsage.RENDER_ATTACHMENT\n    });\n    device.queue.copyExternalImageToTexture(\n    { source: imageBitmap, flipY: true },\n    { texture: texture },\n    [imageBitmap.width, imageBitmap.height]\n    );\n    return texture;\n}\n</code></pre> <p>\u7eb9\u7406\u7684 usage \u5c5e\u6027\u662f copyExternalmageToTexture() \u6240\u9700\u7684\u3002flipY \u5c5e\u6027\u7684\u4f7f\u7528\u662f\u56e0\u4e3a\u7a0b\u5e8f\u5728\u5176\u663e\u793a\u7684\u5bf9\u8c61\u4e0a\u4f7f\u7528 OpenGL \u98ce\u683c\u7684\u7eb9\u7406\u5750\u6807\u3002source \u5c5e\u6027\u4e5f\u53ef\u4ee5\u662f\u753b\u5e03\uff0c\u5c31\u50cf texture_from_canvas.html \u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u8fd9\u4e2a loadTexture() \u51fd\u6570\u5fc5\u987b\u4f7f\u7528 await \u4ece async \u51fd\u6570\u4e2d\u8c03\u7528\uff0c\u5e76\u4e14\u6355\u83b7\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff1a</p> <pre><code>let texture;\ntry {\n    texture = await loadTexture(URL);\n}\ncatch (e) {\n    ...\n}\n</code></pre> <p>\u6211\u5c06\u4e0d\u518d\u8be6\u7ec6\u8ba8\u8bba\u3002\u8bf7\u53c2\u9605\u793a\u4f8b\u7a0b\u5e8f\u4ee5\u83b7\u53d6\u66f4\u591a\u793a\u4f8b\u3002</p> <p>\u5728 JavaScript \u7aef\u521b\u5efa\u7684\u91c7\u6837\u5668\u548c\u7eb9\u7406\u5fc5\u987b\u4f5c\u4e3a\u7ed1\u5b9a\u7ec4\u8d44\u6e90\u4f20\u9012\u7ed9\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u5728\u7ed1\u5b9a\u7ec4\u4e2d\uff0c\u91c7\u6837\u5668\u7684\u8d44\u6e90\u662f\u91c7\u6837\u5668\u672c\u8eab\uff0c\u800c\u7eb9\u7406\u7684\u8d44\u6e90\u662f\u7eb9\u7406\u7684\u89c6\u56fe\u3002\u4ee5\u4e0b\u662f first_texture.html \u4e2d\u68cb\u76d8\u7eb9\u7406\u7684\u7ed1\u5b9a\u7ec4\u793a\u4f8b\uff1a</p> <pre><code>checkerboardBindGroup = device.createBindGroup({\n    layout: bindGroupLayout,\n    entries: [\n        {    // \u91c7\u6837\u5668\u3002\u6ce8\u610f\uff0c\u8d44\u6e90\u662f\u91c7\u6837\u5668\u672c\u8eab\u3002\n            binding: 0,\n            resource: checkerboardSampler\n        },\n        {    // \u7eb9\u7406\u3002\u6ce8\u610f\uff0c\u8d44\u6e90\u662f\u7eb9\u7406\u7684\u89c6\u56fe\u3002\n            binding: 1,\n            resource: checkerboardTexture.createView()\n        },\n        {    // \u8d44\u6e90\u662f\u5305\u542b uniform \u53d8\u91cf\u7684\u7f13\u51b2\u533a\u3002\n            binding: 2,\n            resource: {buffer: uniformBuffer, offset: 0, size: 4}\n        }\n    ]\n});\n</code></pre> <p>Textures and samplers are created on the JavaScript side of a WebGPU program and are used on the GPU side, where they are used in the fragment shader. This means that they are shader resources. Like other resources, they are declared as global variables in the shader program. Their values are passed to the shader in bind groups, so a sampler or texture variable must be declared with @group and @binding annotations. As an example, the declaration of a variable, tex, that represents a 2D image texture resource could look like this:</p> <pre><code>@group(0) @binding(0) var tex : texture_2d&lt;f32&gt;;\n</code></pre> <p>The type name <code>texture_2d&lt;f32&gt;</code> refers to a 2D texture with samples of type f32; that is, the color returned by sampling the texture will be of type vec4f. A 1D texture with floating point samples would use type name <code>texture_1d&lt;f32&gt;</code>, and there are similar names for 3D and cube textures. (There are also integer textures with type names like <code>texture_2d&lt;u32&gt;</code> and <code>texture_1d&lt;i32&gt;</code>, but they are not used with samplers. They are discussed later in this section.)</p> <p>Note that a texture variable is declared using var with no address space. (Not like <code>var&lt;uniform&gt;</code> for variables in the uniform address space.) The same is true for sampler variables. Textures and samplers are considered to be in a special \"handle\" address space, but that name is not used in shader programs.</p> <p>Sampler variables are declared using type name sampler. (Unfortunately, this means that you can't use \"sampler\" as the name of a variable.) For example:</p> <pre><code>@group(0) @binding(1) var samp : sampler;\n</code></pre> <p>A sampler is a simple data structure that specifies certain aspects of the sampling process, such as the minification filter and whether to use anisotropic filtering.</p> <p>Values for texture and sampler variables are constructed on the JavaScript side. A shader program has no direct access to the internal structure of a texture or sampler. In fact, the only thing you can do with them in WGSL is pass them as parameters to functions. There are several built-in functions for working with textures (most of them too obscure to be covered here). The main function for sampling textures is textureSample(). Its parameters are a floating-point texture, a sampler, and texture coordinates. For example,</p> <pre><code>let textureColor = textureSample ( tex, samp, texcoords );\n</code></pre> <p>This function can be used for sampling 1D, 2D, 3D, and cube textures. For a 1D texture, the texcoords parameter is an f32; for a 2D texture, it is a vec2f; and for a 3D or cube texture, it's a vec3f. The return value is a vec4f representing an RGBA color. The return value is always a vec4f, even when the texture does not actually store four color components. For example, a texture might store just one color component; when it is sampled using textureSample(), the color value from the texture will be used as the red component of the color, the green and blue color components will be set to 0.0, and the alpha component will be 1.0.</p> <p>You should now be able to understand the fragment shader source code from the sample program. Most of the work is on the JavaScript side, so the shader code is quite simple:</p> <pre><code>@group(0) @binding(0) var samp : sampler;  // Sampler resource from JavaScript.\n@group(0) @binding(1) var tex : texture_2d&lt;f32&gt;;  // Image texture resource.\n\n@group(0) @binding(2) var&lt;uniform&gt; textureSelect: u32;\n    // Value is 1, 2, or 3 to tell the fragment shader which texture to use.\n\n@fragment\nfn fragmentMain(@location(0) texcoords : vec2f) -&gt; @location(0) vec4f {\nif (textureSelect == 1) { // Trivial procedural texture.\n        // Use texcoords as red/green color components.\n    return vec4f( texcoords, 0, 1);\n}\nelse if (textureSelect == 2) { // For the checkerboard texture.\n        // Apply texture transform: multiply texcoords by 5.\n    return textureSample( tex, samp, 5 * texcoords );\n}\nelse { // For the Mona Lisa texture; no texture transform.\n    return textureSample( tex, samp, texcoords );\n}\n}\n</code></pre> <p>Because of the limited options, textures and samplers are fairly simple to use in the shader program. Most of the work is on the JavaScript side.</p> <p>The purpose of a sampler in WebGPU is to set options for the sampling process. Samplers are created using the JavaScript function device.createSampler(). The following code creates a typical sampler for high-quality sampling of a 2D texture:</p> <pre><code>let sampler = device.createSampler({\naddressModeU: \"repeat\",  // Default is \"clamp-to-edge\".\naddressModeV: \"repeat\",  //    (The other possible value is \"mirror-repeat\".)\nminFilter: \"linear\", \nmagFilter: \"linear\",     // Default for filters is \"nearest\".\nmipmapFilter: \"linear\",\nmaxAnisotropy: 16        // 1 is the default; 16 is the maximum.\n});\n</code></pre> <p>The addressModeU property specifies how to treat values of the u texture coordinate that are outside the range 0 to 1, addressModeV does the same for the v coordinates, and for 3D textures there is also addressModeW. (In OpenGL and WebGL, this was called \"wrapping\"; see Subsection 4.3.3. The meanings are the same here.)</p> <p>Filtering accounts for the fact that an image usually has to be stretched or shrunk when it is applied to a surface. The magFilter, or magnification filter, is used when stretching an image. The minFilter, or minification filter, is used when shrinking it. Mipmaps are reduced-size copies of the image that can make filtering more efficient. Textures don't automatically come with mipmaps; the mipmapFilter is ignored if no mipmaps are available. This is all similar to OpenGL; see Subsection 4.3.2.</p> <p>The maxAnisotropy property controls anisotropic filtering, which is explained in Subsection 7.5.1. The default value, 1, says that anisotropic filtering is not used. Higher values give better quality for textures that are viewed edge-on. The maximum value depends on the device, but it's OK to specify a value larger than the maximum; in that case, the maximum value will be used.</p> <p>Textures are created on the JavaScript side using device.createTexture(). But it is important to understand that this function only allocates the memory on the GPU that will hold the texture data. The actual data will have to be stored later. This is similar to creating a GPU buffer. Here is how the checkerboard texture is created in the sample program:</p> <pre><code>let checkerboardTexture = device.createTexture({\nsize: [2,2],  // Two pixels wide by two pixels high.\nformat: \"rgba8unorm\",  // One 8-bit unsigned int for each color component.\nusage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST\n});\n</code></pre> <p>This is a 2D texture, which is the default. The size property specifies the width and height of the texture, either as an array or as an object, {width: 2, height: 2}. The texture format specified here, \"rgba8unorm\", is a common one for images: four RGBA color components for each pixel, with 8 bits for each color component. The \"unorm\" in the name means that the 8 bits represent unsigned integers in the range 0 to 255 which are scaled to the range 0.0 to 1.0 to give a floating-point color value. (The scaling is referred to as \"normalizing\" the values\u2014yet another meaning of the overworked term \"normal.\") In the usage property, TEXTURE_BINDING, means that the texture can be sampled in a shader program, and COPY_DST means that data can be copied into the texture from elsewhere. It is also possible to fill a texture with data by attaching the texture to a pipeline as a render target; that requires the usage GPUTextureUsage.RENDER_ATTACHMENT. The other possible usage is COPY_SRC, which allows the texture to be used as a source of copied data.</p> <p>The size, format, and usage properties are required. There are a few optional properties. The mipLevelCount property specifies the number of mipmaps that you will provide for the texture. The default value, 1, means that only the main image will be provided. The dimension property can be \"1d\", \"2d\", or \"3d\", with a default of \"2d\". The sampleCount property has a default value of 1 and can be set to 4 to create a multisampled texture.</p> <p>We have already used device.createTexture() to create the special purpose textures that are used for multisampling and for the depth test. See, for example, webgpu/depth_test.html. Those textures were used as render attachments, and the data for the textures were created by drawing an image.</p> <p>Data for image textures often comes from the JavaScript side of the program. When the data comes from an ArrayBuffer or typed array, the data can be copied to the texture using the function device.queue.writeTexture(). In the sample program, the data for the tiny checkerboard texture comes from a Uint8Array and is copied to the texture with</p> <pre><code>device.queue.writeTexture(\n    { texture: checkerboardTexture }, // Texture to which data will be written.\n    textureData,         // A Uint8Array containing the data to be written.\n    { bytesPerRow: 8 },  // How many bytes for each row of texels.\n    [2,2]   // Size of the texture (width and height).\n);\n</code></pre> <p>The first parameter to writeTexture() is an object. In addition to the texture property, the object can have a mipLevel property to copy the data into one of the texture's mipmaps, and an origin property to copy the data into a rectangular subregion within the texture. (The origin can be given as an array of integers; together with the size parameter to the function, it determines the rectangular region.) The third parameter is also an object. The bytesPerRow property is the distance, in bytes, from the start of one row of texels to the start of the next row of texels. There can be padding between rows, which is sometimes necessary to satisfy alignment requirements. There can also be an offset property, giving the starting point, in bytes, of the data within the data source.</p> <p>All of this might seem overly complicated, but textures and images are complex, and the functions that work with them can have many options.</p> <p>Often, the data source for a texture is an image file. WebGPU cannot take the data directly from an image file; you have to fetch the file and extract the data into an ImageBitmap object. The fetch API, which uses promises, is discussed in Section A.4. Here, for example, is the function from textured_objects.html that is used to load textures from image files:</p> <pre><code>async function loadTexture(URL) {\n    // Standard method using the fetch API to get a texture from a ULR.\n    let response = await fetch(URL);\n    let blob = await response.blob();  // Get image data as a \"blob\".\n    let imageBitmap = await createImageBitmap(blob);\n    let texture = device.createTexture({\n        size: [imageBitmap.width, imageBitmap.height],\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST |\n                    GPUTextureUsage.RENDER_ATTACHMENT\n    });\n    device.queue.copyExternalImageToTexture(\n    { source: imageBitmap, flipY: true },\n    { texture: texture },\n    [imageBitmap.width, imageBitmap.height]\n    );\n    return texture;\n}\n</code></pre> <p>The texture's usage property is required by copyExternalmageToTexture(). The flipY property is used because the program uses OpenGL-style texture coordinates on the objects that it displays. The source property could also be a canvas, as is done in texture_from_canvas.html. This loadTexture() function must be called from an async function using await, and it is a good idea to catch the errors that might occur:</p> <pre><code>let texture;\ntry {\ntexture = await loadTexture(URL);\n}\ncatch (e) {\n...\n</code></pre> <p>I will not discuss this in any more detail. See the sample programs for more examples.</p> <p>Samplers and textures that are created on the JavaScript side must be passed to a shader program as bind group resources. In the bind group, the resource for a sampler is the sampler itself, while the resource for a texture is a view of the texture. Here for example is the bind group for the checkerboard texture in first_texture.html:</p> <pre><code>checkerboardBindGroup = device.createBindGroup({\nlayout: bindGroupLayout,\nentries: [\n    {    // The sampler. Note that the resource is the sampler itself.\n        binding: 0,\n        resource: checkerboardSampler\n    },\n    {    // The texture.  Note that the resource is a view of the texture.\n        binding: 1,\n        resource: checkerboardTexture.createView()\n    },\n    {    // The resource is the buffer containing the uniform variable.\n        binding: 2,\n        resource: {buffer: uniformBuffer, offset: 0, size: 4}\n    }\n]\n});\n</code></pre>"},{"location":"cn/c9/s5/#953-mipmap","title":"9.5.3 Mipmap","text":"<p>Mipmaps</p> \u4e2d\u6587\u82f1\u6587 <p>Mipmaps \u5728\u7eb9\u7406\u9700\u8981\u201c\u7f29\u5c0f\u201d\u4ee5\u9002\u5e94\u8868\u9762\u65f6\u5bf9\u8d28\u91cf\u548c\u6548\u7387\u81f3\u5173\u91cd\u8981\u3002\u4f7f\u7528 mipmaps \u65f6\uff0cmip \u7ea7\u522b 0 \u662f\u539f\u59cb\u56fe\u50cf\uff0cmip \u7ea7\u522b 1 \u662f\u534a\u5c3a\u5bf8\u526f\u672c\uff0cmip \u7ea7\u522b 2 \u662f\u56db\u5206\u4e4b\u4e00\u5c3a\u5bf8\u526f\u672c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u786e\u5207\u5730\u8bf4\uff0c\u5982\u679c width \u662f\u539f\u59cb\u56fe\u50cf\u7684\u5bbd\u5ea6\uff0c\u90a3\u4e48 mip \u7ea7\u522b i \u7684\u5bbd\u5ea6\u662f <code>max(1, width &gt;&gt; i)</code>\uff0c\u9ad8\u5ea6\u4e5f\u662f\u5982\u6b64\u3002\u5bf9\u4e8e\u5b8c\u6574\u7684 mipmap \u96c6\u5408\uff0c\u8be5\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u6301\u7eed\u5230\u6240\u6709\u5c3a\u5bf8\u90fd\u51cf\u5c0f\u5230 1\u3002</p> <p>WebGPU \u6ca1\u6709\u81ea\u52a8\u751f\u6210 mipmaps \u7684\u65b9\u6cd5\uff0c\u4f46\u5728 GPU \u4e0a\u7f16\u5199\u4e00\u4e2a WebGPU \u7a0b\u5e8f\u6765\u521b\u5efa\u5b83\u4eec\u5e76\u4e0d\u96be\u3002\u793a\u4f8b\u7a0b\u5e8f webgpu/making_mipmaps.html \u5c55\u793a\u4e86\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u4ece ImageBitmap \u521b\u5efa\u5177\u6709\u5b8c\u6574 mipmap \u96c6\u5408\u7684\u7eb9\u7406\u3002\u8be5\u7a0b\u5e8f\u8fd8\u4f5c\u4e3a\u6e32\u67d3\u5230\u7eb9\u7406\u548c\u4f7f\u7528\u7eb9\u7406\u89c6\u56fe\u7684\u793a\u4f8b\u3002</p> <p>\u521b\u5efa\u7eb9\u7406\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a mipmaps \u7684\u6570\u91cf\u3002\u7ed9\u5b9a\u7528\u4e8e\u7ea7\u522b 0 \u7684\u56fe\u50cf\u4f4d\u56fe\uff0c\u5f88\u5bb9\u6613\u8ba1\u7b97\u51fa\u5b8c\u6574\u96c6\u5408\u6240\u9700\u7684 mipmaps \u6570\u91cf\uff1a</p> <pre><code>let mipmapCount = 1;\nlet size = Math.max(imageBitmap.width,imageBitmap.height);\nwhile (size &gt; 1) {\n    mipmapCount++;\n    size = size &gt;&gt; 1;\n}\nlet texture = device.createTexture({\n    size: [imageBitmap.width, imageBitmap.height],\n    mipLevelCount: mipmapCount, // mipmaps \u7684\u6570\u91cf\u3002\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST |\n            GPUTextureUsage.RENDER_ATTACHMENT\n});\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 <code>copyExternalImageToTexture()</code> \u51fd\u6570\u5c06\u4f4d\u56fe\u590d\u5236\u5230\u7eb9\u7406\u7684\u7ea7\u522b 0\uff0c\u65b9\u6cd5\u4e0e\u5f80\u5e38\u4e00\u6837\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u5269\u4f59\u7684 mipmap \u56fe\u50cf\u53ef\u4ee5\u4f9d\u6b21\u751f\u6210\uff0c\u65b9\u6cd5\u662f\u5bf9\u524d\u4e00\u4e2a\u7ea7\u522b\u56fe\u50cf\u8fdb\u884c\u534a\u5c3a\u5bf8\u590d\u5236\u3002\u65b9\u6cd5\u662f\u5c06 mipmap \u4f5c\u4e3a\u7ba1\u7ebf\u7684\u6e32\u67d3\u76ee\u6807\u9644\u52a0\uff0c\u5e76\u4f7f\u7528\u524d\u4e00\u4e2a mipmap \u7ea7\u522b\u4f5c\u4e3a\u7ba1\u7ebf\u7684\u7eb9\u7406\u8d44\u6e90\u3002\u7136\u540e\u7ed8\u5236\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u5b83\u521a\u597d\u8986\u76d6\u8f93\u51fa\uff0c\u5176\u7eb9\u7406\u5750\u6807\u5c06\u6574\u4e2a\u8d44\u6e90\u56fe\u50cf\u6620\u5c04\u5230\u8f93\u51fa\u4e0a\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u7eb9\u7406\u8d44\u6e90\u548c\u6e32\u67d3\u76ee\u6807\u5b9e\u9645\u4e0a\u662f\u7eb9\u7406\u7684\u89c6\u56fe\u3002\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528 texture.createView()\uff0c\u4e0d\u5e26\u53c2\u6570\uff0c\u6765\u521b\u5efa\u7eb9\u7406\u89c6\u56fe\u3002\u7ed3\u679c\u662f\u5305\u62ec\u7eb9\u7406\u6240\u62e5\u6709\u7684\u6240\u6709 mipmaps \u7684\u89c6\u56fe\u3002\u4f46\u662f\uff0c\u901a\u8fc7\u5411 createView() \u4f20\u9012\u4e00\u4e2a\u53c2\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u53ea\u5305\u542b\u53ef\u7528 mipmaps \u5b50\u96c6\u7684\u89c6\u56fe\u662f\u53ef\u80fd\u7684\uff0c\u8be5\u53c2\u6570\u6307\u5b9a\u4e86\u8981\u5305\u542b\u5728\u89c6\u56fe\u4e2d\u7684\u7b2c\u4e00\u4e2a mipmap \u4ee5\u53ca\u8981\u5305\u542b\u7684 mipmaps \u6570\u91cf\u3002\u521b\u5efa\u53ea\u5305\u542b mip \u7ea7\u522b i \u7684\u89c6\u56fe\uff1a</p> <pre><code>textureView = texture.createView({\n    baseMipLevel: i,  // \u5305\u542b\u5728\u6b64\u89c6\u56fe\u4e2d\u7684\u7b2c\u4e00\u4e2a mipmap \u7ea7\u522b\u3002\n    mipLevelCount: 1  // \u53ea\u5305\u62ec\u4e00\u4e2a mipmap \u7ea7\u522b\u3002\n});\n</code></pre> <p>\u8fd9\u5c06\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u5355\u4e2a\u7eb9\u7406\u7684 mipmap \u4f5c\u4e3a\u7eb9\u7406\u8d44\u6e90\u6216\u6e32\u67d3\u76ee\u6807\u3002\u8fd9\u91cc\uff0c\u4f8b\u5982\uff0c\u662f\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u521b\u5efa mipmap \u56fe\u50cf\u7684\u5faa\u73af\uff1a</p> <pre><code>for (let mipmap = 1; mipmap &lt; mipmapCount; mipmap++) {\n    let inputView = texture.createView(  // \u7528\u4f5c\u7ed1\u5b9a\u7ec4\u8d44\u6e90\u3002\n                            { baseMipLevel: mipmap - 1, mipLevelCount: 1 });\n    let outputView = texture.createView( // \u7528\u4f5c\u6e32\u67d3\u76ee\u6807\u3002\n                            { baseMipLevel: mipmap, mipLevelCount: 1 });\n    let renderPassDescriptor = {\n        colorAttachments: [{\n            loadOp: \"load\",\n            storeOp: \"store\", \n            view: outputView  // \u6e32\u67d3\u5230 mipmap\u3002\n        }]\n    };\n    let bindGroup = webgpuDevice.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [ { binding: 0, resource: sampler },\n                    { binding: 1, resource: inputView } ]\n    });\n    let passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setVertexBuffer(0,vertexBuffer); // \u5750\u6807\u548c\u7eb9\u7406\u5750\u6807\u3002\n    passEncoder.setBindGroup(0,bindGroup); // \u5305\u62ec\u524d\u4e00\u4e2a mipmap \u7ea7\u522b\u3002\n    passEncoder.draw(4); // \u4f5c\u4e3a\u4e09\u89d2\u5f62\u6761\u5e26\u7ed8\u5236\u6b63\u65b9\u5f62\u3002\n    passEncoder.end();\n}\n</code></pre> <p>Mipmaps are important for quality and efficiency when a texture has to be \"minified\" to fit a surface. When working with mipmaps, mip level 0 is the original image, mip level 1 is a half-size copy, mip level 2 is a quarter-size copy, and so on. To be exact, if width is the width of the original image, then the width of mip level i is <code>max(1, width &gt;&gt; i)</code>, and similarly for the height. For a full set of mipmaps, the process continues until all dimensions have been reduced to 1.</p> <p>WebGPU has no method for automatically generating mipmaps, but it is not hard to write a WebGPU program to create them on the GPU. The sample program webgpu/making_mipmaps.html shows how to do this. It defines a function that can be used to create a texture with a full set of mipmaps from an ImageBitmap. The program also serves as an example of rendering to a texture and using texture views.</p> <p>When creating a texture, the number of mipmaps must be specified. It is easy to count the number of mipmaps needed for a full set, given the image bitmap that will be used for level 0:</p> <pre><code>let mipmapCount = 1;\nlet size = Math.max(imageBitmap.width,imageBitmap.height);\nwhile (size &gt; 1) {\n    mipmapCount++;\n    size = size &gt;&gt; 1;\n}\nlet texture = device.createTexture({\n    size: [imageBitmap.width, imageBitmap.height],\n    mipLevelCount: mipmapCount, // Number of mipmaps.\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST |\n                GPUTextureUsage.RENDER_ATTACHMENT\n});\n</code></pre> <p>The function <code>copyExternalImageToTexture()</code> can be used to copy the bitmap to level 0 in the texture in the usual way. Then each of the remaining mipmap images can be generated in turn by making a half-size copy of the previous level image. The idea is to attach the mipmap as the render target of a pipeline and use the previous mipmap level as a texture resource for the pipeline. Then draw a square that just covers the output, with texture coordinates that map the entire resource image onto the output.</p> <p>Recall that texture resources and render targets are actually views of textures. We have been using texture.createView(), with no parameter, to create texture views. The result is a view that includes all the mipmaps that the texture has. But it is possible to create a view that contains just a subset of available mipmaps by passing a parameter to createView() that specifies the first mipmap and the number of mipmaps to include in the view. To create a view the contains only mip level i:</p> <pre><code>textureView = texture.createView({\n    baseMipLevel: i,  // First mip level included in this view.\n    mipLevelCount: 1  // Only include one mip level.\n});\n</code></pre> <p>This will let us use a single mipmap from a texture as a texture resource or render target. Here, for example, is the loop from the sample program that creates the mipmap images:</p> <pre><code>for (let mipmap = 1; mipmap &lt; mipmapCount; mipmap++) {\n    let inputView = texture.createView(  // Used as a bind group resource.\n                            { baseMipLevel: mipmap - 1, mipLevelCount: 1 });\n    let outputView = texture.createView( // Used as a render target.\n                            { baseMipLevel: mipmap, mipLevelCount: 1 });\n    let renderPassDescriptor = {\n    colorAttachments: [{\n        loadOp: \"load\",\n        storeOp: \"store\", \n        view: outputView  // Render to mipmap.\n    }]\n    };\n    let bindGroup = webgpuDevice.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [ { binding: 0, resource: sampler },\n                { binding: 1, resource: inputView } ]\n    });\n    let passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setVertexBuffer(0,vertexBuffer); // Coords and texcoords.\n    passEncoder.setBindGroup(0,bindGroup); // Includes previous mipmap level.\n    passEncoder.draw(4); // Draw square as a triangle-strip.\n    passEncoder.end();\n}\n</code></pre>"},{"location":"cn/c9/s5/#954-\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406","title":"9.5.4 \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406","text":"<p>Cubemap Textures</p> \u4e2d\u6587\u82f1\u6587 <p>\u7acb\u65b9\u4f53\u8d34\u56fe\u7531\u516d\u5f20\u56fe\u50cf\u7ec4\u6210\uff0c\u6bcf\u5f20\u56fe\u50cf\u5bf9\u5e94\u7acb\u65b9\u4f53\u7684\u6bcf\u4e2a\u9762\u3002\u8fd9\u4e9b\u56fe\u50cf\u5fc5\u987b\u662f\u6b63\u65b9\u5f62\uff0c\u5e76\u4e14\u5927\u5c0f\u5fc5\u987b\u76f8\u540c\u3002\u7acb\u65b9\u4f53\u8d34\u56fe\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u5929\u7a7a\u76d2\uff08\u89c15.3.4\u5c0f\u8282\uff09\u548c\u73af\u5883\u6620\u5c04\uff08\u4e5f\u79f0\u4e3a\u53cd\u5c04\u6620\u5c04\uff0c\u89c17.3.5\u5c0f\u8282\uff09\u3002\u793a\u4f8b\u7a0b\u5e8f webgpu/cubemap_texture.html \u5c55\u793a\u4e86\u5982\u4f55\u5728 WebGPU \u4e2d\u521b\u5efa\u7acb\u65b9\u4f53\u8d34\u56fe\u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u7528\u4e8e\u5929\u7a7a\u76d2\u548c\u73af\u5883\u6620\u5c04\u3002\u5b83\u5728\u529f\u80fd\u4e0a\u4e0e WebGL \u793a\u4f8b webgl/skybox-and-env-map.html \u76f8\u540c\u3002</p> <p>\u9664\u4e86 \"2d\" \u56fe\u50cf\u7eb9\u7406\uff0cWebGPU \u8fd8\u6709 \"2d-array\" \u7eb9\u7406\u30022d-array \u7eb9\u7406\u5c31\u662f\u4e00\u4e2a 2d \u56fe\u50cf\u7684\u6570\u7ec4\u3002\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u79f0\u4e3a \"\u5c42\"\u3002\u6211\u5e76\u6ca1\u6709\u5728\u8fd9\u672c\u6559\u79d1\u4e66\u4e2d\u6db5\u76d6\u6570\u7ec4\u7eb9\u7406\uff0c\u4f46\u4f60\u9700\u8981\u77e5\u9053\u4e00\u4e9b\u5173\u4e8e\u5b83\u4eec\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u51fa\u4e8e\u67d0\u4e9b\u76ee\u7684\uff0c\u7acb\u65b9\u4f53\u8d34\u56fe\u88ab\u89c6\u4e3a\u5177\u6709\u516d\u5c42\u7684\u6570\u7ec4\u3002\u7d22\u5f15 0 \u5230 5 \u7684\u56fe\u50cf\u5206\u522b\u662f\u7acb\u65b9\u4f53\u7684 +X\u3001-X\u3001+Y\u3001-Y\u3001+Z \u548c -Z \u9762\uff0c\u6309\u6b64\u987a\u5e8f\u3002\u7279\u522b\u662f\uff0c\u5728\u521b\u5efa\u7eb9\u7406\u548c\u52a0\u8f7d\u516d\u4e2a\u9762\u7684\u56fe\u50cf\u65f6\uff0c\u7acb\u65b9\u4f53\u8d34\u56fe\u88ab\u89c6\u4e3a\u4e00\u4e2a\u6570\u7ec4\u3002\u4ee5\u4e0b\u662f\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u52a0\u8f7d\u7eb9\u7406\u7684\u4e00\u4e9b\uff08\u7f16\u8f91\u8fc7\u7684\uff09\u4ee3\u7801\uff1a</p> <pre><code>let urls = [  // \u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u516d\u5f20\u56fe\u50cf\u94fe\u63a5\u3002\n    \"cubemap-textures/park/posx.jpg\", \"cubemap-textures/park/negx.jpg\",\n    \"cubemap-textures/park/posy.jpg\", \"cubemap-textures/park/negy.jpg\",\n    \"cubemap-textures/park/posz.jpg\", \"cubemap-textures/park/negz.jpg\"\n];\nlet texture; \nfor (let i = 0; i &lt; 6; i++) {\n    let response = await fetch( urls[i] ); // \u83b7\u53d6\u7b2c i \u5f20\u56fe\u50cf\u3002\n    let blob = await response.blob(); \n    let imageBitmap = await createImageBitmap(blob);\n    if (i == 0) { // \uff08\u6211\u4eec\u9700\u8981\u77e5\u9053\u56fe\u50cf\u5927\u5c0f\u624d\u80fd\u521b\u5efa\u7eb9\u7406\u3002\uff09\n        texture = device.createTexture({ \n            size: [imageBitmap.width, imageBitmap.height, 6],\n                // \uff08\u6700\u540e\u7684 6 \u8868\u793a\u6709 6 \u5f20\u56fe\u50cf\u3002\uff09\n            dimension: \"2d\",  // \uff08\u8fd9\u662f\u9ed8\u8ba4\u7684\u7eb9\u7406\u7ef4\u5ea6\u3002\uff09\n            format: 'rgba8unorm',\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST |\n                    GPUTextureUsage.RENDER_ATTACHMENT\n        });\n    }\n    device.queue.copyExternalImageToTexture(\n    { source: imageBitmap },\n    { texture: texture,  origin: [0, 0, i] },\n            // \u6700\u540e\u7684 i \u5c06\u56fe\u50cf\u653e\u5165\u7acb\u65b9\u4f53\u7684\u7b2c i \u4e2a\u9762\u3002\n    [imageBitmap.width, imageBitmap.height]\n    );\n}\n</code></pre> <p>\u5bf9\u4e8e\u7ef4\u5ea6\u4e3a \"2d\" \u7684\u7eb9\u7406\uff0csize \u5c5e\u6027\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\u4f7f\u7eb9\u7406\u6210\u4e3a\u6570\u7ec4\u7eb9\u7406\u3002\uff08\u5bf9\u4e8e \"3d\" \u7eb9\u7406\uff0c\u7b2c\u4e09\u4e2a\u5143\u7d20\u5c06\u662f z \u65b9\u5411\u4e0a\u7684\u5927\u5c0f\u3002\uff09\u7c7b\u4f3c\u5730\uff0c\u5f53\u5c06\u56fe\u50cf\u590d\u5236\u5230\u7eb9\u7406\u4e2d\u65f6\uff0corigin \u5c5e\u6027\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\u6307\u5b9a\u4e86\u8981\u5c06\u56fe\u50cf\u590d\u5236\u5230\u7684\u6570\u7ec4\u5c42\u3002</p> <p>\uff08\u5f53\u6211\u7b2c\u4e00\u6b21\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u7f16\u5199\u7a0b\u5e8f\u65f6\uff0c\u73af\u5883\u6620\u5c04\u770b\u8d77\u6765\u4e0e WebGL \u7248\u672c\u76f8\u6bd4\u975e\u5e38\u7cdf\u7cd5\u3002\u8fd9\u5728\u50cf\u8336\u58f6\u628a\u624b\u8fd9\u6837\u7684\u6025\u5267\u5f2f\u66f2\u8868\u9762\u4e0a\u6700\u4e3a\u660e\u663e\u3002\u6700\u7ec8\uff0c\u6211\u610f\u8bc6\u5230\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e WebGL \u7248\u672c\u4f7f\u7528\u4e86 mipmap\u3002\u56e0\u6b64\uff0c\u6211\u4e3a WebGPU \u7248\u672c\u6dfb\u52a0\u4e86\u4ee3\u7801\uff0c\u4ee5\u4e3a\u7acb\u65b9\u4f53\u8d34\u56fe\u751f\u6210 mipmap\u3002\u6211\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u9009\u9879\u6765\u6253\u5f00\u548c\u5173\u95ed mipmap \u7684\u4f7f\u7528\uff0c\u4ee5\u4fbf\u4f60\u53ef\u4ee5\u770b\u5230\u5dee\u5f02\u3002\uff09</p> <p>\u5728 WGSL \u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\uff0c\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u4f7f\u7528\u4e0e 2D \u7eb9\u7406\u7c7b\u4f3c\u3002\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u6570\u636e\u7c7b\u578b\u662f <code>texture_cube&lt;f32&gt;</code>\u3002\u91c7\u6837\u7eb9\u7406\u65f6\uff0c\u4e0e 2D \u7eb9\u7406\u4e00\u6837\u4f7f\u7528 <code>textureSample()</code> \u51fd\u6570\uff0c\u4f46\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u63d0\u4f9b\u7eb9\u7406\u5750\u6807\u7684\u662f vec3f\u3002\u901a\u8fc7\u5728 vec3f \u7684\u65b9\u5411\u4e0a\u6295\u5c04\u5149\u7ebf\uff0c\u5e76\u67e5\u770b\u5b83\u4e0e\u7acb\u65b9\u4f53\u7684\u4ea4\u70b9\u6765\u83b7\u53d6\u6837\u672c\u3002\u5bf9\u4e8e\u5929\u7a7a\u76d2\uff0c\u57fa\u672c\u4e0a\u663e\u793a\u4ece\u76d2\u5b50\u5185\u90e8\u7684\u89c6\u56fe\uff0c\u7eb9\u7406\u5750\u6807\u5c31\u662f\u76d2\u5b50\u4e0a\u67d0\u70b9\u7684\u5bf9\u8c61\u5750\u6807\u3002\u56e0\u6b64\uff0c\u7ed8\u5236\u5929\u7a7a\u76d2\u80cc\u666f\u7684\u7247\u6bb5\u7740\u8272\u5668\u975e\u5e38\u7b80\u5355\uff1a</p> <pre><code>@group(1) @binding(0) var samp: sampler;\n@group(1) @binding(1) var cubeTex : texture_cube&lt;f32&gt;;\n@fragment fn fmain(@location(0) objCoords : vec3f) -&gt; @location(0) vec4f {\n    return textureSample(cubeTex, samp, objCoords);\n}\n</code></pre> <p>\u5bf9\u4e8e\u73af\u5883\u6620\u5c04\uff0c\u601d\u8def\u662f\u4ece\u89c2\u5bdf\u8005\u5411\u53cd\u5c04\u7269\u4f53\u4e0a\u7684\u67d0\u70b9\u6295\u5c04\u5149\u7ebf\uff0c\u5e76\u4f7f\u7528\u8be5\u5149\u7ebf\u4ece\u8868\u9762\u7684\u53cd\u5c04\u4f5c\u4e3a\u7eb9\u7406\u5750\u6807\u5411\u91cf\uff1a\u53cd\u5c04\u5149\u7ebf\u51fb\u4e2d\u5929\u7a7a\u76d2\u7684\u70b9\u5c06\u662f\u7528\u6237\u5728\u53cd\u5c04\u7269\u4f53\u4e0a\u770b\u5230\u7684\u70b9\u3002\u7531\u4e8e\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u5929\u7a7a\u76d2\u53ef\u4ee5\u65cb\u8f6c\uff0c\u56e0\u6b64\u5fc5\u987b\u8c03\u6574\u5c04\u7ebf\u7684\u65b9\u5411\u4ee5\u8003\u8651\u8fd9\u79cd\u65cb\u8f6c\u3002\u89c1 7.3.5\u5c0f\u8282 \u4e86\u89e3\u5b8c\u6574\u7684\u6570\u5b66\u8ba8\u8bba\u3002\u4ee5\u4e0b\u662f\u7ed8\u5236\u53cd\u5c04\u7269\u4f53\u7684\u7247\u6bb5\u7740\u8272\u5668\uff1a</p> <pre><code>@group(1) @binding(0) var samp: sampler;\n@group(1) @binding(1) var cubeTex : texture_cube&lt;f32&gt;;\n@group(1) @binding(2) var&lt;uniform&gt; normalMatrix : mat3x3f;\n@group(1) @binding(3) var&lt;uniform&gt; inverseViewTransform : mat3x3f;\n@fragment fn fmain(\n        @location(0) eyeCoords: vec3f, // \u89c2\u5bdf\u8005\u5230\u8868\u9762\u7684\u65b9\u5411\u3002\n        @location(1) normal: vec3f // \u8868\u9762\u672a\u53d8\u6362\u7684\u6cd5\u5411\u91cf\u3002\n) -&gt; @location(0) vec4f {\n    let N = normalize(normalMatrix * normal); // \u8868\u9762\u6cd5\u5411\u91cf\u3002\n    let R = reflect( eyeCoords, N );  // \u53cd\u5c04\u65b9\u5411\uff08\u671d\u5411\u5929\u7a7a\u76d2\uff09\u3002\n    let T = inverseViewTransform * R; \n        // \u4e58\u4ee5\u89c6\u56fe\u53d8\u6362\u7684\u9006\u77e9\u9635\u4ee5\u8003\u8651\u5929\u7a7a\u76d2\u7684\u65cb\u8f6c\u3002\n    return textureSample(cubeTex, samp, T); // \u4f7f\u7528\u53cd\u5c04\u5149\u7ebf\u8fdb\u884c\u91c7\u6837\u3002\n}\n</code></pre> <p>\u5728 JavaScript \u7aef\uff0c\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u4f7f\u7528\u4e0e 2D \u7eb9\u7406\u7c7b\u4f3c\u3002\u7528\u4e8e\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u91c7\u6837\u5668\u4e0e\u7528\u4e8e 2D \u7eb9\u7406\u7684\u91c7\u6837\u5668\u76f8\u540c\u3002\u5e76\u5c06\u7acb\u65b9\u4f53\u8d34\u56fe\u7684\u89c6\u56fe\u4f5c\u4e3a\u7ed1\u5b9a\u7ec4\u8d44\u6e90\u4f20\u9012\u7ed9\u7740\u8272\u5668\u7a0b\u5e8f\u3002\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u5728\u521b\u5efa\u89c6\u56fe\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u8981\u5c06\u7eb9\u7406\u89c6\u4e3a\u7acb\u65b9\u4f53\u8d34\u56fe\uff1a</p> <pre><code>cubeTexture.createView({dimension: \"cube\"})\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u88ab\u89c6\u4e3a 2d \u6570\u7ec4\u7eb9\u7406\u3002\u5728\u4e3a\u7eb9\u7406\u521b\u5efa mipmap \u65f6\uff0c\u6211\u9700\u8981\u89c6\u56fe\u6765\u8868\u793a\u7acb\u65b9\u4f53\u5355\u4e2a\u9762\u7684\u5355\u4e2a mipmap \u7ea7\u522b\u3002\u4f8b\u5982\uff0c</p> <pre><code>let outputView = cubeTexture.createView({\n    dimension: \"2d\",\n    baseMipLevel: mipmap, mipLevelCount: 1,\n    baseArrayLayer: side, arrayLayerCount: 1\n});\n</code></pre> <p>\u5176\u4e2d mipmap \u662f\u6240\u9700\u7684 mipmap \u7ea7\u522b\uff0cside \u662f\u7acb\u65b9\u4f53\u6240\u9700\u9762\u7684\u6570\u7ec4\u7d22\u5f15\u3002\u7ef4\u5ea6\u5fc5\u987b\u660e\u786e\u6307\u5b9a\u4e3a \"2d\"\u3002\uff08\u6240\u6709\u8fd9\u4e9b\u53ef\u80fd\u5e2e\u52a9\u4f60\u7406\u89e3\u7eb9\u7406\u548c\u7eb9\u7406\u89c6\u56fe\u4e4b\u95f4\u7684\u533a\u522b\u3002\uff09</p> <p>A cubemap texture consists of six images, one for each side of a cube. The images must be square and must all be the same size. A cubemap texture can be used, for example, to make a skybox (Subsection 5.3.4) and to do environment mapping (also called reflection mapping, Subsection 7.3.5). The sample program webgpu/cubemap_texture.html shows how to create a cubemap texture in WebGPU and how to use it for a skybox and for environment mapping. It is functionally identical to the WebGL example webgl/skybox-and-env-map.html.</p> <p>In addition to \"2d\" image textures, WebGPU has \"2d-array\" textures. A 2d-array texture is just that\u2014an array of 2d images. The elements of the array are called \"layers\". I do not cover array textures in this textbook, but you need to know a little about them since, for some purposes, a cubemap texture is treated as an array with six layers. The images at indices 0 through 5 are the +X, -X, +Y, -Y, +Z, and -Z sides of the cube, in that order. In particular, a cubemap texture is treated as an array when creating the texture and loading the images for the six sides. Here is some (edited) code from the sample program for loading the texture:</p> <pre><code>let urls = [  // Links to the six images for the cube.\n\"cubemap-textures/park/posx.jpg\", \"cubemap-textures/park/negx.jpg\", \n\"cubemap-textures/park/posy.jpg\", \"cubemap-textures/park/negy.jpg\", \n\"cubemap-textures/park/posz.jpg\", \"cubemap-textures/park/negz.jpg\"\n];\nlet texture; \nfor (let i = 0; i &lt; 6; i++) {\n    let response = await fetch( urls[i] ); // Get image number i.\n    let blob = await response.blob(); \n    let imageBitmap = await createImageBitmap(blob);\n    if (i == 0) { // (We need to know the image size to create the texture.)\n        texture = device.createTexture({ \n            size: [imageBitmap.width, imageBitmap.height, 6],\n                // (The 6 at the end means that there are 6 images.)\n            dimension: \"2d\",  // (This is the default texture dimension.)\n            format: 'rgba8unorm',\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST |\n                        GPUTextureUsage.RENDER_ATTACHMENT\n        });\n    }\n    device.queue.copyExternalImageToTexture(\n    { source: imageBitmap },\n    { texture: texture,  origin: [0, 0, i] },\n            // The i at the end puts the image into side number i of the cube.\n    [imageBitmap.width, imageBitmap.height]\n    );\n}\n</code></pre> <p>For a texture with dimension \"2d\", the third element in the size property makes the texture into an array texture. (For a \"3d\" texture, the third element would be the size in the z direction.) Similarly, when copying an image into the texture, the third element of the origin property specifies the array layer into which the image is to be copied.</p> <p>(When I first wrote the program, using the above code, the environment mapping looked really bad, compared to the WebGL version. This was most apparent on sharply curved surfaces such as the handle of the teapot. Eventually, I realized that the difference was that the WebGL version uses mipmaps. So, I added code to the WebGPU version to produce mipmaps for the cubemap texture. I also added an option to turn the use of mipmaps on and off, so that you can see the difference.)</p> <p>In a WGSL shader program, cubemap textures are used similarly to 2D textures. The data type for a cubemap texture is <code>texture_cube&lt;f32&gt;</code>. For sampling the texture, the same <code>textureSample()</code> function is used as for 2D textures, but the third parameter, which gives the texture coordinates, is a vec3f. The sample is obtained by casting a ray from the origin in the direction of the vec3f, and seeing where it intersects the cube. For a skybox, which basically shows the view of the box from the inside, the texture coordinates are just the object coordinates of a point on the box. So, the fragment shader for drawing the skybox background is simply</p> <pre><code>@group(1) @binding(0) var samp: sampler;\n@group(1) @binding(1) var cubeTex : texture_cube&lt;f32&gt;;\n@fragment fn fmain(@location(0) objCoords : vec3f) -&gt; @location(0) vec4f {\n    return textureSample(cubeTex, samp, objCoords);\n}\n</code></pre> <p>For environment mapping, the idea is to cast a ray from the viewer to a point on the reflective object, and use the reflection of that ray from the surface as the texture coordinate vector: The point where the reflected ray hits the skybox is the point that will be seen by the user on the reflective object. Since the skybox in the sample program can be rotated, the direction of the ray has to be adjusted to take that rotation into account. See Subsection 7.3.5 for a full discussion of the math. Here is the fragment shader for drawing the reflected object:</p> <pre><code>@group(1) @binding(0) var samp: sampler;\n@group(1) @binding(1) var cubeTex : texture_cube&lt;f32&gt;;\n@group(1) @binding(2) var&lt;uniform&gt; normalMatrix : mat3x3f;\n@group(1) @binding(3) var&lt;uniform&gt; inverseViewTransform : mat3x3f;\n@fragment fn fmain(\n            @location(0) eyeCoords: vec3f, // Direction from viewer to surface.\n            @location(1) normal: vec3f // Untransformed normal to surface.\n    ) -&gt; @location(0) vec4f {\n    let N = normalize(normalMatrix * normal); // Normal vector to the surface.\n    let R = reflect( eyeCoords, N );  // Reflected direction (towards skybox).\n    let T = inverseViewTransform * R; \n        // Multiplying by inverse of the view transform accounts\n        //    for the rotation of the skybox.\n    return textureSample(cubeTex, samp, T); // Use reflected ray to sample.\n}\n</code></pre> <p>On the JavaScript side, again, cubemap textures are used similarly to 2D textures. The samplers that are used for cubemap textures are the same as those used for 2D textures. And a view of the cubemap texture is passed to the shader program as a bind group resource. One difference is that when creating a view, you need to specify that you want to view the texture as a cube texture:</p> <pre><code>cubeTexture.createView({dimension: \"cube\"})\n</code></pre> <p>By default, it would be viewed as a 2d array texture. When creating mipmaps for the texture, I needed views of the texture to represent a single mipmap level of a single side of the cube. For example,</p> <pre><code>let outputView = cubeTexture.createView({\n                    dimension: \"2d\",\n                    baseMipLevel: mipmap, mipLevelCount: 1,\n                    baseArrayLayer: side, arrayLayerCount: 1\n                });\n</code></pre> <p>where mipmap is the desired mipmap level and side is the array index for the desired side of the cube. The dimension must be explicitly specified as \"2d\". (All this might help you understand the difference between a texture and a view of a texture.)</p>"},{"location":"cn/c9/s5/#955-\u7eb9\u7406\u683c\u5f0f","title":"9.5.5 \u7eb9\u7406\u683c\u5f0f","text":"<p>Texture Formats</p> \u4e2d\u6587\u82f1\u6587 <p>\u7eb9\u7406\u7684\u683c\u5f0f\u6307\u5b9a\u4e86\u6bcf\u4e2a texels \u5b58\u50a8\u7684\u6570\u636e\u7c7b\u578b\u3002\u683c\u5f0f\u6307\u5b9a\u4e86\u989c\u8272\u901a\u9053\u7684\u6570\u91cf\u3001\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u8fd8\u6307\u5b9a\u4e86\u6570\u636e\u7684\u89e3\u91ca\u65b9\u5f0f\u3002\u5728\u5e38\u89c1\u7684 2D \u56fe\u50cf\u683c\u5f0f \"rgba8unorm\" \u4e2d\uff0c\u6709\u56db\u4e2a\u989c\u8272\u901a\u9053\uff08\"r\"\u3001\"g\"\u3001\"b\" \u548c \"a\"\uff09\u3002\u4e00\u4e2a texels \u7684\u6570\u636e\u7531\u6bcf\u4e2a\u989c\u8272\u901a\u9053\u7684 8 \u4f4d\u7ec4\u6210\u3002\u989c\u8272\u901a\u9053\u7684\u503c\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff08\"u\"\uff09\uff0c\u8303\u56f4\u5728 0 \u5230 255 \u4e4b\u95f4\uff0c\u9664\u4ee5 255 \u5f97\u5230\u8303\u56f4\u5728 0.0 \u5230 1.0 \u4e4b\u95f4\u7684\u6d6e\u70b9\u503c\uff08\"norm\"\uff09\u3002\u683c\u5f0f \"bgra8unorm\" \u7c7b\u4f3c\uff0c\u4f46 \"r\"\u3001\"g\" \u548c \"b\" \u503c\u7684\u987a\u5e8f\u76f8\u53cd\u3002\uff08\u8fd9\u4e24\u79cd\u683c\u5f0f\u4e2d\u7684\u4e00\u79cd\uff0c\u6839\u636e\u5e73\u53f0\u7684\u4e0d\u540c\uff0c\u662f HTML \u753b\u5e03\u7684\u683c\u5f0f\uff1b\u51fd\u6570 navigator.gpu.getPreferredCanvasFormat() \u8fd4\u56de\u9002\u5408\u60a8\u5e73\u53f0\u7684\u6b63\u786e\u683c\u5f0f\u3002\u7136\u800c\uff0c\u4f7f\u7528\u9519\u8bef\u7684\u683c\u5f0f\u5e76\u4e0d\u4f1a\u4f7f\u60a8\u7684\u7a0b\u5e8f\u505c\u6b62\u5de5\u4f5c\uff0c\u56e0\u4e3a WebGPU \u5728\u8bfb\u5199\u7eb9\u7406\u65f6\u4f1a\u81ea\u52a8\u8fdb\u884c\u4e00\u4e9b\u683c\u5f0f\u8f6c\u6362\u3002\uff09</p> <p>WebGPU \u652f\u6301\u5927\u91cf\u7684\u7eb9\u7406\u683c\u5f0f\u3002\u6709\u5177\u6709\u4e00\u4e2a\u989c\u8272\u901a\u9053 (\"r\")\u3001\u4e24\u4e2a\u989c\u8272\u901a\u9053 (\"rg\") \u548c\u56db\u4e2a\u989c\u8272\u901a\u9053 (\"rgba\") \u7684\u683c\u5f0f\u3002\u6bcf\u4e2a\u989c\u8272\u901a\u9053\u7684\u4f4d\u6570\u53ef\u4ee5\u662f 8\u300116 \u6216 32\u3002\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\u3001\u65e0\u7b26\u53f7\u6574\u6570\u6216\u6709\u7b26\u53f7\u6574\u6570\u3002\u4e00\u4e9b\u6574\u6570\u683c\u5f0f\u662f\u5f52\u4e00\u5316\u7684\uff0c\u4f46\u5927\u591a\u6570\u4e0d\u662f\u3002\uff08\u8fd8\u6709\u538b\u7f29\u7eb9\u7406\u683c\u5f0f\uff0c\u672c\u6559\u79d1\u4e66\u672a\u6db5\u76d6\u3002\uff09</p> <p>\u4f8b\u5982\uff0c\u683c\u5f0f \"r8uint\"\u3001\"r16uint\" \u548c \"r32uint\" \u662f\u5177\u6709\u4e00\u4e2a\u989c\u8272\u901a\u9053\u7684\u65e0\u7b26\u53f7\u6574\u6570\u683c\u5f0f\uff0c\u6bcf\u4e2a texels \u5b58\u50a8\u4e00\u4e2a 8 \u4f4d\u300116 \u4f4d\u6216 32 \u4f4d\u7684\u65e0\u7b26\u53f7\u6574\u6570\u3002\u5bf9\u4e8e\u6bcf\u4e2a texels \u7684\u4e24\u4e2a 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u683c\u5f0f\u5c06\u662f \"rg16sint\"\u3002\u683c\u5f0f \"rgba32float\" \u6bcf\u4e2a texels \u4f7f\u7528\u56db\u4e2a 32 \u4f4d\u6d6e\u70b9\u6570\u3002</p> <p>\u6240\u6709\u7eb9\u7406\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8d44\u6e90\u901a\u8fc7\u7ed1\u5b9a\u7ec4\u4f20\u9012\u5230\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\uff0c\u4f46\u53ea\u6709\u6d6e\u70b9\u7eb9\u7406\u624d\u80fd\u4f7f\u7528 textureSample() \u8fdb\u884c\u91c7\u6837\u3002\uff08\u8fd9\u5305\u62ec\u5f52\u4e00\u5316\u6574\u6570\u683c\u5f0f\u3002\uff09\u7136\u800c\uff0c\u6807\u51c6 WGSL \u51fd\u6570 textureLoad() \u53ef\u4ee5\u7528\u4e8e\u4ece\u7eb9\u7406\u4e2d\u8bfb\u53d6 texels \u6570\u636e\uff0c\u5b83\u65e2\u9002\u7528\u4e8e\u6574\u6570\u7eb9\u7406\uff0c\u4e5f\u9002\u7528\u4e8e\u6d6e\u70b9\u7eb9\u7406\u3002\u8fd9\u4e2a\u51fd\u6570\u5c06\u7eb9\u7406\u89c6\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff1a\u4e0d\u662f\u4f7f\u7528\u7eb9\u7406\u5750\u6807\u6765\u91c7\u6837\u7eb9\u7406\uff0c\u800c\u662f\u4f7f\u7528\u6574\u6570 texels \u5750\u6807\u6765\u8bbf\u95ee\u6307\u5b9a texels \u7684\u503c\u3002\u4f8b\u5982\uff0c\u8981\u4ece <code>texture_2d&lt;u32&gt;</code> \u7684\u7b2c 7 \u884c\u3001\u7b2c 15 \u5217\u7684 texels \u8bfb\u53d6\uff0c\u53ef\u4ee5\u4f7f\u7528</p> <pre><code>let texelValue : vec4u = textureLoad( tex, vec2u(7,15), 0 );\n</code></pre> <p>\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f mipmap \u7ea7\u522b\uff0c\u8fd9\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u901a\u5e38\u4e3a\u96f6\u3002</p> <p><code>textureLoad()</code> \u7684\u8fd4\u56de\u503c\u59cb\u7ec8\u662f\u4e00\u4e2a 4 \u7ec4\u4ef6\u5411\u91cf\uff0c\u5373\u4f7f\u7eb9\u7406\u53ea\u6709\u4e00\u4e2a\u6216\u4e24\u4e2a\u989c\u8272\u901a\u9053\u3002\u7f3a\u5931\u7684\u989c\u8272\u901a\u9053\u7528 \"g\" \u6216 \"b\" \u901a\u9053\u7684 0 \u586b\u5145\uff0c\"a\" \u901a\u9053\u7528 1 \u586b\u5145\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u7eb9\u7406\u4e2d\u7684\u503c\u53ef\u80fd\u4e0d\u4ee3\u8868\u989c\u8272\uff0c\u6574\u6570\u7eb9\u7406\u4ecd\u4f7f\u7528 \"color\" \u4e00\u8bcd\u3002\u6d6e\u70b9\u7eb9\u7406\u4e5f\u53ef\u4ee5\u5b58\u50a8\u9664\u989c\u8272\u4e4b\u5916\u7684\u6570\u636e\u3002\uff09</p> <p>\u7740\u8272\u5668\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>textureStore()</code> \u51fd\u6570\u5c06 texels \u6570\u636e\u5199\u5165\u7eb9\u7406\u3002\u7136\u800c\uff0c\u7eb9\u7406\u5fc5\u987b\u4f5c\u4e3a\u6240\u8c13\u7684 \"storage texture\" \u4f20\u9012\u5230\u7740\u8272\u5668\u4e2d\uff0c\u800c\u8fd9\u4ec5\u9002\u7528\u4e8e\u67d0\u4e9b\u7eb9\u7406\u683c\u5f0f\u3002\uff08\u5173\u4e8e\u5404\u79cd\u7eb9\u7406\u683c\u5f0f\u53ef\u4ee5\u6267\u884c\u7684\u64cd\u4f5c\u6709\u5f88\u591a\u89c4\u5219\u3002\u8fd9\u4e9b\u89c4\u5219\u5728 WebGPU \u89c4\u8303\u7684\u7b2c 26.1 \u8282\u7684\u7eb9\u7406\u683c\u5f0f\u529f\u80fd\u8868\u4e2d\u8fdb\u884c\u4e86\u603b\u7ed3\u3002\uff09</p> <p>\u5728\u7740\u8272\u5668\u4e2d\uff0c\u5b58\u50a8\u7eb9\u7406\u7684\u7c7b\u578b\u5982 <code>texture_storage_2d&lt;r32uint,write&gt;</code>\u3002\u7b2c\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570 r32uint \u662f\u7eb9\u7406\u683c\u5f0f\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570 write \u6307\u5b9a\u4e86\u8bbf\u95ee\u6a21\u5f0f\u3002\uff08\u76ee\u524d\uff0cwrite \u662f\u552f\u4e00\u7684\u53ef\u80fd\u6027\u3002\uff09\u7eb9\u7406\u4f5c\u4e3a\u7c7b\u578b\u4e3a textureStorage \u7684\u7ed1\u5b9a\u7ec4\u8d44\u6e90\u4f20\u9012\u5230\u7740\u8272\u5668\u4e2d\uff0c\u800c\u4e0d\u662f texture\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u662f\u4f7f\u7528\u4e24\u4e2a r32uint \u7eb9\u7406\u7684\u7740\u8272\u5668\u7a0b\u5e8f\u7684\u7ed1\u5b9a\u7ec4\u5e03\u5c40\uff0c\u4e00\u4e2a\u7528\u4e8e\u4f7f\u7528 <code>textureLoad()</code> \u8bfb\u53d6\uff0c\u4e00\u4e2a\u7528\u4e8e\u4f7f\u7528 <code>textureStore()</code> \u5199\u5165\uff1a</p> <pre><code>let bindGroupLayout = device.createBindGroupLayout({\n    entries: [\n        {    // \u7528\u4e8e\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684 texture_2d&lt;u32&gt; \u53d8\u91cf\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: {\n                sampleType: \"uint\"  // Texels \u503c\u662f\u65e0\u7b26\u53f7\u6574\u6570\u3002\n                // \uff08\u662f\u7684\uff0c\u5c3d\u7ba1\u4f60\u4e0d\u80fd\u91c7\u6837\u5b83\uff0c\u5b83\u4ecd\u88ab\u79f0\u4e3a sampleType\uff01\uff09\n            }\n        },\n        {    // \u7528\u4e8e\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u7684 texture_storage_2d&lt;r32uint,write&gt;\n            binding: 1,\n            visibility: GPUShaderStage.FRAGMENT,\n            storageTexture: {\n                format: \"r32uint\",\n                access: \"write-only\",  // \u8fd9\u662f\u552f\u4e00\u53ef\u80fd\u7684\u503c\u3002\n                viewDimension: \"2d\"    // \u8fd9\u662f\u9ed8\u8ba4\u503c\u3002\n            }\n        }\n    ]\n});\n</code></pre> <p>\u8bf7\u6ce8\u610f \"storage texture\" \u53ea\u610f\u5473\u7740\u4f5c\u4e3a\u7c7b\u578b\u4e3a textureStorage \u7684\u7ed1\u5b9a\u7ec4\u8d44\u6e90\u4f20\u9012\u5230\u7740\u8272\u5668\u7684\u7eb9\u7406\u3002\u540c\u4e00\u4e2a\u7eb9\u7406\u53ef\u4ee5\u4f5c\u4e3a\u5e38\u89c4\u7eb9\u7406\u6216\u5b58\u50a8\u7eb9\u7406\u4f7f\u7528\uff0c\u6216\u8005\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u4e24\u8005\u90fd\u4f7f\u7528\u3002</p> <p><code>textureStore()</code> \u51fd\u6570\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a\u7eb9\u7406\u3001\u8981\u8bbe\u7f6e\u503c\u7684 texels \u5750\u6807\u548c\u503c\u3002\u503c\u59cb\u7ec8\u662f\u4e00\u4e2a 4 \u7ec4\u4ef6\u5411\u91cf\uff0c\u5373\u4f7f\u7eb9\u7406\u5c11\u4e8e\u56db\u4e2a\u989c\u8272\u901a\u9053\u3002\u7f3a\u5931\u7684\u901a\u9053\u5e94\u6307\u5b9a\u4e3a \"g\" \u6216 \"b\" \u901a\u9053\u7684 0\uff0c\"a\" \u901a\u9053\u7684 1\u3002\u4f8b\u5982\uff0c\u8981\u5728 2D r32uint \u5b58\u50a8\u7eb9\u7406\u7684\u7b2c 7 \u884c\u3001\u7b2c 15 \u5217\u8bbe\u7f6e\u5355\u4e2a\u6574\u6570\u503c 17\uff0c\u53ef\u4ee5\u4f7f\u7528</p> <pre><code>textureStore( tex, vec2u(7,15), vec4u(17,0,0,1) );\n</code></pre> <p>\u793a\u4f8b\u7a0b\u5e8f webgpu/life_1.html \u5b9e\u73b0\u4e86 John Conway \u7684\u8457\u540d\u751f\u547d\u6e38\u620f\uff08\u89c1 6.4.5\u5c0f\u8282\uff09\u3002\u6e38\u620f\u68cb\u76d8\u662f\u4e00\u4e2a 2D \u5355\u5143\u683c\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u53ef\u4ee5\u662f\u6d3b\u7684\u6216\u6b7b\u7684\u3002\u5728\u7a0b\u5e8f\u4e2d\uff0c\u68cb\u76d8\u7684\u72b6\u6001\u5b58\u50a8\u4e3a\u7c7b\u578b\u4e3a r32uint \u7684 2D \u7eb9\u7406\uff0c\u5176\u4e2d 0 \u8868\u793a\u6b7b\u4ea1\u7684\u7ec6\u80de\uff0c1 \u8868\u793a\u6d3b\u7684\u7ec6\u80de\u3002\u6e38\u620f\u68cb\u76d8\u663e\u793a\u5728\u753b\u5e03\u4e0a\uff0c\u753b\u5e03\u4e0a\u7684\u6bcf\u4e2a\u50cf\u7d20\u90fd\u662f\u4e00\u4e2a\u7ec6\u80de\u3002\u56e0\u6b64\uff0c\u7eb9\u7406\u7684\u5927\u5c0f\u4e0e\u753b\u5e03\u7684\u5927\u5c0f\u76f8\u540c\u3002</p> <p>\u6e38\u620f\u7684\u52a8\u4f5c\u6d89\u53ca\u4ece\u5f53\u524d\u4e00\u4ee3\u8ba1\u7b97\u51fa\u65b0\u4e00\u4ee3\u7684\u7ec6\u80de\u3002\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u4f7f\u7528\u4e24\u4e2a\u7eb9\u7406\uff1a\u4e00\u4e2a\u5e38\u89c4\u7eb9\u7406\u5305\u542b\u5f53\u524d\u4e00\u4ee3\u7684\u68cb\u76d8\u548c\u4e00\u4e2a\u5b58\u50a8\u7eb9\u7406\uff0c\u7528\u4e8e\u5b58\u50a8\u8ba1\u7b97\u51fa\u7684\u4e0b\u4e00\u4ee3\u3002\u7a0b\u5e8f\u7684\u6240\u6709\u5de5\u4f5c\u90fd\u5728\u5176 draw() \u51fd\u6570\u4e2d\u5b8c\u6210\u3002\u8be5\u51fd\u6570\u7ed8\u5236\u4e00\u4e2a\u5b8c\u5168\u8986\u76d6\u753b\u5e03\u7684\u6b63\u65b9\u5f62\uff0c\u4ee5\u4fbf\u4e3a\u753b\u5e03\u4e0a\u7684\u6bcf\u4e2a\u50cf\u7d20\u8c03\u7528\u4e00\u6b21\u7247\u6bb5\u7740\u8272\u5668\u3002\u7247\u6bb5\u7740\u8272\u5668\u4f7f\u7528 textureLoad() \u8bfb\u53d6\u5b83\u6b63\u5728\u5904\u7406\u7684\u7ec6\u80de\u7684\u5f53\u524d\u72b6\u6001\u3002\u5982\u679c\u7ec6\u80de\u662f\u6d3b\u7684\uff0c\u5b83\u8fd4\u56de\u767d\u8272\u4f5c\u4e3a\u7247\u6bb5\u7684\u989c\u8272\uff1b\u5982\u679c\u7ec6\u80de\u662f\u6b7b\u7684\uff0c\u5b83\u8fd4\u56de\u9ed1\u8272\u3002\u540c\u65f6\uff0c\u7247\u6bb5\u7740\u8272\u5668\u8ba1\u7b97\u7ec6\u80de\u5728\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\u5e76\u4f7f\u7528 textureStore() \u5c06\u8be5\u72b6\u6001\u5199\u5165\u5b58\u50a8\u7eb9\u7406\u3002\u5728\u7ed8\u5236\u4e4b\u95f4\uff0c\u4e24\u4e2a\u7eb9\u7406\u7684\u89d2\u8272\u88ab\u4ea4\u6362\uff0c\u56e0\u6b64\u4e0b\u4e00\u4ee3\u6210\u4e3a\u5f53\u524d\u4e00\u4ee3\u3002</p> <p>\u4ee5\u4e0b\u662f\u7247\u6bb5\u7740\u8272\u5668\uff0c\u7701\u7565\u4e86\u8ba1\u7b97\u7ec6\u80de\u65b0\u72b6\u6001\u7684\u90e8\u5206\u3002\u5b83\u4f7f\u7528\u53e6\u4e00\u4e2a\u65b0\u51fd\u6570 textureDimensions()\uff0c\u8be5\u51fd\u6570\u83b7\u53d6\u7eb9\u7406\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u5927\u5c0f\u3002\u8fd9\u4e2a\u503c\u662f\u65b0\u72b6\u6001\u8ba1\u7b97\u6240\u9700\u7684\u3002</p> <pre><code>@group(0) @binding(0) var inputBoard: texture_2d&lt;u32&gt;;\n@group(0) @binding(1) var outputBoard: texture_storage_2d&lt;r32uint,write&gt;;\n\n@fragment\nfn fragmentMain(@builtin(position) position : vec4f) -&gt; @location(0) vec4f {\n    let boardSize = textureDimensions(inputBoard);\n    let cell = vec2u(position.xy); // \u6b64\u7247\u6bb5\u7684\u6574\u6570\u50cf\u7d20\u5750\u6807\u3002\n    let alive = textureLoad( inputBoard, cell, 0 ).r;  // \u83b7\u53d6\u5f53\u524d\u72b6\u6001\u3002\n                // \uff08\u8bf7\u6ce8\u610f\uff0c\u72b6\u6001\u5728 r \u989c\u8272\u7ec4\u4ef6\u4e2d\u3002\uff09\n        .\n        . // \uff08\u8ba1\u7b97 newAlive\uff0c\u7ec6\u80de\u5728\u4e0b\u4e00\u4ee3\u7684\u72b6\u6001\uff0c\uff09\n        .\n    textureStore( outputBoard, cell, vec4u(newAlive,0,0,1) ); // \u5b58\u50a8\u65b0\u72b6\u6001\u3002\n    let c = f32(alive);\n    return vec4f(c,c,c,1); // \u5982\u679c\u7ec6\u80de\u73b0\u5728\u662f\u6d3b\u7684\uff0c\u5219\u4e3a\u767d\u8272\uff0c\u5982\u679c\u662f\u6b7b\u7684\uff0c\u5219\u4e3a\u9ed1\u8272\u3002\n}\n</code></pre> <pre><code>\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e24\u4e2a\u7eb9\u7406\uff0ctexture1 \u548c texture2\uff0c\u5e76\u5c06 texture1 \u52a0\u8f7d\u4e3a\u68cb\u76d8\u7684\u521d\u59cb\u72b6\u6001\u3002\u4ee5\u4e0b\u662f\u5c06 texture1 \u5206\u914d\u7ed9\u7740\u8272\u5668\u4e2d\u7684 inputBoard\uff0c\u5c06 texture2 \u5206\u914d\u7ed9 outputBoard \u7684\u7ed1\u5b9a\u7ec4\u3002\u5b83\u4f7f\u7528\u4e86\u4e0a\u9762\u663e\u793a\u7684\u6837\u672c\u7ed1\u5b9a\u7ec4\u5e03\u5c40\u3002\n</code></pre> <pre><code>bindGroupA = device.createBindGroup({\n    // \u4f7f\u7528 texture1 \u8fdb\u884c\u8f93\u5165\uff0ctexture2 \u8fdb\u884c\u8f93\u51fa\u7684\u7ed1\u5b9a\u7ec4\u3002\nlayout: bindGroupLayout,\nentries: [\n    { \n        binding: 0,\n        resource: texture1.createView()\n    },\n    {\n        binding: 1,\n        resource: texture2.createView()\n    }\n]\n});\n</code></pre> <p>\u7b2c\u4e8c\u4e2a\u7ed1\u5b9a\u7ec4 bindGroupB \u4ea4\u6362\u4e86\u7eb9\u7406\u7684\u89d2\u8272\u3002\u7a0b\u5e8f\u5728\u7b2c\u4e00\u6b21\u8c03\u7528 draw() \u65f6\u4f7f\u7528 bindGroupA\uff0c\u5728\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u4f7f\u7528 bindGroupB\uff0c\u5728\u7b2c\u4e09\u6b21\u8c03\u7528\u65f6\u518d\u6b21\u4f7f\u7528 bindGroupA\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u751f\u547d\u6e38\u620f\u7684\u7b2c\u4e8c\u4e2a\u7248\u672c\uff0cwebgpu/life_2.html\uff0c\u91c7\u7528\u4e86\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u5b83\u4f7f\u7528\u4e24\u4e2a\u683c\u5f0f\u4e3a \"r8unorm\" \u7684\u7eb9\u7406\u6765\u8868\u793a\u68cb\u76d8\u7684\u5f53\u524d\u72b6\u6001\u548c\u4e0b\u4e00\u4e2a\u72b6\u6001\u3002\u5177\u6709\u8be5\u683c\u5f0f\u7684\u7eb9\u7406\u53ef\u4ee5\u7528\u4e8e\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7684\u91c7\u6837\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528 <code>textureSample()</code> \u800c\u4e0d\u662f <code>textureLoad()</code> \u4ece\u8f93\u5165\u68cb\u76d8\u4e2d\u8bfb\u53d6\u503c\u3002\u5e76\u4e14 r8unorm \u7eb9\u7406\u53ef\u4ee5\u4f5c\u4e3a\u6e32\u67d3\u7ba1\u7ebf\u7684\u8f93\u51fa\u76ee\u6807\u3002\u7136\u540e\uff0c\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u6709\u4e24\u4e2a\u8f93\u51fa\uff0c\u4e00\u4e2a\u53d1\u9001\u5230\u753b\u5e03\uff0c\u53e6\u4e00\u4e2a\u53d1\u9001\u5230 r8unorm \u7eb9\u7406\u3002</p> <p>\u8981\u4f7f\u7247\u6bb5\u7740\u8272\u5668\u6709\u7b2c\u4e8c\u4e2a\u8f93\u51fa\uff0c\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u5fc5\u987b\u6307\u5b9a\u4e24\u4e2a\u76ee\u6807\uff1a</p> <pre><code>let pipelineDescriptor = {\n    ...\n    fragment: {\n        module: shader,\n        entryPoint: \"fragmentMain\",\n        targets: [\n            { format: navigator.gpu.getPreferredCanvasFormat() },\n            { format: \"r8unorm\"}\n        ]\n    },\n    ...\n}\n</code></pre> <p>\u7136\u540e\u6e32\u67d3\u901a\u9053\u63cf\u8ff0\u7b26\u4f7f\u7528\u8f93\u51fa\u7eb9\u7406\u7684\u89c6\u56fe\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u989c\u8272\u9644\u4ef6\uff1a</p> <pre><code>let renderPassDescriptor = {\n    colorAttachments: [\n        {\n            clearValue: { r: 0, g: 0, b: 0, a: 1 }, \n            loadOp: \"clear\",\n            storeOp: \"store\", \n            view: context.getCurrentTexture().createView()\n        },\n        {\n            // \u7b2c\u4e8c\u4e2a\u989c\u8272\u9644\u4ef6\u662f r8unorm \u7eb9\u7406\u3002\n            loadOp: \"load\", // \uff08\u8fd9\u91cc\u53ef\u4ee5\uff0c\u56e0\u4e3a\u5185\u5bb9\u5b8c\u5168\u88ab\u66ff\u6362\u3002\uff09\n            storeOp: \"store\",\n            view: outputTexture.createView()\n        }\n    ]\n};\n</code></pre> <p>\u7247\u6bb5\u7740\u8272\u5668\u7684\u8f93\u51fa\u7c7b\u578b\u662f\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u8f93\u51fa\u503c\u7684\u7ed3\u6784\u4f53\u3002\u6709\u5173\u5168\u90e8\u7ec6\u8282\uff0c\u4f60\u5f53\u7136\u5e94\u8be5\u67e5\u770b\u4e24\u4e2a\u793a\u4f8b\u751f\u547d\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u3002</p> <p>\u7eb9\u7406\u662f\u590d\u6742\u7684\u3002\u6211\u53ea\u6db5\u76d6\u4e86 API \u7684\u90e8\u5206\u5185\u5bb9\u3002\u4f46\u6211\u8bd5\u56fe\u7ed9\u4f60\u4e00\u4e2a\u6982\u8ff0\uff0c\u5305\u62ec\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u7684\u5927\u90e8\u5206\u4fe1\u606f\u3002</p> <p>The format of a texture specifies what kind of data is stored for each texel. The format specifies the number of color channels, the type of data, and in some cases how the data is interpreted. In the common 2D image format \"rgba8unorm\", there are four color channels (\"r\", \"g\", \"b\", and \"a\"). The data for a texel consists of 8 bits per color channel. And the value for a color channel is an unsigned integer (\"u\") in the range 0 to 255, which is divided by 255 to give a float value in the range 0.0 to 1.0 (\"norm\"). The format \"bgra8unorm\" is similar, but the order of the \"r\", \"g\", and \"b\" values is reversed. (One of these two formats, depending on platform, is the format for an HTML canvas; the function navigator.gpu.getPreferredCanvasFormat() returns the correct one for your platform. However, using the wrong format will not stop your program from working, since WebGPU does some format conversions automatically when reading and writing textures.)</p> <p>WebGPU supports a large number of texture formats. There are formats with one color channel (\"r\"), two color channels (\"rg\"), and four color channels (\"rgba\"). The number of bits per color channel can be 8, 16, or 32. The data type can be float, unsigned integer, or signed integer. Some of the integer formats are normalized, but most are not. (There are also compressed texture formats, which are not covered in this textbook.)</p> <p>For example, the formats \"r8uint\", \"r16uint\", and \"r32uint\" are unsigned integer formats with one color channel and storing one 8-, 16-, or 32-bit unsigned integer per texel. For two 16-bit signed integers per texel, the format would be \"rg16sint\". The format \"rgba32float\" uses four 32-bit floating-point numbers per texel.</p> <p>All textures can be passed into shader programs as resources in bind groups, but only floating-point textures can be sampled using textureSample(). (This includes normalized integer formats.) However, the standard WGSL function textureLoad() can be used to read texel data from a texture, and it works both for integer and for floating-point textures. This function treats the texture like an array: Instead of using texture coordinates to sample the texture, you use integer texel coordinates to access the value at a specified texel. For example, to read from the texel in row 7, column 15 of a <code>texture_2d&lt;u32&gt;</code>, tex, you can use</p> <pre><code>let texelValue : vec4u = textureLoad( tex, vec2u(7,15), 0 );\n</code></pre> <p>The third parameter is the mipmap level, which is required but will usually be zero.</p> <p>The return value from <code>textureLoad()</code> is always a 4-component vector, even when the texture has only one or two color channels. The missing color channels are filled in with 0 for the \"g\" or \"b\" channel, and 1 for the \"a\" channel. (Note that the term \"color\" is used for integer textures, even though the values in the texture probably don't represent colors. Floating-point textures can also store data other than colors.)</p> <p>It is also possible for a shader program to write texel data to a texture, using the function <code>textureStore()</code>. However, the texture has to be passed into the shader as what is called a \"storage texture,\" and this only works for certain texture formats. (There are lots of rules about what can be done with various texture formats. The rules are summarized in a table of Texture Format Capabilities in Section 26.1 of the WebGPU specification.)</p> <p>In a shader, a storage texture has a type such as <code>texture_storage_2d&lt;r32uint,write&gt;</code>. The first type parameter, r32uint, is the texture format, and the second, write, specifies the access mode. (Currently, write is the only possibility.) The texture is passed into the shader as a bind group resource, with resource type storageTexture, rather than texture. Here, for example, is a bind group layout for a shader program that uses two r32uint textures, one for reading with <code>textureLoad()</code> and one for writing with <code>textureStore()</code>:</p> <pre><code>let bindGroupLayout = device.createBindGroupLayout({\nentries: [\n    {    // for a texture_2d&lt;u32&gt; variable in the fragment shader\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        texture: {\n            sampleType: \"uint\"  // Texel values are unsigned integers.\n            // (Yes, it's called sampleType even though you can't sample it!)\n        }\n    },\n    {    // for a texture_storage_2d&lt;r32uint,write&gt; in the fragment shader\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        storageTexture: {\n            format: \"r32uint\",\n            access: \"write-only\",  // This is the only possible value.\n            viewDimension: \"2d\"    // This is the default.\n        }\n    }\n]\n});\n</code></pre> <p>Note that \"storage texture\" just means a texture that has been passed to the shader as a bind group resource of type textureStorage. The same texture could be used as a regular texture or as a storage texture, or both at different times.</p> <p>The textureStore() function takes three parameters: the texture, the texel coordinates of the texel whose value is to be set, and the value. The value is always a 4-component vector, even if the texture has fewer than four color channels. The missing channels should be specified as 0 for the \"g\" or \"b\" channel and as 1 for the \"a\" channel. For example to set the single integer value at row 7, column 15 in a 2D r32uint storage texture to 17, you could use</p> <pre><code>textureStore( tex, vec2u(7,15), vec4u(17,0,0,1) );\n</code></pre> <p>The sample program webgpu/life_1.html implements John Conway's well-known Game of Life (see Subsection 6.4.5). The game board is a 2D array of cells, where each cell can be alive or dead. In the program, the state of the board is stored as a 2D texture of type r32uint, with 0 representing a dead cell and 1 representing a living cell. The game board is displayed on a canvas, and each pixel in the canvas is a cell. So, the size of the texture is the same as the size of the canvas.</p> <p>The action of the game involves computing a new \"generation\" of cells from the current generation. The program actually uses two textures: a regular texture containing the current generation of the board and a storage texture that is used to store the next generation as it is computed. The program does all its work in its draw() function. That function draws a square that completely covers the canvas, so that the fragment shader is called once for each pixel on the canvas. The fragment shader uses textureLoad() to read the current state of the cell that it is processing. If the cell is alive, it returns white as the color of the fragment; if the cell is dead, it returns black. At the same time, the fragment shader computes the state of the cell in the next generation, and it writes that state to the storage texture using textureStore(). Between draws, the roles of the two textures are swapped, so that what was the next generation becomes the current generation.</p> <p>Here is the fragment shader, leaving out the part that computes the new state of the cell. It uses another new function, textureDimensions(), which gets the size of a texture in each of its dimensions. That value is required for the new state computation.</p> <pre><code>@group(0) @binding(0) var inputBoard: texture_2d&lt;u32&gt;;\n@group(0) @binding(1) var outputBoard: texture_storage_2d&lt;r32uint,write&gt;;\n\n@fragment\nfn fragmentMain(@builtin(position) position : vec4f) -&gt; @location(0) vec4f {\nlet boardSize = textureDimensions(inputBoard);\nlet cell = vec2u(position.xy); // Integer pixel coords of this fragment.\nlet alive = textureLoad( inputBoard, cell, 0 ).r;  // Get current state.\n                // (Note that the state is in the r color component.)\n    .\n    . // (Compute newAlive, the state of the cell in the next generation,)\n    .\ntextureStore( outputBoard, cell, vec4u(newAlive,0,0,1) ); // Store new state.\nlet c = f32(alive);\nreturn vec4f(c,c,c,1); // White if cell is now alive, black if it is dead.\n}\n</code></pre> <p>The program creates two textures, texture1 and texture2, and loads texture1 with the initial state of the board. Here is the bind group that assigns texture1 to inputBoard in the shader and texture2 to outputBoard. It uses the sample bind group layout shown above.</p> <pre><code>bindGroupA = device.createBindGroup({\n    // A bind group using texture1 for input and texture2 for output.\nlayout: bindGroupLayout,\nentries: [\n    { \n        binding: 0,\n        resource: texture1.createView()\n    },\n    {\n        binding: 1,\n        resource: texture2.createView()\n    }\n]\n});\n</code></pre> <p>A second bind group, bindGroupB, reverses the roles of the textures. The program uses bindGroupA the first time draw() is called, bindGroupB the second time, bindGroupA the third time, and so on.</p> <p>A second version of the Life program, webgpu/life_2.html, uses a different approach. It uses two textures with format \"r8unorm\" to represent the current state and the next state of the board. A texture with that format can be used for sampling in a shader program, so values can be read from the input board using <code>textureSample()</code> instead of <code>textureLoad()</code>. And a r8unorm texture can be an output target for a render pipeline. The fragment shader can then have two outputs, one going to the canvas and one going to the r8unorm texture.</p> <p>To have a second output from the fragment shader, the pipeline descriptor must specify two targets:</p> <pre><code>let pipelineDescriptor = {\n        ...\n    fragment: {\n    module: shader,\n    entryPoint: \"fragmentMain\",\n    targets: [\n            { format: navigator.gpu.getPreferredCanvasFormat() },\n            { format: \"r8unorm\"}\n    ]\n    },\n    ...\n</code></pre> <p>Then the render pass descriptor uses a view of the output texture as the second color attachment:</p> <pre><code>let renderPassDescriptor = {\ncolorAttachments: [\n    {\n        clearValue: { r: 0, g: 0, b: 0, a: 1 }, \n        loadOp: \"clear\",\n        storeOp: \"store\", \n        view: context.getCurrentTexture().createView()\n    },\n    {  // The second color attachment is a r8unorm texture.\n        loadOp: \"load\", // (OK here since contents are entirely replaced.)\n        storeOp: \"store\",\n        view: outputTexture.createView()\n    }\n]\n};\n</code></pre> <p>The output type for the fragment shader is a struct that contains the two output values. For full details, you should, of course, look at the source code for the two sample Life programs.</p> <p>Textures are complex. I have only covered parts of the API. But I have tried to give you an overview that includes most of the information that you are likely to need.</p>"},{"location":"cn/c9/s6/","title":"9.6 \u8ba1\u7b97\u7740\u8272\u5668","text":"<p>Compute Shaders</p> \u4e2d\u6587\u82f1\u6587 <p>WebGL \u548c WebGPU \u4e4b\u95f4\u7684\u4e00\u4e2a\u4e3b\u8981\u533a\u522b\u662f\u589e\u52a0\u4e86\u8ba1\u7b97\u7740\u8272\u5668\u3002\u8ba1\u7b97\u7740\u8272\u5668\u6267\u884c\u7684\u662f\u4e00\u79cd\u7eaf\u7cb9\u7684\u8ba1\u7b97\u4efb\u52a1\uff0c\u5b83\u4e0d\u662f\u56fe\u50cf\u6e32\u67d3\u4efb\u52a1\u7684\u76f4\u63a5\u90e8\u5206\uff08\u5c3d\u7ba1\u5b83\u4ea7\u751f\u7684\u7ed3\u679c\u53ef\u4ee5\u7528\u4e8e\u540e\u7eed\u7684\u6e32\u67d3\uff09\u3002\u867d\u7136\u9876\u70b9\u548c\u7247\u6bb5\u7740\u8272\u5668\u5728\u6e32\u67d3\u7ba1\u7ebf\u4e2d\u4f7f\u7528\uff0c\u4f46\u8ba1\u7b97\u7740\u8272\u5668\u53ea\u80fd\u5728\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u7ba1\u7ebf\u4e2d\u4f7f\u7528\uff0c\u79f0\u4e3a\u8ba1\u7b97\u7ba1\u7ebf\u3002\u672c\u8282\u8ba8\u8bba\u4e86\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528\u8ba1\u7b97\u7740\u8272\u5668\u548c\u8ba1\u7b97\u7ba1\u7ebf\u3002</p> <p>One of the major differences between WebGL and WebGPU is the addition of compute shaders. A compute shader performs a purely computational task that is not directly a part of an image rendering task (although it can produce results that will be used later for rendering). While vertex and fragment shaders are used in a render pipeline, compute shaders can only be used in another type of pipeline, called a compute pipeline. This section discusses how to create and use compute shaders and compute pipelines.</p>"},{"location":"cn/c9/s6/#961-\u5de5\u4f5c\u7ec4\u548c\u8c03\u5ea6","title":"9.6.1 \u5de5\u4f5c\u7ec4\u548c\u8c03\u5ea6","text":"<p>Workgroups and Dispatches</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u56fe\u50cf\u6e32\u67d3\u4e2d\uff0c<code>draw()</code> \u6216 <code>drawIndexed()</code> \u51fd\u6570\u5728\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\u4e2d\u88ab\u7528\u6765\u542f\u52a8\u6e32\u67d3\u7ba1\u7ebf\u7684\u5904\u7406\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u5904\u7406\u8fc7\u7a0b\u6d89\u53ca\u591a\u6b21\u8c03\u7528\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\uff0c\u7136\u540e\u591a\u6b21\u8c03\u7528\u7247\u6bb5\u7740\u8272\u5668\u5165\u53e3\u70b9\u3002\u5bf9\u4e8e\u8ba1\u7b97\u7ba1\u7ebf\uff0c\u4f7f\u7528\u8ba1\u7b97\u901a\u9053\u7f16\u7801\u5668\uff0c\u5e76\u901a\u8fc7\u8c03\u7528 <code>dispatchWorkgroups()</code> \u51fd\u6570\u6765\u542f\u52a8\u5904\u7406\u3002\u6211\u5c06\u5728\u4e0b\u4e00\u4e2a\u5b50\u8282\u4e2d\u8ba8\u8bba JavaScript \u548c WGSL \u4ee3\u7801\uff0c\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5bf9\u5de5\u4f5c\u7ec4\u4ee5\u53ca\u8c03\u5ea6\u5b83\u4eec\u7684\u57fa\u672c\u6982\u5ff5\u6709\u6240\u4e86\u89e3\u3002</p> <p>\u8ba1\u7b97\u7740\u8272\u5668\u6267\u884c\u7684\u5de5\u4f5c\u88ab\u8ba4\u4e3a\u662f\u4e00\u7ef4\u3001\u4e8c\u7ef4\u6216\u4e09\u7ef4\u7684\u3002\u8fd9\u662f\u4e00\u79cd\u57fa\u4e8e\u88ab\u5904\u7406\u6570\u636e\u7ed3\u6784\u7684\u5de5\u4f5c\u7ec4\u7ec7\u65b9\u5f0f\u3002\u4e0e\u56fe\u50cf\u76f8\u5173\u7684\u5de5\u4f5c\u5f88\u53ef\u80fd\u662f\u4e8c\u7ef4\u7684\u3002\u5904\u7406\u6570\u7ec4\u7684\u5de5\u4f5c\u53ef\u80fd\u662f\u4e00\u7ef4\u7684\u3002\u56e0\u6b64\uff0c\u8ba1\u7b97\u7740\u8272\u5668\u7684\u8c03\u7528\u5728\u903b\u8f91\u4e0a\u88ab\u5b89\u6392\u5728\u4e00\u4e2a\u4e00\u7ef4\u3001\u4e8c\u7ef4\u6216\u4e09\u7ef4\u7684\u7f51\u683c\u4e2d\u3002\u6bcf\u4e2a\u8c03\u7528\u90fd\u6709\u4e00\u4e2a\u201c\u5168\u5c40\u8c03\u7528 ID\u201d\uff0c\u7531\u4e00\u4e2a\u3001\u4e24\u4e2a\u6216\u4e09\u4e2a\u6574\u6570\u7ec4\u6210\uff0c\u8868\u793a\u5176\u5728\u7f51\u683c\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <p>\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u8c03\u7528\u88ab\u5206\u6210\u66f4\u5c0f\u7684\u7ec4\uff0c\u79f0\u4e3a\u5de5\u4f5c\u7ec4\u3002\u540c\u4e00\u5de5\u4f5c\u7ec4\u4e2d\u7684\u8c03\u7528\u53ef\u4ee5\u66f4\u7d27\u5bc6\u5730\u534f\u540c\u5de5\u4f5c\u3002\u4f8b\u5982\uff0c\u6709\u4e00\u4e2a\u5de5\u4f5c\u7ec4\u5730\u5740\u7a7a\u95f4\uff0c\u5305\u542b\u540c\u4e00\u5de5\u4f5c\u7ec4\u4e2d\u7684\u8c03\u7528\u5171\u4eab\u7684\u6570\u636e\uff0c\u4f46\u5bf9\u5176\u4ed6\u5de5\u4f5c\u7ec4\u7684\u8c03\u7528\u4e0d\u53ef\u89c1\u3002\u5de5\u4f5c\u7ec4\u4e2d\u7684\u8c03\u7528\u4e5f\u6309\u7167\u4e0e\u6574\u4f53\u5de5\u4f5c\u76f8\u540c\u7684\u7ef4\u5ea6\u6392\u5217\u5728\u4e00\u4e2a\u7f51\u683c\u4e2d\u3002\u6bcf\u4e2a\u8c03\u7528\u90fd\u6709\u4e00\u4e2a\u201c\u672c\u5730\u8c03\u7528 ID\u201d\uff0c\u8868\u793a\u5176\u5728\u5de5\u4f5c\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002\u5de5\u4f5c\u7ec4\u672c\u8eab\u6709\u4e00\u4e2a\u5927\u5c0f\uff0c\u7531\u4e00\u4e2a\u3001\u4e24\u4e2a\u6216\u4e09\u4e2a\u6574\u6570\u7ec4\u6210\uff0c\u8868\u793a\u5176\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002\u6240\u6709\u5de5\u4f5c\u7ec4\u7684\u5927\u5c0f\u90fd\u662f\u76f8\u540c\u7684\u3002\u4e8c\u7ef4\u5de5\u4f5c\u7684\u8c03\u7528\u53ef\u4ee5\u8fd9\u6837\u60f3\u8c61\uff1a</p> <p></p> <p>\u5c0f\u9ec4\u65b9\u683c\u662f\u8ba1\u7b97\u7740\u8272\u5668\u7684\u5355\u72ec\u8c03\u7528\u3002\u5de5\u4f5c\u7ec4\u5927\u5c0f\u4e3a (4,4)\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5de5\u4f5c\u7ec4\u7531\u4e00\u4e2a 4x4 \u7684\u7f51\u683c\u7ec4\u6210\u3002\u8c03\u7528\u7684\u672c\u5730\u8c03\u7528 ID \u662f\u4e00\u4e2a\u4ecb\u4e8e 0 \u5230 3 \u4e4b\u95f4\u7684\u6570\u5b57\u5bf9\u3002\u5de5\u4f5c\u7ec4\u4ee5 4x3 \u7684\u7f51\u683c\u5f62\u5f0f\u7ec4\u7ec7\u3002\u5168\u5c40\u8c03\u7528 ID \u662f\u4e00\u4e2a (x,y) \u5bf9\uff0c\u5176\u4e2d x \u7684\u8303\u56f4\u662f 0 \u5230 15\uff0cy \u7684\u8303\u56f4\u662f 0 \u5230 11\u3002</p> <p>\u5de5\u4f5c\u7684\u8c03\u7528\u7ed3\u6784\u7531\u4e24\u4ef6\u4e8b\u51b3\u5b9a\uff1aWGSL \u6e90\u4ee3\u7801\u4e2d\u6307\u5b9a\u7684\u5355\u4e2a\u5de5\u4f5c\u7ec4\u7684\u5927\u5c0f\uff0c\u4ee5\u53ca\u5728 JavaScript \u7aef\u7684 <code>dispatchWorkgroups()</code> \u8c03\u7528\u4e2d\u6307\u5b9a\u7684\u6574\u4f53\u5de5\u4f5c\u7f51\u683c\u6bcf\u4e2a\u7ef4\u5ea6\u7684\u5de5\u4f5c\u7ec4\u6570\u91cf\u3002\u5bf9\u4e8e\u56fe\u4e2d\u6240\u793a\u7684\u4f8b\u5b50\uff0c\u5de5\u4f5c\u7ec4\u5927\u5c0f\u4e3a (4,4)\uff0c\u5de5\u4f5c\u5c06\u901a\u8fc7\u8c03\u7528 <code>dispatchWorkgroups(4,3)</code> \u6765\u521b\u5efa\u3002</p> <p>\u5de5\u4f5c\u7ec4\u5185\u7684\u8c03\u7528\u6b21\u6570\u9650\u5236\u4e3a 256\u3002\u5141\u8bb8\u5c0f\u81f3\u5355\u4e2a\u8c03\u7528\u7684\u5de5\u4f5c\u7ec4\u3002\u7136\u800c\uff0c\u901a\u5e38\u5efa\u8bae\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5c06 64 \u4f5c\u4e3a\u5408\u7406\u7684\u5de5\u4f5c\u7ec4\u5927\u5c0f\uff0c\u6211\u5728\u5927\u591a\u6570\u793a\u4f8b\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u503c\u3002</p> <p>\uff08\u4f60\u53ef\u80fd\u4f1a\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u5de5\u4f5c\u7ec4\u5e94\u8be5\u5b58\u5728\u3002\u8fd9\u4e0e GPU \u7684\u7269\u7406\u7ed3\u6784\u6709\u5173\u3002\u5178\u578b GPU \u4e2d\u7684\u5904\u7406\u5355\u5143\u88ab\u7269\u7406\u4e0a\u5206\u6210\u5c0f\u7ec4\u3002\u5c0f\u7ec4\u4e2d\u7684\u5904\u7406\u5668\u4e0d\u662f\u72ec\u7acb\u7684\uff1b\u5b83\u4eec\u90fd\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u5e76\u5171\u4eab\u4e00\u4e9b\u5b83\u4eec\u53ef\u4ee5\u5feb\u901f\u8bbf\u95ee\u7684\u672c\u5730\u5185\u5b58\u3002\u4f7f\u7528\u5c0f\u4e8e GPU \u4e0a\u5904\u7406\u5668\u5c0f\u7ec4\u7269\u7406\u5927\u5c0f\u7684 WebGPU \u5de5\u4f5c\u7ec4\u5927\u5c0f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5c0f\u7ec4\u4e2d\u7684\u4e00\u4e9b\u5904\u7406\u5668\u65e0\u4e8b\u53ef\u505a\u3002\u901a\u8fc7\u5229\u7528 GPU \u7684\u7269\u7406\u7ed3\u6784\uff0c\u53ef\u4ee5\u4f18\u5316\u67d0\u4e9b\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\u7136\u800c\uff0c\u6211\u6000\u7591\u8fd9\u79cd\u4f18\u5316\u771f\u7684\u9700\u8981\u9488\u5bf9\u7279\u5b9a\u7684 GPU \u7ed3\u6784\u8fdb\u884c\u8c03\u6574\u3002\u5bf9\u4e8e\u65e8\u5728\u5728\u591a\u4e2a\u5e73\u53f0\u4e0a\u8fd0\u884c\u7684 WebGPU \u7a0b\u5e8f\uff0c\u6211\u4e0d\u786e\u5b9a\u53ef\u4ee5\u8fdb\u884c\u591a\u5c11\u4f18\u5316\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u79cd\u4f18\u5316\u8d85\u51fa\u4e86\u6211\u7684\u4e13\u4e1a\u8303\u56f4\uff0c\u6211\u7684\u793a\u4f8b\u4e2d\u6ca1\u6709\u4ee5\u91cd\u5927\u65b9\u5f0f\u4f7f\u7528\u5de5\u4f5c\u7ec4\u3002\uff09</p> <p>For image rendering, the <code>draw()</code> or <code>drawIndexed()</code> function is used in a render pass encoder to start processing of a render pipeline. The processing involves multiple invocations of the vertex shader entry-point function and then multiple invocations of the fragment shader entry-point. For a compute pipeline, a compute pass encoder is used, and processing is started with a call to the function <code>dispatchWorkgroups()</code>. I will discuss the JavaScript and WGSL code in the next subsection, but before that, you need to have some basic understanding of workgroups and what it means to dispatch them.</p> <p>The job performed by a compute shader is thought of as one-, two-, or three-dimensional. This is a way to organize the work, based on the structure of the data that is processed. A job that works with an image is likely to be two-dimensional. A job that processes an array is likely to be one-dimensional. So, the invocations of a compute shader are arranged logically in a one-, two-, or three-dimension grid. Each invocation has a \"global invocation ID,\" consisting of one, two, or three integers that give its position in the grid.</p> <p>To complicate things, the invocations are broken into smaller groups called workgroups. Invocations in the same workgroup can work more closely together. For example, there is a workgroup address space that contains data shared by invocations in the same workgroup but not visible to invocations in other workgroups. The invocations in a workgroup are arranged in a grid with the same dimension as the overall job. Every invocation has a \"local invocation ID\" that gives its position in its workgroup. The workgroup as a whole has a size, consisting of one, two, or three integers giving its size in each dimension. All workgroups in a job have the same size. The invocations for a 2D job can be visualized something like this:</p> <p></p> <p>The tiny yellow squares are individual invocations of the compute shader. The workgroup size is (4,4), so each workgroup consists of a 4-by-4 grid. The local invocation ID of an invocation is a pair of numbers in the range 0 to 3. The workgroups are organized in a 4-by-3 grid. The global invocation ID is a pair (x,y) where x is in the range 0 to 15 and y is the range 0 to 11.</p> <p>The structure of the invocations for a job is determined by two things: The size of an individual workgroup is specified in the WGSL source code for the shader, and the number of workgroups in each dimension of the overall job grid is specified in the call to dispatchWorkgroups() on the JavaScript side. For the example shown in the illustration, the workgroup size is (4,4), and the job would be created with a call to dispatchWorkgroups(4,3).</p> <p>The number of invocations in a workgroup is limited to 256. Workgroups as small as a single invocation are allowed. However, 64 is recommended as a reasonable workgroup size in most cases, and I use that value in most of my examples.</p> <p>(You might wonder why workgroups should exist at all. It has to do with the physical structure of GPUs. The processors in a typical GPU are physically divided into groups. Processors in a group are not independent; they all run the same code, and they share some local memory that they can access very quickly. It is possible that using a WebGPU workgroup size that is less than the physical size of processor groups on the GPU might leave some processors in a group with nothing to do. The performance of some programs can be optimized by making use of the physical structure of a GPU. However, I suspect that that optimization really needs to be tuned to a particular GPU structure. For a WebGPU program that is designed to run on multiple platforms, I'm not sure how much optimization can be done. In any case, such optimization is beyond my expertise, and none of my examples use workgroups in a significant way.)</p>"},{"location":"cn/c9/s6/#962-\u8ba1\u7b97\u7740\u8272","title":"9.6.2 \u8ba1\u7b97\u7740\u8272","text":"<p>Compute Shaders</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u7684\u9996\u4e2a\u8ba1\u7b97\u7740\u8272\u5668\u793a\u4f8b\uff0cwebgpu/first_compute_shader.html\uff0c\u662f\u4e4b\u524d\u7a0b\u5e8f\u7684\u4fee\u6539\u7248\uff0c\u4e4b\u524d\u7684\u7a0b\u5e8f\u5c55\u793a\u4e86\u5728\u753b\u5e03\u4e2d\u79fb\u52a8\u5e76\u4ece\u8fb9\u7f18\u53cd\u5f39\u7684\u5f69\u8272\u5706\u76d8\u3002\u5728\u4e4b\u524d\u7684\u7a0b\u5e8f\u4e2d\uff0c\u5706\u76d8\u7684\u4f4d\u7f6e\u5728 JavaScript \u7aef\u66f4\u65b0\uff0c\u7136\u540e\u5199\u5165 GPU \u4e0a\u7684\u7f13\u51b2\u533a\u3002\u65b0\u7248\u672c\u5c06\u8ba1\u7b97\u79fb\u52a8\u5230 GPU \u4e0a\u8fd0\u884c\u7684\u8ba1\u7b97\u7740\u8272\u5668\u4e2d\u3002\u8fd9\u63d0\u9ad8\u4e86\u6548\u7387\uff0c\u56e0\u4e3a GPU \u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\uff0c\u5e76\u4e14\u65b0\u503c\u4e0d\u9700\u8981\u590d\u5236\u5230 GPU\u3002</p> <p>\u4f7f\u7528\u8ba1\u7b97\u7ba1\u7ebf\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u4f7f\u7528\u6e32\u67d3\u7ba1\u7ebf\u7c7b\u4f3c\uff1a\u4e3a\u7740\u8272\u5668\u521b\u5efa WGSL \u6e90\u4ee3\u7801\uff1b\u521b\u5efa\u4e00\u4e2a\u8ba1\u7b97\u7ba1\u7ebf\u6765\u5904\u7406\u7740\u8272\u5668\uff0c\u5e76\u521b\u5efa\u7ba1\u7ebf\u4f7f\u7528\u7684\u7ed1\u5b9a\u7ec4\u548c\u8d44\u6e90\uff1b\u4f7f\u7528\u547d\u4ee4\u7f16\u7801\u5668\u548c\u8ba1\u7b97\u901a\u9053\u7f16\u7801\u5668\u6765\u7ec4\u88c5\u8fd0\u884c\u7ba1\u7ebf\u6240\u9700\u7684\u547d\u4ee4\uff1b\u5c06\u547d\u4ee4\u63d0\u4ea4\u5230 WebGPU \u8bbe\u5907\u961f\u5217\u3002</p> <p>\u5728 WGSL \u6e90\u4ee3\u7801\u4e2d\uff0c\u8ba1\u7b97\u7740\u8272\u5668\u7684\u5165\u53e3\u70b9\u51fd\u6570\u7528 @compute \u6ce8\u89e3\u6807\u8bb0\uff08\u4e0e\u9876\u70b9\u7740\u8272\u5668\u5165\u53e3\u70b9\u7528 @vertex \u6ce8\u89e3\u7684\u65b9\u5f0f\u76f8\u540c\uff09\u3002\u8ba1\u7b97\u7740\u8272\u5668\u5165\u53e3\u70b9\u8fd8\u9700\u8981\u53e6\u4e00\u4e2a\u6ce8\u89e3\u6765\u6307\u5b9a\u5de5\u4f5c\u7ec4\u5927\u5c0f\u3002\u4f8b\u5982\uff0c\u6ce8\u89e3 @workgroup_size(16,8) \u6307\u5b9a\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u5de5\u4f5c\u7ec4\uff0c\u5927\u5c0f\u5728 x \u65b9\u5411\u4e0a\u4e3a 16\uff0c\u5728 y \u65b9\u5411\u4e0a\u4e3a 8\u3002</p> <p>\u8ba1\u7b97\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u6709\u51e0\u4e2a\u5185\u7f6e\u503c\u4f5c\u4e3a\u53c2\u6570\u3002\u6700\u6709\u7528\u7684\u662f @builtin(global_invocation_id)\uff0c\u5b83\u4f5c\u4e3a vec3u \u63d0\u4f9b\u5f53\u524d\u8c03\u7528\u7684\u5168\u5c40\u8c03\u7528 ID\u3002\u5bf9\u4e8e\u4e00\u7ef4\u4efb\u52a1\uff0c\u5411\u91cf\u7684 y \u548c z \u5206\u91cf\u5c06\u662f 1\uff1b\u5bf9\u4e8e\u4e8c\u7ef4\u95ee\u9898\uff0cz \u5206\u91cf\u5c06\u662f 1\u3002\u5c31 WGSL \u800c\u8a00\uff0c\u6240\u6709\u95ee\u9898\u90fd\u662f\u4e09\u7ef4\u7684\uff0c\u7f3a\u5931\u7ef4\u5ea6\u7684\u5927\u5c0f\u8bbe\u7f6e\u4e3a 1\u3002\u8fd9\u91cc\uff0c\u4f8b\u5982\uff0c\u662f\u7b2c\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u5165\u53e3\u70b9\u51fd\u6570\u7684\u5f00\u59cb\uff1a</p> <pre><code>@compute @workgroup_size(64)\nfn main( @builtin(global_invocation_id) global_id : vec3u ) { . . .\n</code></pre> <p>\u8ba1\u7b97\u7740\u8272\u5668\u7684\u5176\u4ed6\u5185\u7f6e\u503c\u5305\u62ec\uff1a</p> <ul> <li>@builtin(local_invocation_id) \u2014 \u5f53\u524d\u8c03\u7528\u5728\u5176\u5de5\u4f5c\u7ec4\u4e2d\u7684\u672c\u5730\u8c03\u7528 ID\u3002</li> <li>@builtin(num_workgroups) \u2014 \u6bcf\u4e2a\u65b9\u5411\u4e0a\u7684\u5de5\u4f5c\u7ec4\u6570\u91cf\u3002\u8fd9\u4e9b\u503c\u53ea\u662f\u542f\u52a8\u5f53\u524d\u4f5c\u4e1a\u7684 dispatchWorkgroups() \u8c03\u7528\u7684\u53c2\u6570\u3002</li> <li>@builtin(workgroup_id) \u2014 \u5f53\u524d\u8c03\u7528\u6240\u5728\u7684\u5de5\u4f5c\u7ec4\u5728\u5de5\u4f5c\u7ec4\u7f51\u683c\u4e2d\u7684\u4f4d\u7f6e\u3002</li> </ul> <p>\u6240\u6709\u8fd9\u4e9b\u7684\u7c7b\u578b\u90fd\u662f vec3u\uff0c\u7f3a\u5931\u7ef4\u5ea6\u7684\u503c\u8bbe\u7f6e\u4e3a 1\u3002</p> <p>\u8ba1\u7b97\u7740\u8272\u5668\u53ef\u4ee5\u901a\u8fc7\u7ed1\u5b9a\u7ec4\u4ece JavaScript \u7aef\u83b7\u53d6\u8f93\u5165\u3002\u6ca1\u6709\u50cf\u9876\u70b9\u7f13\u51b2\u533a\u90a3\u6837\u4e3a\u8ba1\u7b97\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u63d0\u4f9b\u53c2\u6570\u503c\u7684\u4e1c\u897f\uff0c\u56e0\u6b64\u552f\u4e00\u7684\u53c2\u6570\u5c06\u662f\u5185\u7f6e\u503c\u3002\u8be5\u51fd\u6570\u4e5f\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u3002\u8ba1\u7b97\u7740\u8272\u5668\u901a\u8fc7\u5199\u5165\u5b58\u50a8\u7f13\u51b2\u533a\u6216\u5b58\u50a8\u7eb9\u7406\uff08\u5b83\u4eec\u662f\u7ed1\u5b9a\u7ec4\u7684\u4e00\u90e8\u5206\uff09\u6765\u4ea7\u751f\u8f93\u51fa\u3002</p> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u52a8\u753b\u7684\u6570\u636e\u5305\u62ec\u79fb\u52a8\u5706\u76d8\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6\u3002\u8ba1\u7b97\u7740\u8272\u5668\u5728\u52a8\u753b\u5e27\u4e4b\u95f4\u8fd0\u884c\u4ee5\u66f4\u65b0\u4f4d\u7f6e\u3002\u5f53\u5706\u76d8\u4ece\u8fb9\u7f18\u53cd\u5f39\u65f6\uff0c\u5b83\u4f1a\u53cd\u8f6c\u65b9\u5411\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5706\u76d8\u7684\u901f\u5ea6\u4e5f\u4f1a\u6539\u53d8\u3002\u4f4d\u7f6e\u548c\u901f\u5ea6\u7684 x \u548c y \u5206\u91cf\u9700\u8981\u66f4\u65b0\u3002\u4e24\u4e2a\u5206\u91cf\u7684\u8ba1\u7b97\u76f8\u540c\u3002\u8ba1\u7b97\u7740\u8272\u5668\u7684\u4e00\u4e2a\u8c03\u7528\u7684\u4efb\u52a1\u662f\u66f4\u65b0\u4e00\u4e2a\u5706\u76d8\u5728 x \u6216 y \u65b9\u5411\u4e0a\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6\u3002\u5982\u679c\u6709 N \u4e2a\u5706\u76d8\uff0c\u6211\u4eec\u9700\u8981 2*N \u4e2a\u7740\u8272\u5668\u8c03\u7528\u3002</p> <p>\u4f4d\u7f6e\u548c\u901f\u5ea6\u5b58\u50a8\u5728\u4e24\u4e2a\u5b58\u50a8\u7f13\u51b2\u533a\u4e2d\uff0c\u5728\u7740\u8272\u5668\u7a0b\u5e8f\u4e2d\u7531\u7c7b\u578b\u4e3a <code>array&lt;32&gt;</code> \u7684\u53d8\u91cf\u8868\u793a\u3002\u521d\u59cb\u503c\u7531\u7a0b\u5e8f\u7684 JavaScript \u7aef\u5199\u5165\u7f13\u51b2\u533a\u3002\u4e4b\u540e\uff0c\u7f13\u51b2\u533a\u5b8c\u5168\u5728 GPU \u7aef\u4f7f\u7528\u3002\u53e6\u4e00\u4e2a\u5b58\u50a8\u7f13\u51b2\u533a\u4fdd\u5b58\u4e86\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u6d6e\u70b9\u6570\u7684\u6570\u7ec4\uff0c\u63d0\u4f9b\u8ba1\u7b97\u6240\u9700\u7684\u5176\u4ed6\u6570\u636e\uff1a\u5706\u76d8\u7684\u6570\u91cf\u3001\u5706\u76d8\u7684\u534a\u5f84\u548c\u81ea\u4e0a\u6b21\u66f4\u65b0\u4ee5\u6765\u7684\u65f6\u95f4\u53d8\u5316\u3002\u7740\u8272\u5668\u53d8\u91cf\u58f0\u660e\u4e3a\uff1a</p> <pre><code>@group(0) @binding(0) var&lt;storage,read_write&gt; diskOffsets : array&lt;f32&gt;;\n@group(0) @binding(1) var&lt;storage,read_write&gt; diskVelocities : array&lt;f32&gt;;\n@group(0) @binding(2) var&lt;storage&gt; params : array&lt;f32,3&gt;;\n</code></pre> <p>\u7531\u4e8e\u5185\u5bb9\u5c06\u88ab\u66f4\u65b0\uff0c\u524d\u4e24\u4e2a\u6570\u7ec4\u9700\u8981 read_write \u8bbf\u95ee\u6743\u9650\u3002\u8981\u8c03\u7528\u7740\u8272\u5668\uff0c\u5c06\u9700\u8981\u4e00\u4e2a\u7ba1\u7ebf\u548c\u4e00\u4e2a\u7ed1\u5b9a\u7ec4\u3002\u8ba1\u7b97\u7740\u8272\u5668\u7684\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u76f8\u5f53\u7b80\u5355\u3002\u5b83\u6709\u4e00\u4e2a layout \u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a compute \u5c5e\u6027\u6765\u6307\u5b9a\u7740\u8272\u5668\u6a21\u5757\u548c\u7740\u8272\u5668\u5165\u53e3\u70b9\u51fd\u6570\u3002\u7ba1\u7ebf\u672c\u8eab\u662f\u4f7f\u7528 device.createComputePipeline() \u51fd\u6570\u521b\u5efa\u7684\u3002\u4ee5\u4e0b\u662f\u793a\u4f8b\u7a0b\u5e8f\u5982\u4f55\u521b\u5efa\u8ba1\u7b97\u7ba1\u7ebf\u548c\u5c06\u9644\u52a0\u5230\u7ba1\u7ebf\u7684\u7ed1\u5b9a\u7ec4\uff1a</p> <pre><code>function createComputePipelineConfig() {\n\n    let pipelineDescriptor = {\n        compute: {\n            module: computeShader,\n            entryPoint: \"main\"\n        },\n        layout: \"auto\"\n    };\n\n    computePipeline = device.createComputePipeline(pipelineDescriptor);\n\n    computeBindGroup = device.createBindGroup({ \n        layout: computePipeline.getBindGroupLayout(0),\n        entries: [\n            {    // \u5706\u76d8\u7684\u4f4d\u7f6e\u3002\n                binding: 0,\n                resource: {buffer: offsetBuffer} \n            },\n            {    // \u5706\u76d8\u7684\u901f\u5ea6\u3002\n                binding: 1,\n                resource: {buffer: velocityBuffer} \n            },\n            {   // \u8ba1\u7b97\u6240\u9700\u7684\u5176\u4ed6\u6570\u636e\u3002\n                binding: 2,\n                resource: {buffer: paramsBuffer} \n            }\n        ]\n    });\n}\n</code></pre> <p>\u7ba1\u7ebf\u7531 JavaScript \u51fd\u6570\u8fd0\u884c\uff0c\u8be5\u51fd\u6570\u5728\u52a8\u753b\u5e27\u4e4b\u95f4\u8c03\u7528\u3002\u8ba1\u7b97\u901a\u9053\u7f16\u7801\u5668\u65b9\u6cd5 <code>dispatchWorkgroups()</code> \u88ab\u7528\u6765\u8c03\u7528\u7740\u8272\u5668\uff0c\u53c2\u6570\u6307\u5b9a\u5de5\u4f5c\u7ec4\u7684\u6570\u91cf\u3002\u6211\u4eec\u9700\u8981 <code>2*DISK_COUNT</code> \u4e2a\u7740\u8272\u5668\u8c03\u7528\uff0c\u5de5\u4f5c\u7ec4\u7684\u5927\u5c0f\u662f 64\uff0c\u6240\u4ee5\u6211\u4eec\u81f3\u5c11\u9700\u8981 <code>(2*DISK_COUNT)/64</code> \u4e2a\u5de5\u4f5c\u7ec4\u3002\u7531\u4e8e\u5de5\u4f5c\u7ec4\u7684\u6570\u91cf\u5fc5\u987b\u662f\u6574\u6570\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 <code>Math.ceil()</code> \u5411\u4e0a\u53d6\u6574\u5230\u6574\u6570\u503c\u3002</p> <pre><code>/**\n *  \u4f7f\u7528\u8ba1\u7b97\u901a\u9053\u6765\u66f4\u65b0\u5706\u76d8\u4f4d\u7f6e\uff0c\u57fa\u4e8e\u5b83\u4eec\u7684\u901f\u5ea6\u548c\u81ea\u4e0a\u4e00\u52a8\u753b\u5e27\u4ee5\u6765\u7684\u65f6\u95f4\u53d8\u5316\u3002\n *  \u901f\u5ea6\u4e5f\u53ef\u80fd\u6539\u53d8\u3002\u53c2\u6570 dt \u662f\u65f6\u95f4\u7684\u53d8\u5316\u3002\n */\nfunction update(dt) {\n\n    /* \u5c06\u65f6\u95f4\u53d8\u5316\u5199\u5165 paramsBuffer \u7684\u7b2c\u4e09\u4e2a\u4f4d\u7f6e */\n\n    device.queue.writeBuffer(paramsBuffer,8,new Float32Array([dt]));\n\n    /* \u7f16\u7801\u4e00\u4e2a\u8ba1\u7b97\u901a\u9053\u6765\u5b8c\u6210\u5de5\u4f5c\u3002 */\n\n    let commandEncoder = device.createCommandEncoder();\n    let passEncoder = commandEncoder.beginComputePass();\n    passEncoder.setPipeline(computePipeline);\n    passEncoder.setBindGroup(0, computeBindGroup);\n    let workGroupCount = Math.ceil( (2*DISK_COUNT) / 64 );\n    passEncoder.dispatchWorkgroups( workGroupCount );\n    passEncoder.end();\n\n    /* \u5c06\u5de5\u4f5c\u63d0\u4ea4\u5230 GPU \u8bbe\u5907\u961f\u5217\u3002 */\n\n    device.queue.submit([commandEncoder.finish()]);\n}\n</code></pre> <p>\u5982\u4f60\u6240\u89c1\uff0c\u6240\u6709\u8fd9\u4e9b\u4e0e\u4f7f\u7528\u6e32\u67d3\u7ba1\u7ebf\u548c\u6e32\u67d3\u901a\u9053\u7684\u5de5\u4f5c\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>\u6211\u7684\u7b2c\u4e8c\u4e2a\u8ba1\u7b97\u7740\u8272\u5668\u793a\u4f8b\u662f webgpu/life_3.html\uff0c\u5b83\u5b9e\u73b0\u4e86\u5eb7\u5a01\u7684\u751f\u547d\u6e38\u620f\u3002\u5b83\u662f life_1.html \u7684\u4fee\u6539\u7248\uff0c\u89c1 9.5.5\u5c0f\u8282\u3002\u539f\u59cb\u7248\u672c\u5728\u663e\u793a\u5f53\u524d\u4ee3\u7684\u540c\u65f6\uff0c\u5728\u7247\u6bb5\u7740\u8272\u5668\u4e2d\u8ba1\u7b97\u4e86\u68cb\u76d8\u7684\u65b0\u4ee3\u3002\u65b0\u7248\u672c\u5c06\u8ba1\u7b97\u79fb\u52a8\u5230\u8ba1\u7b97\u7740\u8272\u5668\u4e2d\u3002\u8ba1\u7b97\u7740\u8272\u5668\u7248\u672c\u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u540c\u7684\u8bdd\uff0c\u5b9e\u9645\u4e0a\u662f\u6548\u7387\u66f4\u4f4e\u7684\uff0c\u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u63d0\u9192\uff0c\u5373\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u5b8c\u6210\u8ba1\u7b97\u5de5\u4f5c\u3002</p> <p>\u751f\u547d\u6e38\u620f\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u4e8c\u7ef4\u95ee\u9898\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8c03\u7528\u5904\u7406\u4e8c\u7ef4\u68cb\u76d8\u7684\u4e00\u4e2a\u5355\u5143\u683c\u3002\u5de5\u4f5c\u7ec4\u5927\u5c0f\u6709\u4e24\u4e2a\u7ec4\u6210\u90e8\u5206\uff0cdispatchWorkgroups() \u5c06\u9700\u8981\u4e24\u4e2a\u53c2\u6570\u3002\u6211\u4f7f\u7528 (8,8) \u4f5c\u4e3a\u5de5\u4f5c\u7ec4\u5927\u5c0f\uff0c\u6bcf\u4e2a\u5de5\u4f5c\u7ec4\u6709 64 \u4e2a\u8c03\u7528\u3002</p> <p>\u8fd9\u4e2a\u793a\u4f8b\u7279\u522b\u5c55\u793a\u4e86\u8ba1\u7b97\u7740\u8272\u5668\u53ef\u4ee5\u4e0e\u7eb9\u7406\u4e00\u8d77\u5de5\u4f5c\u3002\u68cb\u76d8\u7684\u5f53\u524d\u72b6\u6001\u5b58\u50a8\u5728\u4e00\u4e2a\u7eb9\u7406\u4e2d\u3002\u65b0\u72b6\u6001\u5199\u5165\u7b2c\u4e8c\u4e2a\u7eb9\u7406\u3002\u4e24\u4e2a\u7eb9\u7406\u90fd\u662f\u8ba1\u7b97\u7ba1\u7ebf\u7684\u8d44\u6e90\u3002\u7b2c\u4e00\u4e2a\u7528\u4e8e\u8f93\u5165\uff0c\u662f\u7c7b\u578b\u4e3a texture \u7684\u8d44\u6e90\uff1b\u7b2c\u4e8c\u4e2a\u7528\u4e8e\u8f93\u51fa\uff0c\u662f\u7c7b\u578b\u4e3a storage texture \u7684\u8d44\u6e90\u3002\u8ba1\u7b97\u7740\u8272\u5668\u53ef\u4ee5\u4f7f\u7528 <code>textureLoad()</code> \u4ece\u7eb9\u7406\u8d44\u6e90\u4e2d\u8bfb\u53d6\uff0c\u5e76\u53ef\u4ee5\u4f7f\u7528 <code>textureStore()</code> \u5199\u5165\u5b58\u50a8\u7eb9\u7406\u8d44\u6e90\u3002\uff08\u6709\u5173\u5b58\u50a8\u7eb9\u7406\u3001<code>textureLoad()</code> \u548c <code>textureStore()</code> \u7684\u4fe1\u606f\uff0c\u89c1 9.5.5\u5c0f\u8282\u3002\uff09\u8bf7\u6ce8\u610f\uff0c\u8ba1\u7b97\u7740\u8272\u5668\u4e0d\u80fd\u4f7f\u7528 <code>textureSample()</code>\u3002</p> <p>\u4ee5\u4e0b\u662f\u8ba1\u7b97\u7740\u8272\u5668\u7684\u6e90\u4ee3\u7801\uff0c\u7701\u7565\u4e86\u8ba1\u7b97\u7684\u7ec6\u8282\uff1a</p> <pre><code>@group(0) @binding(0) var currentGen : texture_2d&lt;u32&gt;;\n@group(0) @binding(1) var nextGen : texture_storage_2d&lt;r32uint,write&gt;;\n\n@compute @workgroup_size(8,8)\nfn main( @builtin(global_invocation_id) id: vec3u) {\nlet boardSize = textureDimensions(currentGen);\nlet cell = id.xy; // \u6b63\u5728\u5904\u7406\u7684\u5355\u5143\u683c\u7684\u884c\u548c\u5217\u3002\nif (cell.x &gt;= boardSize.x || cell.y &gt;= boardSize.y) {\n    return;  // \u5206\u914d\u7684\u5355\u5143\u683c\u5728\u68cb\u76d8\u5916\u3002\n}\nlet alive = textureLoad(currentGen, cell, 0).r;\n    .\n    . // (\u8ba1\u7b97\u6b64\u5355\u5143\u683c\u7684\u65b0 \"alive\" \u503c\u3002)\n    .\ntextureStore( nextGen, cell, vec4u(newAlive,0,0,1) );\n}\n</code></pre> <p>\u8c03\u5ea6\u5de5\u4f5c\u7ec4\u65f6\uff0c\u6211\u4eec\u9700\u8981\u7684\u8c03\u7528\u6570\u91cf\u53d6\u51b3\u4e8e\u68cb\u76d8\u7684\u5927\u5c0f\uff0c\u8fd9\u4e0e\u753b\u5e03\u7684\u5927\u5c0f\u76f8\u540c\u3002\u540c\u6837\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u8c03\u7528\u6570\u91cf\u9664\u4ee5\u5de5\u4f5c\u7ec4\u5927\u5c0f\u5e76\u5411\u4e0a\u53d6\u6574\u5230\u6574\u6570\u503c\uff1a</p> <pre><code>/**\n *  \u8ba1\u7b97\u4e0b\u4e00\u4ee3\u5e76\u5c06\u5176\u590d\u5236\u5230 currentGeneration \u7eb9\u7406\u3002\n *  \uff08\u53ea\u6709\u5728\u6e32\u67d3\u7740\u8272\u5668\u4e2d\u4f7f\u7528 currentGeneration\u3002\uff09\n */\nfunction computeNextGeneration() {\nlet commandEncoder = device.createCommandEncoder();\nlet passEncoder = commandEncoder.beginComputePass();\npassEncoder.setPipeline(computePipeline);\npassEncoder.setBindGroup(0,computeBindGroup);\nlet workgroupCountX = Math.ceil(context.canvas.width/8);\nlet workgroupCountY = Math.ceil(context.canvas.height/8);\npassEncoder.dispatchWorkgroups( workgroupCountX, workgroupCountY );\npassEncoder.end();\ncommandEncoder.copyTextureToTexture(  // \u5c06\u7ed3\u679c\u590d\u5236\u5230 nextGeneration\u3002\n    { texture: nextGeneration },\n    { texture: currentGeneration },\n    [ context.canvas.width, context.canvas.height ]\n);\nlet commandBuffer = commandEncoder.finish();\ndevice.queue.submit([commandBuffer]);\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\u8c03\u7528\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 <code>commandEncoder.copyTextureToTexture()</code>\u3002\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff0c\u63d0\u4f9b\u6e90\u7eb9\u7406\u3001\u76ee\u6807\u7eb9\u7406\u548c\u8981\u590d\u5236\u533a\u57df\u7684\u5927\u5c0f\u3002\u524d\u4e24\u4e2a\u53c2\u6570\u662f\u5bf9\u8c61\uff0c\u6709\u53ef\u9009\u53c2\u6570\u6765\u6307\u5b9a mipmap \u7ea7\u522b\u4ee5\u53ca\u8981\u590d\u5236\u533a\u57df\u7684\u5de6\u4e0a\u89d2\u6216\u8d77\u59cb\u70b9\u3002</p> <p>\u5728\u7b2c\u4e00\u4e2a\u8ba1\u7b97\u7740\u8272\u5668\u793a\u4f8b\u4e2d\uff0c\u7740\u8272\u5668\u4ece\u7f13\u51b2\u533a\u8bfb\u53d6\u503c\uff0c\u5e76\u5c06\u65b0\u503c\u5199\u56de\u540c\u4e00\u4e2a\u7f13\u51b2\u533a\u3002\u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u4f7f\u7528\u4e86\u4e24\u4e2a\u7eb9\u7406\uff0c\u4e00\u4e2a\u7528\u4e8e\u8f93\u5165\uff0c\u4e00\u4e2a\u7528\u4e8e\u8f93\u51fa\u3002\u4f60\u53ef\u80fd\u4f1a\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u4f7f\u7528\u4e00\u4e2a\u7eb9\u7406\uff0c\u5e76\u8ba9\u7740\u8272\u5668\u66f4\u65b0\u8be5\u7eb9\u7406\u4e2d\u7684\u503c\u3002\uff08\u5b9e\u9645\u4e0a\u6211\u4eec\u4e0d\u80fd\u5bf9\u7eb9\u7406\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u5728\u540c\u4e00\u4e2a\u7eb9\u7406\u4e0a\u4f7f\u7528 <code>textureLoad()</code> \u548c <code>textureStore()</code>\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5b58\u50a8\u7f13\u51b2\u533a\u800c\u4e0d\u662f\u7eb9\u7406\u6765\u5b58\u50a8\u68cb\u76d8\u7684\u72b6\u6001\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\uff09\u5728\u751f\u547d\u6e38\u620f\u4e2d\uff0c\u7740\u8272\u5668\u8c03\u7528\u5fc5\u987b\u8bfb\u53d6\u5355\u5143\u683c\u7684\u516b\u4e2a\u90bb\u5c45\u7684\u72b6\u6001\u3002\u95ee\u9898\u662f\u5176\u4ed6\u8c03\u7528\u6b63\u5728\u4e3a\u8fd9\u4e9b\u90bb\u5c45\u5199\u65b0\u72b6\u6001\u3002\u5982\u679c\u5b83\u4eec\u5c06\u65b0\u503c\u5199\u5165\u65e7\u503c\u5b58\u50a8\u7684\u76f8\u540c\u8d44\u6e90\uff0c\u5c31\u6ca1\u6709\u529e\u6cd5\u786e\u4fdd\u8c03\u7528\u8bfb\u53d6\u7684\u662f\u90bb\u5c45\u7684\u65e7\u503c\u800c\u4e0d\u662f\u65b0\u503c\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u5f3a\u5236\u6240\u6709\u8bfb\u53d6\u5728\u4efb\u4f55\u5199\u5165\u5b8c\u6210\u4e4b\u524d\u5b8c\u6210\uff0c\u90a3\u5c06\u5f88\u597d\u3002WebGPU \u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5728\u5355\u4e2a\u5de5\u4f5c\u7ec4\u5185\u5b9e\u73b0\u90a3\u79cd\u4e8b\u60c5\uff0c\u4f46\u5b83\u6ca1\u6709\u529e\u6cd5\u9488\u5bf9\u6574\u4e2a\u8ba1\u7b97\u4f5c\u4e1a\u6765\u5b9e\u73b0\u3002\u79fb\u52a8\u5706\u76d8\u793a\u4f8b\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7740\u8272\u5668\u8c03\u7528\u90fd\u5904\u7406\u6570\u636e\u6570\u7ec4\u7684\u5355\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u4e0d\u4f9d\u8d56\u4e8e\u5176\u4ed6\u8c03\u7528\u6240\u5199\u7684\u503c\u3002</p> <p>My first compute shader example, webgpu/first_compute_shader.html, is a modification of earlier programs that showed colored disks moving in the canvas and bouncing off the edges. In the earlier programs, the positions of the disks were updated on the JavaScript side and then written to a buffer on the GPU. The new version moves that computation into a compute shader that runs on the GPU. This increases efficiency both because the GPU parallelizes the computation and because the new values do not have be copied to the GPU.</p> <p>Working with compute pipelines is similar to working with render pipelines: Create the WGSL source code for the shader; create a compute pipeline to process the shader and create the bind groups and resources used by the pipeline; use a command encoder and compute pass encoder to assemble the commands that are needed to run the pipeline; and submit the commands to the WebGPU device queue.</p> <p>In WGSL source code, the entry-point function for a compute shader is marked by the annotation @compute (in the same way that a vertex shader entry-point is annotated with @vertex). The compute shader entry-point also requires another annotation to specify the workgroup size. For example, the annotation @workgroup_size(16,8) specifies a two-dimensional workgroup with size 16 in the x direction and 8 in the y direction.</p> <p>Several builtin values are available as parameters to a compute shader entry-point function. The most useful is probably @builtin(global_invocation_id), which gives the global invocation ID of the current invocation as a vec3u. For a one-dimensional task, the y and z component of the vector will be 1; for a two-dimensional problem, the z component will be 1. As far as WGSL is concerned, all problems are three-dimensional, with the sizes for missing dimensions set to 1. Here, for example, is the start of the entry-point function from the first sample program:</p> <pre><code>@compute @workgroup_size(64)\nfn main( @builtin(global_invocation_id) global_id : vec3u ) { . . .\n</code></pre> <p>Other builtins for the compute shader include:</p> <ul> <li>@builtin(local_invocation_id) \u2014 The local invocation ID of the current invocation in its workgroup.</li> <li>@builtin(num_workgroups) \u2014 The number of workgroups in each direction. The values are just the parameters from the call to dispatchWorkgroups() that started the current job.</li> <li>@builtin(workgroup_id) \u2014 The position in the grid of workgroups of the workgroup that contains the current invocation.</li> </ul> <p>All of these are of type vec3u, with values for missing dimensions set to 1.</p> <p>The compute shader can get input from the JavaScript side in bind groups. There is nothing like a vertex buffer to provide parameter values for the compute shader entry point function, so the only parameters will be builtins. The function also has no return type. A compute shader produces output by writing it to a storage buffer or storage texture that is part of a bind group.</p> <p>In the sample program, the data for the animation consists of the positions of the moving disks and their velocities. The compute shader is run between frames of the animation to update the positions. When a disk bounces off an edge, it reverses direction, and in that case the velocity of the disk also changes. The x and y components of the positions and velocities have to be updated. The computation is the same for both components. The task for one invocation of the compute shader is to update the position and velocity of one disk in either the x or y direction. If there are N disks, we need 2*N invocations of the shader.</p> <p>The positions and velocities are stored in two storage buffers, which are represented in the shader program by variables of type <code>array&lt;32&gt;</code>. Initial values are written to the buffers by the JavaScript side of the program. After that, the buffers are used entirely on the GPU side. An additional storage buffer holds an array of three floats giving other data needed for the computation: the number of disks, the radius of the disks, and the change in time since the previous update. The shader variables are declared as</p> <pre><code>@group(0) @binding(0) var&lt;storage,read_write&gt; diskOffsets : array&lt;f32&gt;;\n@group(0) @binding(1) var&lt;storage,read_write&gt; diskVelocities : array&lt;f32&gt;;\n@group(0) @binding(2) var&lt;storage&gt; params : array&lt;f32,3&gt;;\n</code></pre> <p>The first two arrays need read_write access since their contents will be updated. To call the shader, a pipeline and a bind group will be needed. The pipeline descriptor for a compute shader is fairly simple. It has a layout property, and a compute property to specify the shader module and shader entry point function. The pipeline itself is created with the function device.createComputePipeline(). Here is how the sample program creates the compute pipeline and a bind group that will be attached to the pipeline:</p> <pre><code>function createComputePipelineConfig() {\n\nlet pipelineDescriptor = {\n    compute: {\n        module: computeShader,\n        entryPoint: \"main\"\n    },\n    layout: \"auto\"\n};\n\ncomputePipeline = device.createComputePipeline(pipelineDescriptor);\n\ncomputeBindGroup = device.createBindGroup({ \n    layout: computePipeline.getBindGroupLayout(0),\n    entries: [\n        {    // For positions of the disks.\n            binding: 0,\n            resource: {buffer: offsetBuffer} \n        },\n        {    // For velocities of the disks.\n            binding: 1,\n            resource: {buffer: velocityBuffer} \n        },\n        {   // Other data for the computation.\n            binding: 2,\n            resource: {buffer: paramsBuffer} \n        }\n    ]\n});\n}\n</code></pre> <p>The pipeline is run by a JavaScript function that is called between frames of the animation. The compute pass encoder method <code>dispatchWorkgroups()</code> is used to invoke the shader, with a parameter that specifies the number of workgroups. We need <code>2*DISK_COUNT invocations</code> of the shader, and the size of a workgroup is 64, so we need at least <code>(2*DISK_COUNT)/64</code> workgroups. Since the number of workgroups must be an integer, we need to round the number up to an integer value using <code>Math.ceil()</code>.</p> <pre><code>/**\n *  Use a compute pass to update the disk positions, based on their\n *  velocities and the change in time since the previous animation frame.\n *  Velocities can also change.  The parameter, dt, is the change in time.\n */\nfunction update(dt) {\n\n/* Write the change in time to the third position in the paramsBuffer */\n\ndevice.queue.writeBuffer(paramsBuffer,8,new Float32Array([dt]));\n\n/* Encode a compute pass that will do the work. */\n\nlet commandEncoder = device.createCommandEncoder();\nlet passEncoder = commandEncoder.beginComputePass();\npassEncoder.setPipeline(computePipeline);\npassEncoder.setBindGroup(0, computeBindGroup);\nlet workGroupCount = Math.ceil( (2*DISK_COUNT) / 64 );\npassEncoder.dispatchWorkgroups( workGroupCount );\npassEncoder.end();\n\n/* Submit the work to the GPU device queue. */\n\ndevice.queue.submit([commandEncoder.finish()]);\n}\n</code></pre> <p>As you can see, all of this is very similar to working with render pipelines and render passes.</p> <p>My second compute shader example is webgpu/life_3.html, which implements Conway's Game of Life. It is a modification of life_1.html from Subsection 9.5.5. The original version computed the new generation of the board in the fragment shader, at the same time that it was displaying the current generation. The new version moves that computation into a compute shader. The compute shader version is, if anything, less efficient than the original version\u2014which can be taken as a reminder that fragment shaders can do computational work.</p> <p>Life is naturally a two-dimensional problem, since each invocation processes one cell of a two-dimensional board. The workgroup size has two components, and dispatchWorkgroups() will need two parameters. I use (8,8) as the workgroup size, giving 64 invocations per workgroup.</p> <p>This example shows, in particular, that compute shaders can work with textures. The current state of the board is stored in a texture. The new state is written to a second texture. Both textures are resources for the compute pipeline. The first, which is used for input, is a resource of type texture; the second, which is used for output, is a resource of type storage texture. A compute shader can use <code>textureLoad()</code> to read from a texture resource, and it can use <code>textureStore()</code> to write to a storage texture resource. (See Subsection 9.5.5 for information about storage textures, <code>textureLoad()</code>, and <code>textureStore()</code>.) Note that a compute shader cannot use <code>textureSample()</code>.</p> <p>Here is the source code for the compute shader, omitting the details of the computation:</p> <pre><code>@group(0) @binding(0) var currentGen : texture_2d&lt;u32&gt;;\n@group(0) @binding(1) var nextGen : texture_storage_2d&lt;r32uint,write&gt;;\n\n@compute @workgroup_size(8,8)\nfn main( @builtin(global_invocation_id) id: vec3u) {\nlet boardSize = textureDimensions(currentGen);\nlet cell = id.xy; // Row and column for the cell that is being processed.\nif (cell.x &gt;= boardSize.x || cell.y &gt;= boardSize.y) {\n    return;  // The assigned cell is outside the board.\n}\nlet alive = textureLoad(currentGen, cell, 0).r;\n        .\n        . // (Compute new \"alive\" value for this cell.)\n        .\ntextureStore( nextGen, cell, vec4u(newAlive,0,0,1) );\n}\n</code></pre> <p>When dispatching workgroups, the number of invocations that we need depends on the size of the board, which is the same as the size of the canvas. Again, we have to divide the number of invocations by the workgroup size and round up to an integer value:</p> <pre><code>/**\n *  Compute the next generation and copy it to the currentGeneration texture.\n *  (Only currentGenertion is used in the render shader.)\n */\nfunction computeNextGeneration() {\nlet commandEncoder = device.createCommandEncoder();\nlet passEncoder = commandEncoder.beginComputePass();\npassEncoder.setPipeline(computePipeline);\npassEncoder.setBindGroup(0,computeBindGroup);\nlet workgroupCountX = Math.ceil(context.canvas.width/8);\nlet workgroupCountY = Math.ceil(context.canvas.height/8);\npassEncoder.dispatchWorkgroups( workgroupCountX, workgroupCountY );\npassEncoder.end();\ncommandEncoder.copyTextureToTexture(  // Copy result to nextGeneration.\n    { texture: nextGeneration },\n    { texture: currentGeneration },\n    [ context.canvas.width, context.canvas.height ]\n);\nlet commandBuffer = commandEncoder.finish();\ndevice.queue.submit([commandBuffer]);\n}\n</code></pre> <p>Note the call to a new function, commandEncoder.copyTextureToTexture(). This function takes three parameters, giving the source texture, the destination texture, and the size of the region to be copied. The first two parameters are objects, with optional parameters to specify the mipLevel and the top-left corner, or origin, of the region to be copied.</p> <p>In the first compute shader example, the shader reads values from a buffer and writes new values back to the same buffer. In the second, two textures are used, one for input and one for output. You might wonder why we didn't use one texture and let the shader update the values in that texture. (In fact we couldn't do that with textures, since there is no way to use <code>textureLoad()</code> and <code>textureStore()</code> on the same texture, but we could solve that problem by using a storage buffer instead of a texture to hold the state of the board.) In the Life game, a shader invocation has to read the states of the cell's eight neighbors. The problem is that other invocations are writing new states for those neighbors. If they are writing the new values to same resource where old values are stored, there is no way to ensure that an invocation reads the old values of the neighbors rather than the new values. It would be nice if we could force all of the reads to be done before any of the writes are done. WebGPU has a way to do that sort of thing within a single workgroup, but it has no way to do it for a compute job as a whole. The moving disk example doesn't have this problem because each invocation of the shader works on a single element of the data array and does not depend on values being written by other invocations.</p>"},{"location":"cn/c9/s6/#963-\u6a21\u62df","title":"9.6.3 \u6a21\u62df","text":"<p>A Simulation</p> \u4e2d\u6587\u82f1\u6587 <p>\u8ba1\u7b97\u673a\u7ecf\u5e38\u7528\u4e8e\u8fdb\u884c\u7269\u7406\u6a21\u62df\uff0c\u8bb8\u591a\u6a21\u62df\u90fd\u53ef\u4ee5\u4ece GPU \u7684\u5e76\u884c\u6027\u4e2d\u53d7\u76ca\u3002\u793a\u4f8b\u7a0b\u5e8f webgpu/diffusion.html \u662f\u4e00\u4e2a\u76f8\u5f53\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c55\u793a\u4e86\u53ef\u4ee5\u5b9e\u73b0\u4ec0\u4e48\u3002\u8be5\u7a0b\u5e8f\u663e\u793a\u4e86\u8bb8\u591a\u767d\u8272\u70b9\u968f\u673a\u79fb\u52a8\u3002\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u4e2a\u50cf\u7d20\u3002\u8fd0\u52a8\u662f\u4e00\u79cd\u201c\u968f\u673a\u6e38\u8d70\u201d\uff1a\u5728\u6bcf\u4e2a\u65f6\u95f4\u6b65\uff0c\u7c92\u5b50\u9009\u62e9\u4e00\u4e2a\u968f\u673a\u65b9\u5411\u2014\u2014\u4e0a\u3001\u4e0b\u3001\u5de6\u6216\u53f3\u2014\u2014\u5e76\u671d\u90a3\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u4e2a\u50cf\u7d20\u3002\u8fd8\u6709\u9ec4\u8272\u548c\u9752\u8272\u7684\u7c92\u5b50\uff0c\u5b83\u4eec\u4e0d\u79fb\u52a8\u3002\u6700\u521d\uff0c\u5728\u5de6\u4fa7\u6709\u4e00\u6392\u9ec4\u8272\u7c92\u5b50\uff0c\u5728\u53f3\u4fa7\u6709\u4e00\u6392\u9752\u8272\u7c92\u5b50\u3002\u5f53\u4e00\u4e2a\u767d\u8272\u7c92\u5b50\u78b0\u5230\u4e00\u4e2a\u9ec4\u8272\u6216\u9752\u8272\u7c92\u5b50\u65f6\uff0c\u5b83\u4f1a\u53d8\u8272\u4ee5\u5339\u914d\u5e76\u505c\u6b62\u79fb\u52a8\u3002\u7ed3\u679c\u662f\u5728\u6709\u8da3\u7684\u5206\u652f\u6a21\u5f0f\u4e2d\u79ef\u7d2f\u4e86\u6709\u8272\u7684\u7c92\u5b50\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u6709\u8da3\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6f14\u793a\u7248\u672c\uff1a</p> <p></p> <p>\uff08\u8fd9\u4e2a\u6a21\u62df\u7684\u60f3\u6cd5\u4e0d\u662f\u6211\u7684\u539f\u521b\u3002\u6211\u5728\u5f88\u4e45\u4ee5\u524d\u8bfb\u5230\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6a21\u62df\uff0c\u5c3d\u7ba1\u6211\u4e0d\u8bb0\u5f97\u5728\u54ea\u91cc\u4e86\u3002\uff09</p> <p>\u4e00\u4e2a\u6709\u8da3\u7684\u70b9\u662f\u5728\u8ba1\u7b97\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u4f2a\u968f\u673a\u6570\u3002WGSL \u7740\u8272\u5668\u8bed\u8a00\u4e2d\u6ca1\u6709\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u4f46\u662f\uff0c\u5176\u4ed6\u8bed\u8a00\u4f7f\u7528\u7b80\u5355\u7684\u6570\u5b66\u516c\u5f0f\u4ea7\u751f\u4f2a\u968f\u673a\u6570\u3002\u4ece\u521d\u59cb\u7684\u201c\u79cd\u5b50\u201d\u503c\u5f00\u59cb\uff0c\u516c\u5f0f\u4ea7\u751f\u4e86\u4e00\u7cfb\u5217\u6570\u5b57\u3002\u5e8f\u5217\u5b8c\u5168\u7531\u521d\u59cb\u79cd\u5b50\u503c\u51b3\u5b9a\uff0c\u4f46\u4ece\u7edf\u8ba1\u5b66\u4e0a\u770b\u662f\u968f\u673a\u7684\u3002\u6211\u7684\u7a0b\u5e8f\u91c7\u7528\u4e86 Java \u7f16\u7a0b\u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u516c\u5f0f\u3002\u6bcf\u4e2a\u7c92\u5b50\u8fd0\u884c\u81ea\u5df1\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u4ece\u4e0d\u540c\u7684\u79cd\u5b50\u503c\u5f00\u59cb\u3002\u79cd\u5b50\u503c\u662f\u4f7f\u7528 JavaScript \u7684 Math.random() \u51fd\u6570\u5728 JavaScript \u7aef\u521b\u5efa\u7684\u3002</p> <p>\u8be5\u7a0b\u5e8f\u4f7f\u7528\u4e24\u4e2a\u5b58\u50a8\u7f13\u51b2\u533a\uff0c\u4e00\u4e2a\u4fdd\u5b58\u6709\u5173\u6bcf\u4e2a\u7c92\u5b50\u7684\u4fe1\u606f\uff0c\u53e6\u4e00\u4e2a\u4fdd\u5b58\u753b\u5e03\u4e0a\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u4fe1\u606f\u3002\u7c92\u5b50\u4fe1\u606f\u5305\u62ec\u7c92\u5b50\u7684\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u5f53\u524d\u79cd\u5b50\u503c\u3001\u7c92\u5b50\u7684 x \u548c y \u5750\u6807\u4ee5\u53ca\u7c92\u5b50\u7684\u989c\u8272\u3002\u989c\u8272\u88ab\u7f16\u7801\u4e3a\u6574\u6570\uff1a1\u30012 \u6216 3 \u5206\u522b\u4ee3\u8868\u767d\u8272\u3001\u9ec4\u8272\u6216\u9752\u8272\u3002\u989c\u8272\u7f13\u51b2\u533a\u4e5f\u5c06\u989c\u8272\u8868\u793a\u4e3a\u6574\u6570\u4ee3\u7801\u53f7\uff0c\u589e\u52a0\u4e86 0 \u4f5c\u4e3a\u80cc\u666f\u989c\u8272\u9ed1\u8272\u7684\u4ee3\u7801\u3002</p> <p>\u6709\u4e24\u4e2a\u8ba1\u7b97\u7740\u8272\u5668\u3002\u5bf9\u4e8e\u4e24\u4e2a\u7740\u8272\u5668\uff0c\u6bcf\u4e2a\u8c03\u7528\u5904\u7406\u4e00\u4e2a\u7c92\u5b50\u3002\u7b2c\u4e00\u4e2a\u7740\u8272\u5668\u5bf9\u9ec4\u8272\u6216\u9752\u8272\u7c92\u5b50\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u5bf9\u4e8e\u767d\u8272\u7c92\u5b50\uff0c\u5b83\u901a\u8fc7\u5c06\u7c92\u5b50\u671d\u968f\u673a\u65b9\u5411\u79fb\u52a8\u6765\u66f4\u65b0\u7c92\u5b50\u7f13\u51b2\u533a\u7684\u6570\u636e\uff0c\u9664\u975e\u5b83\u8bd5\u56fe\u79fb\u52a8\u5230\u5305\u542b\u6709\u8272\u7c92\u5b50\u7684\u50cf\u7d20\u4e2d\uff0c\u7136\u540e\u7c92\u5b50\u53d8\u8272\u5e76\u4e0d\u79fb\u52a8\u3002\u7740\u8272\u5668\u9700\u8981\u8bbf\u95ee\u989c\u8272\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u68c0\u67e5\u767d\u8272\u7c92\u5b50\u60f3\u8981\u79fb\u52a8\u5230\u7684\u50cf\u7d20\u662f\u5426\u5df2\u7ecf\u5305\u542b\u6709\u8272\u7c92\u5b50\u3002\u7b2c\u4e00\u4e2a\u7740\u8272\u5668\u8fd0\u884c\u540e\uff0c\u989c\u8272\u7f13\u51b2\u533a\u88ab\u6e05\u9664\u3002\u7136\u540e\u7b2c\u4e8c\u4e2a\u8ba1\u7b97\u7740\u8272\u5668\u66f4\u65b0\u989c\u8272\u7f13\u51b2\u533a\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u7c92\u5b50\uff0c\u5b83\u5c06\u5305\u542b\u7c92\u5b50\u7684\u50cf\u7d20\u7684\u989c\u8272\u8bbe\u7f6e\u4e3a\u7c92\u5b50\u7684\u989c\u8272\u3002</p> <p>\u8be5\u7a0b\u5e8f\u8fd8\u6709\u4e00\u4e2a\u6e32\u67d3\u7740\u8272\u5668\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u8c03\u7528\u4e00\u6b21\u3002\u5b83\u67e5\u8be2\u989c\u8272\u7f13\u51b2\u533a\u4ee5\u786e\u5b9a\u5e94\u8be5\u5206\u914d\u7ed9\u50cf\u7d20\u7684\u989c\u8272\u3002</p> <p>\u6211\u4e0d\u4f1a\u8ba8\u8bba\u8fd9\u4e2a\u793a\u4f8b\u7684\u7ec6\u8282\uff0c\u4f46\u6211\u9f13\u52b1\u4f60\u67e5\u770b \u6e90\u4ee3\u7801\u3002</p> <p>Computers are often used to do physical simulations, and many simulations can benefit from the parallelism of a GPU. The sample program webgpu/diffusion.html is a fairly simple example of what can be done. The program shows a large number of white dots moving randomly. Each dot is a pixel. The motion is a \"random walk\": In each time step, the particle chooses a random direction\u2014up, down, left, or right\u2014and moves one pixel in that direction. There are also yellow and cyan particles, which don't move. Initially, there is a line of yellow particles on the left and a line of cyan particles on the right. When a white particle hits a yellow or cyan particle, it changes color to match and stops moving. The result is a buildup of colored particles in an interesting, branching pattern. The process is interesting to watch. Here is a demo version of the program:</p> <p></p> <p>(The idea for this simulation is not original with me. I read about a similar simulation some time ago, though I can't remember where.)</p> <p>One point of interest is the use of pseudo-random numbers in the compute shader. There is no random number generator in the WGSL shading language. But pseudo-random numbers are produced in other languages using simple mathematical formulas. Starting from an initial \"seed\" value, the formula produces a sequence of numbers. The sequence is completely determined by the initial seed value, but it looks statistically random. My program takes the formula from the pseudo-random number generator that used in the Java programming language. Each particle runs its own pseudo-random number generator, starting from different seed values. The seed values are created on the JavaScript side using JavaScript's Math.random() function.</p> <p>The program uses two storage buffers, one holding information about each particle and one holding color information for each pixel in the canvas. Particle information includes the current seed value for the particle's random number generator, the x and y coordinates of the particle, and the particle's color. Color is encoded as an integer: 1, 2, or 3 representing white, yellow, or cyan. The color buffer also represents color as an integer code number, adding 0 as a code for black, the background color.</p> <p>There are two compute shaders. For both shaders, each invocation processes one particle. The first shader does nothing for a yellow or cyan particle. For a white particle, it updates data in the particle buffer by moving the particle in a random direction, except that if it tries to move into a pixel that contains a colored particle, then the particle changes color and does not move. The shader needs access to the color buffer so that it can check whether the pixel to which the white particle wants to move already contains a colored particle. After the first shader runs, the color buffer is cleared. Then the second compute shader updates the color buffer: For each particle, it sets the color of the pixel that contains the particle to match the color of the particle.</p> <p>The program also has a render shader, which is invoked once for each pixel. It consults the color buffer to determine what color should be assigned to a pixel.</p> <p>I will not discuss the details of this example, but I encourage you to take a look at the source code.</p>"},{"location":"cn/c9/s6/#964-\u68c0\u7d22\u8f93\u51fa","title":"9.6.4 \u68c0\u7d22\u8f93\u51fa","text":"<p>Retrieving Output</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6211\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u4f8b\u5b50\u4e2d\uff0c\u8ba1\u7b97\u7740\u8272\u5668\u88ab\u7528\u6765\u5904\u7406\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u88ab\u6e32\u67d3\u7740\u8272\u5668\u4f7f\u7528\u3002\u4f46\u6709\u4e9b\u4efb\u52a1\u7eaf\u7cb9\u662f\u8ba1\u7b97\u6027\u7684\uff0c\u6ca1\u6709\u53ef\u89c1\u7ec4\u4ef6\u3002\u5fc5\u987b\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u68c0\u7d22\u8ba1\u7b97\u4efb\u52a1\u7684\u8f93\u51fa\uff0c\u4ee5\u4fbf\u5728\u7a0b\u5e8f\u7684 JavaScript \u7aef\u4f7f\u7528\u3002</p> <p>\u8ba1\u7b97\u7740\u8272\u5668\u53ef\u4ee5\u5c06\u6570\u636e\u8f93\u51fa\u5230\u5b58\u50a8\u7f13\u51b2\u533a\u3002\u5b58\u50a8\u7f13\u51b2\u533a\u901a\u5e38\u5b58\u50a8\u5728 GPU \u5185\u5b58\u4e2d\uff0cJavaScript \u65e0\u6cd5\u8bbf\u95ee\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u5c06\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u590d\u5236\u5230 JavaScript \u53ef\u4ee5\u8bbf\u95ee\u7684\u5185\u5b58\u4e2d\u3002\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u7f13\u51b2\u533a\uff0c\u5176\u4f7f\u7528\u5c5e\u6027\u5305\u62ec MAP_READ \u548c COPY_DST\u3002\u8fd9\u6837\u7684\u7f13\u51b2\u533a\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u6682\u5b58\u7f13\u51b2\u533a\u201d\u3002GPU \u53ef\u4ee5\u5c06\u6570\u636e\u590d\u5236\u5230\u6682\u5b58\u7f13\u51b2\u533a\uff0c\u7136\u540e JavaScript \u53ef\u4ee5\u201c\u6620\u5c04\u201d\u8be5\u6682\u5b58\u7f13\u51b2\u533a\u4ee5\u8fdb\u884c\u8bfb\u53d6\u3002\u4e00\u65e6 JavaScript \u4ece\u6682\u5b58\u7f13\u51b2\u533a\u68c0\u7d22\u4e86\u6570\u636e\uff0c\u5b83\u5fc5\u987b\u201c\u53d6\u6d88\u6620\u5c04\u201d\u8be5\u7f13\u51b2\u533a\uff0c\u56e0\u4e3a\u5728\u6620\u5c04\u671f\u95f4 GPU \u65e0\u6cd5\u8bbf\u95ee\u8be5\u7f13\u51b2\u533a\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f webgpu/map_buffer_for_read.html \u5728 GPU \u4e0a\u6267\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u8ba1\u7b97\uff0c\u8f93\u51fa\u4e00\u4e2a\u6d6e\u70b9\u6570\u6570\u7ec4\u3002\uff08\u8fd9\u91cc\u5177\u4f53\u7684\u8ba1\u7b97\u4e0d\u91cd\u8981\u3002\uff09\u8be5\u7a0b\u5e8f\u4f7f\u7528\u5b58\u50a8\u7f13\u51b2\u533a\u548c\u6682\u5b58\u7f13\u51b2\u533a\uff0c\u521b\u5efa\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>buffer = device.createBuffer({\n    size: 4*intervals,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n});\nstagingBuffer = device.createBuffer({\n    size: 4*intervals,\n    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST\n});\n</code></pre> <p>\u8ba1\u7b97\u7740\u8272\u5668\u8f93\u51fa\u5230 buffer\uff0c\u7136\u540e\u5c06 buffer \u590d\u5236\u5230 stagingBuffer\u3002\u60a8\u53ef\u80fd\u4f1a\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u76f4\u63a5\u7ed9\u5b58\u50a8\u7f13\u51b2\u533a\u6dfb\u52a0 MAP_READ \u4f7f\u7528\u3002\u4f46 MAP_READ \u53ea\u80fd\u4e0e COPY_DST \u7ed3\u5408\u4f7f\u7528\u3002\u5b58\u50a8\u7f13\u51b2\u533a\u65e8\u5728\u5b58\u50a8\u5728 GPU \u5185\u5b58\u4e2d\uff1b\u6682\u5b58\u7f13\u51b2\u533a\u65e8\u5728\u5b58\u50a8\u5728\u5171\u4eab\u5185\u5b58\u4e2d\u3002\u56e0\u6b64\uff0c\u901a\u5e38\uff0c\u7f13\u51b2\u533a\u4e0d\u80fd\u540c\u65f6\u662f\u4e24\u8005\u3002</p> <p>\u5728\u5c06\u8ba1\u7b97\u4f5c\u4e1a\u63d0\u4ea4\u7ed9 GPU \u540e\uff0c\u8f93\u51fa\u5728\u4f5c\u4e1a\u5b8c\u6210\u540e\u624d\u4f1a\u53ef\u7528\u3002JavaScript \u5fc5\u987b\u7b49\u5f85\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u7136\u540e\u624d\u80fd\u6620\u5c04\u6682\u5b58\u7f13\u51b2\u533a\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u540c\u6b65\u5728 WebGPU \u4e2d\u4f7f\u7528\u627f\u8bfa\u6765\u5904\u7406\uff08\u7b2c A.4 \u8282\uff09\u3002\u6682\u5b58\u7f13\u51b2\u533a\u4f7f\u7528 mapAsync() \u65b9\u6cd5\u8fdb\u884c\u6620\u5c04\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\u3002\u5f53\u7f13\u51b2\u533a\u51c6\u5907\u597d\u6620\u5c04\u65f6\uff0c\u627f\u8bfa\u89e3\u51b3\u3002mapAsync() \u901a\u5e38\u4f7f\u7528 await \u8c03\u7528\u3002\u4f8b\u5982\uff0c\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c</p> <pre><code>await stagingBuffer.mapAsync(GPUMapMode.READ, 0, intervals*4);\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f GPUMapMode.READ \u6216 GPUMapMode.WRITE\u3002\u53e6\u5916\u4e24\u4e2a\u53c2\u6570\u6307\u5b9a\u8981\u6620\u5c04\u7684\u7f13\u51b2\u533a\u533a\u57df\u7684\u8d77\u59cb\u70b9\u548c\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002</p> <p>\u4e00\u65e6\u6620\u5c04\u51c6\u5907\u597d\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6682\u5b58\u7f13\u51b2\u533a\u65b9\u6cd5 getMappedRange() \u5c06\u6620\u5c04\u533a\u57df\u7684\u5168\u90e8\u6216\u90e8\u5206\u89c6\u4e3a ArrayBuffer\u3002ArrayBuffer \u53ea\u662f\u4e00\u4e2a\u5b57\u8282\u5bb9\u5668\u3002\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u4e9b\u5b57\u8282\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u7ec4\u3002\u8981\u5c06\u6570\u636e\u4f5c\u4e3a\u6d6e\u70b9\u6570\u7ec4\u8bbf\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 ArrayBuffer \u5305\u88c5\u5728 Float32Array \u4e2d\u3002\u793a\u4f8b\u7a0b\u5e8f\u8fd9\u6837\u505a\uff0c\u7136\u540e\u6dfb\u52a0\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u4ee5\u83b7\u5f97\u6700\u7ec8\u7b54\u6848\u3002\u8ba1\u7b97\u7684\u4e24\u4e2a\u65b9\u9762\u90fd\u5728\u4ee5\u4e0b\u51fd\u6570\u4e2d\u5b8c\u6210\uff1a</p> <pre><code>async function compute() {\n\n    /* \u8fd0\u884c\u8ba1\u7b97\u7740\u8272\u5668\uff0c\u5e76\u5c06\u8f93\u51fa\u590d\u5236\u5230\u6682\u5b58\u7f13\u51b2\u533a\u3002 */\n\n    let commandEncoder = device.createCommandEncoder();\n    let passEncoder = commandEncoder.beginComputePass();\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, bindGroup);\n    passEncoder.dispatchWorkgroups( Math.ceil(intervals/64) );\n    passEncoder.end();\n    commandEncoder.copyBufferToBuffer(buffer, 0, stagingBuffer, 0, intervals*4);\n    device.queue.submit([commandEncoder.finish()]);\n\n    /* \u6620\u5c04\u6682\u5b58\u7f13\u51b2\u533a\uff0c\u5c06\u5176\u89e3\u91ca\u4e3a Float32Array\uff0c\u5e76\u627e\u5230\u603b\u548c\u3002 */\n\n    await stagingBuffer.mapAsync(GPUMapMode.READ, 0, intervals*4);\n\n    let data = new Float32Array(stagingBuffer.getMappedRange(0,intervals*4));\n    let sum = 0;\n    for (let i = 0; i &lt; data.length; i++) {\n        sum = sum + data[i];\n    }\n\n    /* \u53d6\u6d88\u6620\u5c04\u6682\u5b58\u7f13\u51b2\u533a\uff0c\u5e76\u8fd4\u56de\u603b\u548c\u3002 */\n\n    stagingBuffer.unmap();\n\n    return sum;\n}\n</code></pre> <p>\u7279\u522b\u6ce8\u610f\u6700\u540e\u4f7f\u7528 <code>stagingBuffer.unmap()</code>\u3002\u5728 GPU \u53ef\u4ee5\u91cd\u7528\u7f13\u51b2\u533a\u4e4b\u524d\uff0c\u5fc5\u987b\u53d6\u6d88\u6620\u5c04\u7f13\u51b2\u533a\u3002\u5982\u679c\u5904\u7406\u6570\u636e\u5c06\u82b1\u8d39\u975e\u5e73\u51e1\u7684\u65f6\u95f4\uff0c\u6700\u597d\u5728\u5904\u7406\u4e4b\u524d\u5236\u4f5c\u6570\u636e\u7684\u526f\u672c\u5e76\u53d6\u6d88\u6620\u5c04\u7f13\u51b2\u533a\u3002</p> <p>\u4e5f\u53ef\u4ee5\u5c06\u7f13\u51b2\u533a\u6620\u5c04\u4ee5\u8fdb\u884c\u5199\u5165\uff0c\u4ee5\u4e3a GPU \u63d0\u4f9b\u8f93\u5165\u3002\u6682\u5b58\u7f13\u51b2\u533a\u5c06\u4f7f\u7528 MAP_WRITE \u548c COPY_DST \u4f7f\u7528\u3002JavaScript \u5c06\u6620\u5c04\u7f13\u51b2\u533a\u4ee5\u8fdb\u884c\u5199\u5165\uff0c\u5c06\u6570\u636e\u590d\u5236\u5230\u6620\u5c04\u7684\u7f13\u51b2\u533a\u4e2d\uff0c\u5e76\u53d6\u6d88\u6620\u5c04\u7f13\u51b2\u533a\u3002\u7136\u540e\uff0c\u5b83\u53ef\u4ee5\u63d0\u4ea4\u4e00\u4e2a WebGPU \u4f5c\u4e1a\uff0c\u5176\u4e2d\u5305\u62ec\u5c06\u6570\u636e\u4ece\u6682\u5b58\u7f13\u51b2\u533a\u590d\u5236\u5230 GPU \u5185\u5b58\u3002\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528 <code>device.writeBuffer()</code> \u5c06\u6570\u636e\u4ece JavaScript \u590d\u5236\u5230 GPU \u5185\u5b58\u3002\u8be5\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u6682\u5b58\u7f13\u51b2\u533a\u5b8c\u6210\u5176\u4efb\u52a1\uff08\u5c3d\u7ba1\u5b83\u7684\u5b9e\u9645\u5de5\u4f5c\u65b9\u5f0f\u4e0d\u662f WebGPU \u89c4\u8303\u7684\u4e00\u90e8\u5206\uff09\u3002</p> <p>\u4e3a\u4e86\u7ed9\u7a0b\u5e8f\u589e\u52a0\u4e00\u4e9b\u8da3\u5473\u6027\uff0c\u6211\u6dfb\u52a0\u4e86\u4e00\u4e2a\u79f0\u4e3a\u201creduce\u201d\u7684\u91cd\u8981\u5e76\u884c\u7b97\u6cd5\u7684\u5b9e\u73b0\u3002\u5728\u4e0a\u8ff0\u8ba8\u8bba\u7684\u8ba1\u7b97\u4e2d\uff0c\u6570\u7ec4\u88ab\u590d\u5236\u5230\u7a0b\u5e8f\u7684 JavaScript \u7aef\u3002\u6570\u7ec4\u5728\u90a3\u91cc\u4f7f\u7528\u5faa\u73af\u8fdb\u884c\u6c42\u548c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5bf9\u4e8e\u5927\u5c0f\u4e3a N \u7684\u6570\u7ec4\u9700\u8981 N \u6b65\u3002\u4f7f\u7528 reduce\uff0c\u53ef\u4ee5\u5728 GPU \u4e0a\u4ee5\u5927\u7ea6 log2(N) \u6b65\u6dfb\u52a0\u76f8\u540c\u7684\u6570\u5b57\u3002\u57fa\u672c\u601d\u60f3\u662f\u5c06\u6570\u7ec4\u540e\u534a\u90e8\u5206\u7684\u6bcf\u4e2a\u6570\u5b57\u4e0e\u524d\u534a\u90e8\u5206\u7684\u4f19\u4f34\u76f8\u52a0\u3002\u5728\u4f2a\u4ee3\u7801\u4e2d\uff0c\u5bf9\u4e8e\u957f\u5ea6\u4e3a N \u7684\u6570\u7ec4 A\uff0c</p> <pre><code>for (index = 0; index &lt; N/2; index++)\n    A[index] = A[index] + A[index+N/2]\n</code></pre> <p>\u8fd9\u4e2a\u5faa\u73af\u53ef\u4ee5\u88ab\u4e00\u4e2a\u7b80\u5355\u7684\u8ba1\u7b97\u7740\u8272\u5668\u66ff\u6362\u3002\u7ed3\u679c\u662f\uff0c\u539f\u59cb\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u603b\u548c\u7b49\u4e8e\u4fee\u6539\u540e\u6570\u7ec4\u4e2d\u524d N/2 \u4e2a\u5143\u7d20\u7684\u6570\u5b57\u603b\u548c\u3002\u73b0\u5728\uff0c\u8003\u8651\u8fd9 N/2 \u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u65b0\u7684\u3001\u66f4\u77ed\u7684\u6570\u7ec4\uff0c\u5e76\u5e94\u7528\u76f8\u540c\u7684\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u539f\u59cb\u603b\u548c\u73b0\u5728\u96c6\u4e2d\u5728 N/4 \u4e2a\u5143\u7d20\u4e2d\u3002\u7ee7\u7eed\u8fd9\u6837\u505a\uff0c\u76f4\u5230\u539f\u59cb\u603b\u548c\u96c6\u4e2d\u5728\u5355\u4e2a\u5143\u7d20 A[0] \u4e2d\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u8ba1\u7b97\u7740\u8272\u5668\u5df2\u7ecf\u88ab\u5e94\u7528\u4e86 log2(N) \u6b21\u3002</p> <p>\u73b0\u5728\uff0c\u6240\u6709\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u53ea\u6709\u5728\u6570\u7ec4\u7684\u5927\u5c0f\u662f 2 \u7684\u5e42\u65f6\u624d\u6709\u6548\u3002\u5982\u679c\u4efb\u4f55\u65f6\u5019\u4f60\u5fc5\u987b\u4f7f\u7528\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u6570\u7ec4\uff0c\u4e8b\u60c5\u5c31\u4f1a\u53d8\u5f97\u66f4\u590d\u6742\u4e00\u4e9b\u3002\u7136\u800c\uff0c\u793a\u4f8b\u7a0b\u5e8f\u4e5f\u5904\u7406\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u6e90\u4ee3\u7801\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5b8c\u6210\u7684\u3002</p> <p>In my examples so far, the compute shaders were used to process data that was used by a render shader. But some tasks are purely computational, with no visible component. There has to be some way to retrieve the output of a computational task so that it can be used on the JavaScript side of the program.</p> <p>A compute shader can output data to a storage buffer. A storage buffer is typically stored in GPU memory that is not accessible to JavaScript, so we need a way to copy the contents of the buffer into memory that JavaScript can access. The solution is to use a second buffer whose usage property includes MAP_READ and COPY_DST. Such buffers are often referred to as \"staging buffers.\" The GPU can copy data into a staging buffer, and JavaScript can then \"map\" that staging buffer for reading. Once JavaScript has retrieved the data from the staging buffer, it must \"unmap\" the buffer, because the GPU cannot access the buffer while it is mapped.</p> <p>The sample program webgpu/map_buffer_for_read.html performs a simple computation on the GPU that outputs an array of floating point numbers. (The specific computation is not important here.) The program uses a storage buffer and a staging buffer, which are created like this:</p> <pre><code>buffer = device.createBuffer({\nsize: 4*intervals,\nusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n});\nstagingBuffer = device.createBuffer({\nsize: 4*intervals,\nusage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST\n});\n</code></pre> <p>The compute shader outputs to buffer, then the buffer is copied to stagingBuffer. You might wonder why we don't just add MAP_READ usage to the storage buffer. But MAP_READ can only be combined with COPY_DST. Storage buffers are meant to live in GPU memory; staging buffers are meant to live in shared memory. So, in general, a buffer can't be both.</p> <p>After the compute job is submitted to the GPU, the output won't be available until the job has been completed. JavaScript must wait for that to happen before mapping the staging buffer. This type of synchroniztion is handled in WebGPU using promises (Section A.4). A staging buffer is mapped using the method mapAsync(), which returns a promise. The promise resolves when the buffer is ready to be mapped. mapAsync() is typically called using await. For example, in the sample program,</p> <pre><code>await stagingBuffer.mapAsync(GPUMapMode.READ, 0, intervals*4);\n</code></pre> <p>The first parameter can be either GPUMapMode.READ or GPUMapMode.WRITE. The other two parameters specify the starting point and size, in bytes, of the region in the buffer to be mapped.</p> <p>Once the mapping is ready, the staging buffer method getMappedRange() can be used to view all or part of the mapped region as an ArrayBuffer. An ArrayBuffer is just a container for bytes. In the sample program, those bytes are actually an array of floats. To access the data as an array of floats, we can wrap the ArrayBuffer in a Float32Array. The sample program does that and then addes up the numbers in the array to get a final answer. Both sides of the computation are done in the following function:</p> <pre><code>async function compute() {\n\n/* Run the compute shader and copy the output to the staging buffer. */\n\nlet commandEncoder = device.createCommandEncoder();\nlet passEncoder = commandEncoder.beginComputePass();\npassEncoder.setPipeline(pipeline);\npassEncoder.setBindGroup(0, bindGroup);\npassEncoder.dispatchWorkgroups( Math.ceil(intervals/64) );\npassEncoder.end();\ncommandEncoder.copyBufferToBuffer(buffer, 0, stagingBuffer, 0, intervals*4);\ndevice.queue.submit([commandEncoder.finish()]);\n\n/* Map staging buffer, interpret it as a Float32Array, and find the sum. */\n\nawait stagingBuffer.mapAsync(GPUMapMode.READ, 0, intervals*4);\n\nlet data = new Float32Array(stagingBuffer.getMappedRange(0,intervals*4));\nlet sum = 0;\nfor (let i = 0; i &lt; data.length; i++) {\n    sum = sum + data[i];\n}\n\n/* Unmap the staging buffer, and return the sum. */\n\nstagingBuffer.unmap();\n\nreturn sum;\n}\n</code></pre> <p>Note in particular the use of <code>stagingBuffer.unmap()</code> at the end. The buffer must be unmapped before it can be reused by the GPU. If processing the data will take a nontrivial amount of time, it is a good idea to make a copy of the data and unmap the buffer before doing the processing.</p> <p>It is also possible to map a buffer for writing, to provide input to the GPU. The staging buffer would be created with MAP_WRITE and COPY_DST usage. JavaScript would map the buffer for writing, copy data into the mapped buffer, and unmap the buffer. It could then submit a WebGPU job that includes copying the data from the staging buffer into GPU memory. We have been using <code>device.writeBuffer()</code> to copy data from JavaScript into GPU memory. That function could complete its task using a staging buffer (although how it actually works is not part of the WebGPU specification).</p> <p>To add some interest to the program, I added an implementation of an important parallel algorithm called \"reduce.\" In the computation discussed above, an array is copied to the JavaScript side of the program. The array is added up there using a loop, an operation that takes N steps for an array of size N. The same numbers can be added in the GPU using reduce, with on the order of log2(N) steps. The basic idea is to add each number in the second half of the array to a partner in the first half. In pseudocode, for an array A of length N,</p> <pre><code>for (index = 0; index &lt; N/2; index++)\n    A[index] = A[index] + A[index+N/2]\n</code></pre> <p>This loop can be replaced by one application of a simple compute shader. The result is that the sum of the numbers in the original array is equal to the sum of the numbers in the first N/2 elements of the modified array. Now, consider those N/2 elements to be a new, shorter array, and apply the same process, so that the original sum is now concentrated into N/4 elements. Continue like that until the original sum is concentrated into the single element A[0]. At that point, the compute shader has been applied just log2(N) times.</p> <p>Now, all this really works as stated only if the size of the array is a power of two. Things are a little more complicated if at any point you have to work with an array whose length is an odd number. However, the sample program handles that case as well, and you can look at the source code to see how its done.</p>"},{"location":"cn/c9/s7/","title":"9.7 \u7ec6\u8282","text":"<p>Some Details</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e3a\u4e86\u5b8c\u6210\u5bf9 WebGPU \u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u5730\u770b\u770b\u4e00\u4e9b\u6709\u7528\u4f46\u5e76\u672a\u5305\u542b\u5728\u524d\u9762\u7ae0\u8282\u4e2d\u7684\u5185\u5bb9\u3002\u5728\u6700\u540e\u4e24\u4e2a\u5c0f\u8282\u4e2d\uff0c\u4f60\u4f1a\u53d1\u73b0\u51e0\u4e2a\u65b0\u7684\u793a\u4f8b\u7a0b\u5e8f\u3002</p> <p>To finish this introduction to WebGPU, we'll look briefly at a few useful things to know that didn't make it into earlier sections. You will find several new sample programs in the last two subsections.</p>"},{"location":"cn/c9/s7/#971-\u4e22\u5931\u8bbe\u5907","title":"9.7.1 \u4e22\u5931\u8bbe\u5907","text":"<p>Lost Device</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u5f00\u59cb\u7f16\u5199\u66f4\u4e25\u8083\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u60a8\u5e94\u8be5\u610f\u8bc6\u5230 WebGPU \u8bbe\u5907\u53ef\u80fd\u4f1a\u201c\u4e22\u5931\u201d\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u8bbe\u5907\u505c\u6b62\u5de5\u4f5c\uff0c\u60a8\u5c1d\u8bd5\u5bf9\u8bbe\u5907\u6267\u884c\u7684\u4efb\u4f55\u64cd\u4f5c\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\u4f7f\u7528\u8be5\u8bbe\u5907\u521b\u5efa\u7684\u8d44\u6e90\uff0c\u5982\u7f13\u51b2\u533a\u548c\u7ba1\u7ebf\uff0c\u5c06\u4e0d\u518d\u6709\u6548\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u5f88\u5c11\u89c1\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u56e0\u4e3a\u4e0d\u518d\u9700\u8981\u8bbe\u5907\u800c\u8c03\u7528 <code>device.destroy()</code>\uff0c\u5b83\u5c31\u53ef\u80fd\u53d1\u751f\u3002\u5982\u679c\u7528\u6237\u62d4\u6389\u5916\u90e8\u663e\u793a\u5668\uff0c\u5b83\u4e5f\u53ef\u80fd\u53d1\u751f\u3002\u66f4\u4ee4\u4eba\u4e0d\u5b89\u7684\u662f\uff0cWebGPU \u89c4\u8303\u6307\u51fa\uff1a\u201c\u5982\u679c\u7740\u8272\u5668\u6267\u884c\u5728\u7528\u6237\u4ee3\u7406\u786e\u5b9a\u7684\u5408\u7406\u65f6\u95f4\u5185\u6ca1\u6709\u7ed3\u675f\uff0c\u8bbe\u5907\u53ef\u80fd\u4f1a\u4e22\u5931\u3002\u201d\u201c\u7528\u6237\u4ee3\u7406\u201d\u662f\u8fd0\u884c\u60a8\u7a0b\u5e8f\u7684\u7f51\u7edc\u6d4f\u89c8\u5668\u3002\u8fd9\u5e76\u6ca1\u6709\u7ed9\u51fa\u592a\u591a\u660e\u786e\u7684\u9884\u671f\u6307\u5bfc\u3002</p> <p>\u51fd\u6570 <code>device.lost()</code> \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u5982\u679c\u8bbe\u5907\u4e22\u5931\uff0c\u5b83\u5c31\u4f1a\u89e3\u51b3\u3002\u5b83\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c\u8bbe\u5907\u4e22\u5931\u5c31\u88ab\u8c03\u7528\u3002\u5b83\u53ef\u80fd\u50cf\u8fd9\u6837\u4f7f\u7528\uff0c\u5c31\u5728\u521b\u5efa\u8bbe\u5907\u4e4b\u540e\uff1a</p> <pre><code>device.lost().then(\n    (info) =&gt; {\n        if ( info.reason !== \"destroyed\" ) {\n            ... // \uff08\u53ef\u80fd\u5c1d\u8bd5\u6062\u590d\uff09\n        }\n    }\n);\n</code></pre> <p>info.reason \u7684\u552f\u4e00\u53ef\u80fd\u503c\u662f \"destroyed\"\uff08\u610f\u5473\u7740\u8c03\u7528\u4e86 device.destroy()\uff09\u548c \"unknown\"\u3002\u5982\u679c\u539f\u56e0\u4e0d\u662f \"destroyed\"\uff0c\u60a8\u53ef\u80fd\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bbe\u5907\u5e76\u91cd\u65b0\u521d\u59cb\u5316\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f \u2014\u2014 \u5192\u7740\u540c\u6837\u7684\u95ee\u9898\u518d\u6b21\u53d1\u751f\u7684\u98ce\u9669\u3002</p> <p>\u5e0c\u671b <code>device.lost()</code> \u7684\u884c\u4e3a\u5728\u672a\u6765\u4f1a\u6709\u66f4\u660e\u786e\u7684\u5b9a\u4e49\u3002</p> <p>If you start writing more serious applications, you should be aware that it's possible for a WebGPU device to become \"lost.\" When that happens, the device stops working, and anything that you try to do with the device will be ignored. Resources such as buffers and pipelines that were created with the device will no longer be valid. Ordinarily, this will be rare. It can happen, for example, if you call <code>device.destroy()</code> because you no longer need the device. It could happen if the user unplugs an external display. More disturbing, the WebGPU specification says, \"The device may become lost if shader execution does not end in a reasonable amount of time, as determined by the user agent.\" The \"user agent\" is the web browser that is running your program. That does not give much definite guidance about what to expect.</p> <p>The function <code>device.lost()</code> returns a promise that resolves if and when the device becomes lost. It can be used to set up a function to be called if the device is lost. It might be used something like this, just after creating the device:</p> <pre><code>device.lost().then(\n(info) =&gt; {\n    if ( info.reason !== \"destroyed\" ) {\n        ... // (possibly try to recover)\n    }\n}\n);\n</code></pre> <p>The only possible values of info.reason are \"destroyed\" (meaning that device.destroy() was called) and \"unknown.\" If the reason is not \"destroyed,\" you might try to create a new device and reinitialize your application\u2014at the risk that the same thing will go wrong again.</p> <p>Hopefully, the behavior of <code>device.lost()</code> will be better defined in the future.</p>"},{"location":"cn/c9/s7/#972-\u9519\u8bef\u5904\u7406","title":"9.7.2 \u9519\u8bef\u5904\u7406","text":"<p>Error Handling</p> \u4e2d\u6587\u82f1\u6587 <p>\u5173\u4e8e WebGPU \u9519\u8bef\uff0c\u9996\u5148\u8981\u8bb0\u4f4f\u7684\u662f\uff0c\u5b83\u4eec\u51e0\u4e4e\u603b\u662f\u5728 Web \u6d4f\u89c8\u5668\u7684\u63a7\u5236\u53f0\u4e2d\u62a5\u544a\u3002WebGPU \u9519\u8bef\u4fe1\u606f\u662f\u6709\u610f\u4e49\u7684\uff0c\u901a\u5e38\u4f1a\u7ed9\u60a8\u63d0\u4f9b\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u63d0\u793a\u3002\u7b2c\u4e8c\u4ef6\u8981\u77e5\u9053\u7684\u4e8b\u60c5\u662f\uff0cWebGPU \u6839\u636e\u4e25\u683c\u6307\u5b9a\u7684\u6807\u51c6\u6765\u9a8c\u8bc1\u7a0b\u5e8f\u3002\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u5728\u4e00\u4e2a\u5e73\u53f0\u4e0a\u901a\u8fc7\u4e86\u6709\u6548\u6027\u68c0\u67e5\uff0c\u5b83\u5f88\u53ef\u80fd\u4f1a\u505a\u5230\u6bcf\u4e2a\u5e73\u53f0\u4e0a\u90fd\u901a\u8fc7\u3002\u7b2c\u4e09\u4ef6\u4e8b\u662f\uff0c\u5f53 WebGPU \u53d1\u73b0\u6709\u6548\u6027\u9519\u8bef\u65f6\uff0c\u5b83\u4e0d\u4f1a\u81ea\u52a8\u505c\u6b62\u5904\u7406\u3002\u5b83\u4f1a\u5c06\u5bfc\u81f4\u95ee\u9898\u7684\u5bf9\u8c61\u6807\u8bb0\u4e3a\u65e0\u6548\uff0c\u5e76\u5c1d\u8bd5\u7ee7\u7eed\u3002\u5c1d\u8bd5\u4f7f\u7528\u65e0\u6548\u5bf9\u8c61\u5c06\u4ea7\u751f\u66f4\u591a\u7684\u9519\u8bef\u6d88\u606f\u3002\u6240\u4ee5\uff0c\u5982\u679c\u60a8\u7684\u7a0b\u5e8f\u4ea7\u751f\u4e86\u4e00\u7cfb\u5217\u7684\u9519\u8bef\u6d88\u606f\uff0c\u8bf7\u4e13\u6ce8\u4e8e\u7b2c\u4e00\u4e2a\u3002</p> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u6807\u8bb0\u60a8\u7684\u5bf9\u8c61\u6765\u6539\u5584 WebGPU \u751f\u6210\u7684\u9519\u8bef\u6d88\u606f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5411\u5bf9\u8c61\u6dfb\u52a0\u6807\u7b7e\u5c5e\u6027\u6765\u4e3a\u60a8\u9009\u62e9\u7684\u6587\u672c\u5b57\u7b26\u4e32\u6807\u8bb0\u51e0\u4e4e\u6240\u6709 WebGPU \u5bf9\u8c61\u3002\u5982\u679c WebGPU \u5728\u5bf9\u8c61\u4e2d\u53d1\u73b0\u9a8c\u8bc1\u9519\u8bef\uff0c\u5b83\u5c06\u628a\u6807\u7b7e\u5305\u542b\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684\u7a0b\u5e8f\u4f7f\u7528\u4e86\u51e0\u4e2a\u7ed1\u5b9a\u7ec4\uff0c\u5176\u4e2d\u4e00\u4e2a\u5f15\u8d77\u4e86\u95ee\u9898\uff0c\u7ed9\u60a8\u7684\u7ed1\u5b9a\u7ec4\u6dfb\u52a0\u6807\u7b7e\u53ef\u4ee5\u5e2e\u52a9\u60a8\u8ffd\u8e2a\u9519\u8bef\uff1a</p> <pre><code>bindGroupA = device.createBindGroup({\n    label: \"bind group for outlines\",\n    layout: \n    .\n    .\n    .\n</code></pre> <p>\u4e0e\u5176\u4f9d\u8d56 Web \u6d4f\u89c8\u5668\u63a7\u5236\u53f0\uff0c\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u68c0\u67e5\u9519\u8bef\u3002\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\uff0c\u56e0\u4e3a\u9519\u8bef\u662f\u7531\u7a0b\u5e8f\u7684 GPU \u7aef\u68c0\u6d4b\u5230\u7684\u3002\u8981\u5c06\u9519\u8bef\u62a5\u544a\u4f20\u56de JavaScript \u7aef\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>device.pushErrorScope()</code> \u5411 GPU \u6dfb\u52a0\u9519\u8bef\u68c0\u67e5\u3002\u7a0d\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>device.popErrorScope()</code> \u68c0\u7d22\u7ed3\u679c\u3002<code>pushErrorScope()</code> \u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u6307\u793a\u60a8\u60f3\u8981\u68c0\u6d4b\u7684\u9519\u8bef\u7c7b\u578b\u3002\u53c2\u6570\u53ef\u4ee5\u662f \"validation\"\u3001\"out-of-memory\" \u6216 \"internal\"\uff1b\"validation\" \u662f\u6700\u5e38\u89c1\u7684\u3002<code>popErrorScope()</code> \u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u5f53\u63d0\u4ea4\u7ed9 GPU \u7684\u6240\u6709\u64cd\u4f5c\u5728\u76f8\u5e94\u7684 push \u4e4b\u540e\u5b8c\u6210\u540e\uff0c\u627f\u8bfa\u89e3\u51b3\u3002\u5982\u679c\u6ca1\u6709\u68c0\u6d4b\u5230\u9519\u8bef\uff0c\u627f\u8bfa\u8fd4\u56de\u7684\u503c\u5c06\u4e3a null\uff1b\u5426\u5219\uff0c\u5b83\u5c06\u662f\u4e00\u4e2a\u5177\u6709\u63cf\u8ff0\u9519\u8bef\u7684 message \u5c5e\u6027\u7684\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u6211\u5f00\u53d1\u7a0b\u5e8f\u65f6\uff0c\u6211\u559c\u6b22\u68c0\u67e5\u6211\u7684\u7740\u8272\u5668\u4ee3\u7801\u4e2d\u7684\u7f16\u8bd1\u9519\u8bef\u3002\u6211\u53ef\u4ee5\u901a\u8fc7\u5728\u5c1d\u8bd5\u7f16\u8bd1\u4e4b\u524d\u63a8\u5165 \"validation\" \u9519\u8bef\u8303\u56f4\u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff1a</p> <pre><code>device.pushErrorScope(\"validation\");\nshader = device.createShaderModule({\n    code: shaderSource\n});\nlet error = await device.popErrorScope();\nif (error) {\n    throw Error(\"Compilation error in shader: \" + error.message);\n}\n</code></pre> <p>\u4e00\u65e6\u7a0b\u5e8f\u5de5\u4f5c\u6b63\u5e38\uff0c\u5c31\u53ef\u4ee5\u79fb\u9664\u9519\u8bef\u68c0\u67e5\u3002</p> <p>\u5f53 WebGPU \u9047\u5230\u672a\u88ab\u9519\u8bef\u8303\u56f4\u6355\u83b7\u7684\u9519\u8bef\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e00\u4e2a \"uncapturederror\" \u4e8b\u4ef6\u3002\u60a8\u53ef\u4ee5\u5411\u8bbe\u5907\u6dfb\u52a0\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u4ee5\u54cd\u5e94\u672a\u6355\u83b7\u7684\u9519\u8bef\uff1a<code>device.onuncapturederror = function(event) { ... }</code>\u3002\u4f46\u662f\uff0c\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u8bb0\u4f4f\u901a\u5e38\u89c2\u5bdf Web \u6d4f\u89c8\u5668\u63a7\u5236\u53f0\u5c31\u8db3\u591f\u4e86\uff01</p> <p>The first thing to remember about WebGPU errors is that they will almost always be reported in the Web browser's console. WebGPU error messages are informative and will often give you hints about how to fix the problem. The second thing to know is that WebGPU validates programs according to tightly specified criteria. If a program passes validity checks on one platform, it is likely to do so on every platform. The third thing is that when WebGPU finds a validity error, it does not automatically stop processing. It will mark the object that caused the problem as invalid and will try to continue. Attempts to use the invalid object will produce more error messages. So, if your program produces a series of error messages, concentrate on the first one.</p> <p>You can improve the error messages generated by WebGPU by labeling your objects. You can label just about any WebGPU object with a text string of your choosing by adding a label property to the object. If WebGPU finds a validation error in the object, it will include the label in the error message. For example, if your program uses several bind groups and one of them causes a problem, adding labels to your bind groups can help you track down the error:</p> <pre><code>bindGroupA = device.createBindGroup({\n    label: \"bind group for outlines\",\n    layout: \n    .\n    .\n    .\n</code></pre> <p>Instead of relying on the Web browser console, it is possible to have a program check for errors. Things are complicated by the fact that errors are detected by the GPU side of the program. To get the error report back to the JavaScript side, you can use device.pushErrorScope() to add an error check to the GPU. Later, you can retrieve the result by calling device.popErrorScope(). pushErrorScope() takes a parameter indicating the type of error that you want to detect. The parameter can be \"validation\", \"out-of-memory\", or \"internal\"; \"validation\" is the most common. popErrorScope() returns a promise that resolves when all operations submitted to the GPU after the corresponding push have been completed. The value returned by the promise will be null if no error was detected; otherwise, it will be an object with a message property that describes the error.</p> <p>For example, when I am developing a program, I like to check for compilation errors in my shader code. I can do that by pushing a \"validation\" error scope before attempting the compilation:</p> <pre><code>device.pushErrorScope(\"validation\");\nshader = device.createShaderModule({\ncode: shaderSource\n});\nlet error = await device.popErrorScope();\nif (error) {\nthrow Error(\"Compilation error in shader: \" + error.message);\n}\n</code></pre> <p>The error check could be removed once the program is working.</p> <p>When WebGPU encounters an error that is not captured by an error scope, it generates an \"uncapturederror\" event. You can add an event handler to the device to respond to uncaptured errors: <code>device.onuncapturederror = function(event) { ... }</code>. But, as always, remember that watching the Web browser console is usually good enough!</p>"},{"location":"cn/c9/s7/#973-\u9650\u5236\u548c\u7279\u6027","title":"9.7.3 \u9650\u5236\u548c\u7279\u6027","text":"<p>Limits and Features</p> \u4e2d\u6587\u82f1\u6587 <p>WebGPU \u8bbe\u5907\u53d7\u67d0\u4e9b\u201c\u9650\u5236\u201d\u7684\u7ea6\u675f\uff0c\u4f8b\u5982\u53ef\u4ee5\u9644\u52a0\u5230\u6e32\u67d3\u7ba1\u7ebf\u7684\u6700\u5927\u9876\u70b9\u7f13\u51b2\u533a\u6570\u91cf\uff0c\u6216\u8005\u8ba1\u7b97\u5de5\u4f5c\u7ec4\u7684\u6700\u5927\u5927\u5c0f\u3002\u5f53\u60a8\u901a\u8fc7\u8c03\u7528 adapter.requestDevice() \u800c\u4e0d\u5e26\u53c2\u6570\u6765\u521b\u5efa\u8bbe\u5907\u65f6\uff0c\u8fd4\u56de\u7684\u8bbe\u5907\u5177\u6709\u4e00\u5957\u9ed8\u8ba4\u7684\u9650\u5236\uff0c\u8fd9\u4e9b\u9650\u5236\u4fdd\u8bc1\u88ab\u6bcf\u4e2a WebGPU \u5b9e\u73b0\u6240\u652f\u6301\u3002\u4f8b\u5982\uff0c\u9ed8\u8ba4\u7684\u5de5\u4f5c\u7ec4\u6700\u5927\u5927\u5c0f\u662f 256\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u9ed8\u8ba4\u9650\u5236\u5c31\u8db3\u591f\u4e86\u3002\u7136\u800c\uff0c\u5982\u679c\u60a8\u7edd\u5bf9\u9700\u8981\u4e00\u4e2a\u5927\u5c0f\u4e3a 1024 \u7684\u5de5\u4f5c\u7ec4\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u8bf7\u6c42\u4e00\u4e2a\u5177\u6709\u8be5\u9650\u5236\u7684\u8bbe\u5907\uff1a</p> <pre><code>device = await adapter.requestDevice({\n    requiredLimits: {\n        maxComputeInvocationsPerWorkgroup: 1024\n    }\n});\n</code></pre> <p>\u5982\u679c WebGPU \u9002\u914d\u5668\u4e0d\u652f\u6301\u8bf7\u6c42\u7684\u9650\u5236\uff0c\u8fd9\u5c06\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u5982\u679c\u5b83\u5728\u60a8\u7684 Web \u6d4f\u89c8\u5668\u4e2d\u6210\u529f\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u6b63\u5728\u7f16\u5199\u7684\u7a0b\u5e8f\u53ef\u80fd\u5728\u8fd0\u884c\u65f6\u5931\u8d25\uff0c\u5f53\u5728\u4e0d\u652f\u6301\u589e\u52a0\u9650\u5236\u7684\u5e73\u53f0\u4e0a\u8fd0\u884c\u65f6\u3002</p> <p>\u5bf9\u8c61 adapter.limits \u5305\u542b\u9002\u914d\u5668\u5b9e\u9645\u652f\u6301\u7684\u9650\u5236\u3002\uff08\u8981\u67e5\u770b\u5217\u8868\uff0c\u8bf7\u5c06\u8be5\u5bf9\u8c61\u5199\u5165\u63a7\u5236\u53f0\u3002\uff09\u5728\u8bf7\u6c42\u589e\u52a0\u9650\u5236\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u68c0\u67e5\u6b64\u5bf9\u8c61\uff0c\u770b\u770b\u9002\u914d\u5668\u662f\u5426\u652f\u6301\u5b83\u3002</p> <p>WebGPU \u8fd8\u5b9a\u4e49\u4e86\u4e00\u7ec4\u201c\u529f\u80fd\u201d\uff0c\u5b83\u4eec\u4ee3\u8868\u53ef\u9009\u7684\u8bbe\u5907\u80fd\u529b\u3002\u4f8b\u5982\uff0c\u7279\u6027\u201ctexture-compression-bc\u201d\u4f7f\u5f97\u53ef\u4ee5\u4f7f\u7528\u67d0\u79cd\u7c7b\u578b\u7684\u538b\u7f29\u7eb9\u7406\u3002\uff08\u672c\u4e66\u672a\u6db5\u76d6\u538b\u7f29\u7eb9\u7406\u3002\uff09\u9664\u975e\u5728\u521b\u5efa\u8bbe\u5907\u65f6\u8bf7\u6c42\uff0c\u5426\u5219\u4e0d\u80fd\u4f7f\u7528\u7279\u6027\uff1a</p> <pre><code>device = await adapter.requestDevice({\n    requiredFeatures: [\"texture-compression-bc\"] // \u7279\u6027\u540d\u79f0\u6570\u7ec4\n});\n</code></pre> <p>\u540c\u6837\uff0c\u5982\u679c\u7279\u6027\u4e0d\u53ef\u7528\uff0c\u8fd9\u5c06\u629b\u51fa\u5f02\u5e38\uff0c\u5e76\u4e14\u7279\u6027\u8bf7\u6c42\u5c06\u9650\u5236\u60a8\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8fd0\u884c\u7684\u8bbe\u5907\u3002\u5e03\u5c14\u503c\u51fd\u6570 adapter.hasFeature(name) \u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u9002\u914d\u5668\u662f\u5426\u652f\u6301\u7ed9\u5b9a\u540d\u79f0\u7684\u7279\u6027\u3002\u6709\u5173\u53ef\u80fd\u7279\u6027\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u89c1 WebGPU \u6587\u6863\u3002</p> <p>A WebGPU device is subject to certain \"limits,\" such as the maximum number of vertex buffers that can be attached to a render pipeline or the maximum size of a compute workgroup. When you create a device by calling adapter.requestDevice() with no parameter, the device that is returned has a default set of limits which are guaranteed to be supported by every WebGPU implementation. For example, the default maximum size for a workgroup is 256. For most applications, the default limits are fine. However, if you absolutely need a workgroup of size 1024, you can try requesting a device with that limit:</p> <pre><code>device = await adapter.requestDevice({\n    requiredLimits: {\n    maxComputeInvocationsPerWorkgroup: 1024\n    }\n});\n</code></pre> <p>If the WebGPU adapter doesn't support the requested limit, this will throw an exception. If it succeeds in your Web browser, it means that you are writing a program that might fail elsewhere, when run on a platform that doesn't support the increased limit.</p> <p>The object adapter.limits contains the actual limits supported by the adapter. (To see a list, write the object to the console.) Before requesting an increased limit, you should check this object to see whether the adapter supports it.</p> <p>WebGPU also defines a set of \"features,\" which represent optional device capabilities. For example, the feature \"texture-compression-bc\" makes it possible to use a certain type of compressed texture. (Compressed textures are not covered in this book.) Features cannot be used unless they are requested when the device is created:</p> <pre><code>device = await adapter.requestDevice({\nrequiredFeatures: [\"texture-compression-bc\"] // array of feature names\n});\n</code></pre> <p>Again, this will throw an exception if the feature is not available, and a feature request will limit the devices on which your program can run. The boolean-valued function adapter.hasFeature(name) can be used to test whether the adapter supports the feature wih the given name. For a list of possible features, see the WebGPU documentation.</p>"},{"location":"cn/c9/s7/#974-\u6e32\u67d3\u901a\u9053\u9009\u9879","title":"9.7.4 \u6e32\u67d3\u901a\u9053\u9009\u9879","text":"<p>Render Pass Options</p> \u4e2d\u6587\u82f1\u6587 <p>\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\uff08render pass encoder\uff09\u7528\u4e8e\u5411\u547d\u4ee4\u7f16\u7801\u5668\u6dfb\u52a0\u7ed8\u56fe\u547d\u4ee4\u3002\u5b83\u6307\u5b9a\u4e86\u4e00\u4e2a\u7ba1\u7ebf\uff08pipeline\uff09\u548c\u8d44\u6e90\uff0c\u6bd4\u5982\u7ba1\u7ebf\u6240\u9700\u7684\u7ed1\u5b9a\u7ec4\uff08bind groups\uff09\u3002\u5b83\u8fd8\u6709\u5176\u4ed6\u51e0\u4e2a\u9009\u9879\u3002\u8fd9\u91cc\u6211\u4eec\u770b\u5176\u4e2d\u7684\u4e24\u4e2a\u3002</p> <p>\u89c6\u53e3\uff08viewport\uff09\u662f\u5728\u753b\u5e03\u6216\u5176\u4ed6\u6e32\u67d3\u76ee\u6807\u4e2d\u7684\u77e9\u5f62\u533a\u57df\uff0c\u6e32\u67d3\u540e\u7684\u56fe\u50cf\u5c31\u663e\u793a\u5728\u8fd9\u4e2a\u533a\u57df\u5185\u3002\u9ed8\u8ba4\u7684\u89c6\u53e3\u662f\u6574\u4e2a\u6e32\u67d3\u76ee\u6807\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\u4e2d\u7684 <code>setViewport()</code> \u51fd\u6570\u6765\u9009\u62e9\u4e00\u4e2a\u66f4\u5c0f\u7684\u89c6\u53e3\u3002\u6807\u51c6\u7684 WebGPU NDC\uff08\u5f52\u4e00\u5316\u8bbe\u5907\u5750\u6807\uff09\u5750\u6807\u7cfb\uff0cx \u548c y \u7684\u8303\u56f4\u662f\u4ece\u8d1f\u4e00\u5230\u6b63\u4e00\uff0c\u6df1\u5ea6\uff08depth\uff09\u7684\u8303\u56f4\u662f\u4ece\u96f6\u5230\u4e00\uff0c\u7136\u540e\u6620\u5c04\u5230\u66f4\u5c0f\u7684\u89c6\u53e3\u4e0a\uff0c\u4e0d\u5728\u8be5\u89c6\u53e3\u5916\u8fdb\u884c\u7ed8\u5236\u3002\u5982\u679c <code>passEncoder</code> \u662f\u4e00\u4e2a\u6e32\u67d3\u901a\u9053\u7f16\u7801\u5668\uff0c\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>passEncoder.setViewport( left, top, width, height, depthMin, depthMax );\n</code></pre> <p>\u5176\u4e2d left\u3001top\u3001width \u548c height \u4ee5\u50cf\u7d20\u5750\u6807\u7ed9\u51fa\uff0cdepthMin \u548c depthMax \u7684\u8303\u56f4\u662f 0 \u5230 1\uff0cdepthMin \u5c0f\u4e8e depthMax\u3002\u901a\u5e38\uff0cdepthMin \u4f1a\u662f\u96f6\uff0cdepthMax \u4f1a\u662f\u4e00\u3002\u4f8b\u5982\uff0c\u5f53\u7ed8\u5236\u5230\u4e00\u4e2a 800x600 \u50cf\u7d20\u7684\u753b\u5e03\u65f6\uff0c\u4f60\u53ef\u4ee5\u5c06\u573a\u666f\u6620\u5c04\u5230\u753b\u5e03\u7684\u53f3\u534a\u90e8\u5206\uff1a</p> <pre><code>passEncoder.setViewport( 400, 0, 400, 600, 0, 1 );\n</code></pre> <p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>setScissorRect()</code> \u6765\u9650\u5236\u5728\u89c6\u53e3\u5185\u7684\u4e00\u4e2a\u66f4\u5c0f\u77e9\u5f62\u533a\u57df\u5185\u8fdb\u884c\u7ed8\u5236\uff0c\u5176\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>passEncoder.setScissorRect( left, top, width, height );\n</code></pre> <p>\u540c\u6837\uff0cleft\u3001top\u3001width \u548c height \u4ee5\u50cf\u7d20\u5750\u6807\u7ed9\u51fa\u3002\u89c6\u53e3\u548c\u88c1\u526a\u77e9\u5f62\uff08scissor rect\uff09\u7684\u533a\u522b\u5728\u4e8e\u88c1\u526a\u77e9\u5f62\u4e0d\u4f1a\u5f71\u54cd\u5230\u5750\u6807\u6620\u5c04\uff1a\u89c6\u53e3\u663e\u793a\u6574\u4e2a\u6e32\u67d3\u573a\u666f\uff0c\u4f46\u662f\u88c1\u526a\u77e9\u5f62\u4f1a\u963b\u6b62\u573a\u666f\u7684\u4e00\u90e8\u5206\u88ab\u7ed8\u5236\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f webgpu/viewport_and_scissor.html \u4f7f\u7528\u4e86\u89c6\u53e3\u548c\u88c1\u526a\u77e9\u5f62\u3002\u5b83\u662f\u53e6\u4e00\u4e2a\u79fb\u52a8\u7684\u5706\u76d8\u52a8\u753b\uff0c\u663e\u793a\u6709\u9ed1\u8272\u8f6e\u5ed3\u7684\u5f69\u8272\u5706\u76d8\u3002\u4e0d\u540c\u7684\u89c6\u53e3\u88ab\u7528\u6765\u5c06\u573a\u666f\u7684\u56db\u4efd\u7ed8\u5236\u5230\u753b\u5e03\u7684\u56db\u4e2a\u8c61\u9650\u4e2d\u3002\u5728\u4e24\u4e2a\u89c6\u53e3\u4e2d\uff0c\u4e5f\u5e94\u7528\u4e86\u88c1\u526a\u77e9\u5f62\uff0c\u4f46\u53ea\u5e94\u7528\u4e8e\u5706\u76d8\u7684\u5185\u90e8\uff0c\u4e0d\u5e94\u7528\u4e8e\u5b83\u4eec\u7684\u8f6e\u5ed3\u3002</p> <p>A render pass encoder is used to add drawing commands to a command encoder. It specifies a pipeline and resources such as bind groups that are required by the pipeline. It also has several other options. We'll look at two of them here.</p> <p>The viewport is the rectangular region in a canvas or other render target in which the rendered image is displayed. The default viewport is the entire render target, but the <code>setViewport()</code> function in a render pass encoder can be used to select a smaller viewport. The standard WebGPU NDC coordinate system, with x and y ranging from minus one to one and depth ranging from zero to one, is then mapped onto the smaller viewport, and no drawing takes place outside that viewport. If passEncoder is a render pass encoder, a call to the function takes the form</p> <pre><code>passEncoder.setViewport( left, top, width, height, depthMin, depthMax );\n</code></pre> <p>where left, top, width, and height are given in pixel coordinates, and depthMin and depthMax are in the range 0 to 1, with depthMin less than depthMax. Usually, depthMin will be zero and depthMax will be one. For example, when drawing to an 800-by-600 pixel canvas, you can map the scene to the right half of the canvas using</p> <pre><code>passEncoder.setViewport( 400, 0, 400, 600, 0, 1 );\n</code></pre> <p>In addition, you can restrict drawing to a smaller rectangle within the viewport using setScissorRect(), which has the form</p> <pre><code>passEncoder.setScissorRect( left, top, width, height );\n</code></pre> <p>where again left, top, width, and height are given in pixel coordinates. The difference between viewport and scissor rect is that a scissor rect does not affect the coordinate mapping: The viewport shows the entire rendered scene, but a scissor rect prevents part of the scene from being drawn.</p> <p>The sample program webgpu/viewport_and_scissor.html uses both viewport and scissor rect. It is yet another moving disk animation, showing colored disks with black outlines. Different viewports are used to draw four copies of the scene to the four quadrants of a canvas. In two of the viewports, a scissor rect is also applied, but just to the disk interiors, not to their outlines.</p>"},{"location":"cn/c9/s7/#975-\u6e32\u67d3\u7ba1\u7ebf\u9009\u9879","title":"9.7.5 \u6e32\u67d3\u7ba1\u7ebf\u9009\u9879","text":"<p>Render Pipeline Options</p> \u4e2d\u6587\u82f1\u6587 <p>\u6e32\u67d3\u7ba1\u7ebf\u63cf\u8ff0\u7b26\uff08pipeline descriptor\uff09\u7528\u4e8e <code>device.createRenderPipeline()</code> \u521b\u5efa\u6e32\u67d3\u7ba1\u7ebf\u3002\u63cf\u8ff0\u7b26\u6709\u591a\u4e2a\u9009\u9879\uff0c\u8fd9\u4e9b\u9009\u9879\u5f71\u54cd\u7ba1\u7ebf\u5982\u4f55\u6e32\u67d3\u539f\u8bed\uff08primitives\uff09\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u591a\u6837\u672c\u5c5e\u6027\uff08multisample property\uff09\u662f\u5982\u4f55\u7528\u4e8e\u591a\u91cd\u91c7\u6837\u6297\u952f\u9f7f\uff089.2.5\u8282\uff09\uff0c\u4ee5\u53ca depthStencil \u5982\u4f55\u7528\u4e8e\u914d\u7f6e\u6df1\u5ea6\u6d4b\u8bd5\uff089.4.1\u8282\uff09\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e9b\u66f4\u591a\u7684\u6e32\u67d3\u7ba1\u7ebf\u9009\u9879\u3002</p> <p>\u989c\u8272\u6df7\u5408\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531\u7247\u6bb5\u7740\u8272\u5668\u8f93\u51fa\u7684\u989c\u8272\u4f1a\u66ff\u6362\u7247\u6bb5\u7684\u5f53\u524d\u989c\u8272\u3002\u4f46\u662f\uff0c\u8fd9\u4e24\u79cd\u989c\u8272\u53ef\u4ee5\u6df7\u5408\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7247\u6bb5\u7684\u65b0\u989c\u8272\u5c06\u662f\u201c\u6e90\u201d\u989c\u8272\uff08\u6765\u81ea\u7740\u8272\u5668\uff09\u548c\u201c\u76ee\u6807\u201d\u989c\u8272\uff08\u6e32\u67d3\u76ee\u6807\u4e2d\u7247\u6bb5\u7684\u5f53\u524d\u989c\u8272\uff09\u7684\u67d0\u79cd\u7ec4\u5408\u3002\u8fd9\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u534a\u900f\u660e\u989c\u8272\uff0c\u5176\u4e2d\u6e90\u989c\u8272\u7684 alpha \u5206\u91cf\u51b3\u5b9a\u4e86\u900f\u660e\u5ea6\u7684\u7a0b\u5ea6\u3002\u793a\u4f8b\u7a0b\u5e8f webgpu/alpha_blend.html \u5c55\u793a\u4e86\u8fd9\u4e00\u70b9\u3002</p> <p>\u989c\u8272\u6df7\u5408\u7684\u914d\u7f6e\u5d4c\u5957\u5728\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u7684\u7247\u6bb5\u5c5e\u6027\u4e2d\u3002\u5176\u529f\u80fd\u7c7b\u4f3c\u4e8e WebGL \u51fd\u6570 <code>gl.blendFuncSeparate()</code>\uff0c\u8be5\u51fd\u6570\u5728 7.4.1\u8282 \u4e2d\u8ba8\u8bba\u3002\u4ee5\u4e0b\u662f\u534a\u900f\u660e\u6027\u7684\u5178\u578b\u914d\u7f6e\uff1a</p> <pre><code>fragment: {\n    module: shader,\n    entryPoint: \"fragmentMainForDisk\",\n    targets: [{\n        format: navigator.gpu.getPreferredCanvasFormat(),\n        blend: { // \u914d\u7f6e\u7528\u4e8e\u989c\u8272\u6df7\u5408\u7684\u516c\u5f0f\u3002\n            color: { // \u5bf9 RGB \u989c\u8272\u5206\u91cf\u3002\n            operation: \"add\",                  // \u9ed8\u8ba4\u662f \"add\"\u3002\n            srcFactor: \"src-alpha\",            // \u9ed8\u8ba4\u662f \"one\"\u3002\n            dstFactor: \"one-minus-src-alpha\"   // \u9ed8\u8ba4\u662f \"zero\"\u3002\n            },\n            alpha: { // \u5bf9 alpha \u5206\u91cf\u3002\n            operation: \"add\",\n            srcFactor: \"zero\",\n            dstFactor: \"one\"\n            }\n        }\n    }]\n}\n</code></pre> <p>\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u989c\u8272\u5206\u91cf\u7684\u6df7\u5408\u4e0e alpha \u5206\u91cf\u662f\u5206\u5f00\u914d\u7f6e\u7684\u3002\u8fd9\u91cc\u7528\u4e8e\u989c\u8272\u5c5e\u6027\u7684\u503c\u8868\u660e\uff0c\u65b0\u7684 RGB \u989c\u8272\u503c\u662f\u7247\u6bb5\u7740\u8272\u5668\u8f93\u51fa\u548c\u5f53\u524d\u7247\u6bb5\u989c\u8272\u7684\u52a0\u6743\u5e73\u5747\u503c\u3002\u7528\u4e8e alpha \u7684\u503c\u8868\u660e\u76ee\u6807\u7684 alpha \u5206\u91cf\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002\u4f7f\u7528 \"add\" \u64cd\u4f5c\u7684\u901a\u7528\u516c\u5f0f\u662f\uff1a</p> <pre><code>new_color = shader_output*srcFactor + current_color*dstFactor\n</code></pre> <p>\u53e6\u4e00\u4e2a\u5e38\u89c1\u914d\u7f6e\u662f\u5c06\u64cd\u4f5c\u8bbe\u7f6e\u4e3a \"add\"\uff0c\u5e76\u5c06 srcFactor \u548c dstFactor \u90fd\u8bbe\u7f6e\u4e3a \"one\"\uff0c\u8fd9\u610f\u5473\u7740\u7740\u8272\u5668\u8f93\u51fa\u76f4\u63a5\u52a0\u5230\u5f53\u524d\u989c\u8272\u4e0a\u3002\u8fd9\u53ef\u80fd\u7528\u4e8e\u901a\u8fc7\u591a\u6b21\u4f20\u9012\u6784\u5efa\u76ee\u6807\u4e2d\u7684\u989c\u8272\uff0c\u6bcf\u6b21\u4f20\u9012\u90fd\u4e3a\u989c\u8272\u503c\u589e\u52a0\u4e00\u70b9\u3002</p> <p>\u989c\u8272\u5c4f\u853d\u3002\u7247\u6bb5\u76ee\u6807\u7684 writeMask \u5c5e\u6027\u5141\u8bb8\u4f60\u63a7\u5236\u7247\u6bb5\u7740\u8272\u5668\u8f93\u51fa\u7684\u54ea\u4e9b\u989c\u8272\u5206\u91cf\u5c06\u88ab\u5199\u5165\u6e32\u67d3\u76ee\u6807\u3002\uff08OpenGL \u4e2d\u7684\u76f8\u540c\u529f\u80fd\u79f0\u4e3a \"color masking\"\uff1b7.4.1\u8282\u8ba8\u8bba\u4e86\u5b83\u5982\u4f55\u7528\u4e8e\u7acb\u4f53\u58f0\u56fe\u3002\uff09\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9650\u5236\u5199\u5165\u7ea2\u8272\u5206\u91cf\uff0c\u90a3\u4e48\u53ea\u6709\u5f53\u524d\u7247\u6bb5\u989c\u8272\u7684\u7ea2\u8272\u5206\u91cf\u53ef\u4ee5\u6539\u53d8\uff1b\u7eff\u8272\u3001\u84dd\u8272\u548c alpha \u5206\u91cf\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002\u4ee5\u4e0b\u662f\u5728\u6e32\u67d3\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u4e2d\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff1a</p> <pre><code>fragment: {\n    module: shader,\n    entryPoint: \"fragmentMain\",\n    targets: [{\n        format: navigator.gpu.getPreferredCanvasFormat(),\n        writeMask: GPUColorWrite.RED  // \u53ea\u5c06\u7ea2\u8272\u5206\u91cf\u5199\u5165\u76ee\u6807\u3002\n    }]\n}\n</code></pre> <p>writeMask \u5c5e\u6027\u7684\u5176\u4ed6\u503c\u5305\u62ec GPUColorWrite.GREEN\u3001GPUColorWrite.BLUE \u548c GPUColorWrite.ALPHA\u3002\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6216\u8fd0\u7b97\u7b26\uff08\"|\"\uff09\u7ec4\u5408\u51e0\u4e2a\u5e38\u91cf\u6765\u5199\u5165\u51e0\u4e2a\u5206\u91cf\u3002\u4f8b\u5982\uff0c</p> <pre><code>writeMask: GPUColorWrite.GREEN | GPUColorWrite.BLUE\n</code></pre> <p>\u9ed8\u8ba4\u503c\u662f GPUColorWrite.ALL\uff0c\u8fd9\u610f\u5473\u7740\u6240\u6709\u56db\u4e2a\u989c\u8272\u5206\u91cf\u90fd\u88ab\u5199\u5165\u3002\u793a\u4f8b\u7a0b\u5e8f webgpu/color_mask.html \u5141\u8bb8\u4f60\u5b9e\u9a8c\u5199\u5165\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u989c\u8272\u5206\u91cf\u7684\u4efb\u4f55\u7ec4\u5408\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u53ea\u5728\u9ed1\u8272\u80cc\u666f\u4e0a\u5199\u5165\u7ea2\u8272\u5206\u91cf\uff0c\u4f60\u5c06\u5f97\u5230\u7ea2\u8272\u9634\u5f71\uff0c\u56e0\u4e3a\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u5728\u5199\u5165\u540e\u4ecd\u7136\u662f\u96f6\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u5728\u767d\u8272\u80cc\u666f\u4e0a\u5199\u5165\uff0c\u4f60\u5c06\u5f97\u5230\u84dd\u7eff\u8272\u9634\u5f71\uff0c\u56e0\u4e3a\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u5728\u5199\u5165\u540e\u4ecd\u7136\u7b49\u4e8e\u4e00\uff0c\u800c\u7ea2\u8272\u5206\u91cf\u53ef\u4ee5\u5c0f\u4e8e\u4e00\u3002</p> <p>\u6df1\u5ea6\u504f\u7f6e\u3002\u5f53\u542f\u7528\u6df1\u5ea6\u6d4b\u8bd5\u65f6\uff0c\u7ed8\u5236\u4e24\u4e2a\u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\u6df1\u5ea6\u7684\u7269\u4f53\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\uff0c\u56e0\u4e3a\u4e00\u4e2a\u7269\u4f53\u53ef\u80fd\u5728\u67d0\u4e9b\u50cf\u7d20\u4e0a\u53ef\u89c1\uff0c\u800c\u53e6\u4e00\u4e2a\u7269\u4f53\u5728\u5176\u4ed6\u50cf\u7d20\u4e0a\u53ef\u89c1\u3002\u53c2\u89c1 3.1.4\u8282 \u7684\u7ed3\u5c3e\u3002\u89e3\u51b3\u65b9\u6848\u662f\u5411\u5176\u4e2d\u4e00\u4e2a\u7269\u4f53\u7684\u6df1\u5ea6\u6dfb\u52a0\u5c11\u91cf\u6216\u201c\u504f\u7f6e\u201d\u3002\uff08\u5728 OpenGL \u4e2d\u79f0\u4e3a \"polygon offset\"\uff1b\u53c2\u89c1 3.4.1\u8282 \u7684\u7ed3\u5c3e\u3002\uff09\u793a\u4f8b\u7a0b\u5e8f webgpu/polyhedra.html \u5141\u8bb8\u7528\u6237\u67e5\u770b\u7528\u767d\u8272\u9762\u548c\u9ed1\u8272\u8fb9\u7ed8\u5236\u7684\u591a\u9762\u4f53\u3002\u5b83\u4f7f\u7528\u6df1\u5ea6\u504f\u7f6e\u786e\u4fdd\u8fb9\u7f18\u5b8c\u5168\u53ef\u89c1\u3002\u914d\u7f6e\u662f\u7528\u4e8e\u7ed8\u5236\u9762\u7684\u90e8\u5206\u7684\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u7684 depthStencil \u5c5e\u6027\uff1a</p> <pre><code>depthStencil: {  \n    depthWriteEnabled: true,\n    depthCompare: \"less\",\n    format: \"depth24plus\",\n    depthBias: 1,\n    depthBiasSlopeScale: 1.0\n}\n</code></pre> <p>depthBias \u548c depthBiasSlopeScale \u5c5e\u6027\u7528\u4e8e\u4fee\u6539\u7ba1\u7ebf\u6e32\u67d3\u7684\u6bcf\u4e2a\u7247\u6bb5\u7684\u6df1\u5ea6\u3002\u9ed8\u8ba4\u503c\u662f\u96f6\uff0c\u8fd9\u4e0d\u4f1a\u6539\u53d8\u6df1\u5ea6\u3002\u6b63\u503c\u4f1a\u589e\u52a0\u7247\u6bb5\u7684\u6df1\u5ea6\uff0c\u4f7f\u5176\u7a0d\u5fae\u8fdc\u79bb\u7528\u6237\u3002\u8fd9\u91cc\u663e\u793a\u7684 depthBias \u548c depthBiasSlopeScale \u7684\u503c 1 \u548c 1.0 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u6709\u6548\u3002\uff08depthBias \u7684\u503c\u4e58\u4ee5\u6df1\u5ea6\u7f13\u51b2\u533a\u53ef\u4ee5\u8868\u793a\u7684\u4e24\u4e2a\u6df1\u5ea6\u4e4b\u95f4\u7684\u6700\u5c0f\u6b63\u503c\u5dee\u5f02\u3002\u8fd9\u672c\u8eab\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u53ef\u80fd\u6709\u6548\uff0c\u4f46\u5bf9\u4e8e\u7528\u6237\u51e0\u4e4e\u4ece\u8fb9\u7f18\u67e5\u770b\u7684\u4e09\u89d2\u5f62\uff0c\u53ef\u80fd\u4e0d\u591f\u3002depthBiasSlopeScale \u589e\u52a0\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u504f\u7f6e\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4e09\u89d2\u5f62\u4e0e\u89c6\u56fe\u65b9\u5411\u7684\u89d2\u5ea6\u3002\uff09\u8bf7\u6ce8\u610f\uff0c\u6df1\u5ea6\u504f\u7f6e\u4f3c\u4e4e\u53ea\u5bf9\u4e09\u89d2\u5f62\u539f\u8bed\u6709\u6548\uff0c\u4e0d\u9002\u7528\u4e8e\u7ebf\u6216\u70b9\uff0c\u56e0\u6b64\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u6df1\u5ea6\u504f\u7f6e\u5e94\u7528\u4e8e\u591a\u9762\u4f53\u7684\u9762\uff0c\u800c\u4e0d\u662f\u8fb9\u7f18\u3002</p> <p>\u9762\u5254\u9664\u548c\u524d\u5411\u9762\u3002\u591a\u9762\u4f53\u793a\u4f8b\u4f7f\u7528\u4e86\u4e24\u4e2a\u66f4\u591a\u7684\u7ba1\u7ebf\u9009\u9879\uff1acullMode \u548c frontFace\u3002\u5b83\u4eec\u662f\u6e32\u67d3\u7ba1\u7ebf\u63cf\u8ff0\u7b26\u7684 primitive \u5c5e\u6027\u4e2d\u7684\u9009\u9879\u3002</p> <p>\u7a0b\u5e8f\u4e2d\u7684\u591a\u9762\u4f53\u90fd\u662f\u5c01\u95ed\u5bf9\u8c61\uff1a\u5185\u90e8\u5b8c\u5168\u88ab\u5916\u90e8\u9690\u85cf\u3002\u6ca1\u6709\u5fc5\u8981\u6e32\u67d3\u80cc\u9762\u7684\u591a\u8fb9\u5f62\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f4d\u4e8e\u524d\u9762\u591a\u8fb9\u5f62\u7684\u540e\u9762\u3002cullMode \u5c5e\u6027\u53ef\u4ee5\u7528\u6765\u5173\u95ed\u6b63\u9762\u6216\u80cc\u9762\u4e09\u89d2\u5f62\u7684\u6e32\u67d3\u3002\u9ed8\u8ba4\u503c \"none\" \u8868\u793a\u4e0d\u5254\u9664\u4efb\u4f55\u4e09\u89d2\u5f62\u3002\u5728\u591a\u9762\u4f53\u7a0b\u5e8f\u4e2d\uff0c\u6211\u5c06 cullMode \u8bbe\u7f6e\u4e3a \"back\"\uff0c\u4ee5\u907f\u514d\u6e32\u67d3\u80cc\u9762\u4e09\u89d2\u5f62\u7684\u5f00\u9500\uff0c\u8fd9\u4e9b\u4e09\u89d2\u5f62\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u4e0d\u4f1a\u53ef\u89c1\u3002</p> <p>\u4f46\u662f\uff0c\u6211\u4e0d\u5f97\u4e0d\u505a\u53e6\u4e00\u4e2a\u6539\u53d8\u3002\u901a\u5e38\u7684\u7ea6\u5b9a\u662f\u901a\u8fc7\u89c4\u5219\u786e\u5b9a\u4e09\u89d2\u5f62\u7684\u6b63\u9762\uff0c\u5373\u5f53\u67e5\u770b\u6b63\u9762\u65f6\uff0c\u9876\u70b9\u4ee5\u9006\u65f6\u9488\u987a\u5e8f\u7ed9\u51fa\u3002\u7136\u800c\uff0c\u7a0b\u5e8f\u4e2d\u7684\u591a\u9762\u4f53\u6a21\u578b\u4f7f\u7528\u76f8\u53cd\u7684\u7ea6\u5b9a\uff1a\u987a\u65f6\u9488\u6392\u5e8f\u3002\u56e0\u6b64\uff0c\u6211\u5c06 primitive \u7684 frontFace \u9009\u9879\u8bbe\u7f6e\u4e3a \"cw\" \u4ee5\u6307\u5b9a\u987a\u65f6\u9488\u9876\u70b9\u6392\u5e8f\u3002</p> <pre><code>primitive: {\n    topology: \"triangle-list\",\n    cullMode: \"back\",  // \u5176\u4ed6\u503c\u5305\u62ec \"front\" \u548c \"none\"\u3002\n    frontFace: \"cw\"    // \u53e6\u4e00\u4e2a\u503c\u662f \"ccw\"\uff08\u9006\u65f6\u9488\uff09\u3002\n}\n</code></pre> <p>\u73b0\u5728\uff0c\u8fd9\u4e2a\u6539\u53d8\u5bf9\u573a\u666f\u7684\u5916\u89c2\u6ca1\u6709\u5f71\u54cd\uff1b\u5b83\u53ea\u662f\u4e3a\u4e86\u6548\u7387\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\uff0c\u662f\u7684\uff0c\u6211\u53ef\u4ee5\u53ea\u5c06 cullMode \u8bbe\u7f6e\u4e3a \"front\"\uff0c\u4f46\u90a3\u4f1a\u8bef\u5bfc\u4eba\u2014\u2014\u800c\u4e14\u5b83\u5c06\u8ba9\u6211\u6ca1\u6709 frontFace \u7684\u793a\u4f8b\u3002</p> <p>A pipeline descriptor is used with <code>device.createRenderPipeline()</code> to create a render pipeline. The descriptor has a number of options that affect how the pipeline will render primitives. We have seen, for example, how the multisample property is used for multisampling antialiasing (Subsection 9.2.5) and how detpthStencil is used to configure the depth test (Subsection 9.4.1). Here, we look at a few more render pipeline options.</p> <p>Color Blending. By default, the color that is output by a fragment shader replaces the current color of the fragment. But it is possible for the two colors to be blended. That is, the new color of the fragment will be some combination of the \"source\" color (from the shader) and the \"destination\" color (the current color of the fragment in the render target). This is often used to implement translucent colors, where the alpha component of the source color determines the degree of transparency. For an example, see the sample program webgpu/alpha_blend.html.</p> <p>The configuration for color blending is nested inside the fragment property of the pipeline descriptor. The functionality is similar to the WebGL function gl.blendFuncSeparate(), which is discussed in Subsection 7.4.1. Here is the typical configuration for translucency:</p> <pre><code>fragment: {\nmodule: shader,\nentryPoint: \"fragmentMainForDisk\",\ntargets: [{\n    format: navigator.gpu.getPreferredCanvasFormat(),\n    blend: { // Configure the formulas to be used for color blending.\n        color: { // For RGB color components.\n        operation: \"add\",                  // \"add\" is the default.\n        srcFactor: \"src-alpha\",            // The default is \"one\".\n        dstFactor: \"one-minus-src-alpha\"   // The default is \"zero\".\n        },\n        alpha: { // For the alpha component.\n        operation: \"add\",\n        srcFactor: \"zero\",\n        dstFactor: \"one\"\n        }\n    }\n}]\n}\n</code></pre> <p>Blending for the red, green, and blue color components is configured separately from the alpha component. The values used here for the color property say that the new RGB color value is a weighted average of the fragment shader output and the current fragment color. The values used for alpha say that the alpha component of the destination will remain unchanged. The general formula, using the \"add\" operation, is</p> <pre><code>new_color = shader_output*srcFactor + current_color*dstFactor\n</code></pre> <p>Another common configuration is to set the operation to \"add\" and both srcFactor and dstFactor to \"one\", meaning that the shader output is simply added to the current color. This might be used to build up the colors in the target by using multiple passes that each add a little to the color value.</p> <p>Color Masking. The writeMask property of the fragment target lets you control which color components of the fragment shader output will be written to the render target. (The same functionality is called \"color masking\" in OpenGL; Subsection 7.4.1 discusses how it can be used for anaglyph stereo.) For example, if you restrict writing to the red component, then only the red component of the current fragment color can be changed; the green, blue, and alpha components will be left unchanged. Here is how you would do that in a render pipeline descriptor:</p> <pre><code>fragment: {\nmodule: shader,\nentryPoint: \"fragmentMain\",\ntargets: [{\n    format: navigator.gpu.getPreferredCanvasFormat(),\n    writeMask: GPUColorWrite.RED  // Only write the red component to target.\n}]\n}\n</code></pre> <p>Other values for the writeMask property include GPUColorWrite.GREEN, GPUColorWrite.BLUE, and GPUColorWrite.ALPHA. You can also combine several of these constants with the or (\"|\") operator to write several components. For example,</p> <pre><code>writeMask: GPUColorWrite.GREEN | GPUColorWrite.BLUE\n</code></pre> <p>The default value is GPUColorWrite.ALL, which means that all four color components are written. The sample program webgpu/color_mask.html lets you experiment with writing to any combination of the red, green, and blue color components. Note that if you write just the red component to a black background, you will get shades of red, since the green and blue components will still be zero after writing. But if you write to a white background, you will get shades of blue-green, since the green and blue components will still equal one after the write, while the red component can be less than one.</p> <p>Depth Bias. When the depth test is enabled, drawing two things at almost exactly the same depth can be a problem, because one object might be visible at some pixels while the other object is visible at other pixels. See the end of Subsection 3.1.4. The solution is to add a small amount, or \"bias,\" to the depth of one of the objects. (This is called \"polygon offset\" in OpenGL; see the end of Subsection 3.4.1.) The sample program webgpu/polyhedra.html lets the users view polyhedra that are drawn with white faces and black edges. It uses depth bias to ensure that the edges are fully visible. The configuration is part of the depthStencil property of the pipeline descriptor that is used for drawing the faces:</p> <pre><code>depthStencil: {  \ndepthWriteEnabled: true,\ndepthCompare: \"less\",\nformat: \"depth24plus\",\ndepthBias: 1,\ndepthBiasSlopeScale: 1.0\n}\n</code></pre> <p>The depthBias and depthBiasSlopeScale properties are used to modify the depth of each fragment that is rendered by the pipeline. The default values are zero, which leaves the depth unchanged. Positive values will increase the fragment's depth, moving it a bit away from the user. The values 1 and 1.0 for depthBias and depthBiasSlopeScale shown here should work in most cases. (The value of depthBias is multiplied by the smallest positive difference between two depths that can be represented in the depth buffer. That by itself might work in many cases, but for triangles that the user is viewing close to edge-on, it might not be enough. The depthBiasSlopeScale adds an additional bias that depends on the angle that the triangle makes with the view direction.) Note that depth bias seems to work only for triangle primitives, not for lines or points, so the depth bias in the sample program is applied to the faces of the polyhedron, not to the edges.</p> <p>Face Culling and Front Face. The polyhedra example uses two more pipeline options: cullMode and frontFace. The are options in the primitive property of the render pipeline descriptor.</p> <p>The polyhedra in the program are all closed objects: The interior is completely hidden by the exterior. There is no need to render back-facing polygons, since they lie behind front-facing polygons. The cullMode property can be used to turn off rendering of either front-facing or back-facing triangles. With the default value, \"none\", no triangles are culled. In the polyhedra program, I set cullMode to \"back\", to avoid the expense of rendering back-facing triangles that would not be visible in the final image.</p> <p>However, I had to make another change. The usual convention is that the front face of a triangle is determined by the rule that when looking at the front face, the vertices are given in counterclockwise order. However, the polyhedron models in the program use the opposite convention: clockwise ordering. So, I set the frontFace option of the primitive to \"cw\" to specify clockwise vertex ordering.</p> <pre><code>primitive: {\n    topology: \"triangle-list\",\n    cullMode: \"back\",  // Other values are \"front\" and \"none\".\n    frontFace: \"cw\"    // The other value is \"ccw\" (counterclockwise).\n}\n</code></pre> <p>Now, that change has no effect on the appearance of the scene; it was done for efficiency only. And if you wondering, yes, I could have just set cullMode to \"front\", but that would be misleading\u2014and it would have left me with no example for frontFace.</p>"},{"location":"cn/source/","title":"\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801","text":"<p>Source Code and Demos</p> \u4e2d\u6587\u82f1\u6587"}]}