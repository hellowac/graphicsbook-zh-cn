{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba","text":"<ul> <li>\u4e2d\u6587\u7248: \u53bb\u770b</li> <li>\u539f\u7248(en): see</li> </ul>"},{"location":"#\u6e90\u4fe1\u606f","title":"\u6e90\u4fe1\u606f","text":"<ul> <li>\u539f\u7f51\u7ad9: https://math.hws.edu/graphicsbook/index.html</li> <li>\u539fgithub\u6e90\u7801: https://github.com/davidjeck/graphicsbook</li> </ul>"},{"location":"cn/","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba","text":"<p>\u7248\u672c 1.4\uff0c2023 \u5e74 8 \u6708</p> <p>\u4f5c\u8005\uff1a  \u5927\u536b\u00b7J\u00b7\u57c3\u514b  ( eck@hws.edu )</p> <p></p> <p>\u6b22\u8fce\u9605\u8bfb\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b80\u4ecb\uff0c\u8fd9\u662f\u4e00\u672c\u514d\u8d39\u7684\u5728\u7ebf\u6559\u79d1\u4e66\uff0c\u6db5\u76d6\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u548c\u8ba1\u7b97\u673a\u56fe\u5f62\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u672c\u4e66\u65e8\u5728\u7528\u4f5c\u4e00\u5b66\u671f\u8bfe\u7a0b\u7684\u6559\u79d1\u4e66\uff0c\u8be5\u8bfe\u7a0b\u901a\u5e38\u7531\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u7684\u672c\u79d1\u751f\u5b66\u4e60\uff0c\u5e76\u4ee5\u81f3\u5c11\u4e24\u4e2a\u5b66\u671f\u7684\u7f16\u7a0b\u4e3a\u5148\u51b3\u6761\u4ef6\u3002 1.4 \u7248\u672c\u6dfb\u52a0\u4e86\u6709\u5173 WebGPU \u7684\u65b0\u7ae0\u8282\u3002\u8bf7\u53c2\u9605\u524d\u8a00\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002</p> <p>\u672c\u4e66\u7684\u7f51\u9875\u5305\u62ec\u5b9e\u65f6\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u9700\u8981\u73b0\u4ee3\u7f51\u7edc\u6d4f\u89c8\u5668\uff0c\u4f8b\u5982\u6700\u65b0\u7248\u672c\u7684 Chrome\u3001Firefox\u3001Safari \u6216 Edge\u3002\u7b2c 9 \u7ae0\u793a\u4f8b\u9700\u8981\u652f\u6301 WebGPU \u7684\u6d4f\u89c8\u5668\u3002\u867d\u7136\u672c\u4e66\u4e3b\u8981\u662f\u4e3a\u5728\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e0a\u9605\u8bfb\u800c\u8bbe\u8ba1\u7684\uff0c\u4f46\u5927\u591a\u6570\u6f14\u793a\u4e5f\u5e94\u8be5\u9002\u7528\u4e8e\u6700\u65b0\u7684\u79fb\u52a8\u8bbe\u5907\uff0c\u4f7f\u7528\u89e6\u6478\u5c4f\u800c\u4e0d\u662f\u9f20\u6807\u3002</p> <p>\u4e66\u4e2d\u4ee5\u8fd9\u79cd\u98ce\u683c\u663e\u793a\u6216\u5e26\u4e0b\u5212\u7ebf\u7684 \u5355\u8bcd\u6307\u7684\u662f\u672f\u8bed\u8868\u6761\u76ee\uff1b\u5355\u51fb\u8be5\u8bcd\u53ef\u67e5\u770b\u5b9a\u4e49\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u6b64\u7f51\u7ad9\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u4f7f\u7528\u3002\u8fd8\u63d0\u4f9b\u8be5\u6559\u79d1\u4e66\u7684 PDF \u7248\u672c\u3002\u4e0b\u8f7d\u94fe\u63a5\u53ef\u4ee5\u5728\u672c\u9875\u5e95\u90e8\u627e\u5230\u3002</p> <p>\u672c\u4e66\u7684\u7f51\u9875\u5305\u62ec\u5b9e\u65f6\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u9700\u8981\u73b0\u4ee3\u7f51\u7edc\u6d4f\u89c8\u5668\uff0c\u4f8b\u5982\u6700\u65b0\u7248\u672c\u7684 Chrome\u3001Firefox\u3001Safari \u6216 Edge\u3002\u7b2c 9 \u7ae0\u793a\u4f8b\u9700\u8981\u652f\u6301 WebGPU \u7684\u6d4f\u89c8\u5668\u3002\u867d\u7136\u672c\u4e66\u4e3b\u8981\u662f\u4e3a\u5728\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e0a\u9605\u8bfb\u800c\u8bbe\u8ba1\u7684\uff0c\u4f46\u5927\u591a\u6570\u6f14\u793a\u4e5f\u5e94\u8be5\u9002\u7528\u4e8e\u6700\u65b0\u7684\u79fb\u52a8\u8bbe\u5907\uff0c\u4f7f\u7528\u89e6\u6478\u5c4f\u800c\u4e0d\u662f\u9f20\u6807\u3002</p> <p>\u4e66\u4e2d\u4ee5\u8fd9\u79cd\u98ce\u683c\u663e\u793a\u6216\u5e26\u4e0b\u5212\u7ebf\u7684 \u5355\u8bcd\u6307\u7684\u662f\u672f\u8bed\u8868\u6761\u76ee\uff1b\u5355\u51fb\u8be5\u8bcd\u53ef\u67e5\u770b\u5b9a\u4e49\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u6b64\u7f51\u7ad9\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u4f7f\u7528\u3002\u8fd8\u63d0\u4f9b\u8be5\u6559\u79d1\u4e66\u7684 PDF \u7248\u672c\u3002\u4e0b\u8f7d\u94fe\u63a5\u53ef\u4ee5\u5728\u672c\u9875\u5e95\u90e8\u627e\u5230\u3002</p>"},{"location":"cn/#\u7b80\u77ed\u76ee\u5f55","title":"\u7b80\u77ed\u76ee\u5f55","text":"<ul> <li>\u5b8c\u6574\u76ee\u5f55</li> <li>\u524d\u8a00</li> <li>\u7b2c 1 \u7ae0\uff1a\u7b80\u4ecb</li> <li>\u7b2c 2 \u7ae0\uff1a\u4e8c\u7ef4\u56fe\u5f62</li> <li>\u7b2c 3 \u7ae0\uff1aOpenGL 1.1\uff1a\u51e0\u4f55</li> <li>\u7b2c 4 \u7ae0\uff1aOpenGL 1.1\uff1a\u706f\u5149\u548c\u6750\u8d28</li> <li>\u7b2c 5 \u7ae0\uff1aThree.js\uff1a3D \u573a\u666f\u56fe API</li> <li>\u7b2c 6 \u7ae0\uff1aWebGL \u7b80\u4ecb</li> <li>\u7b2c 7 \u7ae0\uff1a\u4f7f\u7528 WebGL \u8fdb\u884c 3D \u56fe\u5f62</li> <li>\u7b2c 8 \u7ae0\uff1a\u8d85\u8d8a\u57fa\u672c 3D \u56fe\u5f62</li> <li>\u7b2c 9 \u7ae0\uff1aWebGPU \u7b80\u4ecb</li> <li>\u9644\u5f55 A\uff1a\u7f16\u7a0b\u8bed\u8a00</li> <li>\u9644\u5f55 B\uff1aBlender\uff1a3D \u5efa\u6a21\u7a0b\u5e8f</li> <li>\u9644\u5f55 C\uff1a\u7528\u4e8e 2D \u56fe\u5f62\u7684 Gimp \u548c Inkscape</li> <li>\u9644\u5f55 D\uff1a\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801</li> <li>\u9644\u5f55 E\uff1a\u672f\u8bed\u8868</li> <li>\u65b0\u95fb</li> </ul> <p>\u00a92015\u20132023\uff0c\u5927\u536b\u00b7J\u00b7\u57c3\u514b\u3002\u672c\u4f5c\u54c1\u6839\u636eCreative Commons Attribution-Noncommercial-ShareAlike 4.0 License \u83b7\u5f97\u8bb8\u53ef\u3002 \uff08\u6b64\u8bb8\u53ef\u5141\u8bb8\u60a8\u4ee5\u672a\u7ecf\u4fee\u6539\u7684\u5f62\u5f0f\u91cd\u65b0\u5206\u53d1\u672c\u4e66\u4ee5\u7528\u4e8e\u975e\u5546\u4e1a\u76ee\u7684\u3002\u5b83\u5141\u8bb8\u60a8\u51fa\u4e8e\u975e\u5546\u4e1a\u76ee\u7684\u5236\u4f5c\u548c\u5206\u53d1\u4fee\u6539\u7248\u672c\uff0c\u53ea\u8981\u60a8\u5305\u542b\u539f\u4f5c\u8005\u7684\u5f52\u5c5e\uff0c\u6e05\u695a\u5730\u63cf\u8ff0\u4fee\u6539\u5185\u5bb9\u60a8\u5236\u4f5c\u5e76\u5728\u4e0e\u539f\u59cb\u4f5c\u54c1\u76f8\u540c\u7684\u8bb8\u53ef\u4e0b\u5206\u53d1\u4fee\u6539\u540e\u7684\u4f5c\u54c1\uff0c\u4f5c\u8005\u53ef\u80fd\u4f1a\u6388\u4e88\u5176\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u7684\u8bb8\u53ef\u3002\u6709\u5173\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8bb8\u53ef \u3002\uff09 \u672c\u4e66\u7684\u4e3b\u9875\u662f\uff1a http://math.hws.edu/graphicsbook/</p>"},{"location":"cn/#\u4e0b\u8f7d\u94fe\u63a5","title":"\u4e0b\u8f7d\u94fe\u63a5","text":"<ul> <li> <p>\u5b8c\u6574\u7f51\u7ad9\u4e0b\u8f7d\uff1a</p> <ul> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook-web-site.zip \u2014 \u6b64\u201czip\u201d\u5b58\u6863\u5305\u542b\u672c\u6559\u79d1\u4e66\u7f51\u7ad9\u7684\u5b8c\u6574\u526f\u672c\u3002\u60a8\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u7f51\u7edc\u670d\u52a1\u5668\u4e0a\u53d1\u5e03\u7f51\u7ad9\u7684\u526f\u672c\uff0c\u4e5f\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u672c\u5730\u4f7f\u7528\u5b83\u3002\u5927\u5c0f\uff1a26 \u5146\u5b57\u8282\u3002</li> </ul> </li> <li> <p>PDF\u4e0b\u8f7d\uff1a</p> <ul> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook-linked.pdf \u2014 PDF \u7248\u672c\uff0c\u5305\u542b\u7528\u4e8e\u5bfc\u822a\u7684\u5185\u90e8\u94fe\u63a5\u4ee5\u53ca\u6307\u5411\u6e90\u4ee3\u7801\u6587\u4ef6\u548c PDF \u4e2d\u672a\u5305\u542b\u7684\u5176\u4ed6\u8d44\u6e90\u7684\u5916\u90e8\u94fe\u63a5\u3002\u63a8\u8350\u7528\u4e8e\u5c4f\u5e55\u9605\u8bfb\u3002 533 \u9875\u3002\u5927\u5c0f\uff1a6.0 \u5146\u5b57\u8282\u3002</li> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook.pdf \u2014 \u6ca1\u6709\u94fe\u63a5\u7684 PDF \u7248\u672c\uff0c\u66f4\u9002\u5408\u6253\u5370\u3002 541 \u9875\u3002\u5927\u5c0f\uff1a5.6 \u5146\u5b57\u8282\u3002</li> </ul> </li> </ul>"},{"location":"cn/#\u5370\u5237\u7248","title":"\u5370\u5237\u7248","text":"<p>\u7f51\u7ad9\u548c\u94fe\u63a5\u7684 PDF \u662f\u9605\u8bfb\u672c\u4e66\u7684\u9996\u9009\u7248\u672c\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u9700\u8981\u88c5\u8ba2\u672c\u7684\u8bfb\u8005\uff0c\u6211\u5728\u6309\u9700\u53d1\u5e03\u7f51\u7ad9lulu.com\u4e0a\u63d0\u4f9b\u4e86\u5370\u5237\u7248\u672c\u3002 \uff08\u8bf7\u6ce8\u610f\uff0c\u5370\u5237\u7248\u6309 lulu.com \u7684\u6210\u672c\u51fa\u552e\uff0c\u6211\u4e0d\u4f1a\u4ece\u4e2d\u8d5a\u53d6\u4efb\u4f55\u5229\u6da6\u3002\uff09\u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64\u94fe\u63a5\u8d2d\u4e70\u5370\u5237\u7248\uff1ahttps://www.lulu.com/shop/david-eck/introduction-to-computer-graphics/paperback/product-1jzn2z5r.html</p> <ul> <li>1 August 2015, Version 1.0 released</li> <li>28 January 2016, Version 1.1 released</li> <li>6 January 2018, Version 1.2 released</li> <li>1 August 2021, Version 1.3 released</li> <li>20 December 2021, Version 1.3.1 released</li> <li>1 August 2023, Version 1.4 released</li> </ul>"},{"location":"cn/contents-with-subsections/","title":"\u76ee\u5f55","text":"<p>\u8fd9\u662f\u514d\u8d39\u5728\u7ebf\u6559\u79d1\u4e66\u300a\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba\u300b\u7684\u76ee\u5f55\u3002</p> <p>\u524d\u8a00</p>"},{"location":"cn/contents-with-subsections/#\u7b2c\u4e00\u7ae0--\u7b80\u4ecb","title":"\u7b2c\u4e00\u7ae0\uff1a \u7b80\u4ecb","text":"<ul> <li>1.1  \u7ed8\u753b\u4e0e\u7ed8\u56fe</li> <li>1.2  3D\u56fe\u5f62\u5143\u7d20</li> <li>1.3  \u786c\u4ef6\u548c\u8f6f\u4ef6</li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-2-\u7ae0--\u4e8c\u7ef4\u56fe\u5f62","title":"\u7b2c 2 \u7ae0\uff1a  \u4e8c\u7ef4\u56fe\u5f62","text":"<ul> <li>2.1  \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272<ul> <li>2.1.1  \u50cf\u7d20\u5750\u6807</li> <li>2.1.2  \u5b9e\u6570\u5750\u6807\u7cfb</li> <li>2.1.3  \u7eb5\u6a2a\u6bd4</li> <li>2.1.4  \u989c\u8272\u6a21\u578b</li> </ul> </li> <li>2.2  \u5f62\u72b6<ul> <li>2.2.1  \u57fa\u672c\u5f62\u72b6</li> <li>2.2.2  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.2.3  \u591a\u8fb9\u5f62\u3001\u66f2\u7ebf\u548c\u8def\u5f84</li> </ul> </li> <li>2.3  \u53d8\u6362<ul> <li>2.3.1  \u67e5\u770b\u548c\u5efa\u6a21</li> <li>2.3.2  \u7ffb\u8bd1</li> <li>2.3.3  \u65cb\u8f6c</li> <li>2.3.4  \u7ec4\u5408\u53d8\u6362</li> <li>2.3.5  \u7f29\u653e</li> <li>2.3.6  \u526a\u5207</li> <li>2.3.7  \u7a97\u53e3\u5230\u89c6\u53e3</li> <li>2.3.8  \u77e9\u9635\u548c\u5411\u91cf</li> </ul> </li> <li>2.4  \u5c42\u6b21\u5efa\u6a21<ul> <li>2.4.1  \u6784\u5efa\u590d\u6742\u5bf9\u8c61</li> <li>2.4.2  \u573a\u666f\u56fe</li> <li>2.4.3  \u53d8\u6362\u5806\u6808</li> </ul> </li> <li>2.5  Java Graphics2D<ul> <li>2.5.1  \u4e8c\u7ef4\u56fe\u5f62</li> <li>2.5.2  \u5f62\u72b6</li> <li>2.5.3  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.5.4  \u53d8\u6362</li> <li>2.5.5  BufferedImage \u548c\u50cf\u7d20</li> </ul> </li> <li>\u7b2c 2.6 \u8282  HTML Canvas \u56fe\u5f62<ul> <li>2.6.1  2D \u56fe\u5f62\u4e0a\u4e0b\u6587</li> <li>2.6.2  \u5f62\u72b6</li> <li>2.6.3  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.6.4  \u53d8\u6362</li> <li>2.6.5  \u8f85\u52a9\u753b\u5e03</li> <li>2.6.6  \u50cf\u7d20\u64cd\u4f5c</li> <li>2.6.7  \u56fe\u7247</li> </ul> </li> <li>2.7  SVG\uff1a\u573a\u666f\u63cf\u8ff0\u8bed\u8a00<ul> <li>2.7.1  SVG \u6587\u6863\u7ed3\u6784</li> <li>2.7.2  \u5f62\u72b6\u3001\u6837\u5f0f\u548c\u53d8\u6362</li> <li>2.7.3  \u591a\u8fb9\u5f62\u548c\u8def\u5f84</li> <li>2.7.4  \u5c42\u6b21\u6a21\u578b</li> <li>2.7.5  \u52a8\u753b</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-3-\u7ae0--opengl-11\u51e0\u4f55","title":"\u7b2c 3 \u7ae0\uff1a OpenGL 1.1\uff1a\u51e0\u4f55","text":"<ul> <li>3.1  OpenGL 1.1 \u4e2d\u7684\u5f62\u72b6\u548c\u989c\u8272<ul> <li>3.1.1  OpenGL\u57fa\u5143</li> <li>3.1.2  OpenGL\u989c\u8272</li> <li>3.1.3  glColor \u548c glVertex \u4e0e\u6570\u7ec4</li> <li>3.1.4  \u6df1\u5ea6\u6d4b\u8bd5</li> </ul> </li> <li>3.2  3D \u5750\u6807\u548c\u53d8\u6362<ul> <li>3.2.1  3D\u5750\u6807</li> <li>3.2.2  \u57fa\u672c 3D \u53d8\u6362</li> <li>3.2.3  \u5c42\u6b21\u5efa\u6a21</li> </ul> </li> <li>3.3  \u6295\u5f71\u4e0e\u89c2\u770b<ul> <li>3.3.1  \u591a\u79cd\u5750\u6807\u7cfb</li> <li>3.3.2  \u89c6\u53e3\u53d8\u6362</li> <li>3.3.3  \u6295\u5f71\u53d8\u6362</li> <li>3.3.4  \u6a21\u578b\u89c6\u56fe\u8f6c\u6362</li> <li>3.3.5  \u76f8\u673a\u62bd\u8c61</li> </ul> </li> <li>3.4  \u591a\u8fb9\u5f62\u7f51\u683c\u548c glDrawArrays<ul> <li>3.4.1  \u7d22\u5f15\u9762\u96c6</li> <li>3.4.2  glDrawArrays\u548cglDrawElements</li> <li>3.4.3  Java \u4e2d\u7684\u6570\u636e\u7f13\u51b2\u533a</li> <li>3.4.4  \u663e\u793a\u5217\u8868\u548cVBO</li> </ul> </li> <li>3.5  \u90e8\u5206\u7ebf\u6027\u4ee3\u6570\u57fa\u7840<ul> <li>3.5.1  \u5411\u91cf\u548c\u5411\u91cf\u6570\u5b66</li> <li>3.5.2  \u77e9\u9635\u548c\u53d8\u6362</li> <li>3.5.3  \u9f50\u6b21\u5750\u6807</li> </ul> </li> <li>3.6  \u4f7f\u7528 GLUT \u548c JOGL<ul> <li>3.6.1  \u4f7f\u7528\u8fc7\u5269</li> <li>3.6.2  \u4f7f\u7528JOGL</li> <li>3.6.3  \u5173\u4e8e glsim.js</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-4-\u7ae0--opengl-11\u706f\u5149\u548c\u6750\u8d28","title":"\u7b2c 4 \u7ae0\uff1a OpenGL 1.1\uff1a\u706f\u5149\u548c\u6750\u8d28","text":"<ul> <li>4.1  \u7167\u660e\u7b80\u4ecb<ul> <li>4.1.1  \u5149\u4e0e\u6750\u6599</li> <li>4.1.2  \u5149\u5c5e\u6027</li> <li>4.1.3  \u6cd5\u5411\u91cf</li> <li>4.1.4  OpenGL 1.1 \u5149\u7167\u65b9\u7a0b</li> </ul> </li> <li>4.2  OpenGL 1.1 \u4e2d\u7684\u5149\u548c\u6750\u8d28<ul> <li>4.2.1  \u4f7f\u7528\u6750\u6599</li> <li>4.2.2  \u5b9a\u4e49\u6cd5\u5411\u91cf</li> <li>4.2.3  \u4f7f\u7528\u706f\u5149</li> <li>4.2.4  \u5168\u5c40\u5149\u7167\u5c5e\u6027</li> </ul> </li> <li>4.3  \u56fe\u50cf\u7eb9\u7406<ul> <li>4.3.1  \u7eb9\u7406\u5750\u6807</li> <li>4.3.2  MipMap \u548c\u8fc7\u6ee4</li> <li>4.3.3  \u7eb9\u7406\u76ee\u6807\u548c\u7eb9\u7406\u53c2\u6570</li> <li>4.3.4  \u7eb9\u7406\u53d8\u6362</li> <li>4.3.5  \u4ece\u5185\u5b58\u52a0\u8f7d\u7eb9\u7406</li> <li>4.3.6  \u6765\u81ea\u989c\u8272\u7f13\u51b2\u533a\u7684\u7eb9\u7406</li> <li>4.3.7  \u7eb9\u7406\u5bf9\u8c61</li> <li>4.3.8  \u5728 C \u4e2d\u52a0\u8f7d\u7eb9\u7406</li> <li>4.3.9  \u901a\u8fc7 JOGL \u4f7f\u7528\u7eb9\u7406</li> </ul> </li> <li>4.4  \u706f\u5149\u3001\u76f8\u673a\u3001\u52a8\u4f5c<ul> <li>4.4.1  \u5c5e\u6027\u6808</li> <li>4.4.2  \u79fb\u52a8\u76f8\u673a</li> <li>4.4.3  \u79fb\u52a8\u5149</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-5-\u7ae0--threejs3d-\u573a\u666f\u56fe-api","title":"\u7b2c 5 \u7ae0\uff1a Three.js\uff1a3D \u573a\u666f\u56fe API","text":"<ul> <li>5.1  Three.js \u57fa\u7840\u77e5\u8bc6<ul> <li>5.1.1  \u5173\u4e8e JavaScript \u6a21\u5757</li> <li>5.1.2  \u573a\u666f\u3001\u6e32\u67d3\u5668\u3001\u76f8\u673a</li> <li>5.1.3  \u4e09.Object3D</li> <li>5.1.4  \u7269\u4f53\u3001\u51e0\u4f55\u5f62\u72b6\u3001\u6750\u6599</li> <li>5.1.5  \u706f\u5149</li> <li>5.1.6  \u5efa\u6a21\u793a\u4f8b</li> </ul> </li> <li>5.2  \u6784\u5efa\u5bf9\u8c61<ul> <li>5.2.1  \u591a\u8fb9\u5f62\u7f51\u683c\u548c IFS</li> <li>5.2.2  \u66f2\u7ebf\u548c\u66f2\u9762</li> <li>5.2.3  \u7eb9\u7406</li> <li>5.2.4  \u53d8\u6362</li> <li>5.2.5  \u52a0\u8f7d\u6a21\u578b</li> </ul> </li> <li>5.3  \u5176\u4ed6\u529f\u80fd<ul> <li>5.3.1  \u5b9e\u4f8b\u5316\u7f51\u683c</li> <li>5.3.2  \u7528\u6237\u8f93\u5165</li> <li>5.3.3  \u9634\u5f71</li> <li>5.3.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u548c\u5929\u7a7a\u76d2</li> <li>5.3.5  \u53cd\u5c04\u548c\u6298\u5c04</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-6-\u7ae0--webgl-\u7b80\u4ecb","title":"\u7b2c 6 \u7ae0\uff1a  WebGL \u7b80\u4ecb","text":"<ul> <li>6.1  \u53ef\u7f16\u7a0b\u6d41\u6c34\u7ebf<ul> <li>6.1.1  WebGL \u56fe\u5f62\u4e0a\u4e0b\u6587</li> <li>6.1.2  \u7740\u8272\u5668\u7a0b\u5e8f</li> <li>6.1.3  \u7ba1\u9053\u4e2d\u7684\u6570\u636e\u6d41</li> <li>6.1.4  \u7edf\u4e00\u53d8\u91cf\u7684\u503c</li> <li>6.1.5  \u5c5e\u6027\u503c</li> <li>6.1.6  \u7ed8\u5236\u57fa\u5143</li> <li>6.1.7  WebGL 2.0\uff1a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61</li> <li>6.1.8  WebGL 2.0\uff1a\u5b9e\u4f8b\u5316\u7ed8\u56fe</li> </ul> </li> <li>6.2  \u7b2c\u4e00\u4e2a\u4f8b\u5b50<ul> <li>6.2.1  WebGL \u4e0a\u4e0b\u6587\u9009\u9879</li> <li>6.2.2  GLSL \u7b80\u4ecb</li> <li>6.2.3  WebGL \u4e2d\u7684 RGB \u4e09\u89d2\u5f62</li> <li>6.2.4  \u5f62\u72b6\u538b\u6a21</li> <li>6.2.5  POINTS\u539f\u8bed</li> <li>6.2.6  WebGL \u9519\u8bef\u5904\u7406</li> </ul> </li> <li>6.3  GLSL<ul> <li>6.3.1  \u57fa\u672c\u7c7b\u578b</li> <li>6.3.2  \u6570\u636e\u7ed3\u6784</li> <li>6.3.3  \u9884\u9009\u8d5b</li> <li>6.3.4  \u8868\u8fbe\u5f0f</li> <li>6.3.5  \u51fd\u6570\u5b9a\u4e49</li> <li>6.3.6  \u63a7\u5236\u7ed3\u6784</li> <li>6.3.7  \u9650\u5236</li> </ul> </li> <li>6.4  \u56fe\u50cf\u7eb9\u7406<ul> <li>6.4.1  \u7eb9\u7406\u5355\u5143\u548c\u7eb9\u7406\u5bf9\u8c61</li> <li>6.4.2  \u5904\u7406\u56fe\u50cf</li> <li>6.4.3  \u66f4\u591a\u5236\u4f5c\u7eb9\u7406\u7684\u65b9\u6cd5</li> <li>6.4.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> <li>6.4.5  \u8ba1\u7b97\u793a\u4f8b</li> <li>6.4.6  WebGL 2.0 \u4e2d\u7684\u7eb9\u7406</li> </ul> </li> <li>6.5  \u5b9e\u73b0 2D \u53d8\u6362<ul> <li>6.5.1  GLSL \u4e2d\u7684\u8f6c\u6362</li> <li>6.5.2  JavaScript \u4e2d\u7684\u8f6c\u6362</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-7-\u7ae0--\u4f7f\u7528-webgl-\u8fdb\u884c-3d-\u56fe\u5f62","title":"\u7b2c 7 \u7ae0\uff1a \u4f7f\u7528 WebGL \u8fdb\u884c 3D \u56fe\u5f62","text":"<ul> <li>7.1  3D\u53d8\u6362<ul> <li>7.1.1  \u5173\u4e8e\u7740\u8272\u5668\u811a\u672c</li> <li>7.1.2  \u4ecb\u7ecdglMatrix</li> <li>7.1.3  \u53d8\u6362\u5750\u6807</li> <li>7.1.4  \u53d8\u6362\u6cd5\u7ebf</li> <li>7.1.5  \u9f20\u6807\u65cb\u8f6c</li> </ul> </li> <li>7.2 \u7167\u660e\u548c\u6750\u6599<ul> <li>7.2.1  \u6700\u5c0f\u7167\u660e</li> <li>7.2.2  \u955c\u9762\u53cd\u5c04\u548c Phong \u7740\u8272</li> <li>7.2.3  \u589e\u52a0\u590d\u6742\u6027</li> <li>7.2.4  \u4e24\u4fa7\u7167\u660e</li> <li>7.2.5  \u6447\u5934\u706f</li> <li>7.2.6  \u805a\u5149\u706f</li> <li>7.2.7  \u5149\u8870\u51cf</li> <li>7.2.8  \u78c1\u76d8\u4e16\u754c2</li> </ul> </li> <li>7.3 \u7eb9\u7406<ul> <li>7.3.1  \u4f7f\u7528 glMatrix \u8fdb\u884c\u7eb9\u7406\u53d8\u6362</li> <li>7.3.2  \u751f\u6210\u7684\u7eb9\u7406\u5750\u6807</li> <li>7.3.3  \u7a0b\u5e8f\u7eb9\u7406</li> <li>7.3.4  \u51f9\u51f8\u8d34\u56fe</li> <li>7.3.5  \u73af\u5883\u6620\u5c04</li> </ul> </li> <li>7.4 \u5e27\u7f13\u51b2\u533a<ul> <li>7.4.1  \u5e27\u7f13\u51b2\u533a\u64cd\u4f5c</li> <li>7.4.2  \u6e32\u67d3\u5230\u7eb9\u7406</li> <li>7.4.3  \u6e32\u67d3\u7f13\u51b2\u533a</li> <li>7.4.4  \u52a8\u6001\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> </ul> </li> <li>7.5 WebGL \u6269\u5c55<ul> <li>7.5.1  \u5404\u5411\u5f02\u6027\u8fc7\u6ee4</li> <li>7.5.2  \u6d6e\u70b9\u989c\u8272</li> <li>7.5.3  WebGL 1.0 \u4e2d\u7684\u5b9e\u4f8b\u5316\u7ed8\u56fe</li> <li>7.5.4  \u5ef6\u8fdf\u7740\u8272</li> <li>7.5.5  WebGL 2.0 \u4e2d\u7684\u591a\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-8-\u7ae0--\u8d85\u8d8a\u57fa\u672c-3d-\u56fe\u5f62","title":"\u7b2c 8 \u7ae0\uff1a \u8d85\u8d8a\u57fa\u672c 3D \u56fe\u5f62","text":"<ul> <li>8.1  \u5149\u7ebf\u8ffd\u8e2a<ul> <li>8.1.1  \u5149\u7ebf\u6295\u5c04</li> <li>8.1.2  \u9012\u5f52\u5149\u7ebf\u8ffd\u8e2a</li> <li>8.1.3  \u5149\u7ebf\u8ffd\u8e2a\u7684\u5c40\u9650\u6027</li> </ul> </li> <li>8.2  \u8def\u5f84\u8ffd\u8e2a<ul> <li>8.2.1  BSDF</li> <li>8.2.2  \u8def\u5f84\u8ffd\u8e2a\u7b97\u6cd5</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-9-\u7ae0--webgpu-\u7b80\u4ecb","title":"\u7b2c 9 \u7ae0\uff1a WebGPU \u7b80\u4ecb","text":"<ul> <li>9.1  WebGPU \u57fa\u7840\u77e5\u8bc6<ul> <li>9.1.1  \u9002\u914d\u5668\u3001\u8bbe\u5907\u548c\u753b\u5e03</li> <li>9.1.2  \u7740\u8272\u5668\u6a21\u5757</li> <li>9.1.3  \u6e32\u67d3\u7ba1\u7ebf</li> <li>9.1.4  \u7f13\u51b2\u533a</li> <li>9.1.5  \u7ed8\u56fe</li> <li>9.1.6  \u591a\u4e2a\u9876\u70b9\u8f93\u5165</li> <li>9.1.7  \u81ea\u52a8\u7ed1\u5b9a\u7ec4\u5e03\u5c40</li> </ul> </li> <li>9.2  \u5b9e\u4f8b\u548c\u7d22\u5f15<ul> <li>9.2.1  \u5b9e\u4f8b\u7ed8\u56fe</li> <li>9.2.2  \u7d22\u5f15\u7ed8\u56fe</li> <li>9.2.3  \u7ed8\u5236\u591a\u4e2a\u57fa\u5143</li> <li>9.2.4  \u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u7d22\u5f15</li> <li>9.2.5  \u591a\u91cd\u91c7\u6837</li> </ul> </li> <li>9.3  WGSL<ul> <li>9.3.1  \u5730\u5740\u7a7a\u95f4\u548c\u5bf9\u9f50</li> <li>9.3.2  \u6570\u636e\u7c7b\u578b</li> <li>9.3.3  \u58f0\u660e\u548c\u6ce8\u91ca</li> <li>9.3.4  \u8868\u8fbe\u5f0f\u548c\u5185\u7f6e\u51fd\u6570</li> <li>9.3.5  \u8bed\u53e5\u548c\u63a7\u5236</li> <li>9.3.6  \u51fd\u6570\u5b9a\u4e49</li> </ul> </li> <li>9.4  \u4f7f\u7528 WebGPU \u7684 3D \u56fe\u5f62<ul> <li>9.4.1  \u6df1\u5ea6\u6d4b\u8bd5</li> <li>9.4.2  \u5750\u6807\u7cfb</li> <li>9.4.3  \u8fdb\u5165 3D</li> <li>9.4.4  wgpu \u77e9\u9635</li> <li>9.4.5  \u518d\u6b21\u78c1\u76d8\u4e16\u754c</li> </ul> </li> <li>9.5  \u7eb9\u7406<ul> <li>9.5.1  \u7eb9\u7406\u5750\u6807</li> <li>9.5.2  \u7eb9\u7406\u548c\u91c7\u6837\u5668</li> <li>9.5.3  Mipmap</li> <li>9.5.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> <li>9.5.5  \u7eb9\u7406\u683c\u5f0f</li> </ul> </li> <li>9.6  \u8ba1\u7b97\u7740\u8272\u5668<ul> <li>9.6.1  \u5de5\u4f5c\u7ec4\u548c\u8c03\u5ea6</li> <li>9.6.2  \u8ba1\u7b97\u7740\u8272\u5668</li> <li>9.6.3  \u6a21\u62df</li> <li>9.6.4  \u68c0\u7d22\u8f93\u51fa</li> </ul> </li> <li>9.7  \u4e00\u4e9b\u7ec6\u8282<ul> <li>9.7.1  \u4e22\u5931\u8bbe\u5907</li> <li>9.7.2  \u9519\u8bef\u5904\u7406</li> <li>9.7.3  \u9650\u5236\u548c\u7279\u5f81</li> <li>9.7.4  \u6e32\u67d3\u901a\u9053\u9009\u9879</li> <li>9.7.5  \u6e32\u67d3\u7ba1\u7ebf\u9009\u9879</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-a--\u7f16\u7a0b\u8bed\u8a00","title":"\u9644\u5f55 A\uff1a \u7f16\u7a0b\u8bed\u8a00","text":"<ul> <li>A.1  Java \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.1.1  \u57fa\u672c\u8bed\u8a00\u7ed3\u6784</li> <li>A.1.2  \u5bf9\u8c61\u548c\u6570\u636e\u7ed3\u6784</li> <li>A.1.3  \u7a97\u53e3\u548c\u4e8b\u4ef6</li> </ul> </li> <li>A.2  C \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.2.1  \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6</li> <li>A.2.2  \u6307\u9488\u548c\u6570\u7ec4</li> <li>A.2.3  \u6570\u636e\u7ed3\u6784</li> </ul> </li> <li>A.3  JavaScript \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.3.1  \u6838\u5fc3\u8bed\u8a00</li> <li>A.3.2  \u6570\u7ec4\u548c\u5bf9\u8c61</li> <li>A.3.3  \u7f51\u9875\u4e0a\u7684 JavaScript</li> <li>A.3.4  \u4e0e\u9875\u9762\u4ea4\u4e92</li> </ul> </li> <li>A.4  JavaScript Promise \u548c\u5f02\u6b65\u51fd\u6570<ul> <li>A.4.1  \u5f02\u6b65\u51fd\u6570\u548c\u7b49\u5f85</li> <li>A.4.2  \u76f4\u63a5\u4f7f\u7528 Promise</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-b--blender3d-\u5efa\u6a21\u7a0b\u5e8f","title":"\u9644\u5f55 B\uff1a Blender\uff1a3D \u5efa\u6a21\u7a0b\u5e8f","text":"<ul> <li>B.1 \u8282  Blender \u57fa\u7840\u77e5\u8bc6<ul> <li>B.1.1  3D \u89c6\u56fe</li> <li>B.1.2  \u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u573a\u666f\u4e2d</li> <li>B.1.3  \u7f16\u8f91\u6a21\u5f0f</li> <li>B.1.4  \u5149\u3001\u6750\u8d28\u548c\u7eb9\u7406</li> <li>B.1.5  \u4fdd\u5b58\u60a8\u7684\u5de5\u4f5c</li> <li>B.1.6  \u66f4\u591a\u529f\u80fd</li> </ul> </li> <li>B.2 \u8282  Blender \u5efa\u6a21<ul> <li>B.2.1  \u6587\u672c</li> <li>B.2.2  \u66f2\u7ebf</li> <li>B.2.3  \u6bd4\u4f8b\u7f16\u8f91</li> <li>B.2.4  \u62c9\u4f38\u7f51\u683c</li> <li>B.2.5  \u7f51\u683c\u4fee\u6539\u5668</li> </ul> </li> <li>B.3 \u8282  Blender \u52a8\u753b<ul> <li>B.3.1  \u5173\u952e\u5e27\u52a8\u753b\u548c\u51fd\u6570\u66f2\u7ebf</li> <li>B.3.2  \u8ffd\u8e2a</li> <li>B.3.3  \u8def\u5f84\u52a8\u753b</li> <li>B.3.4  \u6e32\u67d3\u52a8\u753b</li> </ul> </li> <li>B.4 \u8282  \u6709\u5173\u5149\u548c\u6750\u6599\u7684\u66f4\u591a\u4fe1\u606f<ul> <li>B.4.1  \u7167\u660e</li> <li>B.4.2  Eevee \u4e0e Cycles</li> <li>B.4.3  \u7740\u8272\u5668\u7f16\u8f91\u5668</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-c--\u7528\u4e8e-2d-\u56fe\u5f62\u7684-gimp-\u548c-inkscape","title":"\u9644\u5f55 C\uff1a \u7528\u4e8e 2D \u56fe\u5f62\u7684 Gimp \u548c Inkscape","text":"<ul> <li>C.1 \u8282  Gimp\uff1a2D \u7ed8\u753b\u7a0b\u5e8f<ul> <li>C.1.1  \u7ed8\u753b\u5de5\u5177</li> <li>C.1.2  \u9009\u62e9\u548c\u8def\u5f84</li> <li>C.1.3  \u5c42</li> </ul> </li> <li>C.2 \u8282  Inkscape\uff1a2D \u7ed8\u56fe\u7a0b\u5e8f</li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-d-\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801","title":"\u9644\u5f55 D\uff1a \u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801","text":""},{"location":"cn/contents-with-subsections/#\u9644\u5f55-e-\u672f\u8bed\u8868","title":"\u9644\u5f55 E\uff1a \u672f\u8bed\u8868","text":""},{"location":"cn/glossary/","title":"\u672f\u8bed\u8868","text":""},{"location":"cn/glossary/#a","title":"A","text":""},{"location":"cn/glossary/#abstract-class","title":"abstract class","text":"\u4e2d\u6587\u82f1\u6587 <p>In object-oriented programming, a class that is meant to be used only as a basis for subclasses. Objects can be created from the subclasses, but not from the abstract class itself. The purpose of an abstract class is to define the properties and behaviors that all of its subclasses have in common.</p> <p>In object-oriented programming, a class that is meant to be used only as a basis for subclasses. Objects can be created from the subclasses, but not from the abstract class itself. The purpose of an abstract class is to define the properties and behaviors that all of its subclasses have in common.</p>"},{"location":"cn/glossary/#address-space-in-wgsl","title":"address space (in WGSL)","text":"\u4e2d\u6587\u82f1\u6587 <p>WGSL memory is divided into address spaces. From the WGSL specification: \"Each address space has unique properties determining mutability, visibility, the values it may contain, and how to use variables with it.\"</p> <p>WGSL memory is divided into address spaces. From the WGSL specification: \"Each address space has unique properties determining mutability, visibility, the values it may contain, and how to use variables with it.\"</p>"},{"location":"cn/glossary/#affine-transform","title":"affine transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that preserves parallel lines. That is, when the transform is applied to a pair of lines that are parallel, then the resulting transformed lines are also parallel. An affine transform, T, has the property that the transform of the line segment between a point (x1,y1) and a point (x2,y2) is the line between the points T(x1,y1) and T(x2,y2). Effectively, the transform of a line segment can be computed just by transforming its two endpoints. This makes affine transforms very efficient for computer graphics. Any affine transform can be represented as a composition of rotations, translations, and scalings.</p> <p>A transform that preserves parallel lines. That is, when the transform is applied to a pair of lines that are parallel, then the resulting transformed lines are also parallel. An affine transform, T, has the property that the transform of the line segment between a point (x1,y1) and a point (x2,y2) is the line between the points T(x1,y1) and T(x2,y2). Effectively, the transform of a line segment can be computed just by transforming its two endpoints. This makes affine transforms very efficient for computer graphics. Any affine transform can be represented as a composition of rotations, translations, and scalings.</p>"},{"location":"cn/glossary/#alignment-in-wgsl","title":"alignment (in WGSL)","text":"\u4e2d\u6587\u82f1\u6587 <p>Restrictions on the legal location of a value in memory, depending on the data type. For example, the address of a vec3f variable in WGSL must be a multiple of 16.</p> <p>Restrictions on the legal location of a value in memory, depending on the data type. For example, the address of a vec3f variable in WGSL must be a multiple of 16.</p>"},{"location":"cn/glossary/#alpha-blending","title":"alpha blending","text":"\u4e2d\u6587\u82f1\u6587 <p>Using the alpha component of a color to blend the color with a background color, when the color is drawn over the background color. That is, the new color of a pixel is obtained by blending the drawing color with the current color, with the degree of blending depending on the alpha component of the drawing color. Alpha blending is most commonly used to simulate transparency.</p> <p>Using the alpha component of a color to blend the color with a background color, when the color is drawn over the background color. That is, the new color of a pixel is obtained by blending the drawing color with the current color, with the degree of blending depending on the alpha component of the drawing color. Alpha blending is most commonly used to simulate transparency.</p>"},{"location":"cn/glossary/#alpha-color-component","title":"alpha color component","text":"\u4e2d\u6587\u82f1\u6587 <p>An extra component (that is, one of the numbers that are used to specify a color) in a color model that is not part of the actual color specification. The alpha component is extra information. It is most often used to specify the degree of transparency of a color.</p> <p>An extra component (that is, one of the numbers that are used to specify a color) in a color model that is not part of the actual color specification. The alpha component is extra information. It is most often used to specify the degree of transparency of a color.</p>"},{"location":"cn/glossary/#ambient-color","title":"ambient color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of ambient light in the environment that is reflected by a surface.</p> <p>A material property that represents the proportion of ambient light in the environment that is reflected by a surface.</p>"},{"location":"cn/glossary/#ambient-light","title":"ambient light","text":"\u4e2d\u6587\u82f1\u6587 <p>Directionless light that exists in an environment but does not seem to come from a particular source in the environment. An approximation for light that has been reflected so many times that its original source can't be identified. Ambient light illuminates all objects in a scene equally.</p> <p>Directionless light that exists in an environment but does not seem to come from a particular source in the environment. An approximation for light that has been reflected so many times that its original source can't be identified. Ambient light illuminates all objects in a scene equally.</p>"},{"location":"cn/glossary/#ambient-occlusion","title":"ambient occlusion","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering technique that takes into account the fact that ambient light will illuminate different surfaces to varying extents, depending on the degree to which ambient light is blocked, or \"occluded,\" from reaching each surface by other geometry in the scene. Ambient occlusion is an improvement on basic ambient lighting, but, like ambient light itself, it is not an actual physical phenomenon.</p> <p>A rendering technique that takes into account the fact that ambient light will illuminate different surfaces to varying extents, depending on the degree to which ambient light is blocked, or \"occluded,\" from reaching each surface by other geometry in the scene. Ambient occlusion is an improvement on basic ambient lighting, but, like ambient light itself, it is not an actual physical phenomenon.</p>"},{"location":"cn/glossary/#anaglyph-stereo","title":"anaglyph stereo","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for combining stereographic images of a scene, one for the left eye and one for the right eye, into a single image. Typically, the image for the left eye is drawn using only shades of red, and the image for the right eye contains only blue and green color components. The 3D effect can be seen by viewing the combined image through red/cyan glasses, which allow each eye to see only the image that is intended for that eye.</p> <p>A technique for combining stereographic images of a scene, one for the left eye and one for the right eye, into a single image. Typically, the image for the left eye is drawn using only shades of red, and the image for the right eye contains only blue and green color components. The 3D effect can be seen by viewing the combined image through red/cyan glasses, which allow each eye to see only the image that is intended for that eye.</p>"},{"location":"cn/glossary/#animation","title":"animation","text":"\u4e2d\u6587\u82f1\u6587 <p>A sequence of images that, when displayed quickly one after the other, will produce the impression of continuous motion or change. The term animation also refers to the process of creating such image sequences.</p> <p>A sequence of images that, when displayed quickly one after the other, will produce the impression of continuous motion or change. The term animation also refers to the process of creating such image sequences.</p>"},{"location":"cn/glossary/#anisotropic-filtering","title":"anisotropic filtering","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for more accurate sampling of texture images, in the case where a pixel on the surface that is being textured corresponds to a non-rectangular region in the texture. Anisotropic filtering is available as an optional extension in WebGL.</p> <p>A technique for more accurate sampling of texture images, in the case where a pixel on the surface that is being textured corresponds to a non-rectangular region in the texture. Anisotropic filtering is available as an optional extension in WebGL.</p>"},{"location":"cn/glossary/#antialiasing","title":"antialiasing","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique used to reduce the jagged or \"staircase\" appearance of diagonal lines, text, and other shapes that are drawn using pixels. When a pixel is only partly covered by a geometric shape, then the color of the pixel is a blend of the color of the shape and the color of the background, with the degree of blending depending on the fraction of the pixel that is covered by the geometric shape.</p> <p>A technique used to reduce the jagged or \"staircase\" appearance of diagonal lines, text, and other shapes that are drawn using pixels. When a pixel is only partly covered by a geometric shape, then the color of the pixel is a blend of the color of the shape and the color of the background, with the degree of blending depending on the fraction of the pixel that is covered by the geometric shape.</p>"},{"location":"cn/glossary/#api","title":"API","text":"\u4e2d\u6587\u82f1\u6587 <p>Application Programming Interface. A collection of related classes, functions, constants, etc., for performing some task. An API is an \"interface\" in the sense that it can be used without understanding how its functionality is actually implemented.</p>"},{"location":"cn/glossary/#aspect-ratio","title":"aspect ratio","text":"\u4e2d\u6587\u82f1\u6587 <p>The ratio of the width, w, of a rectangle to the height, h, of the rectangle, expressed either as a ratio w:h or as a fraction w/h.</p>"},{"location":"cn/glossary/#async-function","title":"async function","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript, an async function is one that can use an \"await\" statement to wait for the result of a promise. When an await statement is executed, the execution of the async function is suspended until the promise has either been fulfilled or rejected, giving other JavaScript code a chance to run in the meantime.</p>"},{"location":"cn/glossary/#attenuation","title":"attenuation","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to the way that illumination from a point light or spot light decreases with distance from the light. Physically, illumination should decrease with the square of the distance, but computer graphics often uses a linear attenuation with distance, or no attenuation at at all.</p>"},{"location":"cn/glossary/#attribute","title":"attribute","text":"\u4e2d\u6587\u82f1\u6587 <p>A property, such as color, of a graphical object. An image can be specified by the geometric shapes that it contains, together with their attributes.</p>"},{"location":"cn/glossary/#attribute-variable","title":"attribute variable","text":"\u4e2d\u6587\u82f1\u6587 <p>Variables that represent input to the vertex shader in a programmable graphics pipeline. An attribute variable can take on a different value for each vertex in a primitive.</p>"},{"location":"cn/glossary/#axis-of-rotation","title":"axis of rotation","text":"\u4e2d\u6587\u82f1\u6587 <p>Rotation in 3D space is rotation about a line, which is called the axis of rotation. The axis of rotation remains fixed, while everything else moves in circles around the axis.</p>"},{"location":"cn/glossary/#b","title":"B","text":""},{"location":"cn/glossary/#back-face","title":"back face","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the two sides of a polygon in 3D. A polygon has two sides. One is taken to be the front face, and the other is the back face. In OpenGL, the difference is determined by the order in which the vertices of the polygon are enumerated. The default is that, seen from the back, the vertices are enumerated in clockwise order around the polygon.</p>"},{"location":"cn/glossary/#barycentric-coordinates","title":"barycentric coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate system on a triangle in which a point is written as a linear combination of the vertices of the triangle, that is, aA+bB+c*C, where A, B, and C are the vertices and a, b, and c are numbers. Any point in the triangle can be written in this form where the coefficients a, b, and c have values in the range 0 to 1 and a+b+c is equal to 1.</p>"},{"location":"cn/glossary/#bezier-curve","title":"Bezier curve","text":"\u4e2d\u6587\u82f1\u6587 <p>A smooth curve between two points defined by parametric polynomial equations. A cubic Bezier curve segment is defined by its two endpoints P1 and P2 and by two control points C1 and C2. The tangent to the curve (its direction and speed) at P1 is given by the line from P1 to C1. The tangent vector to the curve at P2 is given by the line from C2 to P2. A quadratic Bezier curve is defined by its two endpoints and a single control point C. The tangent at each endpoint is the line between that endpoint and C.</p>"},{"location":"cn/glossary/#bind-group-in-webgpu","title":"bind group (in WebGPU)","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that can hold resources such as buffers, textures, and samples, for input into a pipeline.</p>"},{"location":"cn/glossary/#blender","title":"Blender","text":"\u4e2d\u6587\u82f1\u6587 <p>A free and open source 3D modeling and animation program.</p>"},{"location":"cn/glossary/#bresenhams-line-algorithm","title":"Bresenham's line algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A specific algorithm for deciding which pixels to color to represent a geometric line segment, using only integer arithmetic. The algorithm can be implemented very efficiently in computer hardware</p>"},{"location":"cn/glossary/#bsdf","title":"BSDF","text":"\u4e2d\u6587\u82f1\u6587 <p>Bidirectional Scattering Distribution Function. A generalization of the idea of \"material\" in 3D graphics. A BSDF gives the probability that a light ray that arrives at point of space from one direction will leave that point heading in a another direction. The probability is a function of the two directions, the point, and the wavelength of the light. One kind of scattering is reflection of light from a surface. For that case, the term BRDF (Bidirectional Reflectance Distribution Function) is used.</p>"},{"location":"cn/glossary/#bumpmapping","title":"bumpmapping","text":"\u4e2d\u6587\u82f1\u6587 <p>Using a texture to modify the normal vectors on a surface, to give the appearance of variations in height without actually modifying the geometry of the surface.</p>"},{"location":"cn/glossary/#camera","title":"camera","text":"\u4e2d\u6587\u82f1\u6587 <p>In 3D computer graphics, an object that combines the projection and viewing transforms into an abstraction that imitates a physical camera or eye.</p>"},{"location":"cn/glossary/#c","title":"C","text":""},{"location":"cn/glossary/#clip-coordinates","title":"clip coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The default coordinate system in OpenGL. The projection transform maps the 3D scene to clip coordinates. The rendered image will show the contents of the cube in the clip coordinate system that contains x, y, and z values in the range from -1 to 1; anything outside that range is \"clipped\" away.</p>"},{"location":"cn/glossary/#color-buffer","title":"color buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, the region of memory that holds the color data for the image. It acts as the drawing surface where images are rendered.</p>"},{"location":"cn/glossary/#color-component","title":"color component","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the numbers used in a color model to specify a color. For example, in the RGB color model, a color is specified by three color components representing the amounts of red, green, and blue in the color.</p>"},{"location":"cn/glossary/#color-gamut","title":"color gamut","text":"\u4e2d\u6587\u82f1\u6587 <p>The color gamut of a display device, such as a printer or computer screen, is the set of colors can be displayed by the device.</p>"},{"location":"cn/glossary/#color-mask","title":"color mask","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a setting that determines which \"channels\" in the color buffer are written during rendering. The channels are the RGBA color components red, green, blue, and alpha. A color mask consists of four boolean values, one for each channel. A false value prevents any change from being made to the corresponding color component in the color buffer.</p>"},{"location":"cn/glossary/#color-model","title":"color model","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of specifying colors numerically. Each color that can represented in a color model is assigned one or more numerical component values. An example is the RGB color model, where a color is specified by three numbers giving the red, green, and blue components of the color.</p>"},{"location":"cn/glossary/#column-major-order","title":"column-major order","text":"\u4e2d\u6587\u82f1\u6587 <p>Column-by-column ordering of the elements of a two-dimensional matrix; that is, an ordering that starts with the elements in the first column, followed by the elements in the second column, and so on. Column-major order is used for matrices in OpenGL and GLSL.</p>"},{"location":"cn/glossary/#compute-shader","title":"compute shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A stage in a GPU pipeline that does purely computational work, rather than participating directly in graphical rendering.</p>"},{"location":"cn/glossary/#constructor","title":"constructor","text":"\u4e2d\u6587\u82f1\u6587 <p>In object-oriented programming, a subroutine that is used to create objects. A constructor for a class creates and initializes objects belonging to that class.</p>"},{"location":"cn/glossary/#control-point","title":"control point","text":"\u4e2d\u6587\u82f1\u6587 <p>A point that does not lie on the curve but that is used to help control the shape of the curve. For example, a control point for a Bezier curve segment is used to specify the tangent vector (direction and speed) of the curve at an endpoint.</p>"},{"location":"cn/glossary/#convex","title":"convex","text":"\u4e2d\u6587\u82f1\u6587 <p>A convex geometric shape has the property that whenever two points are contained in the shape, then the line segment between those two points is entirely contained in the shape.</p>"},{"location":"cn/glossary/#coordinate-system","title":"coordinate system","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of assigning numerical coordinates to geometric points. In two dimensions, each point corresponds to a pair of numbers. In three dimensions, each point corresponds to a triple of numbers.</p>"},{"location":"cn/glossary/#cpu","title":"CPU","text":"\u4e2d\u6587\u82f1\u6587 <p>The Central Processing Unit in a computer, the component that actually executes programs. The CPU reads machine language instructions from the computer's memory and carries them out.</p>"},{"location":"cn/glossary/#cross-product","title":"cross product","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector product of two 3D vectors. The cross product of v and w is a vector that is perpendicular to both v and w and whose length is equal to the absolute value of the sine of the angle between v and w. If v=(x,y,z) and w=(a,b,c), then their cross product is the vector (yc-zb,za-xc,xb-ya).</p>"},{"location":"cn/glossary/#css","title":"CSS","text":"\u4e2d\u6587\u82f1\u6587 <p>Cascading Style Sheets. A language that is used for specifying the style, or presentation, of the content of web pages. CSS can control things like colors, backgrounds, fonts, shadows, borders, and the size and position of elements of the page.</p>"},{"location":"cn/glossary/#cubemap-texture","title":"cubemap texture","text":"<pre><code>A texture made up of six images, one for each of the directions positive x, negative x, positive y, negative y, positive z, and negative z. The images are intended to include everything that can be seen from a given point. Cubemap textures are used for environment mapping and skyboxes.\n</code></pre>"},{"location":"cn/glossary/#d","title":"D","text":""},{"location":"cn/glossary/#deferred-shading","title":"deferred shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A multi-pass rendering technique where a first pass processes the geometry and saves relevant information such as transformed coordinates, normal vectors, and material properties. The data can be stored in textures, which are called \"geometry buffers\" or \"G-buffers\" in this context. Lighting and other effects can then be computed in additional passes, using the pre-computed information from the geometry buffers instead of re-computing it for each pass.</p>"},{"location":"cn/glossary/#depth-buffer","title":"depth buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A region of memory that stores the information needed for the depth test in 3D graphics, that is, a depth value for each pixel in the image. Also called the \"z-buffer.\"</p>"},{"location":"cn/glossary/#depth-mask","title":"depth mask","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a setting that controls whether depth values are written to the depth buffer during rendering. When the depth mask is set to false, the depth value is discarded and the depth buffer is unchanged.</p>"},{"location":"cn/glossary/#depth-test","title":"depth test","text":"\u4e2d\u6587\u82f1\u6587 <p>A solution to the hidden surface problem that involves keeping track of the depth, or distance from the viewer, of the object currently visible at each pixel in the image. When a new object is drawn at a pixel, the depth of the new object is compared to the depth of the current object to decide which one is closer to the viewer. The advantage of the depth test is that objects can be rendered in any order. A disadvantage is that only a limited range of depths can be represented in the image.</p>"},{"location":"cn/glossary/#device-coordinates","title":"device coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system used on a display device or rendered image, often using pixels as the unit of measure.</p>"},{"location":"cn/glossary/#diffuse-color","title":"diffuse color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of incident light that is reflected diffusely from a surface.</p>"},{"location":"cn/glossary/#diffuse-reflection","title":"diffuse reflection","text":"\u4e2d\u6587\u82f1\u6587 <p>Reflection of incident light in all directions from a surface, so that diffuse illumination of a surface is visible to all viewers, independent of the viewer's position.</p>"},{"location":"cn/glossary/#direct3d","title":"Direct3D","text":"\u4e2d\u6587\u82f1\u6587 <p>Microsoft's proprietary API for 3D graphics on the Windows operating system.</p>"},{"location":"cn/glossary/#directed-acyclic-graph","title":"directed acyclic graph","text":"\u4e2d\u6587\u82f1\u6587 <p>Also called a \"dag.\" A linked data structure in which there are no cycles. That is, it is not possible to find a sequence of nodes where each node links to the next and the last node links back to the first.</p>"},{"location":"cn/glossary/#directional-light","title":"directional light","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source whose light rays are parallel, all arriving from the same direction. Can be considered to be a light source at an effectively infinite distance. Also called a \"sun,\" since the Sun is an example of a directional light source.</p>"},{"location":"cn/glossary/#displacement-mapping","title":"displacement mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique used to modify a polygonal mesh by moving, or displacing, the vertices of the mesh.</p>"},{"location":"cn/glossary/#display-list","title":"display list","text":"\u4e2d\u6587\u82f1\u6587 <p>A list of graphics primitives and attributes which can be traversed to create all or part of an image. Display lists were used in some early vector-graphics hardware. They were also available in traditional OpenGL.</p>"},{"location":"cn/glossary/#dom","title":"DOM","text":"\u4e2d\u6587\u82f1\u6587 <p>Document Object Model. A specification for representing a web page (and other kinds of structured document) as a tree-like data structure. Can also refer to the data structure itself, as in \"the DOM for this web page.\" A web page can be modified dynamically by manipulating its DOM, using the JavaScript programming language.</p>"},{"location":"cn/glossary/#dot-product","title":"dot product","text":"\u4e2d\u6587\u82f1\u6587 <p>The dot product of two vectors is the sum of the products of corresponding coordinates. For 3D vectors v=(x,y,z) and w=(a,b,c), the dot product of v and w is xa+yb+z*c. The dot product is equal to the cosine of the angle between the vectors, divided by the product of their lengths.</p>"},{"location":"cn/glossary/#double-buffering","title":"double buffering","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics technique in which an image is drawn off-screen, in a region of memory called an off-screen buffer or \"back buffer.\" When the image is drawn, it can be copied to the buffer that represents the contents of the screen, which is also known as the \"front buffer.\" In true double buffering, the image doesn't have to be copied; instead, the buffers can be \"swapped\" so that the back buffer becomes the front buffer, and the front buffer becomes the back buffer.</p>"},{"location":"cn/glossary/#drawing-program","title":"drawing program","text":"\u4e2d\u6587\u82f1\u6587 <p>A computer program for creating images using vector-style graphics, where the user creates the image by specifying shapes that make up the image and their attributes.</p>"},{"location":"cn/glossary/#e","title":"E","text":""},{"location":"cn/glossary/#eclipse","title":"Eclipse","text":"\u4e2d\u6587\u82f1\u6587 <p>An integrated development environment for writing programs in Java (and other programming languages). Eclipse is a free program that can be downloaded from http://eclipse.org.</p>"},{"location":"cn/glossary/#emission-color","title":"emission color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents color that is intrinsic to a surface, rather than coming from light from other sources that is reflected by the surface. Emission color can make the object look like it is glowing, but it does not illuminate other objects. Emission color is often called \"emissive color.\"</p>"},{"location":"cn/glossary/#environment-mapping","title":"environment mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of simulating mirror-like reflection from the surface of an object. The environment that is to be reflected from the surface is represented as a cubemap texture. To determine what point in the texture is visible at a given point on the object, a ray from the viewpoint is reflected from the surface point, and the reflected ray is intersected with the texture cube. Environment mapping is also called reflection mapping.</p>"},{"location":"cn/glossary/#es6","title":"ES6","text":"\u4e2d\u6587\u82f1\u6587 <p>A version of JavaScript implemented by almost all modern web browsers. More formally known as ECMAScript 6 or ECMAScript 2015. ES6 introduced a large number of new features.</p>"},{"location":"cn/glossary/#euclidean-transform","title":"Euclidean transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that preserves distances and angles. A Euclidean transform represents a \"rigid motion.\" That is, the transform of an object is an exact copy of the object, with the same size and shape. Any Euclidean transform can be represented as a composition of rotations and translations.</p>"},{"location":"cn/glossary/#euler-angles","title":"Euler angles","text":"\u4e2d\u6587\u82f1\u6587 <p>Express the rotation of an object in its own coordinate system, given as individual rotations about the x, y, and z axes in that coordinate system. The cumulative effect of rotations about the three coordinate axes depends on the order in which the rotations are applied.</p>"},{"location":"cn/glossary/#extrusion","title":"extrusion","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for producing a solid from a 2D shape by moving the shape along a curve in 3D. The solid is the set of points through which the shape passes as it moves along the curve. The most common case is moving the shape along a line segment that is perpendicular to the plane that contains the shape. In practice, in computer graphics, the object that is produced by extrusion is just the surface of the extruded solid.</p>"},{"location":"cn/glossary/#eye-coordinates","title":"eye coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system on 3D space defined by the viewer. In eye coordinates in OpenGL 1.1, the viewer is located at the origin, looking in the direction of the negative z-axis, with the positive y-axis pointing upwards, and the positive x-axis pointing to the right. The modelview transformation maps objects into the eye coordinate system, and the projection transform maps eye coordinates to clip coordinates.</p>"},{"location":"cn/glossary/#f","title":"F","text":""},{"location":"cn/glossary/#filling-a-shape","title":"filling a shape","text":"\u4e2d\u6587\u82f1\u6587 <p>Drawing the interior of a shape, by coloring the pixels that lie inside the shape. Filling does not apply to shapes, such as lines, that have no interior.</p>"},{"location":"cn/glossary/#fixed-function-pipeline","title":"fixed-function pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics processing pipeline with a fixed set of processing stages that cannot be modified by a programmer. Data for an image passes through a sequence of processing stages, with the image as the end product. The sequence is called a \"pipeline.\" With a fixed-function pipeline, the programmer can enable and disable stages and set options that control the processing but cannot add to the functionality.</p>"},{"location":"cn/glossary/#flat-shading","title":"flat shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting computation for the faces of a polygon or polygonal mesh that uses the same normal vector at each point in the polygon, giving the polygon a flat or faceted appearance.</p>"},{"location":"cn/glossary/#fragment-shader","title":"fragment shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A shader program that will be executed once for each pixel in a primitive. A fragment shader must compute a color for the pixel, or discard it. Fragment shaders are also called pixel shaders.</p>"},{"location":"cn/glossary/#framebuffer","title":"framebuffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a data structure that organizes the buffers for rendering an image, possibly including a color buffer, a depth buffer, and a stencil buffer. A WebGL graphics context has a default framebuffer for on-screen rendering, and additional framebuffers can be created for off-screen rendering.</p>"},{"location":"cn/glossary/#frame-buffer","title":"frame buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A region of memory that contains color data for a digital image. Most often refers to the memory containing the image that appears on the computer's screen.</p>"},{"location":"cn/glossary/#front-face","title":"front face","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the two sides of a polygon in 3D. A polygon has two sides. One is taken to be the front face, and the other is the back face. In OpenGL, the difference is determined by the order in which the vertices of the polygon are enumerated. The default is that, seen from the front, the vertices are enumerated in counterclockwise order around the polygon.</p>"},{"location":"cn/glossary/#frustum","title":"frustum","text":"\u4e2d\u6587\u82f1\u6587 <p>A truncated pyramid; that is, a pyramid from which the top has been cut off. In OpenGL 1.1, the view volume for a perspective projection is a frustum.</p>"},{"location":"cn/glossary/#g","title":"G","text":""},{"location":"cn/glossary/#geometric-modeling","title":"geometric modeling","text":"\u4e2d\u6587\u82f1\u6587 <p>Creating a scene by specifying the geometric objects contained in the scene, together with geometric transforms to be applied to them and attributes that determine their appearance.</p>"},{"location":"cn/glossary/#geometric-primitive","title":"geometric primitive","text":"\u4e2d\u6587\u82f1\u6587 <p>Geometric objects in a graphics system, such as OpenGL, that are not made up of simpler objects. Examples in OpenGL include points, lines, and triangles, but the set of available primitives depends on the graphics system. (Note that as the term is used in OpenGL, a single primitive can be made up of many points, line segments, or triangles.)</p>"},{"location":"cn/glossary/#geometric-transform","title":"geometric transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate transformation; that is, a function that can be applied to each of the points in a geometric object to produce a new object. Common transforms include scaling, rotation, and translation.</p>"},{"location":"cn/glossary/#glmatrix","title":"glMatrix","text":"\u4e2d\u6587\u82f1\u6587 <p>An open-source JavaScript library for vector and matrix math in two and three dimensions.</p>"},{"location":"cn/glossary/#global-ambient-intensity","title":"global ambient intensity","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, ambient light that is present in the environment independent of any light source. Total ambient light is the sum of the global ambient light plus the ambient light intensity of each enabled light source.</p>"},{"location":"cn/glossary/#global-illumination","title":"global illumination","text":"\u4e2d\u6587\u82f1\u6587 <p>The goal of 3D rendering algorithms that take into account all the interactions of light in a scene, including indirect illumination by light that bounces off other objects.</p>"},{"location":"cn/glossary/#glsl","title":"GLSL","text":"\u4e2d\u6587\u82f1\u6587 <p>OpenGL Shader Language, the programming language that is used to write shader programs for use with OpenGL.</p>"},{"location":"cn/glossary/#gltf","title":"GLTF","text":"\u4e2d\u6587\u82f1\u6587 <p>GL Transfer Format. A file format for 3D models. A GLTF file can contain complete 3D scenes, including objects, materials, lights, and even animations. The GLTF specification comes from the Khronos Group, which is also responsible for OpenGL, WebGL, and Vulkan.</p>"},{"location":"cn/glossary/#glu","title":"GLU","text":"\u4e2d\u6587\u82f1\u6587 <p>The OpenGL Utility library. Defines several functions for use with older versions of OpenGL, including gluPerspective and gluLookAt. Not to be confused with GLUT. GLU is a standard part of OpenGL.</p>"},{"location":"cn/glossary/#glut","title":"GLUT","text":"\u4e2d\u6587\u82f1\u6587 <p>The OpenGL Utility Toolkit. A platform-independent library for writing OpenGL applications. OpenGL does not include support for windows or events. GLUT adds such support. It also has functions for drawing 3D shapes such as spheres and polyhedra (not to mention a teapot). GLUT is written in the C programming language and is used with the C API for OpenGL. However, many GLUT functions are also available in JOGL, the Java API for OpenGL. A newer, and somewhat improved, version of the toolkit named \"FreeGLUT\" is commonly used in place of the original version.</p>"},{"location":"cn/glossary/#gpu","title":"GPU","text":"\u4e2d\u6587\u82f1\u6587 <p>Graphics Processing Unit, a computer hardware component that performs graphical computations that create and manipulate images. Operations such as drawing a line on the screen or rendering a 3D image are done in the GPU, which is optimized to perform such operations very quickly.</p>"},{"location":"cn/glossary/#gradient","title":"gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A pattern of color produced by assigning colors to certain reference points and computing color for other points by interpolating or extrapolating colors from the reference points. The effect is a color progression along line segments between reference points. Different rules for extending the colors beyond those lines produce different types of gradient, such as linear gradients and radial gradients.</p>"},{"location":"cn/glossary/#grayscale","title":"grayscale","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to a color scheme or image in which each color is a shade of gray (where the term \"shade of gray\" here includes black and white). Typically, 256 shades of gray are used. Grayscale is also called \"monochrome.\"</p>"},{"location":"cn/glossary/#gui","title":"GUI","text":"\u4e2d\u6587\u82f1\u6587 <p>(Graphical User Interface.) A user interface for a program where the user interacts with the program using components such as windows, menus, buttons, and text-input boxes.</p>"},{"location":"cn/glossary/#h","title":"H","text":""},{"location":"cn/glossary/#hdr-image","title":"HDR image","text":"\u4e2d\u6587\u82f1\u6587 <p>A high dynamic range image. An HDR image has more color information than the usual eight bits per color channel per pixel. This makes it more suitable to uses that require calculation with the color values.</p>"},{"location":"cn/glossary/#height-map","title":"height map","text":"\u4e2d\u6587\u82f1\u6587 <p>An image in which the grayscale value represents a height, or elevation. Height maps can be used in displacement mapping to specify the amount of displacement.</p>"},{"location":"cn/glossary/#hidden-surface-problem","title":"hidden surface problem","text":"\u4e2d\u6587\u82f1\u6587 <p>The problem in 3D graphics of deciding which object is visible at each pixel in an image. When one object is behind another object from the point of view of the viewer, only the front object should appear in the image. A rendering algorithm for 3D graphics must satisfy this constraint. Algorithms that solve the hidden surface problem include the painter's algorithm and the depth test algorithm.</p>"},{"location":"cn/glossary/#hierarchical-modeling","title":"hierarchical modeling","text":"\u4e2d\u6587\u82f1\u6587 <p>Creating complex geometric models in a hierarchical fashion, starting with geometric primitives, combining them into components that can then be further combined into more complex components, and so on.</p>"},{"location":"cn/glossary/#homogeneous-coordinates","title":"homogeneous coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of representing n-dimensional vectors as (n+1)-dimensional vectors where two (n+1) vectors represent the same n-dimensional vector if they differ by a scalar multiple. In 3D, for example, if w is not zero, then the homogeneous coordinates (x,y,z,w) are equivalent to homogeneous coordinates (x/w,y/w,z/w,1), since they differ by multiplication by the scalar w. Both sets of coordinates represent the 3D vector (x/w,y/w,z/w)</p>"},{"location":"cn/glossary/#hsl-color","title":"HSL color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the hue, saturation, and lightness of the component. The HSL color model is similar to the HSV color model. The main difference is that in HSL, pure spectral colors occur when L=0.5, while in HSV, they occur when V=1.</p>"},{"location":"cn/glossary/#hsv-color","title":"HSV color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the hue, saturation, and value of the component. The hue represents the basic color. The saturation is the purity of the color, with a saturation value of zero producing a shade of gray, that is a color with no actual hue at all. The value represents the brightness of the color, with a value of zero giving black. (Value is also called brightness, and the name HSB is sometimes used instead of HSV.)</p>"},{"location":"cn/glossary/#html","title":"HTML","text":"\u4e2d\u6587\u82f1\u6587 <p>HyperText Markup Language. A language that is used for specifying the content of web pages. An HTML document is made up of text, along with \"elements\" for adding other content, such as images, and for defining the structure of the document. Because of nesting of elements, the document can be represented by a tree-like data structure.</p>"},{"location":"cn/glossary/#html-canvas","title":"HTML canvas","text":"\u4e2d\u6587\u82f1\u6587 <p>A canvas element on a web page. The canvas appears as a rectangular area on the page. The JavaScript programming language can use a canvas element as a drawing surface. HTML is a language for specifying the content of a web page. JavaScript is the programming language for web pages. The canvas element supports a 2D graphics API. In many browsers, it also supports the 3D graphics API, WebGL.</p>"},{"location":"cn/glossary/#i","title":"I","text":""},{"location":"cn/glossary/#identity-matrix","title":"identity matrix","text":"\u4e2d\u6587\u82f1\u6587 <p>The n-by-n identity matrix is an n-by-n matrix which has ones on the diagonal and zeros elsewhere. Multiplication of any matrix B by the identity matrix, in either order, leaves B unchanged. Multiplication of an n-dimensional vector by the n-by-n identity matrix leaves the vector unchanged; that is, the identity matrix is the matrix for the identity transformation.</p>"},{"location":"cn/glossary/#identity-transform","title":"identity transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that has no effect on its argument. For example, the identity transform in 2D is given by the formula I(x,y) = (x,y). The identity transform I has the property that if T is any transform, then I followed by T is the same as T, and T followed by I is the same as T.</p>"},{"location":"cn/glossary/#image-texture","title":"image texture","text":"\u4e2d\u6587\u82f1\u6587 <p>An image that is applied to a surface as a texture, so that it looks at if the image is \"painted\" onto the surface.</p>"},{"location":"cn/glossary/#index-buffer","title":"index buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, an index buffer is a GPU buffer that holds vertex indices for use with the drawIndexed(). A vertex index gives the position of a vertex in the list of vertices of a primitive.</p>"},{"location":"cn/glossary/#indexed-color","title":"indexed color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color scheme in which colors are selected from a limited palette of colors. For example, if the palette contains 256 colors, then a color can be specified by an eight-bit integer, giving its position, or index, in the list of colors.</p>"},{"location":"cn/glossary/#indexed-drawing","title":"indexed drawing","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, drawing a primitive using the drawIndexed() function. With that function, vertices are not generated in the order in which they are listed. Instead, a list of vertex indices in an index buffer determines the order of the vertices. Indexed drawing is used to render indexed face sets.</p>"},{"location":"cn/glossary/#indexed-face-set","title":"indexed face set","text":"\u4e2d\u6587\u82f1\u6587 <p>(IFS). A data structure that represents a polyhedron or polygonal mesh. The data structure includes a numbered list of vertices and a list of faces. A face is specified by listing the indices of the vertices of the face; that is, a face is given as a list of numbers where each number is an index into the list of vertices.</p>"},{"location":"cn/glossary/#instanced-drawing","title":"instanced drawing","text":"\u4e2d\u6587\u82f1\u6587 <p>The ability to render multiple versions of a primitive with a single function call. Each copy can have its own values for certain attributes, such as color or transformation.</p>"},{"location":"cn/glossary/#intensity-of-a-light-source","title":"intensity of a light source","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source emits light at various wavelengths. The intensity of a light at a given wavelength is the amount of energy in the light at that wavelength. The total intensity of the light is its total energy at all wavelengths. The color of a light is determined by its intensities at all wavelengths.</p>"},{"location":"cn/glossary/#interpolation","title":"interpolation","text":"\u4e2d\u6587\u82f1\u6587 <p>Given values for some quantity at certain reference points, computing a value for that quantity at other points by some kind of averaging applied to the values at the reference points.</p>"},{"location":"cn/glossary/#invariant-qualifier","title":"invariant qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, a modifier that ensures that when the same expression is used to compute the value of a variable in two different shaders, the value will be the same in both shaders. This can be important for multi-pass algorithms, where several shader programs are applied in succession to render one image.</p>"},{"location":"cn/glossary/#inverse-transform","title":"inverse transform","text":"\u4e2d\u6587\u82f1\u6587 <p>Given a transform T, the inverse transform of T is a transform that reverses the operation of T. For example, for a 2D transform, for R to be the inverse of T means that R(T(x,y)) = (x,y). Scaling by 0.5 is the inverse of scaling by 2. Translation by (-3,5) is the inverse of translation by (3,-5). Not every transform has an inverse. For example, scaling by a factor of zero has no inverse.</p>"},{"location":"cn/glossary/#ior","title":"IOR","text":"\u4e2d\u6587\u82f1\u6587 <p>Index of Refraction. A property of a medium, such as air or glass, that transmits light. The refraction, or bending, of light rays that pass from one medium to another depends on the ratio of the IORs of the two media. The index of refraction of a medium depends on the speed of light in that medium.</p>"},{"location":"cn/glossary/#j","title":"J","text":""},{"location":"cn/glossary/#javascript","title":"JavaScript","text":"\u4e2d\u6587\u82f1\u6587 <p>A programming language for web pages. JavaScript code on a web page is executed by a web browser that displays the page, and it can interact with the contents of the web page and with the user. There are JavaScript APIs for 2D and for 3D graphics</p>"},{"location":"cn/glossary/#jogl","title":"JOGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A Java implementation of OpenGL. JOGL is very complicated, since it attempts to support all versions of OpenGL in one programming system. JOGL integrates seamlessly with Java's Swing and AWT graphics.</p>"},{"location":"cn/glossary/#json","title":"JSON","text":"\u4e2d\u6587\u82f1\u6587 <p>(JavaScript Object Notation.) A syntax for representing JavaScript objects as strings, similar to the object literal syntax that is used in JavaScript. JSON objects cannot contain functions, but they can contain strings, numbers, and booleans. JSON has become a popular standard for storage and transmission of structured data.</p>"},{"location":"cn/glossary/#k","title":"K","text":""},{"location":"cn/glossary/#keyframe-animation","title":"keyframe animation","text":"\u4e2d\u6587\u82f1\u6587 <p>An animation technique in which the value of some quantity is given explicitly only at certain times during the animation. The times when the quantity is specified are called keyframes. Between keyframes, the value of the quantity is obtained by interpolating between the values specified for the keyframes.</p>"},{"location":"cn/glossary/#l","title":"L","text":""},{"location":"cn/glossary/#lambert-shading","title":"Lambert shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for computing pixel colors on a primitive using a lighting equation that takes into account ambient and diffuse reflection. In Lambert shading, the lighting equation is applied only at the vertices of the primitive. Color values for pixels in the primitive are calculated by interpolating the values that were computed for the vertices. Lambert shading is named after Johann Lambert, who developed the theory on which it is based in the eighteenth century.</p>"},{"location":"cn/glossary/#lathing","title":"lathing","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for producing a surface by rotating a planar curve about a line that lies in the same plane as the curve. As each point rotates about the line, it generates a circle. The surface is the union of the circles generated by all the points on the curve. Lathing imitates shapes that can be produced by a mechanical lathe.</p>"},{"location":"cn/glossary/#length-of-a-vector","title":"length of a vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector is defined by its length and its direction, so length is a fundamental property. When a vector is represented as an arrow, its length is just the length of that arrow. For a 2D vector given by coordinates (x,y), the length is the square root of xx+yy. For a 3D vector given as (x,y,z), the length is the square root of xx+yy+z*z.</p>"},{"location":"cn/glossary/#lighting","title":"lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Using light sources in a 3D scene, so that the appearance of objects in the scene can be computed based on the interaction of light with the objects' material properties.</p>"},{"location":"cn/glossary/#lighting-equation","title":"lighting equation","text":"\u4e2d\u6587\u82f1\u6587 <p>The equation that is used in OpenGL to compute the visible color of a point on a surface from the material properties of the surface, the normal vector for that point, the direction to the viewer, the ambient light level, and the direction and intensity of light sources.</p>"},{"location":"cn/glossary/#linear-algebra","title":"linear algebra","text":"\u4e2d\u6587\u82f1\u6587 <p>The field of mathematics that studies vector spaces and linear transformations between them. Linear algebra is part of the essential mathematical foundation of computer graphics.</p>"},{"location":"cn/glossary/#linear-gradient","title":"linear gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A color gradient pattern in which there is a color variation along a certain line, with constant color along lines perpendicular to that line.</p>"},{"location":"cn/glossary/#linear-transformation","title":"linear transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A function from one vector space to another that preserves vector addition and multiplication by constants. Linear transformations can be represented by matrices. In computer graphics, they are used to implement geometric operations such as rotation and translation</p>"},{"location":"cn/glossary/#lossless-data-compression","title":"lossless data compression","text":"\u4e2d\u6587\u82f1\u6587 <p>A scheme for reducing the size of a dataset without losing any of the information in that dataset. The original data can be recovered exactly from the compressed data. The image formats GIF and PNG use lossless data compression to reduce the size of the image file.</p>"},{"location":"cn/glossary/#lossy-data-compression","title":"lossy data compression","text":"\u4e2d\u6587\u82f1\u6587 <p>A scheme for reducing the size of a dataset in which some of the information in the dataset can be lost. The data that is recovered from the compressed data can differ from the original data. The image format JPEG use lossy data compression to reduce the size of the image file.</p>"},{"location":"cn/glossary/#luminance","title":"luminance","text":"\u4e2d\u6587\u82f1\u6587 <p>A quantity representing the perceived brightness of a color. For an RGB color, it is a weighted average of the red, green, and blue components of the color. The usual formula is 0.3red + 0.59green + 0.11*blue.</p>"},{"location":"cn/glossary/#m","title":"M","text":""},{"location":"cn/glossary/#magnification-filter","title":"magnification filter","text":"\u4e2d\u6587\u82f1\u6587 <p>An operation that is used when applying a texture to an object, when the texture has to be stretched to fit the object. For an image texture, a magnification filter is applied to compute the color of a pixel when that pixel covers just a fraction of a pixel in the image.</p>"},{"location":"cn/glossary/#material","title":"material","text":"\u4e2d\u6587\u82f1\u6587 <p>The properties of an object that determine how that object interacts with light in the environment. Material properties in OpenGL include, for example, diffuse color, specular color, and shininess.</p>"},{"location":"cn/glossary/#matrix","title":"matrix","text":"\u4e2d\u6587\u82f1\u6587 <p>A rectangular array of numbers. A matrix can be represented as a two-dimensional array, with numbers arranged in rows and columns. An N-by-N matrix represents a linear transformation from N-dimensional space to itself.</p>"},{"location":"cn/glossary/#matrix-mode","title":"matrix mode","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, a state variable that determines which one of several transformation matrices will be affected by functions such as glRotatef and glFrustum. The matrix mode is set with the function glMatrixMode. Possible values include GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE.</p>"},{"location":"cn/glossary/#metal","title":"Metal","text":"\u4e2d\u6587\u82f1\u6587 <p>Apple's proprietary API for 3D graphics and computation on MacOS computers and iOS devices.</p>"},{"location":"cn/glossary/#minification-filter","title":"minification filter","text":"\u4e2d\u6587\u82f1\u6587 <p>An operation that is used when applying a texture to an object, when the texture has to be shrunk to fit the object. For an image texture, a minification filter is applied to compute the color of a pixel when that pixel covers several pixels in the image.</p>"},{"location":"cn/glossary/#mipmap","title":"mipmap","text":"\u4e2d\u6587\u82f1\u6587 <p>One of a series of reduced-size copies of a texture image, of decreasing width and height. Starting from the original image, each mipmap is obtained by dividing the width and height of the previous image by two (unless it is already 1). The final mipmap is a single pixel. Mipmaps are used for more efficient mapping of the texture image to a surface, when the image has to be shrunk to fit the surface.</p>"},{"location":"cn/glossary/#modeling-transformation","title":"modeling transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that is applied to an object to map that object into the world coordinate system or into the object coordinate system for a more complex, hierarchical object.</p>"},{"location":"cn/glossary/#modelview-transformation","title":"modelview transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, a transform that combines the modeling transform with the viewing transform. That is, it is the composition of the transformation from object coordinates to world coordinates and the transformation from world coordinates to eye coordinates. Because of the equivalence between modeling and viewing transformations, world coordinates are not really meaningful for OpenGL, and only the combined transformation is tracked.</p>"},{"location":"cn/glossary/#multi-pass-algorithm","title":"multi-pass algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering algorithm that draws a scene several times and combines the results somehow to compute the final image. A simple example is anaglyph stereo, in which a left-eye and right-eye image of the scene are rendered separately and combined.</p>"},{"location":"cn/glossary/#multisampling","title":"multisampling","text":"\u4e2d\u6587\u82f1\u6587 <p>A kind of antialiasing where the fragment shader is evaluated at several points in each pixel, and the results are averaged to get the color of the pixel.</p>"},{"location":"cn/glossary/#n","title":"N","text":""},{"location":"cn/glossary/#ndc","title":"NDC","text":"\u4e2d\u6587\u82f1\u6587 <p>Normalized Device Coordinates. In WebGPU, refers to the default xyz coordinate system in which x and y range from -1 to 1 and z ranges from 0 to 1. The x and y in NDC map linearly to device, or pixel, coordinates on the viewport.</p>"},{"location":"cn/glossary/#nio-buffer","title":"nio buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A Java object belonging to the class java.nio.Buffer or one of its subclasses. Nio buffers are similar to arrays, but they are optimized for input/output operations. Nio buffers are used instead of arrays for certain purposes in Java's JOGL API for OpenGL.</p>"},{"location":"cn/glossary/#normalized-vector","title":"normalized vector","text":"\u4e2d\u6587\u82f1\u6587 <p>The result of dividing a non-zero vector by its length, giving a unit vector, that is, a vector of length one. (Note that \"normalized vector\" and \"normal vector\" are, confusingly, unrelated terms!)</p>"},{"location":"cn/glossary/#normal-vector","title":"normal vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A normal vector to a surface at a point on that surface is a vector that is perpendicular to the surface at that point. Normal vectors to curves are defined similarly. Normal vectors are important for lighting calculations.</p>"},{"location":"cn/glossary/#norm-of-a-vector","title":"norm of a vector","text":"\u4e2d\u6587\u82f1\u6587 <p>Another term for the length of the vector. For a 3D vector given as (x,y,z), the norm is the square root of <code>x*x+y*y+z*z</code>.</p>"},{"location":"cn/glossary/#o","title":"O","text":""},{"location":"cn/glossary/#object-coordinates","title":"object coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system in which the coordinates for points in an object are originally specified, before they are transformed by any modeling or other transform that will be applied to the object.</p>"},{"location":"cn/glossary/#off-screen-canvas","title":"off-screen canvas","text":"\u4e2d\u6587\u82f1\u6587 <p>My term for a segment of the computer's memory that can be used as a drawing surface, for drawing images that are not visible on the screen. Some method should exist for copying the image from an off-screen canvas onto the screen. In Java, for example, an off-screen canvas can be implemented as an object of type BufferedImage.</p>"},{"location":"cn/glossary/#opengl","title":"OpenGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A family of computer graphics APIs that is implemented in many graphics hardware devices. There are several versions of the API, and there are implementations, or \"bindings\" for several different programming languages. Versions of OpenGL for embedded systems such as mobile phones are known as OpenGL ES. WebGL is a version for use on Web pages. OpenGL can be used for 2D as well as for 3D graphics, but it is most commonly associated with 3D.</p>"},{"location":"cn/glossary/#orthographic-projection","title":"orthographic projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A projection from 3D to 2D that simply discards the z-coordinate. It projects objects along lines that are orthogonal (perpendicular) to the xy-plane. In OpenGL 1.1, the view volume for an orthographic projection is a rectangular solid.</p>"},{"location":"cn/glossary/#p","title":"P","text":""},{"location":"cn/glossary/#painters-algorithm","title":"painter's algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A solution to the hidden surface algorithm that involves drawing the objects in a scene in order from back to front, that is, in decreasing order of distance from the viewer. A disadvantage is that the order is usually not well-defined unless some objects are decomposed into smaller sub-objects. Another issue is that the order of drawing has to change when objects move or when the point of view changes.</p>"},{"location":"cn/glossary/#painting-program","title":"painting program","text":"\u4e2d\u6587\u82f1\u6587 <p>A computer program for creating images using raster-style graphics, where the user creates the image by controlling the colors of each pixel.</p>"},{"location":"cn/glossary/#path-tracing","title":"path tracing","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering algorithm based on the idea of computing all the paths that light could have followed to arrive at the position of a viewer from each direction. Since that is literally impossible, the algorithm traces a random sample of paths and averages the results. As the number of samples increases, the average converges to a very high-quality image.</p>"},{"location":"cn/glossary/#pattern-fill","title":"pattern fill","text":"\u4e2d\u6587\u82f1\u6587 <p>Using copies of an image to fill the interior of a two-dimensional shape. The image can be repeated horizontally and vertically as necessary to cover the shape.</p>"},{"location":"cn/glossary/#pbr","title":"PBR","text":"\u4e2d\u6587\u82f1\u6587 <p>Physically Based Rendering. A general term encompassing a variety of techniques for rendering materials that look more physically realistic than the materials traditionally used in OpenGL and similar graphics APIs. The idea is to implement the actual physics of light and material more directly. PBR has become common in real-time graphics such as video games.</p>"},{"location":"cn/glossary/#perlin-noise","title":"Perlin noise","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique invented by Ken Perlin in 1983 that is used in the computation of natural-looking procedural textures. A Perlin noise function has numerical inputs (usually 2 or 3) and produces an output number in the range -1.0 to 1.0. The output is pseudo-random, but has some regularity, with features that are similarly sized and regularly distributed, and with variation on several scales.</p>"},{"location":"cn/glossary/#per-pixel-lighting","title":"per-pixel lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Doing lighting calculations at each pixel of a primitive, which gives better results in most cases than per-vertex lighting. Phong shading uses per-pixel lighting, with normal vectors interpolated from the vertices.</p>"},{"location":"cn/glossary/#perspective-projection","title":"perspective projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A projection from 3D to 2D that projects objects along lines radiating out from a viewpoint. A perspective projection attempts to simulate realistic viewing. A perspective projection preserves perspective; that is, objects that are farther from the viewpoint are smaller in the projection. In OpenGL 1.1, the view volume for a perspective projection is a frustum, or truncated pyramid.</p>"},{"location":"cn/glossary/#per-vertex-lighting","title":"per-vertex lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Doing lighting calculations only at the vertices of a primitive, and interpolating the results to get the colors of interior pixels. Per-vertex lighting is the standard in traditional OpenGL. Per-vertex lighting without specular reflection is Lambert shading.</p>"},{"location":"cn/glossary/#phong-shading","title":"Phong shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for computing pixel colors on a primitive using a lighting equation that takes into account ambient, diffuse, and specular reflection. In Phong shading, the lighting equation is applied at each pixel. Normal vectors are specified only at the vertices of the primitive. The normal vector that is used in the lighting equation at a pixel is obtained by interpolating the normal vectors for the vertices. Phong shading is named after Bui Tuong Phong, who developed the theory in the 1970s.</p>"},{"location":"cn/glossary/#pipeline","title":"pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A sequence of computational stages in a GPU that are applied to incoming data to produce some result. Some of the stages can be programmable shaders, such as vertex shaders, fragment shaders, and compute shaders. In a graphics rendering pipeline, the output is the colors of the pixels in an image.</p>"},{"location":"cn/glossary/#pixel","title":"pixel","text":"\u4e2d\u6587\u82f1\u6587 <p>A digital image is made up of rows and columns of small rectangles called pixels. To specify a digital image, a color is assigned to each pixel in the image.</p>"},{"location":"cn/glossary/#point-light","title":"point light","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source whose light rays emanate from a single point. Also called a \"lamp,\" since a lamp approximates a point source of light. Also called a positional light.</p>"},{"location":"cn/glossary/#polygon","title":"polygon","text":"\u4e2d\u6587\u82f1\u6587 <p>A multi-sided shape lying in a plane and specified by a list of points, called its vertices, and made up of the line segments from each point in the list to the next point in the list, plus a line segment from the last point in the list to the first point. All the points are required to lie in the same plane. Sometimes the term \"polygon\" includes the interior of the shape as well as its boundary.</p>"},{"location":"cn/glossary/#polygonal-mesh","title":"polygonal mesh","text":"\u4e2d\u6587\u82f1\u6587 <p>A collection of polygons, where the polygons can be joined together along their edges. A polygonal mesh can represent a polyhedron, or can be used as an approximation for a curved surface. A polygonal mesh can be represented as an indexed face set.</p>"},{"location":"cn/glossary/#polygon-offset","title":"polygon offset","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D graphics technique that slightly increases or decreases the depth of the pixels in a primitive as it is rendered. Polygon offset is used to avoid having several objects at exactly the same depth, a situation that is not handled well by the depth test.</p>"},{"location":"cn/glossary/#polyhedron","title":"polyhedron","text":"\u4e2d\u6587\u82f1\u6587 <p>A closed 3D figure whose faces, or sides, are polygons. Usually, it is assumed that the faces of a polyhedron do not intersect, except along their edges.</p>"},{"location":"cn/glossary/#power-of-two-texture","title":"power-of-two texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A texture image whose width and height are powers of two. In some graphics systems, this is a requirement of any image that is to be used as a texture.</p>"},{"location":"cn/glossary/#precision-qualifier","title":"precision qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, one of the following modifiers on a numeric variable declaration: lowp, mediump, or highp. A precision modifier specifies the minimum number of bits or range of values for the variable.</p>"},{"location":"cn/glossary/#procedural-texture","title":"procedural texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A texture for which the value at a given set of texture coordinates is computed as a mathematical function of the coordinates, as opposed to an image texture where the value is obtained by sampling an image.</p>"},{"location":"cn/glossary/#programmable-pipeline","title":"programmable pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics processing pipeline in which some of the processing stages can or must be implemented by programs. Data for an image passes through a sequence of processing stages, with the image as the end product. The sequence is called a \"pipeline.\" Programmable pipelines are used in modern GPUs to provide more flexibility and control to the programmer. The programs for a programmable pipeline are known as shaders and are written in a shader programming language such as GLSL.</p>"},{"location":"cn/glossary/#projection","title":"projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that maps coordinates in 3D to coordinates in 2D. Projection is used to convert a three-dimensional scene into a two-dimensional image.</p>"},{"location":"cn/glossary/#projection-transformation","title":"projection transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In 3D graphics, a transformation that maps a scene in 3D space onto a 2D image. In OpenGL 1.1, the projection maps the view volume (that is, the region in 3D space that is visible in the image) to clip coordinates, in which the values of x, y, and z range from -1 to 1. The x- and y-coordinates are then mapped to the image, while the z coordinate provides depth information.</p>"},{"location":"cn/glossary/#promise-in-javascript","title":"promise (in JavaScript)","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript programming, a promise represents a result that might be available immediately or at some time in the future. A programmer can provide a function to be called if and when the promise is fulfilled (that is when the result becomes available). A programmer can also provide a function to be called when the promise is rejected (for example, if some error occurs). Promises are asynchronous since the function that handles success or failure will be called at some unpredictable time.</p>"},{"location":"cn/glossary/#q","title":"Q","text":""},{"location":"cn/glossary/#quad","title":"quad","text":"\u4e2d\u6587\u82f1\u6587 <p>A quadrilateral, that is a four-sided figure in the plane. OpenGL 1.1 has the primitives GL_QUADS and GL_QUAD_STRIP for drawing quads, but it assumes without checking that the vertices that are provided are in fact planar and define quadrilaterals that are convex.</p>"},{"location":"cn/glossary/#quaternion","title":"quaternion","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector in the quaternion algebra, which is a four dimensional vector space in which two vectors, in addition to being added, can be multiplied. In computer graphics, quaternions of length one are often used to represent rotations. An advantage is that in the quaternion representation, it is possible to smoothly interpolate between two rotations.</p>"},{"location":"cn/glossary/#r","title":"R","text":""},{"location":"cn/glossary/#radial-gradient","title":"radial gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A color gradient pattern in which there are concentric circles, or sometimes ellipses, of constant color, with a color variation along the radius of the circles.</p>"},{"location":"cn/glossary/#raster-graphics","title":"raster graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>Pixel-based graphics in which an image is specified by assigning a color to each pixel in a grid of pixels.</p>"},{"location":"cn/glossary/#rasterization","title":"rasterization","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of creating a raster image, that is one made of pixels, from other data that specifies the content of the image. For example, a vector graphics image must be rasterized in order to be displayed on a computer screen.</p>"},{"location":"cn/glossary/#ray-casting","title":"ray casting","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of following a ray (that is, half of an infinite line) starting at a given point and extending in a given direction, in order to find points of intersection of the ray with objects in a scene. Usually, only the intersection point that is closest to the starting point of the ray is of interest.</p>"},{"location":"cn/glossary/#ray-tracing","title":"ray tracing","text":"\u4e2d\u6587\u82f1\u6587 <p>A recursive rendering algorithm that uses ray casting. A ray is cast from the viewpoint through a point in the image and into the scene, to determine what is seen at that point. To determine the color that is seen at that point, further rays are cast from the point, including a reflected ray (if the object has specular reflections), a refracted ray (if the object is translucent) and shadow rays towards light sources (to determine whether the object is illuminated by that light). Finding a color for a reflected or refracted ray can use a recursive application of the ray tracing algorithm.</p>"},{"location":"cn/glossary/#real-time-graphics","title":"real-time graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>The type of computer graphics that is needed for computer animation or other applications where the images must be rendered quickly, at the time when they are viewed. For computer animation, real-time graphics generally requires the ability to render the scene sixty times per second.</p>"},{"location":"cn/glossary/#reflection-mapping","title":"reflection mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>Another name for environment mapping.</p>"},{"location":"cn/glossary/#reflectivity","title":"reflectivity","text":"\u4e2d\u6587\u82f1\u6587 <p>The proportion or fraction of incident light that is reflected by an object. An object can have different reflectivities at different wavelengths. The color of an object is determined by its reflectivities at all wavelengths.</p>"},{"location":"cn/glossary/#refraction","title":"refraction","text":"\u4e2d\u6587\u82f1\u6587 <p>The bending of light as it passes from one transparent or translucent medium into another.</p>"},{"location":"cn/glossary/#regular-polygon","title":"regular polygon","text":"\u4e2d\u6587\u82f1\u6587 <p>A polygon in which all the sides have the same length and all the angles between consecutive sides are equal. Usually the term is restricted to simple polygons, which have sides that do not intersect except at their endpoints.</p>"},{"location":"cn/glossary/#regular-polyhedron","title":"regular polyhedron","text":"\u4e2d\u6587\u82f1\u6587 <p>A polyhedron in which each face is a regular polygon, and all the faces and angles are identical. There are only five regular polyhedra: the tetrahedron with 4 triangular faces, the cube with 6 square faces, the octahedron with 8 triangular faces, the dodecahedron with 12 pentagonal faces, and the icosahedron, with 20 triangular faces.</p>"},{"location":"cn/glossary/#renderbuffer","title":"renderbuffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a buffer (that is, a region of memory) that can be attached to a framebuffer for use as a color buffer, depth buffer, or stencil buffer.</p>"},{"location":"cn/glossary/#rendering","title":"rendering","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of producing a 2D image from a 3D scene description.</p>"},{"location":"cn/glossary/#render-to-texture","title":"render-to-texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique in which the output of a rendering operation is written directly to a texture. In WebGL, render-to-texture can be implemented by attaching the texture as one of the buffers in a framebuffer.</p>"},{"location":"cn/glossary/#rgba-color","title":"RGBA color","text":"\u4e2d\u6587\u82f1\u6587 <p>An RGB color\u2014specified by red, green, and blue component values\u2014together with an alpha component. The alpha component is most often take to specify the degree of transparency of the color, with a maximal alpha value giving a fully opaque color.</p>"},{"location":"cn/glossary/#rgb-color","title":"RGB color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the amount of red, green, and blue in the color.</p>"},{"location":"cn/glossary/#right-handed-coordinate-system","title":"right-handed coordinate system","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate system on 3D space in which the x, y, and z-axes satisfy this property: If you point the thumb of your right hand in the direction of the positive z-axis, then your fingers will curl from the positive x-axis towards the positive y-axis.</p>"},{"location":"cn/glossary/#right-hand-rule","title":"right-hand rule","text":"\u4e2d\u6587\u82f1\u6587 <p>A rule that is used to determine the positive direction of rotation about an axis in 3D space: If you point the thumb of your right hand in the direction of the axis, then your fingers will curl in the direction of positive angles of rotation. Note that this assumes that the axis has a direction; in OpenGL, an axis of rotation is determined by the point (0,0,0) and another point (x,y,z), and the direction of the axis is from (0,0,0) towards (x,y,z).</p>"},{"location":"cn/glossary/#rotation","title":"rotation","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that rotates each point by a specified angle about some point (in 2D) or axis (in 3D).</p>"},{"location":"cn/glossary/#s","title":"S","text":""},{"location":"cn/glossary/#sampler-variable","title":"sampler variable","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, a variable in a shader program that can be used to do lookup in an image texture. The value of a sampler variable specifies the texture unit that will be used to do the lookup. In WebGL, sampler variables are of type \"sampler2D\" or \"samplerCube.\"</p>"},{"location":"cn/glossary/#sampling","title":"sampling","text":"\u4e2d\u6587\u82f1\u6587 <p>The operation of mapping texture coordinates to colors from a texture, including using mipmaps if available and applying a minification or magnification filter if necessary.</p>"},{"location":"cn/glossary/#scalar-product","title":"scalar product","text":"\u4e2d\u6587\u82f1\u6587 <p>The product of a number and a vector. The scalar product of a number s and vector v is the vector obtained by multiplying each coordinate of v by s. In 3D, if s is a number and v=(x,y,z), then the scalar product of s times v is the vector (sx,sy,sz).</p>"},{"location":"cn/glossary/#scaling","title":"scaling","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that multiplies each coordinate of a point by a number called the scaling factor. Scaling increases or decreases the size of an object, but also moves its points closer to or farther from the origin. Scaling can be uniform\u2014the same in every direction\u2014or non-uniform\u2014with a different scaling factor in each coordinate direction. A negative scaling factor can be used to apply a reflection.</p>"},{"location":"cn/glossary/#scene-description-language","title":"scene description language","text":"\u4e2d\u6587\u82f1\u6587 <p>A language that can be used to specify graphics images by stating what's in the image. That is, the scene is created \"declaratively,\" by stating what it contains, as opposed to being created \"procedurally,\" by a program. A document written in a scene description language can be used to generate a scene graph for the scene.</p>"},{"location":"cn/glossary/#scene-graph","title":"scene graph","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that represents the objects in a scene, together with attributes of the objects and the modeling transformations that are applied to the objects. An image of the scene is created by traversing the scene graph data structure. A scene graph might exist only conceptually, or it might be an actual data structure in a program.</p>"},{"location":"cn/glossary/#shader","title":"shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A program to be executed at some stage of the rendering pipeline. OpenGL shaders are written in the GLSL programming languages. For WebGL, only vertex shaders and fragment shaders are supported. WebGPU also has compute shaders, which are used in compute pipelines.</p>"},{"location":"cn/glossary/#shadow-mapping","title":"shadow mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for determining which parts of a scene are illuminated and which are in shadow from a given light source. The technique involves rendering the scene from the point of the view of the light source, but uses only the depth buffer from that rendering. The depth buffer is the \"shadow map.\" Along a given direction from the light source, the object that is illuminated by the light is the one that is closest to the light. The distance to that object is essentially encoded in the depth buffer. Objects at greater distance are in shadow.</p>"},{"location":"cn/glossary/#shadow-ray","title":"shadow ray","text":"\u4e2d\u6587\u82f1\u6587 <p>In the ray tracing algorithm, a ray that is cast from a point on object in the direction of a light source to determine whether that point is illuminated by that light source or is in shadow.</p>"},{"location":"cn/glossary/#shear-transform","title":"shear transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A shear transformation in 2D leaves some line, L, fixed, and lines perpendicular to L are \"tilted\" relative to L by the same angle. Another description is that a line parallel to L is mapped to itself, but is moved by an amount proportional to its distance from L. In 3D, a shear transformation leaves some plane, P, fixed, and it maps a plane parallel to P to itself, but moved by an amount proportional to its distance from P.</p>"},{"location":"cn/glossary/#shininess","title":"shininess","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that determines the size and sharpness of specular highlights. Also called the \"specular exponent\" because of the way it is used in lighting calculations. In OpenGL, shininess is a number in the range 0 to 128.</p>"},{"location":"cn/glossary/#single-buffering","title":"single buffering","text":"\u4e2d\u6587\u82f1\u6587 <p>As opposed to double buffering, a graphics technique in which the image is drawn directly to the screen (that is, to the buffer that serves as the source for the screen image). The disadvantage of single buffering is that, for a complex image, the user can observe the process of drawing the image.</p>"},{"location":"cn/glossary/#skybox","title":"skybox","text":"\u4e2d\u6587\u82f1\u6587 <p>A large cube that surrounds a scene and is textured with images that form a background for that scene, in all directions.</p>"},{"location":"cn/glossary/#smooth-shading","title":"smooth shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting computation for the faces of a polygon or polygonal mesh that uses a different normal vector at each vertex of the polygon. When two polygons share a vertex, both polygons use the same normal vector for that vertex, resulting in a smooth appearance at that vertex. Smooth shading is appropriate when a polygonal mesh is used as an approximation for a smooth surface.</p>"},{"location":"cn/glossary/#specular-color","title":"specular color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of incident light that is reflected specularly by a surface.</p>"},{"location":"cn/glossary/#specular-exponent","title":"specular exponent","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that determines the size and sharpness of specular highlights. Called \"shininess\" in OpenGL.</p>"},{"location":"cn/glossary/#specular-highlight","title":"specular highlight","text":"\u4e2d\u6587\u82f1\u6587 <p>Illumination of a surface produced by specular reflection. A specular highlight is seen at points on the surface where the angle from the surface to the viewer is approximately equal to the angle from the surface to a light source.</p>"},{"location":"cn/glossary/#specular-reflection","title":"specular reflection","text":"\u4e2d\u6587\u82f1\u6587 <p>Mirror-like reflection of light rays from a surface. A ray of light is reflected as a ray in the direction that makes the angle of reflection equal to the angle of incidence. A specular reflection can only be seen by a viewer whose position lies on the path of the reflected ray.</p>"},{"location":"cn/glossary/#spotlight","title":"spotlight","text":"\u4e2d\u6587\u82f1\u6587 <p>A light that emits a cone of illumination. A spotlight is similar to a point light in that it has a position in 3D space, and light radiates from that position. However, the light only affects objects that are in the spotlight's cone of illumination.</p>"},{"location":"cn/glossary/#stack","title":"stack","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure with the operations push() and pop(). Pushing an item onto a stack just adds that item to the stack. Popping from the stack will remove and return the item that was most recently pushed onto the stack.</p>"},{"location":"cn/glossary/#storage-buffer","title":"storage buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, a general purpose buffer on the GPU, which can be used in compute shaders as well as in vertex and fragment shaders.</p>"},{"location":"cn/glossary/#storage-qualifier","title":"storage qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, one of the following modifiers on a variable declaration: uniform, attribute, varying, or const.</p>"},{"location":"cn/glossary/#stroking-a-shape","title":"stroking a shape","text":"\u4e2d\u6587\u82f1\u6587 <p>Drawing the outline of a shape, as if a pen is dragged along the boundary of the shape. For a shape with no interior, such as a line segment, stroking the shape simply means dragging the pen along the shape.</p>"},{"location":"cn/glossary/#subsurface-scattering","title":"subsurface scattering","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting effect in which light enters a slightly translucent object, is reflected internally one or more times, and then exits the object at a different point. Subsurface scattering contributes to the appearance of materials such as jade, milk, and skin.</p>"},{"location":"cn/glossary/#svg","title":"SVG","text":"\u4e2d\u6587\u82f1\u6587 <p>Scalable Vector Graphics. An XML language for specifying 2D vector graphics. SVG is a scene description language. It is designed to integrate into web pages.</p>"},{"location":"cn/glossary/#swizzler","title":"swizzler","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL and WGSL, a notation such as v.yzx, where v is a vector and v.yzx represents the three-component vector made up of the y, z, and x components of v. Technically, any use of the dot notation with vectors is considered to be a swizzler.</p>"},{"location":"cn/glossary/#t","title":"T","text":""},{"location":"cn/glossary/#texel","title":"texel","text":"\u4e2d\u6587\u82f1\u6587 <p>A pixel in a texture image.</p>"},{"location":"cn/glossary/#texture","title":"texture","text":"\u4e2d\u6587\u82f1\u6587 <p>Variation in some property from point-to-point on an object. The most common type is image texture. When an image texture is applied to a surface, the surface color varies from point to point.</p>"},{"location":"cn/glossary/#texture-coordinates","title":"texture coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to the 2D coordinate system on a texture image, or to similar coordinate systems for 1D and 3D textures. Texture coordinates typically range from 0 to 1 both vertically and horizontally, with (0,0) at the lower left corner of the image. The term also refers to coordinates that are given for a surface and that are used to specify how a texture image should be mapped to the surface.</p>"},{"location":"cn/glossary/#texture-object","title":"texture object","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that can potentially be stored on the graphics card, and which can hold a texture image, a set of mipmaps, and configuration data such as the current setting for the minification and magnification filters. Using texture objects makes it possible to switch rapidly between textures without having to reload the data into the graphics card.</p>"},{"location":"cn/glossary/#texture-repeat-mode","title":"texture repeat mode","text":"\u4e2d\u6587\u82f1\u6587 <p>Determines how texture coordinates outside the range 0.0 to 1.0 are treated when sampling an image texture. The texture image itself has vertical and horizontal coordinates in the range 0.0 to 1.0. For coordinates outside that range, the texture repeat mode CLAMP or CLAMP_TO_EDGE, for example, clamps the coordinates to the range 0.0 to 1.0, essentially extending the color at the edge of the image indefinitely in all directions. Other repeat modes include REPEAT and MIRRORED_REPEAT.</p>"},{"location":"cn/glossary/#texture-target","title":"texture target","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, one of several kinds of texture, such as 2D image texture, 1D texture, and cube map texture. A texture target is specified by a constant such as GL_TEXTURE_2D or GL_TEXTURE_CUBE_MAP_POSITIVE_X. The texture target is a parameter to many OpenGL functions that work with textures.</p>"},{"location":"cn/glossary/#texture-transformation","title":"texture transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that is applied to texture coordinates before they are used to sample data from a texture. The effect is to translate, rotate, or scale the texture on the surface to which it is applied.</p>"},{"location":"cn/glossary/#texture-unit","title":"texture unit","text":"\u4e2d\u6587\u82f1\u6587 <p>A hardware component in a GPU that does texture lookup. (Can also refer to an abstraction for such a component, whether or not it is actually implemented in hardware.) That is, it maps texture coordinates to colors from an image texture. This is the operation called \"sampling,\" and texture units are associated with sampler variables in GLSL shader programs.</p>"},{"location":"cn/glossary/#threejs","title":"three.js","text":"\u4e2d\u6587\u82f1\u6587 <p>A JavaScript library for 3D graphics. The library implements an object-oriented scene graph API. While it is used primarily with WebGL, three.js can also render 3D scenes using the 2D canvas graphics API.</p>"},{"location":"cn/glossary/#tmu","title":"TMU","text":"\u4e2d\u6587\u82f1\u6587 <p>Texture Mapping Unit, another name for texture unit (perhaps with a stronger implication of actual hardware support). Also called a TPU (Texture Processing Unit).</p>"},{"location":"cn/glossary/#torus","title":"torus","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D geometric object having the shape of a doughnut (or bagel).</p>"},{"location":"cn/glossary/#translation","title":"translation","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that adds a given translation amount to each coordinate of a point. Translation is used to move objects without changing their size or orientation.</p>"},{"location":"cn/glossary/#two-sided-lighting","title":"two-sided lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>An option in OpenGL that allows the back face of a polygon to have different material properties from the front face. Also, when this option is on, the normal vector that is used in lighting calculations for the back face is taken to be the negative of the vector for the front face. (The negative of a vector points in the opposite direction.)</p>"},{"location":"cn/glossary/#typed-array","title":"typed array","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript, an array type that is limited to holding numerical values of a single type. For example, the type Float32Array represents arrays that can hold 32-bit floating point values, and Uint8Array arrays can hold only 8-bit integer values. Such arrays are more efficient than general JavaScript arrays for numerical calculations. The were introduced into JavaScript along with HTML canvas graphics and WebGL.</p>"},{"location":"cn/glossary/#u","title":"U","text":""},{"location":"cn/glossary/#uniform-scaling","title":"uniform scaling","text":"\u4e2d\u6587\u82f1\u6587 <p>A scaling transformation in which the scaling factors in all directions are the same. Uniform scaling changes the size of an object without distorting its shape.</p>"},{"location":"cn/glossary/#uniform-variable","title":"uniform variable","text":"\u4e2d\u6587\u82f1\u6587 <p>Variables that represent input to a shader program in a programmable graphics pipeline. A uniform variable has the same value at every vertex and at every pixel of a primitive.</p>"},{"location":"cn/glossary/#unit-normal","title":"unit normal","text":"\u4e2d\u6587\u82f1\u6587 <p>A normal vector of length one; that is, a unit vector that is perpendicular to a curve or surface at a given point on the curve or surface.</p>"},{"location":"cn/glossary/#unit-vector","title":"unit vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector of length one.</p>"},{"location":"cn/glossary/#unsigned-byte","title":"unsigned byte","text":"\u4e2d\u6587\u82f1\u6587 <p>A data type representing 8-bit non-negative integer values, taking values in the range from 0 to 255.</p>"},{"location":"cn/glossary/#url","title":"URL","text":"\u4e2d\u6587\u82f1\u6587 <p>Uniform Resource Locator. An address of some resource on the World Wide Web. For example, \"http://math.hws.edu/grahicsbook\".</p>"},{"location":"cn/glossary/#v","title":"V","text":""},{"location":"cn/glossary/#vao","title":"VAO","text":"\u4e2d\u6587\u82f1\u6587 <p>Vertex Array Object. In WebGL 2.0, a region of memory, typically on the graphics card, that holds a collection of attribute settings such as enabled state and values of vertex attribute pointers. All of the settings can then be selected simply by binding the VAO.</p>"},{"location":"cn/glossary/#varying-variable","title":"varying variable","text":"\u4e2d\u6587\u82f1\u6587 <p>A variable that is used to communicate values from the vertex shader to the fragment shader in the WebGL or OpenGL ES 2.0 graphics pipeline. A varying variable is assigned a value in the vertex shader. The value of the variable in the fragment shader for a pixel in the primitive is obtained by interpolating the values from the vertices of the primitive. (In newer versions of GLSL, which support additional shader stages, the term \"varying variable\" is replaced by the more general terms \"in variable\" and \"out variable,\" which refer to variables that are used for input to or output from a shader.)</p>"},{"location":"cn/glossary/#vbo","title":"VBO","text":"\u4e2d\u6587\u82f1\u6587 <p>Vertex Buffer Object. A block of memory that can hold the coordinates or other attributes for a set of vertices. A VBO can be stored on a GPU. VBOs make it possible to send such data to the GPU once and then reuse it several times. In OpenGL, VBOs are used with the functions glDrawArrays and glDrawElements.</p>"},{"location":"cn/glossary/#vector","title":"vector","text":"\u4e2d\u6587\u82f1\u6587 <p>An element of a vector space. Elements of a vector space can be added and can be multiplied by constants. For computer graphics, a vector is just a list or array containing two, three, or four numbers. Vectors in that sense are often used to represent points in 2D, 3D, or 4D space. Properly, however, a vector represents a quantity that has a length and a direction; a vector used in this way can be visualized as an arrow.</p>"},{"location":"cn/glossary/#vector-graphics","title":"vector graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>Shape-based graphics in which an image is specified as a list of the shapes or objects that appear in the image.</p>"},{"location":"cn/glossary/#vertex","title":"vertex","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the points that define a geometric primitive, such as the two endpoints of a line segment or the three vertices of a triangle. (The plural is \"vertices.\") A vertex can be specified in a coordinate system by giving its x and y coordinates in 2D graphics, or its x, y, and z coordinates in 3D graphics.</p>"},{"location":"cn/glossary/#vertex-array","title":"vertex array","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, an array that is used to store coordinates or other attribute values for vertices, to be used with the functions glDrawArrays and glDrawElements. A vertex array exists on the \"client side\" of OpenGL, and it must be transmitted to the GPU to be used. In Java's JOGL API for OpenGL, nio buffers are used instead of arrays.</p>"},{"location":"cn/glossary/#vertex-buffer","title":"vertex buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, a vertex buffer is a GPU data structure that holds values to be used as input the vertex shader.</p>"},{"location":"cn/glossary/#vertex-shader","title":"vertex shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A shader program that will be executed once for each vertex in a primitive. A vertex shader must compute the vertex coordinates in the clip coordinate system. It can also compute other properties, such as color.</p>"},{"location":"cn/glossary/#viewing","title":"viewing","text":"\u4e2d\u6587\u82f1\u6587 <p>Setting the position and orientation of the viewer in a 3D world, which determine what will be visible when the 2D image of a 3D world is rendered.</p>"},{"location":"cn/glossary/#viewing-transformation","title":"viewing transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>The transformation in 3D graphics that maps world coordinates to eye coordinates. The viewing transform establishes the position, orientation, and scale of the viewer in the world.</p>"},{"location":"cn/glossary/#viewport","title":"viewport","text":"\u4e2d\u6587\u82f1\u6587 <p>The rectangular area in which the image for 2D or 3D graphics is displayed. The coordinates on the viewport are pixel coordinates, more properly called device coordinates since they are actual physical coordinates on the device where the image is being displayed.</p>"},{"location":"cn/glossary/#viewport-transformation","title":"viewport transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, the final transformation from clip coordinates to device coordinates. The viewport transformation maps the clipping cube (the cube in 3D given by x, y, and z coordinates in the range from -1 to 1) to the viewport (the rectangle in the drawing surface where the image is rendered).</p>"},{"location":"cn/glossary/#view-volume","title":"view volume","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, the region is 3D space that is visible in the rendered image. For orthographic projections, the view volume is a rectangular solid. For perspective projection, the view volume is a frustum (truncated pyramid).</p>"},{"location":"cn/glossary/#view-window","title":"view window","text":"\u4e2d\u6587\u82f1\u6587 <p>As used in this book, the window, or view window, for 2D graphics is the rectangle in the xy-plane that contains the portion of the plane that will be displayed in the image. (The corresponding term in 3D graphics is \"view volume.\")</p>"},{"location":"cn/glossary/#vulkan","title":"Vulkan","text":"\u4e2d\u6587\u82f1\u6587 <p>An open-source cross-platform API for 3D graphics and computation, designed as a more modern and efficient replacement for OpenGL.</p>"},{"location":"cn/glossary/#w","title":"W","text":""},{"location":"cn/glossary/#webgl","title":"WebGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D graphics API for use on web pages. WebGL programs are written in the JavaScript programming language and display their images in HTML canvas elements. WebGL is based on OpenGL ES, the version of OpenGL for embedded systems, with a few changes to adapt it to the JavaScript language and the Web environment.</p>"},{"location":"cn/glossary/#webgl-extension","title":"WebGL extension","text":"\u4e2d\u6587\u82f1\u6587 <p>An optional capability in WebGL that is not available in all implementations. The WebGL API has a function for checking whether a given extension is available and, if so, activating it.</p>"},{"location":"cn/glossary/#webgpu","title":"WebGPU","text":"\u4e2d\u6587\u82f1\u6587 <p>A new JavaScript graphics API, similar to WebGL, but designed to let web programs access modern GPU capabilities such as compute shaders.</p>"},{"location":"cn/glossary/#wgsl","title":"WGSL","text":"\u4e2d\u6587\u82f1\u6587 <p>The WebGPU Shader Language, the programming language in which shaders for use in WebGPU are written.</p>"},{"location":"cn/glossary/#winding-number","title":"winding number","text":"\u4e2d\u6587\u82f1\u6587 <p>The winding number of a path about a point that does not lie on the path is the number of times that the path winds around the point, counting each 360-degree rotation in the positive direction about the point as one and each 360-degree turn in the negative direction as minus one. To compute the winding number, draw a ray extending from the point to infinity. Each crossing of the ray by the path counts as 1 if it crosses the ray going in the positive direction and as negative 1 if it crosses in the negative direction.</p>"},{"location":"cn/glossary/#wireframe","title":"wireframe","text":"\u4e2d\u6587\u82f1\u6587 <p>A style of drawing a polyhedron or polygonal mesh in which only the edges are drawn, resulting in an image made up of line segments.</p>"},{"location":"cn/glossary/#world-coordinates","title":"world coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system in which a scene is defined. The image that is produced of the scene will show the contents of the world coordinate system that lie within some view volume (for 3D) or view window (for 2D). Objects are defined in their own object coordinate system. Modeling transformations are then applied to place objects into the scene; that is, they transform object coordinates to world coordinates.</p>"},{"location":"cn/glossary/#x","title":"X","text":""},{"location":"cn/glossary/#xml","title":"XML","text":"\u4e2d\u6587\u82f1\u6587 <p>eXtensible Markup Language. Not a single language as such, but a class of languages that follow certain syntax rules. For example, SVG is an XML language because it follows those rules, but it also has further restrictions on its syntax that make it appropriate for specifying 2D graphics. XML documents, like HTML documents, have a tree-like structure defined by \"elements.\" However, HTML is not an XML language since it does not follow all the syntax rules. XHTML is an alternative language for web pages that is similar to HTML but follows XML syntax rules.</p>"},{"location":"cn/preface/","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b80\u4ecb\uff0c\u7248\u672c 1.4","text":""},{"location":"cn/preface/#\u524d\u8a00","title":"\u524d\u8a00","text":"<p>\u8fd9\u672c\u6559\u79d1\u4e66\u4ee3\u8868\u4e86\u6211\u5f00\u53d1\u4e00\u5b66\u671f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b2c\u4e00\u95e8\u8bfe\u7a0b\u7684\u5c1d\u8bd5\uff0c\u8be5\u8bfe\u7a0b\u901a\u5e38\u7531\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u7684\u5b66\u751f\u5728\u5927\u5b66\u7b2c\u4e09\u5e74\u6216\u7b2c\u56db\u5e74\u5b66\u4e60\u3002 \uff08\u8003\u8651\u5230\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u9886\u57df\u603b\u662f\u5728\u5feb\u901f\u53d8\u5316\uff0c\u5b83\u80fd\u6301\u7eed\u9002\u7528\u591a\u4e45\u662f\u4e00\u4e2a\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\u3002\uff09\u6211\u4e5f\u8bd5\u56fe\u4f7f\u8fd9\u672c\u4e66\u9002\u5408\u81ea\u5b66\u3002</p> <p>\u672c\u4e66\u7684\u8bfb\u8005\u5e94\u8be5\u5177\u6709\u81f3\u5c11\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u4e30\u5bcc\u7ecf\u9a8c\uff0c\u5305\u62ec\u4e00\u4e9b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u548c\u6570\u636e\u7ed3\u6784\u7684\u77e5\u8bc6\u3002\u6bcf\u4e2a\u53c2\u52a0\u6211\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u8bfe\u7a0b\u7684\u4eba\u90fd\u81f3\u5c11\u6709\u4e24\u4e2a\u5b66\u671f\u7684\u7f16\u7a0b\u7ecf\u9a8c\uff0c\u800c\u4e14\u5927\u591a\u6570\u4eba\u90fd\u6709\u9664\u6b64\u4e4b\u5916\u7684\u989d\u5916\u7ecf\u9a8c\u3002\u6211\u7684\u5b66\u751f\u5b66\u4e60\u4e86 Java \u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u5177\u6709\u5176\u4ed6\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u4e5f\u5e94\u8be5\u53ef\u4ee5\u9605\u8bfb\u8fd9\u672c\u4e66\u3002\u4e66\u4e2d\u7684\u793a\u4f8b\u4f7f\u7528 JavaScript\u3001Java \u548c C\u3002\u53ef\u4ee5\u7528 JavaScript \u8fdb\u884c\u6240\u6709\u7f16\u7a0b\uff0c\u4f46\u4e00\u4e9b C \u77e5\u8bc6\u5bf9\u4e8e\u672c\u4e66\u7684\u67d0\u4e9b\u90e8\u5206\u4e5f\u5f88\u91cd\u8981\u3002\u9644\u5f55\u4e2d\u4ecb\u7ecd\u4e86\u8fd9\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u529f\u80fd\u3002 \uff08\u5982\u679c\u60a8\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\uff0c\u8bf7\u5c1d\u8bd5\u6211\u7684\u514d\u8d39 Java \u5165\u95e8\u6559\u79d1\u4e66\uff0c\u53ef\u4ece http://math.hws.edu/javanotes\u83b7\u53d6\u3002\uff09</p> <p>\u6211\u5728 2015 \u5e74\u79cb\u5b63\u7684\u4e00\u95e8\u8bfe\u7a0b\u4e2d\u4f7f\u7528\u4e86\u672c\u4e66\u7684 1.0 \u7248\u672c\u30021.1 \u7248\u672c\u7ea0\u6b63\u4e86\u4e00\u4e9b\u9519\u8bef\u548c\u62fc\u5199\u9519\u8bef\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6750\u6599\u3002\u6211\u7684\u8bfe\u7a0b 2017 \u5e74\u79cb\u5b63\u7248\u672c\u4e2d\u4f7f\u7528\u4e86\u5b83\u3002\u6211\u5728 2021 \u5e74\u79cb\u5b63\u4f7f\u7528\u7684\u7248\u672c 1.3 \u6dfb\u52a0\u4e86\u4e00\u4e9b\u6709\u5173 WebGL 2.0 \u548c GLSL ES 3.00 \u7684\u6750\u6599\uff0c\u66f4\u65b0\u4e86\u5927\u90e8\u5206 JavaScript \u4ee3\u7801\u4ee5\u4f7f\u7528 ES6\uff0c\u5e76\u66f4\u65b0\u4e86\u7b2c 5 \u7ae0\u4ee5\u4f7f\u7528Three.js\u5e93\u7684\u7248\u672c 129\u3002</p> <p>\u5c3d\u7ba1\u6211\u5df2\u7ecf\u4ece\u6559\u5b66\u5c97\u4f4d\u9000\u4f11\uff0c\u4f46\u6211\u51b3\u5b9a\u5728 2023 \u5e74\u590f\u5b63\u5f00\u53d1 1.4 \u7248\u672c\u3002\u6211\u6dfb\u52a0\u4e86\u6709\u5173 WebGPU \u7684\u65b0\u7ae0\u8282\uff0c\u5e76\u8fc1\u79fb\u5230Three.js\u7684\u7248\u672c 154 \u3002\u7531\u4e8e WebGPU \u4f7f\u7528 JavaScript Promise\uff0c\u56e0\u6b64\u6211\u5728\u9644\u5f55 A \u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u90e8\u5206\u6765\u4ecb\u7ecd Promise \u548c\u5f02\u6b65\u51fd\u6570\u3002\u56e0\u4e3aThree.js\u5f88\u5feb\u5c31\u4f1a\u5220\u9664\u8be5\u5e93\u7684\u975e\u6a21\u5757\u5316\u7248\u672c\uff0c\u6240\u4ee5\u6211\u5728\u7b2c 5 \u7ae0\u5f00\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5173\u4e8e JavaScript \u6a21\u5757\u7684\u7b80\u77ed\u90e8\u5206\uff0c\u5e76\u4e14\u4fee\u6539\u4e86Three.js\u793a\u4f8b\u4ee5\u4f7f\u7528\u6a21\u5757\u3002\u9664\u4e86\u8f6c\u5411\u6a21\u5757\u5316\u7684Three.js\u4e4b\u5916\uff0c\u7b2c 5 \u7ae0\u4e2d\u7684\u5185\u5bb9\u6ca1\u6709\u6539\u53d8\u3002\u6574\u672c\u4e66\u4e2d\u7684\u8bb8\u591a\u9519\u522b\u5b57\u548c\u5c0f\u9519\u8bef\u90fd\u5f97\u5230\u4e86\u4fee\u6b63\u3002 \uff08\u611f\u8c22\u8bfb\u8005 Danny Hurlburt \u4fee\u590d\u4e86\u5176\u4e2d\u7684\u8bb8\u591a\u95ee\u9898\u3002\uff09</p> <p>\u672c\u4e66\u7684\u4e3b\u9875\u7f51\u7ad9\u662f https://math.hws.edu/graphicsbook \u3002\u8be5\u5730\u5740\u7684\u9875\u9762\u5305\u542b\u7528\u4e8e\u4e0b\u8f7d\u7f51\u7ad9\u526f\u672c\u548c\u4e0b\u8f7d\u672c\u4e66PDF\u7248\u672c\u7684\u94fe\u63a5\u3002</p> <p>\u8fd9\u662f\u4e00\u672c\u514d\u8d39\u6559\u79d1\u4e66\u3002\u6b22\u8fce\u60a8\u91cd\u65b0\u5206\u53d1\u5b83\uff0c\u53ea\u8981\u60a8\u4e0d\u6536\u53d6\u4efb\u4f55\u8d39\u7528\u3002\u60a8\u53ef\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u53d1\u5e03\u672a\u7ecf\u4fee\u6539\u7684\u526f\u672c\u3002\u60a8\u53ef\u4ee5\u5236\u4f5c\u548c\u5206\u53d1\u4fee\u6539\u7248\u672c\uff08\u5305\u62ec\u7ffb\u8bd1\uff09\uff0c\u53ea\u8981\u60a8\u7684\u7248\u672c\u660e\u786e\u539f\u59cb\u6765\u6e90\u5e76\u4e14\u5728\u540c\u4e00\u8bb8\u53ef\u8bc1\u4e0b\u514d\u8d39\u5206\u53d1\u5373\u53ef\u3002 \uff08\u6b63\u5f0f\u5730\uff0c\u8fd9\u672c\u4e66\u662f\u6839\u636e\u201c\u77e5\u8bc6\u5171\u4eab\u975e\u5546\u4e1a\u7f72\u540d\u76f8\u540c\u65b9\u5f0f\u5171\u4eab\u8bb8\u53ef\u8bc1\u201d\u83b7\u5f97\u8bb8\u53ef\u7684\u3002\uff09</p> <p>\u672c\u4e66\u7684\u8bb8\u591a\u793a\u4f8b\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u90fd\u662f\u8981\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u7684\u7f51\u9875\u3002\u672c\u4e66\u7684\u7f51\u7edc\u7248\u672c\u5305\u62ec\u96c6\u6210\u5230\u672c\u4e66\u7f51\u9875\u4e2d\u7684\u4ea4\u4e92\u5f0f\u6f14\u793a\u7a0b\u5e8f\u3002</p> <p>\u5927\u591a\u6570\u793a\u4f8b\u7a0b\u5e8f\u548c\u6240\u6709\u6f14\u793a\u90fd\u4f7f\u7528 HTML \u753b\u5e03\u56fe\u5f62\uff08\u7b2c 2 \u7ae0\u4e2d\uff09\u3001WebGPU\uff08\u7b2c 9 \u7ae0\u4e2d\uff09\u6216 WebGL\uff08\u5176\u4ed6\u7ae0\u8282\u4e2d\uff09\u3002 Canvas \u56fe\u5f62\u548c WebGL \u5e94\u8be5\u53ef\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u73b0\u4ee3\u6d4f\u89c8\u5668\u4e2d\u6b63\u5e38\u5de5\u4f5c\u3002 WebGPU\u662f\u4e00\u9879\u65b0\u6280\u672f\uff0c\u95ee\u9898\u4e5f\u6bd4\u8f83\u591a\u3002\u5230 2023 \u5e74 7 \u6708\uff0c\u5b83\u9ed8\u8ba4\u4ec5\u5728\u5c11\u6570 Web \u6d4f\u89c8\u5668\uff08Windows \u548c MacOS \u4e0a\u7684 Chrome \u548c Edge\uff09\u4e2d\u53ef\u7528\uff0c\u751a\u81f3\u5728\u90a3\u4e9b\u6d4f\u89c8\u5668\u4e0a\u4e5f\u53ef\u80fd\u65e0\u6cd5\u5728\u6240\u6709\u786c\u4ef6\u4e0a\u8fd0\u884c\u3002\u5728\u5176\u4ed6\u4e00\u4e9b\u6d4f\u89c8\u5668\u4e2d\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u5b9e\u9a8c\u6027\u529f\u80fd\u542f\u7528\u3002\u7136\u800c\uff0cWebGPU \u5f88\u53ef\u80fd\u6210\u4e3a Web 3D \u56fe\u5f62\u7684\u672a\u6765\uff0c\u56e0\u6b64\u5f00\u59cb\u5b66\u4e60\u5b83\u5f88\u91cd\u8981\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u548c\u6f14\u793a\u90fd\u53ef\u4ee5\u5728\u672c\u4e66\u7684\u7f51\u7ad9\u7248\u672c\u7684\u4e0b\u8f7d\u4e2d\u627e\u5230\uff0c\u8be5\u7248\u672c\u53ef\u4ee5\u4ece\u5176 \u4e3b\u9875\u83b7\u5f97\u3002\u5728\u540d\u4e3asource\u548cdemo \u7684\u6587\u4ef6\u5939\u4e2d\u67e5\u627e\u5b83\u4eec\u3002\u8bf7\u6ce8\u610f\uff0c\u5927\u591a\u6570 Web \u6d4f\u89c8\u5668\u4e0d\u613f\u610f\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e9b\u8d44\u6e90\uff0c\u4f8b\u5982 3D \u6a21\u578b\u548c\u6a21\u5757\u5316 JavaScript \u811a\u672c\u3002\u5f53\u8fd9\u4e9b\u6d4f\u89c8\u5668\u5c1d\u8bd5\u5728\u672c\u5730\u800c\u4e0d\u662f\u901a\u8fc7 Web \u8fd0\u884c\u67d0\u4e9b\u793a\u4f8b\u65f6\uff0c\u5b83\u4eec\u5c06\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u6b64\u95ee\u9898\u4ec5\u5f71\u54cd\u90e8\u5206\u793a\u4f8b\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u672c\u4e66\u7684\u5728\u7ebf\u7248\u672c\u3002\u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7f51\u7edc\u670d\u52a1\u5668\u5e76\u901a\u8fc7\u8be5\u7f51\u7edc\u670d\u52a1\u5668\u67e5\u770b\u6559\u79d1\u4e66\u3002\u53ef\u4ee5\u5c06 Web \u6d4f\u89c8\u5668\u914d\u7f6e\u4e3a\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u4e2d\u7684\u8d44\u6e90\uff0c\u5c3d\u7ba1\u4f7f\u7528\u8be5\u914d\u7f6e\u6d4f\u89c8 Web \u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002</p> <p>\u5728\u8fd1 35 \u5e74\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u6bcf\u9694\u51e0\u5e74\u5de6\u53f3\u5c31\u6559\u6388\u4e00\u6b21\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3002\u968f\u7740\u8be5\u9886\u57df\u7684\u53d1\u5c55\uff0c\u6211\u51e0\u4e4e\u6bcf\u6b21\u6559\u6388\u8bfe\u7a0b\u65f6\u90fd\u5fc5\u987b\u505a\u51fa\u91cd\u5927\u6539\u53d8\uff0c\u4f46\u5728\u5927\u90e8\u5206\u65f6\u95f4\u91cc\uff0c\u6211\u80fd\u591f\u4e3b\u8981\u56f4\u7ed5 OpenGL 1.1\uff08\u4e00\u79cd\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u666e\u904d\u4f7f\u7528\u7684\u56fe\u5f62 API\uff09\u6765\u6784\u5efa\u8bfe\u7a0b\u3002 OpenGL 1.1 \u4ee5\u900f\u660e\u4e14\u76f8\u5f53\u6613\u4e8e\u4f7f\u7528\u7684\u65b9\u5f0f\u5b9e\u73b0\u57fa\u672c\u56fe\u5f62\u6982\u5ff5\uff08\u9876\u70b9\u3001\u6cd5\u5411\u91cf\u3001\u5750\u6807\u53d8\u6362\u3001\u5149\u7167\u548c\u6750\u8d28\uff09\u3002\u8f83\u65b0\u7684\u56fe\u5f62 API \u66f4\u7075\u6d3b\u3001\u66f4\u5f3a\u5927\uff0c\u4f46\u5b66\u4e60\u66f2\u7ebf\u66f4\u9661\u5ced\u3002\u6211\u76f8\u4fe1\u4efb\u4f55\u8ba1\u7b97\u673a\u79d1\u5b66\u5165\u95e8\u8bfe\u7a0b\u90fd\u53d7\u76ca\u4e8e\u4ece\u66f4\u7b80\u5355\u7684\u6846\u67b6\u6216\u5e93\u5f00\u59cb\uff0c\u800c OpenGL 1.1 \u5f88\u597d\u5730\u5b9e\u73b0\u4e86\u8fd9\u4e00\u76ee\u7684\u3002</p> <p>OpenGL \u4ecd\u7136\u53d7\u5230\u5e7f\u6cdb\u652f\u6301\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u5b83\u6613\u4e8e\u4f7f\u7528\u7684\u90e8\u5206\u5df2\u4ece\u6700\u65b0\u7248\u672c\u4e2d\u6b63\u5f0f\u5220\u9664\uff08\u5c3d\u7ba1\u5b9e\u9645\u4e0a\u5927\u591a\u6570\u53f0\u5f0f\u8ba1\u7b97\u673a\u90fd\u652f\u6301\u5b83\u4eec\uff09\u3002\u6b64\u5916\uff0cOpenGL \u6b63\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u88ab\u66f4\u65b0\u7684\u56fe\u5f62 API\uff08\u4f8b\u5982 Direct3D\u3001Metal \u548c Vulkan\uff09\u6240\u53d6\u4ee3\u3002 WebGL \u57fa\u4e8e OpenGL\uff0c\u5e76\u5c06\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u7ee7\u7eed\u5f97\u5230\u5e7f\u6cdb\u652f\u6301\u3002 WebGPU \u53d7\u5230\u8f83\u65b0 API \u7684\u542f\u53d1\uff0c\u5e76\u4e14\u53ef\u80fd\u5728\u67d0\u4e9b\u65f6\u5019\u53d6\u4ee3\u65b0\u5e94\u7528\u7a0b\u5e8f\u7684 WebGL\u3002</p> <p>\u6211\u5728\u672c\u4e66\u4e2d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 OpenGL 1.1 \u7684\u4e00\u4e2a\u5b50\u96c6\u4f5c\u4e3a\u6846\u67b6\u6765\u4ecb\u7ecd\u4e09\u7ef4\u56fe\u5f62\u7684\u57fa\u672c\u6982\u5ff5\u3002\u7136\u540e\u6211\u5c06\u7ee7\u7eed\u4ecb\u7ecd WebGL\uff0c\u8fd9\u662f\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684 OpenGL \u7248\u672c\u3002\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86WebGPU\u3002\u867d\u7136 OpenGL \u6784\u6210\u4e86\u672c\u8bfe\u7a0b\u7684\u4e3b\u8981\u57fa\u7840\uff0c\u4f46\u771f\u6b63\u7684\u91cd\u70b9\u662f\u51e0\u4f55\u5efa\u6a21\u548c\u53d8\u6362\u7b49\u57fa\u672c\u6982\u5ff5\uff1b\u5206\u5c42\u5efa\u6a21\u548c\u573a\u666f\u56fe\uff1b\u989c\u8272\u3001\u706f\u5149\u548c\u7eb9\u7406\uff1b\u548c\u52a8\u753b\u3002\u6211\u4ecd\u7136\u76f8\u4fe1 OpenGL 1.1 \u5f88\u597d\u5730\u4ecb\u7ecd\u4e86\u8fd9\u79cd\u6750\u8d28\u3002</p> <p>\u7b2c 1 \u7ae0\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u7b80\u77ed\u6982\u8ff0\u3002\u5b83\u4ecb\u7ecd\u4e86\u8bb8\u591a\u6982\u5ff5\uff0c\u672c\u4e66\u7684\u5176\u4f59\u90e8\u5206\u5c06\u66f4\u8be6\u7ec6\u5730\u4ecb\u7ecd\u8fd9\u4e9b\u6982\u5ff5\u3002</p> <p>\u7b2c 2 \u7ae0\u4ecb\u7ecd\u4e86 Java\u3001JavaScript \u548c SVG \u4e2d\u7684\u4e8c\u7ef4\u56fe\u5f62\uff0c\u91cd\u70b9\u4ecb\u7ecd\u4e86\u8bf8\u5982\u8f6c\u6362\u548c\u573a\u666f\u56fe\u7b49\u53ef\u6269\u5c55\u5230\u4e09\u7ef4\u7684\u6982\u5ff5\u3002</p> <p>\u7b2c 3 \u7ae0\u548c\u7b2c4 \u7ae0\u4ecb\u7ecd\u4e86 OpenGL 1.1\u3002\u867d\u7136\u6309\u7167\u4eca\u5929\u7684\u6807\u51c6\u6765\u770b OpenGL 1.1 \u76f8\u5f53\u539f\u59cb\uff0c\u4f46\u5b83\u5305\u542b\u7684\u8bb8\u591a\u57fa\u672c\u529f\u80fd\u4ecd\u7136\u662f 3D \u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u57fa\u7840\u3002\u4ec5\u6db5\u76d6\u90e8\u5206 API\u3002</p> <p>\u7b2c 5 \u7ae0\u4ecb\u7ecd\u4e86Three.js\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528 JavaScript \u8fdb\u884c Web \u56fe\u5f62\u7684\u9ad8\u7ea7\u9762\u5411\u5bf9\u8c61 3D \u56fe\u5f62 API\u3002\u672c\u7ae0\u5c55\u793a\u4e86\u5982\u4f55\u5728\u66f4\u9ad8\u7ea7\u522b\u7684\u63a5\u53e3\u4e2d\u4f7f\u7528\u57fa\u672c\u6982\u5ff5\u3002</p> <p>\u7b2c 6 \u7ae0\u548c\u7b2c7 \u7ae0\u4ecb\u7ecd\u4e86 WebGL\uff0c\u5b83\u662f\u7528\u4e8e Web \u56fe\u5f62\u7684 OpenGL \u7684\u73b0\u4ee3\u7248\u672c\u3002 WebGL \u975e\u5e38\u5e95\u5c42\uff0c\u5b83\u9700\u8981\u7a0b\u5e8f\u5458\u7f16\u5199\u201c\u7740\u8272\u5668\u7a0b\u5e8f\u201d\u6765\u5b9e\u73b0 OpenGL 1.1 \u4e2d\u5185\u7f6e\u7684\u8bb8\u591a\u529f\u80fd\u3002\u67e5\u770b\u5b9e\u73b0\u662f\u4e00\u4e2a\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u8ba1\u7b97\u673a\u5982\u4f55\u5b9e\u9645\u5236\u4f5c 3D \u56fe\u50cf\u7684\u673a\u4f1a\u3002</p> <p>\u7b2c 8 \u7ae0\u975e\u5e38\u7b80\u8981\u5730\u4ecb\u7ecd\u4e86 OpenGL \u4e2d\u65e0\u6cd5\u5b9e\u73b0\u7684\u4e00\u4e9b\u9ad8\u7ea7\u6280\u672f\u3002</p> <p>\u7b2c 9 \u7ae0\u4ecb\u7ecd\u4e86 WebGPU\uff0c\u8fd9\u662f\u6700\u65b0\u7684 Web \u56fe\u5f62 API \u3002</p> <p>\u9644\u5f55 A\u7b80\u8981\u4ecb\u7ecd\u4e86\u672c\u4e66\u4e2d\u4f7f\u7528\u7684\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\uff1aJava\u3001C \u548c JavaScript\u3002 \u9644\u5f55 B\u65e8\u5728\u8ba9\u8bfb\u8005\u5f00\u59cb\u4e86\u89e3 Blender\uff08\u4e00\u4e2a\u590d\u6742\u7684 3D \u5efa\u6a21\u7a0b\u5e8f\uff09\u7684\u6700\u57fa\u672c\u7528\u6cd5\u3002\u6211\u53d1\u73b0\u5411\u5b66\u751f\u4ecb\u7ecd Blender \u662f\u5e2e\u52a9\u4ed6\u4eec\u53d1\u5c55\u4e09\u7ef4\u76f4\u89c9\u7684\u597d\u65b9\u6cd5\u3002 \u9644\u5f55 C\u5305\u542b\u5bf9\u4e24\u4e2a 2D \u56fe\u5f62\u7a0b\u5e8f Gimp \u548c Inkscape \u7684\u66f4\u7b80\u8981\u4ecb\u7ecd\u3002</p> <p>\u65e7\u7248\u672c\u4ecd\u7136\u53ef\u7528\uff1a</p> <ul> <li>1.0\u7248\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.0/</li> <li>\u7248\u672c 1.1\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.1/</li> <li>\u7248\u672c 1.2\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.2/</li> <li>\u7248\u672c 1.3\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.3/</li> <li>\u6240\u6709\u7248\u672c\u7684\u4e0b\u8f7d\u90fd\u53ef\u4ee5\u5728 https://math.hws.edu/eck/cs424/downloads/ \u627e\u5230\u3002</li> </ul> <p>\u672c\u4e66\u7684 PDF \u548c\u7f51\u7ad9\u7248\u672c\u662f\u6839\u636e\u4e00\u7ec4\u5e38\u89c1\u6765\u6e90\u6784\u5efa\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u5728 GitHub \u4e0a\u514b\u9686\u4ee5\u4e0b git \u5b58\u50a8\u5e93\u6765\u83b7\u53d6\u6e90\u4ee3\u7801\uff1a https://github.com/davidjeck/graphicsbook</p> <p>\u8fd9\u4e9b\u6765\u6e90\u6700\u521d\u5e76\u4e0d\u6253\u7b97\u51fa\u7248\uff0c\u5e76\u4e14\u5bf9\u53ef\u80fd\u6709\u5174\u8da3\u7814\u7a76\u5b83\u4eec\u7684\u4eba\u6ca1\u6709\u4efb\u4f55\u4fdd\u8bc1\u548c\u975e\u5e38\u6709\u9650\u7684\u652f\u6301\u3002</p> <p>\u6e90\u5305\u62ec\u56fe\u50cf\u3001HTML \u6587\u4ef6\u3001Java \u548c C \u6e90\u4ee3\u7801\u3001XML \u6587\u4ef6\u3001XSLT \u8f6c\u6362\u3001bash shell \u811a\u672c\u548c LaTeX \u5b8f\u3002\u4f7f\u7528\u6e90\u4ee3\u7801\u9700\u8981\u989d\u5916\u7684\u8f6f\u4ef6\uff08LaTeX\u3001Xalan-J\u3001Java \u548c bash shell\uff09\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u81ea\u8ff0\u6587\u4ef6\u3002</p> <p>David J. Eck\uff0c \u970d\u5df4\u7279\u548c\u5a01\u5ec9\u53f2\u5bc6\u65af\u5b66\u9662</p> <p>\u6570\u5b66\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u7cfb\u540d\u8a89\u6559\u6388 300 Pulteney StreetGeneva , New York 14456, USA</p> <p>\u7535\u5b50\u90ae\u4ef6\uff1aeck@hws.edu</p> <p>WWW\uff1ahttp://math.hws.edu/eck/ , 2023</p>"},{"location":"cn/a1/","title":"\u9644\u5f55A - \u7f16\u7a0b\u8bed\u8a00","text":"<p>\u672c\u9644\u5f55\u5305\u542b\u5bf9\u6559\u79d1\u4e66\u4e2d\u4f7f\u7528\u7684\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u7b80\u8981\u4ecb\u7ecd\uff1aJava\u3001C \u548c JavaScript\u3002\u5728\u9605\u8bfb\u672c\u6559\u79d1\u4e66\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u81f3\u5c11\u719f\u6089\u4e09\u79cd\u8bed\u8a00\u4e2d\u7684\u4e00\u79cd\u3002\u8fd9\u4e09\u79cd\u8bed\u8a00\u6709\u4e00\u4e9b\u5171\u540c\u70b9\uff0c\u56e0\u6b64\u4e86\u89e3\u4e00\u79cd\u8bed\u8a00\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5b66\u4e60\u5176\u4ed6\u8bed\u8a00\u3002\u60a8\u8fd8\u5e94\u8be5\u81f3\u5c11\u5bf9\u7c7b\u3001\u5bf9\u8c61\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u719f\u6089\u3002</p> <p>\u9644\u5f55\u65e8\u5728\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528\u60a8\u8fd8\u4e0d\u77e5\u9053\u7684\u8bed\u8a00\u3002\u4ec5\u7ed9\u51fa\u4e86\u6bcf\u79cd\u8bed\u8a00\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\uff0c\u4f46\u5e0c\u671b\u8db3\u4ee5\u8ba9\u60a8\u7406\u89e3\u4e66\u4e2d\u7684\u793a\u4f8b\u5e76\u7f16\u5199\u4e00\u4e9b\u4f7f\u7528\u6240\u6db5\u76d6\u7684\u56fe\u5f62\u6280\u672f\u7684\u7a0b\u5e8f\u3002\u60a8\u81f3\u5c11\u5e94\u8be5\u80fd\u591f\u4f7f\u7528\u672c\u6559\u79d1\u4e66\u9644\u5e26\u7684\u793a\u4f8b\u7a0b\u5e8f\u3002</p> <p>Java \u4ec5\u5bf9\u4e8e\u7b2c 2.5 \u8282\u662f\u5f3a\u5236\u6027\u7684\u3002\u7b2c3\u7ae0\u548c\u7b2c4\u7ae0\u4e2d\u5173\u4e8eOpenGL  1.1\u7684\u6750\u6599 \u53ef\u4ee5\u4f7f\u7528Java\u6216C\u3002\u6216\u8005\uff0c\u5982\u679c\u60a8\u66f4\u559c\u6b22 JavaScript\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u7684 glsim.js\uff08\u7b2c 3.6.3 \u5c0f\u8282\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u6a21\u62df OpenGL 1.1 \u5927\u90e8\u5206\u7684 JavaScript \u5e93\u3002\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u81f3\u5c11\u9700\u8981\u5bf9 C \u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u624d\u80fd\u8ddf\u4e0a\u8ba8\u8bba\u3002WebGL\u4f7f\u7528\u7684\u7740\u8272\u5668\u7f16\u7a0b\u8bed\u8a00\u57fa\u4e8e C\uff0c\u56e0\u6b64\u4e00\u4e9b C \u77e5\u8bc6\u4e5f\u5f88\u6709\u7528\u3002 \uff08\u4f46\u662f\uff0c\u4e3a\u4e86\u7f16\u5199 WebGL \u7740\u8272\u5668\uff0c\u60a8\u4e0d\u9700\u8981\u4e86\u89e3 C \u6700\u4ee4\u4eba\u56f0\u60d1\u7684\u65b9\u9762\u4e4b\u4e00\uff0c\u5373\u5b83\u5982\u4f55\u4f7f\u7528\u6307\u9488\u7684\u7ec6\u8282\uff09\u3002 JavaScript \u5bf9\u4e8eWebGL\u7f16\u7a0b\uff08\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\uff09 \u3001\u4f7f\u7528Three.js\u7f16\u7a0b\uff08\u7b2c 5 \u7ae0\uff09\u548c WebGPU\uff08\u7b2c 9 \u7ae0\uff09\u81f3\u5173\u91cd\u8981\u3002\u5b83\u4e5f\u7528\u4e8e \u7b2c 2.6 \u8282\u4e2d\u7684HTML \u753b\u5e03\u56fe\u5f62\u3002</p> <p>\u9644\u5f55A\u7684\u5185\u5bb9\uff1a</p> <ul> <li>\u7b2c 1 \u90e8\u5206\uff1aJava \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 2 \u90e8\u5206\uff1aC \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 3 \u8282\uff1aJavaScript \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 4 \u8282\uff1aJavaScript Promise \u548c\u5f02\u6b65\u51fd\u6570</li> </ul>"},{"location":"cn/c1/","title":"\u7b2c\u4e00\u7ae0 \u7b80\u4ecb","text":"<p>\u672f\u8bed \u201c\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66(computer graphics)\u201d \u4e00\u8bcd\u6307\u6d89\u53ca\u5728\u8ba1\u7b97\u673a\u4e0a\u521b\u5efa\u6216\u64cd\u7eb5\u56fe\u50cf\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u5305\u62ec\u52a8\u753b\u56fe\u50cf\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e7f\u6cdb\u7684\u9886\u57df\uff0c\u53d8\u5316\u548c\u8fdb\u6b65\u4f3c\u4e4e\u4ee5\u4ee4\u4eba\u773c\u82b1\u7f2d\u4e71\u7684\u901f\u5ea6\u51fa\u73b0\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u5f88\u96be\u77e5\u9053\u4ece\u54ea\u91cc\u5f00\u59cb\u3002\u7136\u800c\uff0c\u6709\u4e00\u4e9b\u57fa\u672c\u7406\u5ff5\u6784\u6210\u4e86\u5927\u591a\u6570\u8ba1\u7b97\u673a\u56fe\u5f62\u5e94\u7528\u7684\u57fa\u7840\u3002\u672c\u4e66\u8bd5\u56fe\u6db5\u76d6\u8fd9\u4e9b\u57fa\u7840\u7406\u5ff5\uff0c\u6216\u8005\u81f3\u5c11\u5c3d\u53ef\u80fd\u591a\u5730\u6db5\u76d6\u5b83\u4eec\uff0c\u4ee5\u9002\u5e94\u4e00\u4e2a\u5b66\u671f\u7684\u5927\u5b66\u6c34\u5e73\u8bfe\u7a0b\u3002\u867d\u7136\u5728\u7b2c\u4e00\u95e8\u8bfe\u7a0b\u4e2d\u4e0d\u53ef\u80fd\u8986\u76d6\u6574\u4e2a\u9886\u57df\uff0c\u751a\u81f3\u5176\u4e2d\u7684\u5927\u90e8\u5206\u5185\u5bb9\uff0c\u4f46\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002</p> <p>\u672c\u7b80\u77ed\u7ae0\u8282\u63d0\u4f9b\u4e86\u5bf9\u672c\u4e66\u5176\u4f59\u90e8\u5206\u6db5\u76d6\u5185\u5bb9\u7684\u6982\u8ff0\u548c\u4ecb\u7ecd\uff0c\u4f46\u6ca1\u6709\u8fc7\u591a\u7ec6\u8282\u3002</p> <p>\u7b2c\u4e00\u7ae0\u5185\u5bb9\uff1a</p> <ul> <li>\u7b2c 1 \u8282\uff1a\u7ed8\u753b\u4e0e\u7ed8\u56fe</li> <li>\u7b2c 2 \u8282\uff1a\u4e09\u7ef4(3D)\u56fe\u5f62\u7684\u8981\u7d20</li> <li>\u7b2c 3 \u8282\uff1a\u786c\u4ef6\u4e0e\u8f6f\u4ef6</li> </ul>"},{"location":"cn/c1/s1/","title":"\u7b2c 1 \u8282 \u7ed8\u753b\u4e0e\u7ed8\u56fe","text":"<p>Painting and Drawing</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u4e66\u7684\u4e3b\u8981\u91cd\u70b9\u662f\u4e09\u7ef4\uff083D\uff09\u56fe\u5f62\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u662f\u4e3a\u4e86\u4ea7\u751f\u573a\u666f\u7684\u4e09\u7ef4\u6a21\u578b\u3002\u4f46\u6700\u7ec8\uff0c\u5728\u51e0\u4e4e\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u9879\u76ee\u7684\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u50cf\u3002\u5f53\u7136\uff0c\u76f4\u63a5\u5236\u4f5c\u548c\u64cd\u7eb5\u4e8c\u7ef4\u56fe\u50cf\u4e5f\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u8bfe\u9898\u3002\u6b64\u5916\uff0c\u8bb8\u591a\u601d\u60f3\u4ece\u4e8c\u7ef4\u5230\u4e09\u7ef4\u90fd\u662f\u901a\u7528\u7684\u3002\u56e0\u6b64\uff0c\u4ece\u4e8c\u7ef4\u56fe\u5f62\u5f00\u59cb\u662f\u6709\u610f\u4e49\u7684\u3002</p> <p>\u5728\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u5448\u73b0\u7684\u56fe\u50cf\u7531\u50cf\u7d20\u7ec4\u6210\u3002\u5c4f\u5e55\u7531\u50cf\u7d20(pixels)\u7684\u77e9\u5f62\u7f51\u683c\u7ec4\u6210\uff0c \u6392\u5217\u6210\u884c\u548c\u5217\u3002\u50cf\u7d20\u8db3\u591f\u5c0f\uff0c\u4ee5\u81f3\u4e8e\u5b83\u4eec\u4e0d\u5bb9\u6613\u88ab\u5355\u72ec\u770b\u5230\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u8bb8\u591a\u975e\u5e38\u9ad8\u5206\u8fa8\u7387\u7684\u663e\u793a\u5668\uff0c\u5b83\u4eec\u57fa\u672c\u4e0a\u53d8\u5f97\u770b\u4e0d\u89c1\u4e86\u3002\u5728\u7ed9\u5b9a\u65f6\u95f4\uff0c\u6bcf\u4e2a\u50cf\u7d20\u53ea\u80fd\u663e\u793a\u4e00\u79cd\u989c\u8272\u3002\u5982\u4eca\uff0c\u5927\u591a\u6570\u5c4f\u5e55\u4f7f\u752824\u4f4d\u989c\u8272\uff0c\u5176\u4e2d\u989c\u8272\u53ef\u4ee5\u7531\u4e09\u4e2a8\u4f4d\u6570\u5b57\u6307\u5b9a\uff0c\u5206\u522b\u7ed9\u51fa\u989c\u8272\u4e2d\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u7684\u7ea7\u522b\u3002\u5c4f\u5e55\u4e0a\u53ef\u4ee5\u663e\u793a\u7684\u4efb\u4f55\u989c\u8272\u90fd\u7531\u8fd9\u4e09\u79cd\u201c\u4e3b\u201d\u989c\u8272\u7684\u67d0\u79cd\u7ec4\u5408\u6784\u6210\u3002\u8fd8\u6709\u5176\u4ed6\u683c\u5f0f\uff0c\u4f8b\u5982\u7070\u5ea6(grayscale)\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u90fd\u662f\u4e00\u4e9b\u7070\u5ea6\u7684\u9634\u5f71\uff0c\u5e76\u4e14\u50cf\u7d20\u989c\u8272\u7531\u4e00\u4e2a\u6570\u5b57\u7ed9\u51fa\uff0c\u8be5\u6570\u5b57\u6307\u5b9a\u4e86\u9ed1\u5230\u767d\u6bd4\u4f8b\u4e0a\u7684\u7070\u5ea6\u7ea7\u522b\u3002\u901a\u5e38\u4f7f\u7528256\u4e2a\u7070\u5ea6\u7ea7\u522b\u3002\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u4f7f\u7528\u7d22\u5f15\u8272(indexed color)\uff0c\u5176\u4e2d\u53ea\u80fd\u663e\u793a\u4e00\u5c0f\u90e8\u5206\u989c\u8272\uff0c\u901a\u5e38\u662f16\u6216256\u79cd\u3002\u5bf9\u4e8e\u7d22\u5f15\u8272\u663e\u793a\u5668\uff0c\u6709\u4e00\u4e2a\u53ef\u80fd\u989c\u8272\u7684\u7f16\u53f7\u5217\u8868\uff0c\u50cf\u7d20\u7684\u989c\u8272\u7531\u4e00\u4e2a\u6574\u6570\u6307\u5b9a\uff0c\u8be5\u6574\u6570\u7ed9\u51fa\u4e86\u989c\u8272\u5728\u5217\u8868\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <p>\u65e0\u8bba\u5982\u4f55\uff0c\u5c4f\u5e55\u4e0a\u6240\u6709\u50cf\u7d20\u7684\u989c\u8272\u503c\u90fd\u5b58\u50a8\u5728\u4e00\u4e2a\u79f0\u4e3a\u5e27\u7f13\u51b2\u533a(frame buffer)\u7684\u5927\u578b\u5185\u5b58\u5757\u4e2d\u3002\u66f4\u6539\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u9700\u8981\u66f4\u6539\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u3002\u5c4f\u5e55\u6bcf\u79d2\u91cd\u7ed8\u8bb8\u591a\u6b21\uff0c\u56e0\u6b64\u51e0\u4e4e\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u66f4\u6539\u540e\uff0c\u5c4f\u5e55\u4e0a\u50cf\u7d20\u7684\u989c\u8272\u5c31\u4f1a\u66f4\u6539\u4ee5\u5339\u914d\uff0c\u5e76\u4e14\u663e\u793a\u7684\u56fe\u50cf\u4f1a\u66f4\u6539\u3002</p> <p>\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u662f\u5149\u6805\u56fe\u5f62(raster graphics)\u7684\u57fa\u672c\u6a21\u578b\u3002\u672f\u8bed\u201c\u5149\u6805\u201d\u5728\u6280\u672f\u4e0a\u6307\u7684\u662f\u65e7\u7684\u771f\u7a7a\u7ba1\u8ba1\u7b97\u673a\u76d1\u89c6\u5668\u4e0a\u4f7f\u7528\u7684\u673a\u5236\uff1a\u7535\u5b50\u675f\u5c06\u6cbf\u7740\u50cf\u7d20\u884c\u79fb\u52a8\uff0c\u4f7f\u5b83\u4eec\u53d1\u5149\u3002\u7535\u5b50\u675f\u662f\u901a\u8fc7\u5f3a\u5927\u7684\u78c1\u94c1\u5c06\u5176\u504f\u8f6c\u4ee5\u6a2a\u7a7f\u5c4f\u5e55\u7684\uff0c\u675f\u8d8a\u5f3a\uff0c\u50cf\u7d20\u7684\u53d1\u5149\u5c31\u8d8a\u4eae\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8c03\u5236\u7535\u5b50\u675f\u7684\u5f3a\u5ea6\u6765\u63a7\u5236\u50cf\u7d20\u7684\u4eae\u5ea6\u3002\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u7528\u4e8e\u786e\u5b9a\u7535\u5b50\u675f\u7684\u5f3a\u5ea6\u3002\uff08\u5bf9\u4e8e\u5f69\u8272\u5c4f\u5e55\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u4e00\u4e2a\u7ea2\u70b9\u3001\u4e00\u4e2a\u7eff\u70b9\u548c\u4e00\u4e2a\u84dd\u70b9\uff0c\u7531\u675f\u5206\u522b\u7167\u4eae\u3002\uff09</p> <p>\u73b0\u4ee3\u7684\u5e73\u677f\u8ba1\u7b97\u673a\u76d1\u89c6\u5668\u4e0d\u662f\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u5149\u6805\u3002\u6ca1\u6709\u79fb\u52a8\u7684\u7535\u5b50\u675f\u3002\u63a7\u5236\u50cf\u7d20\u989c\u8272\u7684\u673a\u5236\u56e0\u5c4f\u5e55\u7c7b\u578b\u800c\u5f02\u3002\u4f46\u5c4f\u5e55\u4ecd\u7136\u7531\u50cf\u7d20\u7ec4\u6210\uff0c\u5e76\u4e14\u6240\u6709\u50cf\u7d20\u7684\u989c\u8272\u503c\u4ecd\u7136\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u3002\u56fe\u50cf\u7531\u50cf\u7d20\u7f51\u683c\u7ec4\u6210\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u6570\u5b57\u989c\u8272\u503c\uff0c\u8fd9\u5c31\u662f\u5149\u6805\u56fe\u5f62\u7684\u6982\u5ff5\u3002</p> <p>The main focus of this book is three-dimensional (3D) graphics, where most of the work goes into producing a 3D model of a scene. But ultimately, in almost all cases, the end result of a computer graphics project is a two-dimensional image. And of course, the direct production and manipulation of 2D images is an important topic in its own right. Furthermore, a lot of ideas carry over from two dimensions to three. So, it makes sense to start with graphics in 2D.</p> <p>An image that is presented on the computer screen is made up of pixels. The screen consists of a rectangular grid of pixels, arranged in rows and columns. The pixels are small enough that they are not easy to see individually. In fact, for many very high-resolution displays, they become essentially invisible. At a given time, each pixel can show only one color. Most screens these days use 24-bit color, where a color can be specified by three 8-bit numbers, giving the levels of red, green, and blue in the color. Any color that can be shown on the screen is made up of some combination of these three \"primary\" colors. Other formats are possible, such as grayscale, where each pixel is some shade of gray and the pixel color is given by one number that specifies the level of gray on a black-to-white scale. Typically, 256 shades of gray are used. Early computer screens used indexed color, where only a small set of colors, usually 16 or 256, could be displayed. For an indexed color display, there is a numbered list of possible colors, and the color of a pixel is specified by an integer giving the position of the color in the list.</p> <p>In any case, the color values for all the pixels on the screen are stored in a large block of memory known as a frame buffer. Changing the image on the screen requires changing color values that are stored in the frame buffer. The screen is redrawn many times per second, so that almost immediately after the color values are changed in the frame buffer, the colors of the pixels on the screen will be changed to match, and the displayed image will change.</p> <p>A computer screen used in this way is the basic model of raster graphics. The term \"raster\" technically refers to the mechanism used on older vacuum tube computer monitors: An electron beam would move along the rows of pixels, making them glow. The beam was moved across the screen by powerful magnets that would deflect the path of the electrons. The stronger the beam, the brighter the glow of the pixel, so the brightness of the pixels could be controlled by modulating the intensity of the electron beam. The color values stored in the frame buffer were used to determine the intensity of the electron beam. (For a color screen, each pixel had a red dot, a green dot, and a blue dot, which were separately illuminated by the beam.)</p> <p>A modern flat-screen computer monitor is not a raster in the same sense. There is no moving electron beam. The mechanism that controls the colors of the pixels is different for different types of screen. But the screen is still made up of pixels, and the color values for all the pixels are still stored in a frame buffer. The idea of an image consisting of a grid of pixels, with numerical color values for each pixel, defines raster graphics.</p> \u4e2d\u6587\u82f1\u6587 <p>\u867d\u7136\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u662f\u4f7f\u7528\u50cf\u7d20\u8868\u793a\u7684\uff0c\u4f46\u6307\u5b9a\u5355\u4e2a\u50cf\u7d20\u989c\u8272\u5e76\u4e0d\u603b\u662f\u521b\u5efa\u56fe\u50cf\u7684\u6700\u4f73\u65b9\u5f0f\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u6307\u5b9a\u56fe\u50cf\u5305\u542b\u7684\u57fa\u672c\u51e0\u4f55\u5bf9\u8c61\uff0c\u4f8b\u5982\u7ebf\u6761\u3001\u5706\u5f62\u3001\u4e09\u89d2\u5f62\u548c\u77e9\u5f62\u7b49\u5f62\u72b6\u3002\u8fd9\u5c31\u662f\u5b9a\u4e49\u77e2\u91cf\u56fe\u5f62(vector graphics)\u7684\u7406\u5ff5\uff1a\u5c06\u56fe\u50cf\u8868\u793a\u4e3a\u5176\u5305\u542b\u7684\u51e0\u4f55\u5f62\u72b6\u7684\u5217\u8868\u3002\u4e3a\u4e86\u589e\u52a0\u8da3\u5473\u6027\uff0c\u8fd9\u4e9b\u5f62\u72b6\u53ef\u4ee5\u5177\u6709\u5c5e\u6027(attributes)\uff0c\u4f8b\u5982\u7ebf\u6761\u7684\u7c97\u7ec6\u6216\u586b\u5145\u77e9\u5f62\u7684\u989c\u8272\u3002\u5f53\u7136\uff0c\u5e76\u975e\u6bcf\u4e2a\u56fe\u50cf\u90fd\u53ef\u4ee5\u7531\u7b80\u5355\u7684\u51e0\u4f55\u5f62\u72b6\u7ec4\u6210\u3002\u5bf9\u4e8e\u7f8e\u4e3d\u7684\u65e5\u843d\u7167\u7247\uff08\u6216\u5927\u591a\u6570\u5176\u4ed6\u6444\u5f71\u56fe\u50cf\uff09\uff0c\u8fd9\u79cd\u65b9\u6cd5\u663e\u7136\u4e0d\u9002\u7528\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u8bb8\u591a\u7c7b\u578b\u7684\u56fe\u50cf\uff0c\u4f8b\u5982\u5efa\u7b51\u84dd\u56fe\u548c\u79d1\u5b66\u63d2\u56fe\uff0c\u5b83\u6548\u679c\u5f88\u597d\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u5728\u8ba1\u7b97\u673a\u53d1\u5c55\u7684\u65e9\u671f\u5386\u53f2\u4e2d\uff0c\u77e2\u91cf\u56fe\u5f62\u751a\u81f3\u76f4\u63a5\u7528\u4e8e\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u3002\u5f53\u7b2c\u4e00\u6279\u56fe\u5f62\u8ba1\u7b97\u673a\u663e\u793a\u5668\u95ee\u4e16\u65f6\uff0c\u5149\u6805\u663e\u793a\u5668\u7684\u901f\u5ea6\u592a\u6162\u3001\u4ef7\u683c\u592a\u9ad8\uff0c\u4e0d\u5207\u5b9e\u9645\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u53ef\u4ee5\u4ee5\u53e6\u4e00\u79cd\u65b9\u5f0f\u4f7f\u7528\u771f\u7a7a\u7ba1\u6280\u672f\uff1a\u7535\u5b50\u675f\u53ef\u4ee5\u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u4e00\u6761\u7ebf\uff0c\u53ea\u9700\u6cbf\u7740\u8be5\u7ebf\u79fb\u52a8\u675f\u3002\u77e2\u91cf\u56fe\u5f62\u663e\u793a\u5668\u5c06\u5b58\u50a8\u4e00\u4e2a\u5e94\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u7684\u7ebf\u6bb5\u663e\u793a\u5217\u8868(display list)\u3002\u7531\u4e8e\u5c4f\u5e55\u4e0a\u7684\u70b9\u53ea\u4f1a\u5728\u88ab\u7535\u5b50\u675f\u7167\u5c04\u540e\u77ed\u6682\u53d1\u5149\uff0c\u56fe\u5f62\u663e\u793a\u5668\u4f1a\u4e00\u904d\u53c8\u4e00\u904d\u5730\u904d\u5386\u663e\u793a\u5217\u8868\uff0c\u4e0d\u65ad\u5730\u91cd\u7ed8\u5217\u8868\u4e2d\u7684\u6240\u6709\u7ebf\u6761\u3002\u8981\u66f4\u6539\u56fe\u50cf\uff0c\u53ea\u9700\u8981\u66f4\u6539\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u5982\u679c\u663e\u793a\u5217\u8868\u53d8\u5f97\u592a\u957f\uff0c\u56fe\u50cf\u5c31\u4f1a\u5f00\u59cb\u95ea\u70c1\uff0c\u56e0\u4e3a\u4e00\u6761\u7ebf\u5728\u4e0b\u6b21\u91cd\u65b0\u7ed8\u5236\u4e4b\u524d\u4f1a\u6709\u673a\u4f1a\u53ef\u89c1\u5730\u6de1\u53bb\u3002</p> <p>\u4f46\u8fd9\u662f\u91cd\u70b9\uff1a\u5bf9\u4e8e\u53ef\u4ee5\u6307\u5b9a\u4e3a\u76f8\u5bf9\u8f83\u5c11\u6570\u91cf\u7684\u51e0\u4f55\u5f62\u72b6\u7684\u56fe\u50cf\u6765\u8bf4\uff0c\u4f7f\u7528\u77e2\u91cf\u8868\u793a\u6765\u8868\u793a\u56fe\u50cf\u6240\u9700\u7684\u4fe1\u606f\u91cf\u8981\u6bd4\u4f7f\u7528\u5149\u6805\u8868\u793a\u5c0f\u5f97\u591a\u3002\u8003\u8651\u4e00\u4e2a\u7531\u4e00\u5343\u6761\u7ebf\u6bb5\u7ec4\u6210\u7684\u56fe\u50cf\u3002\u5bf9\u4e8e\u56fe\u50cf\u7684\u77e2\u91cf\u8868\u793a\uff0c\u60a8\u53ea\u9700\u8981\u5b58\u50a8\u4e24\u5343\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5373\u7ebf\u6bb5\u7684\u7aef\u70b9\u3002\u8fd9\u53ea\u9700\u8981\u51e0\u5343\u5b57\u8282\u7684\u5185\u5b58\u3002\u8981\u5c06\u56fe\u50cf\u5b58\u50a8\u5728\u7528\u4e8e\u5149\u6805\u663e\u793a\u7684\u5e27\u7f13\u51b2\u533a\u4e2d\uff0c\u5c06\u9700\u8981\u66f4\u591a\u7684\u5185\u5b58\u3002\u540c\u6837\uff0c\u77e2\u91cf\u663e\u793a\u53ef\u4ee5\u6bd4\u5149\u6805\u663e\u793a\u66f4\u5feb\u5730\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u7ebf\u6761\uff0c\u540e\u8005\u5c06\u76f8\u540c\u7684\u56fe\u50cf\u4ece\u5e27\u7f13\u51b2\u533a\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\uff08\u7136\u800c\uff0c\u4e00\u65e6\u5149\u6805\u663e\u793a\u5668\u53d8\u5f97\u5feb\u901f\u4e14\u4ef7\u683c\u5408\u7406\uff0c\u5b83\u4eec\u5f88\u5feb\u5c31\u4f1a\u53d6\u4ee3\u77e2\u91cf\u663e\u793a\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u80fd\u591f\u76f8\u5f53\u597d\u5730\u663e\u793a\u6240\u6709\u7c7b\u578b\u7684\u56fe\u50cf\u3002\uff09</p> <p>Although images on the computer screen are represented using pixels, specifying individual pixel colors is not always the best way to create an image. Another way is to specify the basic geometric objects that it contains, shapes such as lines, circles, triangles, and rectangles. This is the idea that defines vector graphics: Represent an image as a list of the geometric shapes that it contains. To make things more interesting, the shapes can have attributes, such as the thickness of a line or the color that fills a rectangle. Of course, not every image can be composed from simple geometric shapes. This approach certainly wouldn't work for a picture of a beautiful sunset (or for most any other photographic image). However, it works well for many types of images, such as architectural blueprints and scientific illustrations.</p> <p>In fact, early in the history of computing, vector graphics was even used directly on computer screens. When the first graphical computer displays were developed, raster displays were too slow and expensive to be practical. Fortunately, it was possible to use vacuum tube technology in another way: The electron beam could be made to directly draw a line on the screen, simply by sweeping the beam along that line. A vector graphics display would store a display list of lines that should appear on the screen. Since a point on the screen would glow only very briefly after being illuminated by the electron beam, the graphics display would go through the display list over and over, continually redrawing all the lines on the list. To change the image, it would only be necessary to change the contents of the display list. Of course, if the display list became too long, the image would start to flicker because a line would have a chance to visibly fade before its next turn to be redrawn.</p> <p>But here is the point: For an image that can be specified as a reasonably small number of geometric shapes, the amount of information needed to represent the image is much smaller using a vector representation than using a raster representation. Consider an image made up of one thousand line segments. For a vector representation of the image, you only need to store the coordinates of two thousand points, the endpoints of the lines. This would take up only a few kilobytes of memory. To store the image in a frame buffer for a raster display would require much more memory. Similarly, a vector display could draw the lines on the screen more quickly than a raster display could copy the same image from the frame buffer to the screen. (As soon as raster displays became fast and inexpensive, however, they quickly displaced vector displays because of their ability to display all types of images reasonably well.)</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u6805\u56fe\u5f62\u548c\u77e2\u91cf\u56fe\u5f62\u4e4b\u95f4\u7684\u754c\u9650\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u591a\u4e2a\u9886\u57df\u4e2d\u4ecd\u7136\u5b58\u5728\u3002\u4f8b\u5982\uff0c\u5728\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u56fe\u50cf\u7684\u4e24\u7c7b\u7a0b\u5e8f\u4e4b\u95f4\u5b58\u5728\u660e\u663e\u7684\u533a\u522b\uff1a\u7ed8\u753b\u7a0b\u5e8f(painting programs)\u548c\u7ed8\u56fe\u7a0b\u5e8f(drawing programs)\u3002\u5728\u7ed8\u753b\u7a0b\u5e8f\u4e2d\uff0c\u56fe\u50cf\u8868\u793a\u4e3a\u50cf\u7d20\u7f51\u683c\uff0c\u5e76\u4e14\u7528\u6237\u901a\u8fc7\u4e3a\u50cf\u7d20\u5206\u914d\u989c\u8272\u6765\u521b\u5efa\u56fe\u50cf\u3002\u8fd9\u53ef\u80fd\u901a\u8fc7\u4f7f\u7528\u50cf\u753b\u5bb6\u7684\u753b\u7b14\u90a3\u6837\u7684\u201c\u7ed8\u56fe\u5de5\u5177\u201d\uff0c\u751a\u81f3\u901a\u8fc7\u7ed8\u5236\u7ebf\u6761\u6216\u77e9\u5f62\u7b49\u51e0\u4f55\u5f62\u72b6\u7684\u5de5\u5177\u6765\u5b8c\u6210\u3002\u4f46\u7ed8\u753b\u7a0b\u5e8f\u7684\u91cd\u70b9\u662f\u5bf9\u5355\u4e2a\u50cf\u7d20\u7740\u8272\uff0c\u800c\u53ea\u4fdd\u5b58\u50cf\u7d20\u7684\u989c\u8272\u3002\u4e3a\u4e86\u4f7f\u8fd9\u4e00\u70b9\u66f4\u6e05\u695a\uff0c\u5047\u8bbe\u60a8\u4f7f\u7528\u7ed8\u753b\u7a0b\u5e8f\u7ed8\u5236\u4e86\u4e00\u5e62\u623f\u5b50\uff0c\u7136\u540e\u5728\u623f\u5b50\u524d\u9762\u753b\u4e86\u4e00\u68f5\u6811\u3002\u5982\u679c\u60a8\u7136\u540e\u64e6\u9664\u4e86\u6811\uff0c\u60a8\u53ea\u4f1a\u770b\u5230\u4e00\u4e2a\u7a7a\u767d\u7684\u80cc\u666f\uff0c\u800c\u4e0d\u662f\u4e00\u680b\u623f\u5b50\u3002\u4e8b\u5b9e\u4e0a\uff0c\u56fe\u50cf\u4ece\u6765\u6ca1\u6709\u771f\u6b63\u5305\u542b\u201c\u623f\u5b50\u201d\u2014\u2014\u53ea\u662f\u72ec\u7acb\u7740\u8272\u7684\u50cf\u7d20\uff0c\u89c2\u770b\u8005\u53ef\u80fd\u4f1a\u5c06\u5176\u89c6\u4e3a\u7ec4\u6210\u623f\u5b50\u56fe\u7247\u7684\u90e8\u5206\u3002</p> <p>\u5728\u7ed8\u56fe\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6237\u901a\u8fc7\u6dfb\u52a0\u51e0\u4f55\u5f62\u72b6\u6765\u521b\u5efa\u56fe\u50cf\uff0c\u56fe\u50cf\u8868\u793a\u4e3a\u8fd9\u4e9b\u5f62\u72b6\u7684\u5217\u8868\u3002\u5982\u679c\u60a8\u5728\u56fe\u50cf\u4e2d\u653e\u7f6e\u4e86\u4e00\u4e2a\u623f\u5b50\u5f62\u72b6\uff08\u6216\u7ec4\u6210\u623f\u5b50\u7684\u5f62\u72b6\u96c6\u5408\uff09\uff0c\u7136\u540e\u5728\u623f\u5b50\u4e0a\u653e\u7f6e\u4e86\u4e00\u68f5\u6811\u5f62\u72b6\uff0c\u90a3\u4e48\u623f\u5b50\u4ecd\u7136\u5b58\u5728\uff0c\u56e0\u4e3a\u5b83\u5b58\u50a8\u5728\u56fe\u50cf\u5305\u542b\u7684\u5f62\u72b6\u5217\u8868\u4e2d\u3002\u5982\u679c\u5220\u9664\u4e86\u6811\uff0c\u623f\u5b50\u4ecd\u5c06\u5b58\u5728\u4e8e\u56fe\u50cf\u4e2d\uff0c\u5c31\u50cf\u5728\u6dfb\u52a0\u6811\u4e4b\u524d\u4e00\u6837\u3002\u6b64\u5916\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u9009\u62e9\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u5f62\u72b6\u5e76\u79fb\u52a8\u5b83\u6216\u6539\u53d8\u5176\u5927\u5c0f\uff0c\u56e0\u6b64\u7ed8\u56fe\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u5957\u4e30\u5bcc\u7684\u7f16\u8f91\u64cd\u4f5c\uff0c\u8fd9\u5728\u7ed8\u753b\u7a0b\u5e8f\u4e2d\u662f\u4e0d\u53ef\u80fd\u7684\u3002\uff08\u7136\u800c\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\uff09</p> <p>\u4e00\u4e2a\u5b9e\u7528\u7684\u56fe\u50cf\u521b\u5efa\u548c\u7f16\u8f91\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u7ed3\u5408\u7ed8\u753b\u548c\u7ed8\u56fe\u7684\u5143\u7d20\uff0c\u5c3d\u7ba1\u5176\u4e2d\u4e00\u79cd\u901a\u5e38\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002\u4f8b\u5982\uff0c\u7ed8\u56fe\u7a0b\u5e8f\u53ef\u4ee5\u5141\u8bb8\u7528\u6237\u5305\u542b\u5149\u6805\u7c7b\u578b\u7684\u56fe\u50cf\uff0c\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u5f62\u72b6\u3002\u7ed8\u753b\u7a0b\u5e8f\u53ef\u80fd\u5141\u8bb8\u7528\u6237\u521b\u5efa\u201c\u56fe\u5c42\u201d\uff0c\u8fd9\u4e9b\u662f\u53ef\u4ee5\u53e0\u52a0\u5728\u4e00\u8d77\u4ee5\u521b\u5efa\u6700\u7ec8\u56fe\u50cf\u7684\u5355\u72ec\u56fe\u50cf\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u50cf\u7ed8\u56fe\u7a0b\u5e8f\u4e2d\u7684\u5f62\u72b6\u4e00\u6837\u64cd\u4f5c\u8fd9\u4e9b\u56fe\u5c42\uff08\u56e0\u6b64\uff0c\u5373\u4f7f\u623f\u5b50\u7684\u56fe\u50cf\u5728\u6811\u7684\u540e\u9762\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5c06\u623f\u5b50\u548c\u6811\u4fdd\u6301\u5728\u5355\u72ec\u7684\u56fe\u5c42\u4e2d\uff09\u3002</p> <p>\u4e24\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u56fe\u5f62\u7a0b\u5e8f\u662fAdobe Photoshop\u548cAdobe Illustrator\u3002Photoshop\u5c5e\u4e8e\u7ed8\u753b\u7a0b\u5e8f\u7c7b\u522b\uff0c\u800cIllustrator\u66f4\u50cf\u662f\u7ed8\u56fe\u7a0b\u5e8f\u3002\u5728\u81ea\u7531\u8f6f\u4ef6\u9886\u57df\uff0cGNU\u56fe\u50cf\u5904\u7406\u7a0b\u5e8fGimp\u662fPhotoshop\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u66ff\u4ee3\u54c1\uff0c\u800cInkscape\u662f\u4e00\u4e2a\u76f8\u5f53\u80fd\u5e72\u7684\u514d\u8d39\u7ed8\u56fe\u7a0b\u5e8f\u3002Gimp\u548cInkscape\u7684\u7b80\u8981\u4ecb\u7ecd\u53ef\u4ee5\u5728\u9644\u5f55C\u4e2d\u627e\u5230\u3002</p> <p>The divide between raster graphics and vector graphics persists in several areas of computer graphics. For example, it can be seen in a division between two categories of programs that can be used to create images: painting programs and drawing programs. In a painting program, the image is represented as a grid of pixels, and the user creates an image by assigning colors to pixels. This might be done by using a \"drawing tool\" that acts like a painter's brush, or even by tools that draw geometric shapes such as lines or rectangles. But the point in a painting program is to color the individual pixels, and it is only the pixel colors that are saved. To make this clearer, suppose that you use a painting program to draw a house, then draw a tree in front of the house. If you then erase the tree, you'll only reveal a blank background, not a house. In fact, the image never really contained a \"house\" at all\u2014only individually colored pixels that the viewer might perceive as making up a picture of a house.</p> <p>In a drawing program, the user creates an image by adding geometric shapes, and the image is represented as a list of those shapes. If you place a house shape (or collection of shapes making up a house) in the image, and you then place a tree shape on top of the house, the house is still there, since it is stored in the list of shapes that the image contains. If you delete the tree, the house will still be in the image, just as it was before you added the tree. Furthermore, you should be able to select one of the shapes in the image and move it or change its size, so drawing programs offer a rich set of editing operations that are not possible in painting programs. (The reverse, however, is also true.)</p> <p>A practical program for image creation and editing might combine elements of painting and drawing, although one or the other is usually dominant. For example, a drawing program might allow the user to include a raster-type image, treating it as one shape. A painting program might let the user create \"layers,\" which are separate images that can be layered one on top of another to create the final image. The layers can then be manipulated much like the shapes in a drawing program (so that you could keep both your house and your tree in separate layers, even if in the image of the house is in back of the tree).</p> <p>Two well-known graphics programs are Adobe Photoshop and Adobe Illustrator. Photoshop is in the category of painting programs, while Illustrator is more of a drawing program. In the world of free software, the GNU image-processing program, Gimp, is a good alternative to Photoshop, while Inkscape is a reasonably capable free drawing program. Short introductions to Gimp and Inkscape can be found in Appendix C.</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u6805\u56fe\u5f62\u548c\u77e2\u91cf\u56fe\u5f62\u4e4b\u95f4\u7684\u5dee\u5f02\u4e5f\u51fa\u73b0\u5728\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f\u9886\u57df\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u5c06\u56fe\u50cf\u8868\u793a\u4e3a\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002\u5982\u679c\u8981\u4ece\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u4f4d\u4e2d\u6062\u590d\u539f\u59cb\u56fe\u50cf\uff0c\u5219\u8868\u793a\u5fc5\u987b\u9075\u5faa\u67d0\u4e9b\u786e\u5207\u7684\u3001\u5df2\u77e5\u7684\u89c4\u8303\u3002\u8fd9\u6837\u7684\u89c4\u8303\u79f0\u4e3a\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f(graphics file format)\u3002\u4e00\u4e9b\u6d41\u884c\u7684\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f\u5305\u62ecGIF\u3001PNG\u3001JPEG\u3001WebP\u548cSVG\u3002\u5927\u591a\u6570\u5728Web\u4e0a\u4f7f\u7528\u7684\u56fe\u50cf\u90fd\u662fGIF\u3001PNG\u6216JPEG\u683c\u5f0f\uff0c\u4f46\u5927\u591a\u6570\u6d4f\u89c8\u5668\u4e5f\u652f\u6301SVG\u56fe\u50cf\u548c\u8f83\u65b0\u7684WebP\u683c\u5f0f\u3002</p> <p>GIF\u3001PNG\u3001JPEG\u548cWebP\u57fa\u672c\u4e0a\u662f\u5149\u6805\u56fe\u5f62\u683c\u5f0f\uff1b\u56fe\u50cf\u662f\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u5b58\u50a8\u4e00\u4e2a\u989c\u8272\u503c\u6765\u6307\u5b9a\u7684\u3002GIF\u662f\u4e00\u79cd\u8f83\u8001\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5927\u90e8\u5206\u5df2\u88abPNG\u53d6\u4ee3\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u5728Web\u4e0a\u627e\u5230GIF\u56fe\u50cf\u3002\uff08GIF\u683c\u5f0f\u652f\u6301\u52a8\u753b\u56fe\u50cf\uff0c\u56e0\u6b64\u7ecf\u5e38\u7528\u4e8eWeb\u9875\u9762\u4e0a\u7684\u7b80\u5355\u52a8\u753b\u3002\uff09GIF\u4f7f\u7528\u7d22\u5f15\u8272\u6a21\u578b\uff0c\u6700\u591a\u53ef\u5305\u542b256\u79cd\u989c\u8272\u3002PNG\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u8272\u6216\u516824\u4f4d\u989c\u8272\uff0c\u800cJPEG\u9002\u7528\u4e8e\u5168\u5f69\u8272\u56fe\u50cf\u3002</p> <p>\u8868\u793a\u5149\u6805\u56fe\u50cf\u6240\u9700\u7684\u6570\u636e\u91cf\u53ef\u80fd\u76f8\u5f53\u5927\u3002\u7136\u800c\uff0c\u6570\u636e\u901a\u5e38\u5305\u542b\u5927\u91cf\u5197\u4f59\uff0c\u5e76\u4e14\u6570\u636e\u53ef\u4ee5\u8fdb\u884c\u201c\u538b\u7f29\u201d\u4ee5\u51cf\u5c0f\u5176\u5927\u5c0f\u3002GIF\u548cPNG\u4f7f\u7528\u65e0\u635f\u6570\u636e\u538b\u7f29(lossless data compression)\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u4ece\u538b\u7f29\u6570\u636e\u5b8c\u7f8e\u5730\u6062\u590d\u539f\u59cb\u56fe\u50cf\u3002JPEG\u4f7f\u7528\u6709\u635f\u6570\u636e\u538b\u7f29(lossy data compression)\u7b97\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u4eceJPEG\u6587\u4ef6\u4e2d\u6062\u590d\u7684\u56fe\u50cf\u4e0e\u539f\u59cb\u56fe\u50cf\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\uff1b\u4e00\u4e9b\u4fe1\u606f\u5df2\u7ecf\u4e22\u5931\u3002\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5dee\u5f02\u901a\u5e38\u5e76\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u4f7f\u7528\u6709\u635f\u538b\u7f29\u901a\u5e38\u53ef\u4ee5\u66f4\u5927\u7a0b\u5ea6\u5730\u51cf\u5c0f\u538b\u7f29\u6570\u636e\u7684\u5927\u5c0f\u3002JPEG\u901a\u5e38\u9002\u7528\u4e8e\u6444\u5f71\u56fe\u50cf\uff0c\u4f46\u5bf9\u4e8e\u5177\u6709\u4e0d\u540c\u989c\u8272\u4e4b\u95f4\u6e05\u6670\u8fb9\u7f18\u7684\u56fe\u50cf\u6548\u679c\u4e0d\u4f73\u3002\u5b83\u5bf9\u4e8e\u7ebf\u6761\u7ed8\u56fe\u548c\u5305\u542b\u6587\u672c\u7684\u56fe\u50cf\u7279\u522b\u4e0d\u9002\u7528\uff1bPNG\u662f\u6b64\u7c7b\u56fe\u50cf\u7684\u9996\u9009\u683c\u5f0f\u3002WebP\u53ef\u4ee5\u4f7f\u7528\u65e0\u635f\u548c\u6709\u635f\u538b\u7f29\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0cSVG\u57fa\u672c\u4e0a\u662f\u4e00\u79cd\u77e2\u91cf\u56fe\u5f62\u683c\u5f0f\uff08\u5c3d\u7ba1SVG\u56fe\u50cf\u53ef\u4ee5\u5305\u542b\u5149\u6805\u56fe\u50cf\uff09\u3002SVG\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u7528\u4e8e\u63cf\u8ff0\u4e8c\u7ef4\u77e2\u91cf\u56fe\u5f62\u56fe\u50cf\u7684\u57fa\u4e8eXML\u7684\u8bed\u8a00\u3002\u201cSVG\u201d\u4ee3\u8868\u201c\u53ef\u7f29\u653e\u77e2\u91cf\u56fe\u5f62(Scalable Vector Graphics)\u201d\uff0c\u800c\u201c\u53ef\u7f29\u653e(scalable)\u201d\u4e00\u8bcd\u8868\u793a\u77e2\u91cf\u56fe\u5f62\u7684\u4e00\u4e2a\u4f18\u70b9\uff1a\u5f53\u56fe\u50cf\u7684\u5927\u5c0f\u589e\u52a0\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u8d28\u91cf\u3002\u4e24\u70b9\u4e4b\u95f4\u7684\u7ebf\u6761\u53ef\u4ee5\u4ee5\u4efb\u4f55\u6bd4\u4f8b\u8868\u793a\uff0c\u4ecd\u7136\u662f\u540c\u4e00\u6761\u5b8c\u7f8e\u7684\u51e0\u4f55\u7ebf\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5c1d\u8bd5\u5927\u5e45\u589e\u52a0\u5149\u6805\u56fe\u50cf\u7684\u5927\u5c0f\uff0c\u60a8\u4f1a\u53d1\u73b0\u60a8\u6ca1\u6709\u8db3\u591f\u7684\u989c\u8272\u503c\u6765\u8986\u76d6\u65b0\u56fe\u50cf\u4e2d\u6240\u6709\u50cf\u7d20\uff1b\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u5c06\u6269\u5c55\u4e3a\u8986\u76d6\u7f29\u653e\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u77e9\u5f62\uff0c\u5e76\u4e14\u60a8\u5c06\u83b7\u5f97\u5747\u5300\u989c\u8272\u7684\u591a\u50cf\u7d20\u5757\u3002SVG\u56fe\u50cf\u7684\u53ef\u6269\u5c55\u7279\u6027\u4f7f\u5176\u6210\u4e3aWeb\u6d4f\u89c8\u5668\u548c\u8ba1\u7b97\u673a\u684c\u9762\u4e0a\u56fe\u5f62\u5143\u7d20\u7684\u826f\u597d\u9009\u62e9\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e00\u4e9b\u684c\u9762\u73af\u5883\u73b0\u5728\u6b63\u5728\u4f7f\u7528SVG\u56fe\u50cf\u4f5c\u4e3a\u5176\u684c\u9762\u56fe\u6807\u3002</p> <p>The divide between raster and vector graphics also appears in the field of graphics file formats. There are many ways to represent an image as data stored in a file. If the original image is to be recovered from the bits stored in the file, the representation must follow some exact, known specification. Such a specification is called a graphics file format. Some popular graphics file formats include GIF, PNG, JPEG, WebP, and SVG. Most images used on the Web are GIF, PNG, or JPEG, but most browsers also have support for SVG images and for the newer WebP format.</p> <p>GIF, PNG, JPEG, and WebP are basically raster graphics formats; an image is specified by storing a color value for each pixel. GIF is an older file format, which has largely been superseded by PNG, but you can still find GIF images on the web. (The GIF format supports animated images, so GIFs are often used for simple animations on Web pages.) GIF uses an indexed color model with a maximum of 256 colors. PNG can use either indexed or full 24-bit color, while JPEG is meant for full color images.</p> <p>The amount of data necessary to represent a raster image can be quite large. However, the data usually contains a lot of redundancy, and the data can be \"compressed\" to reduce its size. GIF and PNG use lossless data compression, which means that the original image can be recovered perfectly from the compressed data. JPEG uses a lossy data compression algorithm, which means that the image that is recovered from a JPEG file is not exactly the same as the original image; some information has been lost. This might not sound like a good idea, but in fact the difference is often not very noticeable, and using lossy compression usually permits a greater reduction in the size of the compressed data. JPEG generally works well for photographic images, but not as well for images that have sharp edges between different colors. It is especially bad for line drawings and images that contain text; PNG is the preferred format for such images. WebP can use both lossless and lossy compression.</p> <p>SVG, on the other hand, is fundamentally a vector graphics format (although SVG images can include raster images). SVG is actually an XML-based language for describing two-dimensional vector graphics images. \"SVG\" stands for \"Scalable Vector Graphics,\" and the term \"scalable\" indicates one of the advantages of vector graphics: There is no loss of quality when the size of the image is increased. A line between two points can be represented at any scale, and it is still the same perfect geometric line. If you try to greatly increase the size of a raster image, on the other hand, you will find that you don't have enough color values for all the pixels in the new image; each pixel from the original image will be expanded to cover a rectangle of pixels in the scaled image, and you will get multi-pixel blocks of uniform color. The scalable nature of SVG images make them a good choice for web browsers and for graphical elements on your computer's desktop. And indeed, some desktop environments are now using SVG images for their desktop icons.</p> \u4e2d\u6587\u82f1\u6587 <p>\u65e0\u8bba\u56fe\u50cf\u7684\u683c\u5f0f\u5982\u4f55\uff0c\u6570\u5b57\u56fe\u50cf\u90fd\u662f\u4f7f\u7528\u5750\u6807\u7cfb(coordinate system)\u6307\u5b9a\u7684\u3002\u5750\u6807\u7cfb\u5efa\u7acb\u4e86\u6570\u5b57\u548c\u51e0\u4f55\u70b9\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u5728\u4e8c\u7ef4\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u88ab\u5206\u914d\u4e86\u4e00\u5bf9\u6570\u5b57\uff0c\u79f0\u4e3a\u70b9\u7684\u5750\u6807\u3002\u70b9\u7684\u4e24\u4e2a\u5750\u6807\u901a\u5e38\u79f0\u4e3a\u5176x\u5750\u6807\u548cy\u5750\u6807\uff0c\u5c3d\u7ba1\u540d\u79f0\"x\"\u548c\"y\"\u662f\u4efb\u610f\u7684\u3002</p> <p>\u5149\u6805\u56fe\u50cf\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7684\u50cf\u7d20\u7f51\u683c\uff0c\u6392\u5217\u6210\u884c\u548c\u5217\u3002\u56e0\u6b64\uff0c\u5b83\u6709\u4e00\u4e2a\u81ea\u7136\u7684\u5750\u6807\u7cfb\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u5bf9\u5e94\u4e8e\u4e00\u5bf9\u6574\u6570\uff0c\u7ed9\u51fa\u5305\u542b\u8be5\u50cf\u7d20\u7684\u884c\u53f7\u548c\u5217\u53f7\u3002\uff08\u5373\u4f7f\u5728\u8fd9\u79cd\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u5173\u4e8e\u5e94\u8be5\u4ece\u4e0a\u5230\u4e0b\u8fd8\u662f\u4ece\u4e0b\u5230\u4e0a\u7f16\u53f7\u884c\u7684\u95ee\u9898\u5b58\u5728\u4e00\u4e9b\u5206\u6b67\u3002\uff09</p> <p>\u5bf9\u4e8e\u77e2\u91cf\u56fe\u50cf\uff0c\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u662f\u81ea\u7136\u7684\u3002\u56fe\u50cf\u7684\u5750\u6807\u7cfb\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4efb\u610f\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u5750\u6807\u7cfb\u6307\u5b9a\u76f8\u540c\u7684\u56fe\u50cf\u3002\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u8be6\u7ec6\u8ba8\u8bba\u5750\u6807\u7cfb\uff0c\u4f46\u5b83\u4eec\u5c06\u662f\u672c\u4e66\u7684\u4e00\u4e2a\u91cd\u70b9\uff0c\u5e76\u4e14\u5728\u4e09\u7ef4\u56fe\u5f62\u4e2d\u6bd4\u5728\u4e8c\u7ef4\u56fe\u5f62\u4e2d\u66f4\u52a0\u91cd\u8981\u3002</p> <p>A digital image, no matter what its format, is specified using a coordinate system. A coordinate system sets up a correspondence between numbers and geometric points. In two dimensions, each point is assigned a pair of numbers, which are called the coordinates of the point. The two coordinates of a point are often called its x-coordinate and y-coordinate, although the names \"x\" and \"y\" are arbitrary.</p> <p>A raster image is a two-dimensional grid of pixels arranged into rows and columns. As such, it has a natural coordinate system in which each pixel corresponds to a pair of integers giving the number of the row and the number of the column that contain the pixel. (Even in this simple case, there is some disagreement as to whether the rows should be numbered from top-to-bottom or from bottom-to-top.)</p> <p>For a vector image, it is natural to use real-number coordinates. The coordinate system for an image is arbitrary to some degree; that is, the same image can be specified using different coordinate systems. I do not want to say a lot about coordinate systems here, but they will be a major focus of a large part of the book, and they are even more important in three-dimensional graphics than in two dimensions.</p>"},{"location":"cn/c1/s2/","title":"\u7b2c 2 \u8282\uff1a\u4e09\u7ef4(3D)\u56fe\u5f62\u7684\u8981\u7d20","text":"<p>Elements of 3D Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u6211\u4eec\u8f6c\u54113D\u56fe\u5f62\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u4e0e\u77e2\u91cf\u56fe\u5f62(vector graphics)\u66f4\u76f8\u4f3c\uff0c\u800c\u4e0d\u662f\u5149\u6805\u56fe\u5f62(raster graphics)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u56fe\u50cf\u7684\u5185\u5bb9\u88ab\u6307\u5b9a\u4e3a\u4e00\u7ec4\u51e0\u4f55\u5bf9\u8c61\u7684\u5217\u8868\u3002\u8fd9\u79cd\u6280\u672f\u79f0\u4e3a\u51e0\u4f55\u5efa\u6a21(geometric modeling)\u3002\u8d77\u70b9\u662f\u6784\u5efa\u4e00\u4e2a\u201c\u4eba\u5de53D\u4e16\u754c\u201d\uff0c\u4f5c\u4e3a\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6392\u5217\u7684\u7b80\u5355\u51e0\u4f55\u5f62\u72b6\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u5bf9\u8c61\u53ef\u4ee5\u5177\u6709\u5c5e\u6027(attributes)\uff0c\u7ed3\u5408\u4e16\u754c\u7684\u5168\u5c40\u5c5e\u6027\uff0c\u786e\u5b9a\u5bf9\u8c61\u7684\u5916\u89c2\u3002\u901a\u5e38\uff0c\u57fa\u672c\u5f62\u72b6\u7684\u8303\u56f4\u975e\u5e38\u6709\u9650\uff0c\u53ef\u80fd\u4ec5\u5305\u62ec\u70b9\u3001\u7ebf\u6bb5\u548c\u4e09\u89d2\u5f62\u3002\u5982\u679c\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u5f62\u72b6\uff0c\u4f8b\u5982\u591a\u8fb9\u5f62\u6216\u7403\u4f53\uff0c\u4e0d\u88ab\u8ba4\u4e3a\u662f\u57fa\u672c\u5f62\u72b6\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u88ab\u6784\u5efa\u6216\u8fd1\u4f3c\u4e3a\u66f4\u57fa\u672c\u7684\u5f62\u72b6\u7684\u96c6\u5408\u3002\u4e3a\u4e86\u5236\u4f5c\u573a\u666f\u7684\u4e8c\u7ef4\u56fe\u50cf\uff0c\u5c06\u573a\u666f\u4ece\u4e09\u7ef4\u6295\u5f71(projected)\u5230\u4e8c\u7ef4\u3002\u6295\u5f71\u76f8\u5f53\u4e8e\u5bf9\u573a\u666f\u62cd\u6444\u7167\u7247\u3002\u8ba9\u6211\u4eec\u7a0d\u5fae\u8be6\u7ec6\u5730\u770b\u4e00\u4e0b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002</p> <p>\u9996\u5148\u662f\u51e0\u4f55...... \u6211\u4eec\u4ece\u4e00\u4e2a\u7a7a\u76843D\u7a7a\u95f4\u6216\u201c\u4e16\u754c\u201d\u5f00\u59cb\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u53ea\u5728\u6982\u5ff5\u4e0a\u5b58\u5728\uff0c\u4f46\u5c06\u5176\u89c6\u4e3a\u771f\u5b9e\u5e76\u4e14\u80fd\u591f\u5728\u8111\u6d77\u4e2d\u53ef\u89c6\u5316\u662f\u6709\u7528\u7684\u3002\u8be5\u7a7a\u95f4\u9700\u8981\u4e00\u4e2a\u5750\u6807\u7cfb(coordinate system)\uff0c\u5c06\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4e0e\u4e09\u4e2a\u6570\u5b57\u76f8\u5173\u8054\uff0c\u901a\u5e38\u79f0\u4e3a\u70b9\u7684x\u3001y\u548cz\u5750\u6807\u3002\u8fd9\u4e2a\u5750\u6807\u7cfb\u79f0\u4e3a\u201c\u4e16\u754c\u5750\u6807(world coordinates)\u201d\u3002</p> <p>\u6211\u4eec\u60f3\u8981\u5728\u4e16\u754c\u4e2d\u5efa\u7acb\u4e00\u4e2a\u573a\u666f\uff0c\u7531\u51e0\u4f55\u5bf9\u8c61\u7ec4\u6210\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u5750\u6807\u6765\u6307\u5b9a\u573a\u666f\u4e2d\u7684\u4e00\u6761\u7ebf\u6bb5\uff0c\u901a\u8fc7\u7ed9\u51fa\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807\u6765\u6307\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u6211\u4eec\u8981\u5904\u7406\u7684\u6700\u5c0f\u7684\u6784\u5efa\u5757\uff0c\u4f8b\u5982\u7ebf\u6bb5\u548c\u4e09\u89d2\u5f62\uff0c\u79f0\u4e3a\u51e0\u4f55\u57fa\u5143(geometric primitives)\u3002\u4e0d\u540c\u7684\u56fe\u5f62\u7cfb\u7edf\u63d0\u4f9b\u4e0d\u540c\u7684\u57fa\u5143\u96c6\u5408\uff0c\u4f46\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u53ea\u8003\u8651\u975e\u5e38\u57fa\u672c\u7684\u5f62\u72b6\uff0c\u4f8b\u5982\u7ebf\u6761\u548c\u4e09\u89d2\u5f62\u3002\u4e00\u4e2a\u590d\u6742\u7684\u573a\u666f\u53ef\u80fd\u5305\u542b\u5927\u91cf\u7684\u57fa\u5143\uff0c\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5355\u72ec\u7684\u57fa\u5143\u7ed9\u51fa\u663e\u5f0f\u5750\u6807\u6765\u521b\u5efa\u573a\u666f\u5c06\u975e\u5e38\u56f0\u96be\u3002\u4efb\u4f55\u7a0b\u5e8f\u5458\u5e94\u8be5\u7acb\u5373\u731c\u5230\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u57fa\u5143\u7ec4\u5408\u6210\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u7ec4\u4ef6\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5305\u542b\u591a\u8f86\u6c7d\u8f66\u7684\u573a\u666f\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8f66\u8f6e\u7684\u51e0\u4f55\u6a21\u578b\u3002\u4e00\u8f86\u6c7d\u8f66\u53ef\u4ee5\u5efa\u6a21\u4e3a\u56db\u4e2a\u8f66\u8f6e\u4ee5\u53ca\u5176\u4ed6\u7ec4\u4ef6\u6a21\u578b\u7684\u96c6\u5408\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u573a\u666f\u4e2d\u4f7f\u7528\u51e0\u4e2a\u6c7d\u8f66\u6a21\u578b\u7684\u526f\u672c\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u65e6\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u51e0\u4f55\u6a21\u578b\uff0c\u5b83\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u66f4\u590d\u6742\u6a21\u578b\u4e2d\u7684\u7ec4\u4ef6\u4f7f\u7528\u3002\u8fd9\u88ab\u79f0\u4e3a\u5206\u5c42\u5efa\u6a21(hierarchical modeling)\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u7528\u51e0\u4f55\u57fa\u5143\u6784\u5efa\u4e86\u4e00\u4e2a\u8f66\u8f6e\u6a21\u578b\u3002\u5f53\u5c06\u8be5\u8f66\u8f6e\u79fb\u52a8\u5230\u6c7d\u8f66\u6a21\u578b\u4e2d\u7684\u4f4d\u7f6e\u65f6\uff0c\u6240\u6709\u57fa\u5143\u7684\u5750\u6807\u90fd\u5fc5\u987b\u8c03\u6574\u3002\u90a3\u4e48\u901a\u8fc7\u6784\u5efa\u8f66\u8f6e\u6211\u4eec\u7a76\u7adf\u83b7\u5f97\u4e86\u4ec0\u4e48\uff1f\u5173\u952e\u5728\u4e8e\u8f66\u8f6e\u4e2d\u7684\u6240\u6709\u5750\u6807\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u8c03\u6574\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a\u4e86\u5c06\u8f66\u8f6e\u653e\u7f6e\u5728\u6c7d\u8f66\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5e94\u7528\u4e8e\u6574\u4e2a\u8f66\u8f6e\u7684\u5355\u4e00\u8c03\u6574\u3002\u6240\u4f7f\u7528\u7684\u201c\u8c03\u6574\u201d\u7c7b\u578b\u79f0\u4e3a\u51e0\u4f55\u53d8\u6362(geometric transform)\u3002\u51e0\u4f55\u53d8\u6362\u7528\u4e8e\u8c03\u6574\u51e0\u4f55\u5bf9\u8c61\u7684\u5927\u5c0f\u3001\u65b9\u5411\u548c\u4f4d\u7f6e\u3002\u5f53\u5236\u4f5c\u6c7d\u8f66\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u8f66\u8f6e\u3002\u7136\u540e\u6211\u4eec\u5bf9\u8f66\u8f6e\u6a21\u578b\u5e94\u7528\u56db\u4e2a\u4e0d\u540c\u7684\u53d8\u6362\uff0c\u4ee5\u5c06\u56db\u4e2a\u8f66\u8f6e\u6dfb\u52a0\u5230\u6c7d\u8f66\u4e2d\u3002\u540c\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u540c\u4e00\u6c7d\u8f66\u6a21\u578b\u5e94\u7528\u4e0d\u540c\u7684\u53d8\u6362\uff0c\u5411\u573a\u666f\u4e2d\u6dfb\u52a0\u51e0\u8f86\u6c7d\u8f66\u3002</p> <p>\u4e09\u79cd\u6700\u57fa\u672c\u7684\u51e0\u4f55\u53d8\u6362\u79f0\u4e3a\u7f29\u653e(scaling)\u3001\u65cb\u8f6c(rotation)\u548c\u5e73\u79fb(translation)\u3002\u7f29\u653e\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u5927\u5c0f\uff0c\u5373\u901a\u8fc7\u67d0\u4e2a\u6307\u5b9a\u56e0\u5b50\u4f7f\u5176\u53d8\u5927\u6216\u53d8\u5c0f\u3002\u65cb\u8f6c\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u65b9\u5411\uff0c\u901a\u8fc7\u56f4\u7ed5\u67d0\u4e2a\u7279\u5b9a\u8f74\u65cb\u8f6c\u4e00\u5b9a\u89d2\u5ea6\u6765\u65cb\u8f6c\u5bf9\u8c61\u3002\u5e73\u79fb\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u4f4d\u7f6e\uff0c\u901a\u8fc7\u5c06\u5176\u4ece\u539f\u59cb\u4f4d\u7f6e\u79fb\u52a8\u4e00\u5b9a\u91cf\u6765\u5e73\u79fb\u5b83\u3002\u5728\u672c\u4e66\u4e2d\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5728\u4e8c\u7ef4\u4e2d\u9047\u5230\u8fd9\u4e9b\u53d8\u6362\uff0c\u56e0\u4e3a\u5b83\u4eec\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u4f46\u57283D\u56fe\u5f62\u4e2d\uff0c\u5b83\u4eec\u53d8\u5f97\u771f\u6b63\u91cd\u8981\u3002</p> <p>When we turn to 3D graphics, we find that the most common approaches have more in common with vector graphics than with raster graphics. That is, the content of an image is specified as a list of geometric objects. The technique is referred to as geometric modeling. The starting point is to construct an \"artificial 3D world\" as a collection of simple geometric shapes, arranged in three-dimensional space. The objects can have attributes that, combined with global properties of the world, determine the appearance of the objects. Often, the range of basic shapes is very limited, perhaps including only points, line segments, and triangles. A more complex shape such as a polygon or sphere can be built or approximated as a collection of more basic shapes, if it is not itself considered to be basic. To make a two-dimensional image of the scene, the scene is projected from three dimensions down to two dimensions. Projection is the equivalent of taking a photograph of the scene. Let's look at how it all works in a little more detail.</p> <p>First, the geometry.... We start with an empty 3D space or \"world.\" Of course, this space exists only conceptually, but it's useful to think of it as real and to be able to visualize it in your mind. The space needs a coordinate system that associates each point in the space with three numbers, usually referred to as the x, y, and z coordinates of the point. This coordinate system is referred to as \"world coordinates.\"</p> <p>We want to build a scene inside the world, made up of geometric objects. For example, we can specify a line segment in the scene by giving the coordinates of its two endpoints, and we can specify a triangle by giving the coordinates of its three vertices. The smallest building blocks that we have to work with, such as line segments and triangles, are called geometric primitives. Different graphics systems make different sets of primitives available, but in many cases only very basic shapes such as lines and triangles are considered primitive. A complex scene can contain a large number of primitives, and it would be very difficult to create the scene by giving explicit coordinates for each individual primitive. The solution, as any programmer should immediately guess, is to chunk together primitives into reusable components. For example, for a scene that contains several automobiles, we might create a geometric model of a wheel. An automobile can be modeled as four wheels together with models of other components. And we could then use several copies of the automobile model in the scene. Note that once a geometric model has been designed, it can be used as a component in more complex models. This is referred to as hierarchical modeling.</p> <p>Suppose that we have constructed a model of a wheel out of geometric primitives. When that wheel is moved into position in the model of an automobile, the coordinates of all of its primitives will have to be adjusted. So what exactly have we gained by building the wheel? The point is that all of the coordinates in the wheel are adjusted in the same way. That is, to place the wheel in the automobile, we just have to specify a single adjustment that is applied to the wheel as a whole. The type of \"adjustment\" that is used is called a geometric transform (or geometric transformation). A geometric transform is used to adjust the size, orientation, and position of a geometric object. When making a model of an automobile, we build one wheel. We then apply four different transforms to the wheel model to add four copies of the wheel to the automobile. Similarly, we can add several automobiles to a scene by applying different transforms to the same automobile model.</p> <p>The three most basic kinds of geometric transform are called scaling, rotation, and translation. A scaling transform is used to set the size of an object, that is, to make it bigger or smaller by some specified factor. A rotation transform is used to set an object's orientation, by rotating it by some angle about some specific axis. A translation transform is used to set the position of an object, by displacing it by a given amount from its original position. In this book, we will meet these transformations first in two dimensions, where they are easier to understand. But it is in 3D graphics that they become truly essential.</p> \u4e2d\u6587\u82f1\u6587 <p>\u63a5\u4e0b\u6765\u662f\u5916\u89c2... \u5355\u72ec\u7684\u51e0\u4f55\u5f62\u72b6\u5e76\u4e0d\u662f\u5f88\u6709\u8da3\u3002\u4f60\u5fc5\u987b\u80fd\u591f\u8bbe\u7f6e\u5b83\u4eec\u7684\u5916\u89c2\u3002\u8fd9\u662f\u901a\u8fc7\u7ed9\u51e0\u4f55\u5bf9\u8c61\u5206\u914d\u5c5e\u6027(attributes)\u6765\u5b8c\u6210\u7684\u3002\u4e00\u4e2a\u660e\u663e\u7684\u5c5e\u6027\u662f\u989c\u8272\uff0c\u4f46\u5b9e\u73b0\u903c\u771f\u7684\u5916\u89c2\u8fdc\u6bd4\u7b80\u5355\u5730\u4e3a\u6bcf\u4e2a\u57fa\u5143\u6307\u5b9a\u4e00\u4e2a\u989c\u8272\u8981\u590d\u6742\u5f97\u591a\u3002\u57283D\u56fe\u5f62\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u8c08\u8bba\u989c\u8272\uff0c\u800c\u662f\u8c08\u8bba\u6750\u8d28(material)\u3002\u8fd9\u91cc\u7684\u6750\u8d28\u6307\u7684\u662f\u786e\u5b9a\u8868\u9762\u56fa\u6709\u89c6\u89c9\u5916\u89c2\u7684\u5c5e\u6027\u3002\u57fa\u672c\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u8868\u9762\u4e0e\u51fb\u4e2d\u8868\u9762\u7684\u5149\u7ebf\u5982\u4f55\u76f8\u4e92\u4f5c\u7528\u3002\u6750\u8d28\u5c5e\u6027\u53ef\u4ee5\u5305\u62ec\u57fa\u672c\u989c\u8272\u4ee5\u53ca\u5176\u4ed6\u5c5e\u6027\uff0c\u5982\u5149\u6cfd\u5ea6(shininess)\u3001\u7c97\u7cd9\u5ea6(roughness)\u548c\u900f\u660e\u5ea6(transparency)\u3002</p> <p>\u6700\u6709\u7528\u7684\u6750\u8d28\u5c5e\u6027\u4e4b\u4e00\u662f\u7eb9\u7406(texture)\u3002\u5728\u6700\u4e00\u822c\u7684\u672f\u8bed\u4e2d\uff0c\u7eb9\u7406\u662f\u4e00\u79cd\u5728\u8868\u9762\u70b9\u4e0e\u70b9\u4e4b\u95f4\u53d8\u5316\u6750\u8d28\u5c5e\u6027\u7684\u65b9\u5f0f\u3002\u7eb9\u7406\u6700\u5e38\u89c1\u7684\u7528\u9014\u662f\u5141\u8bb8\u4e0d\u540c\u70b9\u6709\u4e0d\u540c\u7684\u989c\u8272\u3002\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u4f7f\u7528\u4e8c\u7ef4\u56fe\u50cf\u4f5c\u4e3a\u7eb9\u7406\u6765\u5b9e\u73b0\u7684\u3002\u56fe\u50cf\u53ef\u4ee5\u5e94\u7528\u5230\u8868\u9762\u4e0a\uff0c\u4f7f\u5f97\u56fe\u50cf\u770b\u8d77\u6765\u50cf\u662f\u201c\u7ed8\u5236\u201d\u5728\u8868\u9762\u4e0a\u3002\u7136\u800c\uff0c\u7eb9\u7406\u4e5f\u53ef\u4ee5\u6307\u53d8\u5316\u7684\u503c\uff0c\u6bd4\u5982\u900f\u660e\u5ea6\u6216\u201c\u51f9\u51f8\u4e0d\u5e73\u201d\u3002\u7eb9\u7406\u5141\u8bb8\u6211\u4eec\u5728\u4e0d\u4f7f\u7528\u5927\u91cf\u51e0\u4f55\u57fa\u5143\u7684\u60c5\u51b5\u4e0b\u4e3a\u573a\u666f\u6dfb\u52a0\u7ec6\u8282\uff1b\u800c\u662f\u4f7f\u7528\u8f83\u5c11\u6570\u91cf\u7684\u5e26\u6709\u7eb9\u7406\u7684\u57fa\u5143\u3002</p> <p>\u6750\u8d28\u662f\u5bf9\u8c61\u7684 \u56fa\u6709\u5c5e\u6027 (intrinsic property)\uff0c\u4f46\u5bf9\u8c61\u7684\u5b9e\u9645\u5916\u89c2\u8fd8\u53d6\u51b3\u4e8e\u5bf9\u8c61\u6240\u5904\u7684\u73af\u5883\u3002\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u9664\u975e\u73af\u5883\u4e2d\u6709\u4e00\u4e9b\u5149\u7ebf\uff0c\u5426\u5219\u4f60\u770b\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f\u3002\u57283D\u56fe\u5f62\u4e2d\u4e5f\u662f\u5982\u6b64\uff1a\u4f60\u5fc5\u987b\u5728\u573a\u666f\u4e2d\u6dfb\u52a0 \u6a21\u62df\u5149\u7ebf(simulated lighting)\u3002\u573a\u666f\u4e2d\u53ef\u4ee5\u6709\u51e0\u4e2a\u5149\u6e90\u3002\u6bcf\u4e2a\u5149\u6e90\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u989c\u8272\u3001\u5f3a\u5ea6\u548c\u65b9\u5411\u6216\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6765\u81ea\u8fd9\u4e9b\u5149\u6e90\u7684\u5149\u5c06\u4e0e\u573a\u666f\u4e2d\u5bf9\u8c61\u7684\u6750\u8d28\u5c5e\u6027\u76f8\u4e92\u4f5c\u7528\u3002\u56fe\u5f62\u7cfb\u7edf\u4e2d\u7684\u5149\u7167\u652f\u6301\u53ef\u4ee5\u4ece\u76f8\u5f53\u7b80\u5355\u5230\u975e\u5e38\u590d\u6742\u548c\u8ba1\u7b97\u5bc6\u96c6\u7684\u8303\u56f4\u5185\u3002</p> <p>Next, appearance.... Geometric shapes by themselves are not very interesting. You have to be able to set their appearance. This is done by assigning attributes to the geometric objects. An obvious attribute is color, but getting a realistic appearance turns out to be a lot more complicated than simply specifying a color for each primitive. In 3D graphics, instead of color, we usually talk about material. The term material here refers to the properties that determine the intrinsic visual appearance of a surface. Essentially, this means how the surface interacts with light that hits the surface. Material properties can include a basic color as well as other properties such as shininess, roughness, and transparency.</p> <p>One of the most useful kinds of material property is a texture. In most general terms, a texture is a way of varying material properties from point-to-point on a surface. The most common use of texture is to allow different colors for different points. This is often done by using a 2D image as a texture. The image can be applied to a surface so that the image looks like it is \"painted\" onto the surface. However, texture can also refer to changing values for things like transparency or \"bumpiness.\" Textures allow us to add detail to a scene without using a huge number of geometric primitives; instead, you can use a smaller number of textured primitives.</p> <p>A material is an intrinsic property of an object, but the actual appearance of the object also depends on the environment in which the object is viewed. In the real world, you don't see anything unless there is some light in the environment. The same is true in 3D graphics: you have to add simulated lighting to a scene. There can be several sources of light in a scene. Each light source can have its own color, intensity, and direction or position. The light from those sources will then interact with the material properties of the objects in the scene. Support for lighting in a graphics system can range from fairly simple to very complex and computationally intensive.</p> \u4e2d\u6587\u82f1\u6587 <p>\u6700\u540e\uff0c\u56fe\u50cf... \u4e00\u822c\u6765\u8bf4\uff0c3D\u56fe\u5f62\u7684\u6700\u7ec8\u76ee\u6807\u662f\u751f\u62103D\u4e16\u754c\u76842D\u56fe\u50cf\u3002\u4ece3D\u52302D\u7684\u8f6c\u6362\u6d89\u53ca\u89c6\u56fe(viewing)\u548c\u6295\u5f71(projection)\u3002\u5f53\u4ece\u4e0d\u540c\u7684\u89c6\u89d2\u89c2\u5bdf\u65f6\uff0c\u4e16\u754c\u770b\u8d77\u6765\u4e0d\u540c\u3002\u4e3a\u4e86\u8bbe\u7f6e\u4e00\u4e2a\u89c6\u89d2\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u89c2\u5bdf\u8005\u7684\u4f4d\u7f6e\u548c\u89c2\u5bdf\u8005\u7684\u671d\u5411\u3002\u8fd8\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u201c\u4e0a(up)\u201d\u65b9\u5411\uff0c\u5373\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u5c06\u6307\u5411\u4e0a\u65b9\u7684\u65b9\u5411\u3002\u8fd9\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u5c06\u4e00\u4e2a\u201c\u865a\u62df\u76f8\u673a\u201d\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u3002\u4e00\u65e6\u89c6\u56fe\u8bbe\u7f6e\u597d\u4e86\uff0c\u4ece\u90a3\u4e2a\u89c6\u89d2\u770b\u5230\u7684\u4e16\u754c\u53ef\u4ee5\u6295\u5f71\u52302D\u4e2d\u3002\u6295\u5f71\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u76f8\u673a\u62cd\u7167\u3002</p> <p>\u6700\u7ec8\u76843D\u56fe\u5f62\u6b65\u9aa4\u662f\u5c06\u989c\u8272\u5206\u914d\u7ed92D\u56fe\u50cf\u4e2d\u7684\u5355\u4e2a\u50cf\u7d20\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u5149\u6805\u5316(rasterization)\uff0c\u800c\u751f\u6210\u56fe\u50cf\u7684\u6574\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u6e32\u67d3(rendering)\u573a\u666f\u3002</p> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7684\u76ee\u6807\u4e0d\u662f\u521b\u5efa\u5355\u4e2a\u56fe\u50cf\uff0c\u800c\u662f\u521b\u5efa\u4e00\u4e2a\u52a8\u753b(animation)\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u663e\u793a\u4e0d\u540c\u65f6\u523b\u4e16\u754c\u7684\u56fe\u50cf\u3002\u5728\u52a8\u753b\u4e2d\uff0c\u4ece\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u56fe\u50cf\u5230\u4e0b\u4e00\u4e2a\u56fe\u50cf\u6709\u5fae\u5c0f\u7684\u53d8\u5316\u3002\u573a\u666f\u7684\u51e0\u4e4e\u4efb\u4f55\u65b9\u9762\u5728\u52a8\u753b\u671f\u95f4\u90fd\u53ef\u4ee5\u53d1\u751f\u53d8\u5316\uff0c\u5305\u62ec\u57fa\u5143\u7684\u5750\u6807\u3001\u53d8\u6362\u3001\u6750\u8d28\u5c5e\u6027\u548c\u89c6\u56fe\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u9010\u6e10\u589e\u52a0\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u7f29\u653e\u53d8\u6362\u4e2d\u7684\u6bd4\u4f8b\u56e0\u5b50\u6765\u4f7f\u5bf9\u8c61\u5728\u52a8\u753b\u8fc7\u7a0b\u4e2d\u589e\u957f\u3002\u5728\u52a8\u753b\u671f\u95f4\u6539\u53d8\u89c6\u56fe\u53ef\u4ee5\u4f7f\u5f97\u6548\u679c\u770b\u8d77\u6765\u662f\u5728\u573a\u666f\u4e2d\u79fb\u52a8\u6216\u98de\u884c\u3002\u5f53\u7136\uff0c\u8ba1\u7b97\u6240\u9700\u7684\u53d8\u5316\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\u3002\u6709\u8bb8\u591a\u6280\u672f\u53ef\u4ee5\u5e2e\u52a9\u8fdb\u884c\u8ba1\u7b97\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u4e4b\u4e00\u662f\u4f7f\u7528\u201c\u7269\u7406\u5f15\u64ce(physics engine)\u201d\uff0c\u5b83\u6839\u636e\u7269\u7406\u5b9a\u5f8b\u8ba1\u7b97\u5bf9\u8c61\u7684\u8fd0\u52a8\u548c\u76f8\u4e92\u4f5c\u7528\u3002\uff08\u7136\u800c\uff0c\u672c\u4e66\u4e0d\u4f1a\u4ecb\u7ecd\u7269\u7406\u5f15\u64ce\u3002\uff09</p> <p>Finally, the image.... In general, the ultimate goal of 3D graphics is to produce 2D images of the 3D world. The transformation from 3D to 2D involves viewing and projection. The world looks different when seen from different points of view. To set up a point of view, we need to specify the position of the viewer and the direction that the viewer is looking. It is also necessary to specify an \"up\" direction, a direction that will be pointing upwards in the final image. This can be thought of as placing a \"virtual camera\" into the scene. Once the view is set up, the world as seen from that point of view can be projected into 2D. Projection is analogous to taking a picture with the camera.</p> <p>The final step in 3D graphics is to assign colors to individual pixels in the 2D image. This process is called rasterization, and the whole process of producing an image is referred to as rendering the scene.</p> <p>In many cases the ultimate goal is not to create a single image, but to create an animation, consisting of a sequence of images that show the world at different times. In an animation, there are small changes from one image in the sequence to the next. Almost any aspect of a scene can change during an animation, including coordinates of primitives, transformations, material properties, and the view. For example, an object can be made to grow over the course of an animation by gradually increasing the scale factor in a scaling transformation that is applied to the object. And changing the view during an animation can give the effect of moving or flying through the scene. Of course, it can be difficult to compute the necessary changes. There are many techniques to help with the computation. One of the most important is to use a \"physics engine,\" which computes the motion and interaction of objects based on the laws of physics. (However, you won't learn about physics engines in this book.)</p>"},{"location":"cn/c1/s3/","title":"\u7b2c 3 \u8282\uff1a\u786c\u4ef6\u4e0e\u8f6f\u4ef6","text":"<p>Hardware and Software</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5c06\u4ee5OpenGL\u4f5c\u4e3a3D\u56fe\u5f62\u7f16\u7a0b\u7684\u4e3b\u8981\u57fa\u7840\u3002\u6700\u521d\u7684\u5f00\u653eGL(OpenGL)\u7248\u672c\u4e8e1992\u5e74\u7531\u4e00\u5bb6\u540d\u4e3aSilicon Graphics\u7684\u516c\u53f8\u53d1\u5e03\uff0c\u8be5\u516c\u53f8\u4ee5\u5176\u56fe\u5f62\u5de5\u4f5c\u7ad9\u800c\u95fb\u540d\u2014\u2014\u8fd9\u662f\u8bbe\u8ba1\u7528\u4e8e\u5bc6\u96c6\u56fe\u5f62\u5e94\u7528\u7684\u5f3a\u5927\u4e14\u6602\u8d35\u7684\u8ba1\u7b97\u673a\u3002\uff08\u4eca\u5929\uff0c\u60a8\u7684\u667a\u80fd\u624b\u673a\u5177\u6709\u66f4\u591a\u7684\u56fe\u5f62\u8ba1\u7b97\u80fd\u529b\u3002\uff09OpenGL\u53d7\u5230\u5927\u591a\u6570\u73b0\u4ee3\u8ba1\u7b97\u8bbe\u5907\u7684\u56fe\u5f62\u786c\u4ef6\u652f\u6301\uff0c\u5305\u62ec\u53f0\u5f0f\u8ba1\u7b97\u673a\u3001\u7b14\u8bb0\u672c\u7535\u8111\u548c\u8bb8\u591a\u79fb\u52a8\u8bbe\u5907\u3002\u4f5c\u4e3a\u7f51\u9875GL(WebGL)\u7684\u5f62\u5f0f\uff0c\u5b83\u662fWeb\u4e0a\u5927\u591a\u65703D\u56fe\u5f62\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\u672c\u8282\u5c06\u4e3a\u60a8\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8eOpenGL\u5386\u53f2\u548c\u652f\u6301\u5b83\u7684\u56fe\u5f62\u786c\u4ef6\u7684\u80cc\u666f\u77e5\u8bc6\u3002</p> <p>\u5728\u6700\u521d\u7684\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e2d\uff0c\u5c4f\u5e55\u5185\u5bb9\u662f\u7531\u4e2d\u592e\u5904\u7406\u5668(CPU)\u76f4\u63a5\u7ba1\u7406\u7684\u3002\u4f8b\u5982\uff0c\u8981\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u4e00\u6761\u7ebf\u6bb5\uff0cCPU\u5c06\u8fd0\u884c\u4e00\u4e2a\u5faa\u73af\u6765\u8bbe\u7f6e\u6cbf\u7ebf\u7684\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u3002\u4e0d\u7528\u8bf4\uff0c\u56fe\u5f62\u53ef\u80fd\u4f1a\u5360\u7528CPU\u5927\u91cf\u7684\u65f6\u95f4\u3002\u4e0e\u6211\u4eec\u4eca\u5929\u671f\u671b\u7684\u76f8\u6bd4\uff0c\u56fe\u5f62\u6027\u80fd\u975e\u5e38\u6162\u3002\u90a3\u4e48\uff0c\u6709\u4ec0\u4e48\u53d8\u5316\u5462\uff1f\u5f53\u7136\uff0c\u8ba1\u7b97\u673a\u603b\u4f53\u4e0a\u66f4\u5feb\u4e86\uff0c\u4f46\u6700\u5927\u7684\u53d8\u5316\u662f\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u4e2d\uff0c\u56fe\u5f62\u5904\u7406\u662f\u7531\u4e00\u79cd\u79f0\u4e3a\u56fe\u5f62\u5904\u7406\u5668(GPU)\u7684\u4e13\u7528\u7ec4\u4ef6\u5b8c\u6210\u7684\u3002 GPU\u5305\u62ec\u7528\u4e8e\u6267\u884c\u56fe\u5f62\u8ba1\u7b97\u7684\u5904\u7406\u5668\uff1b \u5b9e\u9645\u4e0a\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u5927\u91cf\u7684\u8fd9\u79cd\u5904\u7406\u5668\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u5e76\u884c\u5de5\u4f5c\u4ee5\u5927\u5927\u52a0\u901f\u56fe\u5f62\u64cd\u4f5c\u3002 \u5b83\u8fd8\u5305\u62ec\u4e13\u7528\u5185\u5b58\uff0c\u7528\u4e8e\u5b58\u50a8\u8bf8\u5982\u56fe\u50cf\u548c\u5750\u6807\u5217\u8868\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 GPU\u5904\u7406\u5668\u5bf9\u5b58\u50a8\u5728GPU\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5177\u6709\u975e\u5e38\u5feb\u7684\u8bbf\u95ee\u901f\u5ea6\u2014\u2014\u6bd4\u5b83\u4eec\u8bbf\u95ee\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e3b\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8981\u5feb\u5f97\u591a\u3002</p> <p>\u8981\u7ed8\u5236\u4e00\u6761\u7ebf\u6216\u6267\u884c\u5176\u4ed6\u56fe\u5f62\u64cd\u4f5c\uff0cCPU\u53ea\u9700\u5c06\u547d\u4ee4\u4ee5\u53ca\u4efb\u4f55\u5fc5\u8981\u7684\u6570\u636e\u53d1\u9001\u5230GPU\uff0cGPU\u8d1f\u8d23\u5b9e\u9645\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u3002 CPU\u5c06\u5927\u90e8\u5206\u56fe\u5f62\u5de5\u4f5c\u4ea4\u7ed9\u4e86GPU\uff0c\u540e\u8005\u88ab\u4f18\u5316\u4e3a\u975e\u5e38\u5feb\u5730\u6267\u884c\u8fd9\u9879\u5de5\u4f5c\u3002 GPU\u7406\u89e3\u7684\u547d\u4ee4\u96c6\u7ec4\u6210\u4e86GPU\u7684\u63a5\u53e3(API)\u3002 OpenGL\u662f\u56fe\u5f62API\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5927\u591a\u6570GPU\u652f\u6301OpenGL\uff0c\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u7406\u89e3OpenGL\u547d\u4ee4\uff0c\u6216\u8005\u81f3\u5c11OpenGL\u547d\u4ee4\u53ef\u4ee5\u88ab\u6709\u6548\u5730\u8f6c\u6362\u4e3aGPU\u53ef\u4ee5\u7406\u89e3\u7684\u547d\u4ee4\u3002</p> <p>OpenGL\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u56fe\u5f62API\u3002 \u5b9e\u9645\u4e0a\uff0c\u5b83\u6b63\u5728\u88ab\u66f4\u73b0\u4ee3\u7684\u66ff\u4ee3\u65b9\u6848\u6240\u53d6\u4ee3\uff0c\u5305\u62ec\u4f0f\u5c14\u7518(Vulkan)\uff0c\u8fd9\u662f\u7531\u8d1f\u8d23OpenGL\u7684\u540c\u4e00\u7ec4\u7ec7\u5f00\u53d1\u7684\u5f00\u653eAPI\u3002 \u8fd8\u6709\u4e00\u4e9b\u7531\u82f9\u679c\u548c\u5fae\u8f6f\u4f7f\u7528\u7684\u4e13\u6709API\uff1ametal(Metal)\u548cdirect3D(Direct3D)\u3002 \u81f3\u4e8eWeb\uff0c\u4e00\u4e2a\u540d\u4e3a\u7f51\u9875GPU(WebGPU)\u7684\u65b0API\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728\u4e00\u4e9bWeb\u6d4f\u89c8\u5668\u4e2d\u5b9e\u73b0\u4e86\u3002 \u8fd9\u4e9b\u8f83\u65b0\u7684API\u662f\u590d\u6742\u4e14\u5e95\u5c42\u7684\u3002 \u5b83\u4eec\u66f4\u591a\u5730\u8bbe\u8ba1\u7528\u4e8e\u901f\u5ea6\u548c\u6548\u7387\uff0c\u800c\u4e0d\u662f\u6613\u7528\u6027\u3002 \u672c\u6559\u6750\u4e0d\u6db5\u76d6Metal\u3001Direct3D\u548cVulkan\uff0c\u4f46\u5728\u7b2c9\u7ae0\u4e2d\u4ecb\u7ecd\u4e86WebGPU\u3002 \u5728\u5927\u90e8\u5206\u7684\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528OpenGL\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u5bb9\u6613\u5165\u95e8\u76843D\u56fe\u5f62\u4ecb\u7ecd\uff0c\u4ee5\u53caWebGL\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u662fWeb\u6d4f\u89c8\u5668\u4e2d3D\u56fe\u5f62\u7684\u4e3b\u8981API\u3002</p> <p>We will be using OpenGL as the primary basis for 3D graphics programming. The original version of OpenGL was released in 1992 by a company named Silicon Graphics, which was known for its graphics workstations\u2014powerful, expensive computers designed for intensive graphical applications. (Today, you have more graphics computing power on your smart phone.) OpenGL is supported by the graphics hardware in most modern computing devices, including desktop computers, laptops, and many mobile devices. In the form of WebGL, it is the used for most 3D graphics on the Web. This section will give you a bit of background about the history of OpenGL and about the graphics hardware that supports it.</p> <p>In the first desktop computers, the contents of the screen were managed directly by the CPU. For example, to draw a line segment on the screen, the CPU would run a loop to set the color of each pixel that lies along the line. Needless to say, graphics could take up a lot of the CPU's time. And graphics performance was very slow, compared to what we expect today. So what has changed? Computers are much faster in general, of course, but the big change is that in modern computers, graphics processing is done by a specialized component called a GPU, or Graphics Processing Unit. A GPU includes processors for doing graphics computations; in fact, it can include a large number of such processors that work in parallel to greatly speed up graphical operations. It also includes its own dedicated memory for storing things like images and lists of coordinates. GPU processors have very fast access to data that is stored in GPU memory\u2014much faster than their access to data stored in the computer's main memory.</p> <p>To draw a line or perform some other graphical operation, the CPU simply has to send commands, along with any necessary data, to the GPU, which is responsible for actually carrying out those commands. The CPU offloads most of the graphical work to the GPU, which is optimized to carry out that work very quickly. The set of commands that the GPU understands make up the API of the GPU. OpenGL is an example of a graphics API, and most GPUs support OpenGL in the sense that they can understand OpenGL commands, or at least that OpenGL commands can efficiently be translated into commands that the GPU can understand.</p> <p>OpenGL is not the only graphics API. In fact, it is in the process of being replaced by more modern alternatives, including Vulkan an open API from the same group that is responsible for OpenGL. There are also proprietary APIs used by Apple and Microsoft: Metal and Direct3D. As for the Web, a new API called WebGPU has been under development for some time and is already implemented in some Web browsers. These newer APIs are complex and low-level. They are designed more for speed and efficiency rather than ease-of-use. Metal, Direct3D, and Vulkan are not covered in this textbook, but WebGPU is introduced in Chapter 9. For most of the book, we will use OpenGL, because it provides an easier introduction to 3D graphics, and WebGL, because it is still the major API for 3D graphics in Web browsers.</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u66fe\u7ecf\u8bf4\u8fc7OpenGL\u662f\u4e00\u4e2aAPI\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u662f\u4e00\u7cfb\u5217API\uff0c\u7ecf\u8fc7\u591a\u6b21\u6269\u5c55\u548c\u4fee\u8ba2\u3002\u57282023\u5e74\uff0c\u5f53\u524d\uff08\u4e5f\u8bb8\u662f\u6700\u7ec8\uff09\u7248\u672c\u662f4.6\uff0c\u5b83\u9996\u6b21\u53d1\u5e03\u4e8e2017\u5e74\u3002\u8fd9\u4e0e1992\u5e74\u76841.0\u7248\u672c\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u7248\u672c\u53eb\u505aOpenGL ES\uff0c\u7528\u4e8e\u8bf8\u5982\u624b\u673a\u548c\u5e73\u677f\u7535\u8111\u4e4b\u7c7b\u7684\u201c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u201d\u3002\u8fd8\u6709WebGL\uff0c\u7528\u4e8eWeb\u6d4f\u89c8\u5668\uff0c\u57fa\u672c\u4e0a\u662fOpenGL ES\u7684\u4e00\u4e2a\u79fb\u690d\u7248\u672c\u3002\u4e86\u89e3OpenGL\u7684\u53d8\u5316\u662f\u5982\u4f55\u53d1\u751f\u4ee5\u53ca\u539f\u56e0\u5c06\u4f1a\u5f88\u6709\u7528\u3002</p> <p>\u9996\u5148\uff0c\u60a8\u5e94\u8be5\u77e5\u9053OpenGL\u88ab\u8bbe\u8ba1\u4e3a\u4e00\u4e2a\u201c\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\u201d\u7cfb\u7edf\u3002\u670d\u52a1\u5668\u8d1f\u8d23\u63a7\u5236\u8ba1\u7b97\u673a\u7684\u663e\u793a\u5e76\u6267\u884c\u56fe\u5f62\u8ba1\u7b97\uff0c\u6267\u884c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u547d\u4ee4\u3002\u901a\u5e38\uff0c\u670d\u52a1\u5668\u662f\u4e00\u4e2aGPU\uff0c\u5305\u62ec\u5176\u56fe\u5f62\u5904\u7406\u5668\u548c\u5185\u5b58\u3002\u670d\u52a1\u5668\u6267\u884cOpenGL\u547d\u4ee4\u3002\u5ba2\u6237\u7aef\u662f\u540c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e2d\u7684CPU\uff0c\u4ee5\u53ca\u5b83\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002OpenGL\u547d\u4ee4\u6765\u81ea\u4e8e\u5728CPU\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002\u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8fdc\u7a0b\u8fd0\u884cOpenGL\u7a0b\u5e8f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5728\u8fdc\u7a0b\u8ba1\u7b97\u673a\uff08OpenGL\u5ba2\u6237\u7aef\uff09\u4e0a\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u56fe\u5f62\u8ba1\u7b97\u548c\u663e\u793a\u662f\u5728\u60a8\u5b9e\u9645\u4f7f\u7528\u7684\u8ba1\u7b97\u673a\u4e0a\u5b8c\u6210\u7684\uff08OpenGL\u670d\u52a1\u5668\uff09\u3002</p> <p>\u5173\u952e\u601d\u60f3\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u662f\u5206\u5f00\u7684\u7ec4\u4ef6\uff0c\u5e76\u4e14\u5728\u8fd9\u4e9b\u7ec4\u4ef6\u4e4b\u95f4\u6709\u4e00\u4e2a\u901a\u4fe1\u901a\u9053\u3002OpenGL\u547d\u4ee4\u53ca\u5176\u6240\u9700\u7684\u6570\u636e\u901a\u8fc7\u8be5\u901a\u9053\u4ece\u5ba2\u6237\u7aef\uff08CPU\uff09\u4f20\u8f93\u5230\u670d\u52a1\u5668\uff08GPU\uff09\u3002\u901a\u9053\u7684\u5bb9\u91cf\u53ef\u80fd\u662f\u56fe\u5f62\u6027\u80fd\u7684\u9650\u5236\u56e0\u7d20\u3002\u60f3\u8c61\u4e00\u4e0b\u5c06\u56fe\u50cf\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\u3002\u5982\u679cGPU\u53ef\u4ee5\u5728\u5fae\u79d2\u5185\u7ed8\u5236\u56fe\u50cf\uff0c\u4f46\u662f\u5c06\u56fe\u50cf\u6570\u636e\u4eceCPU\u53d1\u9001\u5230GPU\u9700\u8981\u6beb\u79d2\u7ea7\u7684\u65f6\u95f4\uff0c\u90a3\u4e48GPU\u7684\u5feb\u901f\u901f\u5ea6\u5c31\u65e0\u5173\u7d27\u8981\u4e86\u2014\u2014\u7ed8\u5236\u56fe\u50cf\u6240\u9700\u7684\u5927\u90e8\u5206\u65f6\u95f4\u662f\u901a\u4fe1\u65f6\u95f4\u3002</p> <p>\u56e0\u6b64\uff0cOpenGL\u53d1\u5c55\u7684\u9a71\u52a8\u56e0\u7d20\u4e4b\u4e00\u662f\u5e0c\u671b\u9650\u5236CPU\u548cGPU\u4e4b\u95f4\u9700\u8981\u7684\u901a\u4fe1\u91cf\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u4fe1\u606f\u5b58\u50a8\u5728GPU\u7684\u5185\u5b58\u4e2d\u3002\u5982\u679c\u67d0\u4e9b\u6570\u636e\u5c06\u88ab\u591a\u6b21\u4f7f\u7528\uff0c\u5219\u53ef\u4ee5\u4e00\u6b21\u5c06\u5176\u4f20\u8f93\u5230GPU\u5e76\u5b58\u50a8\u5728\u90a3\u91cc\u7684\u5185\u5b58\u4e2d\uff0c\u4ece\u800c\u7acb\u5373\u4f7fGPU\u53ef\u4ee5\u8bbf\u95ee\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5c1d\u8bd5\u51cf\u5c11\u5fc5\u987b\u4f20\u8f93\u5230GPU\u4ee5\u7ed8\u5236\u7ed9\u5b9a\u56fe\u50cf\u7684OpenGL\u547d\u4ee4\u7684\u6570\u91cf\u3002</p> <p>OpenGL\u7ed8\u5236\u8bf8\u5982\u4e09\u89d2\u5f62\u4e4b\u7c7b\u7684\u57fa\u5143\u3002\u6307\u5b9a\u4e00\u4e2a\u57fa\u5143\u610f\u5473\u7740\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u5750\u6807\u548c\u5c5e\u6027\u3002\u5728\u6700\u521d\u7684OpenGL 1.0\u4e2d\uff0c\u4f7f\u7528\u5355\u72ec\u7684\u547d\u4ee4\u6765\u6307\u5b9a\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\uff0c\u5e76\u4e14\u6bcf\u5f53\u5c5e\u6027\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\u90fd\u9700\u8981\u4e00\u4e2a\u547d\u4ee4\u3002\u8981\u7ed8\u5236\u4e00\u4e2a\u4e09\u89d2\u5f62\u5c06\u9700\u8981\u4e09\u4e2a\u6216\u66f4\u591a\u4e2a\u547d\u4ee4\u3002\u7531\u6210\u5343\u4e0a\u4e07\u4e2a\u4e09\u89d2\u5f62\u7ec4\u6210\u7684\u590d\u6742\u5bf9\u8c61\u7684\u7ed8\u5236\u5c06\u9700\u8981\u8bb8\u591a\u6210\u5343\u4e0a\u4e07\u4e2a\u547d\u4ee4\u3002\u5373\u4f7f\u5728OpenGL 1.1\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u547d\u4ee4\u800c\u4e0d\u662f\u6570\u5343\u4e2a\u6765\u7ed8\u5236\u8fd9\u6837\u7684\u5bf9\u8c61\u3002\u5bf9\u8c61\u7684\u6240\u6709\u6570\u636e\u5c06\u52a0\u8f7d\u5230\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u53ef\u4ee5\u4e00\u6b21\u6027\u5c06\u5176\u53d1\u9001\u5230GPU\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5982\u679c\u8981\u591a\u6b21\u7ed8\u5236\u5bf9\u8c61\uff0c\u5219\u6bcf\u6b21\u7ed8\u5236\u5bf9\u8c61\u65f6\u90fd\u5fc5\u987b\u91cd\u65b0\u4f20\u8f93\u6570\u636e\u3002\u8fd9\u5728OpenGL 1.5\u4e2d\u901a\u8fc7\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61(VBO(Vertex Buffer Objects))\u5f97\u5230\u4e86\u4fee\u590d\u3002 VBO \u662fGPU\u4e2d\u7684\u4e00\u5757\u5185\u5b58\u5757\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e00\u7ec4\u9876\u70b9\u7684\u5750\u6807\u6216\u5c5e\u6027\u503c\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5728\u4e0d\u5fc5\u6bcf\u6b21\u4f7f\u7528\u65f6\u90fd\u4eceCPU\u91cd\u65b0\u4f20\u8f93\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u91cd\u7528\u6570\u636e\u3002</p> <p>\u540c\u6837\uff0c\u5728OpenGL 1.1\u4e2d\u5f15\u5165\u4e86\u7eb9\u7406\u5bf9\u8c61(texture objects)\uff0c\u4ee5\u4fbf\u5728GPU\u4e0a\u5b58\u50a8\u591a\u4e2a\u56fe\u50cf\u4ee5\u4f9b\u7eb9\u7406\u4f7f\u7528\u3002\u8fd9\u610f\u5473\u7740\u5c06\u591a\u6b21\u91cd\u590d\u4f7f\u7528\u7684\u7eb9\u7406\u56fe\u50cf\u52a0\u8f7d\u5230GPU\u4e2d\u4e00\u6b21\uff0c\u4ee5\u4fbfGPU\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u56fe\u50cf\u4e4b\u95f4\u5207\u6362\u800c\u65e0\u9700\u91cd\u65b0\u52a0\u8f7d\u5b83\u4eec\u3002</p> <p>I have said that OpenGL is an API, but in fact it is a series of APIs that have been subject to repeated extension and revision. In 2023, the current (and perhaps final) version is 4.6, which was first released in 2017. It is very different from the 1.0 version from 1992. Furthermore, there is a specialized version called OpenGL ES for \"embedded systems\" such as mobile phones and tablets. And there is also WebGL, for use in Web browsers, which is basically a port of OpenGL ES. It will be useful to know something about how and why OpenGL has changed.</p> <p>First of all, you should know that OpenGL was designed as a \"client/server\" system. The server, which is responsible for controlling the computer's display and performing graphics computations, carries out commands issued by the client. Typically, the server is a GPU, including its graphics processors and memory. The server executes OpenGL commands. The client is the CPU in the same computer, along with the application program that it is running. OpenGL commands come from the program that is running on the CPU. However, it is actually possible to run OpenGL programs remotely over a network. That is, you can execute an application program on a remote computer (the OpenGL client), while the graphics computations and display are done on the computer that you are actually using (the OpenGL server).</p> <p>The key idea is that the client and the server are separate components, and there is a communication channel between those components. OpenGL commands and the data that they need are communicated from the client (the CPU) to the server (the GPU) over that channel. The capacity of the channel can be a limiting factor in graphics performance. Think of drawing an image onto the screen. If the GPU can draw the image in microseconds, but it takes milliseconds to send the data for the image from the CPU to the GPU, then the great speed of the GPU is irrelevant\u2014most of the time that it takes to draw the image is communication time.</p> <p>For this reason, one of the driving factors in the evolution of OpenGL has been the desire to limit the amount of communication that is needed between the CPU and the GPU. One approach is to store information in the GPU's memory. If some data is going to be used several times, it can be transmitted to the GPU once and stored in memory there, where it will be immediately accessible to the GPU. Another approach is to try to decrease the number of OpenGL commands that must be transmitted to the GPU to draw a given image.</p> <p>OpenGL draws primitives such as triangles. Specifying a primitive means specifying coordinates and attributes for each of its vertices. In the original OpenGL 1.0, a separate command was used to specify the coordinates of each vertex, and a command was needed each time the value of an attribute changed. To draw a single triangle would require three or more commands. Drawing a complex object made up of thousands of triangles would take many thousands of commands. Even in OpenGL 1.1, it became possible to draw such an object with a single command instead of thousands. All the data for the object would be loaded into arrays, which could then be sent in a single step to the GPU. Unfortunately, if the object was going to be drawn more than once, then the data would have to be retransmitted each time the object was drawn. This was fixed in OpenGL 1.5 with Vertex Buffer Objects. A VBO is a block of memory in the GPU that can store the coordinates or attribute values for a set of vertices. This makes it possible to reuse the data without having to retransmit it from the CPU to the GPU every time it is used.</p> <p>Similarly, OpenGL 1.1 introduced texture objects to make it possible to store several images on the GPU for use as textures. This means that texture images that are going to be reused several times can be loaded once into the GPU, so that the GPU can easily switch between images without having to reload them.</p> \u4e2d\u6587\u82f1\u6587 <p>\u968f\u7740\u65b0\u7684\u529f\u80fd\u88ab\u6dfb\u52a0\u5230OpenGL\u4e2d\uff0cAPI\u7684\u89c4\u6a21\u4e5f\u5728\u589e\u957f\u3002\u4f46\u589e\u957f\u901f\u5ea6\u4ecd\u7136\u88ab\u7528\u4e8e\u8fdb\u884c\u56fe\u5f62\u5904\u7406\u7684\u65b0\u7684\u3001\u66f4\u590d\u6742\u7684\u6280\u672f\u6240\u8d85\u8d8a\u3002\u5176\u4e2d\u4e00\u4e9b\u65b0\u6280\u672f\u88ab\u6dfb\u52a0\u5230\u4e86OpenGL\u4e2d\uff0c\u4f46\u95ee\u9898\u5728\u4e8e\uff0c\u65e0\u8bba\u4f60\u6dfb\u52a0\u4e86\u591a\u5c11\u529f\u80fd\uff0c\u603b\u4f1a\u6709\u5bf9\u65b0\u529f\u80fd\u7684\u9700\u6c42\uff0c\u4ee5\u53ca\u5bf9\u6240\u6709\u65b0\u529f\u80fd\u4f7f\u4e8b\u60c5\u53d8\u5f97\u8fc7\u4e8e\u590d\u6742\u7684\u62b1\u6028\uff01OpenGL\u662f\u4e00\u4e2a\u5e9e\u5927\u7684\u673a\u5668\uff0c\u4e0d\u65ad\u5730\u589e\u52a0\u65b0\u7ec4\u4ef6\uff0c\u4f46\u4ecd\u7136\u4e0d\u80fd\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u6ee1\u610f\u3002\u771f\u6b63\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u673a\u5668\u53ef\u7f16\u7a0b\u5316(programmable)\u3002\u968f\u7740OpenGL 2.0\u7684\u51fa\u73b0\uff0c\u7f16\u5199\u7a0b\u5e8f\u4ee5\u4f5c\u4e3aGPU\u56fe\u5f62\u8ba1\u7b97\u7684\u4e00\u90e8\u5206\u6267\u884c\u6210\u4e3a\u53ef\u80fd\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u5728GPU\u4e0a\u4ee5GPU\u901f\u5ea6\u8fd0\u884c\u3002\u60f3\u8981\u4f7f\u7528\u65b0\u56fe\u5f62\u6280\u672f\u7684\u7a0b\u5e8f\u5458\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5b9e\u73b0\u8be5\u529f\u80fd\uff0c\u7136\u540e\u5c06\u5176\u4ea4\u7ed9GPU\u6267\u884c\u3002OpenGL API\u4e0d\u5fc5\u66f4\u6539\u3002API\u552f\u4e00\u9700\u8981\u652f\u6301\u7684\u662f\u5c06\u7a0b\u5e8f\u53d1\u9001\u5230GPU\u4ee5\u8fdb\u884c\u6267\u884c\u7684\u80fd\u529b\u3002</p> <p>\u8fd9\u4e9b\u7a0b\u5e8f\u88ab\u79f0\u4e3a\u7740\u8272\u5668(shaders)\uff08\u5c3d\u7ba1\u8fd9\u4e2a\u672f\u8bed\u5b9e\u9645\u4e0a\u5e76\u4e0d\u63cf\u8ff0\u5b83\u4eec\u5927\u591a\u6570\u505a\u4ec0\u4e48\uff09\u3002\u9996\u5148\u88ab\u5f15\u5165\u7684\u7740\u8272\u5668\u662f\u9876\u70b9\u7740\u8272\u5668(vertex shaders)\u548c\u7247\u6bb5\u7740\u8272\u5668(fragment shaders)\u3002\u5f53\u7ed8\u5236\u4e00\u4e2a\u57fa\u5143\u65f6\uff0c\u5fc5\u987b\u5728\u6bcf\u4e2a\u57fa\u5143\u7684\u9876\u70b9\u4e0a\u8fdb\u884c\u4e00\u4e9b\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bf9\u9876\u70b9\u5750\u6807\u5e94\u7528\u51e0\u4f55\u53d8\u6362\u6216\u4f7f\u7528\u5c5e\u6027\u548c\u5168\u5c40\u5149\u7167\u73af\u5883\u6765\u8ba1\u7b97\u8be5\u9876\u70b9\u7684\u989c\u8272\u3002\u9876\u70b9\u7740\u8272\u5668\u662f\u4e00\u4e2a\u53ef\u4ee5\u63a5\u7ba1\u6267\u884c\u6b64\u7c7b\u201c\u6bcf\u4e2a\u9876\u70b9\u201d\u8ba1\u7b97\u7684\u7a0b\u5e8f\u3002\u540c\u6837\uff0c\u5bf9\u4e8e\u57fa\u5143\u5185\u7684\u6bcf\u4e2a\u50cf\u7d20\uff0c\u5fc5\u987b\u6267\u884c\u4e00\u4e9b\u5de5\u4f5c\u3002\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u63a5\u7ba1\u6267\u884c\u8fd9\u79cd\u201c\u6bcf\u4e2a\u50cf\u7d20\u201d\u7684\u8ba1\u7b97\u3002\uff08\u7247\u6bb5\u7740\u8272\u5668\u4e5f\u79f0\u4e3a\u50cf\u7d20\u7740\u8272\u5668(pixel shaders)\u3002\uff09</p> <p>\u53ef\u7f16\u7a0b\u56fe\u5f62\u786c\u4ef6\u7684\u6982\u5ff5\u975e\u5e38\u6210\u529f\u2014\u2014\u6210\u529f\u5230\u5728OpenGL 3.0\u4e2d\uff0c\u5e38\u89c4\u7684\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u4e2a\u7247\u6bb5\u7684\u5904\u7406\u88ab\u5f03\u7528\uff08\u610f\u5473\u7740\u4e0d\u9f13\u52b1\u4f7f\u7528\uff09\u3002\u5e76\u4e14\u5728OpenGL 3.1\u4e2d\uff0c\u5b83\u5df2\u4eceOpenGL\u6807\u51c6\u4e2d\u5220\u9664\uff0c\u5c3d\u7ba1\u4ecd\u4f5c\u4e3a\u53ef\u9009\u6269\u5c55\u5b58\u5728\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u684c\u9762\u7248\u672c\u7684OpenGL\u4e2d\u4ecd\u652f\u6301\u6240\u6709\u539f\u59cb\u529f\u80fd\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u7ee7\u7eed\u63d0\u4f9b\u3002\u7136\u800c\uff0c\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u65b9\u9762\uff0c\u4f7f\u7528OpenGL ES 2.0\u53ca\u66f4\u9ad8\u7248\u672c\u65f6\uff0c\u7740\u8272\u5668\u7684\u4f7f\u7528\u662f\u5f3a\u5236\u6027\u7684\uff0c\u5e76\u4e14\u5df2\u5b8c\u5168\u5220\u9664\u4e86OpenGL 1.1 API\u7684\u5927\u90e8\u5206\u5185\u5bb9\u3002\u7528\u4e8eWeb\u6d4f\u89c8\u5668\u7684OpenGL\u7248\u672cWebGL\u662f\u57fa\u4e8eOpenGL ES\u7684\uff0c\u5b83\u4e5f\u9700\u8981\u4f7f\u7528\u7740\u8272\u5668\u6765\u5b8c\u6210\u4efb\u4f55\u4e8b\u60c5\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u5c06\u4ece\u7248\u672c1.1\u5f00\u59cb\u5b66\u4e60OpenGL\u3002\u8be5\u7248\u672c\u7684\u5927\u591a\u6570\u6982\u5ff5\u548c\u8bb8\u591a\u7ec6\u8282\u4ecd\u7136\u76f8\u5173\uff0c\u5e76\u4e14\u4e3a\u521d\u5b66\u8005\u63d0\u4f9b\u4e86\u66f4\u5bb9\u6613\u7684\u5165\u95e8\u70b9\u3002</p> <p>OpenGL\u7740\u8272\u5668\u662f\u7528OpenGL\u7740\u8272\u8bed\u8a00(GLSL)\uff08(OpenGL Shading Language)\uff09\u7f16\u5199\u7684\u3002\u4e0e OpenGL \u672c\u8eab\u4e00\u6837\uff0cGLSL\u4e5f\u7ecf\u5386\u4e86\u51e0\u4e2a\u7248\u672c\u3002\u6211\u4eec\u5c06\u5728\u8bfe\u7a0b\u540e\u671f\u82b1\u4e00\u4e9b\u65f6\u95f4\u5b66\u4e60GLSL ES\uff0c\u8fd9\u662f\u4e0e WebGL \u548c OpenGL ES \u4e00\u8d77\u4f7f\u7528\u7684\u7248\u672c\u3002GLSL\u4f7f\u7528\u7c7b\u4f3c\u4e8eC\u7f16\u7a0b\u8bed\u8a00\u7684\u8bed\u6cd5\u3002</p> <p>As new capabilities were added to OpenGL, the API grew in size. But the growth was still outpaced by the invention of new, more sophisticated techniques for doing graphics. Some of these new techniques were added to OpenGL, but the problem is that no matter how many features you add, there will always be demands for new features\u2014as well as complaints that all the new features are making things too complicated! OpenGL was a giant machine, with new pieces always being tacked onto it, but still not pleasing everyone. The real solution was to make the machine programmable. With OpenGL 2.0, it became possible to write programs to be executed as part of the graphical computation in the GPU. The programs are run on the GPU at GPU speed. A programmer who wants to use a new graphics technique can write a program to implement the feature and just hand it to the GPU. The OpenGL API doesn't have to be changed. The only thing that the API has to support is the ability to send programs to the GPU for execution.</p> <p>The programs are called shaders (although the term doesn't really describe what most of them actually do). The first shaders to be introduced were vertex shaders and fragment shaders. When a primitive is drawn, some work has to be done at each vertex of the primitive, such as applying a geometric transform to the vertex coordinates or using the attributes and global lighting environment to compute the color of that vertex. A vertex shader is a program that can take over the job of doing such \"per-vertex\" computations. Similarly, some work has to be done for each pixel inside the primitive. A fragment shader can take over the job of performing such \"per-pixel\" computations. (Fragment shaders are also called pixel shaders.)</p> <p>The idea of programmable graphics hardware was very successful\u2014so successful that in OpenGL 3.0, the usual per-vertex and per-fragment processing was deprecated (meaning that its use was discouraged). And in OpenGL 3.1, it was removed from the OpenGL standard, although it is still present as an optional extension. In practice, all the original features of OpenGL are still supported in desktop versions of OpenGL and will probably continue to be available in the future. On the embedded system side, however, with OpenGL ES 2.0 and later, the use of shaders is mandatory, and a large part of the OpenGL 1.1 API has been completely removed. WebGL, the version of OpenGL for use in web browsers, is based on OpenGL ES, and it also requires shaders to get anything at all done. Nevertheless, we will begin our study of OpenGL with version 1.1. Most of the concepts and many of the details from that version are still relevant, and it offers an easier entry point for someone new to 3D graphics programming.</p> <p>OpenGL shaders are written in GLSL (OpenGL Shading Language). Like OpenGL itself, GLSL has gone through several versions. We will spend some time later in the course studying GLSL ES, the version used with WebGL and OpenGL ES. GLSL uses a syntax similar to the C programming language.</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f5c\u4e3a\u5bf9GPU\u786c\u4ef6\u7684\u6700\u540e\u4e00\u70b9\u8bf4\u660e\uff0c\u6211\u5e94\u8be5\u6307\u51fa\uff0c\u5bf9\u4e8e\u4e0d\u540c\u9876\u70b9\u8fdb\u884c\u7684\u8ba1\u7b97\u57fa\u672c\u4e0a\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u5927\u6982\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u8ba1\u7b97\u3002\u5bf9\u4e8e\u4e0d\u540c\u7247\u6bb5\u7684\u8ba1\u7b97\u4e5f\u662f\u5982\u6b64\u3002\u4e8b\u5b9e\u4e0a\uff0cGPU\u53ef\u4ee5\u62e5\u6709\u6570\u767e\u4e2a\u751a\u81f3\u6570\u5343\u4e2a\u53ef\u4ee5\u5e76\u884c\u64cd\u4f5c\u7684\u5904\u7406\u5668\u3002\u8bda\u7136\uff0c\u5355\u4e2a\u5904\u7406\u5668\u7684\u6027\u80fd\u8fdc\u4e0d\u53caCPU\u5f3a\u5927\uff0c\u4f46\u5178\u578b\u7684\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u4e2a\u7247\u6bb5\u7684\u8ba1\u7b97\u5e76\u4e0d\u662f\u975e\u5e38\u590d\u6742\u7684\u3002\u5728\u56fe\u5f62\u8ba1\u7b97\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u5927\u91cf\u5904\u7406\u5668\u548c\u5927\u91cf\u5e76\u884c\u6027\uff0c\u4f7f\u5f97\u5373\u4f7f\u5728\u76f8\u5f53\u5ec9\u4ef7\u7684GPU\u4e0a\u4e5f\u80fd\u5b9e\u73b0\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u56fe\u5f62\u6027\u80fd\u3002</p> <p>As a final remark on GPU hardware, I should note that the computations that are done for different vertices are pretty much independent, and so can potentially be done in parallel. The same is true of the computations for different fragments. In fact, GPUs can have hundreds or thousands of processors that can operate in parallel. Admittedly, the individual processors are much less powerful than a CPU, but then typical per-vertex and per-fragment computations are not very complicated. The large number of processors, and the large amount of parallelism that is possible in graphics computations, makes for impressive graphics performance even on fairly inexpensive GPUs.</p>"},{"location":"cn/c2/","title":"\u7b2c\u4e8c\u7ae0 \u4e8c\u7ef4\u56fe\u5f62\u7ed8\u5236","text":"<p>Two-Dimensional Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>\u901a\u8fc7\u672c\u7ae0\uff0c\u6211\u4eec\u5f00\u59cb\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\uff0c\u9996\u5148\u4ece\u4e8c\u7ef4\u60c5\u51b5\u5f00\u59cb\u3002\u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b\uff0c\u4e8b\u60c5\u66f4\u7b80\u5355\uff0c\u6bd4\u5728\u4e09\u7ef4\u60c5\u51b5\u4e0b\u66f4\u5bb9\u6613\u5f62\u8c61\u5316\uff0c\u4f46\u672c\u7ae0\u6db5\u76d6\u7684\u5927\u90e8\u5206\u6982\u5ff5\u4e5f\u5c06\u4e0e\u4e09\u7ef4\u60c5\u51b5\u975e\u5e38\u76f8\u5173\u3002</p> <p>\u672c\u7ae0\u5f00\u59cb\u7684\u56db\u4e2a\u90e8\u5206\u4ee5\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f\u68c0\u89c6\u4e8c\u7ef4\u56fe\u5f62\uff0c\u800c\u4e0d\u5c06\u5176\u4e0e\u7279\u5b9a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u56fe\u5f62API\u8054\u7cfb\u8d77\u6765\u3002\u8fd9\u4e9b\u90e8\u5206\u4e2d\u7684\u7f16\u7801\u793a\u4f8b\u91c7\u7528\u4e86\u4f2a\u4ee3\u7801\u7f16\u5199\uff0c\u5e94\u8be5\u80fd\u8ba9\u4efb\u4f55\u5177\u6709\u8db3\u591f\u7f16\u7a0b\u80cc\u666f\u7684\u4eba\u7406\u89e3\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4e09\u4e2a\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u5feb\u901f\u67e5\u770b\u4e09\u79cd\u7279\u5b9a\u8bed\u8a00\u4e2d\u7684\u4e8c\u7ef4\u56fe\u5f62\uff1a\u4f7f\u7528Graphics2D\u7684Java\uff0c\u4f7f\u7528HTML &lt;canvas&gt;\u56fe\u5f62\u7684JavaScript\u4ee5\u53caSVG\u3002\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u4e9b\u8bed\u8a00\u5982\u4f55\u4f7f\u7528\u672c\u7ae0\u524d\u9762\u4ecb\u7ecd\u7684\u8bb8\u591a\u901a\u7528\u6982\u5ff5\u3002</p> <p>\u7b2c\u4e8c\u7ae0\u5185\u5bb9:</p> <ul> <li>\u7b2c1\u8282: \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272</li> <li>\u7b2c2\u8282: \u5f62\u72b6</li> <li>\u7b2c3\u8282: \u53d8\u6362</li> <li>\u7b2c4\u8282: \u5206\u5c42\u5efa\u6a21</li> <li>\u7b2c5\u8282: Java Graphics2D</li> <li>\u7b2c6\u8282: HTML Canvas\u56fe\u5f62</li> <li>\u7b2c7\u8282: SVG\uff1a\u4e00\u79cd\u573a\u666f\u63cf\u8ff0\u8bed\u8a00</li> </ul> <p>With this chapter, we begin our study of computer graphics by looking at the two-dimensional case. Things are simpler and a lot easier to visualize in 2D than in 3D, but most of the ideas that are covered in this chapter will also be very relevant to 3D.</p> <p>The chapter begins with four sections that examine 2D graphics in a general way, without tying it to a particular programming language or graphics API. The coding examples in these sections are written in pseudocode that should make sense to anyone with enough programming background to be reading this book. In the next three sections, we will take quick looks at 2D graphics in three particular languages: Java with Graphics2D, JavaScript with HTML &lt;canvas&gt; graphics, and SVG. We will see how these languages use many of the general ideas from earlier in the chapter.</p> <p>Contents of Chapter 2:</p> <ul> <li>Section 1: Pixels, Coordinates, and Colors</li> <li>Section 2: Shapes</li> <li>Section 3: Transforms</li> <li>Section 4: Hierarchical Modeling</li> <li>Section 5: Java Graphics2D</li> <li>Section 6: HTML Canvas Graphics</li> <li>Section 7: SVG: A Scene Description Language</li> </ul>"},{"location":"cn/c2/s1/","title":"\u7b2c1\u8282: \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272","text":"<p>Pixels, Coordinates, and Colors</p> <p>...</p>"},{"location":"cn/c2/s2/","title":"\u7b2c2\u8282: \u5f62\u72b6","text":"<p>Shapes</p> <p>...</p>"},{"location":"cn/c2/s3/","title":"\u7b2c3\u8282: \u53d8\u6362","text":"<p>Transforms</p>"},{"location":"cn/c2/s4/","title":"\u7b2c4\u8282: \u5206\u5c42\u5efa\u6a21","text":"<p>Hierarchical Modeling</p>"},{"location":"cn/c2/s5/","title":"\u7b2c5\u8282: Java Graphics2D","text":"<p>Java Graphics2D</p>"},{"location":"cn/c2/s6/","title":"\u7b2c6\u8282: HTML Canvas\u56fe\u5f62","text":"<p>HTML Canvas Graphics</p>"},{"location":"cn/c2/s7/","title":"\u7b2c7\u8282: SVG\uff1a\u4e00\u79cd\u573a\u666f\u63cf\u8ff0\u8bed\u8a00","text":"<p>SVG: A Scene Description Language</p>"}]}