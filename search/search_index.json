{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba","text":"<ul> <li>\u4e2d\u6587\u7248: \u53bb\u770b</li> <li>\u539f\u7248(en): see</li> </ul>"},{"location":"#\u6e90\u4fe1\u606f","title":"\u6e90\u4fe1\u606f","text":"<ul> <li>\u539f\u7f51\u7ad9: https://math.hws.edu/graphicsbook/index.html</li> <li>\u539fgithub\u6e90\u7801: https://github.com/davidjeck/graphicsbook</li> </ul>"},{"location":"cn/","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba","text":"<p>\u7248\u672c 1.4\uff0c2023 \u5e74 8 \u6708</p> <p>\u4f5c\u8005\uff1a  \u5927\u536b\u00b7J\u00b7\u57c3\u514b  ( eck@hws.edu )</p> <p></p> <p>\u6b22\u8fce\u9605\u8bfb\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b80\u4ecb\uff0c\u8fd9\u662f\u4e00\u672c\u514d\u8d39\u7684\u5728\u7ebf\u6559\u79d1\u4e66\uff0c\u6db5\u76d6\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u548c\u8ba1\u7b97\u673a\u56fe\u5f62\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u672c\u4e66\u65e8\u5728\u7528\u4f5c\u4e00\u5b66\u671f\u8bfe\u7a0b\u7684\u6559\u79d1\u4e66\uff0c\u8be5\u8bfe\u7a0b\u901a\u5e38\u7531\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u7684\u672c\u79d1\u751f\u5b66\u4e60\uff0c\u5e76\u4ee5\u81f3\u5c11\u4e24\u4e2a\u5b66\u671f\u7684\u7f16\u7a0b\u4e3a\u5148\u51b3\u6761\u4ef6\u3002 1.4 \u7248\u672c\u6dfb\u52a0\u4e86\u6709\u5173 WebGPU \u7684\u65b0\u7ae0\u8282\u3002\u8bf7\u53c2\u9605\u524d\u8a00\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002</p> <p>\u672c\u4e66\u7684\u7f51\u9875\u5305\u62ec\u5b9e\u65f6\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u9700\u8981\u73b0\u4ee3\u7f51\u7edc\u6d4f\u89c8\u5668\uff0c\u4f8b\u5982\u6700\u65b0\u7248\u672c\u7684 Chrome\u3001Firefox\u3001Safari \u6216 Edge\u3002\u7b2c 9 \u7ae0\u793a\u4f8b\u9700\u8981\u652f\u6301 WebGPU \u7684\u6d4f\u89c8\u5668\u3002\u867d\u7136\u672c\u4e66\u4e3b\u8981\u662f\u4e3a\u5728\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e0a\u9605\u8bfb\u800c\u8bbe\u8ba1\u7684\uff0c\u4f46\u5927\u591a\u6570\u6f14\u793a\u4e5f\u5e94\u8be5\u9002\u7528\u4e8e\u6700\u65b0\u7684\u79fb\u52a8\u8bbe\u5907\uff0c\u4f7f\u7528\u89e6\u6478\u5c4f\u800c\u4e0d\u662f\u9f20\u6807\u3002</p> <p>\u4e66\u4e2d\u4ee5\u8fd9\u79cd\u98ce\u683c\u663e\u793a\u6216\u5e26\u4e0b\u5212\u7ebf\u7684 \u5355\u8bcd\u6307\u7684\u662f\u672f\u8bed\u8868\u6761\u76ee\uff1b\u5355\u51fb\u8be5\u8bcd\u53ef\u67e5\u770b\u5b9a\u4e49\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u6b64\u7f51\u7ad9\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u4f7f\u7528\u3002\u8fd8\u63d0\u4f9b\u8be5\u6559\u79d1\u4e66\u7684 PDF \u7248\u672c\u3002\u4e0b\u8f7d\u94fe\u63a5\u53ef\u4ee5\u5728\u672c\u9875\u5e95\u90e8\u627e\u5230\u3002</p> <p>\u672c\u4e66\u7684\u7f51\u9875\u5305\u62ec\u5b9e\u65f6\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u9700\u8981\u73b0\u4ee3\u7f51\u7edc\u6d4f\u89c8\u5668\uff0c\u4f8b\u5982\u6700\u65b0\u7248\u672c\u7684 Chrome\u3001Firefox\u3001Safari \u6216 Edge\u3002\u7b2c 9 \u7ae0\u793a\u4f8b\u9700\u8981\u652f\u6301 WebGPU \u7684\u6d4f\u89c8\u5668\u3002\u867d\u7136\u672c\u4e66\u4e3b\u8981\u662f\u4e3a\u5728\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e0a\u9605\u8bfb\u800c\u8bbe\u8ba1\u7684\uff0c\u4f46\u5927\u591a\u6570\u6f14\u793a\u4e5f\u5e94\u8be5\u9002\u7528\u4e8e\u6700\u65b0\u7684\u79fb\u52a8\u8bbe\u5907\uff0c\u4f7f\u7528\u89e6\u6478\u5c4f\u800c\u4e0d\u662f\u9f20\u6807\u3002</p> <p>\u4e66\u4e2d\u4ee5\u8fd9\u79cd\u98ce\u683c\u663e\u793a\u6216\u5e26\u4e0b\u5212\u7ebf\u7684 \u5355\u8bcd\u6307\u7684\u662f\u672f\u8bed\u8868\u6761\u76ee\uff1b\u5355\u51fb\u8be5\u8bcd\u53ef\u67e5\u770b\u5b9a\u4e49\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u6b64\u7f51\u7ad9\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u4f7f\u7528\u3002\u8fd8\u63d0\u4f9b\u8be5\u6559\u79d1\u4e66\u7684 PDF \u7248\u672c\u3002\u4e0b\u8f7d\u94fe\u63a5\u53ef\u4ee5\u5728\u672c\u9875\u5e95\u90e8\u627e\u5230\u3002</p>"},{"location":"cn/#\u7b80\u77ed\u76ee\u5f55","title":"\u7b80\u77ed\u76ee\u5f55","text":"<ul> <li>\u5b8c\u6574\u76ee\u5f55</li> <li>\u524d\u8a00</li> <li>\u7b2c 1 \u7ae0\uff1a\u7b80\u4ecb</li> <li>\u7b2c 2 \u7ae0\uff1a\u4e8c\u7ef4\u56fe\u5f62</li> <li>\u7b2c 3 \u7ae0\uff1aOpenGL 1.1\uff1a\u51e0\u4f55</li> <li>\u7b2c 4 \u7ae0\uff1aOpenGL 1.1\uff1a\u706f\u5149\u548c\u6750\u8d28</li> <li>\u7b2c 5 \u7ae0\uff1aThree.js\uff1a3D \u573a\u666f\u56fe API</li> <li>\u7b2c 6 \u7ae0\uff1aWebGL \u7b80\u4ecb</li> <li>\u7b2c 7 \u7ae0\uff1a\u4f7f\u7528 WebGL \u8fdb\u884c 3D \u56fe\u5f62</li> <li>\u7b2c 8 \u7ae0\uff1a\u8d85\u8d8a\u57fa\u672c 3D \u56fe\u5f62</li> <li>\u7b2c 9 \u7ae0\uff1aWebGPU \u7b80\u4ecb</li> <li>\u9644\u5f55 A\uff1a\u7f16\u7a0b\u8bed\u8a00</li> <li>\u9644\u5f55 B\uff1aBlender\uff1a3D \u5efa\u6a21\u7a0b\u5e8f</li> <li>\u9644\u5f55 C\uff1a\u7528\u4e8e 2D \u56fe\u5f62\u7684 Gimp \u548c Inkscape</li> <li>\u9644\u5f55 D\uff1a\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801</li> <li>\u9644\u5f55 E\uff1a\u672f\u8bed\u8868</li> <li>\u65b0\u95fb</li> </ul> <p>\u00a92015\u20132023\uff0c\u5927\u536b\u00b7J\u00b7\u57c3\u514b\u3002\u672c\u4f5c\u54c1\u6839\u636eCreative Commons Attribution-Noncommercial-ShareAlike 4.0 License \u83b7\u5f97\u8bb8\u53ef\u3002 \uff08\u6b64\u8bb8\u53ef\u5141\u8bb8\u60a8\u4ee5\u672a\u7ecf\u4fee\u6539\u7684\u5f62\u5f0f\u91cd\u65b0\u5206\u53d1\u672c\u4e66\u4ee5\u7528\u4e8e\u975e\u5546\u4e1a\u76ee\u7684\u3002\u5b83\u5141\u8bb8\u60a8\u51fa\u4e8e\u975e\u5546\u4e1a\u76ee\u7684\u5236\u4f5c\u548c\u5206\u53d1\u4fee\u6539\u7248\u672c\uff0c\u53ea\u8981\u60a8\u5305\u542b\u539f\u4f5c\u8005\u7684\u5f52\u5c5e\uff0c\u6e05\u695a\u5730\u63cf\u8ff0\u4fee\u6539\u5185\u5bb9\u60a8\u5236\u4f5c\u5e76\u5728\u4e0e\u539f\u59cb\u4f5c\u54c1\u76f8\u540c\u7684\u8bb8\u53ef\u4e0b\u5206\u53d1\u4fee\u6539\u540e\u7684\u4f5c\u54c1\uff0c\u4f5c\u8005\u53ef\u80fd\u4f1a\u6388\u4e88\u5176\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u7684\u8bb8\u53ef\u3002\u6709\u5173\u5b8c\u6574\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8bb8\u53ef \u3002\uff09 \u672c\u4e66\u7684\u4e3b\u9875\u662f\uff1a http://math.hws.edu/graphicsbook/</p>"},{"location":"cn/#\u4e0b\u8f7d\u94fe\u63a5","title":"\u4e0b\u8f7d\u94fe\u63a5","text":"<ul> <li> <p>\u5b8c\u6574\u7f51\u7ad9\u4e0b\u8f7d\uff1a</p> <ul> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook-web-site.zip \u2014 \u6b64\u201czip\u201d\u5b58\u6863\u5305\u542b\u672c\u6559\u79d1\u4e66\u7f51\u7ad9\u7684\u5b8c\u6574\u526f\u672c\u3002\u60a8\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u7f51\u7edc\u670d\u52a1\u5668\u4e0a\u53d1\u5e03\u7f51\u7ad9\u7684\u526f\u672c\uff0c\u4e5f\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u672c\u5730\u4f7f\u7528\u5b83\u3002\u5927\u5c0f\uff1a26 \u5146\u5b57\u8282\u3002</li> </ul> </li> <li> <p>PDF\u4e0b\u8f7d\uff1a</p> <ul> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook-linked.pdf \u2014 PDF \u7248\u672c\uff0c\u5305\u542b\u7528\u4e8e\u5bfc\u822a\u7684\u5185\u90e8\u94fe\u63a5\u4ee5\u53ca\u6307\u5411\u6e90\u4ee3\u7801\u6587\u4ef6\u548c PDF \u4e2d\u672a\u5305\u542b\u7684\u5176\u4ed6\u8d44\u6e90\u7684\u5916\u90e8\u94fe\u63a5\u3002\u63a8\u8350\u7528\u4e8e\u5c4f\u5e55\u9605\u8bfb\u3002 533 \u9875\u3002\u5927\u5c0f\uff1a6.0 \u5146\u5b57\u8282\u3002</li> <li>https://math.hws.edu/eck/cs424/downloads/graphicsbook.pdf \u2014 \u6ca1\u6709\u94fe\u63a5\u7684 PDF \u7248\u672c\uff0c\u66f4\u9002\u5408\u6253\u5370\u3002 541 \u9875\u3002\u5927\u5c0f\uff1a5.6 \u5146\u5b57\u8282\u3002</li> </ul> </li> </ul>"},{"location":"cn/#\u5370\u5237\u7248","title":"\u5370\u5237\u7248","text":"<p>\u7f51\u7ad9\u548c\u94fe\u63a5\u7684 PDF \u662f\u9605\u8bfb\u672c\u4e66\u7684\u9996\u9009\u7248\u672c\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u9700\u8981\u88c5\u8ba2\u672c\u7684\u8bfb\u8005\uff0c\u6211\u5728\u6309\u9700\u53d1\u5e03\u7f51\u7ad9lulu.com\u4e0a\u63d0\u4f9b\u4e86\u5370\u5237\u7248\u672c\u3002 \uff08\u8bf7\u6ce8\u610f\uff0c\u5370\u5237\u7248\u6309 lulu.com \u7684\u6210\u672c\u51fa\u552e\uff0c\u6211\u4e0d\u4f1a\u4ece\u4e2d\u8d5a\u53d6\u4efb\u4f55\u5229\u6da6\u3002\uff09\u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64\u94fe\u63a5\u8d2d\u4e70\u5370\u5237\u7248\uff1ahttps://www.lulu.com/shop/david-eck/introduction-to-computer-graphics/paperback/product-1jzn2z5r.html</p> <ul> <li>1 August 2015, Version 1.0 released</li> <li>28 January 2016, Version 1.1 released</li> <li>6 January 2018, Version 1.2 released</li> <li>1 August 2021, Version 1.3 released</li> <li>20 December 2021, Version 1.3.1 released</li> <li>1 August 2023, Version 1.4 released</li> </ul>"},{"location":"cn/contents-with-subsections/","title":"\u76ee\u5f55","text":"<p>\u8fd9\u662f\u514d\u8d39\u5728\u7ebf\u6559\u79d1\u4e66\u300a\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8bba\u300b\u7684\u76ee\u5f55\u3002</p> <p>\u524d\u8a00</p>"},{"location":"cn/contents-with-subsections/#\u7b2c\u4e00\u7ae0--\u7b80\u4ecb","title":"\u7b2c\u4e00\u7ae0\uff1a \u7b80\u4ecb","text":"<ul> <li>1.1  \u7ed8\u753b\u4e0e\u7ed8\u56fe</li> <li>1.2  3D\u56fe\u5f62\u5143\u7d20</li> <li>1.3  \u786c\u4ef6\u548c\u8f6f\u4ef6</li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-2-\u7ae0--\u4e8c\u7ef4\u56fe\u5f62","title":"\u7b2c 2 \u7ae0\uff1a  \u4e8c\u7ef4\u56fe\u5f62","text":"<ul> <li>2.1  \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272<ul> <li>2.1.1  \u50cf\u7d20\u5750\u6807</li> <li>2.1.2  \u5b9e\u6570\u5750\u6807\u7cfb</li> <li>2.1.3  \u7eb5\u6a2a\u6bd4</li> <li>2.1.4  \u989c\u8272\u6a21\u578b</li> </ul> </li> <li>2.2  \u5f62\u72b6<ul> <li>2.2.1  \u57fa\u672c\u5f62\u72b6</li> <li>2.2.2  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.2.3  \u591a\u8fb9\u5f62\u3001\u66f2\u7ebf\u548c\u8def\u5f84</li> </ul> </li> <li>2.3  \u53d8\u6362<ul> <li>2.3.1  \u67e5\u770b\u548c\u5efa\u6a21</li> <li>2.3.2  \u7ffb\u8bd1</li> <li>2.3.3  \u65cb\u8f6c</li> <li>2.3.4  \u7ec4\u5408\u53d8\u6362</li> <li>2.3.5  \u7f29\u653e</li> <li>2.3.6  \u526a\u5207</li> <li>2.3.7  \u7a97\u53e3\u5230\u89c6\u53e3</li> <li>2.3.8  \u77e9\u9635\u548c\u5411\u91cf</li> </ul> </li> <li>2.4  \u5c42\u6b21\u5efa\u6a21<ul> <li>2.4.1  \u6784\u5efa\u590d\u6742\u5bf9\u8c61</li> <li>2.4.2  \u573a\u666f\u56fe</li> <li>2.4.3  \u53d8\u6362\u5806\u6808</li> </ul> </li> <li>2.5  Java Graphics2D<ul> <li>2.5.1  \u4e8c\u7ef4\u56fe\u5f62</li> <li>2.5.2  \u5f62\u72b6</li> <li>2.5.3  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.5.4  \u53d8\u6362</li> <li>2.5.5  BufferedImage \u548c\u50cf\u7d20</li> </ul> </li> <li>\u7b2c 2.6 \u8282  HTML Canvas \u56fe\u5f62<ul> <li>2.6.1  2D \u56fe\u5f62\u4e0a\u4e0b\u6587</li> <li>2.6.2  \u5f62\u72b6</li> <li>2.6.3  \u63cf\u8fb9\u548c\u586b\u5145</li> <li>2.6.4  \u53d8\u6362</li> <li>2.6.5  \u8f85\u52a9\u753b\u5e03</li> <li>2.6.6  \u50cf\u7d20\u64cd\u4f5c</li> <li>2.6.7  \u56fe\u7247</li> </ul> </li> <li>2.7  SVG\uff1a\u573a\u666f\u63cf\u8ff0\u8bed\u8a00<ul> <li>2.7.1  SVG \u6587\u6863\u7ed3\u6784</li> <li>2.7.2  \u5f62\u72b6\u3001\u6837\u5f0f\u548c\u53d8\u6362</li> <li>2.7.3  \u591a\u8fb9\u5f62\u548c\u8def\u5f84</li> <li>2.7.4  \u5c42\u6b21\u6a21\u578b</li> <li>2.7.5  \u52a8\u753b</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-3-\u7ae0--opengl-11\u51e0\u4f55","title":"\u7b2c 3 \u7ae0\uff1a OpenGL 1.1\uff1a\u51e0\u4f55","text":"<ul> <li>3.1  OpenGL 1.1 \u4e2d\u7684\u5f62\u72b6\u548c\u989c\u8272<ul> <li>3.1.1  OpenGL\u57fa\u5143</li> <li>3.1.2  OpenGL\u989c\u8272</li> <li>3.1.3  glColor \u548c glVertex \u4e0e\u6570\u7ec4</li> <li>3.1.4  \u6df1\u5ea6\u6d4b\u8bd5</li> </ul> </li> <li>3.2  3D \u5750\u6807\u548c\u53d8\u6362<ul> <li>3.2.1  3D\u5750\u6807</li> <li>3.2.2  \u57fa\u672c 3D \u53d8\u6362</li> <li>3.2.3  \u5c42\u6b21\u5efa\u6a21</li> </ul> </li> <li>3.3  \u6295\u5f71\u4e0e\u89c2\u770b<ul> <li>3.3.1  \u591a\u79cd\u5750\u6807\u7cfb</li> <li>3.3.2  \u89c6\u53e3\u53d8\u6362</li> <li>3.3.3  \u6295\u5f71\u53d8\u6362</li> <li>3.3.4  \u6a21\u578b\u89c6\u56fe\u8f6c\u6362</li> <li>3.3.5  \u76f8\u673a\u62bd\u8c61</li> </ul> </li> <li>3.4  \u591a\u8fb9\u5f62\u7f51\u683c\u548c glDrawArrays<ul> <li>3.4.1  \u7d22\u5f15\u9762\u96c6</li> <li>3.4.2  glDrawArrays\u548cglDrawElements</li> <li>3.4.3  Java \u4e2d\u7684\u6570\u636e\u7f13\u51b2\u533a</li> <li>3.4.4  \u663e\u793a\u5217\u8868\u548cVBO</li> </ul> </li> <li>3.5  \u90e8\u5206\u7ebf\u6027\u4ee3\u6570\u57fa\u7840<ul> <li>3.5.1  \u5411\u91cf\u548c\u5411\u91cf\u6570\u5b66</li> <li>3.5.2  \u77e9\u9635\u548c\u53d8\u6362</li> <li>3.5.3  \u9f50\u6b21\u5750\u6807</li> </ul> </li> <li>3.6  \u4f7f\u7528 GLUT \u548c JOGL<ul> <li>3.6.1  \u4f7f\u7528\u8fc7\u5269</li> <li>3.6.2  \u4f7f\u7528JOGL</li> <li>3.6.3  \u5173\u4e8e glsim.js</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-4-\u7ae0--opengl-11\u706f\u5149\u548c\u6750\u8d28","title":"\u7b2c 4 \u7ae0\uff1a OpenGL 1.1\uff1a\u706f\u5149\u548c\u6750\u8d28","text":"<ul> <li>4.1  \u7167\u660e\u7b80\u4ecb<ul> <li>4.1.1  \u5149\u4e0e\u6750\u6599</li> <li>4.1.2  \u5149\u5c5e\u6027</li> <li>4.1.3  \u6cd5\u5411\u91cf</li> <li>4.1.4  OpenGL 1.1 \u5149\u7167\u65b9\u7a0b</li> </ul> </li> <li>4.2  OpenGL 1.1 \u4e2d\u7684\u5149\u548c\u6750\u8d28<ul> <li>4.2.1  \u4f7f\u7528\u6750\u6599</li> <li>4.2.2  \u5b9a\u4e49\u6cd5\u5411\u91cf</li> <li>4.2.3  \u4f7f\u7528\u706f\u5149</li> <li>4.2.4  \u5168\u5c40\u5149\u7167\u5c5e\u6027</li> </ul> </li> <li>4.3  \u56fe\u50cf\u7eb9\u7406<ul> <li>4.3.1  \u7eb9\u7406\u5750\u6807</li> <li>4.3.2  MipMap \u548c\u8fc7\u6ee4</li> <li>4.3.3  \u7eb9\u7406\u76ee\u6807\u548c\u7eb9\u7406\u53c2\u6570</li> <li>4.3.4  \u7eb9\u7406\u53d8\u6362</li> <li>4.3.5  \u4ece\u5185\u5b58\u52a0\u8f7d\u7eb9\u7406</li> <li>4.3.6  \u6765\u81ea\u989c\u8272\u7f13\u51b2\u533a\u7684\u7eb9\u7406</li> <li>4.3.7  \u7eb9\u7406\u5bf9\u8c61</li> <li>4.3.8  \u5728 C \u4e2d\u52a0\u8f7d\u7eb9\u7406</li> <li>4.3.9  \u901a\u8fc7 JOGL \u4f7f\u7528\u7eb9\u7406</li> </ul> </li> <li>4.4  \u706f\u5149\u3001\u76f8\u673a\u3001\u52a8\u4f5c<ul> <li>4.4.1  \u5c5e\u6027\u6808</li> <li>4.4.2  \u79fb\u52a8\u76f8\u673a</li> <li>4.4.3  \u79fb\u52a8\u5149</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-5-\u7ae0--threejs3d-\u573a\u666f\u56fe-api","title":"\u7b2c 5 \u7ae0\uff1a Three.js\uff1a3D \u573a\u666f\u56fe API","text":"<ul> <li>5.1  Three.js \u57fa\u7840\u77e5\u8bc6<ul> <li>5.1.1  \u5173\u4e8e JavaScript \u6a21\u5757</li> <li>5.1.2  \u573a\u666f\u3001\u6e32\u67d3\u5668\u3001\u76f8\u673a</li> <li>5.1.3  \u4e09.Object3D</li> <li>5.1.4  \u7269\u4f53\u3001\u51e0\u4f55\u5f62\u72b6\u3001\u6750\u6599</li> <li>5.1.5  \u706f\u5149</li> <li>5.1.6  \u5efa\u6a21\u793a\u4f8b</li> </ul> </li> <li>5.2  \u6784\u5efa\u5bf9\u8c61<ul> <li>5.2.1  \u591a\u8fb9\u5f62\u7f51\u683c\u548c IFS</li> <li>5.2.2  \u66f2\u7ebf\u548c\u66f2\u9762</li> <li>5.2.3  \u7eb9\u7406</li> <li>5.2.4  \u53d8\u6362</li> <li>5.2.5  \u52a0\u8f7d\u6a21\u578b</li> </ul> </li> <li>5.3  \u5176\u4ed6\u529f\u80fd<ul> <li>5.3.1  \u5b9e\u4f8b\u5316\u7f51\u683c</li> <li>5.3.2  \u7528\u6237\u8f93\u5165</li> <li>5.3.3  \u9634\u5f71</li> <li>5.3.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406\u548c\u5929\u7a7a\u76d2</li> <li>5.3.5  \u53cd\u5c04\u548c\u6298\u5c04</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-6-\u7ae0--webgl-\u7b80\u4ecb","title":"\u7b2c 6 \u7ae0\uff1a  WebGL \u7b80\u4ecb","text":"<ul> <li>6.1  \u53ef\u7f16\u7a0b\u6d41\u6c34\u7ebf<ul> <li>6.1.1  WebGL \u56fe\u5f62\u4e0a\u4e0b\u6587</li> <li>6.1.2  \u7740\u8272\u5668\u7a0b\u5e8f</li> <li>6.1.3  \u7ba1\u9053\u4e2d\u7684\u6570\u636e\u6d41</li> <li>6.1.4  \u7edf\u4e00\u53d8\u91cf\u7684\u503c</li> <li>6.1.5  \u5c5e\u6027\u503c</li> <li>6.1.6  \u7ed8\u5236\u57fa\u5143</li> <li>6.1.7  WebGL 2.0\uff1a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61</li> <li>6.1.8  WebGL 2.0\uff1a\u5b9e\u4f8b\u5316\u7ed8\u56fe</li> </ul> </li> <li>6.2  \u7b2c\u4e00\u4e2a\u4f8b\u5b50<ul> <li>6.2.1  WebGL \u4e0a\u4e0b\u6587\u9009\u9879</li> <li>6.2.2  GLSL \u7b80\u4ecb</li> <li>6.2.3  WebGL \u4e2d\u7684 RGB \u4e09\u89d2\u5f62</li> <li>6.2.4  \u5f62\u72b6\u538b\u6a21</li> <li>6.2.5  POINTS\u539f\u8bed</li> <li>6.2.6  WebGL \u9519\u8bef\u5904\u7406</li> </ul> </li> <li>6.3  GLSL<ul> <li>6.3.1  \u57fa\u672c\u7c7b\u578b</li> <li>6.3.2  \u6570\u636e\u7ed3\u6784</li> <li>6.3.3  \u9884\u9009\u8d5b</li> <li>6.3.4  \u8868\u8fbe\u5f0f</li> <li>6.3.5  \u51fd\u6570\u5b9a\u4e49</li> <li>6.3.6  \u63a7\u5236\u7ed3\u6784</li> <li>6.3.7  \u9650\u5236</li> </ul> </li> <li>6.4  \u56fe\u50cf\u7eb9\u7406<ul> <li>6.4.1  \u7eb9\u7406\u5355\u5143\u548c\u7eb9\u7406\u5bf9\u8c61</li> <li>6.4.2  \u5904\u7406\u56fe\u50cf</li> <li>6.4.3  \u66f4\u591a\u5236\u4f5c\u7eb9\u7406\u7684\u65b9\u6cd5</li> <li>6.4.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> <li>6.4.5  \u8ba1\u7b97\u793a\u4f8b</li> <li>6.4.6  WebGL 2.0 \u4e2d\u7684\u7eb9\u7406</li> </ul> </li> <li>6.5  \u5b9e\u73b0 2D \u53d8\u6362<ul> <li>6.5.1  GLSL \u4e2d\u7684\u8f6c\u6362</li> <li>6.5.2  JavaScript \u4e2d\u7684\u8f6c\u6362</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-7-\u7ae0--\u4f7f\u7528-webgl-\u8fdb\u884c-3d-\u56fe\u5f62","title":"\u7b2c 7 \u7ae0\uff1a \u4f7f\u7528 WebGL \u8fdb\u884c 3D \u56fe\u5f62","text":"<ul> <li>7.1  3D\u53d8\u6362<ul> <li>7.1.1  \u5173\u4e8e\u7740\u8272\u5668\u811a\u672c</li> <li>7.1.2  \u4ecb\u7ecdglMatrix</li> <li>7.1.3  \u53d8\u6362\u5750\u6807</li> <li>7.1.4  \u53d8\u6362\u6cd5\u7ebf</li> <li>7.1.5  \u9f20\u6807\u65cb\u8f6c</li> </ul> </li> <li>7.2 \u7167\u660e\u548c\u6750\u6599<ul> <li>7.2.1  \u6700\u5c0f\u7167\u660e</li> <li>7.2.2  \u955c\u9762\u53cd\u5c04\u548c Phong \u7740\u8272</li> <li>7.2.3  \u589e\u52a0\u590d\u6742\u6027</li> <li>7.2.4  \u4e24\u4fa7\u7167\u660e</li> <li>7.2.5  \u6447\u5934\u706f</li> <li>7.2.6  \u805a\u5149\u706f</li> <li>7.2.7  \u5149\u8870\u51cf</li> <li>7.2.8  \u78c1\u76d8\u4e16\u754c2</li> </ul> </li> <li>7.3 \u7eb9\u7406<ul> <li>7.3.1  \u4f7f\u7528 glMatrix \u8fdb\u884c\u7eb9\u7406\u53d8\u6362</li> <li>7.3.2  \u751f\u6210\u7684\u7eb9\u7406\u5750\u6807</li> <li>7.3.3  \u7a0b\u5e8f\u7eb9\u7406</li> <li>7.3.4  \u51f9\u51f8\u8d34\u56fe</li> <li>7.3.5  \u73af\u5883\u6620\u5c04</li> </ul> </li> <li>7.4 \u5e27\u7f13\u51b2\u533a<ul> <li>7.4.1  \u5e27\u7f13\u51b2\u533a\u64cd\u4f5c</li> <li>7.4.2  \u6e32\u67d3\u5230\u7eb9\u7406</li> <li>7.4.3  \u6e32\u67d3\u7f13\u51b2\u533a</li> <li>7.4.4  \u52a8\u6001\u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> </ul> </li> <li>7.5 WebGL \u6269\u5c55<ul> <li>7.5.1  \u5404\u5411\u5f02\u6027\u8fc7\u6ee4</li> <li>7.5.2  \u6d6e\u70b9\u989c\u8272</li> <li>7.5.3  WebGL 1.0 \u4e2d\u7684\u5b9e\u4f8b\u5316\u7ed8\u56fe</li> <li>7.5.4  \u5ef6\u8fdf\u7740\u8272</li> <li>7.5.5  WebGL 2.0 \u4e2d\u7684\u591a\u4e2a\u7ed8\u5236\u7f13\u51b2\u533a</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-8-\u7ae0--\u8d85\u8d8a\u57fa\u672c-3d-\u56fe\u5f62","title":"\u7b2c 8 \u7ae0\uff1a \u8d85\u8d8a\u57fa\u672c 3D \u56fe\u5f62","text":"<ul> <li>8.1  \u5149\u7ebf\u8ffd\u8e2a<ul> <li>8.1.1  \u5149\u7ebf\u6295\u5c04</li> <li>8.1.2  \u9012\u5f52\u5149\u7ebf\u8ffd\u8e2a</li> <li>8.1.3  \u5149\u7ebf\u8ffd\u8e2a\u7684\u5c40\u9650\u6027</li> </ul> </li> <li>8.2  \u8def\u5f84\u8ffd\u8e2a<ul> <li>8.2.1  BSDF</li> <li>8.2.2  \u8def\u5f84\u8ffd\u8e2a\u7b97\u6cd5</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u7b2c-9-\u7ae0--webgpu-\u7b80\u4ecb","title":"\u7b2c 9 \u7ae0\uff1a WebGPU \u7b80\u4ecb","text":"<ul> <li>9.1  WebGPU \u57fa\u7840\u77e5\u8bc6<ul> <li>9.1.1  \u9002\u914d\u5668\u3001\u8bbe\u5907\u548c\u753b\u5e03</li> <li>9.1.2  \u7740\u8272\u5668\u6a21\u5757</li> <li>9.1.3  \u6e32\u67d3\u7ba1\u7ebf</li> <li>9.1.4  \u7f13\u51b2\u533a</li> <li>9.1.5  \u7ed8\u56fe</li> <li>9.1.6  \u591a\u4e2a\u9876\u70b9\u8f93\u5165</li> <li>9.1.7  \u81ea\u52a8\u7ed1\u5b9a\u7ec4\u5e03\u5c40</li> </ul> </li> <li>9.2  \u5b9e\u4f8b\u548c\u7d22\u5f15<ul> <li>9.2.1  \u5b9e\u4f8b\u7ed8\u56fe</li> <li>9.2.2  \u7d22\u5f15\u7ed8\u56fe</li> <li>9.2.3  \u7ed8\u5236\u591a\u4e2a\u57fa\u5143</li> <li>9.2.4  \u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528\u7d22\u5f15</li> <li>9.2.5  \u591a\u91cd\u91c7\u6837</li> </ul> </li> <li>9.3  WGSL<ul> <li>9.3.1  \u5730\u5740\u7a7a\u95f4\u548c\u5bf9\u9f50</li> <li>9.3.2  \u6570\u636e\u7c7b\u578b</li> <li>9.3.3  \u58f0\u660e\u548c\u6ce8\u91ca</li> <li>9.3.4  \u8868\u8fbe\u5f0f\u548c\u5185\u7f6e\u51fd\u6570</li> <li>9.3.5  \u8bed\u53e5\u548c\u63a7\u5236</li> <li>9.3.6  \u51fd\u6570\u5b9a\u4e49</li> </ul> </li> <li>9.4  \u4f7f\u7528 WebGPU \u7684 3D \u56fe\u5f62<ul> <li>9.4.1  \u6df1\u5ea6\u6d4b\u8bd5</li> <li>9.4.2  \u5750\u6807\u7cfb</li> <li>9.4.3  \u8fdb\u5165 3D</li> <li>9.4.4  wgpu \u77e9\u9635</li> <li>9.4.5  \u518d\u6b21\u78c1\u76d8\u4e16\u754c</li> </ul> </li> <li>9.5  \u7eb9\u7406<ul> <li>9.5.1  \u7eb9\u7406\u5750\u6807</li> <li>9.5.2  \u7eb9\u7406\u548c\u91c7\u6837\u5668</li> <li>9.5.3  Mipmap</li> <li>9.5.4  \u7acb\u65b9\u4f53\u8d34\u56fe\u7eb9\u7406</li> <li>9.5.5  \u7eb9\u7406\u683c\u5f0f</li> </ul> </li> <li>9.6  \u8ba1\u7b97\u7740\u8272\u5668<ul> <li>9.6.1  \u5de5\u4f5c\u7ec4\u548c\u8c03\u5ea6</li> <li>9.6.2  \u8ba1\u7b97\u7740\u8272\u5668</li> <li>9.6.3  \u6a21\u62df</li> <li>9.6.4  \u68c0\u7d22\u8f93\u51fa</li> </ul> </li> <li>9.7  \u4e00\u4e9b\u7ec6\u8282<ul> <li>9.7.1  \u4e22\u5931\u8bbe\u5907</li> <li>9.7.2  \u9519\u8bef\u5904\u7406</li> <li>9.7.3  \u9650\u5236\u548c\u7279\u5f81</li> <li>9.7.4  \u6e32\u67d3\u901a\u9053\u9009\u9879</li> <li>9.7.5  \u6e32\u67d3\u7ba1\u7ebf\u9009\u9879</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-a--\u7f16\u7a0b\u8bed\u8a00","title":"\u9644\u5f55 A\uff1a \u7f16\u7a0b\u8bed\u8a00","text":"<ul> <li>A.1  Java \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.1.1  \u57fa\u672c\u8bed\u8a00\u7ed3\u6784</li> <li>A.1.2  \u5bf9\u8c61\u548c\u6570\u636e\u7ed3\u6784</li> <li>A.1.3  \u7a97\u53e3\u548c\u4e8b\u4ef6</li> </ul> </li> <li>A.2  C \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.2.1  \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6</li> <li>A.2.2  \u6307\u9488\u548c\u6570\u7ec4</li> <li>A.2.3  \u6570\u636e\u7ed3\u6784</li> </ul> </li> <li>A.3  JavaScript \u7f16\u7a0b\u8bed\u8a00<ul> <li>A.3.1  \u6838\u5fc3\u8bed\u8a00</li> <li>A.3.2  \u6570\u7ec4\u548c\u5bf9\u8c61</li> <li>A.3.3  \u7f51\u9875\u4e0a\u7684 JavaScript</li> <li>A.3.4  \u4e0e\u9875\u9762\u4ea4\u4e92</li> </ul> </li> <li>A.4  JavaScript Promise \u548c\u5f02\u6b65\u51fd\u6570<ul> <li>A.4.1  \u5f02\u6b65\u51fd\u6570\u548c\u7b49\u5f85</li> <li>A.4.2  \u76f4\u63a5\u4f7f\u7528 Promise</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-b--blender3d-\u5efa\u6a21\u7a0b\u5e8f","title":"\u9644\u5f55 B\uff1a Blender\uff1a3D \u5efa\u6a21\u7a0b\u5e8f","text":"<ul> <li>B.1 \u8282  Blender \u57fa\u7840\u77e5\u8bc6<ul> <li>B.1.1  3D \u89c6\u56fe</li> <li>B.1.2  \u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u573a\u666f\u4e2d</li> <li>B.1.3  \u7f16\u8f91\u6a21\u5f0f</li> <li>B.1.4  \u5149\u3001\u6750\u8d28\u548c\u7eb9\u7406</li> <li>B.1.5  \u4fdd\u5b58\u60a8\u7684\u5de5\u4f5c</li> <li>B.1.6  \u66f4\u591a\u529f\u80fd</li> </ul> </li> <li>B.2 \u8282  Blender \u5efa\u6a21<ul> <li>B.2.1  \u6587\u672c</li> <li>B.2.2  \u66f2\u7ebf</li> <li>B.2.3  \u6bd4\u4f8b\u7f16\u8f91</li> <li>B.2.4  \u62c9\u4f38\u7f51\u683c</li> <li>B.2.5  \u7f51\u683c\u4fee\u6539\u5668</li> </ul> </li> <li>B.3 \u8282  Blender \u52a8\u753b<ul> <li>B.3.1  \u5173\u952e\u5e27\u52a8\u753b\u548c\u51fd\u6570\u66f2\u7ebf</li> <li>B.3.2  \u8ffd\u8e2a</li> <li>B.3.3  \u8def\u5f84\u52a8\u753b</li> <li>B.3.4  \u6e32\u67d3\u52a8\u753b</li> </ul> </li> <li>B.4 \u8282  \u6709\u5173\u5149\u548c\u6750\u6599\u7684\u66f4\u591a\u4fe1\u606f<ul> <li>B.4.1  \u7167\u660e</li> <li>B.4.2  Eevee \u4e0e Cycles</li> <li>B.4.3  \u7740\u8272\u5668\u7f16\u8f91\u5668</li> </ul> </li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-c--\u7528\u4e8e-2d-\u56fe\u5f62\u7684-gimp-\u548c-inkscape","title":"\u9644\u5f55 C\uff1a \u7528\u4e8e 2D \u56fe\u5f62\u7684 Gimp \u548c Inkscape","text":"<ul> <li>C.1 \u8282  Gimp\uff1a2D \u7ed8\u753b\u7a0b\u5e8f<ul> <li>C.1.1  \u7ed8\u753b\u5de5\u5177</li> <li>C.1.2  \u9009\u62e9\u548c\u8def\u5f84</li> <li>C.1.3  \u5c42</li> </ul> </li> <li>C.2 \u8282  Inkscape\uff1a2D \u7ed8\u56fe\u7a0b\u5e8f</li> </ul>"},{"location":"cn/contents-with-subsections/#\u9644\u5f55-d-\u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801","title":"\u9644\u5f55 D\uff1a \u793a\u4f8b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801","text":""},{"location":"cn/contents-with-subsections/#\u9644\u5f55-e-\u672f\u8bed\u8868","title":"\u9644\u5f55 E\uff1a \u672f\u8bed\u8868","text":""},{"location":"cn/glossary/","title":"\u672f\u8bed\u8868","text":""},{"location":"cn/glossary/#a","title":"A","text":""},{"location":"cn/glossary/#abstract-class","title":"abstract class","text":"\u4e2d\u6587\u82f1\u6587 <p>In object-oriented programming, a class that is meant to be used only as a basis for subclasses. Objects can be created from the subclasses, but not from the abstract class itself. The purpose of an abstract class is to define the properties and behaviors that all of its subclasses have in common.</p> <p>In object-oriented programming, a class that is meant to be used only as a basis for subclasses. Objects can be created from the subclasses, but not from the abstract class itself. The purpose of an abstract class is to define the properties and behaviors that all of its subclasses have in common.</p>"},{"location":"cn/glossary/#address-space-in-wgsl","title":"address space (in WGSL)","text":"\u4e2d\u6587\u82f1\u6587 <p>WGSL memory is divided into address spaces. From the WGSL specification: \"Each address space has unique properties determining mutability, visibility, the values it may contain, and how to use variables with it.\"</p> <p>WGSL memory is divided into address spaces. From the WGSL specification: \"Each address space has unique properties determining mutability, visibility, the values it may contain, and how to use variables with it.\"</p>"},{"location":"cn/glossary/#affine-transform","title":"affine transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that preserves parallel lines. That is, when the transform is applied to a pair of lines that are parallel, then the resulting transformed lines are also parallel. An affine transform, T, has the property that the transform of the line segment between a point (x1,y1) and a point (x2,y2) is the line between the points T(x1,y1) and T(x2,y2). Effectively, the transform of a line segment can be computed just by transforming its two endpoints. This makes affine transforms very efficient for computer graphics. Any affine transform can be represented as a composition of rotations, translations, and scalings.</p> <p>A transform that preserves parallel lines. That is, when the transform is applied to a pair of lines that are parallel, then the resulting transformed lines are also parallel. An affine transform, T, has the property that the transform of the line segment between a point (x1,y1) and a point (x2,y2) is the line between the points T(x1,y1) and T(x2,y2). Effectively, the transform of a line segment can be computed just by transforming its two endpoints. This makes affine transforms very efficient for computer graphics. Any affine transform can be represented as a composition of rotations, translations, and scalings.</p>"},{"location":"cn/glossary/#alignment-in-wgsl","title":"alignment (in WGSL)","text":"\u4e2d\u6587\u82f1\u6587 <p>Restrictions on the legal location of a value in memory, depending on the data type. For example, the address of a vec3f variable in WGSL must be a multiple of 16.</p> <p>Restrictions on the legal location of a value in memory, depending on the data type. For example, the address of a vec3f variable in WGSL must be a multiple of 16.</p>"},{"location":"cn/glossary/#alpha-blending","title":"alpha blending","text":"\u4e2d\u6587\u82f1\u6587 <p>Using the alpha component of a color to blend the color with a background color, when the color is drawn over the background color. That is, the new color of a pixel is obtained by blending the drawing color with the current color, with the degree of blending depending on the alpha component of the drawing color. Alpha blending is most commonly used to simulate transparency.</p> <p>Using the alpha component of a color to blend the color with a background color, when the color is drawn over the background color. That is, the new color of a pixel is obtained by blending the drawing color with the current color, with the degree of blending depending on the alpha component of the drawing color. Alpha blending is most commonly used to simulate transparency.</p>"},{"location":"cn/glossary/#alpha-color-component","title":"alpha color component","text":"\u4e2d\u6587\u82f1\u6587 <p>An extra component (that is, one of the numbers that are used to specify a color) in a color model that is not part of the actual color specification. The alpha component is extra information. It is most often used to specify the degree of transparency of a color.</p> <p>An extra component (that is, one of the numbers that are used to specify a color) in a color model that is not part of the actual color specification. The alpha component is extra information. It is most often used to specify the degree of transparency of a color.</p>"},{"location":"cn/glossary/#ambient-color","title":"ambient color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of ambient light in the environment that is reflected by a surface.</p> <p>A material property that represents the proportion of ambient light in the environment that is reflected by a surface.</p>"},{"location":"cn/glossary/#ambient-light","title":"ambient light","text":"\u4e2d\u6587\u82f1\u6587 <p>Directionless light that exists in an environment but does not seem to come from a particular source in the environment. An approximation for light that has been reflected so many times that its original source can't be identified. Ambient light illuminates all objects in a scene equally.</p> <p>Directionless light that exists in an environment but does not seem to come from a particular source in the environment. An approximation for light that has been reflected so many times that its original source can't be identified. Ambient light illuminates all objects in a scene equally.</p>"},{"location":"cn/glossary/#ambient-occlusion","title":"ambient occlusion","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering technique that takes into account the fact that ambient light will illuminate different surfaces to varying extents, depending on the degree to which ambient light is blocked, or \"occluded,\" from reaching each surface by other geometry in the scene. Ambient occlusion is an improvement on basic ambient lighting, but, like ambient light itself, it is not an actual physical phenomenon.</p> <p>A rendering technique that takes into account the fact that ambient light will illuminate different surfaces to varying extents, depending on the degree to which ambient light is blocked, or \"occluded,\" from reaching each surface by other geometry in the scene. Ambient occlusion is an improvement on basic ambient lighting, but, like ambient light itself, it is not an actual physical phenomenon.</p>"},{"location":"cn/glossary/#anaglyph-stereo","title":"anaglyph stereo","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for combining stereographic images of a scene, one for the left eye and one for the right eye, into a single image. Typically, the image for the left eye is drawn using only shades of red, and the image for the right eye contains only blue and green color components. The 3D effect can be seen by viewing the combined image through red/cyan glasses, which allow each eye to see only the image that is intended for that eye.</p> <p>A technique for combining stereographic images of a scene, one for the left eye and one for the right eye, into a single image. Typically, the image for the left eye is drawn using only shades of red, and the image for the right eye contains only blue and green color components. The 3D effect can be seen by viewing the combined image through red/cyan glasses, which allow each eye to see only the image that is intended for that eye.</p>"},{"location":"cn/glossary/#animation","title":"animation","text":"\u4e2d\u6587\u82f1\u6587 <p>A sequence of images that, when displayed quickly one after the other, will produce the impression of continuous motion or change. The term animation also refers to the process of creating such image sequences.</p> <p>A sequence of images that, when displayed quickly one after the other, will produce the impression of continuous motion or change. The term animation also refers to the process of creating such image sequences.</p>"},{"location":"cn/glossary/#anisotropic-filtering","title":"anisotropic filtering","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for more accurate sampling of texture images, in the case where a pixel on the surface that is being textured corresponds to a non-rectangular region in the texture. Anisotropic filtering is available as an optional extension in WebGL.</p> <p>A technique for more accurate sampling of texture images, in the case where a pixel on the surface that is being textured corresponds to a non-rectangular region in the texture. Anisotropic filtering is available as an optional extension in WebGL.</p>"},{"location":"cn/glossary/#antialiasing","title":"antialiasing","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique used to reduce the jagged or \"staircase\" appearance of diagonal lines, text, and other shapes that are drawn using pixels. When a pixel is only partly covered by a geometric shape, then the color of the pixel is a blend of the color of the shape and the color of the background, with the degree of blending depending on the fraction of the pixel that is covered by the geometric shape.</p> <p>A technique used to reduce the jagged or \"staircase\" appearance of diagonal lines, text, and other shapes that are drawn using pixels. When a pixel is only partly covered by a geometric shape, then the color of the pixel is a blend of the color of the shape and the color of the background, with the degree of blending depending on the fraction of the pixel that is covered by the geometric shape.</p>"},{"location":"cn/glossary/#api","title":"API","text":"\u4e2d\u6587\u82f1\u6587 <p>Application Programming Interface. A collection of related classes, functions, constants, etc., for performing some task. An API is an \"interface\" in the sense that it can be used without understanding how its functionality is actually implemented.</p>"},{"location":"cn/glossary/#aspect-ratio","title":"aspect ratio","text":"\u4e2d\u6587\u82f1\u6587 <p>The ratio of the width, w, of a rectangle to the height, h, of the rectangle, expressed either as a ratio w:h or as a fraction w/h.</p>"},{"location":"cn/glossary/#async-function","title":"async function","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript, an async function is one that can use an \"await\" statement to wait for the result of a promise. When an await statement is executed, the execution of the async function is suspended until the promise has either been fulfilled or rejected, giving other JavaScript code a chance to run in the meantime.</p>"},{"location":"cn/glossary/#attenuation","title":"attenuation","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to the way that illumination from a point light or spot light decreases with distance from the light. Physically, illumination should decrease with the square of the distance, but computer graphics often uses a linear attenuation with distance, or no attenuation at at all.</p>"},{"location":"cn/glossary/#attribute","title":"attribute","text":"\u4e2d\u6587\u82f1\u6587 <p>A property, such as color, of a graphical object. An image can be specified by the geometric shapes that it contains, together with their attributes.</p>"},{"location":"cn/glossary/#attribute-variable","title":"attribute variable","text":"\u4e2d\u6587\u82f1\u6587 <p>Variables that represent input to the vertex shader in a programmable graphics pipeline. An attribute variable can take on a different value for each vertex in a primitive.</p>"},{"location":"cn/glossary/#axis-of-rotation","title":"axis of rotation","text":"\u4e2d\u6587\u82f1\u6587 <p>Rotation in 3D space is rotation about a line, which is called the axis of rotation. The axis of rotation remains fixed, while everything else moves in circles around the axis.</p>"},{"location":"cn/glossary/#b","title":"B","text":""},{"location":"cn/glossary/#back-face","title":"back face","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the two sides of a polygon in 3D. A polygon has two sides. One is taken to be the front face, and the other is the back face. In OpenGL, the difference is determined by the order in which the vertices of the polygon are enumerated. The default is that, seen from the back, the vertices are enumerated in clockwise order around the polygon.</p>"},{"location":"cn/glossary/#barycentric-coordinates","title":"barycentric coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate system on a triangle in which a point is written as a linear combination of the vertices of the triangle, that is, aA+bB+c*C, where A, B, and C are the vertices and a, b, and c are numbers. Any point in the triangle can be written in this form where the coefficients a, b, and c have values in the range 0 to 1 and a+b+c is equal to 1.</p>"},{"location":"cn/glossary/#bezier-curve","title":"Bezier curve","text":"\u4e2d\u6587\u82f1\u6587 <p>A smooth curve between two points defined by parametric polynomial equations. A cubic Bezier curve segment is defined by its two endpoints P1 and P2 and by two control points C1 and C2. The tangent to the curve (its direction and speed) at P1 is given by the line from P1 to C1. The tangent vector to the curve at P2 is given by the line from C2 to P2. A quadratic Bezier curve is defined by its two endpoints and a single control point C. The tangent at each endpoint is the line between that endpoint and C.</p>"},{"location":"cn/glossary/#bind-group-in-webgpu","title":"bind group (in WebGPU)","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that can hold resources such as buffers, textures, and samples, for input into a pipeline.</p>"},{"location":"cn/glossary/#blender","title":"Blender","text":"\u4e2d\u6587\u82f1\u6587 <p>A free and open source 3D modeling and animation program.</p>"},{"location":"cn/glossary/#bresenhams-line-algorithm","title":"Bresenham's line algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A specific algorithm for deciding which pixels to color to represent a geometric line segment, using only integer arithmetic. The algorithm can be implemented very efficiently in computer hardware</p>"},{"location":"cn/glossary/#bsdf","title":"BSDF","text":"\u4e2d\u6587\u82f1\u6587 <p>Bidirectional Scattering Distribution Function. A generalization of the idea of \"material\" in 3D graphics. A BSDF gives the probability that a light ray that arrives at point of space from one direction will leave that point heading in a another direction. The probability is a function of the two directions, the point, and the wavelength of the light. One kind of scattering is reflection of light from a surface. For that case, the term BRDF (Bidirectional Reflectance Distribution Function) is used.</p>"},{"location":"cn/glossary/#bumpmapping","title":"bumpmapping","text":"\u4e2d\u6587\u82f1\u6587 <p>Using a texture to modify the normal vectors on a surface, to give the appearance of variations in height without actually modifying the geometry of the surface.</p>"},{"location":"cn/glossary/#camera","title":"camera","text":"\u4e2d\u6587\u82f1\u6587 <p>In 3D computer graphics, an object that combines the projection and viewing transforms into an abstraction that imitates a physical camera or eye.</p>"},{"location":"cn/glossary/#c","title":"C","text":""},{"location":"cn/glossary/#clip-coordinates","title":"clip coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The default coordinate system in OpenGL. The projection transform maps the 3D scene to clip coordinates. The rendered image will show the contents of the cube in the clip coordinate system that contains x, y, and z values in the range from -1 to 1; anything outside that range is \"clipped\" away.</p>"},{"location":"cn/glossary/#color-buffer","title":"color buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, the region of memory that holds the color data for the image. It acts as the drawing surface where images are rendered.</p>"},{"location":"cn/glossary/#color-component","title":"color component","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the numbers used in a color model to specify a color. For example, in the RGB color model, a color is specified by three color components representing the amounts of red, green, and blue in the color.</p>"},{"location":"cn/glossary/#color-gamut","title":"color gamut","text":"\u4e2d\u6587\u82f1\u6587 <p>The color gamut of a display device, such as a printer or computer screen, is the set of colors can be displayed by the device.</p>"},{"location":"cn/glossary/#color-mask","title":"color mask","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a setting that determines which \"channels\" in the color buffer are written during rendering. The channels are the RGBA color components red, green, blue, and alpha. A color mask consists of four boolean values, one for each channel. A false value prevents any change from being made to the corresponding color component in the color buffer.</p>"},{"location":"cn/glossary/#color-model","title":"color model","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of specifying colors numerically. Each color that can represented in a color model is assigned one or more numerical component values. An example is the RGB color model, where a color is specified by three numbers giving the red, green, and blue components of the color.</p>"},{"location":"cn/glossary/#column-major-order","title":"column-major order","text":"\u4e2d\u6587\u82f1\u6587 <p>Column-by-column ordering of the elements of a two-dimensional matrix; that is, an ordering that starts with the elements in the first column, followed by the elements in the second column, and so on. Column-major order is used for matrices in OpenGL and GLSL.</p>"},{"location":"cn/glossary/#compute-shader","title":"compute shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A stage in a GPU pipeline that does purely computational work, rather than participating directly in graphical rendering.</p>"},{"location":"cn/glossary/#constructor","title":"constructor","text":"\u4e2d\u6587\u82f1\u6587 <p>In object-oriented programming, a subroutine that is used to create objects. A constructor for a class creates and initializes objects belonging to that class.</p>"},{"location":"cn/glossary/#control-point","title":"control point","text":"\u4e2d\u6587\u82f1\u6587 <p>A point that does not lie on the curve but that is used to help control the shape of the curve. For example, a control point for a Bezier curve segment is used to specify the tangent vector (direction and speed) of the curve at an endpoint.</p>"},{"location":"cn/glossary/#convex","title":"convex","text":"\u4e2d\u6587\u82f1\u6587 <p>A convex geometric shape has the property that whenever two points are contained in the shape, then the line segment between those two points is entirely contained in the shape.</p>"},{"location":"cn/glossary/#coordinate-system","title":"coordinate system","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of assigning numerical coordinates to geometric points. In two dimensions, each point corresponds to a pair of numbers. In three dimensions, each point corresponds to a triple of numbers.</p>"},{"location":"cn/glossary/#cpu","title":"CPU","text":"\u4e2d\u6587\u82f1\u6587 <p>The Central Processing Unit in a computer, the component that actually executes programs. The CPU reads machine language instructions from the computer's memory and carries them out.</p>"},{"location":"cn/glossary/#cross-product","title":"cross product","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector product of two 3D vectors. The cross product of v and w is a vector that is perpendicular to both v and w and whose length is equal to the absolute value of the sine of the angle between v and w. If v=(x,y,z) and w=(a,b,c), then their cross product is the vector (yc-zb,za-xc,xb-ya).</p>"},{"location":"cn/glossary/#css","title":"CSS","text":"\u4e2d\u6587\u82f1\u6587 <p>Cascading Style Sheets. A language that is used for specifying the style, or presentation, of the content of web pages. CSS can control things like colors, backgrounds, fonts, shadows, borders, and the size and position of elements of the page.</p>"},{"location":"cn/glossary/#cubemap-texture","title":"cubemap texture","text":"<pre><code>A texture made up of six images, one for each of the directions positive x, negative x, positive y, negative y, positive z, and negative z. The images are intended to include everything that can be seen from a given point. Cubemap textures are used for environment mapping and skyboxes.\n</code></pre>"},{"location":"cn/glossary/#d","title":"D","text":""},{"location":"cn/glossary/#deferred-shading","title":"deferred shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A multi-pass rendering technique where a first pass processes the geometry and saves relevant information such as transformed coordinates, normal vectors, and material properties. The data can be stored in textures, which are called \"geometry buffers\" or \"G-buffers\" in this context. Lighting and other effects can then be computed in additional passes, using the pre-computed information from the geometry buffers instead of re-computing it for each pass.</p>"},{"location":"cn/glossary/#depth-buffer","title":"depth buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A region of memory that stores the information needed for the depth test in 3D graphics, that is, a depth value for each pixel in the image. Also called the \"z-buffer.\"</p>"},{"location":"cn/glossary/#depth-mask","title":"depth mask","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a setting that controls whether depth values are written to the depth buffer during rendering. When the depth mask is set to false, the depth value is discarded and the depth buffer is unchanged.</p>"},{"location":"cn/glossary/#depth-test","title":"depth test","text":"\u4e2d\u6587\u82f1\u6587 <p>A solution to the hidden surface problem that involves keeping track of the depth, or distance from the viewer, of the object currently visible at each pixel in the image. When a new object is drawn at a pixel, the depth of the new object is compared to the depth of the current object to decide which one is closer to the viewer. The advantage of the depth test is that objects can be rendered in any order. A disadvantage is that only a limited range of depths can be represented in the image.</p>"},{"location":"cn/glossary/#device-coordinates","title":"device coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system used on a display device or rendered image, often using pixels as the unit of measure.</p>"},{"location":"cn/glossary/#diffuse-color","title":"diffuse color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of incident light that is reflected diffusely from a surface.</p>"},{"location":"cn/glossary/#diffuse-reflection","title":"diffuse reflection","text":"\u4e2d\u6587\u82f1\u6587 <p>Reflection of incident light in all directions from a surface, so that diffuse illumination of a surface is visible to all viewers, independent of the viewer's position.</p>"},{"location":"cn/glossary/#direct3d","title":"Direct3D","text":"\u4e2d\u6587\u82f1\u6587 <p>Microsoft's proprietary API for 3D graphics on the Windows operating system.</p>"},{"location":"cn/glossary/#directed-acyclic-graph","title":"directed acyclic graph","text":"\u4e2d\u6587\u82f1\u6587 <p>Also called a \"dag.\" A linked data structure in which there are no cycles. That is, it is not possible to find a sequence of nodes where each node links to the next and the last node links back to the first.</p>"},{"location":"cn/glossary/#directional-light","title":"directional light","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source whose light rays are parallel, all arriving from the same direction. Can be considered to be a light source at an effectively infinite distance. Also called a \"sun,\" since the Sun is an example of a directional light source.</p>"},{"location":"cn/glossary/#displacement-mapping","title":"displacement mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique used to modify a polygonal mesh by moving, or displacing, the vertices of the mesh.</p>"},{"location":"cn/glossary/#display-list","title":"display list","text":"\u4e2d\u6587\u82f1\u6587 <p>A list of graphics primitives and attributes which can be traversed to create all or part of an image. Display lists were used in some early vector-graphics hardware. They were also available in traditional OpenGL.</p>"},{"location":"cn/glossary/#dom","title":"DOM","text":"\u4e2d\u6587\u82f1\u6587 <p>Document Object Model. A specification for representing a web page (and other kinds of structured document) as a tree-like data structure. Can also refer to the data structure itself, as in \"the DOM for this web page.\" A web page can be modified dynamically by manipulating its DOM, using the JavaScript programming language.</p>"},{"location":"cn/glossary/#dot-product","title":"dot product","text":"\u4e2d\u6587\u82f1\u6587 <p>The dot product of two vectors is the sum of the products of corresponding coordinates. For 3D vectors v=(x,y,z) and w=(a,b,c), the dot product of v and w is xa+yb+z*c. The dot product is equal to the cosine of the angle between the vectors, divided by the product of their lengths.</p>"},{"location":"cn/glossary/#double-buffering","title":"double buffering","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics technique in which an image is drawn off-screen, in a region of memory called an off-screen buffer or \"back buffer.\" When the image is drawn, it can be copied to the buffer that represents the contents of the screen, which is also known as the \"front buffer.\" In true double buffering, the image doesn't have to be copied; instead, the buffers can be \"swapped\" so that the back buffer becomes the front buffer, and the front buffer becomes the back buffer.</p>"},{"location":"cn/glossary/#drawing-program","title":"drawing program","text":"\u4e2d\u6587\u82f1\u6587 <p>A computer program for creating images using vector-style graphics, where the user creates the image by specifying shapes that make up the image and their attributes.</p>"},{"location":"cn/glossary/#e","title":"E","text":""},{"location":"cn/glossary/#eclipse","title":"Eclipse","text":"\u4e2d\u6587\u82f1\u6587 <p>An integrated development environment for writing programs in Java (and other programming languages). Eclipse is a free program that can be downloaded from http://eclipse.org.</p>"},{"location":"cn/glossary/#emission-color","title":"emission color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents color that is intrinsic to a surface, rather than coming from light from other sources that is reflected by the surface. Emission color can make the object look like it is glowing, but it does not illuminate other objects. Emission color is often called \"emissive color.\"</p>"},{"location":"cn/glossary/#environment-mapping","title":"environment mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of simulating mirror-like reflection from the surface of an object. The environment that is to be reflected from the surface is represented as a cubemap texture. To determine what point in the texture is visible at a given point on the object, a ray from the viewpoint is reflected from the surface point, and the reflected ray is intersected with the texture cube. Environment mapping is also called reflection mapping.</p>"},{"location":"cn/glossary/#es6","title":"ES6","text":"\u4e2d\u6587\u82f1\u6587 <p>A version of JavaScript implemented by almost all modern web browsers. More formally known as ECMAScript 6 or ECMAScript 2015. ES6 introduced a large number of new features.</p>"},{"location":"cn/glossary/#euclidean-transform","title":"Euclidean transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that preserves distances and angles. A Euclidean transform represents a \"rigid motion.\" That is, the transform of an object is an exact copy of the object, with the same size and shape. Any Euclidean transform can be represented as a composition of rotations and translations.</p>"},{"location":"cn/glossary/#euler-angles","title":"Euler angles","text":"\u4e2d\u6587\u82f1\u6587 <p>Express the rotation of an object in its own coordinate system, given as individual rotations about the x, y, and z axes in that coordinate system. The cumulative effect of rotations about the three coordinate axes depends on the order in which the rotations are applied.</p>"},{"location":"cn/glossary/#extrusion","title":"extrusion","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for producing a solid from a 2D shape by moving the shape along a curve in 3D. The solid is the set of points through which the shape passes as it moves along the curve. The most common case is moving the shape along a line segment that is perpendicular to the plane that contains the shape. In practice, in computer graphics, the object that is produced by extrusion is just the surface of the extruded solid.</p>"},{"location":"cn/glossary/#eye-coordinates","title":"eye coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system on 3D space defined by the viewer. In eye coordinates in OpenGL 1.1, the viewer is located at the origin, looking in the direction of the negative z-axis, with the positive y-axis pointing upwards, and the positive x-axis pointing to the right. The modelview transformation maps objects into the eye coordinate system, and the projection transform maps eye coordinates to clip coordinates.</p>"},{"location":"cn/glossary/#f","title":"F","text":""},{"location":"cn/glossary/#filling-a-shape","title":"filling a shape","text":"\u4e2d\u6587\u82f1\u6587 <p>Drawing the interior of a shape, by coloring the pixels that lie inside the shape. Filling does not apply to shapes, such as lines, that have no interior.</p>"},{"location":"cn/glossary/#fixed-function-pipeline","title":"fixed-function pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics processing pipeline with a fixed set of processing stages that cannot be modified by a programmer. Data for an image passes through a sequence of processing stages, with the image as the end product. The sequence is called a \"pipeline.\" With a fixed-function pipeline, the programmer can enable and disable stages and set options that control the processing but cannot add to the functionality.</p>"},{"location":"cn/glossary/#flat-shading","title":"flat shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting computation for the faces of a polygon or polygonal mesh that uses the same normal vector at each point in the polygon, giving the polygon a flat or faceted appearance.</p>"},{"location":"cn/glossary/#fragment-shader","title":"fragment shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A shader program that will be executed once for each pixel in a primitive. A fragment shader must compute a color for the pixel, or discard it. Fragment shaders are also called pixel shaders.</p>"},{"location":"cn/glossary/#framebuffer","title":"framebuffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a data structure that organizes the buffers for rendering an image, possibly including a color buffer, a depth buffer, and a stencil buffer. A WebGL graphics context has a default framebuffer for on-screen rendering, and additional framebuffers can be created for off-screen rendering.</p>"},{"location":"cn/glossary/#frame-buffer","title":"frame buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A region of memory that contains color data for a digital image. Most often refers to the memory containing the image that appears on the computer's screen.</p>"},{"location":"cn/glossary/#front-face","title":"front face","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the two sides of a polygon in 3D. A polygon has two sides. One is taken to be the front face, and the other is the back face. In OpenGL, the difference is determined by the order in which the vertices of the polygon are enumerated. The default is that, seen from the front, the vertices are enumerated in counterclockwise order around the polygon.</p>"},{"location":"cn/glossary/#frustum","title":"frustum","text":"\u4e2d\u6587\u82f1\u6587 <p>A truncated pyramid; that is, a pyramid from which the top has been cut off. In OpenGL 1.1, the view volume for a perspective projection is a frustum.</p>"},{"location":"cn/glossary/#g","title":"G","text":""},{"location":"cn/glossary/#geometric-modeling","title":"geometric modeling","text":"\u4e2d\u6587\u82f1\u6587 <p>Creating a scene by specifying the geometric objects contained in the scene, together with geometric transforms to be applied to them and attributes that determine their appearance.</p>"},{"location":"cn/glossary/#geometric-primitive","title":"geometric primitive","text":"\u4e2d\u6587\u82f1\u6587 <p>Geometric objects in a graphics system, such as OpenGL, that are not made up of simpler objects. Examples in OpenGL include points, lines, and triangles, but the set of available primitives depends on the graphics system. (Note that as the term is used in OpenGL, a single primitive can be made up of many points, line segments, or triangles.)</p>"},{"location":"cn/glossary/#geometric-transform","title":"geometric transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate transformation; that is, a function that can be applied to each of the points in a geometric object to produce a new object. Common transforms include scaling, rotation, and translation.</p>"},{"location":"cn/glossary/#glmatrix","title":"glMatrix","text":"\u4e2d\u6587\u82f1\u6587 <p>An open-source JavaScript library for vector and matrix math in two and three dimensions.</p>"},{"location":"cn/glossary/#global-ambient-intensity","title":"global ambient intensity","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, ambient light that is present in the environment independent of any light source. Total ambient light is the sum of the global ambient light plus the ambient light intensity of each enabled light source.</p>"},{"location":"cn/glossary/#global-illumination","title":"global illumination","text":"\u4e2d\u6587\u82f1\u6587 <p>The goal of 3D rendering algorithms that take into account all the interactions of light in a scene, including indirect illumination by light that bounces off other objects.</p>"},{"location":"cn/glossary/#glsl","title":"GLSL","text":"\u4e2d\u6587\u82f1\u6587 <p>OpenGL Shader Language, the programming language that is used to write shader programs for use with OpenGL.</p>"},{"location":"cn/glossary/#gltf","title":"GLTF","text":"\u4e2d\u6587\u82f1\u6587 <p>GL Transfer Format. A file format for 3D models. A GLTF file can contain complete 3D scenes, including objects, materials, lights, and even animations. The GLTF specification comes from the Khronos Group, which is also responsible for OpenGL, WebGL, and Vulkan.</p>"},{"location":"cn/glossary/#glu","title":"GLU","text":"\u4e2d\u6587\u82f1\u6587 <p>The OpenGL Utility library. Defines several functions for use with older versions of OpenGL, including gluPerspective and gluLookAt. Not to be confused with GLUT. GLU is a standard part of OpenGL.</p>"},{"location":"cn/glossary/#glut","title":"GLUT","text":"\u4e2d\u6587\u82f1\u6587 <p>The OpenGL Utility Toolkit. A platform-independent library for writing OpenGL applications. OpenGL does not include support for windows or events. GLUT adds such support. It also has functions for drawing 3D shapes such as spheres and polyhedra (not to mention a teapot). GLUT is written in the C programming language and is used with the C API for OpenGL. However, many GLUT functions are also available in JOGL, the Java API for OpenGL. A newer, and somewhat improved, version of the toolkit named \"FreeGLUT\" is commonly used in place of the original version.</p>"},{"location":"cn/glossary/#gpu","title":"GPU","text":"\u4e2d\u6587\u82f1\u6587 <p>Graphics Processing Unit, a computer hardware component that performs graphical computations that create and manipulate images. Operations such as drawing a line on the screen or rendering a 3D image are done in the GPU, which is optimized to perform such operations very quickly.</p>"},{"location":"cn/glossary/#gradient","title":"gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A pattern of color produced by assigning colors to certain reference points and computing color for other points by interpolating or extrapolating colors from the reference points. The effect is a color progression along line segments between reference points. Different rules for extending the colors beyond those lines produce different types of gradient, such as linear gradients and radial gradients.</p>"},{"location":"cn/glossary/#grayscale","title":"grayscale","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to a color scheme or image in which each color is a shade of gray (where the term \"shade of gray\" here includes black and white). Typically, 256 shades of gray are used. Grayscale is also called \"monochrome.\"</p>"},{"location":"cn/glossary/#gui","title":"GUI","text":"\u4e2d\u6587\u82f1\u6587 <p>(Graphical User Interface.) A user interface for a program where the user interacts with the program using components such as windows, menus, buttons, and text-input boxes.</p>"},{"location":"cn/glossary/#h","title":"H","text":""},{"location":"cn/glossary/#hdr-image","title":"HDR image","text":"\u4e2d\u6587\u82f1\u6587 <p>A high dynamic range image. An HDR image has more color information than the usual eight bits per color channel per pixel. This makes it more suitable to uses that require calculation with the color values.</p>"},{"location":"cn/glossary/#height-map","title":"height map","text":"\u4e2d\u6587\u82f1\u6587 <p>An image in which the grayscale value represents a height, or elevation. Height maps can be used in displacement mapping to specify the amount of displacement.</p>"},{"location":"cn/glossary/#hidden-surface-problem","title":"hidden surface problem","text":"\u4e2d\u6587\u82f1\u6587 <p>The problem in 3D graphics of deciding which object is visible at each pixel in an image. When one object is behind another object from the point of view of the viewer, only the front object should appear in the image. A rendering algorithm for 3D graphics must satisfy this constraint. Algorithms that solve the hidden surface problem include the painter's algorithm and the depth test algorithm.</p>"},{"location":"cn/glossary/#hierarchical-modeling","title":"hierarchical modeling","text":"\u4e2d\u6587\u82f1\u6587 <p>Creating complex geometric models in a hierarchical fashion, starting with geometric primitives, combining them into components that can then be further combined into more complex components, and so on.</p>"},{"location":"cn/glossary/#homogeneous-coordinates","title":"homogeneous coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>A way of representing n-dimensional vectors as (n+1)-dimensional vectors where two (n+1) vectors represent the same n-dimensional vector if they differ by a scalar multiple. In 3D, for example, if w is not zero, then the homogeneous coordinates (x,y,z,w) are equivalent to homogeneous coordinates (x/w,y/w,z/w,1), since they differ by multiplication by the scalar w. Both sets of coordinates represent the 3D vector (x/w,y/w,z/w)</p>"},{"location":"cn/glossary/#hsl-color","title":"HSL color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the hue, saturation, and lightness of the component. The HSL color model is similar to the HSV color model. The main difference is that in HSL, pure spectral colors occur when L=0.5, while in HSV, they occur when V=1.</p>"},{"location":"cn/glossary/#hsv-color","title":"HSV color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the hue, saturation, and value of the component. The hue represents the basic color. The saturation is the purity of the color, with a saturation value of zero producing a shade of gray, that is a color with no actual hue at all. The value represents the brightness of the color, with a value of zero giving black. (Value is also called brightness, and the name HSB is sometimes used instead of HSV.)</p>"},{"location":"cn/glossary/#html","title":"HTML","text":"\u4e2d\u6587\u82f1\u6587 <p>HyperText Markup Language. A language that is used for specifying the content of web pages. An HTML document is made up of text, along with \"elements\" for adding other content, such as images, and for defining the structure of the document. Because of nesting of elements, the document can be represented by a tree-like data structure.</p>"},{"location":"cn/glossary/#html-canvas","title":"HTML canvas","text":"\u4e2d\u6587\u82f1\u6587 <p>A canvas element on a web page. The canvas appears as a rectangular area on the page. The JavaScript programming language can use a canvas element as a drawing surface. HTML is a language for specifying the content of a web page. JavaScript is the programming language for web pages. The canvas element supports a 2D graphics API. In many browsers, it also supports the 3D graphics API, WebGL.</p>"},{"location":"cn/glossary/#i","title":"I","text":""},{"location":"cn/glossary/#identity-matrix","title":"identity matrix","text":"\u4e2d\u6587\u82f1\u6587 <p>The n-by-n identity matrix is an n-by-n matrix which has ones on the diagonal and zeros elsewhere. Multiplication of any matrix B by the identity matrix, in either order, leaves B unchanged. Multiplication of an n-dimensional vector by the n-by-n identity matrix leaves the vector unchanged; that is, the identity matrix is the matrix for the identity transformation.</p>"},{"location":"cn/glossary/#identity-transform","title":"identity transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A transform that has no effect on its argument. For example, the identity transform in 2D is given by the formula I(x,y) = (x,y). The identity transform I has the property that if T is any transform, then I followed by T is the same as T, and T followed by I is the same as T.</p>"},{"location":"cn/glossary/#image-texture","title":"image texture","text":"\u4e2d\u6587\u82f1\u6587 <p>An image that is applied to a surface as a texture, so that it looks at if the image is \"painted\" onto the surface.</p>"},{"location":"cn/glossary/#index-buffer","title":"index buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, an index buffer is a GPU buffer that holds vertex indices for use with the drawIndexed(). A vertex index gives the position of a vertex in the list of vertices of a primitive.</p>"},{"location":"cn/glossary/#indexed-color","title":"indexed color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color scheme in which colors are selected from a limited palette of colors. For example, if the palette contains 256 colors, then a color can be specified by an eight-bit integer, giving its position, or index, in the list of colors.</p>"},{"location":"cn/glossary/#indexed-drawing","title":"indexed drawing","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, drawing a primitive using the drawIndexed() function. With that function, vertices are not generated in the order in which they are listed. Instead, a list of vertex indices in an index buffer determines the order of the vertices. Indexed drawing is used to render indexed face sets.</p>"},{"location":"cn/glossary/#indexed-face-set","title":"indexed face set","text":"\u4e2d\u6587\u82f1\u6587 <p>(IFS). A data structure that represents a polyhedron or polygonal mesh. The data structure includes a numbered list of vertices and a list of faces. A face is specified by listing the indices of the vertices of the face; that is, a face is given as a list of numbers where each number is an index into the list of vertices.</p>"},{"location":"cn/glossary/#instanced-drawing","title":"instanced drawing","text":"\u4e2d\u6587\u82f1\u6587 <p>The ability to render multiple versions of a primitive with a single function call. Each copy can have its own values for certain attributes, such as color or transformation.</p>"},{"location":"cn/glossary/#intensity-of-a-light-source","title":"intensity of a light source","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source emits light at various wavelengths. The intensity of a light at a given wavelength is the amount of energy in the light at that wavelength. The total intensity of the light is its total energy at all wavelengths. The color of a light is determined by its intensities at all wavelengths.</p>"},{"location":"cn/glossary/#interpolation","title":"interpolation","text":"\u4e2d\u6587\u82f1\u6587 <p>Given values for some quantity at certain reference points, computing a value for that quantity at other points by some kind of averaging applied to the values at the reference points.</p>"},{"location":"cn/glossary/#invariant-qualifier","title":"invariant qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, a modifier that ensures that when the same expression is used to compute the value of a variable in two different shaders, the value will be the same in both shaders. This can be important for multi-pass algorithms, where several shader programs are applied in succession to render one image.</p>"},{"location":"cn/glossary/#inverse-transform","title":"inverse transform","text":"\u4e2d\u6587\u82f1\u6587 <p>Given a transform T, the inverse transform of T is a transform that reverses the operation of T. For example, for a 2D transform, for R to be the inverse of T means that R(T(x,y)) = (x,y). Scaling by 0.5 is the inverse of scaling by 2. Translation by (-3,5) is the inverse of translation by (3,-5). Not every transform has an inverse. For example, scaling by a factor of zero has no inverse.</p>"},{"location":"cn/glossary/#ior","title":"IOR","text":"\u4e2d\u6587\u82f1\u6587 <p>Index of Refraction. A property of a medium, such as air or glass, that transmits light. The refraction, or bending, of light rays that pass from one medium to another depends on the ratio of the IORs of the two media. The index of refraction of a medium depends on the speed of light in that medium.</p>"},{"location":"cn/glossary/#j","title":"J","text":""},{"location":"cn/glossary/#javascript","title":"JavaScript","text":"\u4e2d\u6587\u82f1\u6587 <p>A programming language for web pages. JavaScript code on a web page is executed by a web browser that displays the page, and it can interact with the contents of the web page and with the user. There are JavaScript APIs for 2D and for 3D graphics</p>"},{"location":"cn/glossary/#jogl","title":"JOGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A Java implementation of OpenGL. JOGL is very complicated, since it attempts to support all versions of OpenGL in one programming system. JOGL integrates seamlessly with Java's Swing and AWT graphics.</p>"},{"location":"cn/glossary/#json","title":"JSON","text":"\u4e2d\u6587\u82f1\u6587 <p>(JavaScript Object Notation.) A syntax for representing JavaScript objects as strings, similar to the object literal syntax that is used in JavaScript. JSON objects cannot contain functions, but they can contain strings, numbers, and booleans. JSON has become a popular standard for storage and transmission of structured data.</p>"},{"location":"cn/glossary/#k","title":"K","text":""},{"location":"cn/glossary/#keyframe-animation","title":"keyframe animation","text":"\u4e2d\u6587\u82f1\u6587 <p>An animation technique in which the value of some quantity is given explicitly only at certain times during the animation. The times when the quantity is specified are called keyframes. Between keyframes, the value of the quantity is obtained by interpolating between the values specified for the keyframes.</p>"},{"location":"cn/glossary/#l","title":"L","text":""},{"location":"cn/glossary/#lambert-shading","title":"Lambert shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for computing pixel colors on a primitive using a lighting equation that takes into account ambient and diffuse reflection. In Lambert shading, the lighting equation is applied only at the vertices of the primitive. Color values for pixels in the primitive are calculated by interpolating the values that were computed for the vertices. Lambert shading is named after Johann Lambert, who developed the theory on which it is based in the eighteenth century.</p>"},{"location":"cn/glossary/#lathing","title":"lathing","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for producing a surface by rotating a planar curve about a line that lies in the same plane as the curve. As each point rotates about the line, it generates a circle. The surface is the union of the circles generated by all the points on the curve. Lathing imitates shapes that can be produced by a mechanical lathe.</p>"},{"location":"cn/glossary/#length-of-a-vector","title":"length of a vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector is defined by its length and its direction, so length is a fundamental property. When a vector is represented as an arrow, its length is just the length of that arrow. For a 2D vector given by coordinates (x,y), the length is the square root of xx+yy. For a 3D vector given as (x,y,z), the length is the square root of xx+yy+z*z.</p>"},{"location":"cn/glossary/#lighting","title":"lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Using light sources in a 3D scene, so that the appearance of objects in the scene can be computed based on the interaction of light with the objects' material properties.</p>"},{"location":"cn/glossary/#lighting-equation","title":"lighting equation","text":"\u4e2d\u6587\u82f1\u6587 <p>The equation that is used in OpenGL to compute the visible color of a point on a surface from the material properties of the surface, the normal vector for that point, the direction to the viewer, the ambient light level, and the direction and intensity of light sources.</p>"},{"location":"cn/glossary/#linear-algebra","title":"linear algebra","text":"\u4e2d\u6587\u82f1\u6587 <p>The field of mathematics that studies vector spaces and linear transformations between them. Linear algebra is part of the essential mathematical foundation of computer graphics.</p>"},{"location":"cn/glossary/#linear-gradient","title":"linear gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A color gradient pattern in which there is a color variation along a certain line, with constant color along lines perpendicular to that line.</p>"},{"location":"cn/glossary/#linear-transformation","title":"linear transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A function from one vector space to another that preserves vector addition and multiplication by constants. Linear transformations can be represented by matrices. In computer graphics, they are used to implement geometric operations such as rotation and translation</p>"},{"location":"cn/glossary/#lossless-data-compression","title":"lossless data compression","text":"\u4e2d\u6587\u82f1\u6587 <p>A scheme for reducing the size of a dataset without losing any of the information in that dataset. The original data can be recovered exactly from the compressed data. The image formats GIF and PNG use lossless data compression to reduce the size of the image file.</p>"},{"location":"cn/glossary/#lossy-data-compression","title":"lossy data compression","text":"\u4e2d\u6587\u82f1\u6587 <p>A scheme for reducing the size of a dataset in which some of the information in the dataset can be lost. The data that is recovered from the compressed data can differ from the original data. The image format JPEG use lossy data compression to reduce the size of the image file.</p>"},{"location":"cn/glossary/#luminance","title":"luminance","text":"\u4e2d\u6587\u82f1\u6587 <p>A quantity representing the perceived brightness of a color. For an RGB color, it is a weighted average of the red, green, and blue components of the color. The usual formula is 0.3red + 0.59green + 0.11*blue.</p>"},{"location":"cn/glossary/#m","title":"M","text":""},{"location":"cn/glossary/#magnification-filter","title":"magnification filter","text":"\u4e2d\u6587\u82f1\u6587 <p>An operation that is used when applying a texture to an object, when the texture has to be stretched to fit the object. For an image texture, a magnification filter is applied to compute the color of a pixel when that pixel covers just a fraction of a pixel in the image.</p>"},{"location":"cn/glossary/#material","title":"material","text":"\u4e2d\u6587\u82f1\u6587 <p>The properties of an object that determine how that object interacts with light in the environment. Material properties in OpenGL include, for example, diffuse color, specular color, and shininess.</p>"},{"location":"cn/glossary/#matrix","title":"matrix","text":"\u4e2d\u6587\u82f1\u6587 <p>A rectangular array of numbers. A matrix can be represented as a two-dimensional array, with numbers arranged in rows and columns. An N-by-N matrix represents a linear transformation from N-dimensional space to itself.</p>"},{"location":"cn/glossary/#matrix-mode","title":"matrix mode","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, a state variable that determines which one of several transformation matrices will be affected by functions such as glRotatef and glFrustum. The matrix mode is set with the function glMatrixMode. Possible values include GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE.</p>"},{"location":"cn/glossary/#metal","title":"Metal","text":"\u4e2d\u6587\u82f1\u6587 <p>Apple's proprietary API for 3D graphics and computation on MacOS computers and iOS devices.</p>"},{"location":"cn/glossary/#minification-filter","title":"minification filter","text":"\u4e2d\u6587\u82f1\u6587 <p>An operation that is used when applying a texture to an object, when the texture has to be shrunk to fit the object. For an image texture, a minification filter is applied to compute the color of a pixel when that pixel covers several pixels in the image.</p>"},{"location":"cn/glossary/#mipmap","title":"mipmap","text":"\u4e2d\u6587\u82f1\u6587 <p>One of a series of reduced-size copies of a texture image, of decreasing width and height. Starting from the original image, each mipmap is obtained by dividing the width and height of the previous image by two (unless it is already 1). The final mipmap is a single pixel. Mipmaps are used for more efficient mapping of the texture image to a surface, when the image has to be shrunk to fit the surface.</p>"},{"location":"cn/glossary/#modeling-transformation","title":"modeling transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that is applied to an object to map that object into the world coordinate system or into the object coordinate system for a more complex, hierarchical object.</p>"},{"location":"cn/glossary/#modelview-transformation","title":"modelview transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, a transform that combines the modeling transform with the viewing transform. That is, it is the composition of the transformation from object coordinates to world coordinates and the transformation from world coordinates to eye coordinates. Because of the equivalence between modeling and viewing transformations, world coordinates are not really meaningful for OpenGL, and only the combined transformation is tracked.</p>"},{"location":"cn/glossary/#multi-pass-algorithm","title":"multi-pass algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering algorithm that draws a scene several times and combines the results somehow to compute the final image. A simple example is anaglyph stereo, in which a left-eye and right-eye image of the scene are rendered separately and combined.</p>"},{"location":"cn/glossary/#multisampling","title":"multisampling","text":"\u4e2d\u6587\u82f1\u6587 <p>A kind of antialiasing where the fragment shader is evaluated at several points in each pixel, and the results are averaged to get the color of the pixel.</p>"},{"location":"cn/glossary/#n","title":"N","text":""},{"location":"cn/glossary/#ndc","title":"NDC","text":"\u4e2d\u6587\u82f1\u6587 <p>Normalized Device Coordinates. In WebGPU, refers to the default xyz coordinate system in which x and y range from -1 to 1 and z ranges from 0 to 1. The x and y in NDC map linearly to device, or pixel, coordinates on the viewport.</p>"},{"location":"cn/glossary/#nio-buffer","title":"nio buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>A Java object belonging to the class java.nio.Buffer or one of its subclasses. Nio buffers are similar to arrays, but they are optimized for input/output operations. Nio buffers are used instead of arrays for certain purposes in Java's JOGL API for OpenGL.</p>"},{"location":"cn/glossary/#normalized-vector","title":"normalized vector","text":"\u4e2d\u6587\u82f1\u6587 <p>The result of dividing a non-zero vector by its length, giving a unit vector, that is, a vector of length one. (Note that \"normalized vector\" and \"normal vector\" are, confusingly, unrelated terms!)</p>"},{"location":"cn/glossary/#normal-vector","title":"normal vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A normal vector to a surface at a point on that surface is a vector that is perpendicular to the surface at that point. Normal vectors to curves are defined similarly. Normal vectors are important for lighting calculations.</p>"},{"location":"cn/glossary/#norm-of-a-vector","title":"norm of a vector","text":"\u4e2d\u6587\u82f1\u6587 <p>Another term for the length of the vector. For a 3D vector given as (x,y,z), the norm is the square root of <code>x*x+y*y+z*z</code>.</p>"},{"location":"cn/glossary/#o","title":"O","text":""},{"location":"cn/glossary/#object-coordinates","title":"object coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system in which the coordinates for points in an object are originally specified, before they are transformed by any modeling or other transform that will be applied to the object.</p>"},{"location":"cn/glossary/#off-screen-canvas","title":"off-screen canvas","text":"\u4e2d\u6587\u82f1\u6587 <p>My term for a segment of the computer's memory that can be used as a drawing surface, for drawing images that are not visible on the screen. Some method should exist for copying the image from an off-screen canvas onto the screen. In Java, for example, an off-screen canvas can be implemented as an object of type BufferedImage.</p>"},{"location":"cn/glossary/#opengl","title":"OpenGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A family of computer graphics APIs that is implemented in many graphics hardware devices. There are several versions of the API, and there are implementations, or \"bindings\" for several different programming languages. Versions of OpenGL for embedded systems such as mobile phones are known as OpenGL ES. WebGL is a version for use on Web pages. OpenGL can be used for 2D as well as for 3D graphics, but it is most commonly associated with 3D.</p>"},{"location":"cn/glossary/#orthographic-projection","title":"orthographic projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A projection from 3D to 2D that simply discards the z-coordinate. It projects objects along lines that are orthogonal (perpendicular) to the xy-plane. In OpenGL 1.1, the view volume for an orthographic projection is a rectangular solid.</p>"},{"location":"cn/glossary/#p","title":"P","text":""},{"location":"cn/glossary/#painters-algorithm","title":"painter's algorithm","text":"\u4e2d\u6587\u82f1\u6587 <p>A solution to the hidden surface algorithm that involves drawing the objects in a scene in order from back to front, that is, in decreasing order of distance from the viewer. A disadvantage is that the order is usually not well-defined unless some objects are decomposed into smaller sub-objects. Another issue is that the order of drawing has to change when objects move or when the point of view changes.</p>"},{"location":"cn/glossary/#painting-program","title":"painting program","text":"\u4e2d\u6587\u82f1\u6587 <p>A computer program for creating images using raster-style graphics, where the user creates the image by controlling the colors of each pixel.</p>"},{"location":"cn/glossary/#path-tracing","title":"path tracing","text":"\u4e2d\u6587\u82f1\u6587 <p>A rendering algorithm based on the idea of computing all the paths that light could have followed to arrive at the position of a viewer from each direction. Since that is literally impossible, the algorithm traces a random sample of paths and averages the results. As the number of samples increases, the average converges to a very high-quality image.</p>"},{"location":"cn/glossary/#pattern-fill","title":"pattern fill","text":"\u4e2d\u6587\u82f1\u6587 <p>Using copies of an image to fill the interior of a two-dimensional shape. The image can be repeated horizontally and vertically as necessary to cover the shape.</p>"},{"location":"cn/glossary/#pbr","title":"PBR","text":"\u4e2d\u6587\u82f1\u6587 <p>Physically Based Rendering. A general term encompassing a variety of techniques for rendering materials that look more physically realistic than the materials traditionally used in OpenGL and similar graphics APIs. The idea is to implement the actual physics of light and material more directly. PBR has become common in real-time graphics such as video games.</p>"},{"location":"cn/glossary/#perlin-noise","title":"Perlin noise","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique invented by Ken Perlin in 1983 that is used in the computation of natural-looking procedural textures. A Perlin noise function has numerical inputs (usually 2 or 3) and produces an output number in the range -1.0 to 1.0. The output is pseudo-random, but has some regularity, with features that are similarly sized and regularly distributed, and with variation on several scales.</p>"},{"location":"cn/glossary/#per-pixel-lighting","title":"per-pixel lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Doing lighting calculations at each pixel of a primitive, which gives better results in most cases than per-vertex lighting. Phong shading uses per-pixel lighting, with normal vectors interpolated from the vertices.</p>"},{"location":"cn/glossary/#perspective-projection","title":"perspective projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A projection from 3D to 2D that projects objects along lines radiating out from a viewpoint. A perspective projection attempts to simulate realistic viewing. A perspective projection preserves perspective; that is, objects that are farther from the viewpoint are smaller in the projection. In OpenGL 1.1, the view volume for a perspective projection is a frustum, or truncated pyramid.</p>"},{"location":"cn/glossary/#per-vertex-lighting","title":"per-vertex lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>Doing lighting calculations only at the vertices of a primitive, and interpolating the results to get the colors of interior pixels. Per-vertex lighting is the standard in traditional OpenGL. Per-vertex lighting without specular reflection is Lambert shading.</p>"},{"location":"cn/glossary/#phong-shading","title":"Phong shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for computing pixel colors on a primitive using a lighting equation that takes into account ambient, diffuse, and specular reflection. In Phong shading, the lighting equation is applied at each pixel. Normal vectors are specified only at the vertices of the primitive. The normal vector that is used in the lighting equation at a pixel is obtained by interpolating the normal vectors for the vertices. Phong shading is named after Bui Tuong Phong, who developed the theory in the 1970s.</p>"},{"location":"cn/glossary/#pipeline","title":"pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A sequence of computational stages in a GPU that are applied to incoming data to produce some result. Some of the stages can be programmable shaders, such as vertex shaders, fragment shaders, and compute shaders. In a graphics rendering pipeline, the output is the colors of the pixels in an image.</p>"},{"location":"cn/glossary/#pixel","title":"pixel","text":"\u4e2d\u6587\u82f1\u6587 <p>A digital image is made up of rows and columns of small rectangles called pixels. To specify a digital image, a color is assigned to each pixel in the image.</p>"},{"location":"cn/glossary/#point-light","title":"point light","text":"\u4e2d\u6587\u82f1\u6587 <p>A light source whose light rays emanate from a single point. Also called a \"lamp,\" since a lamp approximates a point source of light. Also called a positional light.</p>"},{"location":"cn/glossary/#polygon","title":"polygon","text":"\u4e2d\u6587\u82f1\u6587 <p>A multi-sided shape lying in a plane and specified by a list of points, called its vertices, and made up of the line segments from each point in the list to the next point in the list, plus a line segment from the last point in the list to the first point. All the points are required to lie in the same plane. Sometimes the term \"polygon\" includes the interior of the shape as well as its boundary.</p>"},{"location":"cn/glossary/#polygonal-mesh","title":"polygonal mesh","text":"\u4e2d\u6587\u82f1\u6587 <p>A collection of polygons, where the polygons can be joined together along their edges. A polygonal mesh can represent a polyhedron, or can be used as an approximation for a curved surface. A polygonal mesh can be represented as an indexed face set.</p>"},{"location":"cn/glossary/#polygon-offset","title":"polygon offset","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D graphics technique that slightly increases or decreases the depth of the pixels in a primitive as it is rendered. Polygon offset is used to avoid having several objects at exactly the same depth, a situation that is not handled well by the depth test.</p>"},{"location":"cn/glossary/#polyhedron","title":"polyhedron","text":"\u4e2d\u6587\u82f1\u6587 <p>A closed 3D figure whose faces, or sides, are polygons. Usually, it is assumed that the faces of a polyhedron do not intersect, except along their edges.</p>"},{"location":"cn/glossary/#power-of-two-texture","title":"power-of-two texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A texture image whose width and height are powers of two. In some graphics systems, this is a requirement of any image that is to be used as a texture.</p>"},{"location":"cn/glossary/#precision-qualifier","title":"precision qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, one of the following modifiers on a numeric variable declaration: lowp, mediump, or highp. A precision modifier specifies the minimum number of bits or range of values for the variable.</p>"},{"location":"cn/glossary/#procedural-texture","title":"procedural texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A texture for which the value at a given set of texture coordinates is computed as a mathematical function of the coordinates, as opposed to an image texture where the value is obtained by sampling an image.</p>"},{"location":"cn/glossary/#programmable-pipeline","title":"programmable pipeline","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics processing pipeline in which some of the processing stages can or must be implemented by programs. Data for an image passes through a sequence of processing stages, with the image as the end product. The sequence is called a \"pipeline.\" Programmable pipelines are used in modern GPUs to provide more flexibility and control to the programmer. The programs for a programmable pipeline are known as shaders and are written in a shader programming language such as GLSL.</p>"},{"location":"cn/glossary/#projection","title":"projection","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that maps coordinates in 3D to coordinates in 2D. Projection is used to convert a three-dimensional scene into a two-dimensional image.</p>"},{"location":"cn/glossary/#projection-transformation","title":"projection transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In 3D graphics, a transformation that maps a scene in 3D space onto a 2D image. In OpenGL 1.1, the projection maps the view volume (that is, the region in 3D space that is visible in the image) to clip coordinates, in which the values of x, y, and z range from -1 to 1. The x- and y-coordinates are then mapped to the image, while the z coordinate provides depth information.</p>"},{"location":"cn/glossary/#promise-in-javascript","title":"promise (in JavaScript)","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript programming, a promise represents a result that might be available immediately or at some time in the future. A programmer can provide a function to be called if and when the promise is fulfilled (that is when the result becomes available). A programmer can also provide a function to be called when the promise is rejected (for example, if some error occurs). Promises are asynchronous since the function that handles success or failure will be called at some unpredictable time.</p>"},{"location":"cn/glossary/#q","title":"Q","text":""},{"location":"cn/glossary/#quad","title":"quad","text":"\u4e2d\u6587\u82f1\u6587 <p>A quadrilateral, that is a four-sided figure in the plane. OpenGL 1.1 has the primitives GL_QUADS and GL_QUAD_STRIP for drawing quads, but it assumes without checking that the vertices that are provided are in fact planar and define quadrilaterals that are convex.</p>"},{"location":"cn/glossary/#quaternion","title":"quaternion","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector in the quaternion algebra, which is a four dimensional vector space in which two vectors, in addition to being added, can be multiplied. In computer graphics, quaternions of length one are often used to represent rotations. An advantage is that in the quaternion representation, it is possible to smoothly interpolate between two rotations.</p>"},{"location":"cn/glossary/#r","title":"R","text":""},{"location":"cn/glossary/#radial-gradient","title":"radial gradient","text":"\u4e2d\u6587\u82f1\u6587 <p>A color gradient pattern in which there are concentric circles, or sometimes ellipses, of constant color, with a color variation along the radius of the circles.</p>"},{"location":"cn/glossary/#raster-graphics","title":"raster graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>Pixel-based graphics in which an image is specified by assigning a color to each pixel in a grid of pixels.</p>"},{"location":"cn/glossary/#rasterization","title":"rasterization","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of creating a raster image, that is one made of pixels, from other data that specifies the content of the image. For example, a vector graphics image must be rasterized in order to be displayed on a computer screen.</p>"},{"location":"cn/glossary/#ray-casting","title":"ray casting","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of following a ray (that is, half of an infinite line) starting at a given point and extending in a given direction, in order to find points of intersection of the ray with objects in a scene. Usually, only the intersection point that is closest to the starting point of the ray is of interest.</p>"},{"location":"cn/glossary/#ray-tracing","title":"ray tracing","text":"\u4e2d\u6587\u82f1\u6587 <p>A recursive rendering algorithm that uses ray casting. A ray is cast from the viewpoint through a point in the image and into the scene, to determine what is seen at that point. To determine the color that is seen at that point, further rays are cast from the point, including a reflected ray (if the object has specular reflections), a refracted ray (if the object is translucent) and shadow rays towards light sources (to determine whether the object is illuminated by that light). Finding a color for a reflected or refracted ray can use a recursive application of the ray tracing algorithm.</p>"},{"location":"cn/glossary/#real-time-graphics","title":"real-time graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>The type of computer graphics that is needed for computer animation or other applications where the images must be rendered quickly, at the time when they are viewed. For computer animation, real-time graphics generally requires the ability to render the scene sixty times per second.</p>"},{"location":"cn/glossary/#reflection-mapping","title":"reflection mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>Another name for environment mapping.</p>"},{"location":"cn/glossary/#reflectivity","title":"reflectivity","text":"\u4e2d\u6587\u82f1\u6587 <p>The proportion or fraction of incident light that is reflected by an object. An object can have different reflectivities at different wavelengths. The color of an object is determined by its reflectivities at all wavelengths.</p>"},{"location":"cn/glossary/#refraction","title":"refraction","text":"\u4e2d\u6587\u82f1\u6587 <p>The bending of light as it passes from one transparent or translucent medium into another.</p>"},{"location":"cn/glossary/#regular-polygon","title":"regular polygon","text":"\u4e2d\u6587\u82f1\u6587 <p>A polygon in which all the sides have the same length and all the angles between consecutive sides are equal. Usually the term is restricted to simple polygons, which have sides that do not intersect except at their endpoints.</p>"},{"location":"cn/glossary/#regular-polyhedron","title":"regular polyhedron","text":"\u4e2d\u6587\u82f1\u6587 <p>A polyhedron in which each face is a regular polygon, and all the faces and angles are identical. There are only five regular polyhedra: the tetrahedron with 4 triangular faces, the cube with 6 square faces, the octahedron with 8 triangular faces, the dodecahedron with 12 pentagonal faces, and the icosahedron, with 20 triangular faces.</p>"},{"location":"cn/glossary/#renderbuffer","title":"renderbuffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGL, a buffer (that is, a region of memory) that can be attached to a framebuffer for use as a color buffer, depth buffer, or stencil buffer.</p>"},{"location":"cn/glossary/#rendering","title":"rendering","text":"\u4e2d\u6587\u82f1\u6587 <p>The process of producing a 2D image from a 3D scene description.</p>"},{"location":"cn/glossary/#render-to-texture","title":"render-to-texture","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique in which the output of a rendering operation is written directly to a texture. In WebGL, render-to-texture can be implemented by attaching the texture as one of the buffers in a framebuffer.</p>"},{"location":"cn/glossary/#rgba-color","title":"RGBA color","text":"\u4e2d\u6587\u82f1\u6587 <p>An RGB color\u2014specified by red, green, and blue component values\u2014together with an alpha component. The alpha component is most often take to specify the degree of transparency of the color, with a maximal alpha value giving a fully opaque color.</p>"},{"location":"cn/glossary/#rgb-color","title":"RGB color","text":"\u4e2d\u6587\u82f1\u6587 <p>A color specified by three numbers giving the amount of red, green, and blue in the color.</p>"},{"location":"cn/glossary/#right-handed-coordinate-system","title":"right-handed coordinate system","text":"\u4e2d\u6587\u82f1\u6587 <p>A coordinate system on 3D space in which the x, y, and z-axes satisfy this property: If you point the thumb of your right hand in the direction of the positive z-axis, then your fingers will curl from the positive x-axis towards the positive y-axis.</p>"},{"location":"cn/glossary/#right-hand-rule","title":"right-hand rule","text":"\u4e2d\u6587\u82f1\u6587 <p>A rule that is used to determine the positive direction of rotation about an axis in 3D space: If you point the thumb of your right hand in the direction of the axis, then your fingers will curl in the direction of positive angles of rotation. Note that this assumes that the axis has a direction; in OpenGL, an axis of rotation is determined by the point (0,0,0) and another point (x,y,z), and the direction of the axis is from (0,0,0) towards (x,y,z).</p>"},{"location":"cn/glossary/#rotation","title":"rotation","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that rotates each point by a specified angle about some point (in 2D) or axis (in 3D).</p>"},{"location":"cn/glossary/#s","title":"S","text":""},{"location":"cn/glossary/#sampler-variable","title":"sampler variable","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, a variable in a shader program that can be used to do lookup in an image texture. The value of a sampler variable specifies the texture unit that will be used to do the lookup. In WebGL, sampler variables are of type \"sampler2D\" or \"samplerCube.\"</p>"},{"location":"cn/glossary/#sampling","title":"sampling","text":"\u4e2d\u6587\u82f1\u6587 <p>The operation of mapping texture coordinates to colors from a texture, including using mipmaps if available and applying a minification or magnification filter if necessary.</p>"},{"location":"cn/glossary/#scalar-product","title":"scalar product","text":"\u4e2d\u6587\u82f1\u6587 <p>The product of a number and a vector. The scalar product of a number s and vector v is the vector obtained by multiplying each coordinate of v by s. In 3D, if s is a number and v=(x,y,z), then the scalar product of s times v is the vector (sx,sy,sz).</p>"},{"location":"cn/glossary/#scaling","title":"scaling","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that multiplies each coordinate of a point by a number called the scaling factor. Scaling increases or decreases the size of an object, but also moves its points closer to or farther from the origin. Scaling can be uniform\u2014the same in every direction\u2014or non-uniform\u2014with a different scaling factor in each coordinate direction. A negative scaling factor can be used to apply a reflection.</p>"},{"location":"cn/glossary/#scene-description-language","title":"scene description language","text":"\u4e2d\u6587\u82f1\u6587 <p>A language that can be used to specify graphics images by stating what's in the image. That is, the scene is created \"declaratively,\" by stating what it contains, as opposed to being created \"procedurally,\" by a program. A document written in a scene description language can be used to generate a scene graph for the scene.</p>"},{"location":"cn/glossary/#scene-graph","title":"scene graph","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that represents the objects in a scene, together with attributes of the objects and the modeling transformations that are applied to the objects. An image of the scene is created by traversing the scene graph data structure. A scene graph might exist only conceptually, or it might be an actual data structure in a program.</p>"},{"location":"cn/glossary/#shader","title":"shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A program to be executed at some stage of the rendering pipeline. OpenGL shaders are written in the GLSL programming languages. For WebGL, only vertex shaders and fragment shaders are supported. WebGPU also has compute shaders, which are used in compute pipelines.</p>"},{"location":"cn/glossary/#shadow-mapping","title":"shadow mapping","text":"\u4e2d\u6587\u82f1\u6587 <p>A technique for determining which parts of a scene are illuminated and which are in shadow from a given light source. The technique involves rendering the scene from the point of the view of the light source, but uses only the depth buffer from that rendering. The depth buffer is the \"shadow map.\" Along a given direction from the light source, the object that is illuminated by the light is the one that is closest to the light. The distance to that object is essentially encoded in the depth buffer. Objects at greater distance are in shadow.</p>"},{"location":"cn/glossary/#shadow-ray","title":"shadow ray","text":"\u4e2d\u6587\u82f1\u6587 <p>In the ray tracing algorithm, a ray that is cast from a point on object in the direction of a light source to determine whether that point is illuminated by that light source or is in shadow.</p>"},{"location":"cn/glossary/#shear-transform","title":"shear transform","text":"\u4e2d\u6587\u82f1\u6587 <p>A shear transformation in 2D leaves some line, L, fixed, and lines perpendicular to L are \"tilted\" relative to L by the same angle. Another description is that a line parallel to L is mapped to itself, but is moved by an amount proportional to its distance from L. In 3D, a shear transformation leaves some plane, P, fixed, and it maps a plane parallel to P to itself, but moved by an amount proportional to its distance from P.</p>"},{"location":"cn/glossary/#shininess","title":"shininess","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that determines the size and sharpness of specular highlights. Also called the \"specular exponent\" because of the way it is used in lighting calculations. In OpenGL, shininess is a number in the range 0 to 128.</p>"},{"location":"cn/glossary/#single-buffering","title":"single buffering","text":"\u4e2d\u6587\u82f1\u6587 <p>As opposed to double buffering, a graphics technique in which the image is drawn directly to the screen (that is, to the buffer that serves as the source for the screen image). The disadvantage of single buffering is that, for a complex image, the user can observe the process of drawing the image.</p>"},{"location":"cn/glossary/#skybox","title":"skybox","text":"\u4e2d\u6587\u82f1\u6587 <p>A large cube that surrounds a scene and is textured with images that form a background for that scene, in all directions.</p>"},{"location":"cn/glossary/#smooth-shading","title":"smooth shading","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting computation for the faces of a polygon or polygonal mesh that uses a different normal vector at each vertex of the polygon. When two polygons share a vertex, both polygons use the same normal vector for that vertex, resulting in a smooth appearance at that vertex. Smooth shading is appropriate when a polygonal mesh is used as an approximation for a smooth surface.</p>"},{"location":"cn/glossary/#specular-color","title":"specular color","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that represents the proportion of incident light that is reflected specularly by a surface.</p>"},{"location":"cn/glossary/#specular-exponent","title":"specular exponent","text":"\u4e2d\u6587\u82f1\u6587 <p>A material property that determines the size and sharpness of specular highlights. Called \"shininess\" in OpenGL.</p>"},{"location":"cn/glossary/#specular-highlight","title":"specular highlight","text":"\u4e2d\u6587\u82f1\u6587 <p>Illumination of a surface produced by specular reflection. A specular highlight is seen at points on the surface where the angle from the surface to the viewer is approximately equal to the angle from the surface to a light source.</p>"},{"location":"cn/glossary/#specular-reflection","title":"specular reflection","text":"\u4e2d\u6587\u82f1\u6587 <p>Mirror-like reflection of light rays from a surface. A ray of light is reflected as a ray in the direction that makes the angle of reflection equal to the angle of incidence. A specular reflection can only be seen by a viewer whose position lies on the path of the reflected ray.</p>"},{"location":"cn/glossary/#spotlight","title":"spotlight","text":"\u4e2d\u6587\u82f1\u6587 <p>A light that emits a cone of illumination. A spotlight is similar to a point light in that it has a position in 3D space, and light radiates from that position. However, the light only affects objects that are in the spotlight's cone of illumination.</p>"},{"location":"cn/glossary/#stack","title":"stack","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure with the operations push() and pop(). Pushing an item onto a stack just adds that item to the stack. Popping from the stack will remove and return the item that was most recently pushed onto the stack.</p>"},{"location":"cn/glossary/#storage-buffer","title":"storage buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, a general purpose buffer on the GPU, which can be used in compute shaders as well as in vertex and fragment shaders.</p>"},{"location":"cn/glossary/#storage-qualifier","title":"storage qualifier","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL, one of the following modifiers on a variable declaration: uniform, attribute, varying, or const.</p>"},{"location":"cn/glossary/#stroking-a-shape","title":"stroking a shape","text":"\u4e2d\u6587\u82f1\u6587 <p>Drawing the outline of a shape, as if a pen is dragged along the boundary of the shape. For a shape with no interior, such as a line segment, stroking the shape simply means dragging the pen along the shape.</p>"},{"location":"cn/glossary/#subsurface-scattering","title":"subsurface scattering","text":"\u4e2d\u6587\u82f1\u6587 <p>A lighting effect in which light enters a slightly translucent object, is reflected internally one or more times, and then exits the object at a different point. Subsurface scattering contributes to the appearance of materials such as jade, milk, and skin.</p>"},{"location":"cn/glossary/#svg","title":"SVG","text":"\u4e2d\u6587\u82f1\u6587 <p>Scalable Vector Graphics. An XML language for specifying 2D vector graphics. SVG is a scene description language. It is designed to integrate into web pages.</p>"},{"location":"cn/glossary/#swizzler","title":"swizzler","text":"\u4e2d\u6587\u82f1\u6587 <p>In GLSL and WGSL, a notation such as v.yzx, where v is a vector and v.yzx represents the three-component vector made up of the y, z, and x components of v. Technically, any use of the dot notation with vectors is considered to be a swizzler.</p>"},{"location":"cn/glossary/#t","title":"T","text":""},{"location":"cn/glossary/#texel","title":"texel","text":"\u4e2d\u6587\u82f1\u6587 <p>A pixel in a texture image.</p>"},{"location":"cn/glossary/#texture","title":"texture","text":"\u4e2d\u6587\u82f1\u6587 <p>Variation in some property from point-to-point on an object. The most common type is image texture. When an image texture is applied to a surface, the surface color varies from point to point.</p>"},{"location":"cn/glossary/#texture-coordinates","title":"texture coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>Refers to the 2D coordinate system on a texture image, or to similar coordinate systems for 1D and 3D textures. Texture coordinates typically range from 0 to 1 both vertically and horizontally, with (0,0) at the lower left corner of the image. The term also refers to coordinates that are given for a surface and that are used to specify how a texture image should be mapped to the surface.</p>"},{"location":"cn/glossary/#texture-object","title":"texture object","text":"\u4e2d\u6587\u82f1\u6587 <p>A data structure that can potentially be stored on the graphics card, and which can hold a texture image, a set of mipmaps, and configuration data such as the current setting for the minification and magnification filters. Using texture objects makes it possible to switch rapidly between textures without having to reload the data into the graphics card.</p>"},{"location":"cn/glossary/#texture-repeat-mode","title":"texture repeat mode","text":"\u4e2d\u6587\u82f1\u6587 <p>Determines how texture coordinates outside the range 0.0 to 1.0 are treated when sampling an image texture. The texture image itself has vertical and horizontal coordinates in the range 0.0 to 1.0. For coordinates outside that range, the texture repeat mode CLAMP or CLAMP_TO_EDGE, for example, clamps the coordinates to the range 0.0 to 1.0, essentially extending the color at the edge of the image indefinitely in all directions. Other repeat modes include REPEAT and MIRRORED_REPEAT.</p>"},{"location":"cn/glossary/#texture-target","title":"texture target","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, one of several kinds of texture, such as 2D image texture, 1D texture, and cube map texture. A texture target is specified by a constant such as GL_TEXTURE_2D or GL_TEXTURE_CUBE_MAP_POSITIVE_X. The texture target is a parameter to many OpenGL functions that work with textures.</p>"},{"location":"cn/glossary/#texture-transformation","title":"texture transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>A transformation that is applied to texture coordinates before they are used to sample data from a texture. The effect is to translate, rotate, or scale the texture on the surface to which it is applied.</p>"},{"location":"cn/glossary/#texture-unit","title":"texture unit","text":"\u4e2d\u6587\u82f1\u6587 <p>A hardware component in a GPU that does texture lookup. (Can also refer to an abstraction for such a component, whether or not it is actually implemented in hardware.) That is, it maps texture coordinates to colors from an image texture. This is the operation called \"sampling,\" and texture units are associated with sampler variables in GLSL shader programs.</p>"},{"location":"cn/glossary/#threejs","title":"three.js","text":"\u4e2d\u6587\u82f1\u6587 <p>A JavaScript library for 3D graphics. The library implements an object-oriented scene graph API. While it is used primarily with WebGL, three.js can also render 3D scenes using the 2D canvas graphics API.</p>"},{"location":"cn/glossary/#tmu","title":"TMU","text":"\u4e2d\u6587\u82f1\u6587 <p>Texture Mapping Unit, another name for texture unit (perhaps with a stronger implication of actual hardware support). Also called a TPU (Texture Processing Unit).</p>"},{"location":"cn/glossary/#torus","title":"torus","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D geometric object having the shape of a doughnut (or bagel).</p>"},{"location":"cn/glossary/#translation","title":"translation","text":"\u4e2d\u6587\u82f1\u6587 <p>A geometric transform that adds a given translation amount to each coordinate of a point. Translation is used to move objects without changing their size or orientation.</p>"},{"location":"cn/glossary/#two-sided-lighting","title":"two-sided lighting","text":"\u4e2d\u6587\u82f1\u6587 <p>An option in OpenGL that allows the back face of a polygon to have different material properties from the front face. Also, when this option is on, the normal vector that is used in lighting calculations for the back face is taken to be the negative of the vector for the front face. (The negative of a vector points in the opposite direction.)</p>"},{"location":"cn/glossary/#typed-array","title":"typed array","text":"\u4e2d\u6587\u82f1\u6587 <p>In JavaScript, an array type that is limited to holding numerical values of a single type. For example, the type Float32Array represents arrays that can hold 32-bit floating point values, and Uint8Array arrays can hold only 8-bit integer values. Such arrays are more efficient than general JavaScript arrays for numerical calculations. The were introduced into JavaScript along with HTML canvas graphics and WebGL.</p>"},{"location":"cn/glossary/#u","title":"U","text":""},{"location":"cn/glossary/#uniform-scaling","title":"uniform scaling","text":"\u4e2d\u6587\u82f1\u6587 <p>A scaling transformation in which the scaling factors in all directions are the same. Uniform scaling changes the size of an object without distorting its shape.</p>"},{"location":"cn/glossary/#uniform-variable","title":"uniform variable","text":"\u4e2d\u6587\u82f1\u6587 <p>Variables that represent input to a shader program in a programmable graphics pipeline. A uniform variable has the same value at every vertex and at every pixel of a primitive.</p>"},{"location":"cn/glossary/#unit-normal","title":"unit normal","text":"\u4e2d\u6587\u82f1\u6587 <p>A normal vector of length one; that is, a unit vector that is perpendicular to a curve or surface at a given point on the curve or surface.</p>"},{"location":"cn/glossary/#unit-vector","title":"unit vector","text":"\u4e2d\u6587\u82f1\u6587 <p>A vector of length one.</p>"},{"location":"cn/glossary/#unsigned-byte","title":"unsigned byte","text":"\u4e2d\u6587\u82f1\u6587 <p>A data type representing 8-bit non-negative integer values, taking values in the range from 0 to 255.</p>"},{"location":"cn/glossary/#url","title":"URL","text":"\u4e2d\u6587\u82f1\u6587 <p>Uniform Resource Locator. An address of some resource on the World Wide Web. For example, \"http://math.hws.edu/grahicsbook\".</p>"},{"location":"cn/glossary/#v","title":"V","text":""},{"location":"cn/glossary/#vao","title":"VAO","text":"\u4e2d\u6587\u82f1\u6587 <p>Vertex Array Object. In WebGL 2.0, a region of memory, typically on the graphics card, that holds a collection of attribute settings such as enabled state and values of vertex attribute pointers. All of the settings can then be selected simply by binding the VAO.</p>"},{"location":"cn/glossary/#varying-variable","title":"varying variable","text":"\u4e2d\u6587\u82f1\u6587 <p>A variable that is used to communicate values from the vertex shader to the fragment shader in the WebGL or OpenGL ES 2.0 graphics pipeline. A varying variable is assigned a value in the vertex shader. The value of the variable in the fragment shader for a pixel in the primitive is obtained by interpolating the values from the vertices of the primitive. (In newer versions of GLSL, which support additional shader stages, the term \"varying variable\" is replaced by the more general terms \"in variable\" and \"out variable,\" which refer to variables that are used for input to or output from a shader.)</p>"},{"location":"cn/glossary/#vbo","title":"VBO","text":"\u4e2d\u6587\u82f1\u6587 <p>Vertex Buffer Object. A block of memory that can hold the coordinates or other attributes for a set of vertices. A VBO can be stored on a GPU. VBOs make it possible to send such data to the GPU once and then reuse it several times. In OpenGL, VBOs are used with the functions glDrawArrays and glDrawElements.</p>"},{"location":"cn/glossary/#vector","title":"vector","text":"\u4e2d\u6587\u82f1\u6587 <p>An element of a vector space. Elements of a vector space can be added and can be multiplied by constants. For computer graphics, a vector is just a list or array containing two, three, or four numbers. Vectors in that sense are often used to represent points in 2D, 3D, or 4D space. Properly, however, a vector represents a quantity that has a length and a direction; a vector used in this way can be visualized as an arrow.</p>"},{"location":"cn/glossary/#vector-graphics","title":"vector graphics","text":"\u4e2d\u6587\u82f1\u6587 <p>Shape-based graphics in which an image is specified as a list of the shapes or objects that appear in the image.</p>"},{"location":"cn/glossary/#vertex","title":"vertex","text":"\u4e2d\u6587\u82f1\u6587 <p>One of the points that define a geometric primitive, such as the two endpoints of a line segment or the three vertices of a triangle. (The plural is \"vertices.\") A vertex can be specified in a coordinate system by giving its x and y coordinates in 2D graphics, or its x, y, and z coordinates in 3D graphics.</p>"},{"location":"cn/glossary/#vertex-array","title":"vertex array","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL, an array that is used to store coordinates or other attribute values for vertices, to be used with the functions glDrawArrays and glDrawElements. A vertex array exists on the \"client side\" of OpenGL, and it must be transmitted to the GPU to be used. In Java's JOGL API for OpenGL, nio buffers are used instead of arrays.</p>"},{"location":"cn/glossary/#vertex-buffer","title":"vertex buffer","text":"\u4e2d\u6587\u82f1\u6587 <p>In WebGPU, a vertex buffer is a GPU data structure that holds values to be used as input the vertex shader.</p>"},{"location":"cn/glossary/#vertex-shader","title":"vertex shader","text":"\u4e2d\u6587\u82f1\u6587 <p>A shader program that will be executed once for each vertex in a primitive. A vertex shader must compute the vertex coordinates in the clip coordinate system. It can also compute other properties, such as color.</p>"},{"location":"cn/glossary/#viewing","title":"viewing","text":"\u4e2d\u6587\u82f1\u6587 <p>Setting the position and orientation of the viewer in a 3D world, which determine what will be visible when the 2D image of a 3D world is rendered.</p>"},{"location":"cn/glossary/#viewing-transformation","title":"viewing transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>The transformation in 3D graphics that maps world coordinates to eye coordinates. The viewing transform establishes the position, orientation, and scale of the viewer in the world.</p>"},{"location":"cn/glossary/#viewport","title":"viewport","text":"\u4e2d\u6587\u82f1\u6587 <p>The rectangular area in which the image for 2D or 3D graphics is displayed. The coordinates on the viewport are pixel coordinates, more properly called device coordinates since they are actual physical coordinates on the device where the image is being displayed.</p>"},{"location":"cn/glossary/#viewport-transformation","title":"viewport transformation","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, the final transformation from clip coordinates to device coordinates. The viewport transformation maps the clipping cube (the cube in 3D given by x, y, and z coordinates in the range from -1 to 1) to the viewport (the rectangle in the drawing surface where the image is rendered).</p>"},{"location":"cn/glossary/#view-volume","title":"view volume","text":"\u4e2d\u6587\u82f1\u6587 <p>In OpenGL 1.1, the region is 3D space that is visible in the rendered image. For orthographic projections, the view volume is a rectangular solid. For perspective projection, the view volume is a frustum (truncated pyramid).</p>"},{"location":"cn/glossary/#view-window","title":"view window","text":"\u4e2d\u6587\u82f1\u6587 <p>As used in this book, the window, or view window, for 2D graphics is the rectangle in the xy-plane that contains the portion of the plane that will be displayed in the image. (The corresponding term in 3D graphics is \"view volume.\")</p>"},{"location":"cn/glossary/#vulkan","title":"Vulkan","text":"\u4e2d\u6587\u82f1\u6587 <p>An open-source cross-platform API for 3D graphics and computation, designed as a more modern and efficient replacement for OpenGL.</p>"},{"location":"cn/glossary/#w","title":"W","text":""},{"location":"cn/glossary/#webgl","title":"WebGL","text":"\u4e2d\u6587\u82f1\u6587 <p>A 3D graphics API for use on web pages. WebGL programs are written in the JavaScript programming language and display their images in HTML canvas elements. WebGL is based on OpenGL ES, the version of OpenGL for embedded systems, with a few changes to adapt it to the JavaScript language and the Web environment.</p>"},{"location":"cn/glossary/#webgl-extension","title":"WebGL extension","text":"\u4e2d\u6587\u82f1\u6587 <p>An optional capability in WebGL that is not available in all implementations. The WebGL API has a function for checking whether a given extension is available and, if so, activating it.</p>"},{"location":"cn/glossary/#webgpu","title":"WebGPU","text":"\u4e2d\u6587\u82f1\u6587 <p>A new JavaScript graphics API, similar to WebGL, but designed to let web programs access modern GPU capabilities such as compute shaders.</p>"},{"location":"cn/glossary/#wgsl","title":"WGSL","text":"\u4e2d\u6587\u82f1\u6587 <p>The WebGPU Shader Language, the programming language in which shaders for use in WebGPU are written.</p>"},{"location":"cn/glossary/#winding-number","title":"winding number","text":"\u4e2d\u6587\u82f1\u6587 <p>The winding number of a path about a point that does not lie on the path is the number of times that the path winds around the point, counting each 360-degree rotation in the positive direction about the point as one and each 360-degree turn in the negative direction as minus one. To compute the winding number, draw a ray extending from the point to infinity. Each crossing of the ray by the path counts as 1 if it crosses the ray going in the positive direction and as negative 1 if it crosses in the negative direction.</p>"},{"location":"cn/glossary/#wireframe","title":"wireframe","text":"\u4e2d\u6587\u82f1\u6587 <p>A style of drawing a polyhedron or polygonal mesh in which only the edges are drawn, resulting in an image made up of line segments.</p>"},{"location":"cn/glossary/#world-coordinates","title":"world coordinates","text":"\u4e2d\u6587\u82f1\u6587 <p>The coordinate system in which a scene is defined. The image that is produced of the scene will show the contents of the world coordinate system that lie within some view volume (for 3D) or view window (for 2D). Objects are defined in their own object coordinate system. Modeling transformations are then applied to place objects into the scene; that is, they transform object coordinates to world coordinates.</p>"},{"location":"cn/glossary/#x","title":"X","text":""},{"location":"cn/glossary/#xml","title":"XML","text":"\u4e2d\u6587\u82f1\u6587 <p>eXtensible Markup Language. Not a single language as such, but a class of languages that follow certain syntax rules. For example, SVG is an XML language because it follows those rules, but it also has further restrictions on its syntax that make it appropriate for specifying 2D graphics. XML documents, like HTML documents, have a tree-like structure defined by \"elements.\" However, HTML is not an XML language since it does not follow all the syntax rules. XHTML is an alternative language for web pages that is similar to HTML but follows XML syntax rules.</p>"},{"location":"cn/preface/","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b80\u4ecb\uff0c\u7248\u672c 1.4","text":""},{"location":"cn/preface/#\u524d\u8a00","title":"\u524d\u8a00","text":"<p>\u8fd9\u672c\u6559\u79d1\u4e66\u4ee3\u8868\u4e86\u6211\u5f00\u53d1\u4e00\u5b66\u671f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7b2c\u4e00\u95e8\u8bfe\u7a0b\u7684\u5c1d\u8bd5\uff0c\u8be5\u8bfe\u7a0b\u901a\u5e38\u7531\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u7684\u5b66\u751f\u5728\u5927\u5b66\u7b2c\u4e09\u5e74\u6216\u7b2c\u56db\u5e74\u5b66\u4e60\u3002 \uff08\u8003\u8651\u5230\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u9886\u57df\u603b\u662f\u5728\u5feb\u901f\u53d8\u5316\uff0c\u5b83\u80fd\u6301\u7eed\u9002\u7528\u591a\u4e45\u662f\u4e00\u4e2a\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\u3002\uff09\u6211\u4e5f\u8bd5\u56fe\u4f7f\u8fd9\u672c\u4e66\u9002\u5408\u81ea\u5b66\u3002</p> <p>\u672c\u4e66\u7684\u8bfb\u8005\u5e94\u8be5\u5177\u6709\u81f3\u5c11\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u4e30\u5bcc\u7ecf\u9a8c\uff0c\u5305\u62ec\u4e00\u4e9b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u548c\u6570\u636e\u7ed3\u6784\u7684\u77e5\u8bc6\u3002\u6bcf\u4e2a\u53c2\u52a0\u6211\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u8bfe\u7a0b\u7684\u4eba\u90fd\u81f3\u5c11\u6709\u4e24\u4e2a\u5b66\u671f\u7684\u7f16\u7a0b\u7ecf\u9a8c\uff0c\u800c\u4e14\u5927\u591a\u6570\u4eba\u90fd\u6709\u9664\u6b64\u4e4b\u5916\u7684\u989d\u5916\u7ecf\u9a8c\u3002\u6211\u7684\u5b66\u751f\u5b66\u4e60\u4e86 Java \u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u5177\u6709\u5176\u4ed6\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u4e5f\u5e94\u8be5\u53ef\u4ee5\u9605\u8bfb\u8fd9\u672c\u4e66\u3002\u4e66\u4e2d\u7684\u793a\u4f8b\u4f7f\u7528 JavaScript\u3001Java \u548c C\u3002\u53ef\u4ee5\u7528 JavaScript \u8fdb\u884c\u6240\u6709\u7f16\u7a0b\uff0c\u4f46\u4e00\u4e9b C \u77e5\u8bc6\u5bf9\u4e8e\u672c\u4e66\u7684\u67d0\u4e9b\u90e8\u5206\u4e5f\u5f88\u91cd\u8981\u3002\u9644\u5f55\u4e2d\u4ecb\u7ecd\u4e86\u8fd9\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u529f\u80fd\u3002 \uff08\u5982\u679c\u60a8\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\uff0c\u8bf7\u5c1d\u8bd5\u6211\u7684\u514d\u8d39 Java \u5165\u95e8\u6559\u79d1\u4e66\uff0c\u53ef\u4ece http://math.hws.edu/javanotes\u83b7\u53d6\u3002\uff09</p> <p>\u6211\u5728 2015 \u5e74\u79cb\u5b63\u7684\u4e00\u95e8\u8bfe\u7a0b\u4e2d\u4f7f\u7528\u4e86\u672c\u4e66\u7684 1.0 \u7248\u672c\u30021.1 \u7248\u672c\u7ea0\u6b63\u4e86\u4e00\u4e9b\u9519\u8bef\u548c\u62fc\u5199\u9519\u8bef\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6750\u6599\u3002\u6211\u7684\u8bfe\u7a0b 2017 \u5e74\u79cb\u5b63\u7248\u672c\u4e2d\u4f7f\u7528\u4e86\u5b83\u3002\u6211\u5728 2021 \u5e74\u79cb\u5b63\u4f7f\u7528\u7684\u7248\u672c 1.3 \u6dfb\u52a0\u4e86\u4e00\u4e9b\u6709\u5173 WebGL 2.0 \u548c GLSL ES 3.00 \u7684\u6750\u6599\uff0c\u66f4\u65b0\u4e86\u5927\u90e8\u5206 JavaScript \u4ee3\u7801\u4ee5\u4f7f\u7528 ES6\uff0c\u5e76\u66f4\u65b0\u4e86\u7b2c 5 \u7ae0\u4ee5\u4f7f\u7528Three.js\u5e93\u7684\u7248\u672c 129\u3002</p> <p>\u5c3d\u7ba1\u6211\u5df2\u7ecf\u4ece\u6559\u5b66\u5c97\u4f4d\u9000\u4f11\uff0c\u4f46\u6211\u51b3\u5b9a\u5728 2023 \u5e74\u590f\u5b63\u5f00\u53d1 1.4 \u7248\u672c\u3002\u6211\u6dfb\u52a0\u4e86\u6709\u5173 WebGPU \u7684\u65b0\u7ae0\u8282\uff0c\u5e76\u8fc1\u79fb\u5230Three.js\u7684\u7248\u672c 154 \u3002\u7531\u4e8e WebGPU \u4f7f\u7528 JavaScript Promise\uff0c\u56e0\u6b64\u6211\u5728\u9644\u5f55 A \u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u90e8\u5206\u6765\u4ecb\u7ecd Promise \u548c\u5f02\u6b65\u51fd\u6570\u3002\u56e0\u4e3aThree.js\u5f88\u5feb\u5c31\u4f1a\u5220\u9664\u8be5\u5e93\u7684\u975e\u6a21\u5757\u5316\u7248\u672c\uff0c\u6240\u4ee5\u6211\u5728\u7b2c 5 \u7ae0\u5f00\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5173\u4e8e JavaScript \u6a21\u5757\u7684\u7b80\u77ed\u90e8\u5206\uff0c\u5e76\u4e14\u4fee\u6539\u4e86Three.js\u793a\u4f8b\u4ee5\u4f7f\u7528\u6a21\u5757\u3002\u9664\u4e86\u8f6c\u5411\u6a21\u5757\u5316\u7684Three.js\u4e4b\u5916\uff0c\u7b2c 5 \u7ae0\u4e2d\u7684\u5185\u5bb9\u6ca1\u6709\u6539\u53d8\u3002\u6574\u672c\u4e66\u4e2d\u7684\u8bb8\u591a\u9519\u522b\u5b57\u548c\u5c0f\u9519\u8bef\u90fd\u5f97\u5230\u4e86\u4fee\u6b63\u3002 \uff08\u611f\u8c22\u8bfb\u8005 Danny Hurlburt \u4fee\u590d\u4e86\u5176\u4e2d\u7684\u8bb8\u591a\u95ee\u9898\u3002\uff09</p> <p>\u672c\u4e66\u7684\u4e3b\u9875\u7f51\u7ad9\u662f https://math.hws.edu/graphicsbook \u3002\u8be5\u5730\u5740\u7684\u9875\u9762\u5305\u542b\u7528\u4e8e\u4e0b\u8f7d\u7f51\u7ad9\u526f\u672c\u548c\u4e0b\u8f7d\u672c\u4e66PDF\u7248\u672c\u7684\u94fe\u63a5\u3002</p> <p>\u8fd9\u662f\u4e00\u672c\u514d\u8d39\u6559\u79d1\u4e66\u3002\u6b22\u8fce\u60a8\u91cd\u65b0\u5206\u53d1\u5b83\uff0c\u53ea\u8981\u60a8\u4e0d\u6536\u53d6\u4efb\u4f55\u8d39\u7528\u3002\u60a8\u53ef\u4ee5\u5728\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u53d1\u5e03\u672a\u7ecf\u4fee\u6539\u7684\u526f\u672c\u3002\u60a8\u53ef\u4ee5\u5236\u4f5c\u548c\u5206\u53d1\u4fee\u6539\u7248\u672c\uff08\u5305\u62ec\u7ffb\u8bd1\uff09\uff0c\u53ea\u8981\u60a8\u7684\u7248\u672c\u660e\u786e\u539f\u59cb\u6765\u6e90\u5e76\u4e14\u5728\u540c\u4e00\u8bb8\u53ef\u8bc1\u4e0b\u514d\u8d39\u5206\u53d1\u5373\u53ef\u3002 \uff08\u6b63\u5f0f\u5730\uff0c\u8fd9\u672c\u4e66\u662f\u6839\u636e\u201c\u77e5\u8bc6\u5171\u4eab\u975e\u5546\u4e1a\u7f72\u540d\u76f8\u540c\u65b9\u5f0f\u5171\u4eab\u8bb8\u53ef\u8bc1\u201d\u83b7\u5f97\u8bb8\u53ef\u7684\u3002\uff09</p> <p>\u672c\u4e66\u7684\u8bb8\u591a\u793a\u4f8b\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u90fd\u662f\u8981\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u7684\u7f51\u9875\u3002\u672c\u4e66\u7684\u7f51\u7edc\u7248\u672c\u5305\u62ec\u96c6\u6210\u5230\u672c\u4e66\u7f51\u9875\u4e2d\u7684\u4ea4\u4e92\u5f0f\u6f14\u793a\u7a0b\u5e8f\u3002</p> <p>\u5927\u591a\u6570\u793a\u4f8b\u7a0b\u5e8f\u548c\u6240\u6709\u6f14\u793a\u90fd\u4f7f\u7528 HTML \u753b\u5e03\u56fe\u5f62\uff08\u7b2c 2 \u7ae0\u4e2d\uff09\u3001WebGPU\uff08\u7b2c 9 \u7ae0\u4e2d\uff09\u6216 WebGL\uff08\u5176\u4ed6\u7ae0\u8282\u4e2d\uff09\u3002 Canvas \u56fe\u5f62\u548c WebGL \u5e94\u8be5\u53ef\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u73b0\u4ee3\u6d4f\u89c8\u5668\u4e2d\u6b63\u5e38\u5de5\u4f5c\u3002 WebGPU\u662f\u4e00\u9879\u65b0\u6280\u672f\uff0c\u95ee\u9898\u4e5f\u6bd4\u8f83\u591a\u3002\u5230 2023 \u5e74 7 \u6708\uff0c\u5b83\u9ed8\u8ba4\u4ec5\u5728\u5c11\u6570 Web \u6d4f\u89c8\u5668\uff08Windows \u548c MacOS \u4e0a\u7684 Chrome \u548c Edge\uff09\u4e2d\u53ef\u7528\uff0c\u751a\u81f3\u5728\u90a3\u4e9b\u6d4f\u89c8\u5668\u4e0a\u4e5f\u53ef\u80fd\u65e0\u6cd5\u5728\u6240\u6709\u786c\u4ef6\u4e0a\u8fd0\u884c\u3002\u5728\u5176\u4ed6\u4e00\u4e9b\u6d4f\u89c8\u5668\u4e2d\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u5b9e\u9a8c\u6027\u529f\u80fd\u542f\u7528\u3002\u7136\u800c\uff0cWebGPU \u5f88\u53ef\u80fd\u6210\u4e3a Web 3D \u56fe\u5f62\u7684\u672a\u6765\uff0c\u56e0\u6b64\u5f00\u59cb\u5b66\u4e60\u5b83\u5f88\u91cd\u8981\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u548c\u6f14\u793a\u90fd\u53ef\u4ee5\u5728\u672c\u4e66\u7684\u7f51\u7ad9\u7248\u672c\u7684\u4e0b\u8f7d\u4e2d\u627e\u5230\uff0c\u8be5\u7248\u672c\u53ef\u4ee5\u4ece\u5176 \u4e3b\u9875\u83b7\u5f97\u3002\u5728\u540d\u4e3asource\u548cdemo \u7684\u6587\u4ef6\u5939\u4e2d\u67e5\u627e\u5b83\u4eec\u3002\u8bf7\u6ce8\u610f\uff0c\u5927\u591a\u6570 Web \u6d4f\u89c8\u5668\u4e0d\u613f\u610f\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e9b\u8d44\u6e90\uff0c\u4f8b\u5982 3D \u6a21\u578b\u548c\u6a21\u5757\u5316 JavaScript \u811a\u672c\u3002\u5f53\u8fd9\u4e9b\u6d4f\u89c8\u5668\u5c1d\u8bd5\u5728\u672c\u5730\u800c\u4e0d\u662f\u901a\u8fc7 Web \u8fd0\u884c\u67d0\u4e9b\u793a\u4f8b\u65f6\uff0c\u5b83\u4eec\u5c06\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u6b64\u95ee\u9898\u4ec5\u5f71\u54cd\u90e8\u5206\u793a\u4f8b\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u672c\u4e66\u7684\u5728\u7ebf\u7248\u672c\u3002\u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7f51\u7edc\u670d\u52a1\u5668\u5e76\u901a\u8fc7\u8be5\u7f51\u7edc\u670d\u52a1\u5668\u67e5\u770b\u6559\u79d1\u4e66\u3002\u53ef\u4ee5\u5c06 Web \u6d4f\u89c8\u5668\u914d\u7f6e\u4e3a\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u4e2d\u7684\u8d44\u6e90\uff0c\u5c3d\u7ba1\u4f7f\u7528\u8be5\u914d\u7f6e\u6d4f\u89c8 Web \u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002</p> <p>\u5728\u8fd1 35 \u5e74\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u6bcf\u9694\u51e0\u5e74\u5de6\u53f3\u5c31\u6559\u6388\u4e00\u6b21\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3002\u968f\u7740\u8be5\u9886\u57df\u7684\u53d1\u5c55\uff0c\u6211\u51e0\u4e4e\u6bcf\u6b21\u6559\u6388\u8bfe\u7a0b\u65f6\u90fd\u5fc5\u987b\u505a\u51fa\u91cd\u5927\u6539\u53d8\uff0c\u4f46\u5728\u5927\u90e8\u5206\u65f6\u95f4\u91cc\uff0c\u6211\u80fd\u591f\u4e3b\u8981\u56f4\u7ed5 OpenGL 1.1\uff08\u4e00\u79cd\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u666e\u904d\u4f7f\u7528\u7684\u56fe\u5f62 API\uff09\u6765\u6784\u5efa\u8bfe\u7a0b\u3002 OpenGL 1.1 \u4ee5\u900f\u660e\u4e14\u76f8\u5f53\u6613\u4e8e\u4f7f\u7528\u7684\u65b9\u5f0f\u5b9e\u73b0\u57fa\u672c\u56fe\u5f62\u6982\u5ff5\uff08\u9876\u70b9\u3001\u6cd5\u5411\u91cf\u3001\u5750\u6807\u53d8\u6362\u3001\u5149\u7167\u548c\u6750\u8d28\uff09\u3002\u8f83\u65b0\u7684\u56fe\u5f62 API \u66f4\u7075\u6d3b\u3001\u66f4\u5f3a\u5927\uff0c\u4f46\u5b66\u4e60\u66f2\u7ebf\u66f4\u9661\u5ced\u3002\u6211\u76f8\u4fe1\u4efb\u4f55\u8ba1\u7b97\u673a\u79d1\u5b66\u5165\u95e8\u8bfe\u7a0b\u90fd\u53d7\u76ca\u4e8e\u4ece\u66f4\u7b80\u5355\u7684\u6846\u67b6\u6216\u5e93\u5f00\u59cb\uff0c\u800c OpenGL 1.1 \u5f88\u597d\u5730\u5b9e\u73b0\u4e86\u8fd9\u4e00\u76ee\u7684\u3002</p> <p>OpenGL \u4ecd\u7136\u53d7\u5230\u5e7f\u6cdb\u652f\u6301\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u5b83\u6613\u4e8e\u4f7f\u7528\u7684\u90e8\u5206\u5df2\u4ece\u6700\u65b0\u7248\u672c\u4e2d\u6b63\u5f0f\u5220\u9664\uff08\u5c3d\u7ba1\u5b9e\u9645\u4e0a\u5927\u591a\u6570\u53f0\u5f0f\u8ba1\u7b97\u673a\u90fd\u652f\u6301\u5b83\u4eec\uff09\u3002\u6b64\u5916\uff0cOpenGL \u6b63\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u88ab\u66f4\u65b0\u7684\u56fe\u5f62 API\uff08\u4f8b\u5982 Direct3D\u3001Metal \u548c Vulkan\uff09\u6240\u53d6\u4ee3\u3002 WebGL \u57fa\u4e8e OpenGL\uff0c\u5e76\u5c06\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u7ee7\u7eed\u5f97\u5230\u5e7f\u6cdb\u652f\u6301\u3002 WebGPU \u53d7\u5230\u8f83\u65b0 API \u7684\u542f\u53d1\uff0c\u5e76\u4e14\u53ef\u80fd\u5728\u67d0\u4e9b\u65f6\u5019\u53d6\u4ee3\u65b0\u5e94\u7528\u7a0b\u5e8f\u7684 WebGL\u3002</p> <p>\u6211\u5728\u672c\u4e66\u4e2d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 OpenGL 1.1 \u7684\u4e00\u4e2a\u5b50\u96c6\u4f5c\u4e3a\u6846\u67b6\u6765\u4ecb\u7ecd\u4e09\u7ef4\u56fe\u5f62\u7684\u57fa\u672c\u6982\u5ff5\u3002\u7136\u540e\u6211\u5c06\u7ee7\u7eed\u4ecb\u7ecd WebGL\uff0c\u8fd9\u662f\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684 OpenGL \u7248\u672c\u3002\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86WebGPU\u3002\u867d\u7136 OpenGL \u6784\u6210\u4e86\u672c\u8bfe\u7a0b\u7684\u4e3b\u8981\u57fa\u7840\uff0c\u4f46\u771f\u6b63\u7684\u91cd\u70b9\u662f\u51e0\u4f55\u5efa\u6a21\u548c\u53d8\u6362\u7b49\u57fa\u672c\u6982\u5ff5\uff1b\u5206\u5c42\u5efa\u6a21\u548c\u573a\u666f\u56fe\uff1b\u989c\u8272\u3001\u706f\u5149\u548c\u7eb9\u7406\uff1b\u548c\u52a8\u753b\u3002\u6211\u4ecd\u7136\u76f8\u4fe1 OpenGL 1.1 \u5f88\u597d\u5730\u4ecb\u7ecd\u4e86\u8fd9\u79cd\u6750\u8d28\u3002</p> <p>\u7b2c 1 \u7ae0\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u7b80\u77ed\u6982\u8ff0\u3002\u5b83\u4ecb\u7ecd\u4e86\u8bb8\u591a\u6982\u5ff5\uff0c\u672c\u4e66\u7684\u5176\u4f59\u90e8\u5206\u5c06\u66f4\u8be6\u7ec6\u5730\u4ecb\u7ecd\u8fd9\u4e9b\u6982\u5ff5\u3002</p> <p>\u7b2c 2 \u7ae0\u4ecb\u7ecd\u4e86 Java\u3001JavaScript \u548c SVG \u4e2d\u7684\u4e8c\u7ef4\u56fe\u5f62\uff0c\u91cd\u70b9\u4ecb\u7ecd\u4e86\u8bf8\u5982\u8f6c\u6362\u548c\u573a\u666f\u56fe\u7b49\u53ef\u6269\u5c55\u5230\u4e09\u7ef4\u7684\u6982\u5ff5\u3002</p> <p>\u7b2c 3 \u7ae0\u548c\u7b2c4 \u7ae0\u4ecb\u7ecd\u4e86 OpenGL 1.1\u3002\u867d\u7136\u6309\u7167\u4eca\u5929\u7684\u6807\u51c6\u6765\u770b OpenGL 1.1 \u76f8\u5f53\u539f\u59cb\uff0c\u4f46\u5b83\u5305\u542b\u7684\u8bb8\u591a\u57fa\u672c\u529f\u80fd\u4ecd\u7136\u662f 3D \u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u57fa\u7840\u3002\u4ec5\u6db5\u76d6\u90e8\u5206 API\u3002</p> <p>\u7b2c 5 \u7ae0\u4ecb\u7ecd\u4e86Three.js\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528 JavaScript \u8fdb\u884c Web \u56fe\u5f62\u7684\u9ad8\u7ea7\u9762\u5411\u5bf9\u8c61 3D \u56fe\u5f62 API\u3002\u672c\u7ae0\u5c55\u793a\u4e86\u5982\u4f55\u5728\u66f4\u9ad8\u7ea7\u522b\u7684\u63a5\u53e3\u4e2d\u4f7f\u7528\u57fa\u672c\u6982\u5ff5\u3002</p> <p>\u7b2c 6 \u7ae0\u548c\u7b2c7 \u7ae0\u4ecb\u7ecd\u4e86 WebGL\uff0c\u5b83\u662f\u7528\u4e8e Web \u56fe\u5f62\u7684 OpenGL \u7684\u73b0\u4ee3\u7248\u672c\u3002 WebGL \u975e\u5e38\u5e95\u5c42\uff0c\u5b83\u9700\u8981\u7a0b\u5e8f\u5458\u7f16\u5199\u201c\u7740\u8272\u5668\u7a0b\u5e8f\u201d\u6765\u5b9e\u73b0 OpenGL 1.1 \u4e2d\u5185\u7f6e\u7684\u8bb8\u591a\u529f\u80fd\u3002\u67e5\u770b\u5b9e\u73b0\u662f\u4e00\u4e2a\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u8ba1\u7b97\u673a\u5982\u4f55\u5b9e\u9645\u5236\u4f5c 3D \u56fe\u50cf\u7684\u673a\u4f1a\u3002</p> <p>\u7b2c 8 \u7ae0\u975e\u5e38\u7b80\u8981\u5730\u4ecb\u7ecd\u4e86 OpenGL \u4e2d\u65e0\u6cd5\u5b9e\u73b0\u7684\u4e00\u4e9b\u9ad8\u7ea7\u6280\u672f\u3002</p> <p>\u7b2c 9 \u7ae0\u4ecb\u7ecd\u4e86 WebGPU\uff0c\u8fd9\u662f\u6700\u65b0\u7684 Web \u56fe\u5f62 API \u3002</p> <p>\u9644\u5f55 A\u7b80\u8981\u4ecb\u7ecd\u4e86\u672c\u4e66\u4e2d\u4f7f\u7528\u7684\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\uff1aJava\u3001C \u548c JavaScript\u3002 \u9644\u5f55 B\u65e8\u5728\u8ba9\u8bfb\u8005\u5f00\u59cb\u4e86\u89e3 Blender\uff08\u4e00\u4e2a\u590d\u6742\u7684 3D \u5efa\u6a21\u7a0b\u5e8f\uff09\u7684\u6700\u57fa\u672c\u7528\u6cd5\u3002\u6211\u53d1\u73b0\u5411\u5b66\u751f\u4ecb\u7ecd Blender \u662f\u5e2e\u52a9\u4ed6\u4eec\u53d1\u5c55\u4e09\u7ef4\u76f4\u89c9\u7684\u597d\u65b9\u6cd5\u3002 \u9644\u5f55 C\u5305\u542b\u5bf9\u4e24\u4e2a 2D \u56fe\u5f62\u7a0b\u5e8f Gimp \u548c Inkscape \u7684\u66f4\u7b80\u8981\u4ecb\u7ecd\u3002</p> <p>\u65e7\u7248\u672c\u4ecd\u7136\u53ef\u7528\uff1a</p> <ul> <li>1.0\u7248\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.0/</li> <li>\u7248\u672c 1.1\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.1/</li> <li>\u7248\u672c 1.2\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.2/</li> <li>\u7248\u672c 1.3\uff1ahttps://math.hws.edu/eck/cs424/graphicsbook-1.3/</li> <li>\u6240\u6709\u7248\u672c\u7684\u4e0b\u8f7d\u90fd\u53ef\u4ee5\u5728 https://math.hws.edu/eck/cs424/downloads/ \u627e\u5230\u3002</li> </ul> <p>\u672c\u4e66\u7684 PDF \u548c\u7f51\u7ad9\u7248\u672c\u662f\u6839\u636e\u4e00\u7ec4\u5e38\u89c1\u6765\u6e90\u6784\u5efa\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u5728 GitHub \u4e0a\u514b\u9686\u4ee5\u4e0b git \u5b58\u50a8\u5e93\u6765\u83b7\u53d6\u6e90\u4ee3\u7801\uff1a https://github.com/davidjeck/graphicsbook</p> <p>\u8fd9\u4e9b\u6765\u6e90\u6700\u521d\u5e76\u4e0d\u6253\u7b97\u51fa\u7248\uff0c\u5e76\u4e14\u5bf9\u53ef\u80fd\u6709\u5174\u8da3\u7814\u7a76\u5b83\u4eec\u7684\u4eba\u6ca1\u6709\u4efb\u4f55\u4fdd\u8bc1\u548c\u975e\u5e38\u6709\u9650\u7684\u652f\u6301\u3002</p> <p>\u6e90\u5305\u62ec\u56fe\u50cf\u3001HTML \u6587\u4ef6\u3001Java \u548c C \u6e90\u4ee3\u7801\u3001XML \u6587\u4ef6\u3001XSLT \u8f6c\u6362\u3001bash shell \u811a\u672c\u548c LaTeX \u5b8f\u3002\u4f7f\u7528\u6e90\u4ee3\u7801\u9700\u8981\u989d\u5916\u7684\u8f6f\u4ef6\uff08LaTeX\u3001Xalan-J\u3001Java \u548c bash shell\uff09\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u81ea\u8ff0\u6587\u4ef6\u3002</p> <p>David J. Eck\uff0c \u970d\u5df4\u7279\u548c\u5a01\u5ec9\u53f2\u5bc6\u65af\u5b66\u9662</p> <p>\u6570\u5b66\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u7cfb\u540d\u8a89\u6559\u6388 300 Pulteney StreetGeneva , New York 14456, USA</p> <p>\u7535\u5b50\u90ae\u4ef6\uff1aeck@hws.edu</p> <p>WWW\uff1ahttp://math.hws.edu/eck/ , 2023</p>"},{"location":"cn/a1/","title":"\u9644\u5f55A - \u7f16\u7a0b\u8bed\u8a00","text":"<p>\u672c\u9644\u5f55\u5305\u542b\u5bf9\u6559\u79d1\u4e66\u4e2d\u4f7f\u7528\u7684\u4e09\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u7b80\u8981\u4ecb\u7ecd\uff1aJava\u3001C \u548c JavaScript\u3002\u5728\u9605\u8bfb\u672c\u6559\u79d1\u4e66\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u81f3\u5c11\u719f\u6089\u4e09\u79cd\u8bed\u8a00\u4e2d\u7684\u4e00\u79cd\u3002\u8fd9\u4e09\u79cd\u8bed\u8a00\u6709\u4e00\u4e9b\u5171\u540c\u70b9\uff0c\u56e0\u6b64\u4e86\u89e3\u4e00\u79cd\u8bed\u8a00\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5b66\u4e60\u5176\u4ed6\u8bed\u8a00\u3002\u60a8\u8fd8\u5e94\u8be5\u81f3\u5c11\u5bf9\u7c7b\u3001\u5bf9\u8c61\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u719f\u6089\u3002</p> <p>\u9644\u5f55\u65e8\u5728\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528\u60a8\u8fd8\u4e0d\u77e5\u9053\u7684\u8bed\u8a00\u3002\u4ec5\u7ed9\u51fa\u4e86\u6bcf\u79cd\u8bed\u8a00\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\uff0c\u4f46\u5e0c\u671b\u8db3\u4ee5\u8ba9\u60a8\u7406\u89e3\u4e66\u4e2d\u7684\u793a\u4f8b\u5e76\u7f16\u5199\u4e00\u4e9b\u4f7f\u7528\u6240\u6db5\u76d6\u7684\u56fe\u5f62\u6280\u672f\u7684\u7a0b\u5e8f\u3002\u60a8\u81f3\u5c11\u5e94\u8be5\u80fd\u591f\u4f7f\u7528\u672c\u6559\u79d1\u4e66\u9644\u5e26\u7684\u793a\u4f8b\u7a0b\u5e8f\u3002</p> <p>Java \u4ec5\u5bf9\u4e8e\u7b2c 2.5 \u8282\u662f\u5f3a\u5236\u6027\u7684\u3002\u7b2c3\u7ae0\u548c\u7b2c4\u7ae0\u4e2d\u5173\u4e8eOpenGL  1.1\u7684\u6750\u6599 \u53ef\u4ee5\u4f7f\u7528Java\u6216C\u3002\u6216\u8005\uff0c\u5982\u679c\u60a8\u66f4\u559c\u6b22 JavaScript\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u7684 glsim.js\uff08\u7b2c 3.6.3 \u5c0f\u8282\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u6a21\u62df OpenGL 1.1 \u5927\u90e8\u5206\u7684 JavaScript \u5e93\u3002\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u81f3\u5c11\u9700\u8981\u5bf9 C \u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u624d\u80fd\u8ddf\u4e0a\u8ba8\u8bba\u3002WebGL\u4f7f\u7528\u7684\u7740\u8272\u5668\u7f16\u7a0b\u8bed\u8a00\u57fa\u4e8e C\uff0c\u56e0\u6b64\u4e00\u4e9b C \u77e5\u8bc6\u4e5f\u5f88\u6709\u7528\u3002 \uff08\u4f46\u662f\uff0c\u4e3a\u4e86\u7f16\u5199 WebGL \u7740\u8272\u5668\uff0c\u60a8\u4e0d\u9700\u8981\u4e86\u89e3 C \u6700\u4ee4\u4eba\u56f0\u60d1\u7684\u65b9\u9762\u4e4b\u4e00\uff0c\u5373\u5b83\u5982\u4f55\u4f7f\u7528\u6307\u9488\u7684\u7ec6\u8282\uff09\u3002 JavaScript \u5bf9\u4e8eWebGL\u7f16\u7a0b\uff08\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\uff09 \u3001\u4f7f\u7528Three.js\u7f16\u7a0b\uff08\u7b2c 5 \u7ae0\uff09\u548c WebGPU\uff08\u7b2c 9 \u7ae0\uff09\u81f3\u5173\u91cd\u8981\u3002\u5b83\u4e5f\u7528\u4e8e \u7b2c 2.6 \u8282\u4e2d\u7684HTML \u753b\u5e03\u56fe\u5f62\u3002</p> <p>\u9644\u5f55A\u7684\u5185\u5bb9\uff1a</p> <ul> <li>\u7b2c 1 \u90e8\u5206\uff1aJava \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 2 \u90e8\u5206\uff1aC \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 3 \u8282\uff1aJavaScript \u7f16\u7a0b\u8bed\u8a00</li> <li>\u7b2c 4 \u8282\uff1aJavaScript Promise \u548c\u5f02\u6b65\u51fd\u6570</li> </ul>"},{"location":"cn/c1/","title":"\u7b2c\u4e00\u7ae0 \u7b80\u4ecb","text":"<p>\u672f\u8bed \u201c\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66(computer graphics)\u201d \u4e00\u8bcd\u6307\u6d89\u53ca\u5728\u8ba1\u7b97\u673a\u4e0a\u521b\u5efa\u6216\u64cd\u7eb5\u56fe\u50cf\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u5305\u62ec\u52a8\u753b\u56fe\u50cf\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e7f\u6cdb\u7684\u9886\u57df\uff0c\u53d8\u5316\u548c\u8fdb\u6b65\u4f3c\u4e4e\u4ee5\u4ee4\u4eba\u773c\u82b1\u7f2d\u4e71\u7684\u901f\u5ea6\u51fa\u73b0\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u5f88\u96be\u77e5\u9053\u4ece\u54ea\u91cc\u5f00\u59cb\u3002\u7136\u800c\uff0c\u6709\u4e00\u4e9b\u57fa\u672c\u7406\u5ff5\u6784\u6210\u4e86\u5927\u591a\u6570\u8ba1\u7b97\u673a\u56fe\u5f62\u5e94\u7528\u7684\u57fa\u7840\u3002\u672c\u4e66\u8bd5\u56fe\u6db5\u76d6\u8fd9\u4e9b\u57fa\u7840\u7406\u5ff5\uff0c\u6216\u8005\u81f3\u5c11\u5c3d\u53ef\u80fd\u591a\u5730\u6db5\u76d6\u5b83\u4eec\uff0c\u4ee5\u9002\u5e94\u4e00\u4e2a\u5b66\u671f\u7684\u5927\u5b66\u6c34\u5e73\u8bfe\u7a0b\u3002\u867d\u7136\u5728\u7b2c\u4e00\u95e8\u8bfe\u7a0b\u4e2d\u4e0d\u53ef\u80fd\u8986\u76d6\u6574\u4e2a\u9886\u57df\uff0c\u751a\u81f3\u5176\u4e2d\u7684\u5927\u90e8\u5206\u5185\u5bb9\uff0c\u4f46\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002</p> <p>\u672c\u7b80\u77ed\u7ae0\u8282\u63d0\u4f9b\u4e86\u5bf9\u672c\u4e66\u5176\u4f59\u90e8\u5206\u6db5\u76d6\u5185\u5bb9\u7684\u6982\u8ff0\u548c\u4ecb\u7ecd\uff0c\u4f46\u6ca1\u6709\u8fc7\u591a\u7ec6\u8282\u3002</p> <p>\u7b2c\u4e00\u7ae0\u5185\u5bb9\uff1a</p> <ul> <li>\u7b2c 1 \u8282\uff1a\u7ed8\u753b\u4e0e\u7ed8\u56fe</li> <li>\u7b2c 2 \u8282\uff1a\u4e09\u7ef4(3D)\u56fe\u5f62\u7684\u8981\u7d20</li> <li>\u7b2c 3 \u8282\uff1a\u786c\u4ef6\u4e0e\u8f6f\u4ef6</li> </ul>"},{"location":"cn/c1/s1/","title":"\u7b2c 1 \u8282 \u7ed8\u753b\u4e0e\u7ed8\u56fe","text":"<p>Painting and Drawing</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u4e66\u7684\u4e3b\u8981\u91cd\u70b9\u662f\u4e09\u7ef4\uff083D\uff09\u56fe\u5f62\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u662f\u4e3a\u4e86\u4ea7\u751f\u573a\u666f\u7684\u4e09\u7ef4\u6a21\u578b\u3002\u4f46\u6700\u7ec8\uff0c\u5728\u51e0\u4e4e\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u9879\u76ee\u7684\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u50cf\u3002\u5f53\u7136\uff0c\u76f4\u63a5\u5236\u4f5c\u548c\u64cd\u7eb5\u4e8c\u7ef4\u56fe\u50cf\u4e5f\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u8bfe\u9898\u3002\u6b64\u5916\uff0c\u8bb8\u591a\u601d\u60f3\u4ece\u4e8c\u7ef4\u5230\u4e09\u7ef4\u90fd\u662f\u901a\u7528\u7684\u3002\u56e0\u6b64\uff0c\u4ece\u4e8c\u7ef4\u56fe\u5f62\u5f00\u59cb\u662f\u6709\u610f\u4e49\u7684\u3002</p> <p>\u5728\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u5448\u73b0\u7684\u56fe\u50cf\u7531\u50cf\u7d20\u7ec4\u6210\u3002\u5c4f\u5e55\u7531\u50cf\u7d20(pixels)\u7684\u77e9\u5f62\u7f51\u683c\u7ec4\u6210\uff0c \u6392\u5217\u6210\u884c\u548c\u5217\u3002\u50cf\u7d20\u8db3\u591f\u5c0f\uff0c\u4ee5\u81f3\u4e8e\u5b83\u4eec\u4e0d\u5bb9\u6613\u88ab\u5355\u72ec\u770b\u5230\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u8bb8\u591a\u975e\u5e38\u9ad8\u5206\u8fa8\u7387\u7684\u663e\u793a\u5668\uff0c\u5b83\u4eec\u57fa\u672c\u4e0a\u53d8\u5f97\u770b\u4e0d\u89c1\u4e86\u3002\u5728\u7ed9\u5b9a\u65f6\u95f4\uff0c\u6bcf\u4e2a\u50cf\u7d20\u53ea\u80fd\u663e\u793a\u4e00\u79cd\u989c\u8272\u3002\u5982\u4eca\uff0c\u5927\u591a\u6570\u5c4f\u5e55\u4f7f\u752824\u4f4d\u989c\u8272\uff0c\u5176\u4e2d\u989c\u8272\u53ef\u4ee5\u7531\u4e09\u4e2a8\u4f4d\u6570\u5b57\u6307\u5b9a\uff0c\u5206\u522b\u7ed9\u51fa\u989c\u8272\u4e2d\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u7684\u7ea7\u522b\u3002\u5c4f\u5e55\u4e0a\u53ef\u4ee5\u663e\u793a\u7684\u4efb\u4f55\u989c\u8272\u90fd\u7531\u8fd9\u4e09\u79cd\u201c\u4e3b\u201d\u989c\u8272\u7684\u67d0\u79cd\u7ec4\u5408\u6784\u6210\u3002\u8fd8\u6709\u5176\u4ed6\u683c\u5f0f\uff0c\u4f8b\u5982\u7070\u5ea6(grayscale)\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u90fd\u662f\u4e00\u4e9b\u7070\u5ea6\u7684\u9634\u5f71\uff0c\u5e76\u4e14\u50cf\u7d20\u989c\u8272\u7531\u4e00\u4e2a\u6570\u5b57\u7ed9\u51fa\uff0c\u8be5\u6570\u5b57\u6307\u5b9a\u4e86\u9ed1\u5230\u767d\u6bd4\u4f8b\u4e0a\u7684\u7070\u5ea6\u7ea7\u522b\u3002\u901a\u5e38\u4f7f\u7528256\u4e2a\u7070\u5ea6\u7ea7\u522b\u3002\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u4f7f\u7528\u7d22\u5f15\u8272(indexed color)\uff0c\u5176\u4e2d\u53ea\u80fd\u663e\u793a\u4e00\u5c0f\u90e8\u5206\u989c\u8272\uff0c\u901a\u5e38\u662f16\u6216256\u79cd\u3002\u5bf9\u4e8e\u7d22\u5f15\u8272\u663e\u793a\u5668\uff0c\u6709\u4e00\u4e2a\u53ef\u80fd\u989c\u8272\u7684\u7f16\u53f7\u5217\u8868\uff0c\u50cf\u7d20\u7684\u989c\u8272\u7531\u4e00\u4e2a\u6574\u6570\u6307\u5b9a\uff0c\u8be5\u6574\u6570\u7ed9\u51fa\u4e86\u989c\u8272\u5728\u5217\u8868\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <p>\u65e0\u8bba\u5982\u4f55\uff0c\u5c4f\u5e55\u4e0a\u6240\u6709\u50cf\u7d20\u7684\u989c\u8272\u503c\u90fd\u5b58\u50a8\u5728\u4e00\u4e2a\u79f0\u4e3a\u5e27\u7f13\u51b2\u533a(frame buffer)\u7684\u5927\u578b\u5185\u5b58\u5757\u4e2d\u3002\u66f4\u6539\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u9700\u8981\u66f4\u6539\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u3002\u5c4f\u5e55\u6bcf\u79d2\u91cd\u7ed8\u8bb8\u591a\u6b21\uff0c\u56e0\u6b64\u51e0\u4e4e\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u66f4\u6539\u540e\uff0c\u5c4f\u5e55\u4e0a\u50cf\u7d20\u7684\u989c\u8272\u5c31\u4f1a\u66f4\u6539\u4ee5\u5339\u914d\uff0c\u5e76\u4e14\u663e\u793a\u7684\u56fe\u50cf\u4f1a\u66f4\u6539\u3002</p> <p>\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u662f\u5149\u6805\u56fe\u5f62(raster graphics)\u7684\u57fa\u672c\u6a21\u578b\u3002\u672f\u8bed\u201c\u5149\u6805\u201d\u5728\u6280\u672f\u4e0a\u6307\u7684\u662f\u65e7\u7684\u771f\u7a7a\u7ba1\u8ba1\u7b97\u673a\u76d1\u89c6\u5668\u4e0a\u4f7f\u7528\u7684\u673a\u5236\uff1a\u7535\u5b50\u675f\u5c06\u6cbf\u7740\u50cf\u7d20\u884c\u79fb\u52a8\uff0c\u4f7f\u5b83\u4eec\u53d1\u5149\u3002\u7535\u5b50\u675f\u662f\u901a\u8fc7\u5f3a\u5927\u7684\u78c1\u94c1\u5c06\u5176\u504f\u8f6c\u4ee5\u6a2a\u7a7f\u5c4f\u5e55\u7684\uff0c\u675f\u8d8a\u5f3a\uff0c\u50cf\u7d20\u7684\u53d1\u5149\u5c31\u8d8a\u4eae\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8c03\u5236\u7535\u5b50\u675f\u7684\u5f3a\u5ea6\u6765\u63a7\u5236\u50cf\u7d20\u7684\u4eae\u5ea6\u3002\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u503c\u7528\u4e8e\u786e\u5b9a\u7535\u5b50\u675f\u7684\u5f3a\u5ea6\u3002\uff08\u5bf9\u4e8e\u5f69\u8272\u5c4f\u5e55\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u4e00\u4e2a\u7ea2\u70b9\u3001\u4e00\u4e2a\u7eff\u70b9\u548c\u4e00\u4e2a\u84dd\u70b9\uff0c\u7531\u675f\u5206\u522b\u7167\u4eae\u3002\uff09</p> <p>\u73b0\u4ee3\u7684\u5e73\u677f\u8ba1\u7b97\u673a\u76d1\u89c6\u5668\u4e0d\u662f\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u5149\u6805\u3002\u6ca1\u6709\u79fb\u52a8\u7684\u7535\u5b50\u675f\u3002\u63a7\u5236\u50cf\u7d20\u989c\u8272\u7684\u673a\u5236\u56e0\u5c4f\u5e55\u7c7b\u578b\u800c\u5f02\u3002\u4f46\u5c4f\u5e55\u4ecd\u7136\u7531\u50cf\u7d20\u7ec4\u6210\uff0c\u5e76\u4e14\u6240\u6709\u50cf\u7d20\u7684\u989c\u8272\u503c\u4ecd\u7136\u5b58\u50a8\u5728\u5e27\u7f13\u51b2\u533a\u4e2d\u3002\u56fe\u50cf\u7531\u50cf\u7d20\u7f51\u683c\u7ec4\u6210\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709\u6570\u5b57\u989c\u8272\u503c\uff0c\u8fd9\u5c31\u662f\u5149\u6805\u56fe\u5f62\u7684\u6982\u5ff5\u3002</p> <p>The main focus of this book is three-dimensional (3D) graphics, where most of the work goes into producing a 3D model of a scene. But ultimately, in almost all cases, the end result of a computer graphics project is a two-dimensional image. And of course, the direct production and manipulation of 2D images is an important topic in its own right. Furthermore, a lot of ideas carry over from two dimensions to three. So, it makes sense to start with graphics in 2D.</p> <p>An image that is presented on the computer screen is made up of pixels. The screen consists of a rectangular grid of pixels, arranged in rows and columns. The pixels are small enough that they are not easy to see individually. In fact, for many very high-resolution displays, they become essentially invisible. At a given time, each pixel can show only one color. Most screens these days use 24-bit color, where a color can be specified by three 8-bit numbers, giving the levels of red, green, and blue in the color. Any color that can be shown on the screen is made up of some combination of these three \"primary\" colors. Other formats are possible, such as grayscale, where each pixel is some shade of gray and the pixel color is given by one number that specifies the level of gray on a black-to-white scale. Typically, 256 shades of gray are used. Early computer screens used indexed color, where only a small set of colors, usually 16 or 256, could be displayed. For an indexed color display, there is a numbered list of possible colors, and the color of a pixel is specified by an integer giving the position of the color in the list.</p> <p>In any case, the color values for all the pixels on the screen are stored in a large block of memory known as a frame buffer. Changing the image on the screen requires changing color values that are stored in the frame buffer. The screen is redrawn many times per second, so that almost immediately after the color values are changed in the frame buffer, the colors of the pixels on the screen will be changed to match, and the displayed image will change.</p> <p>A computer screen used in this way is the basic model of raster graphics. The term \"raster\" technically refers to the mechanism used on older vacuum tube computer monitors: An electron beam would move along the rows of pixels, making them glow. The beam was moved across the screen by powerful magnets that would deflect the path of the electrons. The stronger the beam, the brighter the glow of the pixel, so the brightness of the pixels could be controlled by modulating the intensity of the electron beam. The color values stored in the frame buffer were used to determine the intensity of the electron beam. (For a color screen, each pixel had a red dot, a green dot, and a blue dot, which were separately illuminated by the beam.)</p> <p>A modern flat-screen computer monitor is not a raster in the same sense. There is no moving electron beam. The mechanism that controls the colors of the pixels is different for different types of screen. But the screen is still made up of pixels, and the color values for all the pixels are still stored in a frame buffer. The idea of an image consisting of a grid of pixels, with numerical color values for each pixel, defines raster graphics.</p> \u4e2d\u6587\u82f1\u6587 <p>\u867d\u7136\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u662f\u4f7f\u7528\u50cf\u7d20\u8868\u793a\u7684\uff0c\u4f46\u6307\u5b9a\u5355\u4e2a\u50cf\u7d20\u989c\u8272\u5e76\u4e0d\u603b\u662f\u521b\u5efa\u56fe\u50cf\u7684\u6700\u4f73\u65b9\u5f0f\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u6307\u5b9a\u56fe\u50cf\u5305\u542b\u7684\u57fa\u672c\u51e0\u4f55\u5bf9\u8c61\uff0c\u4f8b\u5982\u7ebf\u6761\u3001\u5706\u5f62\u3001\u4e09\u89d2\u5f62\u548c\u77e9\u5f62\u7b49\u5f62\u72b6\u3002\u8fd9\u5c31\u662f\u5b9a\u4e49\u77e2\u91cf\u56fe\u5f62(vector graphics)\u7684\u7406\u5ff5\uff1a\u5c06\u56fe\u50cf\u8868\u793a\u4e3a\u5176\u5305\u542b\u7684\u51e0\u4f55\u5f62\u72b6\u7684\u5217\u8868\u3002\u4e3a\u4e86\u589e\u52a0\u8da3\u5473\u6027\uff0c\u8fd9\u4e9b\u5f62\u72b6\u53ef\u4ee5\u5177\u6709\u5c5e\u6027(attributes)\uff0c\u4f8b\u5982\u7ebf\u6761\u7684\u7c97\u7ec6\u6216\u586b\u5145\u77e9\u5f62\u7684\u989c\u8272\u3002\u5f53\u7136\uff0c\u5e76\u975e\u6bcf\u4e2a\u56fe\u50cf\u90fd\u53ef\u4ee5\u7531\u7b80\u5355\u7684\u51e0\u4f55\u5f62\u72b6\u7ec4\u6210\u3002\u5bf9\u4e8e\u7f8e\u4e3d\u7684\u65e5\u843d\u7167\u7247\uff08\u6216\u5927\u591a\u6570\u5176\u4ed6\u6444\u5f71\u56fe\u50cf\uff09\uff0c\u8fd9\u79cd\u65b9\u6cd5\u663e\u7136\u4e0d\u9002\u7528\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u8bb8\u591a\u7c7b\u578b\u7684\u56fe\u50cf\uff0c\u4f8b\u5982\u5efa\u7b51\u84dd\u56fe\u548c\u79d1\u5b66\u63d2\u56fe\uff0c\u5b83\u6548\u679c\u5f88\u597d\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u5728\u8ba1\u7b97\u673a\u53d1\u5c55\u7684\u65e9\u671f\u5386\u53f2\u4e2d\uff0c\u77e2\u91cf\u56fe\u5f62\u751a\u81f3\u76f4\u63a5\u7528\u4e8e\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u3002\u5f53\u7b2c\u4e00\u6279\u56fe\u5f62\u8ba1\u7b97\u673a\u663e\u793a\u5668\u95ee\u4e16\u65f6\uff0c\u5149\u6805\u663e\u793a\u5668\u7684\u901f\u5ea6\u592a\u6162\u3001\u4ef7\u683c\u592a\u9ad8\uff0c\u4e0d\u5207\u5b9e\u9645\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u53ef\u4ee5\u4ee5\u53e6\u4e00\u79cd\u65b9\u5f0f\u4f7f\u7528\u771f\u7a7a\u7ba1\u6280\u672f\uff1a\u7535\u5b50\u675f\u53ef\u4ee5\u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u4e00\u6761\u7ebf\uff0c\u53ea\u9700\u6cbf\u7740\u8be5\u7ebf\u79fb\u52a8\u675f\u3002\u77e2\u91cf\u56fe\u5f62\u663e\u793a\u5668\u5c06\u5b58\u50a8\u4e00\u4e2a\u5e94\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u7684\u7ebf\u6bb5\u663e\u793a\u5217\u8868(display list)\u3002\u7531\u4e8e\u5c4f\u5e55\u4e0a\u7684\u70b9\u53ea\u4f1a\u5728\u88ab\u7535\u5b50\u675f\u7167\u5c04\u540e\u77ed\u6682\u53d1\u5149\uff0c\u56fe\u5f62\u663e\u793a\u5668\u4f1a\u4e00\u904d\u53c8\u4e00\u904d\u5730\u904d\u5386\u663e\u793a\u5217\u8868\uff0c\u4e0d\u65ad\u5730\u91cd\u7ed8\u5217\u8868\u4e2d\u7684\u6240\u6709\u7ebf\u6761\u3002\u8981\u66f4\u6539\u56fe\u50cf\uff0c\u53ea\u9700\u8981\u66f4\u6539\u663e\u793a\u5217\u8868\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u5982\u679c\u663e\u793a\u5217\u8868\u53d8\u5f97\u592a\u957f\uff0c\u56fe\u50cf\u5c31\u4f1a\u5f00\u59cb\u95ea\u70c1\uff0c\u56e0\u4e3a\u4e00\u6761\u7ebf\u5728\u4e0b\u6b21\u91cd\u65b0\u7ed8\u5236\u4e4b\u524d\u4f1a\u6709\u673a\u4f1a\u53ef\u89c1\u5730\u6de1\u53bb\u3002</p> <p>\u4f46\u8fd9\u662f\u91cd\u70b9\uff1a\u5bf9\u4e8e\u53ef\u4ee5\u6307\u5b9a\u4e3a\u76f8\u5bf9\u8f83\u5c11\u6570\u91cf\u7684\u51e0\u4f55\u5f62\u72b6\u7684\u56fe\u50cf\u6765\u8bf4\uff0c\u4f7f\u7528\u77e2\u91cf\u8868\u793a\u6765\u8868\u793a\u56fe\u50cf\u6240\u9700\u7684\u4fe1\u606f\u91cf\u8981\u6bd4\u4f7f\u7528\u5149\u6805\u8868\u793a\u5c0f\u5f97\u591a\u3002\u8003\u8651\u4e00\u4e2a\u7531\u4e00\u5343\u6761\u7ebf\u6bb5\u7ec4\u6210\u7684\u56fe\u50cf\u3002\u5bf9\u4e8e\u56fe\u50cf\u7684\u77e2\u91cf\u8868\u793a\uff0c\u60a8\u53ea\u9700\u8981\u5b58\u50a8\u4e24\u5343\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5373\u7ebf\u6bb5\u7684\u7aef\u70b9\u3002\u8fd9\u53ea\u9700\u8981\u51e0\u5343\u5b57\u8282\u7684\u5185\u5b58\u3002\u8981\u5c06\u56fe\u50cf\u5b58\u50a8\u5728\u7528\u4e8e\u5149\u6805\u663e\u793a\u7684\u5e27\u7f13\u51b2\u533a\u4e2d\uff0c\u5c06\u9700\u8981\u66f4\u591a\u7684\u5185\u5b58\u3002\u540c\u6837\uff0c\u77e2\u91cf\u663e\u793a\u53ef\u4ee5\u6bd4\u5149\u6805\u663e\u793a\u66f4\u5feb\u5730\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u7ebf\u6761\uff0c\u540e\u8005\u5c06\u76f8\u540c\u7684\u56fe\u50cf\u4ece\u5e27\u7f13\u51b2\u533a\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\uff08\u7136\u800c\uff0c\u4e00\u65e6\u5149\u6805\u663e\u793a\u5668\u53d8\u5f97\u5feb\u901f\u4e14\u4ef7\u683c\u5408\u7406\uff0c\u5b83\u4eec\u5f88\u5feb\u5c31\u4f1a\u53d6\u4ee3\u77e2\u91cf\u663e\u793a\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u80fd\u591f\u76f8\u5f53\u597d\u5730\u663e\u793a\u6240\u6709\u7c7b\u578b\u7684\u56fe\u50cf\u3002\uff09</p> <p>Although images on the computer screen are represented using pixels, specifying individual pixel colors is not always the best way to create an image. Another way is to specify the basic geometric objects that it contains, shapes such as lines, circles, triangles, and rectangles. This is the idea that defines vector graphics: Represent an image as a list of the geometric shapes that it contains. To make things more interesting, the shapes can have attributes, such as the thickness of a line or the color that fills a rectangle. Of course, not every image can be composed from simple geometric shapes. This approach certainly wouldn't work for a picture of a beautiful sunset (or for most any other photographic image). However, it works well for many types of images, such as architectural blueprints and scientific illustrations.</p> <p>In fact, early in the history of computing, vector graphics was even used directly on computer screens. When the first graphical computer displays were developed, raster displays were too slow and expensive to be practical. Fortunately, it was possible to use vacuum tube technology in another way: The electron beam could be made to directly draw a line on the screen, simply by sweeping the beam along that line. A vector graphics display would store a display list of lines that should appear on the screen. Since a point on the screen would glow only very briefly after being illuminated by the electron beam, the graphics display would go through the display list over and over, continually redrawing all the lines on the list. To change the image, it would only be necessary to change the contents of the display list. Of course, if the display list became too long, the image would start to flicker because a line would have a chance to visibly fade before its next turn to be redrawn.</p> <p>But here is the point: For an image that can be specified as a reasonably small number of geometric shapes, the amount of information needed to represent the image is much smaller using a vector representation than using a raster representation. Consider an image made up of one thousand line segments. For a vector representation of the image, you only need to store the coordinates of two thousand points, the endpoints of the lines. This would take up only a few kilobytes of memory. To store the image in a frame buffer for a raster display would require much more memory. Similarly, a vector display could draw the lines on the screen more quickly than a raster display could copy the same image from the frame buffer to the screen. (As soon as raster displays became fast and inexpensive, however, they quickly displaced vector displays because of their ability to display all types of images reasonably well.)</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u6805\u56fe\u5f62\u548c\u77e2\u91cf\u56fe\u5f62\u4e4b\u95f4\u7684\u754c\u9650\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u591a\u4e2a\u9886\u57df\u4e2d\u4ecd\u7136\u5b58\u5728\u3002\u4f8b\u5982\uff0c\u5728\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u56fe\u50cf\u7684\u4e24\u7c7b\u7a0b\u5e8f\u4e4b\u95f4\u5b58\u5728\u660e\u663e\u7684\u533a\u522b\uff1a\u7ed8\u753b\u7a0b\u5e8f(painting programs)\u548c\u7ed8\u56fe\u7a0b\u5e8f(drawing programs)\u3002\u5728\u7ed8\u753b\u7a0b\u5e8f\u4e2d\uff0c\u56fe\u50cf\u8868\u793a\u4e3a\u50cf\u7d20\u7f51\u683c\uff0c\u5e76\u4e14\u7528\u6237\u901a\u8fc7\u4e3a\u50cf\u7d20\u5206\u914d\u989c\u8272\u6765\u521b\u5efa\u56fe\u50cf\u3002\u8fd9\u53ef\u80fd\u901a\u8fc7\u4f7f\u7528\u50cf\u753b\u5bb6\u7684\u753b\u7b14\u90a3\u6837\u7684\u201c\u7ed8\u56fe\u5de5\u5177\u201d\uff0c\u751a\u81f3\u901a\u8fc7\u7ed8\u5236\u7ebf\u6761\u6216\u77e9\u5f62\u7b49\u51e0\u4f55\u5f62\u72b6\u7684\u5de5\u5177\u6765\u5b8c\u6210\u3002\u4f46\u7ed8\u753b\u7a0b\u5e8f\u7684\u91cd\u70b9\u662f\u5bf9\u5355\u4e2a\u50cf\u7d20\u7740\u8272\uff0c\u800c\u53ea\u4fdd\u5b58\u50cf\u7d20\u7684\u989c\u8272\u3002\u4e3a\u4e86\u4f7f\u8fd9\u4e00\u70b9\u66f4\u6e05\u695a\uff0c\u5047\u8bbe\u60a8\u4f7f\u7528\u7ed8\u753b\u7a0b\u5e8f\u7ed8\u5236\u4e86\u4e00\u5e62\u623f\u5b50\uff0c\u7136\u540e\u5728\u623f\u5b50\u524d\u9762\u753b\u4e86\u4e00\u68f5\u6811\u3002\u5982\u679c\u60a8\u7136\u540e\u64e6\u9664\u4e86\u6811\uff0c\u60a8\u53ea\u4f1a\u770b\u5230\u4e00\u4e2a\u7a7a\u767d\u7684\u80cc\u666f\uff0c\u800c\u4e0d\u662f\u4e00\u680b\u623f\u5b50\u3002\u4e8b\u5b9e\u4e0a\uff0c\u56fe\u50cf\u4ece\u6765\u6ca1\u6709\u771f\u6b63\u5305\u542b\u201c\u623f\u5b50\u201d\u2014\u2014\u53ea\u662f\u72ec\u7acb\u7740\u8272\u7684\u50cf\u7d20\uff0c\u89c2\u770b\u8005\u53ef\u80fd\u4f1a\u5c06\u5176\u89c6\u4e3a\u7ec4\u6210\u623f\u5b50\u56fe\u7247\u7684\u90e8\u5206\u3002</p> <p>\u5728\u7ed8\u56fe\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6237\u901a\u8fc7\u6dfb\u52a0\u51e0\u4f55\u5f62\u72b6\u6765\u521b\u5efa\u56fe\u50cf\uff0c\u56fe\u50cf\u8868\u793a\u4e3a\u8fd9\u4e9b\u5f62\u72b6\u7684\u5217\u8868\u3002\u5982\u679c\u60a8\u5728\u56fe\u50cf\u4e2d\u653e\u7f6e\u4e86\u4e00\u4e2a\u623f\u5b50\u5f62\u72b6\uff08\u6216\u7ec4\u6210\u623f\u5b50\u7684\u5f62\u72b6\u96c6\u5408\uff09\uff0c\u7136\u540e\u5728\u623f\u5b50\u4e0a\u653e\u7f6e\u4e86\u4e00\u68f5\u6811\u5f62\u72b6\uff0c\u90a3\u4e48\u623f\u5b50\u4ecd\u7136\u5b58\u5728\uff0c\u56e0\u4e3a\u5b83\u5b58\u50a8\u5728\u56fe\u50cf\u5305\u542b\u7684\u5f62\u72b6\u5217\u8868\u4e2d\u3002\u5982\u679c\u5220\u9664\u4e86\u6811\uff0c\u623f\u5b50\u4ecd\u5c06\u5b58\u5728\u4e8e\u56fe\u50cf\u4e2d\uff0c\u5c31\u50cf\u5728\u6dfb\u52a0\u6811\u4e4b\u524d\u4e00\u6837\u3002\u6b64\u5916\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u9009\u62e9\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u5f62\u72b6\u5e76\u79fb\u52a8\u5b83\u6216\u6539\u53d8\u5176\u5927\u5c0f\uff0c\u56e0\u6b64\u7ed8\u56fe\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u5957\u4e30\u5bcc\u7684\u7f16\u8f91\u64cd\u4f5c\uff0c\u8fd9\u5728\u7ed8\u753b\u7a0b\u5e8f\u4e2d\u662f\u4e0d\u53ef\u80fd\u7684\u3002\uff08\u7136\u800c\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\uff09</p> <p>\u4e00\u4e2a\u5b9e\u7528\u7684\u56fe\u50cf\u521b\u5efa\u548c\u7f16\u8f91\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u7ed3\u5408\u7ed8\u753b\u548c\u7ed8\u56fe\u7684\u5143\u7d20\uff0c\u5c3d\u7ba1\u5176\u4e2d\u4e00\u79cd\u901a\u5e38\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002\u4f8b\u5982\uff0c\u7ed8\u56fe\u7a0b\u5e8f\u53ef\u4ee5\u5141\u8bb8\u7528\u6237\u5305\u542b\u5149\u6805\u7c7b\u578b\u7684\u56fe\u50cf\uff0c\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u5f62\u72b6\u3002\u7ed8\u753b\u7a0b\u5e8f\u53ef\u80fd\u5141\u8bb8\u7528\u6237\u521b\u5efa\u201c\u56fe\u5c42\u201d\uff0c\u8fd9\u4e9b\u662f\u53ef\u4ee5\u53e0\u52a0\u5728\u4e00\u8d77\u4ee5\u521b\u5efa\u6700\u7ec8\u56fe\u50cf\u7684\u5355\u72ec\u56fe\u50cf\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u50cf\u7ed8\u56fe\u7a0b\u5e8f\u4e2d\u7684\u5f62\u72b6\u4e00\u6837\u64cd\u4f5c\u8fd9\u4e9b\u56fe\u5c42\uff08\u56e0\u6b64\uff0c\u5373\u4f7f\u623f\u5b50\u7684\u56fe\u50cf\u5728\u6811\u7684\u540e\u9762\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5c06\u623f\u5b50\u548c\u6811\u4fdd\u6301\u5728\u5355\u72ec\u7684\u56fe\u5c42\u4e2d\uff09\u3002</p> <p>\u4e24\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u56fe\u5f62\u7a0b\u5e8f\u662fAdobe Photoshop\u548cAdobe Illustrator\u3002Photoshop\u5c5e\u4e8e\u7ed8\u753b\u7a0b\u5e8f\u7c7b\u522b\uff0c\u800cIllustrator\u66f4\u50cf\u662f\u7ed8\u56fe\u7a0b\u5e8f\u3002\u5728\u81ea\u7531\u8f6f\u4ef6\u9886\u57df\uff0cGNU\u56fe\u50cf\u5904\u7406\u7a0b\u5e8fGimp\u662fPhotoshop\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u66ff\u4ee3\u54c1\uff0c\u800cInkscape\u662f\u4e00\u4e2a\u76f8\u5f53\u80fd\u5e72\u7684\u514d\u8d39\u7ed8\u56fe\u7a0b\u5e8f\u3002Gimp\u548cInkscape\u7684\u7b80\u8981\u4ecb\u7ecd\u53ef\u4ee5\u5728\u9644\u5f55C\u4e2d\u627e\u5230\u3002</p> <p>The divide between raster graphics and vector graphics persists in several areas of computer graphics. For example, it can be seen in a division between two categories of programs that can be used to create images: painting programs and drawing programs. In a painting program, the image is represented as a grid of pixels, and the user creates an image by assigning colors to pixels. This might be done by using a \"drawing tool\" that acts like a painter's brush, or even by tools that draw geometric shapes such as lines or rectangles. But the point in a painting program is to color the individual pixels, and it is only the pixel colors that are saved. To make this clearer, suppose that you use a painting program to draw a house, then draw a tree in front of the house. If you then erase the tree, you'll only reveal a blank background, not a house. In fact, the image never really contained a \"house\" at all\u2014only individually colored pixels that the viewer might perceive as making up a picture of a house.</p> <p>In a drawing program, the user creates an image by adding geometric shapes, and the image is represented as a list of those shapes. If you place a house shape (or collection of shapes making up a house) in the image, and you then place a tree shape on top of the house, the house is still there, since it is stored in the list of shapes that the image contains. If you delete the tree, the house will still be in the image, just as it was before you added the tree. Furthermore, you should be able to select one of the shapes in the image and move it or change its size, so drawing programs offer a rich set of editing operations that are not possible in painting programs. (The reverse, however, is also true.)</p> <p>A practical program for image creation and editing might combine elements of painting and drawing, although one or the other is usually dominant. For example, a drawing program might allow the user to include a raster-type image, treating it as one shape. A painting program might let the user create \"layers,\" which are separate images that can be layered one on top of another to create the final image. The layers can then be manipulated much like the shapes in a drawing program (so that you could keep both your house and your tree in separate layers, even if in the image of the house is in back of the tree).</p> <p>Two well-known graphics programs are Adobe Photoshop and Adobe Illustrator. Photoshop is in the category of painting programs, while Illustrator is more of a drawing program. In the world of free software, the GNU image-processing program, Gimp, is a good alternative to Photoshop, while Inkscape is a reasonably capable free drawing program. Short introductions to Gimp and Inkscape can be found in Appendix C.</p> \u4e2d\u6587\u82f1\u6587 <p>\u5149\u6805\u56fe\u5f62\u548c\u77e2\u91cf\u56fe\u5f62\u4e4b\u95f4\u7684\u5dee\u5f02\u4e5f\u51fa\u73b0\u5728\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f\u9886\u57df\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u5c06\u56fe\u50cf\u8868\u793a\u4e3a\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002\u5982\u679c\u8981\u4ece\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u4f4d\u4e2d\u6062\u590d\u539f\u59cb\u56fe\u50cf\uff0c\u5219\u8868\u793a\u5fc5\u987b\u9075\u5faa\u67d0\u4e9b\u786e\u5207\u7684\u3001\u5df2\u77e5\u7684\u89c4\u8303\u3002\u8fd9\u6837\u7684\u89c4\u8303\u79f0\u4e3a\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f(graphics file format)\u3002\u4e00\u4e9b\u6d41\u884c\u7684\u56fe\u5f62\u6587\u4ef6\u683c\u5f0f\u5305\u62ecGIF\u3001PNG\u3001JPEG\u3001WebP\u548cSVG\u3002\u5927\u591a\u6570\u5728Web\u4e0a\u4f7f\u7528\u7684\u56fe\u50cf\u90fd\u662fGIF\u3001PNG\u6216JPEG\u683c\u5f0f\uff0c\u4f46\u5927\u591a\u6570\u6d4f\u89c8\u5668\u4e5f\u652f\u6301SVG\u56fe\u50cf\u548c\u8f83\u65b0\u7684WebP\u683c\u5f0f\u3002</p> <p>GIF\u3001PNG\u3001JPEG\u548cWebP\u57fa\u672c\u4e0a\u662f\u5149\u6805\u56fe\u5f62\u683c\u5f0f\uff1b\u56fe\u50cf\u662f\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u5b58\u50a8\u4e00\u4e2a\u989c\u8272\u503c\u6765\u6307\u5b9a\u7684\u3002GIF\u662f\u4e00\u79cd\u8f83\u8001\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5927\u90e8\u5206\u5df2\u88abPNG\u53d6\u4ee3\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u5728Web\u4e0a\u627e\u5230GIF\u56fe\u50cf\u3002\uff08GIF\u683c\u5f0f\u652f\u6301\u52a8\u753b\u56fe\u50cf\uff0c\u56e0\u6b64\u7ecf\u5e38\u7528\u4e8eWeb\u9875\u9762\u4e0a\u7684\u7b80\u5355\u52a8\u753b\u3002\uff09GIF\u4f7f\u7528\u7d22\u5f15\u8272\u6a21\u578b\uff0c\u6700\u591a\u53ef\u5305\u542b256\u79cd\u989c\u8272\u3002PNG\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u8272\u6216\u516824\u4f4d\u989c\u8272\uff0c\u800cJPEG\u9002\u7528\u4e8e\u5168\u5f69\u8272\u56fe\u50cf\u3002</p> <p>\u8868\u793a\u5149\u6805\u56fe\u50cf\u6240\u9700\u7684\u6570\u636e\u91cf\u53ef\u80fd\u76f8\u5f53\u5927\u3002\u7136\u800c\uff0c\u6570\u636e\u901a\u5e38\u5305\u542b\u5927\u91cf\u5197\u4f59\uff0c\u5e76\u4e14\u6570\u636e\u53ef\u4ee5\u8fdb\u884c\u201c\u538b\u7f29\u201d\u4ee5\u51cf\u5c0f\u5176\u5927\u5c0f\u3002GIF\u548cPNG\u4f7f\u7528\u65e0\u635f\u6570\u636e\u538b\u7f29(lossless data compression)\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u4ece\u538b\u7f29\u6570\u636e\u5b8c\u7f8e\u5730\u6062\u590d\u539f\u59cb\u56fe\u50cf\u3002JPEG\u4f7f\u7528\u6709\u635f\u6570\u636e\u538b\u7f29(lossy data compression)\u7b97\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u4eceJPEG\u6587\u4ef6\u4e2d\u6062\u590d\u7684\u56fe\u50cf\u4e0e\u539f\u59cb\u56fe\u50cf\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\uff1b\u4e00\u4e9b\u4fe1\u606f\u5df2\u7ecf\u4e22\u5931\u3002\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5dee\u5f02\u901a\u5e38\u5e76\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u4f7f\u7528\u6709\u635f\u538b\u7f29\u901a\u5e38\u53ef\u4ee5\u66f4\u5927\u7a0b\u5ea6\u5730\u51cf\u5c0f\u538b\u7f29\u6570\u636e\u7684\u5927\u5c0f\u3002JPEG\u901a\u5e38\u9002\u7528\u4e8e\u6444\u5f71\u56fe\u50cf\uff0c\u4f46\u5bf9\u4e8e\u5177\u6709\u4e0d\u540c\u989c\u8272\u4e4b\u95f4\u6e05\u6670\u8fb9\u7f18\u7684\u56fe\u50cf\u6548\u679c\u4e0d\u4f73\u3002\u5b83\u5bf9\u4e8e\u7ebf\u6761\u7ed8\u56fe\u548c\u5305\u542b\u6587\u672c\u7684\u56fe\u50cf\u7279\u522b\u4e0d\u9002\u7528\uff1bPNG\u662f\u6b64\u7c7b\u56fe\u50cf\u7684\u9996\u9009\u683c\u5f0f\u3002WebP\u53ef\u4ee5\u4f7f\u7528\u65e0\u635f\u548c\u6709\u635f\u538b\u7f29\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0cSVG\u57fa\u672c\u4e0a\u662f\u4e00\u79cd\u77e2\u91cf\u56fe\u5f62\u683c\u5f0f\uff08\u5c3d\u7ba1SVG\u56fe\u50cf\u53ef\u4ee5\u5305\u542b\u5149\u6805\u56fe\u50cf\uff09\u3002SVG\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u7528\u4e8e\u63cf\u8ff0\u4e8c\u7ef4\u77e2\u91cf\u56fe\u5f62\u56fe\u50cf\u7684\u57fa\u4e8eXML\u7684\u8bed\u8a00\u3002\u201cSVG\u201d\u4ee3\u8868\u201c\u53ef\u7f29\u653e\u77e2\u91cf\u56fe\u5f62(Scalable Vector Graphics)\u201d\uff0c\u800c\u201c\u53ef\u7f29\u653e(scalable)\u201d\u4e00\u8bcd\u8868\u793a\u77e2\u91cf\u56fe\u5f62\u7684\u4e00\u4e2a\u4f18\u70b9\uff1a\u5f53\u56fe\u50cf\u7684\u5927\u5c0f\u589e\u52a0\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u8d28\u91cf\u3002\u4e24\u70b9\u4e4b\u95f4\u7684\u7ebf\u6761\u53ef\u4ee5\u4ee5\u4efb\u4f55\u6bd4\u4f8b\u8868\u793a\uff0c\u4ecd\u7136\u662f\u540c\u4e00\u6761\u5b8c\u7f8e\u7684\u51e0\u4f55\u7ebf\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5c1d\u8bd5\u5927\u5e45\u589e\u52a0\u5149\u6805\u56fe\u50cf\u7684\u5927\u5c0f\uff0c\u60a8\u4f1a\u53d1\u73b0\u60a8\u6ca1\u6709\u8db3\u591f\u7684\u989c\u8272\u503c\u6765\u8986\u76d6\u65b0\u56fe\u50cf\u4e2d\u6240\u6709\u50cf\u7d20\uff1b\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u5c06\u6269\u5c55\u4e3a\u8986\u76d6\u7f29\u653e\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u77e9\u5f62\uff0c\u5e76\u4e14\u60a8\u5c06\u83b7\u5f97\u5747\u5300\u989c\u8272\u7684\u591a\u50cf\u7d20\u5757\u3002SVG\u56fe\u50cf\u7684\u53ef\u6269\u5c55\u7279\u6027\u4f7f\u5176\u6210\u4e3aWeb\u6d4f\u89c8\u5668\u548c\u8ba1\u7b97\u673a\u684c\u9762\u4e0a\u56fe\u5f62\u5143\u7d20\u7684\u826f\u597d\u9009\u62e9\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e00\u4e9b\u684c\u9762\u73af\u5883\u73b0\u5728\u6b63\u5728\u4f7f\u7528SVG\u56fe\u50cf\u4f5c\u4e3a\u5176\u684c\u9762\u56fe\u6807\u3002</p> <p>The divide between raster and vector graphics also appears in the field of graphics file formats. There are many ways to represent an image as data stored in a file. If the original image is to be recovered from the bits stored in the file, the representation must follow some exact, known specification. Such a specification is called a graphics file format. Some popular graphics file formats include GIF, PNG, JPEG, WebP, and SVG. Most images used on the Web are GIF, PNG, or JPEG, but most browsers also have support for SVG images and for the newer WebP format.</p> <p>GIF, PNG, JPEG, and WebP are basically raster graphics formats; an image is specified by storing a color value for each pixel. GIF is an older file format, which has largely been superseded by PNG, but you can still find GIF images on the web. (The GIF format supports animated images, so GIFs are often used for simple animations on Web pages.) GIF uses an indexed color model with a maximum of 256 colors. PNG can use either indexed or full 24-bit color, while JPEG is meant for full color images.</p> <p>The amount of data necessary to represent a raster image can be quite large. However, the data usually contains a lot of redundancy, and the data can be \"compressed\" to reduce its size. GIF and PNG use lossless data compression, which means that the original image can be recovered perfectly from the compressed data. JPEG uses a lossy data compression algorithm, which means that the image that is recovered from a JPEG file is not exactly the same as the original image; some information has been lost. This might not sound like a good idea, but in fact the difference is often not very noticeable, and using lossy compression usually permits a greater reduction in the size of the compressed data. JPEG generally works well for photographic images, but not as well for images that have sharp edges between different colors. It is especially bad for line drawings and images that contain text; PNG is the preferred format for such images. WebP can use both lossless and lossy compression.</p> <p>SVG, on the other hand, is fundamentally a vector graphics format (although SVG images can include raster images). SVG is actually an XML-based language for describing two-dimensional vector graphics images. \"SVG\" stands for \"Scalable Vector Graphics,\" and the term \"scalable\" indicates one of the advantages of vector graphics: There is no loss of quality when the size of the image is increased. A line between two points can be represented at any scale, and it is still the same perfect geometric line. If you try to greatly increase the size of a raster image, on the other hand, you will find that you don't have enough color values for all the pixels in the new image; each pixel from the original image will be expanded to cover a rectangle of pixels in the scaled image, and you will get multi-pixel blocks of uniform color. The scalable nature of SVG images make them a good choice for web browsers and for graphical elements on your computer's desktop. And indeed, some desktop environments are now using SVG images for their desktop icons.</p> \u4e2d\u6587\u82f1\u6587 <p>\u65e0\u8bba\u56fe\u50cf\u7684\u683c\u5f0f\u5982\u4f55\uff0c\u6570\u5b57\u56fe\u50cf\u90fd\u662f\u4f7f\u7528\u5750\u6807\u7cfb(coordinate system)\u6307\u5b9a\u7684\u3002\u5750\u6807\u7cfb\u5efa\u7acb\u4e86\u6570\u5b57\u548c\u51e0\u4f55\u70b9\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u5728\u4e8c\u7ef4\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u88ab\u5206\u914d\u4e86\u4e00\u5bf9\u6570\u5b57\uff0c\u79f0\u4e3a\u70b9\u7684\u5750\u6807\u3002\u70b9\u7684\u4e24\u4e2a\u5750\u6807\u901a\u5e38\u79f0\u4e3a\u5176x\u5750\u6807\u548cy\u5750\u6807\uff0c\u5c3d\u7ba1\u540d\u79f0\"x\"\u548c\"y\"\u662f\u4efb\u610f\u7684\u3002</p> <p>\u5149\u6805\u56fe\u50cf\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7684\u50cf\u7d20\u7f51\u683c\uff0c\u6392\u5217\u6210\u884c\u548c\u5217\u3002\u56e0\u6b64\uff0c\u5b83\u6709\u4e00\u4e2a\u81ea\u7136\u7684\u5750\u6807\u7cfb\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u5bf9\u5e94\u4e8e\u4e00\u5bf9\u6574\u6570\uff0c\u7ed9\u51fa\u5305\u542b\u8be5\u50cf\u7d20\u7684\u884c\u53f7\u548c\u5217\u53f7\u3002\uff08\u5373\u4f7f\u5728\u8fd9\u79cd\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u5173\u4e8e\u5e94\u8be5\u4ece\u4e0a\u5230\u4e0b\u8fd8\u662f\u4ece\u4e0b\u5230\u4e0a\u7f16\u53f7\u884c\u7684\u95ee\u9898\u5b58\u5728\u4e00\u4e9b\u5206\u6b67\u3002\uff09</p> <p>\u5bf9\u4e8e\u77e2\u91cf\u56fe\u50cf\uff0c\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u662f\u81ea\u7136\u7684\u3002\u56fe\u50cf\u7684\u5750\u6807\u7cfb\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4efb\u610f\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u5750\u6807\u7cfb\u6307\u5b9a\u76f8\u540c\u7684\u56fe\u50cf\u3002\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u8be6\u7ec6\u8ba8\u8bba\u5750\u6807\u7cfb\uff0c\u4f46\u5b83\u4eec\u5c06\u662f\u672c\u4e66\u7684\u4e00\u4e2a\u91cd\u70b9\uff0c\u5e76\u4e14\u5728\u4e09\u7ef4\u56fe\u5f62\u4e2d\u6bd4\u5728\u4e8c\u7ef4\u56fe\u5f62\u4e2d\u66f4\u52a0\u91cd\u8981\u3002</p> <p>A digital image, no matter what its format, is specified using a coordinate system. A coordinate system sets up a correspondence between numbers and geometric points. In two dimensions, each point is assigned a pair of numbers, which are called the coordinates of the point. The two coordinates of a point are often called its x-coordinate and y-coordinate, although the names \"x\" and \"y\" are arbitrary.</p> <p>A raster image is a two-dimensional grid of pixels arranged into rows and columns. As such, it has a natural coordinate system in which each pixel corresponds to a pair of integers giving the number of the row and the number of the column that contain the pixel. (Even in this simple case, there is some disagreement as to whether the rows should be numbered from top-to-bottom or from bottom-to-top.)</p> <p>For a vector image, it is natural to use real-number coordinates. The coordinate system for an image is arbitrary to some degree; that is, the same image can be specified using different coordinate systems. I do not want to say a lot about coordinate systems here, but they will be a major focus of a large part of the book, and they are even more important in three-dimensional graphics than in two dimensions.</p>"},{"location":"cn/c1/s2/","title":"\u7b2c 2 \u8282\uff1a\u4e09\u7ef4(3D)\u56fe\u5f62\u7684\u8981\u7d20","text":"<p>Elements of 3D Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u6211\u4eec\u8f6c\u54113D\u56fe\u5f62\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u4e0e\u77e2\u91cf\u56fe\u5f62(vector graphics)\u66f4\u76f8\u4f3c\uff0c\u800c\u4e0d\u662f\u5149\u6805\u56fe\u5f62(raster graphics)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u56fe\u50cf\u7684\u5185\u5bb9\u88ab\u6307\u5b9a\u4e3a\u4e00\u7ec4\u51e0\u4f55\u5bf9\u8c61\u7684\u5217\u8868\u3002\u8fd9\u79cd\u6280\u672f\u79f0\u4e3a\u51e0\u4f55\u5efa\u6a21(geometric modeling)\u3002\u8d77\u70b9\u662f\u6784\u5efa\u4e00\u4e2a\u201c\u4eba\u5de53D\u4e16\u754c\u201d\uff0c\u4f5c\u4e3a\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6392\u5217\u7684\u7b80\u5355\u51e0\u4f55\u5f62\u72b6\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u5bf9\u8c61\u53ef\u4ee5\u5177\u6709\u5c5e\u6027(attributes)\uff0c\u7ed3\u5408\u4e16\u754c\u7684\u5168\u5c40\u5c5e\u6027\uff0c\u786e\u5b9a\u5bf9\u8c61\u7684\u5916\u89c2\u3002\u901a\u5e38\uff0c\u57fa\u672c\u5f62\u72b6\u7684\u8303\u56f4\u975e\u5e38\u6709\u9650\uff0c\u53ef\u80fd\u4ec5\u5305\u62ec\u70b9\u3001\u7ebf\u6bb5\u548c\u4e09\u89d2\u5f62\u3002\u5982\u679c\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u5f62\u72b6\uff0c\u4f8b\u5982\u591a\u8fb9\u5f62\u6216\u7403\u4f53\uff0c\u4e0d\u88ab\u8ba4\u4e3a\u662f\u57fa\u672c\u5f62\u72b6\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u88ab\u6784\u5efa\u6216\u8fd1\u4f3c\u4e3a\u66f4\u57fa\u672c\u7684\u5f62\u72b6\u7684\u96c6\u5408\u3002\u4e3a\u4e86\u5236\u4f5c\u573a\u666f\u7684\u4e8c\u7ef4\u56fe\u50cf\uff0c\u5c06\u573a\u666f\u4ece\u4e09\u7ef4\u6295\u5f71(projected)\u5230\u4e8c\u7ef4\u3002\u6295\u5f71\u76f8\u5f53\u4e8e\u5bf9\u573a\u666f\u62cd\u6444\u7167\u7247\u3002\u8ba9\u6211\u4eec\u7a0d\u5fae\u8be6\u7ec6\u5730\u770b\u4e00\u4e0b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002</p> <p>\u9996\u5148\u662f\u51e0\u4f55...... \u6211\u4eec\u4ece\u4e00\u4e2a\u7a7a\u76843D\u7a7a\u95f4\u6216\u201c\u4e16\u754c\u201d\u5f00\u59cb\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u53ea\u5728\u6982\u5ff5\u4e0a\u5b58\u5728\uff0c\u4f46\u5c06\u5176\u89c6\u4e3a\u771f\u5b9e\u5e76\u4e14\u80fd\u591f\u5728\u8111\u6d77\u4e2d\u53ef\u89c6\u5316\u662f\u6709\u7528\u7684\u3002\u8be5\u7a7a\u95f4\u9700\u8981\u4e00\u4e2a\u5750\u6807\u7cfb(coordinate system)\uff0c\u5c06\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4e0e\u4e09\u4e2a\u6570\u5b57\u76f8\u5173\u8054\uff0c\u901a\u5e38\u79f0\u4e3a\u70b9\u7684x\u3001y\u548cz\u5750\u6807\u3002\u8fd9\u4e2a\u5750\u6807\u7cfb\u79f0\u4e3a\u201c\u4e16\u754c\u5750\u6807(world coordinates)\u201d\u3002</p> <p>\u6211\u4eec\u60f3\u8981\u5728\u4e16\u754c\u4e2d\u5efa\u7acb\u4e00\u4e2a\u573a\u666f\uff0c\u7531\u51e0\u4f55\u5bf9\u8c61\u7ec4\u6210\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u5750\u6807\u6765\u6307\u5b9a\u573a\u666f\u4e2d\u7684\u4e00\u6761\u7ebf\u6bb5\uff0c\u901a\u8fc7\u7ed9\u51fa\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807\u6765\u6307\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u6211\u4eec\u8981\u5904\u7406\u7684\u6700\u5c0f\u7684\u6784\u5efa\u5757\uff0c\u4f8b\u5982\u7ebf\u6bb5\u548c\u4e09\u89d2\u5f62\uff0c\u79f0\u4e3a\u51e0\u4f55\u57fa\u5143(geometric primitives)\u3002\u4e0d\u540c\u7684\u56fe\u5f62\u7cfb\u7edf\u63d0\u4f9b\u4e0d\u540c\u7684\u57fa\u5143\u96c6\u5408\uff0c\u4f46\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u53ea\u8003\u8651\u975e\u5e38\u57fa\u672c\u7684\u5f62\u72b6\uff0c\u4f8b\u5982\u7ebf\u6761\u548c\u4e09\u89d2\u5f62\u3002\u4e00\u4e2a\u590d\u6742\u7684\u573a\u666f\u53ef\u80fd\u5305\u542b\u5927\u91cf\u7684\u57fa\u5143\uff0c\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5355\u72ec\u7684\u57fa\u5143\u7ed9\u51fa\u663e\u5f0f\u5750\u6807\u6765\u521b\u5efa\u573a\u666f\u5c06\u975e\u5e38\u56f0\u96be\u3002\u4efb\u4f55\u7a0b\u5e8f\u5458\u5e94\u8be5\u7acb\u5373\u731c\u5230\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u57fa\u5143\u7ec4\u5408\u6210\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u7ec4\u4ef6\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5305\u542b\u591a\u8f86\u6c7d\u8f66\u7684\u573a\u666f\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8f66\u8f6e\u7684\u51e0\u4f55\u6a21\u578b\u3002\u4e00\u8f86\u6c7d\u8f66\u53ef\u4ee5\u5efa\u6a21\u4e3a\u56db\u4e2a\u8f66\u8f6e\u4ee5\u53ca\u5176\u4ed6\u7ec4\u4ef6\u6a21\u578b\u7684\u96c6\u5408\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u573a\u666f\u4e2d\u4f7f\u7528\u51e0\u4e2a\u6c7d\u8f66\u6a21\u578b\u7684\u526f\u672c\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u65e6\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u51e0\u4f55\u6a21\u578b\uff0c\u5b83\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u66f4\u590d\u6742\u6a21\u578b\u4e2d\u7684\u7ec4\u4ef6\u4f7f\u7528\u3002\u8fd9\u88ab\u79f0\u4e3a\u5206\u5c42\u5efa\u6a21(hierarchical modeling)\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u7528\u51e0\u4f55\u57fa\u5143\u6784\u5efa\u4e86\u4e00\u4e2a\u8f66\u8f6e\u6a21\u578b\u3002\u5f53\u5c06\u8be5\u8f66\u8f6e\u79fb\u52a8\u5230\u6c7d\u8f66\u6a21\u578b\u4e2d\u7684\u4f4d\u7f6e\u65f6\uff0c\u6240\u6709\u57fa\u5143\u7684\u5750\u6807\u90fd\u5fc5\u987b\u8c03\u6574\u3002\u90a3\u4e48\u901a\u8fc7\u6784\u5efa\u8f66\u8f6e\u6211\u4eec\u7a76\u7adf\u83b7\u5f97\u4e86\u4ec0\u4e48\uff1f\u5173\u952e\u5728\u4e8e\u8f66\u8f6e\u4e2d\u7684\u6240\u6709\u5750\u6807\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u8c03\u6574\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a\u4e86\u5c06\u8f66\u8f6e\u653e\u7f6e\u5728\u6c7d\u8f66\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5e94\u7528\u4e8e\u6574\u4e2a\u8f66\u8f6e\u7684\u5355\u4e00\u8c03\u6574\u3002\u6240\u4f7f\u7528\u7684\u201c\u8c03\u6574\u201d\u7c7b\u578b\u79f0\u4e3a\u51e0\u4f55\u53d8\u6362(geometric transform)\u3002\u51e0\u4f55\u53d8\u6362\u7528\u4e8e\u8c03\u6574\u51e0\u4f55\u5bf9\u8c61\u7684\u5927\u5c0f\u3001\u65b9\u5411\u548c\u4f4d\u7f6e\u3002\u5f53\u5236\u4f5c\u6c7d\u8f66\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u8f66\u8f6e\u3002\u7136\u540e\u6211\u4eec\u5bf9\u8f66\u8f6e\u6a21\u578b\u5e94\u7528\u56db\u4e2a\u4e0d\u540c\u7684\u53d8\u6362\uff0c\u4ee5\u5c06\u56db\u4e2a\u8f66\u8f6e\u6dfb\u52a0\u5230\u6c7d\u8f66\u4e2d\u3002\u540c\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u540c\u4e00\u6c7d\u8f66\u6a21\u578b\u5e94\u7528\u4e0d\u540c\u7684\u53d8\u6362\uff0c\u5411\u573a\u666f\u4e2d\u6dfb\u52a0\u51e0\u8f86\u6c7d\u8f66\u3002</p> <p>\u4e09\u79cd\u6700\u57fa\u672c\u7684\u51e0\u4f55\u53d8\u6362\u79f0\u4e3a\u7f29\u653e(scaling)\u3001\u65cb\u8f6c(rotation)\u548c\u5e73\u79fb(translation)\u3002\u7f29\u653e\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u5927\u5c0f\uff0c\u5373\u901a\u8fc7\u67d0\u4e2a\u6307\u5b9a\u56e0\u5b50\u4f7f\u5176\u53d8\u5927\u6216\u53d8\u5c0f\u3002\u65cb\u8f6c\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u65b9\u5411\uff0c\u901a\u8fc7\u56f4\u7ed5\u67d0\u4e2a\u7279\u5b9a\u8f74\u65cb\u8f6c\u4e00\u5b9a\u89d2\u5ea6\u6765\u65cb\u8f6c\u5bf9\u8c61\u3002\u5e73\u79fb\u53d8\u6362\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u8c61\u7684\u4f4d\u7f6e\uff0c\u901a\u8fc7\u5c06\u5176\u4ece\u539f\u59cb\u4f4d\u7f6e\u79fb\u52a8\u4e00\u5b9a\u91cf\u6765\u5e73\u79fb\u5b83\u3002\u5728\u672c\u4e66\u4e2d\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5728\u4e8c\u7ef4\u4e2d\u9047\u5230\u8fd9\u4e9b\u53d8\u6362\uff0c\u56e0\u4e3a\u5b83\u4eec\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u4f46\u57283D\u56fe\u5f62\u4e2d\uff0c\u5b83\u4eec\u53d8\u5f97\u771f\u6b63\u91cd\u8981\u3002</p> <p>When we turn to 3D graphics, we find that the most common approaches have more in common with vector graphics than with raster graphics. That is, the content of an image is specified as a list of geometric objects. The technique is referred to as geometric modeling. The starting point is to construct an \"artificial 3D world\" as a collection of simple geometric shapes, arranged in three-dimensional space. The objects can have attributes that, combined with global properties of the world, determine the appearance of the objects. Often, the range of basic shapes is very limited, perhaps including only points, line segments, and triangles. A more complex shape such as a polygon or sphere can be built or approximated as a collection of more basic shapes, if it is not itself considered to be basic. To make a two-dimensional image of the scene, the scene is projected from three dimensions down to two dimensions. Projection is the equivalent of taking a photograph of the scene. Let's look at how it all works in a little more detail.</p> <p>First, the geometry.... We start with an empty 3D space or \"world.\" Of course, this space exists only conceptually, but it's useful to think of it as real and to be able to visualize it in your mind. The space needs a coordinate system that associates each point in the space with three numbers, usually referred to as the x, y, and z coordinates of the point. This coordinate system is referred to as \"world coordinates.\"</p> <p>We want to build a scene inside the world, made up of geometric objects. For example, we can specify a line segment in the scene by giving the coordinates of its two endpoints, and we can specify a triangle by giving the coordinates of its three vertices. The smallest building blocks that we have to work with, such as line segments and triangles, are called geometric primitives. Different graphics systems make different sets of primitives available, but in many cases only very basic shapes such as lines and triangles are considered primitive. A complex scene can contain a large number of primitives, and it would be very difficult to create the scene by giving explicit coordinates for each individual primitive. The solution, as any programmer should immediately guess, is to chunk together primitives into reusable components. For example, for a scene that contains several automobiles, we might create a geometric model of a wheel. An automobile can be modeled as four wheels together with models of other components. And we could then use several copies of the automobile model in the scene. Note that once a geometric model has been designed, it can be used as a component in more complex models. This is referred to as hierarchical modeling.</p> <p>Suppose that we have constructed a model of a wheel out of geometric primitives. When that wheel is moved into position in the model of an automobile, the coordinates of all of its primitives will have to be adjusted. So what exactly have we gained by building the wheel? The point is that all of the coordinates in the wheel are adjusted in the same way. That is, to place the wheel in the automobile, we just have to specify a single adjustment that is applied to the wheel as a whole. The type of \"adjustment\" that is used is called a geometric transform (or geometric transformation). A geometric transform is used to adjust the size, orientation, and position of a geometric object. When making a model of an automobile, we build one wheel. We then apply four different transforms to the wheel model to add four copies of the wheel to the automobile. Similarly, we can add several automobiles to a scene by applying different transforms to the same automobile model.</p> <p>The three most basic kinds of geometric transform are called scaling, rotation, and translation. A scaling transform is used to set the size of an object, that is, to make it bigger or smaller by some specified factor. A rotation transform is used to set an object's orientation, by rotating it by some angle about some specific axis. A translation transform is used to set the position of an object, by displacing it by a given amount from its original position. In this book, we will meet these transformations first in two dimensions, where they are easier to understand. But it is in 3D graphics that they become truly essential.</p> \u4e2d\u6587\u82f1\u6587 <p>\u63a5\u4e0b\u6765\u662f\u5916\u89c2... \u5355\u72ec\u7684\u51e0\u4f55\u5f62\u72b6\u5e76\u4e0d\u662f\u5f88\u6709\u8da3\u3002\u4f60\u5fc5\u987b\u80fd\u591f\u8bbe\u7f6e\u5b83\u4eec\u7684\u5916\u89c2\u3002\u8fd9\u662f\u901a\u8fc7\u7ed9\u51e0\u4f55\u5bf9\u8c61\u5206\u914d\u5c5e\u6027(attributes)\u6765\u5b8c\u6210\u7684\u3002\u4e00\u4e2a\u660e\u663e\u7684\u5c5e\u6027\u662f\u989c\u8272\uff0c\u4f46\u5b9e\u73b0\u903c\u771f\u7684\u5916\u89c2\u8fdc\u6bd4\u7b80\u5355\u5730\u4e3a\u6bcf\u4e2a\u57fa\u5143\u6307\u5b9a\u4e00\u4e2a\u989c\u8272\u8981\u590d\u6742\u5f97\u591a\u3002\u57283D\u56fe\u5f62\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u8c08\u8bba\u989c\u8272\uff0c\u800c\u662f\u8c08\u8bba\u6750\u8d28(material)\u3002\u8fd9\u91cc\u7684\u6750\u8d28\u6307\u7684\u662f\u786e\u5b9a\u8868\u9762\u56fa\u6709\u89c6\u89c9\u5916\u89c2\u7684\u5c5e\u6027\u3002\u57fa\u672c\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u8868\u9762\u4e0e\u51fb\u4e2d\u8868\u9762\u7684\u5149\u7ebf\u5982\u4f55\u76f8\u4e92\u4f5c\u7528\u3002\u6750\u8d28\u5c5e\u6027\u53ef\u4ee5\u5305\u62ec\u57fa\u672c\u989c\u8272\u4ee5\u53ca\u5176\u4ed6\u5c5e\u6027\uff0c\u5982\u5149\u6cfd\u5ea6(shininess)\u3001\u7c97\u7cd9\u5ea6(roughness)\u548c\u900f\u660e\u5ea6(transparency)\u3002</p> <p>\u6700\u6709\u7528\u7684\u6750\u8d28\u5c5e\u6027\u4e4b\u4e00\u662f\u7eb9\u7406(texture)\u3002\u5728\u6700\u4e00\u822c\u7684\u672f\u8bed\u4e2d\uff0c\u7eb9\u7406\u662f\u4e00\u79cd\u5728\u8868\u9762\u70b9\u4e0e\u70b9\u4e4b\u95f4\u53d8\u5316\u6750\u8d28\u5c5e\u6027\u7684\u65b9\u5f0f\u3002\u7eb9\u7406\u6700\u5e38\u89c1\u7684\u7528\u9014\u662f\u5141\u8bb8\u4e0d\u540c\u70b9\u6709\u4e0d\u540c\u7684\u989c\u8272\u3002\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u4f7f\u7528\u4e8c\u7ef4\u56fe\u50cf\u4f5c\u4e3a\u7eb9\u7406\u6765\u5b9e\u73b0\u7684\u3002\u56fe\u50cf\u53ef\u4ee5\u5e94\u7528\u5230\u8868\u9762\u4e0a\uff0c\u4f7f\u5f97\u56fe\u50cf\u770b\u8d77\u6765\u50cf\u662f\u201c\u7ed8\u5236\u201d\u5728\u8868\u9762\u4e0a\u3002\u7136\u800c\uff0c\u7eb9\u7406\u4e5f\u53ef\u4ee5\u6307\u53d8\u5316\u7684\u503c\uff0c\u6bd4\u5982\u900f\u660e\u5ea6\u6216\u201c\u51f9\u51f8\u4e0d\u5e73\u201d\u3002\u7eb9\u7406\u5141\u8bb8\u6211\u4eec\u5728\u4e0d\u4f7f\u7528\u5927\u91cf\u51e0\u4f55\u57fa\u5143\u7684\u60c5\u51b5\u4e0b\u4e3a\u573a\u666f\u6dfb\u52a0\u7ec6\u8282\uff1b\u800c\u662f\u4f7f\u7528\u8f83\u5c11\u6570\u91cf\u7684\u5e26\u6709\u7eb9\u7406\u7684\u57fa\u5143\u3002</p> <p>\u6750\u8d28\u662f\u5bf9\u8c61\u7684 \u56fa\u6709\u5c5e\u6027 (intrinsic property)\uff0c\u4f46\u5bf9\u8c61\u7684\u5b9e\u9645\u5916\u89c2\u8fd8\u53d6\u51b3\u4e8e\u5bf9\u8c61\u6240\u5904\u7684\u73af\u5883\u3002\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u9664\u975e\u73af\u5883\u4e2d\u6709\u4e00\u4e9b\u5149\u7ebf\uff0c\u5426\u5219\u4f60\u770b\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f\u3002\u57283D\u56fe\u5f62\u4e2d\u4e5f\u662f\u5982\u6b64\uff1a\u4f60\u5fc5\u987b\u5728\u573a\u666f\u4e2d\u6dfb\u52a0 \u6a21\u62df\u5149\u7ebf(simulated lighting)\u3002\u573a\u666f\u4e2d\u53ef\u4ee5\u6709\u51e0\u4e2a\u5149\u6e90\u3002\u6bcf\u4e2a\u5149\u6e90\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u989c\u8272\u3001\u5f3a\u5ea6\u548c\u65b9\u5411\u6216\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6765\u81ea\u8fd9\u4e9b\u5149\u6e90\u7684\u5149\u5c06\u4e0e\u573a\u666f\u4e2d\u5bf9\u8c61\u7684\u6750\u8d28\u5c5e\u6027\u76f8\u4e92\u4f5c\u7528\u3002\u56fe\u5f62\u7cfb\u7edf\u4e2d\u7684\u5149\u7167\u652f\u6301\u53ef\u4ee5\u4ece\u76f8\u5f53\u7b80\u5355\u5230\u975e\u5e38\u590d\u6742\u548c\u8ba1\u7b97\u5bc6\u96c6\u7684\u8303\u56f4\u5185\u3002</p> <p>Next, appearance.... Geometric shapes by themselves are not very interesting. You have to be able to set their appearance. This is done by assigning attributes to the geometric objects. An obvious attribute is color, but getting a realistic appearance turns out to be a lot more complicated than simply specifying a color for each primitive. In 3D graphics, instead of color, we usually talk about material. The term material here refers to the properties that determine the intrinsic visual appearance of a surface. Essentially, this means how the surface interacts with light that hits the surface. Material properties can include a basic color as well as other properties such as shininess, roughness, and transparency.</p> <p>One of the most useful kinds of material property is a texture. In most general terms, a texture is a way of varying material properties from point-to-point on a surface. The most common use of texture is to allow different colors for different points. This is often done by using a 2D image as a texture. The image can be applied to a surface so that the image looks like it is \"painted\" onto the surface. However, texture can also refer to changing values for things like transparency or \"bumpiness.\" Textures allow us to add detail to a scene without using a huge number of geometric primitives; instead, you can use a smaller number of textured primitives.</p> <p>A material is an intrinsic property of an object, but the actual appearance of the object also depends on the environment in which the object is viewed. In the real world, you don't see anything unless there is some light in the environment. The same is true in 3D graphics: you have to add simulated lighting to a scene. There can be several sources of light in a scene. Each light source can have its own color, intensity, and direction or position. The light from those sources will then interact with the material properties of the objects in the scene. Support for lighting in a graphics system can range from fairly simple to very complex and computationally intensive.</p> \u4e2d\u6587\u82f1\u6587 <p>\u6700\u540e\uff0c\u56fe\u50cf... \u4e00\u822c\u6765\u8bf4\uff0c3D\u56fe\u5f62\u7684\u6700\u7ec8\u76ee\u6807\u662f\u751f\u62103D\u4e16\u754c\u76842D\u56fe\u50cf\u3002\u4ece3D\u52302D\u7684\u8f6c\u6362\u6d89\u53ca\u89c6\u56fe(viewing)\u548c\u6295\u5f71(projection)\u3002\u5f53\u4ece\u4e0d\u540c\u7684\u89c6\u89d2\u89c2\u5bdf\u65f6\uff0c\u4e16\u754c\u770b\u8d77\u6765\u4e0d\u540c\u3002\u4e3a\u4e86\u8bbe\u7f6e\u4e00\u4e2a\u89c6\u89d2\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u89c2\u5bdf\u8005\u7684\u4f4d\u7f6e\u548c\u89c2\u5bdf\u8005\u7684\u671d\u5411\u3002\u8fd8\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u201c\u4e0a(up)\u201d\u65b9\u5411\uff0c\u5373\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u5c06\u6307\u5411\u4e0a\u65b9\u7684\u65b9\u5411\u3002\u8fd9\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u5c06\u4e00\u4e2a\u201c\u865a\u62df\u76f8\u673a\u201d\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u3002\u4e00\u65e6\u89c6\u56fe\u8bbe\u7f6e\u597d\u4e86\uff0c\u4ece\u90a3\u4e2a\u89c6\u89d2\u770b\u5230\u7684\u4e16\u754c\u53ef\u4ee5\u6295\u5f71\u52302D\u4e2d\u3002\u6295\u5f71\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u76f8\u673a\u62cd\u7167\u3002</p> <p>\u6700\u7ec8\u76843D\u56fe\u5f62\u6b65\u9aa4\u662f\u5c06\u989c\u8272\u5206\u914d\u7ed92D\u56fe\u50cf\u4e2d\u7684\u5355\u4e2a\u50cf\u7d20\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u5149\u6805\u5316(rasterization)\uff0c\u800c\u751f\u6210\u56fe\u50cf\u7684\u6574\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u6e32\u67d3(rendering)\u573a\u666f\u3002</p> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7684\u76ee\u6807\u4e0d\u662f\u521b\u5efa\u5355\u4e2a\u56fe\u50cf\uff0c\u800c\u662f\u521b\u5efa\u4e00\u4e2a\u52a8\u753b(animation)\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u663e\u793a\u4e0d\u540c\u65f6\u523b\u4e16\u754c\u7684\u56fe\u50cf\u3002\u5728\u52a8\u753b\u4e2d\uff0c\u4ece\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u56fe\u50cf\u5230\u4e0b\u4e00\u4e2a\u56fe\u50cf\u6709\u5fae\u5c0f\u7684\u53d8\u5316\u3002\u573a\u666f\u7684\u51e0\u4e4e\u4efb\u4f55\u65b9\u9762\u5728\u52a8\u753b\u671f\u95f4\u90fd\u53ef\u4ee5\u53d1\u751f\u53d8\u5316\uff0c\u5305\u62ec\u57fa\u5143\u7684\u5750\u6807\u3001\u53d8\u6362\u3001\u6750\u8d28\u5c5e\u6027\u548c\u89c6\u56fe\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u9010\u6e10\u589e\u52a0\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u7f29\u653e\u53d8\u6362\u4e2d\u7684\u6bd4\u4f8b\u56e0\u5b50\u6765\u4f7f\u5bf9\u8c61\u5728\u52a8\u753b\u8fc7\u7a0b\u4e2d\u589e\u957f\u3002\u5728\u52a8\u753b\u671f\u95f4\u6539\u53d8\u89c6\u56fe\u53ef\u4ee5\u4f7f\u5f97\u6548\u679c\u770b\u8d77\u6765\u662f\u5728\u573a\u666f\u4e2d\u79fb\u52a8\u6216\u98de\u884c\u3002\u5f53\u7136\uff0c\u8ba1\u7b97\u6240\u9700\u7684\u53d8\u5316\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\u3002\u6709\u8bb8\u591a\u6280\u672f\u53ef\u4ee5\u5e2e\u52a9\u8fdb\u884c\u8ba1\u7b97\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u4e4b\u4e00\u662f\u4f7f\u7528\u201c\u7269\u7406\u5f15\u64ce(physics engine)\u201d\uff0c\u5b83\u6839\u636e\u7269\u7406\u5b9a\u5f8b\u8ba1\u7b97\u5bf9\u8c61\u7684\u8fd0\u52a8\u548c\u76f8\u4e92\u4f5c\u7528\u3002\uff08\u7136\u800c\uff0c\u672c\u4e66\u4e0d\u4f1a\u4ecb\u7ecd\u7269\u7406\u5f15\u64ce\u3002\uff09</p> <p>Finally, the image.... In general, the ultimate goal of 3D graphics is to produce 2D images of the 3D world. The transformation from 3D to 2D involves viewing and projection. The world looks different when seen from different points of view. To set up a point of view, we need to specify the position of the viewer and the direction that the viewer is looking. It is also necessary to specify an \"up\" direction, a direction that will be pointing upwards in the final image. This can be thought of as placing a \"virtual camera\" into the scene. Once the view is set up, the world as seen from that point of view can be projected into 2D. Projection is analogous to taking a picture with the camera.</p> <p>The final step in 3D graphics is to assign colors to individual pixels in the 2D image. This process is called rasterization, and the whole process of producing an image is referred to as rendering the scene.</p> <p>In many cases the ultimate goal is not to create a single image, but to create an animation, consisting of a sequence of images that show the world at different times. In an animation, there are small changes from one image in the sequence to the next. Almost any aspect of a scene can change during an animation, including coordinates of primitives, transformations, material properties, and the view. For example, an object can be made to grow over the course of an animation by gradually increasing the scale factor in a scaling transformation that is applied to the object. And changing the view during an animation can give the effect of moving or flying through the scene. Of course, it can be difficult to compute the necessary changes. There are many techniques to help with the computation. One of the most important is to use a \"physics engine,\" which computes the motion and interaction of objects based on the laws of physics. (However, you won't learn about physics engines in this book.)</p>"},{"location":"cn/c1/s3/","title":"\u7b2c 3 \u8282\uff1a\u786c\u4ef6\u4e0e\u8f6f\u4ef6","text":"<p>Hardware and Software</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5c06\u4ee5OpenGL\u4f5c\u4e3a3D\u56fe\u5f62\u7f16\u7a0b\u7684\u4e3b\u8981\u57fa\u7840\u3002\u6700\u521d\u7684\u5f00\u653eGL(OpenGL)\u7248\u672c\u4e8e1992\u5e74\u7531\u4e00\u5bb6\u540d\u4e3aSilicon Graphics\u7684\u516c\u53f8\u53d1\u5e03\uff0c\u8be5\u516c\u53f8\u4ee5\u5176\u56fe\u5f62\u5de5\u4f5c\u7ad9\u800c\u95fb\u540d\u2014\u2014\u8fd9\u662f\u8bbe\u8ba1\u7528\u4e8e\u5bc6\u96c6\u56fe\u5f62\u5e94\u7528\u7684\u5f3a\u5927\u4e14\u6602\u8d35\u7684\u8ba1\u7b97\u673a\u3002\uff08\u4eca\u5929\uff0c\u60a8\u7684\u667a\u80fd\u624b\u673a\u5177\u6709\u66f4\u591a\u7684\u56fe\u5f62\u8ba1\u7b97\u80fd\u529b\u3002\uff09OpenGL\u53d7\u5230\u5927\u591a\u6570\u73b0\u4ee3\u8ba1\u7b97\u8bbe\u5907\u7684\u56fe\u5f62\u786c\u4ef6\u652f\u6301\uff0c\u5305\u62ec\u53f0\u5f0f\u8ba1\u7b97\u673a\u3001\u7b14\u8bb0\u672c\u7535\u8111\u548c\u8bb8\u591a\u79fb\u52a8\u8bbe\u5907\u3002\u4f5c\u4e3a\u7f51\u9875GL(WebGL)\u7684\u5f62\u5f0f\uff0c\u5b83\u662fWeb\u4e0a\u5927\u591a\u65703D\u56fe\u5f62\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\u672c\u8282\u5c06\u4e3a\u60a8\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8eOpenGL\u5386\u53f2\u548c\u652f\u6301\u5b83\u7684\u56fe\u5f62\u786c\u4ef6\u7684\u80cc\u666f\u77e5\u8bc6\u3002</p> <p>\u5728\u6700\u521d\u7684\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e2d\uff0c\u5c4f\u5e55\u5185\u5bb9\u662f\u7531\u4e2d\u592e\u5904\u7406\u5668(CPU)\u76f4\u63a5\u7ba1\u7406\u7684\u3002\u4f8b\u5982\uff0c\u8981\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u4e00\u6761\u7ebf\u6bb5\uff0cCPU\u5c06\u8fd0\u884c\u4e00\u4e2a\u5faa\u73af\u6765\u8bbe\u7f6e\u6cbf\u7ebf\u7684\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u3002\u4e0d\u7528\u8bf4\uff0c\u56fe\u5f62\u53ef\u80fd\u4f1a\u5360\u7528CPU\u5927\u91cf\u7684\u65f6\u95f4\u3002\u4e0e\u6211\u4eec\u4eca\u5929\u671f\u671b\u7684\u76f8\u6bd4\uff0c\u56fe\u5f62\u6027\u80fd\u975e\u5e38\u6162\u3002\u90a3\u4e48\uff0c\u6709\u4ec0\u4e48\u53d8\u5316\u5462\uff1f\u5f53\u7136\uff0c\u8ba1\u7b97\u673a\u603b\u4f53\u4e0a\u66f4\u5feb\u4e86\uff0c\u4f46\u6700\u5927\u7684\u53d8\u5316\u662f\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u4e2d\uff0c\u56fe\u5f62\u5904\u7406\u662f\u7531\u4e00\u79cd\u79f0\u4e3a\u56fe\u5f62\u5904\u7406\u5668(GPU)\u7684\u4e13\u7528\u7ec4\u4ef6\u5b8c\u6210\u7684\u3002 GPU\u5305\u62ec\u7528\u4e8e\u6267\u884c\u56fe\u5f62\u8ba1\u7b97\u7684\u5904\u7406\u5668\uff1b \u5b9e\u9645\u4e0a\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u5927\u91cf\u7684\u8fd9\u79cd\u5904\u7406\u5668\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u5e76\u884c\u5de5\u4f5c\u4ee5\u5927\u5927\u52a0\u901f\u56fe\u5f62\u64cd\u4f5c\u3002 \u5b83\u8fd8\u5305\u62ec\u4e13\u7528\u5185\u5b58\uff0c\u7528\u4e8e\u5b58\u50a8\u8bf8\u5982\u56fe\u50cf\u548c\u5750\u6807\u5217\u8868\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 GPU\u5904\u7406\u5668\u5bf9\u5b58\u50a8\u5728GPU\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5177\u6709\u975e\u5e38\u5feb\u7684\u8bbf\u95ee\u901f\u5ea6\u2014\u2014\u6bd4\u5b83\u4eec\u8bbf\u95ee\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e3b\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8981\u5feb\u5f97\u591a\u3002</p> <p>\u8981\u7ed8\u5236\u4e00\u6761\u7ebf\u6216\u6267\u884c\u5176\u4ed6\u56fe\u5f62\u64cd\u4f5c\uff0cCPU\u53ea\u9700\u5c06\u547d\u4ee4\u4ee5\u53ca\u4efb\u4f55\u5fc5\u8981\u7684\u6570\u636e\u53d1\u9001\u5230GPU\uff0cGPU\u8d1f\u8d23\u5b9e\u9645\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u3002 CPU\u5c06\u5927\u90e8\u5206\u56fe\u5f62\u5de5\u4f5c\u4ea4\u7ed9\u4e86GPU\uff0c\u540e\u8005\u88ab\u4f18\u5316\u4e3a\u975e\u5e38\u5feb\u5730\u6267\u884c\u8fd9\u9879\u5de5\u4f5c\u3002 GPU\u7406\u89e3\u7684\u547d\u4ee4\u96c6\u7ec4\u6210\u4e86GPU\u7684\u63a5\u53e3(API)\u3002 OpenGL\u662f\u56fe\u5f62API\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5927\u591a\u6570GPU\u652f\u6301OpenGL\uff0c\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u7406\u89e3OpenGL\u547d\u4ee4\uff0c\u6216\u8005\u81f3\u5c11OpenGL\u547d\u4ee4\u53ef\u4ee5\u88ab\u6709\u6548\u5730\u8f6c\u6362\u4e3aGPU\u53ef\u4ee5\u7406\u89e3\u7684\u547d\u4ee4\u3002</p> <p>OpenGL\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u56fe\u5f62API\u3002 \u5b9e\u9645\u4e0a\uff0c\u5b83\u6b63\u5728\u88ab\u66f4\u73b0\u4ee3\u7684\u66ff\u4ee3\u65b9\u6848\u6240\u53d6\u4ee3\uff0c\u5305\u62ec\u4f0f\u5c14\u7518(Vulkan)\uff0c\u8fd9\u662f\u7531\u8d1f\u8d23OpenGL\u7684\u540c\u4e00\u7ec4\u7ec7\u5f00\u53d1\u7684\u5f00\u653eAPI\u3002 \u8fd8\u6709\u4e00\u4e9b\u7531\u82f9\u679c\u548c\u5fae\u8f6f\u4f7f\u7528\u7684\u4e13\u6709API\uff1ametal(Metal)\u548cdirect3D(Direct3D)\u3002 \u81f3\u4e8eWeb\uff0c\u4e00\u4e2a\u540d\u4e3a\u7f51\u9875GPU(WebGPU)\u7684\u65b0API\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728\u4e00\u4e9bWeb\u6d4f\u89c8\u5668\u4e2d\u5b9e\u73b0\u4e86\u3002 \u8fd9\u4e9b\u8f83\u65b0\u7684API\u662f\u590d\u6742\u4e14\u5e95\u5c42\u7684\u3002 \u5b83\u4eec\u66f4\u591a\u5730\u8bbe\u8ba1\u7528\u4e8e\u901f\u5ea6\u548c\u6548\u7387\uff0c\u800c\u4e0d\u662f\u6613\u7528\u6027\u3002 \u672c\u6559\u6750\u4e0d\u6db5\u76d6Metal\u3001Direct3D\u548cVulkan\uff0c\u4f46\u5728\u7b2c9\u7ae0\u4e2d\u4ecb\u7ecd\u4e86WebGPU\u3002 \u5728\u5927\u90e8\u5206\u7684\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528OpenGL\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u5bb9\u6613\u5165\u95e8\u76843D\u56fe\u5f62\u4ecb\u7ecd\uff0c\u4ee5\u53caWebGL\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u662fWeb\u6d4f\u89c8\u5668\u4e2d3D\u56fe\u5f62\u7684\u4e3b\u8981API\u3002</p> <p>We will be using OpenGL as the primary basis for 3D graphics programming. The original version of OpenGL was released in 1992 by a company named Silicon Graphics, which was known for its graphics workstations\u2014powerful, expensive computers designed for intensive graphical applications. (Today, you have more graphics computing power on your smart phone.) OpenGL is supported by the graphics hardware in most modern computing devices, including desktop computers, laptops, and many mobile devices. In the form of WebGL, it is the used for most 3D graphics on the Web. This section will give you a bit of background about the history of OpenGL and about the graphics hardware that supports it.</p> <p>In the first desktop computers, the contents of the screen were managed directly by the CPU. For example, to draw a line segment on the screen, the CPU would run a loop to set the color of each pixel that lies along the line. Needless to say, graphics could take up a lot of the CPU's time. And graphics performance was very slow, compared to what we expect today. So what has changed? Computers are much faster in general, of course, but the big change is that in modern computers, graphics processing is done by a specialized component called a GPU, or Graphics Processing Unit. A GPU includes processors for doing graphics computations; in fact, it can include a large number of such processors that work in parallel to greatly speed up graphical operations. It also includes its own dedicated memory for storing things like images and lists of coordinates. GPU processors have very fast access to data that is stored in GPU memory\u2014much faster than their access to data stored in the computer's main memory.</p> <p>To draw a line or perform some other graphical operation, the CPU simply has to send commands, along with any necessary data, to the GPU, which is responsible for actually carrying out those commands. The CPU offloads most of the graphical work to the GPU, which is optimized to carry out that work very quickly. The set of commands that the GPU understands make up the API of the GPU. OpenGL is an example of a graphics API, and most GPUs support OpenGL in the sense that they can understand OpenGL commands, or at least that OpenGL commands can efficiently be translated into commands that the GPU can understand.</p> <p>OpenGL is not the only graphics API. In fact, it is in the process of being replaced by more modern alternatives, including Vulkan an open API from the same group that is responsible for OpenGL. There are also proprietary APIs used by Apple and Microsoft: Metal and Direct3D. As for the Web, a new API called WebGPU has been under development for some time and is already implemented in some Web browsers. These newer APIs are complex and low-level. They are designed more for speed and efficiency rather than ease-of-use. Metal, Direct3D, and Vulkan are not covered in this textbook, but WebGPU is introduced in Chapter 9. For most of the book, we will use OpenGL, because it provides an easier introduction to 3D graphics, and WebGL, because it is still the major API for 3D graphics in Web browsers.</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u66fe\u7ecf\u8bf4\u8fc7OpenGL\u662f\u4e00\u4e2aAPI\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u662f\u4e00\u7cfb\u5217API\uff0c\u7ecf\u8fc7\u591a\u6b21\u6269\u5c55\u548c\u4fee\u8ba2\u3002\u57282023\u5e74\uff0c\u5f53\u524d\uff08\u4e5f\u8bb8\u662f\u6700\u7ec8\uff09\u7248\u672c\u662f4.6\uff0c\u5b83\u9996\u6b21\u53d1\u5e03\u4e8e2017\u5e74\u3002\u8fd9\u4e0e1992\u5e74\u76841.0\u7248\u672c\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u7248\u672c\u53eb\u505aOpenGL ES\uff0c\u7528\u4e8e\u8bf8\u5982\u624b\u673a\u548c\u5e73\u677f\u7535\u8111\u4e4b\u7c7b\u7684\u201c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u201d\u3002\u8fd8\u6709WebGL\uff0c\u7528\u4e8eWeb\u6d4f\u89c8\u5668\uff0c\u57fa\u672c\u4e0a\u662fOpenGL ES\u7684\u4e00\u4e2a\u79fb\u690d\u7248\u672c\u3002\u4e86\u89e3OpenGL\u7684\u53d8\u5316\u662f\u5982\u4f55\u53d1\u751f\u4ee5\u53ca\u539f\u56e0\u5c06\u4f1a\u5f88\u6709\u7528\u3002</p> <p>\u9996\u5148\uff0c\u60a8\u5e94\u8be5\u77e5\u9053OpenGL\u88ab\u8bbe\u8ba1\u4e3a\u4e00\u4e2a\u201c\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\u201d\u7cfb\u7edf\u3002\u670d\u52a1\u5668\u8d1f\u8d23\u63a7\u5236\u8ba1\u7b97\u673a\u7684\u663e\u793a\u5e76\u6267\u884c\u56fe\u5f62\u8ba1\u7b97\uff0c\u6267\u884c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u547d\u4ee4\u3002\u901a\u5e38\uff0c\u670d\u52a1\u5668\u662f\u4e00\u4e2aGPU\uff0c\u5305\u62ec\u5176\u56fe\u5f62\u5904\u7406\u5668\u548c\u5185\u5b58\u3002\u670d\u52a1\u5668\u6267\u884cOpenGL\u547d\u4ee4\u3002\u5ba2\u6237\u7aef\u662f\u540c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e2d\u7684CPU\uff0c\u4ee5\u53ca\u5b83\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002OpenGL\u547d\u4ee4\u6765\u81ea\u4e8e\u5728CPU\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002\u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8fdc\u7a0b\u8fd0\u884cOpenGL\u7a0b\u5e8f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5728\u8fdc\u7a0b\u8ba1\u7b97\u673a\uff08OpenGL\u5ba2\u6237\u7aef\uff09\u4e0a\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u56fe\u5f62\u8ba1\u7b97\u548c\u663e\u793a\u662f\u5728\u60a8\u5b9e\u9645\u4f7f\u7528\u7684\u8ba1\u7b97\u673a\u4e0a\u5b8c\u6210\u7684\uff08OpenGL\u670d\u52a1\u5668\uff09\u3002</p> <p>\u5173\u952e\u601d\u60f3\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u662f\u5206\u5f00\u7684\u7ec4\u4ef6\uff0c\u5e76\u4e14\u5728\u8fd9\u4e9b\u7ec4\u4ef6\u4e4b\u95f4\u6709\u4e00\u4e2a\u901a\u4fe1\u901a\u9053\u3002OpenGL\u547d\u4ee4\u53ca\u5176\u6240\u9700\u7684\u6570\u636e\u901a\u8fc7\u8be5\u901a\u9053\u4ece\u5ba2\u6237\u7aef\uff08CPU\uff09\u4f20\u8f93\u5230\u670d\u52a1\u5668\uff08GPU\uff09\u3002\u901a\u9053\u7684\u5bb9\u91cf\u53ef\u80fd\u662f\u56fe\u5f62\u6027\u80fd\u7684\u9650\u5236\u56e0\u7d20\u3002\u60f3\u8c61\u4e00\u4e0b\u5c06\u56fe\u50cf\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\u3002\u5982\u679cGPU\u53ef\u4ee5\u5728\u5fae\u79d2\u5185\u7ed8\u5236\u56fe\u50cf\uff0c\u4f46\u662f\u5c06\u56fe\u50cf\u6570\u636e\u4eceCPU\u53d1\u9001\u5230GPU\u9700\u8981\u6beb\u79d2\u7ea7\u7684\u65f6\u95f4\uff0c\u90a3\u4e48GPU\u7684\u5feb\u901f\u901f\u5ea6\u5c31\u65e0\u5173\u7d27\u8981\u4e86\u2014\u2014\u7ed8\u5236\u56fe\u50cf\u6240\u9700\u7684\u5927\u90e8\u5206\u65f6\u95f4\u662f\u901a\u4fe1\u65f6\u95f4\u3002</p> <p>\u56e0\u6b64\uff0cOpenGL\u53d1\u5c55\u7684\u9a71\u52a8\u56e0\u7d20\u4e4b\u4e00\u662f\u5e0c\u671b\u9650\u5236CPU\u548cGPU\u4e4b\u95f4\u9700\u8981\u7684\u901a\u4fe1\u91cf\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u4fe1\u606f\u5b58\u50a8\u5728GPU\u7684\u5185\u5b58\u4e2d\u3002\u5982\u679c\u67d0\u4e9b\u6570\u636e\u5c06\u88ab\u591a\u6b21\u4f7f\u7528\uff0c\u5219\u53ef\u4ee5\u4e00\u6b21\u5c06\u5176\u4f20\u8f93\u5230GPU\u5e76\u5b58\u50a8\u5728\u90a3\u91cc\u7684\u5185\u5b58\u4e2d\uff0c\u4ece\u800c\u7acb\u5373\u4f7fGPU\u53ef\u4ee5\u8bbf\u95ee\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5c1d\u8bd5\u51cf\u5c11\u5fc5\u987b\u4f20\u8f93\u5230GPU\u4ee5\u7ed8\u5236\u7ed9\u5b9a\u56fe\u50cf\u7684OpenGL\u547d\u4ee4\u7684\u6570\u91cf\u3002</p> <p>OpenGL\u7ed8\u5236\u8bf8\u5982\u4e09\u89d2\u5f62\u4e4b\u7c7b\u7684\u57fa\u5143\u3002\u6307\u5b9a\u4e00\u4e2a\u57fa\u5143\u610f\u5473\u7740\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6307\u5b9a\u5750\u6807\u548c\u5c5e\u6027\u3002\u5728\u6700\u521d\u7684OpenGL 1.0\u4e2d\uff0c\u4f7f\u7528\u5355\u72ec\u7684\u547d\u4ee4\u6765\u6307\u5b9a\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\uff0c\u5e76\u4e14\u6bcf\u5f53\u5c5e\u6027\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\u90fd\u9700\u8981\u4e00\u4e2a\u547d\u4ee4\u3002\u8981\u7ed8\u5236\u4e00\u4e2a\u4e09\u89d2\u5f62\u5c06\u9700\u8981\u4e09\u4e2a\u6216\u66f4\u591a\u4e2a\u547d\u4ee4\u3002\u7531\u6210\u5343\u4e0a\u4e07\u4e2a\u4e09\u89d2\u5f62\u7ec4\u6210\u7684\u590d\u6742\u5bf9\u8c61\u7684\u7ed8\u5236\u5c06\u9700\u8981\u8bb8\u591a\u6210\u5343\u4e0a\u4e07\u4e2a\u547d\u4ee4\u3002\u5373\u4f7f\u5728OpenGL 1.1\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u547d\u4ee4\u800c\u4e0d\u662f\u6570\u5343\u4e2a\u6765\u7ed8\u5236\u8fd9\u6837\u7684\u5bf9\u8c61\u3002\u5bf9\u8c61\u7684\u6240\u6709\u6570\u636e\u5c06\u52a0\u8f7d\u5230\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u53ef\u4ee5\u4e00\u6b21\u6027\u5c06\u5176\u53d1\u9001\u5230GPU\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5982\u679c\u8981\u591a\u6b21\u7ed8\u5236\u5bf9\u8c61\uff0c\u5219\u6bcf\u6b21\u7ed8\u5236\u5bf9\u8c61\u65f6\u90fd\u5fc5\u987b\u91cd\u65b0\u4f20\u8f93\u6570\u636e\u3002\u8fd9\u5728OpenGL 1.5\u4e2d\u901a\u8fc7\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61(VBO(Vertex Buffer Objects))\u5f97\u5230\u4e86\u4fee\u590d\u3002 VBO \u662fGPU\u4e2d\u7684\u4e00\u5757\u5185\u5b58\u5757\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e00\u7ec4\u9876\u70b9\u7684\u5750\u6807\u6216\u5c5e\u6027\u503c\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5728\u4e0d\u5fc5\u6bcf\u6b21\u4f7f\u7528\u65f6\u90fd\u4eceCPU\u91cd\u65b0\u4f20\u8f93\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u91cd\u7528\u6570\u636e\u3002</p> <p>\u540c\u6837\uff0c\u5728OpenGL 1.1\u4e2d\u5f15\u5165\u4e86\u7eb9\u7406\u5bf9\u8c61(texture objects)\uff0c\u4ee5\u4fbf\u5728GPU\u4e0a\u5b58\u50a8\u591a\u4e2a\u56fe\u50cf\u4ee5\u4f9b\u7eb9\u7406\u4f7f\u7528\u3002\u8fd9\u610f\u5473\u7740\u5c06\u591a\u6b21\u91cd\u590d\u4f7f\u7528\u7684\u7eb9\u7406\u56fe\u50cf\u52a0\u8f7d\u5230GPU\u4e2d\u4e00\u6b21\uff0c\u4ee5\u4fbfGPU\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u56fe\u50cf\u4e4b\u95f4\u5207\u6362\u800c\u65e0\u9700\u91cd\u65b0\u52a0\u8f7d\u5b83\u4eec\u3002</p> <p>I have said that OpenGL is an API, but in fact it is a series of APIs that have been subject to repeated extension and revision. In 2023, the current (and perhaps final) version is 4.6, which was first released in 2017. It is very different from the 1.0 version from 1992. Furthermore, there is a specialized version called OpenGL ES for \"embedded systems\" such as mobile phones and tablets. And there is also WebGL, for use in Web browsers, which is basically a port of OpenGL ES. It will be useful to know something about how and why OpenGL has changed.</p> <p>First of all, you should know that OpenGL was designed as a \"client/server\" system. The server, which is responsible for controlling the computer's display and performing graphics computations, carries out commands issued by the client. Typically, the server is a GPU, including its graphics processors and memory. The server executes OpenGL commands. The client is the CPU in the same computer, along with the application program that it is running. OpenGL commands come from the program that is running on the CPU. However, it is actually possible to run OpenGL programs remotely over a network. That is, you can execute an application program on a remote computer (the OpenGL client), while the graphics computations and display are done on the computer that you are actually using (the OpenGL server).</p> <p>The key idea is that the client and the server are separate components, and there is a communication channel between those components. OpenGL commands and the data that they need are communicated from the client (the CPU) to the server (the GPU) over that channel. The capacity of the channel can be a limiting factor in graphics performance. Think of drawing an image onto the screen. If the GPU can draw the image in microseconds, but it takes milliseconds to send the data for the image from the CPU to the GPU, then the great speed of the GPU is irrelevant\u2014most of the time that it takes to draw the image is communication time.</p> <p>For this reason, one of the driving factors in the evolution of OpenGL has been the desire to limit the amount of communication that is needed between the CPU and the GPU. One approach is to store information in the GPU's memory. If some data is going to be used several times, it can be transmitted to the GPU once and stored in memory there, where it will be immediately accessible to the GPU. Another approach is to try to decrease the number of OpenGL commands that must be transmitted to the GPU to draw a given image.</p> <p>OpenGL draws primitives such as triangles. Specifying a primitive means specifying coordinates and attributes for each of its vertices. In the original OpenGL 1.0, a separate command was used to specify the coordinates of each vertex, and a command was needed each time the value of an attribute changed. To draw a single triangle would require three or more commands. Drawing a complex object made up of thousands of triangles would take many thousands of commands. Even in OpenGL 1.1, it became possible to draw such an object with a single command instead of thousands. All the data for the object would be loaded into arrays, which could then be sent in a single step to the GPU. Unfortunately, if the object was going to be drawn more than once, then the data would have to be retransmitted each time the object was drawn. This was fixed in OpenGL 1.5 with Vertex Buffer Objects. A VBO is a block of memory in the GPU that can store the coordinates or attribute values for a set of vertices. This makes it possible to reuse the data without having to retransmit it from the CPU to the GPU every time it is used.</p> <p>Similarly, OpenGL 1.1 introduced texture objects to make it possible to store several images on the GPU for use as textures. This means that texture images that are going to be reused several times can be loaded once into the GPU, so that the GPU can easily switch between images without having to reload them.</p> \u4e2d\u6587\u82f1\u6587 <p>\u968f\u7740\u65b0\u7684\u529f\u80fd\u88ab\u6dfb\u52a0\u5230OpenGL\u4e2d\uff0cAPI\u7684\u89c4\u6a21\u4e5f\u5728\u589e\u957f\u3002\u4f46\u589e\u957f\u901f\u5ea6\u4ecd\u7136\u88ab\u7528\u4e8e\u8fdb\u884c\u56fe\u5f62\u5904\u7406\u7684\u65b0\u7684\u3001\u66f4\u590d\u6742\u7684\u6280\u672f\u6240\u8d85\u8d8a\u3002\u5176\u4e2d\u4e00\u4e9b\u65b0\u6280\u672f\u88ab\u6dfb\u52a0\u5230\u4e86OpenGL\u4e2d\uff0c\u4f46\u95ee\u9898\u5728\u4e8e\uff0c\u65e0\u8bba\u4f60\u6dfb\u52a0\u4e86\u591a\u5c11\u529f\u80fd\uff0c\u603b\u4f1a\u6709\u5bf9\u65b0\u529f\u80fd\u7684\u9700\u6c42\uff0c\u4ee5\u53ca\u5bf9\u6240\u6709\u65b0\u529f\u80fd\u4f7f\u4e8b\u60c5\u53d8\u5f97\u8fc7\u4e8e\u590d\u6742\u7684\u62b1\u6028\uff01OpenGL\u662f\u4e00\u4e2a\u5e9e\u5927\u7684\u673a\u5668\uff0c\u4e0d\u65ad\u5730\u589e\u52a0\u65b0\u7ec4\u4ef6\uff0c\u4f46\u4ecd\u7136\u4e0d\u80fd\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u6ee1\u610f\u3002\u771f\u6b63\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u673a\u5668\u53ef\u7f16\u7a0b\u5316(programmable)\u3002\u968f\u7740OpenGL 2.0\u7684\u51fa\u73b0\uff0c\u7f16\u5199\u7a0b\u5e8f\u4ee5\u4f5c\u4e3aGPU\u56fe\u5f62\u8ba1\u7b97\u7684\u4e00\u90e8\u5206\u6267\u884c\u6210\u4e3a\u53ef\u80fd\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u5728GPU\u4e0a\u4ee5GPU\u901f\u5ea6\u8fd0\u884c\u3002\u60f3\u8981\u4f7f\u7528\u65b0\u56fe\u5f62\u6280\u672f\u7684\u7a0b\u5e8f\u5458\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5b9e\u73b0\u8be5\u529f\u80fd\uff0c\u7136\u540e\u5c06\u5176\u4ea4\u7ed9GPU\u6267\u884c\u3002OpenGL API\u4e0d\u5fc5\u66f4\u6539\u3002API\u552f\u4e00\u9700\u8981\u652f\u6301\u7684\u662f\u5c06\u7a0b\u5e8f\u53d1\u9001\u5230GPU\u4ee5\u8fdb\u884c\u6267\u884c\u7684\u80fd\u529b\u3002</p> <p>\u8fd9\u4e9b\u7a0b\u5e8f\u88ab\u79f0\u4e3a\u7740\u8272\u5668(shaders)\uff08\u5c3d\u7ba1\u8fd9\u4e2a\u672f\u8bed\u5b9e\u9645\u4e0a\u5e76\u4e0d\u63cf\u8ff0\u5b83\u4eec\u5927\u591a\u6570\u505a\u4ec0\u4e48\uff09\u3002\u9996\u5148\u88ab\u5f15\u5165\u7684\u7740\u8272\u5668\u662f\u9876\u70b9\u7740\u8272\u5668(vertex shaders)\u548c\u7247\u6bb5\u7740\u8272\u5668(fragment shaders)\u3002\u5f53\u7ed8\u5236\u4e00\u4e2a\u57fa\u5143\u65f6\uff0c\u5fc5\u987b\u5728\u6bcf\u4e2a\u57fa\u5143\u7684\u9876\u70b9\u4e0a\u8fdb\u884c\u4e00\u4e9b\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bf9\u9876\u70b9\u5750\u6807\u5e94\u7528\u51e0\u4f55\u53d8\u6362\u6216\u4f7f\u7528\u5c5e\u6027\u548c\u5168\u5c40\u5149\u7167\u73af\u5883\u6765\u8ba1\u7b97\u8be5\u9876\u70b9\u7684\u989c\u8272\u3002\u9876\u70b9\u7740\u8272\u5668\u662f\u4e00\u4e2a\u53ef\u4ee5\u63a5\u7ba1\u6267\u884c\u6b64\u7c7b\u201c\u6bcf\u4e2a\u9876\u70b9\u201d\u8ba1\u7b97\u7684\u7a0b\u5e8f\u3002\u540c\u6837\uff0c\u5bf9\u4e8e\u57fa\u5143\u5185\u7684\u6bcf\u4e2a\u50cf\u7d20\uff0c\u5fc5\u987b\u6267\u884c\u4e00\u4e9b\u5de5\u4f5c\u3002\u7247\u6bb5\u7740\u8272\u5668\u53ef\u4ee5\u63a5\u7ba1\u6267\u884c\u8fd9\u79cd\u201c\u6bcf\u4e2a\u50cf\u7d20\u201d\u7684\u8ba1\u7b97\u3002\uff08\u7247\u6bb5\u7740\u8272\u5668\u4e5f\u79f0\u4e3a\u50cf\u7d20\u7740\u8272\u5668(pixel shaders)\u3002\uff09</p> <p>\u53ef\u7f16\u7a0b\u56fe\u5f62\u786c\u4ef6\u7684\u6982\u5ff5\u975e\u5e38\u6210\u529f\u2014\u2014\u6210\u529f\u5230\u5728OpenGL 3.0\u4e2d\uff0c\u5e38\u89c4\u7684\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u4e2a\u7247\u6bb5\u7684\u5904\u7406\u88ab\u5f03\u7528\uff08\u610f\u5473\u7740\u4e0d\u9f13\u52b1\u4f7f\u7528\uff09\u3002\u5e76\u4e14\u5728OpenGL 3.1\u4e2d\uff0c\u5b83\u5df2\u4eceOpenGL\u6807\u51c6\u4e2d\u5220\u9664\uff0c\u5c3d\u7ba1\u4ecd\u4f5c\u4e3a\u53ef\u9009\u6269\u5c55\u5b58\u5728\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u684c\u9762\u7248\u672c\u7684OpenGL\u4e2d\u4ecd\u652f\u6301\u6240\u6709\u539f\u59cb\u529f\u80fd\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u7ee7\u7eed\u63d0\u4f9b\u3002\u7136\u800c\uff0c\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u65b9\u9762\uff0c\u4f7f\u7528OpenGL ES 2.0\u53ca\u66f4\u9ad8\u7248\u672c\u65f6\uff0c\u7740\u8272\u5668\u7684\u4f7f\u7528\u662f\u5f3a\u5236\u6027\u7684\uff0c\u5e76\u4e14\u5df2\u5b8c\u5168\u5220\u9664\u4e86OpenGL 1.1 API\u7684\u5927\u90e8\u5206\u5185\u5bb9\u3002\u7528\u4e8eWeb\u6d4f\u89c8\u5668\u7684OpenGL\u7248\u672cWebGL\u662f\u57fa\u4e8eOpenGL ES\u7684\uff0c\u5b83\u4e5f\u9700\u8981\u4f7f\u7528\u7740\u8272\u5668\u6765\u5b8c\u6210\u4efb\u4f55\u4e8b\u60c5\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u5c06\u4ece\u7248\u672c1.1\u5f00\u59cb\u5b66\u4e60OpenGL\u3002\u8be5\u7248\u672c\u7684\u5927\u591a\u6570\u6982\u5ff5\u548c\u8bb8\u591a\u7ec6\u8282\u4ecd\u7136\u76f8\u5173\uff0c\u5e76\u4e14\u4e3a\u521d\u5b66\u8005\u63d0\u4f9b\u4e86\u66f4\u5bb9\u6613\u7684\u5165\u95e8\u70b9\u3002</p> <p>OpenGL\u7740\u8272\u5668\u662f\u7528OpenGL\u7740\u8272\u8bed\u8a00(GLSL)\uff08(OpenGL Shading Language)\uff09\u7f16\u5199\u7684\u3002\u4e0e OpenGL \u672c\u8eab\u4e00\u6837\uff0cGLSL\u4e5f\u7ecf\u5386\u4e86\u51e0\u4e2a\u7248\u672c\u3002\u6211\u4eec\u5c06\u5728\u8bfe\u7a0b\u540e\u671f\u82b1\u4e00\u4e9b\u65f6\u95f4\u5b66\u4e60GLSL ES\uff0c\u8fd9\u662f\u4e0e WebGL \u548c OpenGL ES \u4e00\u8d77\u4f7f\u7528\u7684\u7248\u672c\u3002GLSL\u4f7f\u7528\u7c7b\u4f3c\u4e8eC\u7f16\u7a0b\u8bed\u8a00\u7684\u8bed\u6cd5\u3002</p> <p>As new capabilities were added to OpenGL, the API grew in size. But the growth was still outpaced by the invention of new, more sophisticated techniques for doing graphics. Some of these new techniques were added to OpenGL, but the problem is that no matter how many features you add, there will always be demands for new features\u2014as well as complaints that all the new features are making things too complicated! OpenGL was a giant machine, with new pieces always being tacked onto it, but still not pleasing everyone. The real solution was to make the machine programmable. With OpenGL 2.0, it became possible to write programs to be executed as part of the graphical computation in the GPU. The programs are run on the GPU at GPU speed. A programmer who wants to use a new graphics technique can write a program to implement the feature and just hand it to the GPU. The OpenGL API doesn't have to be changed. The only thing that the API has to support is the ability to send programs to the GPU for execution.</p> <p>The programs are called shaders (although the term doesn't really describe what most of them actually do). The first shaders to be introduced were vertex shaders and fragment shaders. When a primitive is drawn, some work has to be done at each vertex of the primitive, such as applying a geometric transform to the vertex coordinates or using the attributes and global lighting environment to compute the color of that vertex. A vertex shader is a program that can take over the job of doing such \"per-vertex\" computations. Similarly, some work has to be done for each pixel inside the primitive. A fragment shader can take over the job of performing such \"per-pixel\" computations. (Fragment shaders are also called pixel shaders.)</p> <p>The idea of programmable graphics hardware was very successful\u2014so successful that in OpenGL 3.0, the usual per-vertex and per-fragment processing was deprecated (meaning that its use was discouraged). And in OpenGL 3.1, it was removed from the OpenGL standard, although it is still present as an optional extension. In practice, all the original features of OpenGL are still supported in desktop versions of OpenGL and will probably continue to be available in the future. On the embedded system side, however, with OpenGL ES 2.0 and later, the use of shaders is mandatory, and a large part of the OpenGL 1.1 API has been completely removed. WebGL, the version of OpenGL for use in web browsers, is based on OpenGL ES, and it also requires shaders to get anything at all done. Nevertheless, we will begin our study of OpenGL with version 1.1. Most of the concepts and many of the details from that version are still relevant, and it offers an easier entry point for someone new to 3D graphics programming.</p> <p>OpenGL shaders are written in GLSL (OpenGL Shading Language). Like OpenGL itself, GLSL has gone through several versions. We will spend some time later in the course studying GLSL ES, the version used with WebGL and OpenGL ES. GLSL uses a syntax similar to the C programming language.</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f5c\u4e3a\u5bf9GPU\u786c\u4ef6\u7684\u6700\u540e\u4e00\u70b9\u8bf4\u660e\uff0c\u6211\u5e94\u8be5\u6307\u51fa\uff0c\u5bf9\u4e8e\u4e0d\u540c\u9876\u70b9\u8fdb\u884c\u7684\u8ba1\u7b97\u57fa\u672c\u4e0a\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u5927\u6982\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u8ba1\u7b97\u3002\u5bf9\u4e8e\u4e0d\u540c\u7247\u6bb5\u7684\u8ba1\u7b97\u4e5f\u662f\u5982\u6b64\u3002\u4e8b\u5b9e\u4e0a\uff0cGPU\u53ef\u4ee5\u62e5\u6709\u6570\u767e\u4e2a\u751a\u81f3\u6570\u5343\u4e2a\u53ef\u4ee5\u5e76\u884c\u64cd\u4f5c\u7684\u5904\u7406\u5668\u3002\u8bda\u7136\uff0c\u5355\u4e2a\u5904\u7406\u5668\u7684\u6027\u80fd\u8fdc\u4e0d\u53caCPU\u5f3a\u5927\uff0c\u4f46\u5178\u578b\u7684\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u4e2a\u7247\u6bb5\u7684\u8ba1\u7b97\u5e76\u4e0d\u662f\u975e\u5e38\u590d\u6742\u7684\u3002\u5728\u56fe\u5f62\u8ba1\u7b97\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u5927\u91cf\u5904\u7406\u5668\u548c\u5927\u91cf\u5e76\u884c\u6027\uff0c\u4f7f\u5f97\u5373\u4f7f\u5728\u76f8\u5f53\u5ec9\u4ef7\u7684GPU\u4e0a\u4e5f\u80fd\u5b9e\u73b0\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u56fe\u5f62\u6027\u80fd\u3002</p> <p>As a final remark on GPU hardware, I should note that the computations that are done for different vertices are pretty much independent, and so can potentially be done in parallel. The same is true of the computations for different fragments. In fact, GPUs can have hundreds or thousands of processors that can operate in parallel. Admittedly, the individual processors are much less powerful than a CPU, but then typical per-vertex and per-fragment computations are not very complicated. The large number of processors, and the large amount of parallelism that is possible in graphics computations, makes for impressive graphics performance even on fairly inexpensive GPUs.</p>"},{"location":"cn/c2/","title":"\u7b2c\u4e8c\u7ae0 \u4e8c\u7ef4\u56fe\u5f62\u7ed8\u5236","text":"<p>Two-Dimensional Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>\u901a\u8fc7\u672c\u7ae0\uff0c\u6211\u4eec\u5f00\u59cb\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\uff0c\u9996\u5148\u4ece\u4e8c\u7ef4\u56fe\u5f62\u5f00\u59cb\u3002\u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b\uff0c\u4e8b\u60c5\u66f4\u7b80\u5355\uff0c\u6bd4\u5728\u4e09\u7ef4\u60c5\u51b5\u4e0b\u66f4\u5bb9\u6613\u5f62\u8c61\u5316\uff0c\u4f46\u672c\u7ae0\u6db5\u76d6\u7684\u5927\u90e8\u5206\u6982\u5ff5\u4e5f\u5c06\u4e0e\u4e09\u7ef4\u60c5\u51b5\u975e\u5e38\u76f8\u5173\u3002</p> <p>\u672c\u7ae0\u5f00\u59cb\u7684\u56db\u4e2a\u90e8\u5206\u4ee5\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f\u68c0\u89c6\u4e8c\u7ef4\u56fe\u5f62\uff0c\u800c\u4e0d\u5c06\u5176\u4e0e\u7279\u5b9a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u56fe\u5f62API\u8054\u7cfb\u8d77\u6765\u3002\u8fd9\u4e9b\u90e8\u5206\u4e2d\u7684\u7f16\u7801\u793a\u4f8b\u91c7\u7528\u4e86\u4f2a\u4ee3\u7801\u7f16\u5199\uff0c\u5e94\u8be5\u80fd\u8ba9\u4efb\u4f55\u5177\u6709\u8db3\u591f\u7f16\u7a0b\u80cc\u666f\u7684\u4eba\u7406\u89e3\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4e09\u4e2a\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u5feb\u901f\u67e5\u770b\u4e09\u79cd\u7279\u5b9a\u8bed\u8a00\u4e2d\u7684\u4e8c\u7ef4\u56fe\u5f62\uff1a\u4f7f\u7528Graphics2D\u7684Java\uff0c\u4f7f\u7528HTML &lt;canvas&gt;\u56fe\u5f62\u7684JavaScript\u4ee5\u53caSVG\u3002\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u4e9b\u8bed\u8a00\u5982\u4f55\u4f7f\u7528\u672c\u7ae0\u524d\u9762\u4ecb\u7ecd\u7684\u8bb8\u591a\u901a\u7528\u6982\u5ff5\u3002</p> <p>\u7b2c\u4e8c\u7ae0\u5185\u5bb9:</p> <ul> <li>\u7b2c1\u8282: \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272</li> <li>\u7b2c2\u8282: \u5f62\u72b6</li> <li>\u7b2c3\u8282: \u53d8\u6362</li> <li>\u7b2c4\u8282: \u5206\u5c42\u5efa\u6a21</li> <li>\u7b2c5\u8282: Java Graphics2D</li> <li>\u7b2c6\u8282: HTML Canvas\u56fe\u5f62</li> <li>\u7b2c7\u8282: SVG\uff1a\u4e00\u79cd\u573a\u666f\u63cf\u8ff0\u8bed\u8a00</li> </ul> <p>With this chapter, we begin our study of computer graphics by looking at the two-dimensional case. Things are simpler and a lot easier to visualize in 2D than in 3D, but most of the ideas that are covered in this chapter will also be very relevant to 3D.</p> <p>The chapter begins with four sections that examine 2D graphics in a general way, without tying it to a particular programming language or graphics API. The coding examples in these sections are written in pseudocode that should make sense to anyone with enough programming background to be reading this book. In the next three sections, we will take quick looks at 2D graphics in three particular languages: Java with Graphics2D, JavaScript with HTML &lt;canvas&gt; graphics, and SVG. We will see how these languages use many of the general ideas from earlier in the chapter.</p> <p>Contents of Chapter 2:</p> <ul> <li>Section 1: Pixels, Coordinates, and Colors</li> <li>Section 2: Shapes</li> <li>Section 3: Transforms</li> <li>Section 4: Hierarchical Modeling</li> <li>Section 5: Java Graphics2D</li> <li>Section 6: HTML Canvas Graphics</li> <li>Section 7: SVG: A Scene Description Language</li> </ul>"},{"location":"cn/c2/s1/","title":"\u7b2c1\u8282: \u50cf\u7d20\u3001\u5750\u6807\u548c\u989c\u8272","text":"<p>Pixels, Coordinates, and Colors</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u50cf\uff0c\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u79cd\u989c\u8272\u3002\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\u53ef\u4ee5\u7531\u4e00\u5bf9\u6570\u5b57\u5750\u6807\u6765\u786e\u5b9a\u3002\u989c\u8272\u4e5f\u53ef\u4ee5\u7528\u6570\u5b57\u6765\u6307\u5b9a\u3002\u7136\u800c\uff0c\u5c06\u6570\u5b57\u5206\u914d\u7ed9\u70b9\u6216\u989c\u8272\u6709\u4e00\u5b9a\u7684\u4efb\u610f\u6027\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\u6765\u7814\u7a76\u5750\u6807\u7cfb(coordinate systems)\uff0c\u5c06\u6570\u5b57\u4e0e\u70b9\u76f8\u5173\u8054\uff0c\u5e76\u4e14\u989c\u8272\u6a21\u578b(color model)\uff0c\u5c06\u6570\u5b57\u4e0e\u989c\u8272\u76f8\u5173\u8054\u3002</p> <p>To create a two-dimensional image, each point in the image is assigned a color. A point in 2D can be identified by a pair of numerical coordinates. Colors can also be specified numerically. However, the assignment of numbers to points or colors is somewhat arbitrary. So we need to spend some time studying coordinate systems, which associate numbers to points, and color models, which associate numbers to colors.</p>"},{"location":"cn/c2/s1/#211-\u50cf\u7d20\u5750\u6807","title":"2.1.1 \u50cf\u7d20\u5750\u6807","text":"<p>Pixel Coordinates</p> \u4e2d\u6587\u82f1\u6587 <p>\u6570\u5b57\u56fe\u50cf\u7531\u50cf\u7d20\u7684\u884c\u548c\u5217\u7ec4\u6210\u3002\u5728\u8fd9\u6837\u7684\u56fe\u50cf\u4e2d\uff0c\u4e00\u4e2a\u50cf\u7d20\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5305\u542b\u5b83\u7684\u5217\u548c\u884c\u6765\u786e\u5b9a\u3002\u5c31\u5750\u6807\u800c\u8a00\uff0c\u4e00\u4e2a\u50cf\u7d20\u53ef\u4ee5\u7531\u7ed9\u5b9a\u7684\u5217\u53f7\u548c\u884c\u53f7\u7ec4\u6210\u7684\u6574\u6570\u5bf9\u6765\u6807\u8bc6\u3002\u4f8b\u5982\uff0c\u5750\u6807\u4e3a\uff083\uff0c5\uff09\u7684\u50cf\u7d20\u4f4d\u4e8e\u7b2c3\u5217\u548c\u7b2c5\u884c\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5217\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\uff0c\u4ece\u96f6\u5f00\u59cb\u3002\u5927\u591a\u6570\u56fe\u5f62\u7cfb\u7edf\uff0c\u5305\u62ec\u672c\u7ae0\u5c06\u8981\u8ba8\u8bba\u7684\u7cfb\u7edf\uff0c\u5c06\u884c\u4ece\u4e0a\u5230\u4e0b\u7f16\u53f7\uff0c\u4ece\u96f6\u5f00\u59cb\u3002\u4f46\u662f\uff0c\u4e00\u4e9b\u7cfb\u7edf\uff0c\u5305\u62ecOpenGL\uff0c\u5c06\u884c\u4ece\u5e95\u90e8\u5230\u9876\u90e8\u7f16\u53f7\u3002</p> <p> pixel coordinates </p> <p>\u8bf7\u7279\u522b\u6ce8\u610f\uff0c\u7531\u4e00\u5bf9\u5750\u6807\uff08x\uff0cy\uff09\u786e\u5b9a\u7684\u50cf\u7d20\u53d6\u51b3\u4e8e\u5750\u6807\u7cfb\u7edf\u7684\u9009\u62e9\u3002\u5728\u4e86\u89e3\u6240\u4f7f\u7528\u7684\u5750\u6807\u7cfb\u7edf\u4e4b\u524d\uff0c\u60a8\u603b\u662f\u9700\u8981\u77e5\u9053\u60a8\u6240\u8ba8\u8bba\u7684\u662f\u54ea\u4e2a\u70b9\u3002</p> <p>\u884c\u53f7\u548c\u5217\u53f7\u6807\u8bc6\u4e00\u4e2a\u50cf\u7d20\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u70b9\u3002\u4e00\u4e2a\u50cf\u7d20\u5305\u542b\u8bb8\u591a\u70b9\uff1b\u4ece\u6570\u5b66\u4e0a\u8bb2\uff0c\u5b83\u5305\u542b\u65e0\u9650\u591a\u4e2a\u70b9\u3002 \u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u76ee\u6807\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u4e3a\u50cf\u7d20\u7740\u8272\uff0c\u800c\u662f\u521b\u5efa\u548c\u64cd\u4f5c\u56fe\u50cf\u3002\u5728\u67d0\u79cd\u7406\u60f3\u610f\u4e49\u4e0a\uff0c\u56fe\u50cf\u5e94\u8be5\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u70b9\u6307\u5b9a\u4e00\u4e2a\u989c\u8272\u6765\u5b9a\u4e49\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u6307\u5b9a\u4e00\u4e2a\u989c\u8272\u3002\u50cf\u7d20\u662f\u4e00\u79cd\u8fd1\u4f3c\u3002\u5982\u679c\u6211\u4eec\u60f3\u8c61\u6709\u4e00\u4e2a\u771f\u6b63\u7684\u3001\u7406\u60f3\u7684\u56fe\u50cf\u8981\u663e\u793a\uff0c\u90a3\u4e48\u901a\u8fc7\u7ed9\u50cf\u7d20\u7740\u8272\u663e\u793a\u7684\u4efb\u4f55\u56fe\u50cf\u90fd\u662f\u4e00\u79cd\u8fd1\u4f3c\u3002\u8fd9\u6709\u5f88\u591a\u542b\u4e49\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u753b\u4e00\u6761\u7ebf\u6bb5\u3002\u6570\u5b66\u4e0a\u7684\u7ebf\u6761\u662f\u6ca1\u6709\u539a\u5ea6\u7684\uff0c\u56e0\u6b64\u662f\u770b\u4e0d\u89c1\u7684\u3002\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u60f3\u8981\u753b\u7684\u662f\u4e00\u6761\u6709\u4e00\u5b9a\u5bbd\u5ea6\u7684\u7ebf\u6bb5\u3002\u5047\u8bbe\u7ebf\u6761\u5e94\u8be5\u662f\u4e00\u50cf\u7d20\u5bbd\u3002\u95ee\u9898\u662f\uff0c\u9664\u975e\u7ebf\u662f\u6c34\u5e73\u6216\u5782\u76f4\u7684\uff0c\u5426\u5219\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u7ed9\u50cf\u7d20\u7740\u8272\u6765\u771f\u6b63\u7ed8\u5236\u7ebf\u3002\u5bf9\u89d2\u51e0\u4f55\u7ebf\u6761\u53ea\u4f1a\u90e8\u5206\u5730\u8986\u76d6\u4e00\u4e9b\u50cf\u7d20\u3002\u4e0d\u53ef\u80fd\u5c06\u50cf\u7d20\u7684\u4e00\u90e8\u5206\u6d82\u6210\u9ed1\u8272\uff0c\u53e6\u4e00\u90e8\u5206\u6d82\u6210\u767d\u8272\u3002\u5f53\u60a8\u5c1d\u8bd5\u4ec5\u4f7f\u7528\u9ed1\u8272\u548c\u767d\u8272\u50cf\u7d20\u7ed8\u5236\u7ebf\u6761\u65f6\uff0c\u7ed3\u679c\u662f\u51fa\u73b0\u4e86\u9636\u68af\u6548\u5e94\u3002\u8fd9\u79cd\u6548\u5e94\u662f\u6240\u8c13\u201c\u6df7\u53e0(aliasing)\u201d\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u6df7\u53e0\u4e5f\u53ef\u4ee5\u5728\u5c4f\u5e55\u4e0a\u7ed8\u5236\u7684\u5b57\u7b26\u8f6e\u5ed3\u548c\u4e24\u4e2a\u4e0d\u540c\u989c\u8272\u533a\u57df\u4e4b\u95f4\u7684\u5bf9\u89d2\u7ebf\u6216\u66f2\u7ebf\u8fb9\u754c\u4e2d\u770b\u5230\u3002\uff08\u201c\u6df7\u53e0\u201d\u4e00\u8bcd\u53ef\u80fd\u6765\u81ea\u4e8e\u7406\u60f3\u56fe\u50cf\u81ea\u7136\u662f\u7528\u5b9e\u6570\u5750\u6807\u63cf\u8ff0\u7684\u3002\u5f53\u60a8\u5c1d\u8bd5\u4f7f\u7528\u50cf\u7d20\u8868\u793a\u56fe\u50cf\u65f6\uff0c\u8bb8\u591a\u5b9e\u6570\u5750\u6807\u5c06\u6620\u5c04\u5230\u76f8\u540c\u7684\u6574\u6570\u50cf\u7d20\u5750\u6807\uff1b\u5b83\u4eec\u53ef\u4ee5\u88ab\u89c6\u4e3a\u540c\u4e00\u4e2a\u50cf\u7d20\u7684\u4e0d\u540c\u540d\u79f0\u6216\u201c\u522b\u540d\u201d\u3002\uff09</p> <p>\u6297\u6df7\u53e0(Antialiasing) \u662f\u4e00\u79cd\u65e8\u5728\u51cf\u8f7b\u6df7\u53e0\u6548\u5e94\u7684\u6280\u672f\u672f\u8bed\u3002\u5176\u601d\u60f3\u662f\uff0c\u5f53\u4e00\u4e2a\u50cf\u7d20\u53ea\u88ab\u4e00\u4e2a\u5f62\u72b6\u7684\u4e00\u90e8\u5206\u8986\u76d6\u65f6\uff0c\u50cf\u7d20\u7684\u989c\u8272\u5e94\u8be5\u662f\u5f62\u72b6\u989c\u8272\u548c\u80cc\u666f\u989c\u8272\u7684\u6df7\u5408\u3002\u5f53\u5728\u767d\u8272\u80cc\u666f\u4e0a\u7ed8\u5236\u4e00\u6761\u9ed1\u8272\u7ebf\u65f6\uff0c\u88ab\u90e8\u5206\u8986\u76d6\u7684\u50cf\u7d20\u7684\u989c\u8272\u5c06\u662f\u7070\u8272\uff0c\u5176\u7070\u5ea6\u53d6\u51b3\u4e8e\u7ebf\u6bb5\u8986\u76d6\u50cf\u7d20\u7684\u6bd4\u4f8b\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u4e3a\u6bcf\u4e2a\u50cf\u7d20\u7cbe\u786e\u8ba1\u7b97\u8fd9\u4e2a\u533a\u57df\u662f\u592a\u56f0\u96be\u7684\uff0c\u56e0\u6b64\u91c7\u7528\u4e86\u4e00\u4e9b\u8fd1\u4f3c\u65b9\u6cd5\u3002\uff09\u4f8b\u5982\uff0c\u4e0b\u56fe\u663e\u793a\u4e86\u4e00\u4e2a\u51e0\u4f55\u7ebf\u6bb5\uff0c\u5de6\u4fa7\u662f\u8be5\u7ebf\u6bb5\uff0c\u53f3\u4fa7\u662f\u7531\u50cf\u7d20\u7740\u8272\u5f97\u5230\u7684\u4e24\u4e2a\u8fd1\u4f3c\u56fe\u50cf\u3002\u4e3a\u4e86\u8ba9\u60a8\u80fd\u591f\u770b\u5230\u5355\u4e2a\u50cf\u7d20\uff0c\u8fd9\u4e9b\u7ebf\u6bb5\u88ab\u653e\u5927\u4e86\u8bb8\u591a\u3002\u4e2d\u95f4\u7684\u7ebf\u6bb5\u6ca1\u6709\u4f7f\u7528\u6297\u6df7\u53e0\u6280\u672f\u7ed8\u5236\uff0c\u800c\u53f3\u4fa7\u7684\u7ebf\u6bb5\u4f7f\u7528\u4e86\u6297\u6df7\u53e0\u6280\u672f\uff1a</p> <p> antialiased line </p> <p>\u8bf7\u6ce8\u610f\uff0c\u6297\u6df7\u53e0\u5e76\u4e0d\u80fd\u63d0\u4f9b\u5b8c\u7f8e\u7684\u56fe\u50cf\uff0c\u4f46\u5b83\u53ef\u4ee5\u51cf\u5c11\u6df7\u53e0\u4ea7\u751f\u7684\u201c\u9636\u68af(jaggies)\u201d\u6548\u5e94\uff08\u81f3\u5c11\u5728\u6b63\u5e38\u7f29\u653e\u65f6\uff09\u3002</p> <p>\u5c06\u5b9e\u6570\u5750\u6807\u6620\u5c04\u5230\u50cf\u7d20\u65f6\u8fd8\u6d89\u53ca\u5176\u4ed6\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u5728\u50cf\u7d20\u4e2d\u54ea\u4e00\u70b9\u5e94\u4e0e\uff083\uff0c5\uff09\u7b49\u6574\u6570\u503c\u7684\u5750\u6807\u5bf9\u5e94\uff1f\u50cf\u7d20\u7684\u4e2d\u5fc3\uff1f\u50cf\u7d20\u7684\u4e00\u4e2a\u89d2\u843d\uff1f\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u6570\u5b57\u662f\u6307\u50cf\u7d20\u7684\u5de6\u4e0a\u89d2\u3002\u53e6\u4e00\u79cd\u601d\u8003\u65b9\u5f0f\u662f\u8bf4\u6574\u6570\u5750\u6807\u662f\u6307\u50cf\u7d20\u4e4b\u95f4\u7684\u7ebf\uff0c\u800c\u4e0d\u662f\u6307\u50cf\u7d20\u672c\u8eab\u3002\u4f46\u662f\u8fd9\u4ecd\u7136\u4e0d\u80fd\u786e\u5b9a\u7ed8\u5236\u51e0\u4f55\u5f62\u72b6\u65f6\u786e\u5207\u5f71\u54cd\u4e86\u54ea\u4e9b\u50cf\u7d20\u3002\u4f8b\u5982\uff0c\u4e0b\u56fe\u663e\u793a\u4e86\u4f7f\u7528HTML\u753b\u5e03\u56fe\u5f62\u7ed8\u5236\u7684\u4e24\u6761\u7ebf\uff0c\u653e\u5927\u4e86\u8bb8\u591a\u3002\u8fd9\u4e9b\u7ebf\u88ab\u6307\u5b9a\u4e3a\u4ee5\u4e00\u50cf\u7d20\u7ebf\u5bbd\u7ed8\u5236\u7684\u9ed1\u8272\uff1a</p> <p> horizontal lines from canvas </p> <p>\u9876\u90e8\u7ebf\u6bb5\u4ece\u70b9\uff08100,100\uff09\u5230\u70b9\uff08120,100\uff09\u7ed8\u5236\u3002\u5728\u753b\u5e03\u56fe\u5f62\u4e2d\uff0c\u6574\u6570\u5750\u6807\u5bf9\u5e94\u4e8e\u50cf\u7d20\u4e4b\u95f4\u7684\u7ebf\uff0c\u4f46\u662f\u5f53\u7ed8\u5236\u4e00\u50cf\u7d20\u5bbd\u7684\u7ebf\u65f6\uff0c\u8be5\u7ebf\u5ef6\u4f38\u4e86\u4e00\u4e2a\u50cf\u7d20\u7684\u4e00\u534a\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u9876\u90e8\u7ebf\u6bb5\uff0c\u7ed8\u5236\u7684\u7ebf\u4f4d\u4e8e\u4e00\u4e2a\u50cf\u7d20\u7684\u4e00\u534a\u4ee5\u53ca\u53e6\u4e00\u4e2a\u50cf\u7d20\u7684\u4e00\u534a\u3002\u4f7f\u7528\u6297\u6df7\u53e0\u7684\u56fe\u5f62\u7cfb\u7edf\u5c06\u4e24\u884c\u50cf\u7d20\u90fd\u6e32\u67d3\u6210\u4e86\u7070\u8272\u3002\u5e95\u90e8\u7ebf\u6bb5\u4ece\u70b9\uff08100.5,100.5\uff09\u5230\uff08120.5,100.5\uff09\u7ed8\u5236\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ebf\u6bb5\u6b63\u597d\u4f4d\u4e8e\u4e00\u4e2a\u50cf\u7d20\u7684\u4e00\u884c\u4e2d\uff0c\u8fd9\u4e2a\u50cf\u7d20\u88ab\u6d82\u6210\u4e86\u9ed1\u8272\u3002\u5e95\u90e8\u7ebf\u6bb5\u672b\u7aef\u7684\u7070\u8272\u50cf\u7d20\u4e0e\u8be5\u7ebf\u6bb5\u4ec5\u5ef6\u4f38\u5230\u50cf\u7d20\u4e00\u534a\u6709\u5173\u3002\u5176\u4ed6\u56fe\u5f62\u7cfb\u7edf\u53ef\u80fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u6e32\u67d3\u76f8\u540c\u7684\u7ebf\u6bb5\u3002</p> <p>\u4e0b\u9762\u7684\u4ea4\u4e92\u5f0f\u6f14\u793a\u5141\u8bb8\u60a8\u5bf9\u50cf\u7d20\u548c\u6297\u6df7\u53e0\u8fdb\u884c\u5b9e\u9a8c\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u5728\u672c\u4e66\u7684\u4efb\u4f55\u4ea4\u4e92\u5f0f\u6f14\u793a\u4e2d\uff0c\u60a8\u90fd\u53ef\u4ee5\u70b9\u51fb\u5de6\u4e0a\u89d2\u7684\u95ee\u53f7\u56fe\u6807\u83b7\u53d6\u6709\u5173\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u66f4\u591a\u4fe1\u606f\u3002\uff09</p> <p></p> <p>\u6240\u6709\u8fd9\u4e9b\u90fd\u88ab\u73b0\u4eca\u50cf\u7d20\u4e0d\u518d\u662f\u8fc7\u53bb\u7684\u50cf\u7d20\u6240\u590d\u6742\u5316\u3002\u4eca\u5929\u7684\u50cf\u7d20\u66f4\u5c0f\u4e86\uff01\u663e\u793a\u8bbe\u5907\u7684\u5206\u8fa8\u7387\u53ef\u4ee5\u7528\u6bcf\u82f1\u5bf8\u7684\u50cf\u7d20\u6570\u6765\u8861\u91cf\uff0c\u8fd9\u4e2a\u6570\u91cf\u88ab\u79f0\u4e3aPPI\uff08\u6bcf\u82f1\u5bf8\u50cf\u7d20\uff09\u6216\u6709\u65f6\u79f0\u4e3aDPI\uff08\u6bcf\u82f1\u5bf8\u70b9\uff09\u3002\u65e9\u671f\u7684\u5c4f\u5e55\u7684\u5206\u8fa8\u7387\u5927\u7ea6\u572872 PPI\u5de6\u53f3\u3002\u5728\u8fd9\u79cd\u5206\u8fa8\u7387\u4e0b\uff0c\u4e2a\u522b\u50cf\u7d20\u662f\u6e05\u6670\u53ef\u89c1\u7684\u3002\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u5927\u591a\u6570\u663e\u793a\u5668\u7684\u50cf\u7d20\u5bc6\u5ea6\u7ea6\u4e3a100\u50cf\u7d20/\u82f1\u5bf8\uff0c\u4f46\u662f\u4eca\u5929\u7684\u9ad8\u5206\u8fa8\u7387\u663e\u793a\u5668\u53ef\u4ee5\u6709200\u3001300\u751a\u81f3400\u50cf\u7d20/\u82f1\u5bf8\u3002\u5728\u6700\u9ad8\u5206\u8fa8\u7387\u4e0b\uff0c\u5355\u4e2a\u50cf\u7d20\u5df2\u7ecf\u65e0\u6cd5\u5206\u8fa8\u3002</p> <p>\u50cf\u7d20\u6709\u7740\u5404\u79cd\u5404\u6837\u7684\u5c3a\u5bf8\uff0c\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u50cf\u7d20\u7684\u5750\u6807\u7cfb\u7edf\u3002\u4e00\u4e2a\u56fe\u50cf\u662f\u6839\u636e\u6bcf\u82f1\u5bf8100\u4e2a\u50cf\u7d20\u7684\u5047\u8bbe\u521b\u5efa\u7684\uff0c\u5c06\u5728400 PPI\u7684\u663e\u793a\u5668\u4e0a\u770b\u8d77\u6765\u5f88\u5c0f\u3002\u4e00\u6761\u4e00\u50cf\u7d20\u5bbd\u7684\u7ebf\u5728100 PPI\u7684\u663e\u793a\u5668\u4e0a\u770b\u8d77\u6765\u4e0d\u9519\uff0c\u4f46\u5728400 PPI\u7684\u663e\u793a\u5668\u4e0a\uff0c\u4e00\u50cf\u7d20\u5bbd\u7684\u7ebf\u53ef\u80fd\u592a\u7ec6\u4e86\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5728\u8bb8\u591a\u56fe\u5f62\u7cfb\u7edf\u4e2d\uff0c\u201c\u50cf\u7d20(pixel)\u201d\u5e76\u4e0d\u771f\u6b63\u6307\u7684\u662f\u7269\u7406\u50cf\u7d20\u7684\u5c3a\u5bf8\u3002\u76f8\u53cd\uff0c\u5b83\u53ea\u662f\u53e6\u4e00\u4e2a\u5ea6\u91cf\u5355\u4f4d\uff0c\u7531\u7cfb\u7edf\u8bbe\u7f6e\u4e3a\u9002\u5f53\u7684\u5c3a\u5bf8\u3002\uff08\u5728\u684c\u9762\u7cfb\u7edf\u4e0a\uff0c\u4e00\u4e2a\u50cf\u7d20\u901a\u5e38\u5927\u7ea6\u662f\u4e00\u82f1\u5bf8\u7684\u767e\u5206\u4e4b\u4e00\u3002\u5728\u667a\u80fd\u624b\u673a\u4e0a\uff0c\u89c2\u770b\u8ddd\u79bb\u66f4\u8fd1\uff0c\u8fd9\u4e2a\u503c\u53ef\u80fd\u66f4\u63a5\u8fd1\u4e8e1/160\u82f1\u5bf8\u3002\u6b64\u5916\uff0c\u5f53\u7528\u6237\u5bf9\u7f51\u9875\u8fdb\u884c\u653e\u5927\u65f6\uff0c\u50cf\u7d20\u4f5c\u4e3a\u4e00\u4e2a\u5ea6\u91cf\u5355\u4f4d\u7684\u542b\u4e49\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\uff09</p> <p>\u50cf\u7d20\u5f15\u8d77\u4e86\u4e00\u4e9b\u5c1a\u672a\u5b8c\u5168\u89e3\u51b3\u7684\u95ee\u9898\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5bf9\u4e8e\u6211\u4eec\u5728\u672c\u4e66\u4e2d\u5927\u591a\u6570\u4f7f\u7528\u7684\u77e2\u91cf\u56fe\u5f62\u6765\u8bf4\uff0c\u5b83\u4eec\u4e0d\u518d\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5bf9\u4e8e\u77e2\u91cf\u56fe\u5f62\u6765\u8bf4\uff0c\u50cf\u7d20\u4ec5\u5728\u6805\u683c\u5316\u671f\u95f4\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u5c06\u77e2\u91cf\u56fe\u50cf\u8f6c\u6362\u4e3a\u7528\u4e8e\u663e\u793a\u7684\u50cf\u7d20\u3002\u77e2\u91cf\u56fe\u50cf\u672c\u8eab\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u65b9\u4fbf\u7684\u5750\u6807\u7cfb\u7edf\u521b\u5efa\u3002\u5b83\u4ee3\u8868\u4e86\u4e00\u4e2a\u7406\u60f3\u5316\u7684\u3001\u4e0e\u5206\u8fa8\u7387\u65e0\u5173\u7684\u56fe\u50cf\u3002\u6805\u683c\u5316\u56fe\u50cf\u662f\u8be5\u7406\u60f3\u56fe\u50cf\u7684\u8fd1\u4f3c\uff0c\u4f46\u5982\u4f55\u8fdb\u884c\u8fd1\u4f3c\u53ef\u4ee5\u4ea4\u7ed9\u663e\u793a\u786c\u4ef6\u5904\u7406\u3002</p> <p>A digital image is made up of rows and columns of pixels. A pixel in such an image can be specified by saying which column and which row contains it. In terms of coordinates, a pixel can be identified by a pair of integers giving the column number and the row number. For example, the pixel with coordinates (3,5) would lie in column number 3 and row number 5. Conventionally, columns are numbered from left to right, starting with zero. Most graphics systems, including the ones we will study in this chapter, number rows from top to bottom, starting from zero. Some, including OpenGL, number the rows from bottom to top instead.</p> <p> pixel coordinates </p> <p>Note in particular that the pixel that is identified by a pair of coordinates (x,y) depends on the choice of coordinate system. You always need to know what coordinate system is in use before you know what point you are talking about.</p> <p>Row and column numbers identify a pixel, not a point. A pixel contains many points; mathematically, it contains an infinite number of points. The goal of computer graphics is not really to color pixels\u2014it is to create and manipulate images. In some ideal sense, an image should be defined by specifying a color for each point, not just for each pixel. Pixels are an approximation. If we imagine that there is a true, ideal image that we want to display, then any image that we display by coloring pixels is an approximation. This has many implications.</p> <p>Suppose, for example, that we want to draw a line segment. A mathematical line has no thickness and would be invisible. So we really want to draw a thick line segment, with some specified width. Let's say that the line should be one pixel wide. The problem is that, unless the line is horizontal or vertical, we can't actually draw the line by coloring pixels. A diagonal geometric line will cover some pixels only partially. It is not possible to make part of a pixel black and part of it white. When you try to draw a line with black and white pixels only, the result is a jagged staircase effect. This effect is an example of something called \"aliasing.\" Aliasing can also be seen in the outlines of characters drawn on the screen and in diagonal or curved boundaries between any two regions of different color. (The term aliasing likely comes from the fact that ideal images are naturally described in real-number coordinates. When you try to represent the image using pixels, many real-number coordinates will map to the same integer pixel coordinates; they can all be considered as different names or \"aliases\" for the same pixel.)</p> <p>Antialiasing is a term for techniques that are designed to mitigate the effects of aliasing. The idea is that when a pixel is only partially covered by a shape, the color of the pixel should be a mixture of the color of the shape and the color of the background. When drawing a black line on a white background, the color of a partially covered pixel would be gray, with the shade of gray depending on the fraction of the pixel that is covered by the line. (In practice, calculating this area exactly for each pixel would be too difficult, so some approximate method is used.) Here, for example, is a geometric line, shown on the left, along with two approximations of that line made by coloring pixels. The lines are greatly magnified so that you can see the individual pixels. The line on the right is drawn using antialiasing, while the one in the middle is not:</p> <p> antialiased line </p> <p>Note that antialiasing does not give a perfect image, but it can reduce the \"jaggies\" that are caused by aliasing (at least when it is viewed on a normal scale).</p> <p>There are other issues involved in mapping real-number coordinates to pixels. For example, which point in a pixel should correspond to integer-valued coordinates such as (3,5)? The center of the pixel? One of the corners of the pixel? In general, we think of the numbers as referring to the top-left corner of the pixel. Another way of thinking about this is to say that integer coordinates refer to the lines between pixels, rather than to the pixels themselves. But that still doesn't determine exactly which pixels are affected when a geometric shape is drawn. For example, here are two lines drawn using HTML canvas graphics, shown greatly magnified. The lines were specified to be colored black with a one-pixel line width:</p> <p> horizontal lines from canvas </p> <p>The top line was drawn from the point (100,100) to the point (120,100). In canvas graphics, integer coordinates correspond to the lines between pixels, but when a one-pixel line is drawn, it extends one-half pixel on either side of the infinitely thin geometric line. So for the top line, the line as it is drawn lies half in one row of pixels and half in another row. The graphics system, which uses antialiasing, rendered the line by coloring both rows of pixels gray. The bottom line was drawn from the point (100.5,100.5) to (120.5,100.5). In this case, the line lies exactly along one line of pixels, which gets colored black. The gray pixels at the ends of the bottom line have to do with the fact that the line only extends halfway into the pixels at its endpoints. Other graphics systems might render the same lines differently.</p> <p>The following interactive demo lets you experiment with pixels and antialiasing. (Note that in any of the interactive demos that accompany this book, you can click the question mark icon in the upper left for more information about how to use it.)</p> <p></p> <p>All this is complicated further by the fact that pixels aren't what they used to be. Pixels today are smaller! The resolution of a display device can be measured in terms of the number of pixels per inch on the display, a quantity referred to as PPI (pixels per inch) or sometimes DPI (dots per inch). Early screens tended to have resolutions of somewhere close to 72 PPI. At that resolution, and at a typical viewing distance, individual pixels are clearly visible. For a while, it seemed like most displays had about 100 pixels per inch, but high resolution displays today can have 200, 300 or even 400 pixels per inch. At the highest resolutions, individual pixels can no longer be distinguished.</p> <p>The fact that pixels come in such a range of sizes is a problem if we use coordinate systems based on pixels. An image created assuming that there are 100 pixels per inch will look tiny on a 400 PPI display. A one-pixel-wide line looks good at 100 PPI, but at 400 PPI, a one-pixel-wide line is probably too thin.</p> <p>In fact, in many graphics systems, \"pixel\" doesn't really refer to the size of a physical pixel. Instead, it is just another unit of measure, which is set by the system to be something appropriate. (On a desktop system, a pixel is usually about one one-hundredth of an inch. On a smart phone, which is usually viewed from a closer distance, the value might be closer to 1/160 inch. Furthermore, the meaning of a pixel as a unit of measure can change when, for example, the user applies a magnification to a web page.)</p> <p>Pixels cause problems that have not been completely solved. Fortunately, they are less of a problem for vector graphics, which is mostly what we will use in this book. For vector graphics, pixels only become an issue during rasterization, the step in which a vector image is converted into pixels for display. The vector image itself can be created using any convenient coordinate system. It represents an idealized, resolution-independent image. A rasterized image is an approximation of that ideal image, but how to do the approximation can be left to the display hardware.</p>"},{"location":"cn/c2/s1/#212--\u5b9e\u6570\u5750\u6807\u7cfb","title":"2.1.2  \u5b9e\u6570\u5750\u6807\u7cfb","text":"<p>Real-number Coordinate Systems</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u8fdb\u884c\u4e8c\u7ef4\u56fe\u5f62\u7ed8\u5236\u65f6\uff0c\u60a8\u4f1a\u5f97\u5230\u4e00\u4e2a\u77e9\u5f62\uff0c\u5728\u5176\u4e2d\u60a8\u60f3\u8981\u7ed8\u5236\u4e00\u4e9b\u56fe\u5f62\u539f\u8bed(graphics primitives)\u3002\u4f7f\u7528\u67d0\u4e2a\u5750\u6807\u7cfb\u7edf\u5728\u77e9\u5f62\u4e0a\u6307\u5b9a\u539f\u8bed\u3002\u5e94\u8be5\u80fd\u591f\u9009\u62e9\u4e00\u4e2a\u9002\u5408\u5e94\u7528\u7a0b\u5e8f\u7684\u5750\u6807\u7cfb\u7edf\u3002\u4f8b\u5982\uff0c\u5982\u679c\u77e9\u5f62\u8868\u793a\u4e00\u4e2a15\u82f1\u5c3a\u4e5812\u82f1\u5c3a\u7684\u623f\u95f4\u7684\u5e73\u9762\u56fe\uff0c\u5219\u60a8\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u5355\u4f4d\u4e3a\u4e00\u82f1\u5c3a\u7684\u5750\u6807\u7cfb\u7edf\uff0c\u5750\u6807\u8303\u56f4\u4ece\u6c34\u5e73\u65b9\u5411\u76840\u523015\uff0c\u5782\u76f4\u65b9\u5411\u76840\u523012\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5355\u4f4d\u662f\u82f1\u5c3a\u800c\u4e0d\u662f\u50cf\u7d20\uff0c\u800c\u4e14\u4e00\u4e2a\u82f1\u5c3a\u53ef\u4ee5\u5bf9\u5e94\u4e8e\u56fe\u50cf\u4e2d\u7684\u8bb8\u591a\u50cf\u7d20\u3002\u50cf\u7d20\u7684\u5750\u6807\u901a\u5e38\u662f\u5b9e\u6570\u800c\u4e0d\u662f\u6574\u6570\u3002\u5b9e\u9645\u4e0a\uff0c\u6700\u597d\u5fd8\u8bb0\u50cf\u7d20\uff0c\u53ea\u8003\u8651\u56fe\u50cf\u4e2d\u7684\u70b9\u3002\u4e00\u4e2a\u70b9\u5c06\u7531\u4e00\u5bf9\u5b9e\u6570\u7ed9\u51fa\u7684\u5750\u6807\u8868\u793a\u3002</p> <p>\u4e3a\u4e86\u5728\u77e9\u5f62\u4e0a\u6307\u5b9a\u5750\u6807\u7cfb\u7edf\uff0c\u60a8\u53ea\u9700\u8981\u6307\u5b9a\u77e9\u5f62\u5de6\u8fb9\u7f18\u548c\u53f3\u8fb9\u7f18\u7684\u6c34\u5e73\u5750\u6807\uff0c\u4ee5\u53ca\u9876\u90e8\u548c\u5e95\u90e8\u7684\u5782\u76f4\u5750\u6807\u3002\u8ba9\u6211\u4eec\u5c06\u8fd9\u4e9b\u503c\u79f0\u4e3aleft\u3001right\u3001top\u548cbottom\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u88ab\u8ba4\u4e3a\u662fxmin\u3001xmax\u3001ymin\u548cymax\uff0c\u4f46\u662f\u6ca1\u6709\u7406\u7531\u8ba4\u4e3a\u4f8b\u5982top\u5c0f\u4e8ebottom\u3002\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u5782\u76f4\u5750\u6807\u4ece\u4e0b\u5230\u4e0a\u9012\u589e\uff0c\u800c\u4e0d\u662f\u4ece\u4e0a\u5230\u4e0b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9876\u90e8\u5c06\u5bf9\u5e94\u4e8e\u6700\u5927\u7684y\u503c\uff0c\u800c\u4e0d\u662f\u6700\u5c0f\u503c\u3002</p> <p>\u4e3a\u4e86\u8ba9\u7a0b\u5e8f\u5458\u80fd\u591f\u6307\u5b9a\u4ed6\u4eec\u60f3\u8981\u4f7f\u7528\u7684\u5750\u6807\u7cfb\u7edf\uff0c\u6700\u597d\u6709\u4e00\u4e2a\u5b50\u7a0b\u5e8f\uff0c\u4f8b\u5982</p> <pre><code>setCoordinateSystem(left,right,bottom,top)\n</code></pre> <p>\u7136\u540e\uff0c\u56fe\u5f62\u7cfb\u7edf\u5c06\u8d1f\u8d23\u81ea\u52a8\u5c06\u6307\u5b9a\u5750\u6807\u7cfb\u7edf\u7684\u5750\u6807\u8f6c\u6362\u4e3a\u50cf\u7d20\u5750\u6807\u3002\u53ef\u80fd\u6ca1\u6709\u8fd9\u6837\u7684\u5b50\u7a0b\u5e8f\uff0c\u6240\u4ee5\u4e86\u89e3\u5982\u4f55\u624b\u52a8\u8fdb\u884c\u8f6c\u6362\u662f\u6709\u7528\u7684\u3002\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u822c\u60c5\u51b5\u3002\u7ed9\u5b9a\u7b2c\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u6211\u4eec\u60f3\u8981\u5728\u7b2c\u4e8c\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u627e\u5230\u76f8\u540c\u70b9\u7684\u5750\u6807\u3002\uff08\u8bf7\u8bb0\u4f4f\uff0c\u5750\u6807\u7cfb\u7edf\u53ea\u662f\u4e00\u79cd\u7ed9\u70b9\u5206\u914d\u6570\u5b57\u7684\u65b9\u6cd5\u3002\u91cd\u8981\u7684\u662f\u70b9\uff01\uff09\u5047\u8bbe\u7b2c\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u7684\u6c34\u5e73\u548c\u5782\u76f4\u9650\u5236\u4e3aoldLeft\u3001oldRight\u3001oldTop\u548coldBottom\uff0c\u7b2c\u4e8c\u4e2a\u5750\u6807\u7cfb\u7edf\u7684\u9650\u5236\u4e3anewLeft\u3001newRight\u3001newTop\u548cnewBottom\u3002\u5047\u8bbe\u4e00\u4e2a\u70b9\u5728\u7b2c\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u7684\u5750\u6807\u4e3a(oldX,oldY)\u3002\u6211\u4eec\u60f3\u8981\u627e\u5230\u5728\u7b2c\u4e8c\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u8be5\u70b9\u7684\u5750\u6807(newX,newY)</p> <p> old to new coords </p> <p>newX \u548c newY \u7684\u516c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>newX = newLeft + ((oldX - oldLeft) / (oldRight - oldLeft)) * (newRight - newLeft))\nnewY = newTop + ((oldY - oldTop) / (oldBottom - oldTop)) * (newBottom - newTop)\n</code></pre> <p>\u8fd9\u91cc\u7684\u903b\u8f91\u662f\uff0coldX \u4f4d\u4e8e\u4eceoldLeft\u5230oldRight\u7684\u8ddd\u79bb\u7684\u67d0\u4e2a\u6bd4\u4f8b\u5904\u3002\u8be5\u6bd4\u4f8b\u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>((oldX - oldLeft) / (oldRight - oldLeft))\n</code></pre> <p>\u5bf9\u4e8enewX\u7684\u516c\u5f0f\u53ea\u662f\u8bf4newX\u5e94\u8be5\u4f4d\u4e8e\u4ecenewLeft\u5230newRight\u7684\u8ddd\u79bb\u7684\u76f8\u540c\u6bd4\u4f8b\u5904\u3002\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5\u6765\u68c0\u67e5\u8fd9\u4e9b\u516c\u5f0f\uff0c\u770b\u770b\u5f53oldX\u7b49\u4e8eoldLeft\u6216oldRight\uff0c\u4ee5\u53ca\u5f53oldY\u7b49\u4e8eoldBottom\u6216oldTop\u65f6\uff0c\u5b83\u4eec\u662f\u5426\u8d77\u4f5c\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5c06\u67d0\u4e2a\u5177\u6709\u5de6\u3001\u53f3\u3001\u9876\u90e8\u548c\u5e95\u90e8\u9650\u5236\u7684\u5b9e\u6570\u5750\u6807\u7cfb\u8f6c\u6362\u4e3a\u50cf\u7d20\u5750\u6807\uff0c\u8be5\u50cf\u7d20\u5750\u6807\u5728\u5de6\u8fb9\u4e3a0\u3001\u53f3\u8fb9\u4e3a800\u3001\u9876\u90e8\u4e3a0\u3001\u5e95\u90e8\u4e3a600\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cnewLeft\u548cnewTop\u4e3a\u96f6\uff0c\u516c\u5f0f\u7b80\u5316\u4e3a\uff1a</p> <pre><code>newX = ((oldX - left) / (right - left)) * 800\nnewY = ((oldY - top) / (bottom - top)) * 600\n</code></pre> <p>\u5f53\u7136\uff0c\u8fd9\u5c06\u4ee5\u5b9e\u6570\u5f62\u5f0f\u7ed9\u51fanewX\u548cnewY\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u50cf\u7d20\u7684\u6574\u6570\u5750\u6807\uff0c\u5219\u5fc5\u987b\u5c06\u5b83\u4eec\u56db\u820d\u4e94\u5165\u6216\u622a\u65ad\u3002\u53cd\u5411\u8f6c\u6362\u2014\u2014\u4ece\u50cf\u7d20\u5750\u6807\u5230\u5b9e\u6570\u5750\u6807\u2014\u2014\u4e5f\u662f\u6709\u7528\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u56fe\u50cf\u663e\u793a\u5728\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\uff0c\u5e76\u4e14\u60a8\u5e0c\u671b\u5bf9\u56fe\u50cf\u4e0a\u7684\u9f20\u6807\u70b9\u51fb\u505a\u51fa\u53cd\u5e94\uff0c\u60a8\u53ef\u80fd\u4f1a\u4ee5\u6574\u6570\u50cf\u7d20\u5750\u6807\u5f62\u5f0f\u83b7\u5f97\u9f20\u6807\u5750\u6807\uff0c\u4f46\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u8fd9\u4e9b\u50cf\u7d20\u5750\u6807\u8f6c\u6362\u4e3a\u60a8\u9009\u62e9\u7684\u5750\u6807\u7cfb\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u5fc5\u81ea\u5df1\u6267\u884c\u8f6c\u6362\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u56fe\u5f62API\u63d0\u4f9b\u4e86\u67d0\u79cd\u66f4\u9ad8\u7ea7\u7684\u65b9\u5f0f\u6765\u6307\u5b9a\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u5728\u7b2c2.3\u8282\u4e2d\u66f4\u591a\u5730\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>When doing 2D graphics, you are given a rectangle in which you want to draw some graphics primitives. Primitives are specified using some coordinate system on the rectangle. It should be possible to select a coordinate system that is appropriate for the application. For example, if the rectangle represents a floor plan for a 15 foot by 12 foot room, then you might want to use a coordinate system in which the unit of measure is one foot and the coordinates range from 0 to 15 in the horizontal direction and 0 to 12 in the vertical direction. The unit of measure in this case is feet rather than pixels, and one foot can correspond to many pixels in the image. The coordinates for a pixel will, in general, be real numbers rather than integers. In fact, it's better to forget about pixels and just think about points in the image. A point will have a pair of coordinates given by real numbers.</p> <p>To specify the coordinate system on a rectangle, you just have to specify the horizontal coordinates for the left and right edges of the rectangle and the vertical coordinates for the top and bottom. Let's call these values left, right, top, and bottom. Often, they are thought of as xmin, xmax, ymin, and ymax, but there is no reason to assume that, for example, top is less than bottom. We might want a coordinate system in which the vertical coordinate increases from bottom to top instead of from top to bottom. In that case, top will correspond to the maximum y-value instead of the minimum value.</p> <p>To allow programmers to specify the coordinate system that they would like to use, it would be good to have a subroutine such as</p> <pre><code>setCoordinateSystem(left,right,bottom,top)\n</code></pre> <p>The graphics system would then be responsible for automatically transforming the coordinates from the specified coordinate system into pixel coordinates. Such a subroutine might not be available, so it's useful to see how the transformation is done by hand. Let's consider the general case. Given coordinates for a point in one coordinate system, we want to find the coordinates for the same point in a second coordinate system. (Remember that a coordinate system is just a way of assigning numbers to points. It's the points that are real!) Suppose that the horizontal and vertical limits are oldLeft, oldRight, oldTop, and oldBottom for the first coordinate system, and are newLeft, newRight, newTop, and newBottom for the second. Suppose that a point has coordinates (oldX,oldY) in the first coordinate system. We want to find the coordinates (newX,newY) of the point in the second coordinate system</p> <p> old to new coords </p> <p>Formulas for newX and newY are then given by</p> <pre><code>newX = newLeft + \n      ((oldX - oldLeft) / (oldRight - oldLeft)) * (newRight - newLeft))\nnewY = newTop + \n        ((oldY - oldTop) / (oldBottom - oldTop)) * (newBottom - newTop)\n</code></pre> <p>The logic here is that oldX is located at a certain fraction of the distance from oldLeft to oldRight. That fraction is given by</p> <pre><code>((oldX - oldLeft) / (oldRight - oldLeft))\n</code></pre> <p>The formula for newX just says that newX should lie at the same fraction of the distance from newLeft to newRight. You can also check the formulas by testing that they work when oldX is equal to oldLeft or to oldRight, and when oldY is equal to oldBottom or to oldTop.</p> <p>As an example, suppose that we want to transform some real-number coordinate system with limits left, right, top, and bottom into pixel coordinates that range from 0 at left to 800 at the right and from 0 at the top 600 at the bottom. In that case, newLeft and newTop are zero, and the formulas become simply</p> <pre><code>newX = ((oldX - left) / (right - left)) * 800\nnewY = ((oldY - top) / (bottom - top)) * 600\n</code></pre> <p>Of course, this gives newX and newY as real numbers, and they will have to be rounded or truncated to integer values if we need integer coordinates for pixels. The reverse transformation\u2014going from pixel coordinates to real number coordinates\u2014is also useful. For example, if the image is displayed on a computer screen, and you want to react to mouse clicks on the image, you will probably get the mouse coordinates in terms of integer pixel coordinates, but you will want to transform those pixel coordinates into your own chosen coordinate system.</p> <p>In practice, though, you won't usually have to do the transformations yourself, since most graphics APIs provide some higher level way to specify transforms. We will talk more about this in Section 2.3.</p>"},{"location":"cn/c2/s1/#213--\u7eb5\u6a2a\u6bd4","title":"2.1.3  \u7eb5\u6a2a\u6bd4","text":"<p>Aspect Ratio</p> \u4e2d\u6587\u82f1\u6587 <p>\u77e9\u5f62\u7684\u5bbd\u9ad8\u6bd4(aspect ratio)\u662f\u5176\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u7684\u6bd4\u503c\u3002\u4f8b\u5982\uff0c\u5bbd\u9ad8\u6bd4\u4e3a2:1\u610f\u5473\u7740\u77e9\u5f62\u7684\u5bbd\u5ea6\u662f\u5176\u9ad8\u5ea6\u7684\u4e24\u500d\uff0c\u800c\u5bbd\u9ad8\u6bd4\u4e3a4:3\u610f\u5473\u7740\u5bbd\u5ea6\u662f\u9ad8\u5ea6\u76844/3\u500d\u3002\u5c3d\u7ba1\u5bbd\u9ad8\u6bd4\u901a\u5e38\u4ee5\u5bbd\u5ea6:\u9ad8\u5ea6(width:height)\u7684\u5f62\u5f0f\u5199\u6210\uff0c\u4f46\u6211\u5c06\u4f7f\u7528\u8be5\u672f\u8bed\u6765\u6307\u4ee3\u5206\u6570\u5bbd\u5ea6/\u9ad8\u5ea6(width/height)\u3002\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5bbd\u9ad8\u6bd4\u7b49\u4e8e1\u3002\u4e00\u4e2a\u9ad8\u5ea6\u4e3a600\u4e14\u5bbd\u9ad8\u6bd4\u4e3a5/4\u7684\u77e9\u5f62\u7684\u5bbd\u5ea6\u7b49\u4e8e 600*(5/4)\uff0c\u5373750\u3002</p> <p>\u5750\u6807\u7cfb\u7edf\u4e5f\u6709\u4e00\u4e2a\u5bbd\u9ad8\u6bd4\u3002\u5982\u679c\u5750\u6807\u7cfb\u7edf\u7684\u6c34\u5e73\u548c\u5782\u76f4\u9650\u5236\u5982\u4e0a\u6240\u8ff0\u4e3aleft\u3001right\u3001bottom\u548ctop\uff0c\u5219\u5bbd\u9ad8\u6bd4\u662f\u7edd\u5bf9\u503c</p> <pre><code>(right - left) / (top - bottom)\n</code></pre> <p>\u5982\u679c\u5728\u5177\u6709\u76f8\u540c\u5bbd\u9ad8\u6bd4\u7684\u77e9\u5f62\u4e0a\u4f7f\u7528\u5750\u6807\u7cfb\u7edf\uff0c\u5219\u5728\u8be5\u77e9\u5f62\u4e2d\u67e5\u770b\u65f6\uff0c\u6c34\u5e73\u65b9\u5411\u4e0a\u7684\u4e00\u4e2a\u5355\u4f4d\u5c06\u5177\u6709\u4e0e\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u5355\u4f4d\u76f8\u540c\u7684\u89c6\u89c9\u957f\u5ea6\u3002\u5982\u679c\u5bbd\u9ad8\u6bd4\u4e0d\u5339\u914d\uff0c\u5219\u4f1a\u5b58\u5728\u4e00\u4e9b\u7578\u53d8\u3002\u4f8b\u5982\uff0c\u7531\u65b9\u7a0bx2 + y2 = 9\u5b9a\u4e49\u7684\u5f62\u72b6\u5e94\u8be5\u662f\u4e00\u4e2a\u5706\uff0c\u4f46\u53ea\u6709\u5728(x,y)\u5750\u6807\u7cfb\u7684\u5bbd\u9ad8\u6bd4\u4e0e\u7ed8\u56fe\u533a\u57df\u7684\u5bbd\u9ad8\u6bd4\u76f8\u5339\u914d\u65f6\u624d\u6210\u7acb\u3002</p> <p> aspect ratio 1 </p> <p>\u8fd9\u5e76\u4e0d\u603b\u662f\u4e00\u4ef6\u574f\u4e8b\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u957f\u5ea6\u5355\u4f4d\u5728\u5782\u76f4\u548c\u6c34\u5e73\u65b9\u5411\u4e0a\u3002\u7136\u800c\uff0c\u5047\u8bbe\u60a8\u5e0c\u671b\u4f7f\u7528\u5177\u6709\u9650\u5236left\u3001right\u3001bottom\u548ctop\u7684\u5750\u6807\uff0c\u5e76\u4e14\u786e\u5b9e\u5e0c\u671b\u4fdd\u6301\u5bbd\u9ad8\u6bd4\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u663e\u793a\u77e9\u5f62\u7684\u5f62\u72b6\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8c03\u6574left\u548cright\u6216bottom\u548ctop\u7684\u503c\uff0c\u4ee5\u4f7f\u5bbd\u9ad8\u6bd4\u5339\u914d\uff1a</p> <p> </p> <p>\u6211\u4eec\u5c06\u5728\u672c\u7ae0\u540e\u9762\u66f4\u6df1\u5165\u5730\u7814\u7a76\u51e0\u4f55\u53d8\u6362\uff0c\u5230\u90a3\u65f6\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e9b\u7528\u4e8e\u8bbe\u7f6e\u5750\u6807\u7cfb\u7edf\u7684\u7a0b\u5e8f\u4ee3\u7801\u3002</p> <p>The aspect ratio of a rectangle is the ratio of its width to its height. For example an aspect ratio of 2:1 means that a rectangle is twice as wide as it is tall, and an aspect ratio of 4:3 means that the width is 4/3 times the height. Although aspect ratios are often written in the form width:height, I will use the term to refer to the fraction width/height. A square has aspect ratio equal to 1. A rectangle with aspect ratio 5/4 and height 600 has a width equal to 600*(5/4), or 750.</p> <p>A coordinate system also has an aspect ratio. If the horizontal and vertical limits for the coordinate system are left, right, bottom, and top, as above, then the aspect ratio is the absolute value of</p> <pre><code>(right - left) / (top - bottom)\n</code></pre> <p>If the coordinate system is used on a rectangle with the same aspect ratio, then when viewed in that rectangle, one unit in the horizontal direction will have the same apparent length as a unit in the vertical direction. If the aspect ratios don't match, then there will be some distortion. For example, the shape defined by the equation x2 +y2 = 9 should be a circle, but that will only be true if the aspect ratio of the (x,y) coordinate system matches the aspect ratio of the drawing area.</p> <p> aspect ratio 1 </p> <p>It is not always a bad thing to use different units of length in the vertical and horizontal directions. However, suppose that you want to use coordinates with limits left, right, bottom, and top, and that you do want to preserve the aspect ratio. In that case, depending on the shape of the display rectangle, you might have to adjust the values either of left and right or of bottom and top to make the aspect ratios match:</p> <p> </p> <p>We will look more deeply into geometric transforms later in the chapter, and at that time, we'll see some program code for setting up coordinate systems.</p>"},{"location":"cn/c2/s1/#214--\u989c\u8272\u6a21\u578b","title":"2.1.4  \u989c\u8272\u6a21\u578b","text":"<p>Color Models</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u6b63\u5728\u8c08\u8bba\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6700\u57fa\u7840\u7684\u57fa\u7840\u77e5\u8bc6\u4e4b\u4e00\u3002\u5176\u4e2d\u4e4b\u4e00\u662f\u5750\u6807\u7cfb\u3002\u53e6\u4e00\u4e2a\u662f\u989c\u8272\u3002\u4e8b\u5b9e\u4e0a\uff0c\u989c\u8272\u662f\u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u590d\u6742\u8bdd\u9898\u3002\u6211\u4eec\u5c06\u770b\u4e00\u4e9b\u4e0e\u8ba1\u7b97\u673a\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u6700\u76f8\u5173\u7684\u90e8\u5206\u3002</p> <p>\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u7684\u989c\u8272\u662f\u901a\u8fc7\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u7684\u7ec4\u5408\u4ea7\u751f\u7684\u3002\u901a\u8fc7\u6539\u53d8\u6bcf\u79cd\u7c7b\u578b\u5149\u7684\u5f3a\u5ea6\u6765\u4ea7\u751f\u4e0d\u540c\u7684\u989c\u8272\u3002\u989c\u8272\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u6570\u5b57\u6765\u6307\u5b9a\uff0c\u5206\u522b\u8868\u793a\u989c\u8272\u4e2d\u7ea2\u3001\u7eff\u548c\u84dd\u7684\u5f3a\u5ea6\u3002\u5f3a\u5ea6\u53ef\u4ee5\u7528\u8303\u56f4\u4ece\u96f6\uff08\u6700\u5c0f\u5f3a\u5ea6\uff09\u5230\u4e00\uff08\u6700\u5927\u5f3a\u5ea6\uff09\u7684\u6570\u5b57\u6765\u6307\u5b9a\u3002\u8fd9\u79cd\u6307\u5b9a\u989c\u8272\u7684\u65b9\u6cd5\u79f0\u4e3aRGB\u989c\u8272\u6a21\u578b(RGB color model)\uff0c\u5176\u4e2dRGB\u4ee3\u8868\u7ea2/\u7eff/\u84dd(Red/Green/Blue)\u3002\u4f8b\u5982\uff0c\u5728RGB\u989c\u8272\u6a21\u578b\u4e2d\uff0c\u6570\u503c\u4e09\u5143\u7ec4\uff081\uff0c0.5\uff0c0.5\uff09\u8868\u793a\u5c06\u7ea2\u8272\u8bbe\u7f6e\u4e3a\u5168\u5f3a\u5ea6\uff0c\u800c\u7eff\u8272\u548c\u84dd\u8272\u8bbe\u7f6e\u4e3a\u534a\u5f3a\u5ea6\u7684\u989c\u8272\u3002\u989c\u8272\u7684\u7ea2\u3001\u7eff\u548c\u84dd\u503c\u5728RGB\u989c\u8272\u6a21\u578b\u4e2d\u79f0\u4e3a\u8be5\u989c\u8272\u7684\u989c\u8272\u5206\u91cf(color components)\u3002</p> <p>\u5149\u7531\u5177\u6709\u5404\u79cd\u6ce2\u957f\u7684\u6ce2\u6784\u6210\u3002\u7eaf\u8272\u662f\u6307\u6240\u6709\u5149\u5177\u6709\u76f8\u540c\u6ce2\u957f\u7684\u5149\uff0c\u4f46\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u989c\u8272\u53ef\u4ee5\u5305\u542b\u8bb8\u591a\u6ce2\u957f - \u4ece\u6570\u5b66\u4e0a\u8bb2\uff0c\u662f\u65e0\u9650\u591a\u4e2a\u6ce2\u957f\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u901a\u8fc7\u4ec5\u7ec4\u5408\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u6765\u8868\u793a\u6240\u6709\u989c\u8272\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u80fd\u5b8c\u5168\u505a\u5230\u8fd9\u4e00\u70b9\u3002</p> <p>\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7\uff0c\u4e09\u79cd\u57fa\u672c\u6216\u201c\u4e3b\u8981\u201d\u989c\u8272\u7684\u7ec4\u5408\u8db3\u4ee5\u8868\u793a\u6240\u6709\u989c\u8272\uff0c\u56e0\u4e3a\u4eba\u773c\u6709\u4e09\u79cd\u989c\u8272\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u68c0\u6d4b\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u3002\u7136\u800c\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u8fd1\u4f3c\u503c\u3002\u773c\u775b\u786e\u5b9e\u5305\u542b\u4e09\u79cd\u989c\u8272\u4f20\u611f\u5668\u3002\u8fd9\u4e9b\u4f20\u611f\u5668\u79f0\u4e3a\u201c\u9525\u5f62\u7ec6\u80de(cone cells)\u201d\u3002\u7136\u800c\uff0c\u9525\u5f62\u7ec6\u80de\u4e0d\u4ec5\u5bf9\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u505a\u51fa\u53cd\u5e94\u3002\u6bcf\u79cd\u7c7b\u578b\u7684\u9525\u5f62\u7ec6\u80de\u5bf9\u5e7f\u6cdb\u8303\u56f4\u5185\u7684\u5149\u6ce2\u957f\u4ee5\u4e0d\u540c\u7a0b\u5ea6\u4f5c\u51fa\u53cd\u5e94\u3002\u4e00\u7ec4\u7ed9\u5b9a\u7684\u6ce2\u957f\u6df7\u5408\u7269\u5c06\u4f7f\u6bcf\u79cd\u7c7b\u578b\u7684\u7ec6\u80de\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u88ab\u523a\u6fc0\uff0c\u800c\u523a\u6fc0\u7684\u5f3a\u5ea6\u51b3\u5b9a\u4e86\u6211\u4eec\u770b\u5230\u7684\u989c\u8272\u3002\u5c06\u6bcf\u79cd\u7c7b\u578b\u7684\u9525\u7ec6\u80de\u523a\u6fc0\u5230\u540c\u6837\u7a0b\u5ea6\u7684\u4e0d\u540c\u6ce2\u957f\u6df7\u5408\u7269\u5c06\u88ab\u611f\u77e5\u4e3a\u76f8\u540c\u7684\u989c\u8272\u3002\u56e0\u6b64\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u6570\u5b57\u6307\u5b9a\u611f\u77e5\u5230\u7684\u989c\u8272\uff0c\u8fd9\u4e09\u4e2a\u6570\u5b57\u5206\u522b\u8868\u793a\u4e09\u79cd\u7c7b\u578b\u7684\u9525\u7ec6\u80de\u7684\u523a\u6fc0\u5f3a\u5ea6\u3002\u4f46\u662f\uff0c\u65e0\u8bba\u5982\u4f55\u9009\u62e9\u8fd9\u4e09\u79cd\u989c\u8272\uff0c\u90fd\u4e0d\u53ef\u80fd\u901a\u8fc7\u7ec4\u5408\u6765\u4ea7\u751f\u6240\u6709\u53ef\u80fd\u7684\u523a\u6fc0\u6a21\u5f0f\u3002\u8fd9\u53ea\u662f\u5173\u4e8e\u6211\u4eec\u773c\u775b\u5b9e\u9645\u5de5\u4f5c\u65b9\u5f0f\u7684\u4e8b\u5b9e\uff1b\u8fd9\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4e09\u79cd\u57fa\u672c\u989c\u8272\u53ef\u4ee5\u4ea7\u751f\u76f8\u5f53\u5927\u6bd4\u4f8b\u7684\u53ef\u611f\u77e5\u989c\u8272\u96c6\u5408\uff0c\u4f46\u662f\u5728\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u53ef\u80fd\u770b\u4e0d\u5230\u7684\u989c\u8272\u6709\u5f88\u591a\u3002\uff08\u8fd9\u6574\u4e2a\u8ba8\u8bba\u4ec5\u9002\u7528\u4e8e\u5b9e\u9645\u62e5\u6709\u4e09\u79cd\u7c7b\u578b\u9525\u7ec6\u80de\u7684\u4eba\u3002\u8272\u76f2\uff0c\u5373\u67d0\u4eba\u7f3a\u5c11\u4e00\u79cd\u6216\u591a\u79cd\u7c7b\u578b\u7684\u9525\u7ec6\u80de\uff0c\u662f\u4ee4\u4eba\u60ca\u8bb6\u5730\u666e\u904d\u7684\u3002\uff09</p> <p>\u8bf8\u5982\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e4b\u7c7b\u7684\u8bbe\u5907\u53ef\u4ee5\u4ea7\u751f\u7684\u989c\u8272\u8303\u56f4\u79f0\u4e3a\u8be5\u8bbe\u5907\u7684\u8272\u57df\u3002\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u53ef\u4ee5\u5177\u6709\u4e0d\u540c\u7684\u8272\u57df\uff0c\u5e76\u4e14\u76f8\u540c\u7684 RGB \u503c\u5728\u4e0d\u540c\u7684\u5c4f\u5e55\u4e0a\u53ef\u80fd\u4f1a\u4ea7\u751f\u7565\u6709\u4e0d\u540c\u7684\u989c\u8272\u3002\u5f69\u8272\u6253\u5370\u673a\u7684\u8272\u57df\u660e\u663e\u4e0d\u540c\uff0c\u800c\u4e14\u53ef\u80fd\u6bd4\u5c4f\u5e55\u7684\u8272\u57df\u8981\u5c0f\uff0c\u8fd9\u5c31\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6253\u5370\u51fa\u6765\u7684\u56fe\u50cf\u53ef\u80fd\u770b\u8d77\u6765\u4e0e\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\u3002\uff08\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u6253\u5370\u673a\u5236\u9020\u989c\u8272\u7684\u65b9\u5f0f\u4e0e\u5c4f\u5e55\u4e0d\u540c\u3002\u5c4f\u5e55\u662f\u901a\u8fc7\u7ec4\u5408\u5149\u6765\u751f\u6210\u989c\u8272\uff0c\u800c\u6253\u5370\u673a\u5219\u662f\u901a\u8fc7\u7ec4\u5408\u58a8\u6c34\u6216\u67d3\u6599\u3002\u7531\u4e8e\u8fd9\u79cd\u5dee\u5f02\uff0c\u4e3a\u6253\u5370\u673a\u8bbe\u8ba1\u7684\u989c\u8272\u901a\u5e38\u4f7f\u7528\u4e0d\u540c\u7684\u57fa\u672c\u989c\u8272\u96c6\u5408\u3002\u4e00\u79cd\u5e38\u89c1\u7684\u6253\u5370\u673a\u989c\u8272\u6a21\u578b\u662f CMYK\uff0c\u4f7f\u7528\u9752\u8272\u3001\u54c1\u7ea2\u8272\u3001\u9ec4\u8272\u548c\u9ed1\u8272\u3002\uff09</p> <p>\u65e0\u8bba\u5982\u4f55\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u6700\u5e38\u89c1\u7684\u989c\u8272\u6a21\u578b\u662f RGB\u3002RGB \u989c\u8272\u901a\u5e38\u4f7f\u7528\u6bcf\u4e2a\u989c\u8272\u5206\u91cf 8 \u4f4d\u8868\u793a\uff0c\u603b\u5171\u9700\u8981 24 \u4f4d\u6765\u8868\u793a\u4e00\u4e2a\u989c\u8272\u3002\u8fd9\u79cd\u8868\u793a\u6709\u65f6\u88ab\u79f0\u4e3a \"24 \u4f4d\u989c\u8272(24-bit color)\"\u30028 \u4f4d\u6570\u5b57\u53ef\u4ee5\u8868\u793a 2^8\uff0c\u6216 256\uff0c\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4ece 0 \u5230 255 \u7684\u6b63\u6574\u6570\u3002\u7136\u540e\uff0c\u989c\u8272\u88ab\u6307\u5b9a\u4e3a\u5728\u8be5\u8303\u56f4\u5185\u7684\u6574\u6570\u4e09\u5143\u7ec4 (r,g,b)\u3002</p> <p>\u8fd9\u79cd\u8868\u793a\u65b9\u6cd5\u5f88\u6709\u6548\uff0c\u56e0\u4e3a 256 \u79cd\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u7684\u8272\u8c03\u51e0\u4e4e\u662f\u4eba\u773c\u53ef\u4ee5\u533a\u5206\u7684\u3002\u5728\u56fe\u50cf\u901a\u8fc7\u989c\u8272\u5206\u91cf\u8fdb\u884c\u8ba1\u7b97\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u4f7f\u7528\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u989d\u5916\u7684\u4f4d\u6570\uff0c\u4ee5\u907f\u514d\u7531\u4e8e\u8ba1\u7b97\u4e2d\u7684\u820d\u5165\u8bef\u5dee\u800c\u4ea7\u751f\u7684\u89c6\u89c9\u6548\u679c\u3002\u8fd9\u79cd\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u4e3a\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u4f7f\u7528 16 \u4f4d\u6574\u6570\u751a\u81f3 32 \u4f4d\u6d6e\u70b9\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6709\u65f6\u4f1a\u4f7f\u7528\u66f4\u5c11\u7684\u4f4d\u6570\u3002\u4f8b\u5982\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u989c\u8272\u65b9\u6848\u4f7f\u7528 5 \u4f4d\u7528\u4e8e\u7ea2\u8272\u548c\u84dd\u8272\u5206\u91cf\uff0c\u4ee5\u53ca 6 \u4f4d\u7528\u4e8e\u7eff\u8272\u5206\u91cf\uff0c\u603b\u5171\u4e3a\u989c\u8272\u4f7f\u7528 16 \u4f4d\u3002\uff08\u7eff\u8272\u83b7\u5f97\u989d\u5916\u7684\u4f4d\uff0c\u56e0\u4e3a\u773c\u775b\u5bf9\u7eff\u5149\u7684\u654f\u611f\u6027\u6bd4\u5bf9\u7ea2\u8272\u6216\u84dd\u8272\u7684\u654f\u611f\u6027\u66f4\u9ad8\u3002\uff09\u8fd9\u79cd \"16 \u4f4d\u989c\u8272\" \u76f8\u5bf9\u4e8e 24 \u4f4d\u989c\u8272\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u5e76\u4e14\u5728\u5185\u5b58\u66f4\u6602\u8d35\u65f6\u66f4\u4e3a\u5e38\u89c1\u3002</p> <p>\u9664\u4e86 RGB \u5916\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u989c\u8272\u6a21\u578b\u3002RGB \u6709\u65f6\u88ab\u6279\u8bc4\u4e3a\u4e0d\u76f4\u89c2\u3002\u4f8b\u5982\uff0c\u5bf9\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u9ec4\u8272\u662f\u7531\u7ea2\u8272\u548c\u7eff\u8272\u7684\u7ec4\u5408\u800c\u6210\u5e76\u4e0d\u660e\u663e\u3002\u5bc6\u5207\u76f8\u5173\u7684\u989c\u8272\u6a21\u578b HSV \u548c HSL \u63cf\u8ff0\u4e0e RGB \u76f8\u540c\u7684\u989c\u8272\u96c6\uff0c\u4f46\u8bd5\u56fe\u4ee5\u66f4\u76f4\u89c2\u7684\u65b9\u5f0f\u8fdb\u884c\u63cf\u8ff0\u3002\uff08HSV \u6709\u65f6\u88ab\u79f0\u4e3a HSB\uff0c\u5176\u4e2d\u7684 \"B\" \u4ee3\u8868 \"\u4eae\u5ea6\"\u3002HSV \u548c HSB \u662f\u5b8c\u5168\u76f8\u540c\u7684\u6a21\u578b\u3002\uff09</p> <p>\u8fd9\u4e9b\u6a21\u578b\u4e2d\u7684 \"H\" \u4ee3\u8868 \"\u8272\u76f8(hue)\"\uff0c\u662f\u57fa\u672c\u7684\u5149\u8c31\u989c\u8272\u3002\u968f\u7740 H \u7684\u589e\u52a0\uff0c\u989c\u8272\u4ece\u7ea2\u8272(red)\u53d8\u4e3a\u9ec4\u8272(yellow)\u3001\u7eff\u8272(green)\u3001\u9752\u8272(cyan)\u3001\u84dd\u8272(blue)\u3001\u54c1\u7ea2(magenta)\uff0c\u7136\u540e\u56de\u5230\u7ea2\u8272(red)\u3002\u901a\u5e38\u5c06 H \u7684\u503c\u53d6\u4e3a\u4ece 0 \u5230 360\uff0c\u56e0\u4e3a\u989c\u8272\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u56f4\u7ed5\u4e00\u4e2a\u5706\u5708\u6392\u5217\uff0c\u7ea2\u8272\u5728 0 \u548c 360 \u5ea6\u5904\u3002</p> <p>HSV \u548c HSL \u4e2d\u7684 \"S\" \u4ee3\u8868 \"\u9971\u548c\u5ea6(saturation)\"\uff0c\u53d6\u503c\u8303\u56f4\u4e3a 0 \u5230 1\u3002\u9971\u548c\u5ea6\u4e3a 0 \u4f1a\u4ea7\u751f\u7070\u8272\u7684\u8272\u8c03\uff08\u8272\u8c03\u53d6\u51b3\u4e8e V \u6216 L \u7684\u503c\uff09\u3002\u9971\u548c\u5ea6\u4e3a 1 \u7ed9\u51fa \"\u7eaf\u8272\"\uff0c\u51cf\u5c0f\u9971\u548c\u5ea6\u5c31\u50cf\u5728\u989c\u8272\u4e2d\u6dfb\u52a0\u66f4\u591a\u7070\u8272\u4e00\u6837\u3002\"V\" \u4ee3\u8868 \"\u503c(value)\"\uff0c\"L\" \u4ee3\u8868 \"\u4eae\u5ea6(lightness)\"\u3002\u5b83\u4eec\u786e\u5b9a\u989c\u8272\u7684\u660e\u4eae\u6216\u6697\u3002\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728 HSV \u6a21\u578b\u4e2d\uff0c\u7eaf\u5149\u8c31\u989c\u8272\u51fa\u73b0\u5728 V=1 \u65f6\uff0c\u800c\u5728 HSL \u4e2d\uff0c\u5b83\u4eec\u51fa\u73b0\u5728 L=0.5 \u65f6\u3002</p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u770b HSV \u989c\u8272\u6a21\u578b\u4e2d\u7684\u4e00\u4e9b\u989c\u8272\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u5177\u6709\u5168\u8303\u56f4 H \u503c\u7684\u989c\u8272\uff0c\u5176\u4e2d S \u548c V \u5206\u522b\u7b49\u4e8e 1 \u548c 0.5\u3002\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e S=V=1\uff0c\u4f60\u4f1a\u5f97\u5230\u660e\u4eae\u3001\u7eaf\u51c0\u7684\u989c\u8272\u3002S=0.5 \u4f1a\u7ed9\u51fa\u8f83\u82cd\u767d\u3001\u9971\u548c\u5ea6\u8f83\u4f4e\u7684\u989c\u8272\u3002V=0.5 \u4f1a\u4ea7\u751f\u8f83\u6697\u7684\u989c\u8272\u3002</p> <p> </p> <p>\u53ef\u80fd\u901a\u8fc7\u89c2\u5bdf\u4e00\u4e9b\u5b9e\u9645\u989c\u8272\u53ca\u5176\u8868\u793a\u65b9\u5f0f\u6765\u66f4\u5bb9\u6613\u7406\u89e3\u989c\u8272\u6a21\u578b\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u8ba9\u60a8\u53ef\u4ee5\u4f7f\u7528RGB\u548cHSV\u989c\u8272\u6a21\u578b\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a</p> <p></p> <p>\u901a\u5e38\uff0c\u989c\u8272\u6a21\u578b\u4f1a\u6dfb\u52a0\u7b2c\u56db\u4e2a\u5206\u91cf\u3002\u7b2c\u56db\u4e2a\u5206\u91cf\u79f0\u4e3a \u963f\u5c14\u6cd5(alpha)\uff0c\u4f7f\u7528\u5b83\u7684\u989c\u8272\u6a21\u578b\u901a\u5e38\u88ab\u79f0\u4e3a RGBA \u548c HSLA \u7b49\u540d\u79f0\u3002Alpha \u5e76\u4e0d\u662f\u4e00\u79cd\u989c\u8272\uff0c\u5b83\u901a\u5e38\u7528\u6765\u8868\u793a\u900f\u660e\u5ea6(transparency)\u3002\u5177\u6709\u6700\u5927 alpha \u503c\u7684\u989c\u8272\u662f\u5b8c\u5168\u4e0d\u900f\u660e\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5b8c\u5168\u4e0d\u900f\u660e\u3002\u5177\u6709 alpha \u7b49\u4e8e\u96f6\u7684\u989c\u8272\u662f\u5b8c\u5168\u900f\u660e\u7684\uff0c\u56e0\u6b64\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u4e2d\u95f4\u503c\u7ed9\u51fa\u534a\u900f\u660e\u6216\u90e8\u5206\u900f\u660e\u7684\u989c\u8272\u3002\u900f\u660e\u5ea6\u51b3\u5b9a\u4e86\u5728\u53e6\u4e00\u79cd\u989c\u8272\uff08\u524d\u666f\u8272\uff09\u4e4b\u4e0a\u7ed8\u5236\u53e6\u4e00\u79cd\u989c\u8272\uff08\u80cc\u666f\u8272\uff09\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\u3002\u5982\u679c\u524d\u666f\u8272\u5b8c\u5168\u4e0d\u900f\u660e\uff0c\u5219\u7b80\u5355\u5730\u66ff\u6362\u80cc\u666f\u8272\u3002\u5982\u679c\u524d\u666f\u8272\u90e8\u5206\u900f\u660e\uff0c\u5219\u4e0e\u80cc\u666f\u8272\u6df7\u5408\u3002\u5047\u8bbe alpha \u5206\u91cf\u7684\u8303\u56f4\u662f\u4ece 0 \u5230 1\uff0c\u5219\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u7684\u989c\u8272\u4e3a</p> <pre><code>new_color = (alpha)*(foreground_color) + (1 - alpha)*(background_color)\n</code></pre> <p>\u8fd9\u4e2a\u8ba1\u7b97\u662f\u5206\u522b\u5bf9\u7ea2\u8272\u3001\u84dd\u8272\u548c\u7eff\u8272\u7684\u989c\u8272\u5206\u91cf\u8fdb\u884c\u7684\u3002\u8fd9\u88ab\u79f0\u4e3a \u963f\u5c14\u6cd5\u6df7\u5408(alpha blending)\u3002\u6548\u679c\u5c31\u50cf\u900f\u8fc7\u6709\u8272\u73bb\u7483\u89c2\u5bdf\u80cc\u666f\u4e00\u6837\uff1b\u73bb\u7483\u7684\u989c\u8272\u4f1a\u7ed9\u80cc\u666f\u8272\u6dfb\u52a0\u4e00\u79cd\u8272\u8c03\u3002\u8fd9\u79cd\u6df7\u5408\u5e76\u4e0d\u662f alpha \u5206\u91cf\u7684\u552f\u4e00\u53ef\u80fd\u7528\u6cd5\uff0c\u4f46\u5b83\u662f\u6700\u5e38\u89c1\u7684\u3002</p> <p>\u4f7f\u7528\u6bcf\u4e2a\u5206\u91cf 8 \u4f4d\u7684 RGBA \u989c\u8272\u6a21\u578b\u603b\u5171\u4f7f\u7528 32 \u4f4d\u6765\u8868\u793a\u4e00\u4e2a\u989c\u8272\u3002\u8fd9\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u6574\u6570\u503c\u901a\u5e38\u4f7f\u7528 32 \u4f4d\u503c\u8868\u793a\u300232 \u4f4d\u6574\u6570\u503c\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a 32 \u4f4d RGBA \u989c\u8272\u3002\u5982\u4f55\u5728 32 \u4f4d\u6574\u6570\u5185\u6392\u5217\u989c\u8272\u5206\u91cf\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4efb\u610f\u7684\u3002\u6700\u5e38\u89c1\u7684\u5e03\u5c40\u662f\u5c06 alpha \u5206\u91cf\u5b58\u50a8\u5728\u9ad8 8 \u4f4d\u4e2d\uff0c\u7136\u540e\u662f\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u3002\uff08\u8fd9\u53ef\u80fd\u5e94\u8be5\u79f0\u4e3a ARGB \u989c\u8272\u3002\uff09\u4f46\u662f\uff0c\u4e5f\u6709\u5176\u4ed6\u5e03\u5c40\u5728\u4f7f\u7528\u4e2d\u3002</p> <p>We are talking about the most basic foundations of computer graphics. One of those is coordinate systems. The other is color. Color is actually a surprisingly complex topic. We will look at some parts of the topic that are most relevant to computer graphics applications.</p> <p>The colors on a computer screen are produced as combinations of red, green, and blue light. Different colors are produced by varying the intensity of each type of light. A color can be specified by three numbers giving the intensity of red, green, and blue in the color. Intensity can be specified as a number in the range zero, for minimum intensity, to one, for maximum intensity. This method of specifying color is called the RGB color model, where RGB stands for Red/Green/Blue. For example, in the RGB color model, the number triple (1, 0.5, 0.5) represents the color obtained by setting red to full intensity, while green and blue are set to half intensity. The red, green, and blue values for a color are called the color components of that color in the RGB color model.</p> <p>Light is made up of waves with a variety of wavelengths. A pure color is one for which all the light has the same wavelength, but in general, a color can contain many wavelengths\u2014mathematically, an infinite number. How then can we represent all colors by combining just red, green, and blue light? In fact, we can't quite do that.</p> <p>You might have heard that combinations of the three basic, or \"primary,\" colors are sufficient to represent all colors, because the human eye has three kinds of color sensors that detect red, green, and blue light. However, that is only an approximation. The eye does contain three kinds of color sensors. The sensors are called \"cone cells.\" However, cone cells do not respond exclusively to red, green, and blue light. Each kind of cone cell responds, to a varying degree, to wavelengths of light in a wide range. A given mix of wavelengths will stimulate each type of cell to a certain degree, and the intensity of stimulation determines the color that we see. A different mixture of wavelengths that stimulates each type of cone cell to the same extent will be perceived as the same color. So a perceived color can, in fact, be specified by three numbers giving the intensity of stimulation of the three types of cone cell. However, it is not possible to produce all possible patterns of stimulation by combining just three basic colors, no matter how those colors are chosen. This is just a fact about the way our eyes actually work; it might have been different. Three basic colors can produce a reasonably large fraction of the set of perceivable colors, but there are colors that you can see in the world that you will never see on your computer screen. (This whole discussion only applies to people who actually have three kinds of cone cell. Color blindness, where someone is missing one or more kinds of cone cell, is surprisingly common.)</p> <p>The range of colors that can be produced by a device such as a computer screen is called the color gamut of that device. Different computer screens can have different color gamuts, and the same RGB values can produce somewhat different colors on different screens. The color gamut of a color printer is noticeably different\u2014and probably smaller\u2014than the color gamut of a screen, which explains why a printed image probably doesn't look exactly the same as it did on the screen. (Printers, by the way, make colors differently from the way a screen does it. Whereas a screen combines light to make a color, a printer combines inks or dyes. Because of this difference, colors meant for printers are often expressed using a different set of basic colors. A common color model for printer colors is CMYK, using the colors cyan, magenta, yellow, and black.)</p> <p>In any case, the most common color model for computer graphics is RGB. RGB colors are most often represented using 8 bits per color component, a total of 24 bits to represent a color. This representation is sometimes called \"24-bit color.\" An 8-bit number can represent 28, or 256, different values, which we can take to be the positive integers from 0 to 255. A color is then specified as a triple of integers (r,g,b) in that range.</p> <p>This representation works well because 256 shades of red, green, and blue are about as many as the eye can distinguish. In applications where images are processed by computing with color components, it is common to use additional bits per color component to avoid visual effects that might occur due to rounding errors in the computations. Such applications might use a 16-bit integer or even a 32-bit floating point value for each color component. On the other hand, sometimes fewer bits are used. For example, one common color scheme uses 5 bits for the red and blue components and 6 bits for the green component, for a total of 16 bits for a color. (Green gets an extra bit because the eye is more sensitive to green light than to red or blue.) This \"16-bit color\" saves memory compared to 24-bit color and was more common when memory was more expensive.</p> <p>There are many other color models besides RGB. RGB is sometimes criticized as being unintuitive. For example, it's not obvious to most people that yellow is made of a combination of red and green. The closely related color models HSV and HSL describe the same set of colors as RGB, but attempt to do it in a more intuitive way. (HSV is sometimes called HSB, with the \"B\" standing for \"brightness.\" HSV and HSB are exactly the same model.)</p> <p>The \"H\" in these models stands for \"hue,\" a basic spectral color. As H increases, the color changes from red to yellow to green to cyan to blue to magenta, and then back to red. The value of H is often taken to range from 0 to 360, since the colors can be thought of as arranged around a circle with red at both 0 and 360 degrees.</p> <p>The \"S\" in HSV and HSL stands for \"saturation,\" and is taken to range from 0 to 1. A saturation of 0 gives a shade of gray (the shade depending on the value of V or L). A saturation of 1 gives a \"pure color,\" and decreasing the saturation is like adding more gray to the color. \"V\" stands for \"value,\" and \"L\" stands for \"lightness.\" They determine how bright or dark the color is. The main difference is that in the HSV model, the pure spectral colors occur for V=1, while in HSL, they occur for L=0.5.</p> <p>Let's look at some colors in the HSV color model. The illustration below shows colors with a full range of H-values, for S and V equal to 1 and to 0.5. Note that for S=V=1, you get bright, pure colors. S=0.5 gives paler, less saturated colors. V=0.5 gives darker colors.</p> <p> </p> <p>It's probably easier to understand color models by looking at some actual colors and how they are represented. Here is an interactive demo that let's you do that for the RGB and HSV color models:</p> <p></p> <p>Often, a fourth component is added to color models. The fourth component is called alpha, and color models that use it are referred to by names such as RGBA and HSLA. Alpha is not a color as such. It is usually used to represent transparency. A color with maximal alpha value is fully opaque; that is, it is not at all transparent. A color with alpha equal to zero is completely transparent and therefore invisible. Intermediate values give translucent, or partly transparent, colors. Transparency determines what happens when you draw with one color (the foreground color) on top of another color (the background color). If the foreground color is fully opaque, it simply replaces the background color. If the foreground color is partly transparent, then it is blended with the background color. Assuming that the alpha component ranges from 0 to 1, the color that you get can be computed as</p> <pre><code>new_color = (alpha)*(foreground_color) + (1 - alpha)*(background_color)\n</code></pre> <p>This computation is done separately for the red, blue, and green color components. This is called alpha blending. The effect is like viewing the background through colored glass; the color of the glass adds a tint to the background color. This type of blending is not the only possible use of the alpha component, but it is the most common.</p> <p>An RGBA color model with 8 bits per component uses a total of 32 bits to represent a color. This is a convenient number because integer values are often represented using 32-bit values. A 32-bit integer value can be interpreted as a 32-bit RGBA color. How the color components are arranged within a 32-bit integer is somewhat arbitrary. The most common layout is to store the alpha component in the eight high-order bits, followed by red, green, and blue. (This should probably be called ARGB color.) However, other layouts are also in use.</p>"},{"location":"cn/c2/s2/","title":"\u7b2c2\u8282: \u5f62\u72b6","text":"<p>Shapes</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u4e00\u76f4\u5728\u8c08\u8bba\u50cf\u7d20\u548c\u5750\u6807\u8fd9\u6837\u7684\u4f4e\u7ea7\u56fe\u5f62\u6982\u5ff5\uff0c\u4f46\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u5fc5\u5728\u6700\u4f4e\u7ea7\u522b\u4e0a\u5de5\u4f5c\u3002\u5927\u591a\u6570\u56fe\u5f62\u7cfb\u7edf\u5141\u8bb8\u60a8\u4f7f\u7528\u66f4\u9ad8\u7ea7\u7684\u5f62\u72b6\uff0c\u5982\u4e09\u89d2\u5f62\u548c\u5706\u5f62\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u50cf\u7d20\u3002\u5e76\u4e14\uff0c\u5927\u90e8\u5206\u5173\u4e8e\u5750\u6807\u7684\u8270\u96be\u5de5\u4f5c\u90fd\u662f\u4f7f\u7528\u53d8\u6362\u6765\u5b8c\u6210\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u5750\u6807\u3002\u5728\u672c\u8282\u548c\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u901a\u5e38\u75312D\u56fe\u5f62API\u63d0\u4f9b\u7684\u66f4\u9ad8\u7ea7\u522b\u7684\u529f\u80fd\u3002</p> <p>We have been talking about low-level graphics concepts like pixels and coordinates, but fortunately we don't usually have to work on the lowest levels. Most graphics systems let you work with higher-level shapes, such as triangles and circles, rather than individual pixels. And a lot of the hard work with coordinates is done using transforms rather than by working with coordinates directly. In this section and the next, we will look at some of the higher-level capabilities that are typically provided by 2D graphics APIs.</p>"},{"location":"cn/c2/s2/#221--\u57fa\u672c\u5f62\u72b6","title":"2.2.1  \u57fa\u672c\u5f62\u72b6","text":"<p>Basic Shapes</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u56fe\u5f62API\u4e2d\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u547d\u4ee4\u7ed8\u5236\u67d0\u4e9b\u57fa\u672c\u5f62\u72b6\uff0c\u800c\u66f4\u590d\u6742\u7684\u5f62\u72b6\u5219\u9700\u8981\u591a\u4e2a\u547d\u4ee4\u3002\u4ec0\u4e48\u6837\u7684\u5f62\u72b6\u88ab\u89c6\u4e3a\u57fa\u672c\u5f62\u72b6\u5728\u4e0d\u540c\u7684API\u4e2d\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5728WebGL API\u4e2d\uff0c\u552f\u4e00\u7684\u57fa\u672c\u5f62\u72b6\u662f\u70b9\u3001\u7ebf\u548c\u4e09\u89d2\u5f62\u3002\u5728\u672c\u5c0f\u8282\u4e2d\uff0c\u6211\u5c06\u7ebf\u6761\u3001\u77e9\u5f62\u548c\u692d\u5706\u89c6\u4e3a\u57fa\u672c\u5f62\u72b6\u3002</p> <p>\u6240\u8c13\u201c\u7ebf\u6761\u201d\uff0c\u5b9e\u9645\u4e0a\u662f\u6307\u8fde\u63a5\u5e73\u9762\u4e0a\u4e24\u4e2a\u7ed9\u5b9a\u70b9\u7684\u76f4\u7ebf\u6bb5\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u4e00\u50cf\u7d20\u5bbd\u7684\u7ebf\u6bb5\uff0c\u6ca1\u6709\u53cd\u952f\u9f7f(antialiasing)\uff0c\u662f\u6700\u57fa\u672c\u7684\u5f62\u72b6\u3002\u53ef\u4ee5\u901a\u8fc7\u7ed9\u4f4d\u4e8e\u65e0\u9650\u7ec6\u51e0\u4f55\u7ebf\u6bb5\u4e0a\u7684\u50cf\u7d20\u4e0a\u8272\u6765\u7ed8\u5236\u5b83\u3002\u7ed8\u5236\u7ebf\u6bb5\u7684\u7b97\u6cd5\u5fc5\u987b\u51b3\u5b9a\u8981\u4e0a\u8272\u7684\u786e\u5207\u50cf\u7d20\u3002\u5e03\u96f7\u68ee\u6c49\u59c6\u7ebf\u6bb5\u7ed8\u5236\u7b97\u6cd5(Bresenham's algorithm)\u662f\u6700\u65e9\u7684\u8ba1\u7b97\u673a\u56fe\u5f62\u7b97\u6cd5\u4e4b\u4e00\uff0c\u5b9e\u73b0\u4e86\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u8fc7\u7a0b\u3002\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u8fd9\u4e9b\u4f4e\u7ea7\u7ec6\u8282\uff0c\u4f46\u5982\u679c\u60a8\u60f3\u5f00\u59cb\u5b66\u4e60\u56fe\u5f62\u786c\u4ef6\u5728\u4f4e\u7ea7\u522b\u4e0a\u5b9e\u9645\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u503c\u5f97\u67e5\u9605\u4e00\u4e0b\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u7ebf\u6761\u901a\u5e38\u66f4\u590d\u6742\u3002\u53cd\u952f\u9f7f\u662f\u4e00\u79cd\u590d\u6742\u6027\u3002\u7ebf\u5bbd\u662f\u53e6\u4e00\u4e2a\u590d\u6742\u6027\u3002\u5bbd\u7ebf\u53ef\u80fd\u5b9e\u9645\u4e0a\u4f1a\u88ab\u7ed8\u5236\u6210\u4e00\u4e2a\u77e9\u5f62\u3002</p> <p>\u7ebf\u6761\u53ef\u4ee5\u5177\u6709\u5176\u4ed6\u5f71\u54cd\u5176\u5916\u89c2\u7684\u5c5e\u6027(attributes)\u3002\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5bbd\u7ebf\u7684\u672b\u7aef\u5e94\u8be5\u53d1\u751f\u4ec0\u4e48\uff1f\u901a\u8fc7\u5728\u7ebf\u7684\u672b\u7aef\u6dfb\u52a0\u4e00\u4e2a\u5706\u89d2\u7684\u201c\u5e3d\u5b50\u201d\uff0c\u53ef\u4ee5\u6539\u5584\u5916\u89c2\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5c06\u7ebf\u5ef6\u957f\u7ebf\u5bbd\u7684\u4e00\u534a\u6765\u4f7f\u7528\u65b9\u5f62\u5e3d\u5b50\u3002\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5f53\u4e24\u6761\u7ebf\u4f5c\u4e3a\u8f83\u5927\u5f62\u72b6\u7684\u4e00\u90e8\u5206\u76f8\u4ea4\u65f6\uff0c\u7ebf\u5e94\u8be5\u5982\u4f55\u8fde\u63a5\uff1f\u8bb8\u591a\u56fe\u5f62\u7cfb\u7edf\u652f\u6301\u7531\u77ed\u5212\u7ebf\u548c\u70b9\u7ec4\u6210\u7684\u7ebf\u6761\u3002\u8fd9\u4e2a\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e9b\u53ef\u80fd\u6027\uff1a</p> <p> <p>\u5de6\u8fb9\u662f\u4e09\u6761\u5bbd\u7ebf\uff0c\u5206\u522b\u6ca1\u6709\u5e3d\u5b50\u3001\u5706\u5e3d\u548c\u65b9\u5e3d\u3002\u51e0\u4f55\u7ebf\u6bb5\u663e\u793a\u4e3a\u865a\u7ebf\u3002\uff08\u6ca1\u6709\u5e3d\u5b50\u7684\u6837\u5f0f\u79f0\u4e3a\u201c\u5e73\u5934(butt)\u201d\uff09\u53f3\u8fb9\u662f\u56db\u6761\u5177\u6709\u4e0d\u540c\u70b9\u5212\u7ebf\u6837\u5f0f\u7684\u7ebf\u6761\u3002\u4e2d\u95f4\u662f\u4e09\u79cd\u4e0d\u540c\u7684\u7ebf\u6bb5\u8fde\u63a5\u6837\u5f0f\uff1a\u5c16\u89d2\u3001\u5706\u89d2\u548c\u659c\u89d2\u3002</p> <p>\u57fa\u672c\u77e9\u5f62\u5f62\u72b6\u7684\u8fb9\u662f\u5782\u76f4\u548c\u6c34\u5e73\u7684\u3002\uff08\u503e\u659c\u7684\u77e9\u5f62\u901a\u5e38\u9700\u8981\u5e94\u7528\u65cb\u8f6c(rotation)\u6765\u5236\u4f5c\u3002\uff09\u8fd9\u6837\u7684\u77e9\u5f62\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a\u70b9\uff08x1\uff0cy1\uff09\u548c\uff08x2\uff0cy2\uff09\u6765\u6307\u5b9a\uff0c\u8fd9\u4e9b\u70b9\u7ed9\u51fa\u4e86\u77e9\u5f62\u7684\u5bf9\u89d2\u7ebf\u7684\u7aef\u70b9\u4e4b\u4e00\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u7ed9\u51fa\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u4ee5\u53ca\u4e00\u4e2a\u57fa\u51c6\u70b9\uff08x\uff0cy\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5fc5\u987b\u662f\u6b63\u6570\uff0c\u5426\u5219\u77e9\u5f62\u4e3a\u7a7a\u3002\u5982\u679cy\u4ece\u4e0a\u5230\u4e0b\u589e\u52a0\uff0c\u57fa\u51c6\u70b9\uff08x\uff0cy\uff09\u5c06\u662f\u77e9\u5f62\u7684\u5de6\u4e0a\u89d2\uff0c\u5982\u679cy\u4ece\u4e0b\u5230\u4e0a\u589e\u52a0\uff0c\u5b83\u5c06\u662f\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u3002</p> <p> <p>\u5047\u8bbe\u60a8\u5df2\u7ecf\u7ed9\u5b9a\u4e86\u70b9(x1,y1)\u548c(x2,y2)\uff0c\u5e76\u4e14\u60a8\u60f3\u8981\u7ed8\u5236\u7531\u5b83\u4eec\u786e\u5b9a\u7684\u77e9\u5f62\u3002\u5047\u8bbe\u60a8\u53ef\u4ee5\u4f7f\u7528\u7684\u552f\u4e00\u7ed8\u5236\u77e9\u5f62\u7684\u547d\u4ee4\u662f\u9700\u8981\u4e00\u4e2a\u70b9(x,y)\u3001\u4e00\u4e2a\u5bbd\u5ea6\u548c\u4e00\u4e2a\u9ad8\u5ea6\u7684\u547d\u4ee4\u3002\u5bf9\u4e8e\u8be5\u547d\u4ee4\uff0cx\u5fc5\u987b\u662fx1\u548cx2\u4e2d\u8f83\u5c0f\u7684\u503c\uff0c\u5bbd\u5ea6\u53ef\u4ee5\u8ba1\u7b97\u4e3ax1\u51cf\u53bbx2\u7684\u7edd\u5bf9\u503c\u3002y\u548c\u9ad8\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u7c7b\u4f3c\u3002\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>DrawRectangle from points (x1,y1) and (x2,y2):\n    x = min( x1, x2 )\n    y = min( y1, y2 )\n    width = abs( x1 - x2 )\n    height = abs( y1 - y2 )\n    DrawRectangle( x, y, width, height )\n</code></pre> <p>\u77e9\u5f62\u7684\u4e00\u4e2a\u5e38\u89c1\u53d8\u4f53\u662f\u5141\u8bb8\u5706\u89d2\u3002\u5bf9\u4e8e\u4e00\u4e2a\"round rect\"\uff0c\u89d2\u88ab\u66ff\u6362\u4e3a\u692d\u5706\u5f27\u3002\u5706\u89d2\u7684\u7a0b\u5ea6\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u692d\u5706\u7684\u6c34\u5e73\u534a\u5f84\u548c\u5782\u76f4\u534a\u5f84\u6765\u6307\u5b9a\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5706\u89d2\u77e9\u5f62\u7684\u4f8b\u5b50\u3002\u5bf9\u4e8e\u53f3\u8fb9\u7684\u5f62\u72b6\uff0c\u692d\u5706\u7684\u4e24\u4e2a\u534a\u5f84\u88ab\u663e\u793a\u51fa\u6765:</p> <p> <p>\u6211\u7684\u6700\u540e\u4e00\u4e2a\u57fa\u672c\u5f62\u72b6\u662f\u692d\u5706\uff08\u4e5f\u79f0\u4e3a\u692d\u5706\u5f62\uff09\u3002\u692d\u5706\u662f\u4e00\u4e2a\u6709\u4e24\u4e2a\u534a\u5f84\u7684\u95ed\u5408\u66f2\u7ebf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u57fa\u672c\u7684\u692d\u5706\uff0c\u6211\u4eec\u5047\u8bbe\u534a\u5f84\u662f\u5782\u76f4\u548c\u6c34\u5e73\u7684\u3002\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u521a\u597d\u5305\u542b\u5b83\u7684\u77e9\u5f62\u6765\u6307\u5b9a\u8fd9\u6837\u7684\u692d\u5706\u3002\u6216\u8005\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u5b83\u7684\u4e2d\u5fc3\u70b9\u548c\u5782\u76f4\u534a\u5f84\u4ee5\u53ca\u6c34\u5e73\u534a\u5f84\u7684\u957f\u5ea6\u6765\u6307\u5b9a\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u5de6\u8fb9\u7684\u692d\u5706\u663e\u793a\u4e86\u5b83\u7684\u5305\u542b\u77e9\u5f62\u4ee5\u53ca\u5b83\u7684\u4e2d\u5fc3\u70b9\u548c\u534a\u5f84:</p> <p> <p>\u53f3\u8fb9\u7684\u692d\u5706\u662f\u4e00\u4e2a\u5706\u3002\u5706\u53ea\u662f\u4e24\u4e2a\u534a\u5f84\u957f\u5ea6\u76f8\u7b49\u7684\u692d\u5706\u3002</p> <p>\u5982\u679c\u692d\u5706\u4e0d\u53ef\u7528\u4f5c\u57fa\u672c\u5f62\u72b6\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ed8\u5236\u5927\u91cf\u7684\u7ebf\u6bb5\u6765\u8fd1\u4f3c\u3002\u6240\u9700\u7ebf\u6bb5\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u692d\u5706\u7684\u5927\u5c0f\u3002\u4e86\u89e3\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u662f\u6709\u7528\u7684\u3002\u5047\u8bbe\u4e00\u4e2a\u692d\u5706\u5177\u6709\u4e2d\u5fc3\u70b9(x,y)\uff0c\u6c34\u5e73\u534a\u5f84r1\u548c\u5782\u76f4\u534a\u5f84r2\u3002\u6570\u5b66\u4e0a\uff0c\u692d\u5706\u4e0a\u7684\u70b9\u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>( x + r1*cos(angle), y + r2*sin(angle) )\n</code></pre> <p>\u5176\u4e2dangle\u7684\u503c\u4ece0\u5230360\uff08\u5982\u679c\u89d2\u5ea6\u4ee5\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\uff09\u6216\u4ece0\u52302\u03c0\uff08\u5982\u679c\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\uff09\u3002\u8fd9\u91cc\u7684sin\u548ccos\u662f\u6807\u51c6\u7684\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570\u3002\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u692d\u5706\u7684\u8fd1\u4f3c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u516c\u5f0f\u751f\u6210\u4e00\u4e9b\u70b9\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u8fde\u63a5\u8fd9\u4e9b\u70b9\u3002\u5047\u8bbe\u89d2\u5ea6\u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\uff0c\u5e76\u4e14pi\u8868\u793a\u6570\u5b66\u5e38\u6570\u03c0\uff0c\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>Draw Oval with center (x,y), horizontal radius r1, and vertical radius r2:\n    for i = 0 to numberOfLines:\n        angle1 = i * (2*pi/numberOfLines)\n        angle2 = (i+1) * (2*pi/numberOfLines)\n        a1 = x + r1*cos(angle1)\n        b1 = y + r2*sin(angle1)\n        a2 = x + r1*cos(angle2)\n        b2 = y + r2*sin(angle2)\n        Draw Line from (a1,b1) to (a2,b2)\n</code></pre> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5706\uff0c\u5f53\u7136\uff0cr1 = r2\u3002\u8fd9\u662f\u6211\u4eec\u7b2c\u4e00\u6b21\u4f7f\u7528\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570\uff0c\u4f46\u4e0d\u4f1a\u662f\u6700\u540e\u4e00\u6b21\u3002\u8fd9\u4e9b\u51fd\u6570\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u626e\u6f14\u91cd\u8981\u89d2\u8272\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e\u5706\u3001\u5706\u5468\u8fd0\u52a8\u548c\u65cb\u8f6c\u6709\u5173\u3002\u5f53\u6211\u4eec\u5728\u4e0b\u4e00\u8282\u4e2d\u8ba8\u8bba\u53d8\u6362\u65f6\uff0c\u6211\u4eec\u5c06\u518d\u6b21\u9047\u5230\u5b83\u4eec\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u7684\u6f14\u793a\uff0c\u60a8\u53ef\u4ee5\u7528\u5b83\u6765\u5c1d\u8bd5\u4f7f\u7528\u7ebf\u6bb5\u8fd1\u4f3c\u692d\u5706\uff1a</p> <p></p> <p>In a graphics API, there will be certain basic shapes that can be drawn with one command, whereas more complex shapes will require multiple commands. Exactly what qualifies as a basic shape varies from one API to another. In the WebGL API, for example, the only basic shapes are points, lines, and triangles. In this subsection, I consider lines, rectangles, and ovals to be basic.</p> <p>By \"line,\" I really mean line segment, that is a straight line segment connecting two given points in the plane. A simple one-pixel-wide line segment, without antialiasing, is the most basic shape. It can be drawn by coloring pixels that lie along the infinitely thin geometric line segment. An algorithm for drawing the line has to decide exactly which pixels to color. One of the first computer graphics algorithms, Bresenham's algorithm for line drawing, implements a very efficient procedure for doing so. I won't discuss such low-level details here, but it's worth looking them up if you want to start learning about what graphics hardware actually has to do on a low level. In any case, lines are typically more complicated. Antialiasing is one complication. Line width is another. A wide line might actually be drawn as a rectangle.</p> <p>Lines can have other attributes, or properties, that affect their appearance. One question is, what should happen at the end of a wide line? Appearance might be improved by adding a rounded \"cap\" on the ends of the line. A square cap\u2014that is, extending the line by half of the line width\u2014might also make sense. Another question is, when two lines meet as part of a larger shape, how should the lines be joined? And many graphics systems support lines that are patterns of dashes and dots. This illustration shows some of the possibilities:</p> <p> <p>On the left are three wide lines with no cap, a round cap, and a square cap. The geometric line segment is shown as a dotted line. (The no-cap style is called \"butt.\") To the right are four lines with different patterns of dots and dashes. In the middle are three different styles of line joins: mitered, rounded, and beveled.</p> <p>The basic rectangular shape has sides that are vertical and horizontal. (A tilted rectangle generally has to be made by applying a rotation.) Such a rectangle can be specified with two points, (x1,y1) and (x2,y2), that give the endpoints of one of the diagonals of the rectangle. Alternatively, the width and the height can be given, along with a single base point, (x,y). In that case, the width and height have to be positive, or the rectangle is empty. The base point (x,y) will be the upper left corner of the rectangle if y increases from top to bottom, and it will be the lower left corner of the rectangle if y increases from bottom to top.</p> <p> <p>Suppose that you are given points (x1,y1) and (x2,y2), and that you want to draw the rectangle that they determine. And suppose that the only rectangle-drawing command that you have available is one that requires a point (x,y), a width, and a height. For that command, x must be the smaller of x1 and x2, and the width can be computed as the absolute value of x1 minus x2. And similarly for y and the height. In pseudocode,</p> <pre><code>DrawRectangle from points (x1,y1) and (x2,y2):\n    x = min( x1, x2 )\n    y = min( y1, y2 )\n    width = abs( x1 - x2 )\n    height = abs( y1 - y2 )\n    DrawRectangle( x, y, width, height )\n</code></pre> <p>A common variation on rectangles is to allow rounded corners. For a \"round rect,\" the corners are replaced by elliptical arcs. The degree of rounding can be specified by giving the horizontal radius and vertical radius of the ellipse. Here are some examples of round rects. For the shape at the right, the two radii of the ellipse are shown:</p> <p> <p>My final basic shape is the oval. (An oval is also called an ellipse.) An oval is a closed curve that has two radii. For a basic oval, we assume that the radii are vertical and horizontal. An oval with this property can be specified by giving the rectangle that just contains it. Or it can be specified by giving its center point and the lengths of its vertical radius and its horizontal radius. In this illustration, the oval on the left is shown with its containing rectangle and with its center point and radii:</p> <p> <p>The oval on the right is a circle. A circle is just an oval in which the two radii have the same length.</p> <p>If ovals are not available as basic shapes, they can be approximated by drawing a large number of line segments. The number of lines that is needed for a good approximation depends on the size of the oval. It's useful to know how to do this. Suppose that an oval has center point (x,y), horizontal radius r1, and vertical radius r2. Mathematically, the points on the oval are given by</p> <pre><code>( x + r1*cos(angle), y + r2*sin(angle) )\n</code></pre> <p>where angle takes on values from 0 to 360 if angles are measured in degrees or from 0 to 2\u03c0 if they are measured in radians. Here sin and cos are the standard sine and cosine functions. To get an approximation for an oval, we can use this formula to generate some number of points and then connect those points with line segments. In pseudocode, assuming that angles are measured in radians and that pi represents the mathematical constant \u03c0,</p> <pre><code>Draw Oval with center (x,y), horizontal radius r1, and vertical radius r2:\n    for i = 0 to numberOfLines:\n        angle1 = i * (2*pi/numberOfLines)\n        angle2 = (i+1) * (2*pi/numberOfLines)\n        a1 = x + r1*cos(angle1)\n        b1 = y + r2*sin(angle1)\n        a2 = x + r1*cos(angle2)\n        b2 = y + r2*sin(angle2)\n        Draw Line from (a1,b1) to (a2,b2)\n</code></pre> <p>For a circle, of course, you would just have r1 = r2. This is the first time we have used the sine and cosine functions, but it won't be the last. These functions play an important role in computer graphics because of their association with circles, circular motion, and rotation. We will meet them again when we talk about transforms in the next section.</p> <p>Here's a little demo that you can use to experiment with using line segments to approximate ovals:</p> <p></p>"},{"location":"cn/c2/s2/#222--\u63cf\u8fb9\u548c\u586b\u5145","title":"2.2.2  \u63cf\u8fb9\u548c\u586b\u5145","text":"<p>Stroke and Fill</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u7ed8\u56fe\u4e2d\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4f7f\u5f62\u72b6\u53ef\u89c1\u3002\u60a8\u53ef\u4ee5\u63cf\u8fb9(stroke)\u5b83\uff0c\u6216\u8005\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u5c01\u95ed\u7684\u5f62\u72b6\uff0c\u6bd4\u5982\u77e9\u5f62\u6216\u692d\u5706\uff0c\u60a8\u53ef\u4ee5\u586b\u5145(fill)\u5b83\u3002\u63cf\u8fb9\u4e00\u6761\u7ebf\u5c31\u50cf\u6cbf\u7740\u7ebf\u6761\u62d6\u52a8\u4e00\u652f\u7b14\u3002\u63cf\u8fb9\u4e00\u4e2a\u77e9\u5f62\u6216\u692d\u5706\u5c31\u50cf\u6cbf\u7740\u5b83\u7684\u8fb9\u754c\u62d6\u52a8\u4e00\u652f\u7b14\u3002\u586b\u5145\u4e00\u4e2a\u5f62\u72b6\u610f\u5473\u7740\u7ed9\u5305\u542b\u5728\u8be5\u5f62\u72b6\u5185\u7684\u6240\u6709\u70b9\u4e0a\u8272\u3002\u53ef\u4ee5\u540c\u65f6\u63cf\u8fb9\u548c\u586b\u5145\u540c\u4e00\u4e2a\u5f62\u72b6\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f62\u72b6\u7684\u5185\u90e8\u548c\u5916\u8f6e\u5ed3\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5916\u89c2\u3002</p> <p>\u5f53\u4e00\u4e2a\u5f62\u72b6\u4e0e\u81ea\u8eab\u76f8\u4ea4\u65f6\uff0c\u5c31\u50cf\u4e0b\u9762\u63d2\u56fe\u4e2d\u7684\u4e24\u4e2a\u5f62\u72b6\u4e00\u6837\uff0c\u4e0d\u592a\u6e05\u695a\u5e94\u8be5\u5982\u4f55\u5b9a\u4e49\u5f62\u72b6\u7684\u5185\u90e8\u3002\u4e8b\u5b9e\u4e0a\uff0c\u81f3\u5c11\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u89c4\u5219\u53ef\u4ee5\u7528\u6765\u586b\u5145\u8fd9\u6837\u7684\u5f62\u72b6\u3002\u8fd9\u4e24\u4e2a\u89c4\u5219\u90fd\u57fa\u4e8e\u4e00\u4e2a\u53eb\u505a\u201c\u7ed5\u6570(winding number)\u201d\u7684\u4e1c\u897f\u3002\u5173\u4e8e\u4e00\u4e2a\u70b9\u7684\u7ed5\u6570\u5927\u81f4\u662f\u6307\u5f62\u72b6\u4ee5\u6b63\u65b9\u5411\u7ed5\u8be5\u70b9\u65cb\u8f6c\u7684\u6b21\u6570\uff0c\u8fd9\u91cc\u6211\u8ba4\u4e3a\u6b63\u65b9\u5411\u662f\u9006\u65f6\u9488\u65b9\u5411\u3002\u5f53\u7ed5\u6570\u4e3a\u8d1f\u6570\u65f6\uff0c\u8868\u793a\u7ed5\u6570\u65b9\u5411\u76f8\u53cd\u3002\u5728\u63d2\u56fe\u4e2d\uff0c\u5de6\u8fb9\u7684\u5f62\u72b6\u6309\u7167\u6240\u793a\u65b9\u5411\u8fdb\u884c\u63cf\u7ed8\uff0c\u5e76\u4e14\u6bcf\u4e2a\u533a\u57df\u7684\u7ed5\u6570\u5728\u533a\u57df\u5185\u663e\u793a\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002</p> <p> </p> <p>\u8fd9\u4e9b\u5f62\u72b6\u4e5f\u7528\u4e24\u79cd\u586b\u5145\u89c4\u5219\u8fdb\u884c\u4e86\u586b\u5145\u3002\u5bf9\u4e8e\u4e2d\u95f4\u7684\u5f62\u72b6\uff0c\u586b\u5145\u89c4\u5219\u662f\u5bf9\u5177\u6709\u975e\u96f6\u7ed5\u6570\u7684\u4efb\u4f55\u533a\u57df\u8fdb\u884c\u7740\u8272\u3002\u5bf9\u4e8e\u53f3\u8fb9\u663e\u793a\u7684\u5f62\u72b6\uff0c\u89c4\u5219\u662f\u5bf9\u7ed5\u6570\u4e3a\u5947\u6570\u7684\u4efb\u4f55\u533a\u57df\u8fdb\u884c\u7740\u8272\uff1b\u7ed5\u6570\u4e3a\u5076\u6570\u7684\u533a\u57df\u4e0d\u586b\u5145\u3002</p> <p>\u4ecd\u7136\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u5f62\u72b6\u5e94\u8be5\u7528\u4ec0\u4e48\u6765\u586b\u5145\u3002\u5f53\u7136\uff0c\u53ef\u4ee5\u7528\u989c\u8272\u6765\u586b\u5145\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7c7b\u578b\u7684\u586b\u5145\uff0c\u5305\u62ec\u56fe\u6848(patterns)\u548c\u6e10\u53d8(gradients)\u3002\u56fe\u6848\u662f\u4e00\u4e2a\u56fe\u50cf\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u5c0f\u56fe\u50cf\u3002\u5f53\u7528\u4e8e\u586b\u5145\u5f62\u72b6\u65f6\uff0c\u56fe\u6848\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6c34\u5e73\u548c\u5782\u76f4\u91cd\u590d\uff0c\u4ee5\u8986\u76d6\u6574\u4e2a\u5f62\u72b6\u3002\u6e10\u53d8\u7c7b\u4f3c\uff0c\u5b83\u662f\u4e00\u79cd\u8ba9\u989c\u8272\u4ece\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u70b9\u53d8\u5316\u7684\u65b9\u5f0f\uff0c\u4f46\u4e0d\u662f\u4ece\u56fe\u50cf\u4e2d\u83b7\u53d6\u989c\u8272\uff0c\u800c\u662f\u8ba1\u7b97\u5f97\u51fa\u3002\u57fa\u672c\u601d\u60f3\u6709\u5f88\u591a\u53d8\u5316\uff0c\u4f46\u603b\u662f\u6709\u4e00\u6761\u7ebf\u6bb5\u6cbf\u7740\u5b83\u7684\u989c\u8272\u53d8\u5316\u3002\u989c\u8272\u5728\u7ebf\u6bb5\u7684\u7aef\u70b9\u5904\u6307\u5b9a\uff0c\u53ef\u80fd\u8fd8\u5728\u5176\u4ed6\u70b9\u5904\u6307\u5b9a\uff1b\u5728\u8fd9\u4e9b\u70b9\u4e4b\u95f4\uff0c\u989c\u8272\u8fdb\u884c\u63d2\u503c(interpolated)\u3002\u989c\u8272\u4e5f\u53ef\u4ee5\u5916\u63a8\u5230\u5305\u542b\u7ebf\u6bb5\u7684\u7ebf\u4e0a\u7684\u5176\u4ed6\u70b9\uff0c\u4f46\u4f4d\u4e8e\u7ebf\u6bb5\u4e4b\u5916\uff1b\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ece\u7ebf\u6bb5\u91cd\u590d\u56fe\u6848\u6216\u8005\u7b80\u5355\u5730\u4ece\u6700\u8fd1\u7684\u7aef\u70b9\u5ef6\u4f38\u989c\u8272\u6765\u5b8c\u6210\u3002\u5bf9\u4e8e\u7ebf\u6027\u6e10\u53d8(linear gradient)\uff0c\u989c\u8272\u6cbf\u7740\u4e0e\u57fa\u672c\u7ebf\u6bb5\u5782\u76f4\u7684\u7ebf\u4fdd\u6301\u6052\u5b9a\uff0c\u56e0\u6b64\u60a8\u4f1a\u5f97\u5230\u4ee5\u8be5\u65b9\u5411\u7684\u5b9e\u8272\u7ebf\u6761\u3002\u5728\u5f84\u5411\u6e10\u53d8(radial gradient)\u4e2d\uff0c\u989c\u8272\u6cbf\u7740\u4ee5\u7ebf\u6bb5\u7684\u4e00\u4e2a\u7aef\u70b9\u4e3a\u4e2d\u5fc3\u7684\u5706\u4fdd\u6301\u6052\u5b9a\u3002\u8fd9\u8fd8\u6ca1\u6709\u7a77\u5c3d\u6240\u6709\u53ef\u80fd\u6027\u3002\u4e3a\u4e86\u8ba9\u60a8\u4e86\u89e3\u56fe\u6848\u548c\u6e10\u53d8\u7684\u5916\u89c2\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f62\u72b6\uff0c\u7528\u4e24\u79cd\u6e10\u53d8\u548c\u4e24\u79cd\u56fe\u6848\u586b\u5145\uff1a</p> <p> </p> <p>\u7b2c\u4e00\u4e2a\u5f62\u72b6\u4f7f\u7528\u4ec5\u7531\u4e24\u79cd\u989c\u8272\u5b9a\u4e49\u7684\u7b80\u5355\u7ebf\u6027\u6e10\u53d8\u8fdb\u884c\u586b\u5145\uff0c\u800c\u7b2c\u4e8c\u4e2a\u5f62\u72b6\u4f7f\u7528\u5f84\u5411\u6e10\u53d8\u8fdb\u884c\u586b\u5145\u3002</p> <p>\u56fe\u6848\u548c\u6e10\u53d8\u4e0d\u4e00\u5b9a\u5c40\u9650\u4e8e\u586b\u5145\u5f62\u72b6\u3002\u6bd5\u7adf\uff0c\u63cf\u8fb9\u4e00\u4e2a\u5f62\u72b6\u5c31\u662f\u586b\u5145\u6cbf\u7740\u5f62\u72b6\u8fb9\u754c\u7684\u50cf\u7d20\u5e26\uff0c\u53ef\u4ee5\u7528\u6e10\u53d8\u6216\u56fe\u6848\u6765\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u7528\u7eaf\u8272\u586b\u5145\u3002</p> <p>\u6700\u540e\uff0c\u6211\u8981\u63d0\u5230\uff0c\u4e3a\u4e86\u7ed8\u5236\u6587\u672c\uff0c\u53ef\u4ee5\u5c06\u6587\u672c\u89c6\u4e3a\u4e00\u4e2a\u5f62\u72b6\u3002\u5f62\u72b6\u7684\u8fb9\u754c\u662f\u5b57\u7b26\u7684\u8f6e\u5ed3\u3002\u6587\u672c\u901a\u8fc7\u586b\u5145\u8be5\u5f62\u72b6\u6765\u7ed8\u5236\u3002\u5728\u67d0\u4e9b\u56fe\u5f62\u7cfb\u7edf\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u63cf\u7ed8\u5b9a\u4e49\u6587\u672c\u7684\u5f62\u72b6\u7684\u8f6e\u5ed3\u3002\u5728\u4e0b\u9762\u7684\u63d2\u56fe\u4e2d\uff0c\u9876\u90e8\u663e\u793a\u4e86\u5b57\u7b26\u4e32\"Graphics\"\uff0c\u4f7f\u7528\u56fe\u6848\u8fdb\u884c\u586b\u5145\uff0c\u4e0b\u65b9\u5219\u4f7f\u7528\u6e10\u53d8\u8fdb\u884c\u586b\u5145\uff0c\u5e76\u7528\u7eaf\u9ed1\u8272\u63cf\u8fb9\uff1a</p> <p> </p> <p>There are two ways to make a shape visible in a drawing. You can stroke it. Or, if it is a closed shape such as a rectangle or an oval, you can fill it. Stroking a line is like dragging a pen along the line. Stroking a rectangle or oval is like dragging a pen along its boundary. Filling a shape means coloring all the points that are contained inside that shape. It's possible to both stroke and fill the same shape; in that case, the interior of the shape and the outline of the shape can have a different appearance.</p> <p>When a shape intersects itself, like the two shapes in the illustration below, it's not entirely clear what should count as the interior of the shape. In fact, there are at least two different rules for filling such a shape. Both are based on something called the winding number. The winding number of a shape about a point is, roughly, how many times the shape winds around the point in the positive direction, which I take here to be counterclockwise. Winding number can be negative when the winding is in the opposite direction. In the illustration, the shapes on the left are traced in the direction shown, and the winding number about each region is shown as a number inside the region.</p> <p> </p> <p>The shapes are also shown filled using the two fill rules. For the shapes in the center, the fill rule is to color any region that has a non-zero winding number. For the shapes shown on the right, the rule is to color any region whose winding number is odd; regions with even winding number are not filled.</p> <p>There is still the question of what a shape should be filled with. Of course, it can be filled with a color, but other types of fill are possible, including patterns and gradients. A pattern is an image, usually a small image. When used to fill a shape, a pattern can be repeated horizontally and vertically as necessary to cover the entire shape. A gradient is similar in that it is a way for color to vary from point to point, but instead of taking the colors from an image, they are computed. There are a lot of variations to the basic idea, but there is always a line segment along which the color varies. The color is specified at the endpoints of the line segment, and possibly at additional points; between those points, the color is interpolated. The color can also be extrapolated to other points on the line that contains the line segment but lying outside the line segment; this can be done either by repeating the pattern from the line segment or by simply extending the color from the nearest endpoint. For a linear gradient, the color is constant along lines perpendicular to the basic line segment, so you get lines of solid color going in that direction. In a radial gradient, the color is constant along circles centered at one of the endpoints of the line segment. And that doesn't exhaust the possibilities. To give you an idea what patterns and gradients can look like, here is a shape, filled with two gradients and two patterns:</p> <p> </p> <p>The first shape is filled with a simple linear gradient defined by just two colors, while the second shape uses a radial gradient.</p> <p>Patterns and gradients are not necessarily restricted to filling shapes. Stroking a shape is, after all, the same as filling a band of pixels along the boundary of the shape, and that can be done with a gradient or a pattern, instead of with a solid color.</p> <p>Finally, I will mention that a string of text can be considered to be a shape for the purpose of drawing it. The boundary of the shape is the outline of the characters. The text is drawn by filling that shape. In some graphics systems, it is also possible to stroke the outline of the shape that defines the text. In the following illustration, the string \"Graphics\" is shown, on top, filled with a pattern and, below that, filled with a gradient and stroked with solid black:</p> <p> </p>"},{"location":"cn/c2/s2/#223--\u591a\u8fb9\u5f62\u66f2\u7ebf\u548c\u8def\u5f84","title":"2.2.3  \u591a\u8fb9\u5f62\u3001\u66f2\u7ebf\u548c\u8def\u5f84","text":"<p>Polygons, Curves, and Paths</p> \u4e2d\u6587\u82f1\u6587 <p>\u5bf9\u4e8e\u4e00\u4e2a\u56fe\u5f62API\u6765\u8bf4\uff0c\u5305\u542b\u6bcf\u79cd\u53ef\u80fd\u7684\u5f62\u72b6\u4f5c\u4e3a\u57fa\u672c\u5f62\u72b6\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f46\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u521b\u5efa\u66f4\u590d\u6742\u7684\u5f62\u72b6\u3002\u4f8b\u5982\uff0c\u8003\u8651\u591a\u8fb9\u5f62(polygons)\u3002\u591a\u8fb9\u5f62\u662f\u7531\u4e00\u7cfb\u5217\u7ebf\u6bb5\u7ec4\u6210\u7684\u5c01\u95ed\u5f62\u72b6\u3002\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u7aef\u70b9\u4e0e\u4e0b\u4e00\u4e2a\u7ebf\u6bb5\u7684\u7aef\u70b9\u8fde\u63a5\uff0c\u6700\u540e\u4e00\u4e2a\u7ebf\u6bb5\u8fde\u63a5\u56de\u7b2c\u4e00\u4e2a\u7ebf\u6bb5\u3002\u7aef\u70b9\u88ab\u79f0\u4e3a\u591a\u8fb9\u5f62\u7684\u9876\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u5217\u51fa\u9876\u70b9\u6765\u5b9a\u4e49\u4e00\u4e2a\u591a\u8fb9\u5f62\u3002</p> <p>\u5728\u4e00\u4e2a\u6b63\u591a\u8fb9\u5f62(regular polygon)\u4e2d\uff0c\u6240\u6709\u7684\u8fb9\u957f\u76f8\u7b49\uff0c\u6240\u6709\u8fb9\u4e4b\u95f4\u7684\u89d2\u5ea6\u4e5f\u76f8\u7b49\u3002\u6b63\u65b9\u5f62\u548c\u7b49\u8fb9\u4e09\u89d2\u5f62\u662f\u6b63\u591a\u8fb9\u5f62\u7684\u4f8b\u5b50\u3002\u51f8\u591a\u8fb9\u5f62(convex polygon)\u5177\u6709\u8fd9\u6837\u7684\u5c5e\u6027\uff1a\u65e0\u8bba\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u591a\u8fb9\u5f62\u5185\u90e8\u6216\u8fb9\u4e0a\uff0c\u8fde\u63a5\u8fd9\u4e9b\u70b9\u7684\u6574\u6761\u7ebf\u6bb5\u4e5f\u5728\u591a\u8fb9\u5f62\u5185\u90e8\u6216\u8fb9\u4e0a\u3002\u76f4\u89c2\u5730\u8bf4\uff0c\u51f8\u591a\u8fb9\u5f62\u5728\u8fb9\u754c\u4e0a\u6ca1\u6709\"\u51f9\u9677\"\u3002\uff08\u51f9\u9677\u662f\u4efb\u4f55\u5f62\u72b6\u7684\u5c5e\u6027\uff0c\u4e0d\u4ec5\u4ec5\u662f\u591a\u8fb9\u5f62\u7684\u5c5e\u6027\u3002\uff09</p> <p> </p> <p>\u6709\u65f6\u5019\uff0c\u591a\u8fb9\u5f62\u9700\u8981\u662f\"\u7b80\u5355\"\u7684\uff0c\u8fd9\u610f\u5473\u7740\u591a\u8fb9\u5f62\u6ca1\u6709\u81ea\u76f8\u4ea4\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u4e00\u6761\u8fb9\u53ea\u80fd\u5728\u5176\u7aef\u70b9\u5904\u4e0e\u53e6\u4e00\u6761\u8fb9\u76f8\u4ea4\u3002\u800c\u4e14\u901a\u5e38\u8981\u6c42\u591a\u8fb9\u5f62\u662f\"\u5e73\u9762\"\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6240\u6709\u7684\u9876\u70b9\u90fd\u4f4d\u4e8e\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\u3002\uff08\u5f53\u7136\uff0c\u57282D\u56fe\u5f62\u4e2d\uff0c\u4e00\u5207\u90fd\u4f4d\u4e8e\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\uff0c\u6240\u4ee5\u8fd9\u4e0d\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u4f46\u57283D\u4e2d\u5c31\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002\uff09</p> <p>\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u7ed8\u5236\u591a\u8fb9\u5f62\u5462\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u7ed8\u56feAPI\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5177\u5907\u54ea\u4e9b\u529f\u80fd\u6765\u7ed8\u5236\u591a\u8fb9\u5f62\u3002\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u5177\u5907\u7ed8\u5236\u7ebf\u6bb5\u548c\u586b\u5145\u591a\u8fb9\u5f62\u7684\u547d\u4ee4\uff0c\u5176\u4e2d\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u53ef\u4ee5\u4f5c\u4e3a\u70b9\u7684\u6570\u7ec4\u6216\u8005\u4f5c\u4e3ax\u5750\u6807\u6570\u7ec4\u52a0\u4e0ay\u5750\u6807\u6570\u7ec4\u6765\u7ed9\u51fa\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u65f6\u5019\u786e\u5b9e\u662f\u8fd9\u6837\u505a\u7684\uff1b\u4f8b\u5982\uff0cJava\u56fe\u5f62API\u5c31\u5305\u542b\u4e86\u8fd9\u6837\u7684\u547d\u4ee4\u3002\u53e6\u4e00\u79cd\u66f4\u7075\u6d3b\u7684\u65b9\u6cd5\u662f\u5f15\u5165\"\u8def\u5f84\"\u7684\u6982\u5ff5\u3002Java\u3001SVG\u548cHTML\u753b\u5e03API\u90fd\u652f\u6301\u8fd9\u4e2a\u6982\u5ff5\u3002\u8def\u5f84\u662f\u4e00\u4e2a\u901a\u7528\u7684\u5f62\u72b6\uff0c\u53ef\u4ee5\u5305\u542b\u7ebf\u6bb5\u548c\u66f2\u7ebf\u6bb5\u3002\u7ebf\u6bb5\u53ef\u4ee5\u8fde\u63a5\u5230\u5176\u4ed6\u7ebf\u6bb5\u7684\u7aef\u70b9\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u8fde\u63a5\u3002\u901a\u8fc7\u7ed9\u51fa\u4e00\u7cfb\u5217\u547d\u4ee4\u6765\u521b\u5efa\u8def\u5f84\uff0c\u8fd9\u4e9b\u547d\u4ee4\u57fa\u672c\u4e0a\u544a\u8bc9\u4e86\u5982\u4f55\u79fb\u52a8\u753b\u7b14\u6765\u7ed8\u5236\u8def\u5f84\u3002\u5728\u521b\u5efa\u8def\u5f84\u65f6\uff0c\u6709\u4e00\u4e2a\u8868\u793a\u753b\u7b14\u5f53\u524d\u4f4d\u7f6e\u7684\u70b9\u3002\u6709\u4e00\u4e2a\u547d\u4ee4\u53ef\u4ee5\u79fb\u52a8\u753b\u7b14\u800c\u4e0d\u7ed8\u5236\uff0c\u8fd8\u6709\u7528\u4e8e\u7ed8\u5236\u5404\u79cd\u7c7b\u578b\u7ebf\u6bb5\u7684\u547d\u4ee4\u3002\u5bf9\u4e8e\u7ed8\u5236\u591a\u8fb9\u5f62\uff0c\u6211\u4eec\u9700\u8981\u7684\u547d\u4ee4\u5305\u62ec\uff1a</p> <ul> <li><code>createPath()</code> \u2014 \u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u7a7a\u8def\u5f84</li> <li><code>moveTo(x,y)</code> \u2014 \u5c06\u753b\u7b14\u79fb\u52a8\u5230\u70b9(x,y)\uff0c\u800c\u4e0d\u6dfb\u52a0\u7ebf\u6bb5\u5230\u8def\u5f84\u4e2d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u7ed8\u5236\u4efb\u4f55\u4e1c\u897f</li> <li><code>lineTo(x,y)</code> \u2014 \u6dfb\u52a0\u4e00\u4e2a\u7ebf\u6bb5\u5230\u8def\u5f84\u4e2d\uff0c\u8be5\u7ebf\u6bb5\u4ece\u5f53\u524d\u753b\u7b14\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5230\u70b9(x,y)\u7ed3\u675f\uff0c\u5e76\u5c06\u753b\u7b14\u79fb\u52a8\u5230(x,y)</li> <li><code>closePath()</code> \u2014 \u6dfb\u52a0\u4e00\u6761\u7ebf\u6bb5\u4ece\u5f53\u524d\u753b\u7b14\u4f4d\u7f6e\u8fd4\u56de\u5230\u8d77\u59cb\u70b9\uff0c\u9664\u975e\u753b\u7b14\u5df2\u7ecf\u5728\u8d77\u59cb\u70b9\uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u5c01\u95ed\u7684\u8def\u5f84\u3002</li> </ul> <p>\uff08\u5bf9\u4e8e<code>closePath()</code>\uff0c\u6211\u9700\u8981\u5b9a\u4e49\"\u8d77\u59cb\u70b9\"\u3002\u4e00\u4e2a\u8def\u5f84\u53ef\u4ee5\u7531\u591a\u4e2a\"\u5b50\u8def\u5f84\"\u7ec4\u6210\u3002\u4e00\u4e2a\u5b50\u8def\u5f84\u7531\u4e00\u7cfb\u5217\u8fde\u63a5\u7684\u7ebf\u6bb5\u7ec4\u6210\u3002<code>moveTo()</code>\u603b\u662f\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u5b50\u8def\u5f84\u3002<code>closePath()</code>\u7ed3\u675f\u5f53\u524d\u7ebf\u6bb5\u5e76\u9690\u5f0f\u5730\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u3002\u6240\u4ee5\"\u8d77\u59cb\u70b9\"\u6307\u7684\u662f\u5728\u6700\u8fd1\u7684<code>moveTo()</code>\u6216<code>closePath()</code>\u4e4b\u540e\u753b\u7b14\u7684\u4f4d\u7f6e\u3002\uff09</p> <p>\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u8868\u793a\u4e09\u89d2\u5f62\u7684\u8def\u5f84\uff0c\u5176\u9876\u70b9\u5206\u522b\u4e3a(100,100)\u3001(300,100)\u548c(200,200)\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b9e\u73b0\uff1a</p> <pre><code>createPath()\nmoveTo(100, 100)\nlineTo(300, 100)\nlineTo(200, 200)\nclosePath()\n</code></pre> <p>\u6700\u540e\u7684<code>closePath()</code>\u547d\u4ee4\u4e5f\u53ef\u4ee5\u66ff\u6362\u4e3a<code>lineTo(100,100)</code>\uff0c\u5c06\u753b\u7b14\u79fb\u56de\u5230\u7b2c\u4e00\u4e2a\u9876\u70b9\u3002</p> <p>\u8def\u5f84\u8868\u793a\u4e00\u4e2a\u62bd\u8c61\u7684\u51e0\u4f55\u5bf9\u8c61\u3002\u521b\u5efa\u8def\u5f84\u5e76\u4e0d\u4f1a\u4f7f\u5176\u5728\u5c4f\u5e55\u4e0a\u53ef\u89c1\u3002\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u8def\u5f84\uff0c\u4e3a\u4e86\u4f7f\u5176\u53ef\u89c1\uff0c\u6211\u4eec\u9700\u8981\u989d\u5916\u7684\u547d\u4ee4\u6765\u63cf\u8fb9\u548c\u586b\u5145\u8def\u5f84\u3002</p> <p>\u5728\u672c\u8282\u7684\u524d\u9762\u90e8\u5206\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5982\u4f55\u901a\u8fc7\u7ed8\u5236\u4e00\u4e2a\u5177\u6709\u5927\u91cf\u8fb9\u7684\u591a\u8fb9\u5f62\u6765\u8fd1\u4f3c\u692d\u5706\u3002\u5728\u90a3\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u5c06\u6bcf\u6761\u8fb9\u7ed8\u5236\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u6bb5\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u5806\u5355\u72ec\u7684\u7ebf\u6bb5\u800c\u4e0d\u662f\u4e00\u4e2a\u591a\u8fb9\u5f62\u3002\u8fd9\u6837\u7684\u4e1c\u897f\u65e0\u6cd5\u586b\u5145\u3002\u6700\u597d\u7684\u65b9\u6cd5\u662f\u7528\u591a\u8fb9\u5f62\u8def\u5f84\u6765\u8fd1\u4f3c\u692d\u5706\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4ee5\u4e2d\u5fc3\u70b9(x,y)\u548c\u534a\u5f84r1\u548cr2\u7684\u692d\u5706\u6765\u8bf4\uff1a</p> <pre><code>createPath()\nmoveTo(x + r1, y)\nfor i = 1 to numberOfPoints-1\n    angle = i * (2*pi/numberOfLines)\n    lineTo(x + r1*cos(angle), y + r2*sin(angle))\nclosePath()\n</code></pre> <p>\u4f7f\u7528\u8fd9\u4e2a\u8def\u5f84\uff0c\u6211\u4eec\u65e2\u53ef\u4ee5\u7ed8\u5236\u586b\u5145\u7684\u692d\u5706\uff0c\u4e5f\u53ef\u4ee5\u7ed8\u5236\u63cf\u8fb9\u3002\u5373\u4f7f\u6211\u4eec\u53ea\u60f3\u7ed8\u5236\u591a\u8fb9\u5f62\u7684\u8f6e\u5ed3\uff0c\u5c06\u591a\u8fb9\u5f62\u521b\u5efa\u4e3a\u8def\u5f84\u800c\u4e0d\u662f\u7ed8\u5236\u5355\u72ec\u7684\u7ebf\u6bb5\u4e5f\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002\u901a\u8fc7\u8def\u5f84\uff0c\u8ba1\u7b97\u673a\u77e5\u9053\u8fd9\u4e9b\u8fb9\u662f\u5355\u4e2a\u5f62\u72b6\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u63a7\u5236\u76f8\u90bb\u8fb9\u4e4b\u95f4\u7684\"\u8fde\u63a5\"\u7684\u5916\u89c2\uff0c\u6b63\u5982\u672c\u8282\u524d\u9762\u6240\u63d0\u5230\u7684\u3002</p> <p>\u6211\u4e4b\u524d\u63d0\u5230\u8def\u5f84\u53ef\u4ee5\u5305\u542b\u9664\u4e86\u7ebf\u6bb5\u4e4b\u5916\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u6bb5\u3002\u4f8b\u5982\uff0c\u53ef\u80fd\u53ef\u4ee5\u5c06\u5706\u5f27\u4f5c\u4e3a\u4e00\u4e2a\u6bb5\u5305\u542b\u8fdb\u6765\u3002\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u66f2\u7ebf\u662f\u8d1d\u585e\u5c14\u66f2\u7ebf(Bezier curve)\u3002\u8d1d\u585e\u5c14\u66f2\u7ebf\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u975e\u5e38\u901a\u7528\u7684\u66f2\u7ebf\u5f62\u72b6\u3002\u5b83\u4eec\u76f8\u5bf9\u76f4\u89c2\uff0c\u6240\u4ee5\u5e38\u5e38\u5728\u5141\u8bb8\u7528\u6237\u4ea4\u4e92\u5f0f\u8bbe\u8ba1\u66f2\u7ebf\u7684\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002\u6570\u5b66\u4e0a\uff0c\u8d1d\u585e\u5c14\u66f2\u7ebf\u7531\u53c2\u6570\u591a\u9879\u5f0f\u65b9\u7a0b\u5b9a\u4e49\uff0c\u4f46\u4f60\u4e0d\u9700\u8981\u7406\u89e3\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u5c31\u80fd\u4f7f\u7528\u5b83\u4eec\u3002\u5e38\u89c1\u7684\u8d1d\u585e\u5c14\u66f2\u7ebf\u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u5206\u522b\u662f\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u548c\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\uff1b\u5b83\u4eec\u5206\u522b\u7531\u4e09\u6b21\u548c\u4e8c\u6b21\u591a\u9879\u5f0f\u5b9a\u4e49\u3002\u5f53\u4e00\u822c\u672f\u8bed\"\u8d1d\u585e\u5c14\u66f2\u7ebf\"\u88ab\u4f7f\u7528\u65f6\uff0c\u901a\u5e38\u6307\u7684\u662f\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u3002</p> <p>\u4e00\u4e2a\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u7531\u4e24\u4e2a\u7aef\u70b9\u548c\u4e24\u4e2a\u63a7\u5236\u70b9(control points)\u5b9a\u4e49\u3002\u8981\u7406\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6700\u597d\u60f3\u8c61\u4e00\u4e0b\u753b\u7b14\u5982\u4f55\u7ed8\u5236\u66f2\u7ebf\u6bb5\u3002\u753b\u7b14\u4ece\u7b2c\u4e00\u4e2a\u7aef\u70b9\u5f00\u59cb\uff0c\u671d\u7740\u7b2c\u4e00\u4e2a\u63a7\u5236\u70b9\u7684\u65b9\u5411\u3002\u63a7\u5236\u70b9\u4e0e\u7aef\u70b9\u7684\u8ddd\u79bb\u63a7\u5236\u4e86\u753b\u7b14\u5f00\u59cb\u7ed8\u5236\u66f2\u7ebf\u7684\u901f\u5ea6\u3002\u7b2c\u4e8c\u4e2a\u63a7\u5236\u70b9\u63a7\u5236\u4e86\u753b\u7b14\u5728\u5230\u8fbe\u66f2\u7ebf\u7684\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u65f6\u7684\u65b9\u5411\u548c\u901f\u5ea6\u3002\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\u7684\u4e09\u6b21\u66f2\u7ebf\u662f\u552f\u4e00\u7684\u3002</p> <p> </p> <p>\u4e0a\u56fe\u663e\u793a\u4e86\u4e09\u4e2a\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u3002\u53f3\u4fa7\u7684\u4e24\u4e2a\u66f2\u7ebf\u6bb5\u5728\u4e00\u4e2a\u7aef\u70b9\u5904\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u4e00\u4e2a\u66f4\u957f\u7684\u66f2\u7ebf\u3002\u66f2\u7ebf\u4ee5\u7c97\u9ed1\u7ebf\u7ed8\u5236\u3002\u7aef\u70b9\u663e\u793a\u4e3a\u9ed1\u8272\u70b9\uff0c\u63a7\u5236\u70b9\u663e\u793a\u4e3a\u84dd\u8272\u65b9\u5757\uff0c\u6bcf\u4e2a\u63a7\u5236\u70b9\u4e0e\u76f8\u5e94\u7684\u7aef\u70b9\u4e4b\u95f4\u7528\u7ec6\u7ea2\u7ebf\u8fde\u63a5\u3002\uff08\u901a\u5e38\uff0c\u53ea\u4f1a\u7ed8\u5236\u66f2\u7ebf\uff0c\u9664\u975e\u5728\u5141\u8bb8\u7528\u6237\u624b\u52a8\u7f16\u8f91\u66f2\u7ebf\u7684\u754c\u9762\u4e2d\u3002\uff09\u8bf7\u6ce8\u610f\uff0c\u5728\u4e00\u4e2a\u7aef\u70b9\u5904\uff0c\u66f2\u7ebf\u6bb5\u4e0e\u8fde\u63a5\u7aef\u70b9\u548c\u63a7\u5236\u70b9\u7684\u7ebf\u76f8\u5207\u3002\u8bf7\u6ce8\u610f\uff0c\u4e24\u4e2a\u66f2\u7ebf\u6bb5\u76f8\u4ea4\u5904\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u5c16\u9510\u7684\u70b9\u6216\u62d0\u89d2\u3002\u7136\u800c\uff0c\u5982\u679c\u9009\u62e9\u4e86\u9002\u5f53\u7684\u63a7\u5236\u70b9\uff0c\u4e00\u4e2a\u6bb5\u4f1a\u5e73\u6ed1\u5730\u8fc7\u6e21\u5230\u4e0b\u4e00\u4e2a\u6bb5\u3002</p> <p>\u901a\u8fc7\u4e00\u4e9b\u5b9e\u9645\u64cd\u4f5c\u7ecf\u9a8c\uff0c\u8fd9\u4e00\u5207\u90fd\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u8fd9\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\u5141\u8bb8\u60a8\u901a\u8fc7\u62d6\u52a8\u7aef\u70b9\u548c\u63a7\u5236\u70b9\u6765\u7f16\u8f91\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\uff1a</p> <p></p> <p>\u5f53\u5c06\u4e00\u4e2a\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\u65f6\uff0c\u8def\u5f84\u7684\u5f53\u524d\u753b\u7b14\u4f4d\u7f6e\u5145\u5f53\u6bb5\u7684\u7b2c\u4e00\u4e2a\u7aef\u70b9\u3002\u6dfb\u52a0\u6bb5\u5230\u8def\u5f84\u7684\u547d\u4ee4\u5fc5\u987b\u6307\u5b9a\u4e24\u4e2a\u63a7\u5236\u70b9\u548c\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u3002\u4e00\u4e2a\u5178\u578b\u7684\u547d\u4ee4\u53ef\u80fd\u662f</p> <pre><code>cubicCurveTo( cx1, cy1, cx2, cy2, x, y )\n</code></pre> <p>\u8fd9\u5c06\u4ece\u5f53\u524d\u4f4d\u7f6e\u5230\u70b9(x,y)\u6dfb\u52a0\u4e00\u6761\u66f2\u7ebf\uff0c\u4f7f\u7528(cx1,cy1)\u548c(cx2,cy2)\u4f5c\u4e3a\u63a7\u5236\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u753b\u7b14\u79bb\u5f00\u5f53\u524d\u4f4d\u7f6e\u671d\u5411(cx1,cy1)\uff0c\u5e76\u4ee5(cx2,cy2)\u7684\u65b9\u5411\u5230\u8fbe\u70b9(x,y)\u3002</p> <p>\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u4e0e\u4e09\u6b21\u7248\u672c\u7c7b\u4f3c\uff0c\u4f46\u5728\u4e8c\u6b21\u60c5\u51b5\u4e0b\uff0c\u6bb5\u53ea\u6709\u4e00\u4e2a\u63a7\u5236\u70b9\u3002\u66f2\u7ebf\u79bb\u5f00\u7b2c\u4e00\u4e2a\u7aef\u70b9\u671d\u7740\u63a7\u5236\u70b9\u7684\u65b9\u5411\uff0c\u7136\u540e\u4ece\u63a7\u5236\u70b9\u7684\u65b9\u5411\u5230\u8fbe\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u66f2\u7ebf\u5c06\u662f\u4e00\u4e2a\u629b\u7269\u7ebf\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u540c\u6837\uff0c\u901a\u8fc7\u4e00\u4e9b\u5b9e\u9645\u64cd\u4f5c\u7ecf\u9a8c\uff0c\u8fd9\u5c06\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u8bf7\u5c1d\u8bd5\u8fd9\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\uff1a</p> <p></p> <p>It is impossible for a graphics API to include every possible shape as a basic shape, but there is usually some way to create more complex shapes. For example, consider polygons. A polygon is a closed shape consisting of a sequence of line segments. Each line segment is joined to the next at its endpoint, and the last line segment connects back to the first. The endpoints are called the vertices of the polygon, and a polygon can be defined by listing its vertices.</p> <p>In a regular polygon, all the sides are the same length and all the angles between sides are equal. Squares and equilateral triangles are examples of regular polygons. A convex polygon has the property that whenever two points are inside or on the polygon, then the entire line segment between those points is also inside or on the polygon. Intuitively, a convex polygon has no \"indentations\" along its boundary. (Concavity can be a property of any shape, not just of polygons.)</p> <p> </p> <p>Sometimes, polygons are required to be \"simple,\" meaning that the polygon has no self-intersections. That is, all the vertices are different, and a side can only intersect another side at its endpoints. And polygons are usually required to be \"planar,\" meaning that all the vertices lie in the same plane. (Of course, in 2D graphics, everything lies in the same plane, so this is not an issue. However, it does become an issue in 3D.)</p> <p>How then should we draw polygons? That is, what capabilities would we like to have in a graphics API for drawing them. One possibility is to have commands for stroking and for filling polygons, where the vertices of the polygon are given as an array of points or as an array of x-coordinates plus an array of y-coordinates. In fact, that is sometimes done; for example, the Java graphics API includes such commands. Another, more flexible, approach is to introduce the idea of a \"path.\" Java, SVG, and the HTML canvas API all support this idea. A path is a general shape that can include both line segments and curved segments. Segments can, but don't have to be, connected to other segments at their endpoints. A path is created by giving a series of commands that tell, essentially, how a pen would be moved to draw the path. While a path is being created, there is a point that represents the pen's current location. There will be a command for moving the pen without drawing, and commands for drawing various kinds of segments. For drawing polygons, we need commands such as</p> <ul> <li><code>createPath()</code> \u2014 start a new, empty path</li> <li><code>moveTo(x,y)</code> \u2014 move the pen to the point (x,y), without adding a segment to the path; that is, without drawing anything</li> <li><code>lineTo(x,y)</code> \u2014 add a line segment to the path that starts at the current pen location and ends at the point (x,y), and move the pen to (x,y)</li> <li><code>closePath()</code> \u2014 add a line segment from the current pen location back to the starting point, unless the pen is already there, producing a closed path.</li> </ul> <p>(For closePath, I need to define \"starting point.\" A path can be made up of \"subpaths\" A subpath consists of a series of connected segments. A moveTo always starts a new subpath. A closePath ends the current segment and implicitly starts a new one. So \"starting point\" means the position of the pen after the most recent moveTo or closePath.)</p> <p>Suppose that we want a path that represents the triangle with vertices at (100,100), (300,100), and (200, 200). We can do that with the commands</p> <pre><code>createPath()\nmoveTo( 100, 100 )\nlineTo( 300, 100 )\nlineTo( 200, 200 )\nclosePath()\n</code></pre> <p>The closePath command at the end could be replaced by lineTo(100,100), to move the pen back to the first vertex.</p> <p>A path represents an abstract geometric object. Creating one does not make it visible on the screen. Once we have a path, to make it visible we need additional commands for stroking and filling the path.</p> <p>Earlier in this section, we saw how to approximate an oval by drawing, in effect, a polygon with a large number of sides. In that example, I drew each side as a separate line segment, so we really had a bunch of separate lines rather than a polygon. There is no way to fill such a thing. It would be better to approximate the oval with a polygonal path. For an oval with center (x,y) and radii r1 and r2:</p> <pre><code>createPath()\nmoveTo( x + r1, y )\nfor i = 1 to numberOfPoints-1\n    angle = i * (2*pi/numberOfLines)\n    lineTo( x + r1*cos(angle), y + r2*sin(angle) )\nclosePath()\n</code></pre> <p>Using this path, we could draw a filled oval as well as stroke it. Even if we just want to draw the outline of a polygon, it's still better to create the polygon as a path rather than to draw the line segments as separate sides. With a path, the computer knows that the sides are part of single shape. This makes it possible to control the appearance of the \"join\" between consecutive sides, as noted earlier in this section.</p> <p>I noted above that a path can contain other kinds of segments besides lines. For example, it might be possible to include an arc of a circle as a segment. Another type of curve is a Bezier curve. Bezier curves can be used to create very general curved shapes. They are fairly intuitive, so that they are often used in programs that allow users to design curves interactively. Mathematically, Bezier curves are defined by parametric polynomial equations, but you don't need to understand what that means to use them. There are two kinds of Bezier curve in common use, cubic Bezier curves and quadratic Bezier curves; they are defined by cubic and quadratic polynomials respectively. When the general term \"Bezier curve\" is used, it usually refers to cubic Bezier curves.</p> <p>A cubic Bezier curve segment is defined by the two endpoints of the segment together with two control points. To understand how it works, it's best to think about how a pen would draw the curve segment. The pen starts at the first endpoint, headed in the direction of the first control point. The distance of the control point from the endpoint controls the speed of the pen as it starts drawing the curve. The second control point controls the direction and speed of the pen as it gets to the second endpoint of the curve. There is a unique cubic curve that satisfies these conditions.</p> <p> </p> <p>The illustration above shows three cubic Bezier curve segments. The two curve segments on the right are connected at an endpoint to form a longer curve. The curves are drawn as thick black lines. The endpoints are shown as black dots and the control points as blue squares, with a thin red line connecting each control point to the corresponding endpoint. (Ordinarily, only the curve would be drawn, except in an interface that lets the user edit the curve by hand.) Note that at an endpoint, the curve segment is tangent to the line that connects the endpoint to the control point. Note also that there can be a sharp point or corner where two curve segments meet. However, one segment will merge smoothly into the next if control points are properly chosen.</p> <p>This will all be easier to understand with some hands-on experience. This interactive demo lets you edit cubic Bezier curve segments by dragging their endpoints and control points:</p> <p></p> <p>When a cubic Bezier curve segment is added to a path, the path's current pen location acts as the first endpoint of the segment. The command for adding the segment to the path must specify the two control points and the second endpoint. A typical command might look like</p> <pre><code>cubicCurveTo( cx1, cy1, cx2, cy2, x, y )\n</code></pre> <p>This would add a curve from the current location to point (x,y), using (cx1,cy1) and (cx2,cy2) as the control points. That is, the pen leaves the current location heading towards (cx1,cy1), and it ends at the point (x,y), arriving there from the direction of (cx2,cy2).</p> <p>Quadratic Bezier curve segments are similar to the cubic version, but in the quadratic case, there is only one control point for the segment. The curve leaves the first endpoint heading in the direction of the control point, and it arrives at the second endpoint coming from the direction of the control point. The curve in this case will be an arc of a parabola.</p> <p>Again, this is easier to understand this with some hands-on experience. Try this interactive demo:</p> <p></p>"},{"location":"cn/c2/s3/","title":"\u7b2c3\u8282: \u53d8\u6362","text":"<p>Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u7b2c2.1\u8282\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u5750\u6807\u7cfb\u7edf\u4ee5\u53ca\u5982\u4f55\u5c06\u5750\u6807\u4ece\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u7684\u53ef\u80fd\u6027\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u4ed4\u7ec6\u5730\u63a2\u8ba8\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u5e76\u4e14\u8fd8\u5c06\u770b\u770b\u51e0\u4f55\u53d8\u6362\u5982\u4f55\u7528\u4e8e\u5c06\u56fe\u5f62\u5bf9\u8c61\u653e\u7f6e\u5230\u4e00\u4e2a\u5750\u6807\u7cfb\u7edf\u4e2d\u3002</p> <p>In Section 2.1, we discussed coordinate systems and how it is possible to transform coordinates from one coordinate system to another. In this section, we'll look at that idea a little more closely, and also look at how geometric transformations can be used to place graphics objects into a coordinate system.</p>"},{"location":"cn/c2/s3/#231--\u89c6\u53e3\u548c\u5efa\u6a21","title":"2.3.1  \u89c6\u53e3\u548c\u5efa\u6a21","text":"<p>Viewing and Modeling</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u5178\u578b\u7684\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u50cf\u7d20\u6784\u6210\u7684\u77e9\u5f62\uff0c\u5176\u81ea\u7136\u50cf\u7d20\u5750\u6807\u7528\u4e8e\u663e\u793a\u56fe\u50cf\u3002\u8fd9\u4e2a\u77e9\u5f62\u79f0\u4e3a\u89c6\u53e3(viewport)\u3002\u6211\u4eec\u8fd8\u6709\u4e00\u7ec4\u51e0\u4f55\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5728\u53ef\u80fd\u4e0d\u540c\u7684\u5750\u6807\u7cfb\u4e2d\u5b9a\u4e49\uff0c\u901a\u5e38\u662f\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u800c\u4e0d\u662f\u6574\u6570\u3002\u8fd9\u4e9b\u5bf9\u8c61\u7ec4\u6210\u4e86\u6211\u4eec\u60f3\u8981\u67e5\u770b\u7684\u201c\u573a\u666f\u201d\u6216\u201c\u4e16\u754c\u201d\uff0c\u7528\u4e8e\u5b9a\u4e49\u573a\u666f\u7684\u5750\u6807\u79f0\u4e3a\u4e16\u754c\u5750\u6807(world coordinates)\u3002</p> <p>\u5bf9\u4e8e\u4e8c\u7ef4\u56fe\u5f62\uff0c\u4e16\u754c\u4f4d\u4e8e\u4e00\u4e2a\u5e73\u9762\u4e0a\u3002\u4e0d\u53ef\u80fd\u663e\u793a\u6574\u4e2a\u65e0\u9650\u5e73\u9762\u7684\u56fe\u50cf\u3002\u6211\u4eec\u9700\u8981\u5728\u5e73\u9762\u4e0a\u9009\u62e9\u4e00\u4e9b\u77e9\u5f62\u533a\u57df\u6765\u663e\u793a\u5728\u56fe\u50cf\u4e2d\u3002\u8ba9\u6211\u4eec\u79f0\u8fd9\u4e2a\u77e9\u5f62\u533a\u57df\u4e3a\u7a97\u53e3\uff0c\u6216\u79f0\u4e3a\u89c6\u7a97(window)\u3002\u5750\u6807\u53d8\u6362\u7528\u4e8e\u5c06\u7a97\u53e3\u6620\u5c04\u5230\u89c6\u53e3\u4e2d\u3002</p> <p> </p> <p>\u5728\u8fd9\u4e2a\u56fe\u793a\u4e2d\uff0cT\u4ee3\u8868\u5750\u6807\u53d8\u6362\u3002T\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u7a97\u53e3\u4e2d\u7684\u4e16\u754c\u5750\u6807(x,y)\u5e76\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u89c6\u53e3\u4e2d\u7684\u50cf\u7d20\u5750\u6807T(x,y)\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u4ee5\u68c0\u67e5\u5230\uff1a</p> <pre><code>T(x,y) = ( 800*(x+4)/8, 600*(3-y)/6 )\n</code></pre> <p>\u770b\u4e00\u4e0b\u7a97\u53e3\u4e2d\u89d2\u843d\u5750\u6807\u4e3a(-1,2)\u548c(3,-1)\u7684\u77e9\u5f62\u3002\u5f53\u8fd9\u4e2a\u77e9\u5f62\u5728\u89c6\u53e3\u4e2d\u663e\u793a\u65f6\uff0c\u5b83\u5c06\u663e\u793a\u4e3a\u5177\u6709\u89d2\u843dT(-1,2)\u548cT(3,-1)\u7684\u77e9\u5f62\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cT(-1,2) = (300,100) \u4ee5\u53ca T(3,-1) = (700,400)\u3002</p> <p>\u6211\u4eec\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u5750\u6807\u53d8\u6362\u662f\u56e0\u4e3a\u5b83\u5141\u8bb8\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5bf9\u4e8e\u63cf\u8ff0\u6211\u4eec\u60f3\u8981\u663e\u793a\u7684\u573a\u666f\u800c\u8a00\u662f\u81ea\u7136\u7684\u4e16\u754c\u5750\u6807\u7cfb\uff0c\u800c\u8fd9\u6bd4\u76f4\u63a5\u4f7f\u7528\u89c6\u53e3\u5750\u6807\u66f4\u5bb9\u6613\u3002\u6cbf\u7740\u540c\u6837\u7684\u601d\u8def\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5b9a\u4e49\u4e00\u4e9b\u590d\u6742\u7684\u5bf9\u8c61\uff0c\u5e76\u5047\u8bbe\u5728\u6211\u4eec\u7684\u573a\u666f\u4e2d\u4f1a\u6709\u51e0\u4e2a\u8be5\u5bf9\u8c61\u7684\u526f\u672c\u3002\u6216\u8005\u4e5f\u8bb8\u6211\u4eec\u6b63\u5728\u5236\u4f5c\u4e00\u4e2a\u52a8\u753b\uff0c\u5e76\u4e14\u5e0c\u671b\u8be5\u5bf9\u8c61\u5728\u4e0d\u540c\u5e27\u4e2d\u6709\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u5e0c\u671b\u9009\u62e9\u4e00\u4e9b\u65b9\u4fbf\u7684\u5750\u6807\u7cfb\uff0c\u5e76\u5c06\u5176\u7528\u4e8e\u4e00\u52b3\u6c38\u9038\u5730\u5b9a\u4e49\u5bf9\u8c61\u3002\u6211\u4eec\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u5750\u6807\u79f0\u4e3a\u8be5\u5bf9\u8c61\u7684\u5bf9\u8c61\u5750\u6807(object coordinates)\u3002\u5f53\u6211\u4eec\u60f3\u8981\u5c06\u5bf9\u8c61\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u5bf9\u8c61\u5750\u6807\u8f6c\u6362\u4e3a\u6211\u4eec\u7528\u4e8e\u573a\u666f\u7684\u4e16\u754c\u5750\u6807\u7cfb\u3002\u6211\u4eec\u9700\u8981\u7684\u8f6c\u6362\u79f0\u4e3a\u5efa\u6a21\u53d8\u6362(modeling transformation)\u3002\u8fd9\u5f20\u56fe\u7247\u8bf4\u660e\u4e86\u4e00\u4e2a\u5728\u5176\u81ea\u5df1\u7684\u5bf9\u8c61\u5750\u6807\u7cfb\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7\u4e09\u79cd\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u6620\u5c04\u5230\u4e16\u754c\u5750\u6807\u7cfb\u4e2d\uff1a</p> <p> </p> <p>\u8bb0\u4f4f\uff0c\u4e3a\u4e86\u67e5\u770b\u573a\u666f\uff0c\u8fd8\u4f1a\u6709\u53e6\u4e00\u4e2a\u8f6c\u6362\uff0c\u5c06\u5bf9\u8c61\u4ece\u4e16\u754c\u5750\u6807\u4e2d\u7684\u89c6\u7a97\u6620\u5c04\u5230\u89c6\u53e3\u4e2d\u3002</p> <p>\u73b0\u5728\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u89c6\u7a97\u7684\u9009\u62e9\u51b3\u5b9a\u4e86\u56fe\u50cf\u4e2d\u663e\u793a\u573a\u666f\u7684\u54ea\u4e00\u90e8\u5206\u3002\u79fb\u52a8\u3001\u8c03\u6574\u5927\u5c0f\uff0c\u751a\u81f3\u65cb\u8f6c\u7a97\u53e3\u90fd\u4f1a\u7ed9\u573a\u666f\u5e26\u6765\u4e0d\u540c\u7684\u89c6\u56fe\u3002\u5047\u8bbe\u6211\u4eec\u5236\u4f5c\u4e86\u51e0\u5f20\u540c\u4e00\u8f86\u6c7d\u8f66\u7684\u56fe\u7247\uff1a</p> <p> </p> <p>\u8fd9\u5f20\u56fe\u7247\u4e0a\u90e8\u7684\u56fe\u50cf\u548c\u5de6\u4e0b\u89d2\u7684\u56fe\u50cf\u4e4b\u95f4\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u5b9e\u9645\u4e0a\uff0c\u6709\u4e24\u79cd\u53ef\u80fd\u6027\uff1a\u8981\u4e48\u6c7d\u8f66\u5411\u53f3\u79fb\u52a8\uff0c\u8981\u4e48\u5b9a\u4e49\u573a\u666f\u7684\u89c6\u7a97\u5411\u5de6\u79fb\u52a8\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u8bf7\u786e\u4fdd\u4f60\u7406\u89e3\u4e86\u5b83\u3002\uff08\u8bd5\u8bd5\u7528\u4f60\u7684\u624b\u673a\u76f8\u673a\u3002\u628a\u5b83\u5bf9\u51c6\u4e00\u4e9b\u7269\u4f53\uff0c\u5411\u5de6\u8d70\u4e00\u6b65\uff0c\u6ce8\u610f\u4e00\u4e0b\u76f8\u673a\u53d6\u666f\u5668\u4e2d\u7684\u7269\u4f53\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff1a\u5b83\u4eec\u5728\u7167\u7247\u4e2d\u5411\u53f3\u79fb\u52a8\uff01\uff09\u540c\u6837\uff0c\u5728\u9876\u90e8\u56fe\u7247\u548c\u5e95\u90e8\u4e2d\u95f4\u7684\u56fe\u7247\u4e4b\u95f4\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u8981\u4e48\u6c7d\u8f66\u9006\u65f6\u9488\u65cb\u8f6c\uff0c\u8981\u4e48\u7a97\u53e3\u987a\u65f6\u9488\u65cb\u8f6c\u3002\uff08\u518d\u6b21\u5c1d\u8bd5\u4f7f\u7528\u76f8\u673a\u2014\u2014\u4f60\u53ef\u80fd\u60f3\u62cd\u4e24\u5f20\u5b9e\u9645\u7167\u7247\u4ee5\u4fbf\u6bd4\u8f83\u3002\uff09\u6700\u540e\uff0c\u4ece\u9876\u90e8\u56fe\u7247\u5230\u53f3\u4e0b\u89d2\u7684\u56fe\u7247\u7684\u53d8\u5316\u53ef\u80fd\u662f\u56e0\u4e3a\u6c7d\u8f66\u53d8\u5c0f\u4e86\uff0c\u4e5f\u53ef\u80fd\u662f\u56e0\u4e3a\u7a97\u53e3\u53d8\u5927\u4e86\u3002\uff08\u5728\u4f60\u7684\u76f8\u673a\u4e0a\uff0c\u66f4\u5927\u7684\u7a97\u53e3\u610f\u5473\u7740\u4f60\u770b\u5230\u4e86\u66f4\u5927\u7684\u89c6\u91ce\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u7ed9\u76f8\u673a\u52a0\u4e0a\u53d8\u7126\u6216\u8005\u4ece\u4f60\u6b63\u5728\u89c2\u770b\u7684\u7269\u4f53\u540e\u9000\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\uff09</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u603b\u4f53\u6982\u5ff5\u3002\u5f53\u6211\u4eec\u4fee\u6539\u89c6\u7a97\u65f6\uff0c\u6211\u4eec\u6539\u53d8\u4e86\u5e94\u7528\u4e8e\u89c6\u53e3\u7684\u5750\u6807\u7cfb\u7edf\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u8fd9\u7b49\u540c\u4e8e\u4fdd\u6301\u8be5\u5750\u6807\u7cfb\u7edf\u4e0d\u53d8\uff0c\u800c\u662f\u79fb\u52a8\u573a\u666f\u4e2d\u7684\u5bf9\u8c61\u3002\u4e0d\u8fc7\uff0c\u4e3a\u4e86\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u83b7\u5f97\u76f8\u540c\u7684\u6548\u679c\uff0c\u60a8\u5fc5\u987b\u5bf9\u5bf9\u8c61\u5e94\u7528\u76f8\u53cd\u7684\u53d8\u6362\uff08\u4f8b\u5982\uff0c\u5411\u5de6\u79fb\u52a8\u7a97\u53e3\u7b49\u540c\u4e8e\u5c06\u5bf9\u8c61\u5411\u53f3\u79fb\u52a8\uff09\u3002\u56e0\u6b64\uff0c\u5728\u8f6c\u6362\u7a97\u53e3\u548c\u8f6c\u6362\u5bf9\u8c61\u4e4b\u95f4\u5e76\u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002\u5728\u6570\u5b66\u4e0a\uff0c\u60a8\u901a\u8fc7\u5728\u67d0\u4e2a\u81ea\u7136\u5750\u6807\u7cfb\u7edf\u4e2d\u7ed9\u51fa\u5750\u6807\u6765\u6307\u5b9a\u51e0\u4f55\u57fa\u5143\uff0c\u8ba1\u7b97\u673a\u4f1a\u5bf9\u8fd9\u4e9b\u5750\u6807\u5e94\u7528\u4e00\u7cfb\u5217\u53d8\u6362\uff0c\u6700\u7ec8\u4ea7\u751f\u7528\u4e8e\u5728\u56fe\u50cf\u4e2d\u5b9e\u9645\u7ed8\u5236\u57fa\u5143\u7684\u5750\u6807\u3002\u60a8\u4f1a\u8ba4\u4e3a\u5176\u4e2d\u4e00\u4e9b\u53d8\u6362\u662f\u5efa\u6a21\u53d8\u6362\uff0c\u4e00\u4e9b\u662f\u5750\u6807\u53d8\u6362\uff0c\u4f46\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u8fd9\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u5b9e\u65f6\u6f14\u793a\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u7406\u89e3\u5efa\u6a21\u53d8\u6362\u548c\u89c6\u53e3\u53d8\u6362\u4e4b\u95f4\u7684\u7b49\u4ef7\u6027\u3002\u6ed1\u5757\u63a7\u5236\u5e94\u7528\u4e8e\u56fe\u7247\u4e2d\u5bf9\u8c61\u7684\u53d8\u6362\u3002\u5728\u6f14\u793a\u7684\u5e95\u90e8\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u8f83\u5927\u7684\u89c6\u56fe\uff0c\u5176\u4e2d\u4e0a\u90e8\u56fe\u50cf\u7684\u89c6\u53e3\u88ab\u8868\u793a\u4e3a\u534a\u900f\u660e\u7684\u9ed1\u8272\u77e9\u5f62\u3002\u9605\u8bfb\u6f14\u793a\u4e2d\u7684\u5e2e\u52a9\u6587\u672c\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002</p> <p></p> <p>\u6211\u4eec\u7a0d\u540e\u4f1a\u5728\u4e66\u4e2d\u591a\u6b21\u56de\u5230\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u51e0\u4f55\u53d8\u6362\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u7684\u4e00\u4e2a\u6838\u5fc3\u6982\u5ff5\u3002\u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u770b\u770b\u4e00\u4e9b\u57fa\u672c\u7c7b\u578b\u7684\u53d8\u6362\u3002\u6211\u4eec\u5728\u4e8c\u7ef4\u56fe\u5f62\u4e2d\u5c06\u4f7f\u7528\u7684\u53d8\u6362\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>x1 = a*x + b*y + e\ny1 = c*x + d*y + f\n</code></pre> <p>\u5176\u4e2d (x,y) \u8868\u793a\u53d8\u6362\u5e94\u7528\u524d\u7684\u67d0\u4e00\u70b9\u7684\u5750\u6807\uff0c(x1,y1) \u662f\u53d8\u6362\u540e\u7684\u5750\u6807\u3002\u8fd9\u4e2a\u53d8\u6362\u7531\u516d\u4e2a\u5e38\u6570 a\u3001b\u3001c\u3001d\u3001e \u548c f \u5b9a\u4e49\u3002\u6ce8\u610f\uff0c\u8fd9\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u51fd\u6570 T\uff0c\u5176\u4e2d</p> <pre><code>T(x,y) = ( a*x + b*y + e, c*x + d*y + f )\n</code></pre> <p>\u8fd9\u79cd\u5f62\u5f0f\u7684\u53d8\u6362\u79f0\u4e3a\u4eff\u5c04\u53d8\u6362\u3002\u4eff\u5c04\u53d8\u6362\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\u5f53\u5b83\u5e94\u7528\u4e8e\u4e24\u6761\u5e73\u884c\u7ebf\u65f6\uff0c\u53d8\u6362\u540e\u7684\u7ebf\u4e5f\u5c06\u662f\u5e73\u884c\u7684\u3002\u6b64\u5916\uff0c\u5982\u679c\u5c06\u4e00\u4e2a\u4eff\u5c04\u53d8\u6362\u8ddf\u968f\u53e6\u4e00\u4e2a\u4eff\u5c04\u53d8\u6362\uff0c\u7ed3\u679c\u4ecd\u7136\u662f\u4e00\u4e2a\u4eff\u5c04\u53d8\u6362\u3002</p> <p>In a typical application, we have a rectangle made of pixels, with its natural pixel coordinates, where an image will be displayed. This rectangle will be called the viewport. We also have a set of geometric objects that are defined in a possibly different coordinate system, generally one that uses real-number coordinates rather than integers. These objects make up the \"scene\" or \"world\" that we want to view, and the coordinates that we use to define the scene are called world coordinates.</p> <p>For 2D graphics, the world lies in a plane. It's not possible to show a picture of the entire infinite plane. We need to pick some rectangular area in the plane to display in the image. Let's call that rectangular area the window, or view window. A coordinate transform is used to map the window to the viewport.</p> <p> </p> <p>In this illustration, T represents the coordinate transformation. T is a function that takes world coordinates (x,y) in some window and maps them to pixel coordinates T(x,y) in the viewport. (I've drawn the viewport and window with different sizes to emphasize that they are not the same thing, even though they show the same objects, but in fact they don't even exist in the same space, so it doesn't really make sense to compare their sizes.) In this example, as you can check,</p> <pre><code>T(x,y) = ( 800*(x+4)/8, 600*(3-y)/6 )\n</code></pre> <p>Look at the rectangle with corners at (-1,2) and (3,-1) in the window. When this rectangle is displayed in the viewport, it is displayed as the rectangle with corners T(-1,2) and T(3,-1). In this example, T(-1,2) = (300,100) and T(3,-1) = (700,400).</p> <p>We use coordinate transformations in this way because it allows us to choose a world coordinate system that is natural for describing the scene that we want to display, and it is easier to do that than to work directly with viewport coordinates. Along the same lines, suppose that we want to define some complex object, and suppose that there will be several copies of that object in our scene. Or maybe we are making an animation, and we would like the object to have different positions in different frames. We would like to choose some convenient coordinate system and use it to define the object once and for all. The coordinates that we use to define an object are called object coordinates for the object. When we want to place the object into a scene, we need to transform the object coordinates that we used to define the object into the world coordinate system that we are using for the scene. The transformation that we need is called a modeling transformation. This picture illustrates an object defined in its own object coordinate system and then mapped by three different modeling transformations into the world coordinate system:</p> <p> </p> <p>Remember that in order to view the scene, there will be another transformation that maps the object from a view window in world coordinates into the viewport.</p> <p>Now, keep in mind that the choice of a view window tells which part of the scene is shown in the image. Moving, resizing, or even rotating the window will give a different view of the scene. Suppose we make several images of the same car:</p> <p> </p> <p>What happened between making the top image in this illustration and making the image on the bottom left? In fact, there are two possibilities: Either the car was moved to the right, or the view window that defines the scene was moved to the left. This is important, so be sure you understand it. (Try it with your cell phone camera. Aim it at some objects, take a step to the left, and notice what happens to the objects in the camera's viewfinder: They move to the right in the picture!) Similarly, what happens between the top picture and the middle picture on the bottom? Either the car rotated counterclockwise, or the window was rotated clockwise. (Again, try it with a camera\u2014you might want to take two actual photos so that you can compare them.) Finally, the change from the top picture to the one on the bottom right could happen because the car got smaller or because the window got larger. (On your camera, a bigger window means that you are seeing a larger field of view, and you can get that by applying a zoom to the camera or by backing up away from the objects that you are viewing.)</p> <p>There is an important general idea here. When we modify the view window, we change the coordinate system that is applied to the viewport. But in fact, this is the same as leaving that coordinate system in place and moving the objects in the scene instead. Except that to get the same effect in the final image, you have to apply the opposite transformation to the objects (for example, moving the window to the left is equivalent to moving the objects to the right). So, there is no essential distinction between transforming the window and transforming the object. Mathematically, you specify a geometric primitive by giving coordinates in some natural coordinate system, and the computer applies a sequence of transformations to those coordinates to produce, in the end, the coordinates that are used to actually draw the primitive in the image. You will think of some of those transformations as modeling transforms and some as coordinate transforms, but to the computer, it's all the same.</p> <p>Here is a live demo that can help you to understand the equivalence between modeling transformations and viewport transformations. The sliders control transformations that are applied to the objects in the picture. In the lower section of the demo, you see a larger view in which the viewport for the upper image is represented as a translucent black rectangle. Read the help text in the demo for more information.</p> <p></p> <p>We will return to this idea several times later in the book, but in any case, you can see that geometric transforms are a central concept in computer graphics. Let's look at some basic types of transformation in more detail. The transforms we will use in 2D graphics can be written in the form</p> <pre><code>x1 = a*x + b*y + e\ny1 = c*x + d*y + f\n</code></pre> <p>where (x,y) represents the coordinates of some point before the transformation is applied, and (x1,y1) are the transformed coordinates. The transform is defined by the six constants a, b, c, d, e, and f. Note that this can be written as a function T, where</p> <pre><code>T(x,y) = ( a*x + b*y + e, c*x + d*y + f )\n</code></pre> <p>A transformation of this form is called an affine transform. An affine transform has the property that, when it is applied to two parallel lines, the transformed lines will also be parallel. Also, if you follow one affine transform by another affine transform, the result is again an affine transform.</p>"},{"location":"cn/c2/s3/#232--\u5e73\u79fb","title":"2.3.2  \u5e73\u79fb","text":"<p>Translation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5e73\u79fb\u53d8\u6362\u7b80\u5355\u5730\u5c06\u6bcf\u4e2a\u70b9\u6c34\u5e73\u79fb\u52a8\u4e00\u5b9a\u91cf\uff0c\u5782\u76f4\u79fb\u52a8\u4e00\u5b9a\u91cf\u3002\u5982\u679c (x,y) \u662f\u539f\u59cb\u70b9\uff0c(x1,y1) \u662f\u53d8\u6362\u540e\u7684\u70b9\uff0c\u90a3\u4e48\u5e73\u79fb\u7684\u516c\u5f0f\u4e3a</p> <pre><code>x1 = x + e\ny1 = y + f\n</code></pre> <p>\u5176\u4e2d e \u662f\u70b9\u6c34\u5e73\u79fb\u52a8\u7684\u5355\u4f4d\u6570\uff0cf \u662f\u5782\u76f4\u79fb\u52a8\u7684\u5355\u4f4d\u6570\u3002\uff08\u56e0\u6b64\uff0c\u5bf9\u4e8e\u5e73\u79fb\uff0c\u4eff\u5c04\u53d8\u6362\u7684\u4e00\u822c\u516c\u5f0f\u4e2d a = d = 1\uff0cb = c = 0\u3002\uff09\u4e00\u4e2a\u4e8c\u7ef4\u56fe\u5f62\u7cfb\u7edf\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u7c7b\u4f3c\u4e8e</p> <pre><code>translate( e, f )\n</code></pre> <p>\u7684\u51fd\u6570\u6765\u5e94\u7528\u5e73\u79fb\u53d8\u6362\u3002\u5e73\u79fb\u5c06\u5e94\u7528\u4e8e\u5728\u7ed9\u51fa\u547d\u4ee4\u540e\u7ed8\u5236\u7684\u6240\u6709\u5185\u5bb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6240\u6709\u540e\u7eed\u7684\u7ed8\u56fe\u64cd\u4f5c\uff0ce \u5c06\u88ab\u6dfb\u52a0\u5230 x \u5750\u6807\uff0cf \u5c06\u88ab\u6dfb\u52a0\u5230 y \u5750\u6807\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002\u5047\u8bbe\u4f60\u4f7f\u7528\u4ee5 (0,0) \u4e3a\u4e2d\u5fc3\u7684\u5750\u6807\u7ed8\u5236\u4e00\u4e2a\u201cF\u201d\u3002\u5982\u679c\u5728\u7ed8\u5236\u201cF\u201d\u4e4b\u524d\u8bf4 translate(4,2)\uff0c\u90a3\u4e48\u5728\u5b9e\u9645\u4f7f\u7528\u5750\u6807\u4e4b\u524d\uff0c\u201cF\u201d\u7684\u6bcf\u4e2a\u70b9\u90fd\u5c06\u6c34\u5e73\u79fb\u52a8 4 \u4e2a\u5355\u4f4d\uff0c\u5782\u76f4\u79fb\u52a8 2 \u4e2a\u5355\u4f4d\uff0c\u56e0\u6b64\u5728\u5e73\u79fb\u4e4b\u540e\uff0c\u201cF\u201d\u5c06\u4f4d\u4e8e (4,2)\uff1a</p> <p> </p> <p>\u8fd9\u5f20\u56fe\u7247\u4e2d\u6d45\u7070\u8272\u7684\u201cF\u201d\u663e\u793a\u4e86\u5728\u6ca1\u6709\u5e73\u79fb\u7684\u60c5\u51b5\u4e0b\u4f1a\u7ed8\u5236\u4ec0\u4e48\uff1b\u6df1\u7ea2\u8272\u7684\u201cF\u201d\u663e\u793a\u4e86\u5e94\u7528\u4e86\u5e73\u79fb (4,2) \u540e\u7ed8\u5236\u7684\u76f8\u540c\u7684\u201cF\u201d\u3002\u9876\u90e8\u7684\u7bad\u5934\u663e\u793a\u4e86\u201cF\u201d\u7684\u5de6\u4e0a\u89d2\u5df2\u5411\u53f3\u79fb\u52a8 4 \u4e2a\u5355\u4f4d\uff0c\u5411\u4e0a\u79fb\u52a8 2 \u4e2a\u5355\u4f4d\u3002\u5728\u201cF\u201d\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u53d7\u5230\u76f8\u540c\u7684\u4f4d\u79fb\u5f71\u54cd\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u6211\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u5047\u8bbe y \u5750\u6807\u4ece\u4e0b\u5230\u4e0a\u9012\u589e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cy \u8f74\u671d\u4e0a\u3002</p> <p>\u8bb0\u4f4f\uff0c\u5f53\u4f60\u7ed9\u51fa translate(e,f) \u547d\u4ee4\u65f6\uff0c\u8fd9\u4e2a\u5e73\u79fb\u5c06\u5e94\u7528\u4e8e\u4e4b\u540e\u6240\u6709\u7684\u7ed8\u56fe\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e0b\u4e00\u4e2a\u4f60\u7ed8\u5236\u7684\u5f62\u72b6\u3002\u5982\u679c\u4f60\u5728\u5e73\u79fb\u540e\u5e94\u7528\u53e6\u4e00\u4e2a\u53d8\u6362\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u6362\u4e0d\u4f1a\u53d6\u4ee3\u5e73\u79fb\uff0c\u800c\u662f\u4e0e\u5e73\u79fb\u7ed3\u5408\u8d77\u6765\uff0c\u4ece\u800c\u540e\u7eed\u7684\u7ed8\u56fe\u5c06\u53d7\u5230\u7ec4\u5408\u53d8\u6362\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5c06 translate(4,2) \u4e0e translate(-1,5) \u7ec4\u5408\uff0c\u7ed3\u679c\u4e0e\u5355\u4e2a\u5e73\u79fb translate(3,7) \u76f8\u540c\u3002\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u89c2\u70b9\uff0c\u7a0d\u540e\u5c06\u4f1a\u6709\u66f4\u591a\u5185\u5bb9\u4ecb\u7ecd\u3002</p> <p>\u8fd8\u8981\u8bb0\u4f4f\uff0c\u4f60\u4e0d\u9700\u8981\u81ea\u5df1\u8ba1\u7b97\u5750\u6807\u53d8\u6362\u3002\u4f60\u53ea\u9700\u8981\u4e3a\u5bf9\u8c61\u6307\u5b9a\u539f\u59cb\u5750\u6807\uff08\u5373\u5bf9\u8c61\u5750\u6807\uff09\uff0c\u5e76\u6307\u5b9a\u8981\u5e94\u7528\u7684\u53d8\u6362\u6216\u53d8\u6362\u3002\u8ba1\u7b97\u673a\u4f1a\u8d1f\u8d23\u5c06\u53d8\u6362\u5e94\u7528\u4e8e\u5750\u6807\u3002\u4f60\u751a\u81f3\u4e0d\u9700\u8981\u77e5\u9053\u7528\u4e8e\u53d8\u6362\u7684\u65b9\u7a0b\u5f0f\uff1b\u4f60\u53ea\u9700\u8981\u7406\u89e3\u5b83\u5728\u51e0\u4f55\u4e0a\u505a\u4e86\u4ec0\u4e48\u3002</p> <p>A translation transform simply moves every point by a certain amount horizontally and a certain amount vertically. If (x,y) is the original point and (x1,y1) is the transformed point, then the formula for a translation is</p> <pre><code>x1 = x + e\ny1 = y + f\n\u2035\u2035\u2035\n\nwhere e is the number of units by which the point is moved horizontally and f is the amount by which it is moved vertically. (Thus for a translation, a = d = 1, and b = c = 0 in the general formula for an affine transform.) A 2D graphics system will typically have a function such as\n\n```text\ntranslate( e, f )\n</code></pre> <p>to apply a translate transformation. The translation would apply to everything that is drawn after the command is given. That is, for all subsequent drawing operations, e would be added to the x-coordinate and f would be added to the y-coordinate. Let's look at an example. Suppose that you draw an \"F\" using coordinates in which the \"F\" is centered at (0,0). If you say translate(4,2) before drawing the \"F\", then every point of the \"F\" will be moved horizontally by 4 units and vertically by 2 units before the coordinates are actually used, so that after the translation, the \"F\" will be centered at (4,2):</p> <p> </p> <p>The light gray \"F\" in this picture shows what would be drawn without the translation; the dark red \"F\" shows the same \"F\" drawn after applying a translation by (4,2). The top arrow shows that the upper left corner of the \"F\" has been moved over 4 units and up 2 units. Every point in the \"F\" is subjected to the same displacement. Note that in my examples, I am assuming that the y-coordinate increases from bottom to top. That is, the y-axis points up.</p> <p>Remember that when you give the command translate(e,f), the translation applies to all the drawing that you do after that, not just to the next shape that you draw. If you apply another transformation after the translation, the second transform will not replace the translation. It will be combined with the translation, so that subsequent drawing will be affected by the combined transformation. For example, if you combine translate(4,2) with translate(-1,5), the result is the same as a single translation, translate(3,7). This is an important point, and there will be a lot more to say about it later.</p> <p>Also remember that you don't compute coordinate transformations yourself. You just specify the original coordinates for the object (that is, the object coordinates), and you specify the transform or transforms that are to be applied. The computer takes care of applying the transformation to the coordinates. You don't even need to know the equations that are used for the transformation; you just need to understand what it does geometrically.</p>"},{"location":"cn/c2/s3/#233--\u65cb\u8f6c","title":"2.3.3  \u65cb\u8f6c","text":"<p>Rotation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6211\u4eec\u8fd9\u91cc\u7684\u60c5\u51b5\u4e0b\uff0c\u65cb\u8f6c\u53d8\u6362\u4f1a\u56f4\u7ed5\u539f\u70b9 (0,0) \u65cb\u8f6c\u6bcf\u4e2a\u70b9\u3002\u6bcf\u4e2a\u70b9\u90fd\u88ab\u65cb\u8f6c\u76f8\u540c\u7684\u89d2\u5ea6\uff0c\u79f0\u4e3a\u65cb\u8f6c\u89d2\u5ea6\u3002\u4e3a\u6b64\uff0c\u89d2\u5ea6\u53ef\u4ee5\u7528\u5ea6\u6216\u5f27\u5ea6\u6765\u5ea6\u91cf\u3002\uff08\u6211\u4eec\u7a0d\u540e\u5c06\u5728\u672c\u7ae0\u4e2d\u67e5\u770b\u7684 Java \u548c JavaScript \u7684 2D \u56fe\u5f62 API \u4f7f\u7528\u5f27\u5ea6\uff0c\u4f46 OpenGL \u548c SVG \u4f7f\u7528\u5ea6\u3002\uff09\u5177\u6709\u6b63\u89d2\u5ea6\u7684\u65cb\u8f6c\u4f1a\u5c06\u5bf9\u8c61\u987a\u65f6\u9488\u65cb\u8f6c\u4ece\u6b63 x \u8f74\u6307\u5411\u6b63 y \u8f74\u7684\u65b9\u5411\u3002\u5728\u8fd9\u91cc\u7684\u793a\u4f8b\u4e2d\uff0c\u5750\u6807\u7cfb\u4e2d y \u8f74\u5411\u4e0a\uff0c\u8fd9\u662f\u9006\u65f6\u9488\u65cb\u8f6c\uff0c\u4f46\u5728\u901a\u5e38\u7684\u50cf\u7d20\u5750\u6807\u4e2d\uff0cy \u8f74\u5411\u4e0b\u800c\u4e0d\u662f\u5411\u4e0a\uff0c\u6240\u4ee5\u8fd9\u662f\u987a\u65f6\u9488\u65cb\u8f6c\u3002\u867d\u7136\u4e0d\u660e\u663e\uff0c\u4f46\u662f\u5f53\u5bf9\u70b9 (x,y) \u5e94\u7528\u4ee5 r \u5f27\u5ea6\u4e3a\u89d2\u5ea6\u7684\u7ed5\u539f\u70b9\u65cb\u8f6c\u65f6\uff0c\u7ed3\u679c\u70b9 (x1,y1) \u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>x1 = cos(r) * x - sin(r) * y\ny1 = sin(r) * x + cos(r) * y\n</code></pre> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4eff\u5c04\u53d8\u6362\u7684\u4e00\u822c\u516c\u5f0f\u4e2d\uff0ce = f = 0\uff0ca = d = cos(r)\uff0cb = -sin(r)\uff0cc = sin(r)\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u56fe\u793a\uff0c\u8bf4\u660e\u4e86\u7ed5\u539f\u70b9\u65cb\u8f6c\u8d1f 135 \u5ea6\u7684\u89d2\u5ea6\uff1a</p> <p> </p> <p>\u518d\u6b21\uff0c\u6d45\u7070\u8272\u7684\u201cF\u201d\u662f\u539f\u59cb\u5f62\u72b6\uff0c\u6df1\u7ea2\u8272\u7684\u201cF\u201d\u662f\u5e94\u7528\u65cb\u8f6c\u540e\u7684\u5f62\u72b6\u3002\u7bad\u5934\u663e\u793a\u4e86\u539f\u59cb\u201cF\u201d\u7684\u5de6\u4e0a\u89d2\u662f\u5982\u4f55\u79fb\u52a8\u7684\u3002</p> <p>\u4e00\u4e2a 2D \u56fe\u5f62 API \u901a\u5e38\u4f1a\u6709\u4e00\u4e2a rotate(r) \u547d\u4ee4\u6765\u5e94\u7528\u65cb\u8f6c\u3002\u8fd9\u4e2a\u547d\u4ee4\u5728\u7ed8\u5236\u5e94\u7528\u65cb\u8f6c\u7684\u5bf9\u8c61\u4e4b\u524d\u4f7f\u7528\u3002</p> <p>A rotation transform, for our purposes here, rotates each point about the origin, (0,0). Every point is rotated through the same angle, called the angle of rotation. For this purpose, angles can be measured either in degrees or in radians. (The 2D graphics APIs for Java and JavaScript that we will look at later in this chapter use radians, but OpenGL and SVG use degrees.) A rotation with a positive angle rotates objects in the direction from the positive x-axis towards the positive y-axis. This is counterclockwise in a coordinate system where the y-axis points up, as it does in my examples here, but it is clockwise in the usual pixel coordinates, where the y-axis points down rather than up. Although it is not obvious, when rotation through an angle of r radians about the origin is applied to the point (x,y), then the resulting point (x1,y1) is given by</p> <p>```text x1 = cos(r) * x - sin(r) * y y1 = sin(r) * x + cos(r) * y \u2035\u2035\u2035</p> <p>That is, in the general formula for an affine transform, e = f = 0, a = d = cos(r), b = -sin(r), and c = sin(r). Here is a picture that illustrates a rotation about the origin by the angle negative 135 degrees:</p> <p> </p> <p>Again, the light gray \"F\" is the original shape, and the dark red \"F\" is the shape that results if you apply the rotation. The arrow shows how the upper left corner of the original \"F\" has been moved.</p> <p>A 2D graphics API would typically have a command rotate(r) to apply a rotation. The command is used before drawing the objects to which the rotation applies.</p>"},{"location":"cn/c2/s3/#234--\u7ec4\u5408\u53d8\u6362","title":"2.3.4  \u7ec4\u5408\u53d8\u6362","text":"<p>Combining Transformations</p> \u4e2d\u6587\u82f1\u6587 <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5f53\u4f60\u7ec4\u5408\u4e24\u4e2a\u53d8\u6362\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u5047\u8bbe\u5728\u7ed8\u5236\u67d0\u4e2a\u5bf9\u8c61\u4e4b\u524d\uff0c\u4f60\u8bf4\uff1a</p> <pre><code>translate(4,0)\nrotate(90)\n</code></pre> <p>\u5047\u8bbe\u89d2\u5ea6\u662f\u4ee5\u5ea6\u4e3a\u5355\u4f4d\u6d4b\u91cf\u7684\u3002\u7136\u540e\u5e73\u79fb\u5c06\u5e94\u7528\u4e8e\u6240\u6709\u540e\u7eed\u7684\u7ed8\u5236\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u65cb\u8f6c\u547d\u4ee4\uff0c\u4f60\u5728\u5e73\u79fb\u4e4b\u540e\u7ed8\u5236\u7684\u4e1c\u897f\u662f\u65cb\u8f6c\u7684\u5bf9\u8c61\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5e73\u79fb\u5e94\u7528\u4e8e\u5df2\u7ecf\u65cb\u8f6c\u8fc7\u7684\u5bf9\u8c61\u3002\u4e0b\u56fe\u7684\u5de6\u4fa7\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6d45\u7070\u8272\u7684\u201cF\u201d\u662f\u539f\u59cb\u5f62\u72b6\uff0c\u7ea2\u8272\u7684\u201cF\u201d\u663e\u793a\u4e86\u5c06\u8fd9\u4e24\u4e2a\u53d8\u6362\u5e94\u7528\u4e8e\u539f\u59cb\u5f62\u72b6\u7684\u7ed3\u679c\u3002\u539f\u59cb\u201cF\u201d\u9996\u5148\u88ab\u65cb\u8f6c\u4e8690\u5ea6\u89d2\u5ea6\uff0c\u7136\u540e\u5411\u53f3\u79fb\u52a8\u4e864\u4e2a\u5355\u4f4d\u3002</p> <p> </p> <p>\u8bf7\u6ce8\u610f\uff0c\u53d8\u6362\u662f\u4ee5\u4e0e\u4ee3\u7801\u4e2d\u7ed9\u51fa\u7684\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\uff08\u56e0\u4e3a\u4ee3\u7801\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u6362\u662f\u5e94\u7528\u4e8e\u5df2\u7ecf\u53d7\u5230\u7b2c\u4e8c\u4e2a\u53d8\u6362\u5f71\u54cd\u7684\u5bf9\u8c61\uff09\u3002\u8fd8\u8bf7\u6ce8\u610f\uff0c\u5e94\u7528\u53d8\u6362\u7684\u987a\u5e8f\u5f88\u91cd\u8981\u3002\u5982\u679c\u6211\u4eec\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u98a0\u5012\u4e24\u4e2a\u53d8\u6362\u7684\u5e94\u7528\u987a\u5e8f\uff0c\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff1a</p> <pre><code>rotate(90)\ntranslate(4,0)\n</code></pre> <p>\u90a3\u4e48\u7ed3\u679c\u5c31\u5982\u4e0a\u56fe\u53f3\u4fa7\u6240\u793a\u3002\u5728\u90a3\u5f20\u56fe\u7247\u4e2d\uff0c\u539f\u59cb\u201cF\u201d\u9996\u5148\u5411\u53f3\u79fb\u52a84\u4e2a\u5355\u4f4d\uff0c\u7136\u540e\u901a\u8fc7\u539f\u70b9\u65cb\u8f6c90\u5ea6\u89d2\u5ea6\uff0c\u4ee5\u5f97\u5230\u5b9e\u9645\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u7684\u5f62\u72b6\u3002</p> <p>\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5e94\u7528\u591a\u4e2a\u53d8\u6362\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u56f4\u7ed5\u70b9 (p,q) \u800c\u4e0d\u662f\u56f4\u7ed5\u70b9 (0,0) \u5c06\u4e00\u4e2a\u5f62\u72b6\u65cb\u8f6c r \u89d2\u5ea6\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u5c06\u70b9 (p,q) \u79fb\u52a8\u5230\u539f\u70b9\uff0c\u4f7f\u7528 translate(-p,-q) \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 rotate(r) \u8fdb\u884c\u56f4\u7ed5\u539f\u70b9\u7684\u6807\u51c6\u65cb\u8f6c\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528 translate(p,q) \u5c06\u539f\u70b9\u79fb\u56de\u70b9 (p,q)\u3002\u8bb0\u4f4f\u6211\u4eec\u5fc5\u987b\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u7f16\u5199\u53d8\u6362\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u9700\u8981\u5728\u7ed8\u5236\u5f62\u72b6\u4e4b\u524d\u8bf4\uff1a</p> <pre><code>translate(p,q)\nrotate(r)\ntranslate(-p,-q)\n</code></pre> <p>\uff08\u4e8b\u5b9e\u4e0a\uff0c\u4e00\u4e9b\u56fe\u5f62 API \u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u5355\u4e2a\u547d\u4ee4\u6765\u5b9e\u73b0\u8fd9\u4e2a\u53d8\u6362\uff0c\u4f8b\u5982 rotate(r,p,q)\u3002\u8fd9\u5c06\u5728\u70b9 (p,q) \u5904\u56f4\u7ed5\u89d2\u5ea6 r \u8fdb\u884c\u65cb\u8f6c\u3002\uff09</p> <p>We are now in a position to see what can happen when you combine two transformations. Suppose that before drawing some object, you say</p> <pre><code>translate(4,0)\nrotate(90)\n\u2035\u2035\u2035\n\nAssume that angles are measured in degrees. The translation will then apply to all subsequent drawing. But, because of the rotation command, the things that you draw after the translation are rotated objects. That is, the translation applies to objects that have already been rotated. An example is shown on the left in the illustration below, where the light gray \"F\" is the original shape, and red \"F\" shows the result of applying the two transforms to the original. The original \"F\" was first rotated through a 90 degree angle, and then moved 4 units to the right.\n\n&lt;figure markdown=\"span\"&gt;\n    ![pixel-coordinates](../../en/c2/rotate-and-translate-2d.png)\n&lt;/figure&gt;\n\nNote that transforms are applied to objects in the reverse of the order in which they are given in the code (because the first transform in the code is applied to an object that has already been affected by the second transform). And note that the order in which the transforms are applied is important. If we reverse the order in which the two transforms are applied in this example, by saying\n\n```text\nrotate(90)\ntranslate(4,0)\n\u2035\u2035\u2035\n\nthen the result is as shown on the right in the above illustration. In that picture, the original \"F\" is first moved 4 units to the right and the resulting shape is then rotated through an angle of 90 degrees about the origin to give the shape that actually appears on the screen.\n\nFor another example of applying several transformations, suppose that we want to rotate a shape through an angle r about a point (p,q) instead of about the point (0,0). We can do this by first moving the point (p,q) to the origin, using translate(-p,-q). Then we can do a standard rotation about the origin by calling rotate(r). Finally, we can move the origin back to the point (p,q) by applying translate(p,q). Keeping in mind that we have to write the code for the transformations in the reverse order, we need to say\n\n```text\ntranslate(p,q)\nrotate(r)\ntranslate(-p,-q)\n</code></pre> <p>before drawing the shape. (In fact, some graphics APIs let us accomplish this transform with a single command such as rotate(r,p,q). This would apply a rotation through the angle r about the point (p,q).)</p>"},{"location":"cn/c2/s3/#235--\u7f29\u653e","title":"2.3.5  \u7f29\u653e","text":"<p>Scaling</p> \u4e2d\u6587\u82f1\u6587 <p>\u7f29\u653e\u53d8\u6362\u53ef\u7528\u4e8e\u4f7f\u5bf9\u8c61\u53d8\u5927\u6216\u53d8\u5c0f\u3002\u5728\u6570\u5b66\u4e0a\uff0c\u7f29\u653e\u53d8\u6362\u7b80\u5355\u5730\u5c06\u6bcf\u4e2a x \u5750\u6807\u4e58\u4ee5\u4e00\u4e2a\u7ed9\u5b9a\u7684\u91cf\uff0c\u6bcf\u4e2a y \u5750\u6807\u4e58\u4ee5\u4e00\u4e2a\u7ed9\u5b9a\u7684\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u70b9 (x,y) \u5728 x \u65b9\u5411\u4e0a\u6309\u6bd4\u4f8b\u56e0\u5b50 a \u7f29\u653e\uff0c\u5728 y \u65b9\u5411\u4e0a\u6309\u6bd4\u4f8b\u56e0\u5b50 d \u7f29\u653e\uff0c\u90a3\u4e48\u7ed3\u679c\u70b9 (x1,y1) \u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>x1 = a * x\ny1 = d * y\n</code></pre> <p>\u5982\u679c\u5c06\u6b64\u53d8\u6362\u5e94\u7528\u4e8e\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\u7684\u5f62\u72b6\uff0c\u5219\u4f1a\u5c06\u5f62\u72b6\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u62c9\u4f38 a \u500d\uff0c\u5782\u76f4\u65b9\u5411\u4e0a\u62c9\u4f38 d \u500d\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u539f\u59cb\u7684\u6d45\u7070\u8272\u201cF\u201d\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u6309 3 \u500d\uff0c\u5782\u76f4\u65b9\u5411\u4e0a\u6309 2 \u500d\u8fdb\u884c\u7f29\u653e\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u6df1\u7ea2\u8272\u201cF\u201d\uff1a</p> <p> </p> <p>\u5e38\u89c1\u60c5\u51b5\u662f\u6c34\u5e73\u548c\u5782\u76f4\u7f29\u653e\u56e0\u5b50\u76f8\u540c\uff0c\u79f0\u4e3a\u5747\u5300\u7f29\u653e(uniform scaling)\u3002\u5747\u5300\u7f29\u653e\u62c9\u4f38\u6216\u6536\u7f29\u4e00\u4e2a\u5f62\u72b6\u800c\u4e0d\u4f1a\u626d\u66f2\u5b83\u3002</p> <p>\u5f53\u7f29\u653e\u5e94\u7528\u4e8e\u4e0d\u4ee5 (0,0) \u4e3a\u4e2d\u5fc3\u7684\u5f62\u72b6\u65f6\uff0c\u9664\u4e86\u88ab\u62c9\u4f38\u6216\u6536\u7f29\u4e4b\u5916\uff0c\u5f62\u72b6\u8fd8\u5c06\u8fdc\u79bb\u6216\u63a5\u8fd1 0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7f29\u653e\u64cd\u4f5c\u7684\u771f\u5b9e\u63cf\u8ff0\u662f\u5c06\u6bcf\u4e2a\u70b9\u8fdc\u79bb (0,0) \u6216\u5c06\u6bcf\u4e2a\u70b9\u62c9\u5411 (0,0)\u3002\u5982\u679c\u60f3\u8981\u56f4\u7ed5\u4e0d\u540c\u4e8e (0,0) \u7684\u70b9\u8fdb\u884c\u7f29\u653e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0e\u65cb\u8f6c\u60c5\u51b5\u7c7b\u4f3c\u7684\u4e09\u4e2a\u53d8\u6362\u7684\u5e8f\u5217\u3002</p> <p>\u4e00\u4e2a 2D \u56fe\u5f62 API \u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u540d\u4e3a scale(a,d) \u7684\u51fd\u6570\u6765\u5e94\u7528\u7f29\u653e\u53d8\u6362\u3002\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u8be5\u53d8\u6362\u5e94\u7528\u4e8e\u6240\u6709\u540e\u7eed\u7ed8\u56fe\u64cd\u4f5c\u4e2d\u7684\u6240\u6709 x \u548c y \u5750\u6807\u3002\u8bf7\u6ce8\u610f\uff0c\u5141\u8bb8\u4f7f\u7528\u8d1f\u7f29\u653e\u56e0\u5b50\uff0c\u5e76\u4e14\u4f1a\u5bfc\u81f4\u53cd\u5c04\u5f62\u72b6\u4ee5\u53ca\u53ef\u80fd\u7684\u62c9\u4f38\u6216\u6536\u7f29\u3002\u4f8b\u5982\uff0cscale(1,-1) \u5c06\u4f7f\u5bf9\u8c61\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u53cd\u5c04\uff0c\u901a\u8fc7 x \u8f74\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u6bcf\u4e2a\u4eff\u5c04\u53d8\u6362\u90fd\u53ef\u4ee5\u901a\u8fc7\u7ec4\u5408\u5e73\u79fb\u3001\u7ed5\u539f\u70b9\u65cb\u8f6c\u548c\u539f\u70b9\u7f29\u653e\u6765\u521b\u5efa\u3002\u6211\u4e0d\u4f1a\u8bd5\u56fe\u8bc1\u660e\u8fd9\u4e00\u70b9\uff0c\u4f46\u4e0b\u9762\u662f\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u5e73\u79fb\u3001\u65cb\u8f6c\u548c\u7f29\u653e\uff0c\u5e76\u5c1d\u8bd5\u7ec4\u5408\u5b83\u4eec\u6240\u4ea7\u751f\u7684\u53d8\u6362\u3002</p> <p></p> <p>\u6211\u8fd8\u6ce8\u610f\u5230\uff0c\u7531\u5e73\u79fb\u548c\u7ed5\u539f\u70b9\u65cb\u8f6c\u6784\u6210\u7684\u53d8\u6362\uff0c\u6ca1\u6709\u7f29\u653e\uff0c\u5c06\u4fdd\u6301\u88ab\u5e94\u7528\u5bf9\u8c61\u7684\u957f\u5ea6\u548c\u89d2\u5ea6\u3002\u5b83\u4e5f\u4f1a\u4fdd\u6301\u77e9\u5f62\u7684\u7eb5\u6a2a\u6bd4\u3002\u5177\u6709\u8fd9\u79cd\u5c5e\u6027\u7684\u53d8\u6362\u88ab\u79f0\u4e3a\u201c\u6b27\u51e0\u91cc\u5f97\u201d\u3002\u5982\u679c\u8fd8\u5141\u8bb8\u5747\u5300\u7f29\u653e\uff0c\u5219\u7ed3\u679c\u53d8\u6362\u5c06\u4fdd\u6301\u89d2\u5ea6\u548c\u7eb5\u6a2a\u6bd4\uff0c\u4f46\u4e0d\u4f1a\u4fdd\u6301\u957f\u5ea6\u3002</p> <p>A scaling transform can be used to make objects bigger or smaller. Mathematically, a scaling transform simply multiplies each x-coordinate by a given amount and each y-coordinate by a given amount. That is, if a point (x,y) is scaled by a factor of a in the x direction and by a factor of d in the y direction, then the resulting point (x1,y1) is given by</p> <pre><code>x1 = a * x\ny1 = d * y\n</code></pre> <p>If you apply this transform to a shape that is centered at the origin, it will stretch the shape by a factor of a horizontally and d vertically. Here is an example, in which the original light gray \"F\" is scaled by a factor of 3 horizontally and 2 vertically to give the final dark red \"F\":</p> <p> </p> <p>The common case where the horizontal and vertical scaling factors are the same is called uniform scaling. Uniform scaling stretches or shrinks a shape without distorting it.</p> <p>When scaling is applied to a shape that is not centered at (0,0), then in addition to being stretched or shrunk, the shape will be moved away from 0 or towards 0. In fact, the true description of a scaling operation is that it pushes every point away from (0,0) or pulls every point towards (0,0). If you want to scale about a point other than (0,0), you can use a sequence of three transforms, similar to what was done in the case of rotation.</p> <p>A 2D graphics API can provide a function scale(a,d) for applying scaling transformations. As usual, the transform applies to all x and y coordinates in subsequent drawing operations. Note that negative scaling factors are allowed and will result in reflecting the shape as well as possibly stretching or shrinking it. For example, scale(1,-1) will reflect objects vertically, through the x-axis.</p> <p>It is a fact that every affine transform can be created by combining translations, rotations about the origin, and scalings about the origin. I won't try to prove that, but here is an interactive demo that will let you experiment with translations, rotations, and scalings, and with the transformations that can be made by combining them.</p> <p></p> <p>I also note that a transform that is made from translations and rotations, with no scaling, will preserve length and angles in the objects to which it is applied. It will also preserve aspect ratios of rectangles. Transforms with this property are called \"Euclidean.\" If you also allow uniform scaling, the resulting transformation will preserve angles and aspect ratio, but not lengths.</p>"},{"location":"cn/c2/s3/#236--\u526a\u5207","title":"2.3.6  \u526a\u5207","text":"<p>Shear</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5c06\u518d\u770b\u4e00\u4e2a\u57fa\u672c\u53d8\u6362\u7c7b\u578b\uff0c\u526a\u5207\u53d8\u6362\u3002\u5c3d\u7ba1\u5fc5\u8981\u65f6\u53ef\u4ee5\u901a\u8fc7\u65cb\u8f6c\u548c\u7f29\u653e\u6765\u6784\u5efa\u526a\u5207\uff0c\u4f46\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u5e76\u4e0d\u662f\u5f88\u660e\u663e\u3002\u526a\u5207\u4f1a\u201c\u503e\u659c\u201d\u5bf9\u8c61\u3002\u6c34\u5e73\u526a\u5207\u4f1a\u5c06\u4e8b\u7269\u5411\u5de6\uff08\u8d1f\u526a\u5207\uff09\u6216\u5411\u53f3\uff08\u6b63\u526a\u5207\uff09\u503e\u659c\u3002\u5782\u76f4\u526a\u5207\u4f1a\u4f7f\u5b83\u4eec\u5411\u4e0a\u6216\u5411\u4e0b\u503e\u659c\u3002\u4ee5\u4e0b\u662f\u6c34\u5e73\u526a\u5207\u7684\u793a\u4f8b\uff1a</p> <p> </p> <p>\u6c34\u5e73\u526a\u5207\u4e0d\u4f1a\u79fb\u52a8 x \u8f74\u3002\u6bcf\u6761\u6c34\u5e73\u7ebf\u90fd\u4f1a\u6839\u636e\u8be5\u7ebf\u4e0a\u7684 y \u503c\u79fb\u52a8\u5230\u5de6\u4fa7\u6216\u53f3\u4fa7\u3002\u5f53\u5c06\u6c34\u5e73\u526a\u5207\u5e94\u7528\u4e8e\u70b9 (x,y) \u65f6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u70b9 (x1,y1) \u7531\u4ee5\u4e0b\u516c\u5f0f\u7ed9\u51fa\uff1a</p> <pre><code>x1 = x + b * y\ny1 = y\n</code></pre> <p>\u5176\u4e2d b \u662f\u67d0\u4e2a\u5e38\u6570\u526a\u5207\u56e0\u5b50\u3002\u7c7b\u4f3c\u5730\uff0c\u5177\u6709\u526a\u5207\u56e0\u5b50 c \u7684\u5782\u76f4\u526a\u5207\u7531\u4ee5\u4e0b\u65b9\u7a0b\u7ed9\u51fa\uff1a</p> <pre><code>x1 = x\ny1 = c * x + y\n</code></pre> <p>\u526a\u5207\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u503e\u659c\u201d\uff0c\u4f46\u503e\u659c\u901a\u5e38\u662f\u6307\u4e00\u4e2a\u89d2\u5ea6\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u526a\u5207\u56e0\u5b50\u3002</p> <p>We will look at one more type of basic transform, a shearing transform. Although shears can in fact be built up out of rotations and scalings if necessary, it is not really obvious how to do so. A shear will \"tilt\" objects. A horizontal shear will tilt things towards the left (for negative shear) or right (for positive shear). A vertical shear tilts them up or down. Here is an example of horizontal shear:</p> <p> </p> <p>A horizontal shear does not move the x-axis. Every other horizontal line is moved to the left or to the right by an amount that is proportional to the y-value along that line. When a horizontal shear is applied to a point (x,y), the resulting point (x1,y1) is given by</p> <pre><code>x1 = x + b * y\ny1 = y\n</code></pre> <p>for some constant shearing factor b. Similarly, a vertical shear with shearing factor c is given by the equations</p> <pre><code>x1 = x\ny1 = c * x + y\n</code></pre> <p>Shear is occasionally called \"skew,\" but skew is usually specified as an angle rather than as a shear factor.</p>"},{"location":"cn/c2/s3/#237--\u89c6\u7a97\u5230\u89c6\u53e3","title":"2.3.7  \u89c6\u7a97\u5230\u89c6\u53e3","text":"<p>Window-to-Viewport</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u56fe\u50cf\u663e\u793a\u4e4b\u524d\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u6700\u540e\u4e00\u4e2a\u53d8\u6362\u662f\u7a97\u53e3\u5230\u89c6\u53e3\u53d8\u6362\uff0c\u5b83\u5c06\u5305\u542b\u573a\u666f\u7684 xy \u5e73\u9762\u4e2d\u7684\u77e9\u5f62\u89c6\u7a97\u6620\u5c04\u5230\u56fe\u50cf\u5c06\u663e\u793a\u7684\u50cf\u7d20\u77e9\u5f62\u7f51\u683c\u4e2d\u3002\u6211\u5728\u8fd9\u91cc\u5047\u8bbe\u89c6\u7a97\u6ca1\u6709\u65cb\u8f6c\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u7684\u8fb9\u662f\u5e73\u884c\u4e8e x \u548c y \u8f74\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a97\u53e3\u5230\u89c6\u53e3\u53d8\u6362\u53ef\u4ee5\u7528\u5e73\u79fb\u548c\u7f29\u653e\u53d8\u6362\u6765\u8868\u793a\u3002\u8ba9\u6211\u4eec\u770b\u770b\u5178\u578b\u60c5\u51b5\uff0c\u5176\u4e2d\u89c6\u53e3\u5177\u6709\u4ece\u5de6\u8fb9\u7684 0 \u5230\u53f3\u8fb9\u7684\u5bbd\u5ea6\u3001\u4ece\u9876\u90e8\u7684 0 \u5230\u5e95\u90e8\u7684\u9ad8\u5ea6\u7684\u50cf\u7d20\u5750\u6807\u3002\u5e76\u5047\u8bbe\u89c6\u7a97\u7684\u9650\u5236\u662f left\u3001right\u3001bottom \u548c top\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a97\u53e3\u5230\u89c6\u53e3\u53d8\u6362\u53ef\u4ee5\u7f16\u7a0b\u4e3a\uff1a</p> <pre><code>scale( width / (right-left), height / (bottom-top) );\ntranslate( -left, -top )\n</code></pre> <p>\u8fd9\u4e9b\u5e94\u8be5\u662f\u5e94\u7528\u4e8e\u70b9\u7684\u6700\u540e\u53d8\u6362\u3002\u7531\u4e8e\u53d8\u6362\u662f\u6309\u4e0e\u7a0b\u5e8f\u4e2d\u6307\u5b9a\u7684\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u5e94\u7528\u4e8e\u70b9\u7684\uff0c\u5b83\u4eec\u5e94\u8be5\u662f\u7a0b\u5e8f\u4e2d\u6307\u5b9a\u7684\u7b2c\u4e00\u4e2a\u53d8\u6362\u3002\u4e3a\u4e86\u770b\u5230\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8bf7\u8003\u8651\u89c6\u7a97\u4e2d\u7684\u4e00\u4e2a\u70b9 (x,y)\u3002\uff08\u8fd9\u4e2a\u70b9\u6765\u81ea\u573a\u666f\u4e2d\u7684\u67d0\u4e2a\u5bf9\u8c61\u3002\u53ef\u80fd\u5df2\u7ecf\u5e94\u7528\u4e86\u51e0\u6b21\u5efa\u6a21\u53d8\u6362\u6765\u751f\u6210\u70b9 (x,y)\uff0c\u800c\u8be5\u70b9\u73b0\u5728\u5df2\u51c6\u5907\u597d\u8fdb\u884c\u6700\u7ec8\u7684\u8f6c\u6362\u4e3a\u89c6\u53e3\u5750\u6807\u3002\uff09\u5750\u6807 (x,y) \u9996\u5148\u88ab\u5e73\u79fb\u4e86 (-left,-top) \u4ee5\u5f97\u5230 (x-left,y-top)\u3002\u7136\u540e\u5c06\u8fd9\u4e9b\u5750\u6807\u4e58\u4ee5\u4e0a\u9762\u663e\u793a\u7684\u7f29\u653e\u56e0\u5b50\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u5750\u6807\uff1a</p> <pre><code>x1 = width / (right-left) * (x-left)\ny1 = height / (bottom-top) * (y-top)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u70b9 (left,top) \u88ab\u6620\u5c04\u5230 (0,0)\uff0c\u800c\u70b9 (right,bottom) \u88ab\u6620\u5c04\u5230 (width,height)\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u7eb5\u6a2a\u6bd4\u7684\u95ee\u9898\u3002\u5982 2.1.3 \u5c0f\u8282 \u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5f3a\u5236\u7a97\u53e3\u7684\u7eb5\u6a2a\u6bd4\u4e0e\u89c6\u53e3\u7684\u7eb5\u6a2a\u6bd4\u5339\u914d\uff0c\u53ef\u80fd\u9700\u8981\u8c03\u6574\u7a97\u53e3\u7684\u9650\u5236\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u7684\u4f2a\u4ee3\u7801\uff0c\u5047\u8bbe\u89c6\u53e3\u7684\u5de6\u4e0a\u89d2\u5177\u6709\u50cf\u7d20\u5750\u6807 (0,0)\uff1a</p> <pre><code>subroutine applyWindowToViewportTransformation (\n        left, right,   // horizontal limits on view window\n        bottom, top,   // vertical limits on view window\n        width, height, // width and height of viewport\n        preserveAspect // should window be forced to match viewport aspect?\n    )\n\nif preserveAspect :\n    // Adjust the limits to match the aspect ratio of the drawing area.\n    displayAspect = abs(height / width);\n    windowAspect = abs(( top-bottom ) / ( right-left ));\n    if displayAspect &gt; windowAspect :\n        // Expand the viewport vertically.\n        excess = (top-bottom) * (displayAspect/windowAspect - 1)\n        top = top + excess/2\n        bottom = bottom - excess/2\n    else if displayAspect &lt; windowAspect :\n        // Expand the viewport horizontally.\n        excess = (right-left) * (windowAspect/displayAspect - 1)\n        right = right + excess/2\n        left = left - excess/2 \n\n    scale( width / (right-left), height / (bottom-top) )\n    translate( -left, -top )\n</code></pre> <p>The last transformation that is applied to an object before it is displayed in an image is the window-to-viewport transformation, which maps the rectangular view window in the xy-plane that contains the scene to the rectangular grid of pixels where the image will be displayed. I'll assume here that the view window is not rotated; that it, its sides are parallel to the x- and y-axes. In that case, the window-to-viewport transformation can be expressed in terms of translation and scaling transforms. Let's look at the typical case where the viewport has pixel coordinates ranging from 0 on the left to width on the right and from 0 at the top to height at the bottom. And assume that the limits on the view window are left, right, bottom, and top. In that case, the window-to-viewport transformation can be programmed as:</p> <pre><code>scale( width / (right-left), height / (bottom-top) );\ntranslate( -left, -top )\n</code></pre> <p>These should be the last transforms that are applied to a point. Since transforms are applied to points in the reverse of the order in which they are specified in the program, they should be the first transforms that are specified in the program. To see how this works, consider a point (x,y) in the view window. (This point comes from some object in the scene. Several modeling transforms might have already been applied to the object to produce the point (x,y), and that point is now ready for its final transformation into viewport coordinates.) The coordinates (x,y) are first translated by (-left,-top) to give (x-left,y-top). These coordinates are then multiplied by the scaling factors shown above, giving the final coordinates</p> <pre><code>x1 = width / (right-left) * (x-left)\ny1 = height / (bottom-top) * (y-top)\n</code></pre> <p>Note that the point (left,top) is mapped to (0,0), while the point (right,bottom) is mapped to (width,height), which is just what we want.</p> <p>There is still the question of aspect ratio. As noted in Subsection 2.1.3, if we want to force the aspect ratio of the window to match the aspect ratio of the viewport, it might be necessary to adjust the limits on the window. Here is pseudocode for a subroutine that will do that, again assuming that the top-left corner of the viewport has pixel coordinates (0,0):</p> <pre><code>subroutine applyWindowToViewportTransformation (\n        left, right,   // horizontal limits on view window\n        bottom, top,   // vertical limits on view window\n        width, height, // width and height of viewport\n        preserveAspect // should window be forced to match viewport aspect?\n    )\n\nif preserveAspect :\n    // Adjust the limits to match the aspect ratio of the drawing area.\n    displayAspect = abs(height / width);\n    windowAspect = abs(( top-bottom ) / ( right-left ));\n    if displayAspect &gt; windowAspect :\n        // Expand the viewport vertically.\n        excess = (top-bottom) * (displayAspect/windowAspect - 1)\n        top = top + excess/2\n        bottom = bottom - excess/2\n    else if displayAspect &lt; windowAspect :\n        // Expand the viewport horizontally.\n        excess = (right-left) * (windowAspect/displayAspect - 1)\n        right = right + excess/2\n        left = left - excess/2 \n\n    scale( width / (right-left), height / (bottom-top) )\n    translate( -left, -top )\n</code></pre>"},{"location":"cn/c2/s3/#238--\u77e9\u9635\u548c\u5411\u91cf","title":"2.3.8  \u77e9\u9635\u548c\u5411\u91cf","text":"<p>Matrices and Vectors</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u4e2d\u4f7f\u7528\u7684\u53d8\u6362\u53ef\u4ee5\u8868\u793a\u4e3a\u77e9\u9635\uff0c\u800c\u5b83\u4eec\u4f5c\u7528\u7684\u70b9\u5219\u8868\u793a\u4e3a\u5411\u91cf\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4ece\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u77e9\u9635(matrix)\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u800c\u5411\u91cf(vector)\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u3002\u77e9\u9635\u548c\u5411\u91cf\u662f\u7ebf\u6027\u4ee3\u6570(linear algebra)\u9886\u57df\u7684\u7814\u7a76\u5bf9\u8c61\u3002\u7ebf\u6027\u4ee3\u6570\u5bf9\u8ba1\u7b97\u673a\u56fe\u5f62\u81f3\u5173\u91cd\u8981\u3002\u4e8b\u5b9e\u4e0a\uff0c\u77e9\u9635\u548c\u5411\u91cf\u6570\u5b66\u5df2\u7ecf\u5185\u7f6e\u5728\u4e86 GPU \u4e2d\u3002\u4f60\u4e0d\u9700\u8981\u5bf9\u7ebf\u6027\u4ee3\u6570\u6709\u5f88\u591a\u4e86\u89e3\u6765\u9605\u8bfb\u672c\u6559\u6750\uff0c\u4f46\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002</p> <p>\u6211\u4eec\u9700\u8981\u7684\u5411\u91cf\u662f\u7531\u4e24\u4e2a\u3001\u4e09\u4e2a\u6216\u56db\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u5217\u8868\u3002\u5b83\u4eec\u901a\u5e38\u88ab\u5199\u4f5c (x,y)\u3001(x,y,z) \u548c (x,y,z,w)\u3002\u4e00\u4e2a\u5177\u6709 N \u884c\u548c M \u5217\u7684\u77e9\u9635\u79f0\u4e3a\u201cN\u884cM\u5217\u77e9\u9635\u201d\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u7684\u77e9\u9635\u662f N \u884c N \u5217\u7684\u77e9\u9635\uff0c\u5176\u4e2d N \u4e3a 2\u30013 \u6216 4\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u6709 2\u30013 \u6216 4 \u884c\u548c\u5217\uff0c\u884c\u6570\u7b49\u4e8e\u5217\u6570\u3002</p> <p>\u5982\u679c A \u548c B \u662f\u4e24\u4e2a N \u884c N \u5217\u7684\u77e9\u9635\uff0c\u90a3\u4e48\u5b83\u4eec\u53ef\u4ee5\u76f8\u4e58\u5f97\u5230\u4e00\u4e2a\u4e58\u79ef\u77e9\u9635 C = AB\u3002\u5982\u679c A \u662f\u4e00\u4e2a N \u884c N \u5217\u7684\u77e9\u9635\uff0cv \u662f\u957f\u5ea6\u4e3a N \u7684\u5411\u91cf\uff0c\u90a3\u4e48 v \u53ef\u4ee5\u4e58\u4ee5 A \u5f97\u5230\u53e6\u4e00\u4e2a\u5411\u91cf w = Av\u3002\u5c06 v \u6620\u5c04\u5230 Av \u7684\u51fd\u6570\u662f\u4e00\u4e2a\u53d8\u6362\uff1b\u5b83\u5c06\u4efb\u610f\u7ed9\u5b9a\u7684\u5927\u5c0f\u4e3a N \u7684\u5411\u91cf\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e3a N \u7684\u5411\u91cf\u3002\u8fd9\u79cd\u5f62\u5f0f\u7684\u53d8\u6362\u79f0\u4e3a\u7ebf\u6027\u53d8\u6362(linear transformation)\u3002</p> <p>\u73b0\u5728\uff0c\u5047\u8bbe A \u548c B \u662f N \u884c N \u5217\u7684\u77e9\u9635\uff0cv \u662f\u957f\u5ea6\u4e3a N \u7684\u5411\u91cf\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u5f62\u6210\u4e24\u4e2a\u4e0d\u540c\u7684\u4e58\u79ef\uff1aA(Bv) \u548c (AB)v\u3002\u4e00\u4e2a\u6838\u5fc3\u4e8b\u5b9e\u662f\uff0c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06 v \u4e58\u4ee5 B\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4e58\u4ee5 A\uff0c\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635 A \u548c B \u76f8\u4e58\u5f97\u5230\u77e9\u9635\u4e58\u79ef AB\uff0c\u7136\u540e\u5c06 v \u4e58\u4ee5 AB\u3002\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002</p> <p>\u4e8b\u5b9e\u8bc1\u660e\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u90fd\u662f\u7ebf\u6027\u53d8\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed5\u539f\u70b9\u65cb\u8f6c (x,y) \u89d2\u5ea6\u4e3a d \u7684\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u5c06 (x,y) \u4e58\u4ee5\u4e00\u4e2a 2\u00d72 \u7684\u77e9\u9635\u6765\u5b9e\u73b0\u3002\u8ba9\u6211\u4eec\u79f0\u8be5\u77e9\u9635\u4e3a Rd\u3002\u7c7b\u4f3c\u5730\uff0c\u6c34\u5e73\u65b9\u5411\u7f29\u653e\u56e0\u5b50\u4e3a a\uff0c\u5782\u76f4\u65b9\u5411\u7f29\u653e\u56e0\u5b50\u4e3a b\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u77e9\u9635 Sa,b\u3002\u5982\u679c\u6211\u4eec\u60f3\u5bf9\u70b9 v = (x,y) \u5e94\u7528\u7f29\u653e\u540e\u518d\u65cb\u8f6c\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u8981\u4e48 Rd(Sa,b^v) \u8981\u4e48 (RdSa,b)v\u3002</p> <p>\u90a3\u4e48\u5462\uff1f\u55ef\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5bf9\u6570\u5343\u4e2a\u70b9\u5e94\u7528\u76f8\u540c\u7684\u4e24\u4e2a\u64cd\u4f5c\uff0c\u5148\u7f29\u653e\u518d\u65cb\u8f6c\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e3a\u8ba1\u7b97\u673a\u56fe\u5f62\u4e2d\u7684\u5bf9\u8c61\u8fdb\u884c\u53d8\u6362\u65f6\u901a\u5e38\u6240\u505a\u7684\u90a3\u6837\u3002\u5173\u952e\u5728\u4e8e\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u52b3\u6c38\u9038\u5730\u8ba1\u7b97\u4e58\u79ef\u77e9\u9635 RdSa,b\uff0c\u7136\u540e\u901a\u8fc7\u5355\u6b21\u4e58\u6cd5\u5c06\u7ec4\u5408\u53d8\u6362\u5e94\u7528\u4e8e\u6bcf\u4e2a\u70b9\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u8bf4</p> <pre><code>rotate(d)\nscale(a,b)\n.\n.  // draw a complex object\n.\n</code></pre> <p>\u8ba1\u7b97\u673a\u65e0\u9700\u8ddf\u8e2a\u4e24\u4e2a\u72ec\u7acb\u7684\u64cd\u4f5c\u3002\u5b83\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u5408\u5e76\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u77e9\u9635\uff0c\u7136\u540e\u53ea\u9700\u8ddf\u8e2a\u8fd9\u4e2a\u77e9\u9635\u3002\u5373\u4f7f\u5bf9\u5bf9\u8c61\u5e94\u7528\u4e8650\u4e2a\u53d8\u6362\uff0c\u8ba1\u7b97\u673a\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u5168\u90e8\u5408\u5e76\u6210\u4e00\u4e2a\u77e9\u9635\u3002\u901a\u8fc7\u4f7f\u7528\u77e9\u9635\u4ee3\u6570\uff0c\u591a\u4e2a\u53d8\u6362\u53ef\u4ee5\u50cf\u5355\u4e2a\u53d8\u6362\u4e00\u6837\u9ad8\u6548\u5730\u5904\u7406\uff01</p> <p>\u8fd9\u786e\u5b9e\u5f88\u597d\uff0c\u4f46\u5b58\u5728\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff1a\u5e73\u79fb\u4e0d\u662f\u7ebf\u6027\u53d8\u6362\u3002\u4e3a\u4e86\u5c06\u5e73\u79fb\u7eb3\u5165\u8fd9\u4e2a\u6846\u67b6\uff0c\u6211\u4eec\u9996\u5148\u505a\u4e00\u4e9b\u770b\u8d77\u6765\u6709\u70b9\u5947\u602a\u7684\u4e8b\u60c5\uff1a\u6211\u4eec\u4e0d\u518d\u5c06\u4e8c\u7ef4\u70b9\u8868\u793a\u4e3a\u4e00\u5bf9\u6570\u5b57 (x,y)\uff0c\u800c\u662f\u8868\u793a\u4e3a\u4e09\u4e2a\u6570\u5b57\u7684\u4e09\u5143\u7ec4 (x,y,1)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u7b2c\u4e09\u4e2a\u5750\u6807\u4f4d\u7f6e\u6dfb\u52a0\u4e86\u4e00\u4e2a 1\u3002\u7136\u540e\uff0c\u7ed3\u679c\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u5e73\u79fb\u2014\u2014\u56e0\u6b64\u4efb\u4f55\u4eff\u5c04\u53d8\u6362\u2014\u2014\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u8868\u793a\u4e3a\u4e00\u4e2a 3\u00d73 \u77e9\u9635\u7684\u4e58\u6cd5\u3002\u6211\u4eec\u9700\u8981\u7684\u77e9\u9635\u5177\u6709\u5305\u542b (0,0,1) \u7684\u5e95\u90e8\u4e00\u884c\u3002\u5c06 (x,y,1) \u4e58\u4ee5\u8fd9\u6837\u7684\u77e9\u9635\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u5411\u91cf (x1,y1,1)\u3002\u6211\u4eec\u5ffd\u7565\u989d\u5916\u7684\u5750\u6807\uff0c\u5e76\u5c06\u5176\u89c6\u4e3a\u5c06 (x,y) \u8f6c\u6362\u4e3a (x1,y1)\u3002\u6709\u5173\u8bb0\u5f55\uff0c2D \u5e73\u79fb (Ta,b)\u3001\u7f29\u653e (Sa,b) \u548c\u65cb\u8f6c (Rd) \u7684 3\u00d73 \u77e9\u9635\u5982\u4e0b\u6240\u793a\uff1a</p> <p> </p> <p>\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u77e9\u9635\u7684\u4e58\u6cd5\u4e0e\u4e0a\u9762\u7ed9\u51fa\u7684\u5e73\u79fb\u3001\u7f29\u653e\u548c\u65cb\u8f6c\u516c\u5f0f\u8fdb\u884c\u6bd4\u8f83\u3002\u4f46\u5728\u8fdb\u884c\u56fe\u5f62\u7f16\u7a0b\u65f6\uff0c\u4f60\u4e0d\u9700\u8981\u81ea\u5df1\u6267\u884c\u8fd9\u4e9b\u4e58\u6cd5\u3002\u76ee\u524d\uff0c\u4f60\u5e94\u8be5\u4ece\u8fd9\u6b21\u8ba8\u8bba\u4e2d\u5e26\u8d70\u7684\u91cd\u8981\u89c2\u70b9\u662f\uff0c\u4e00\u7cfb\u5217\u53d8\u6362\u53ef\u4ee5\u5408\u5e76\u6210\u5355\u4e2a\u53d8\u6362\u3002\u8ba1\u7b97\u673a\u53ea\u9700\u8981\u8ddf\u8e2a\u4e00\u4e2a\u77e9\u9635\uff0c\u6211\u4eec\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u201c\u5f53\u524d\u77e9\u9635\u201d\u6216\u201c\u5f53\u524d\u53d8\u6362\u201d\u3002\u4e3a\u4e86\u5b9e\u73b0\u8bf8\u5982 translate(a,b) \u6216 rotate(d) \u7b49\u53d8\u6362\u547d\u4ee4\uff0c\u8ba1\u7b97\u673a\u53ea\u9700\u5c06\u5f53\u524d\u77e9\u9635\u4e58\u4ee5\u4ee3\u8868\u53d8\u6362\u7684\u77e9\u9635\u3002</p> <p>The transforms that are used in computer graphics can be represented as matrices, and the points on which they operate are represented as vectors. Recall that a matrix, from the point of view of a computer scientist, is a two-dimensional array of numbers, while a vector is a one-dimensional array. Matrices and vectors are studied in the field of mathematics called linear algebra. Linear algebra is fundamental to computer graphics. In fact, matrix and vector math is built into GPUs. You won't need to know a great deal about linear algebra for this textbook, but a few basic ideas are essential.</p> <p>The vectors that we need are lists of two, three, or four numbers. They are often written as (x,y), (x,y,z), and (x,y,z,w). A matrix with N rows and M columns is called an \"N-by-M matrix.\" For the most part, the matrices that we need are N-by-N matrices, where N is 2, 3, or 4. That is, they have 2, 3, or 4 rows and columns, and the number of rows is equal to the number of columns.</p> <p>If A and B are two N-by-N matrices, then they can be multiplied to give a product matrix C = AB. If A is an N-by-N matrix, and v is a vector of length N, then v can be multiplied by A to give another vector w = Av. The function that takes v to Av is a transformation; it transforms any given vector of size N into another vector of size N. A transformation of this form is called a linear transformation.</p> <p>Now, suppose that A and B are N-by-N matrices and v is a vector of length N. Then, we can form two different products: A(Bv) and (AB)v. It is a central fact that these two operations have the same effect. That is, we can multiply v by B and then multiply the result by A, or we can multiply the matrices A and B to get the matrix product AB and then multiply v by AB. The result is the same.</p> <p>Rotation and scaling, as it turns out, are linear transformations. That is, the operation of rotating (x,y) through an angle d about the origin can be done by multiplying (x,y) by a 2-by-2 matrix. Let's call that matrix Rd. Similarly, scaling by a factor a in the horizontal direction and b in the vertical direction can be given as a matrix Sa,b. If we want to apply a scaling followed by a rotation to the point v = (x,y), we can compute either Rd(Sa,b^v) or (RdSa,b)v.</p> <p>So what? Well, suppose that we want to apply the same two operations, scale then rotate, to thousands of points, as we typically do when transforming objects for computer graphics. The point is that we could compute the product matrix RdSa,b once and for all, and then apply the combined transform to each point with a single multiplication. This means that if a program says</p> <pre><code>rotate(d)\nscale(a,b)\n.\n.  // draw a complex object\n.\n</code></pre> <p>the computer doesn't have to keep track of two separate operations. It combines the operations into a single matrix and just keeps track of that. Even if you apply, say, 50 transformations to the object, the computer can just combine them all into one matrix. By using matrix algebra, multiple transformations can be handled as efficiently as a single transformation!</p> <p>This is really nice, but there is a gaping problem: Translation is not a linear transformation. To bring translation into this framework, we do something that looks a little strange at first: Instead of representing a point in 2D as a pair of numbers (x,y), we represent it as the triple of numbers (x,y,1). That is, we add a one as the third coordinate. It then turns out that we can then represent rotation, scaling, and translation\u2014and hence any affine transformation\u2014on 2D space as multiplication by a 3-by-3 matrix. The matrices that we need have a bottom row containing (0,0,1). Multiplying (x,y,1) by such a matrix gives a new vector (x1,y1,1). We ignore the extra coordinate and consider this to be a transformation of (x,y) into (x1,y1). For the record, the 3-by-3 matrices for translation (Ta,b), scaling (Sa,b), and rotation (Rd) in 2D are</p> <p> </p> <p>You can compare multiplication by these matrices to the formulas given above for translation, scaling, and rotation. But when doing graphics programming, you won't need to do the multiplication yourself. For now, the important idea that you should take away from this discussion is that a sequence of transformations can be combined into a single transformation. The computer only needs to keep track of a single matrix, which we can call the \"current matrix\" or \"current transformation.\" To implement transform commands such as translate(a,b) or rotate(d), the computer simply multiplies the current matrix by the matrix that represents the transform.</p>"},{"location":"cn/c2/s4/","title":"\u7b2c4\u8282: \u5206\u5c42\u5efa\u6a21","text":"<p>Hierarchical Modeling</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d,\u6211\u4eec\u5c06\u770b\u770b\u5982\u4f55\u4ece\u975e\u5e38\u7b80\u5355\u7684\u5f62\u72b6\u6784\u5efa\u590d\u6742\u7684\u573a\u666f\u3002\u5173\u952e\u662f\u5206\u5c42\u7ed3\u6784\u3002\u4e5f\u5c31\u662f\u8bf4,\u590d\u6742\u7684\u5bf9\u8c61\u53ef\u4ee5\u7531\u66f4\u7b80\u5355\u7684\u5bf9\u8c61\u7ec4\u6210,\u8fd9\u4e9b\u5bf9\u8c61\u53c8\u53ef\u4ee5\u7531\u66f4\u7b80\u5355\u7684\u5bf9\u8c61\u7ec4\u6210,\u4f9d\u6b64\u7c7b\u63a8,\u76f4\u5230\u6700\u7ec8\u7531\u7b80\u5355\u7684\u51e0\u4f55\u56fe\u5143\u7ec4\u6210,\u53ef\u4ee5\u76f4\u63a5\u7ed8\u5236\u3002\u8fd9\u88ab\u79f0\u4e3a\u5206\u5c42\u5efa\u6a21\u3002\u6211\u4eec\u5c06\u770b\u5230,\u5728\u5206\u5c42\u5efa\u6a21\u4e2d,\u5728\u4e0a\u4e00\u8282\u4e2d\u5b66\u4e60\u7684\u53d8\u6362\u8d77\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002</p> <p>\u5206\u5c42\u7ed3\u6784\u662f\u5904\u7406\u590d\u6742\u6027\u7684\u5173\u952e,\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u8bb8\u591a\u9886\u57df(\u4ee5\u53ca\u73b0\u5b9e\u4e16\u754c\u7684\u5176\u4ed6\u9886\u57df)\u4e2d\u90fd\u662f\u5982\u6b64,\u6240\u4ee5\u5b83\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528,\u8fd9\u4e00\u70b9\u5e76\u4e0d\u4ee4\u4eba\u610f\u5916\u3002</p> <p>In this section, we look at how complex scenes can be built from very simple shapes. The key is hierarchical structure. That is, a complex object can be made up of simpler objects, which can in turn be made up of even simpler objects, and so on until it bottoms out with simple geometric primitives that can be drawn directly. This is called hierarchical modeling. We will see that the transforms that were studied in the previous section play an important role in hierarchical modeling.</p> <p>Hierarchical structure is the key to dealing with complexity in many areas of computer science (and in the rest of reality), so it be no surprise that it plays an important role in computer graphics.</p>"},{"location":"cn/c2/s4/#241--\u6784\u5efa\u590d\u6742\u5bf9\u8c61","title":"2.4.1  \u6784\u5efa\u590d\u6742\u5bf9\u8c61","text":"<p>Building Complex Objects</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f15\u5165\u65b0\u7684\u5750\u6807\u7cfb\u7684\u4e00\u4e2a\u4e3b\u8981\u52a8\u673a\u662f\u5e94\u8be5\u80fd\u591f\u4f7f\u7528\u5bf9\u8981\u7ed8\u5236\u7684\u573a\u666f\u6700\u81ea\u7136\u7684\u5750\u6807\u7cfb\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u60f3\u6cd5\u6269\u5c55\u5230\u573a\u666f\u4e2d\u7684\u5355\u4e2a\u5bf9\u8c61\uff1a\u5728\u7ed8\u5236\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f7f\u7528\u6700\u9002\u5408\u8be5\u5bf9\u8c61\u7684\u5750\u6807\u7cfb\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u4e00\u4e2a\u5bf9\u8c61\u5728\u5176\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u4ee5\u539f\u70b9(0,0)\u4e3a\u4e2d\u5fc3\uff0c\u6216\u8005\u81f3\u5c11\u4f7f\u7528\u539f\u70b9\u4f5c\u4e3a\u4fbf\u6377\u7684\u53c2\u8003\u70b9\u3002\u7136\u540e\uff0c\u4e3a\u4e86\u5c06\u5176\u653e\u7f6e\u5728\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7f29\u653e\u53d8\u6362\uff0c\u63a5\u7740\u662f\u65cb\u8f6c\u53d8\u6362\uff0c\u63a5\u7740\u662f\u5e73\u79fb\u53d8\u6362\uff0c\u4ee5\u8bbe\u7f6e\u5176\u5728\u573a\u666f\u4e2d\u7684\u5927\u5c0f\u3001\u65b9\u5411\u548c\u4f4d\u7f6e\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\u4f7f\u7528\u7684\u53d8\u6362\u88ab\u79f0\u4e3a\u5efa\u6a21\u53d8\u6362\u3002\u901a\u5e38\uff0c\u53d8\u6362\u7684\u987a\u5e8f\u662f\u5148\u7f29\u653e\uff0c\u7136\u540e\u65cb\u8f6c\uff0c\u6700\u540e\u5e73\u79fb\uff0c\u56e0\u4e3a\u7f29\u653e\u548c\u65cb\u8f6c\u4f1a\u4fdd\u6301\u53c2\u8003\u70b9(0,0)\u4e0d\u53d8\u3002\u4e00\u65e6\u5bf9\u8c61\u88ab\u7f29\u653e\u548c\u65cb\u8f6c\uff0c\u4f7f\u7528\u5e73\u79fb\u53d8\u6362\u5c06\u53c2\u8003\u70b9\u79fb\u52a8\u5230\u573a\u666f\u4e2d\u7684\u4efb\u610f\u6240\u9700\u70b9\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\uff08\u5f53\u7136\uff0c\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u4e0d\u9700\u8981\u6240\u6709\u4e09\u4e2a\u64cd\u4f5c\u3002\uff09\u8bf7\u8bb0\u4f4f\uff0c\u5728\u4ee3\u7801\u4e2d\uff0c\u53d8\u6362\u7684\u987a\u5e8f\u4e0e\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u987a\u5e8f\u76f8\u53cd\uff0c\u5e76\u4e14\u53d8\u6362\u662f\u5728\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d\u6307\u5b9a\u7684\u3002\u56e0\u6b64\uff0c\u5728\u4ee3\u7801\u4e2d\uff0c\u5e73\u79fb\u5e94\u8be5\u9996\u5148\u51fa\u73b0\uff0c\u7136\u540e\u662f\u65cb\u8f6c\uff0c\u7136\u540e\u662f\u7f29\u653e\u3002\u5efa\u6a21\u53d8\u6362\u7684\u7ec4\u5408\u987a\u5e8f\u4e0d\u603b\u662f\u8fd9\u6837\uff0c\u4f46\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u7528\u6cd5\u3002</p> <p>\u7528\u4e8e\u5c06\u5bf9\u8c61\u653e\u7f6e\u5728\u573a\u666f\u4e2d\u7684\u5efa\u6a21\u53d8\u6362\u4e0d\u5e94\u5f71\u54cd\u573a\u666f\u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u3002\u4e3a\u4e86\u5c06\u5176\u5e94\u7528\u4e8e\u4ec5\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5f00\u59cb\u5904\u7406\u5bf9\u8c61\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u7684\u53d8\u6362\u72b6\u6001\uff0c\u5e76\u5728\u4e4b\u540e\u6062\u590d\u5b83\u3002\u8fd9\u6837\u505a\u7684\u65b9\u5f0f\u56e0\u4e0d\u540c\u7684\u56fe\u5f62API\u800c\u5f02\uff0c\u4f46\u5047\u8bbe\u8fd9\u91cc\u6709\u7528\u4e8e\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\u7684\u5b50\u7a0b\u5e8f<code>saveTransform()</code>\u548c<code>restoreTransform()</code>\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>saveTransform</code>\u5c06\u590d\u5236\u5f53\u524d\u751f\u6548\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u5e76\u5b58\u50a8\u8be5\u526f\u672c\u3002\u5b83\u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u7684\u53d8\u6362\uff1b\u5b83\u53ea\u662f\u4fdd\u5b58\u4e00\u4e2a\u526f\u672c\u3002\u7a0d\u540e\uff0c\u5f53\u8c03\u7528restoreTransform\u65f6\uff0c\u5b83\u5c06\u68c0\u7d22\u8be5\u526f\u672c\uff0c\u5e76\u5c06\u5f53\u524d\u7684\u5efa\u6a21\u53d8\u6362\u66ff\u6362\u4e3a\u68c0\u7d22\u5230\u7684\u53d8\u6362\u3002\u7ed8\u5236\u5bf9\u8c61\u7684\u5178\u578b\u4ee3\u7801\u5c06\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>saveTransform()\ntranslate(dx,dy) // move object into position\nrotate(r)        // set the orientation of the object\nscale(sx,sy)     // set the size of the object\n    .\n    .  // draw the object, using its natural coordinates\n    .\nrestoreTransform()\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u5e76\u4e14\u4e0d\u9700\u8981\u77e5\u9053\u4fdd\u5b58\u7684\u53d8\u6362\u662f\u505a\u4ec0\u4e48\u7684\u3002\u4e5f\u8bb8\u5b83\u53ea\u662f\u6240\u8c13\u7684\u5355\u4f4d\u53d8\u6362(identity transform)\uff0c\u5b83\u662f\u4e00\u4e2a\u4e0d\u4fee\u6539\u5e94\u7528\u4e8e\u5176\u4e0a\u7684\u5750\u6807\u7684\u53d8\u6362\u3002\u6216\u8005\u53ef\u80fd\u5df2\u7ecf\u6709\u53e6\u4e00\u4e2a\u53d8\u6362\u5b58\u5728\uff0c\u4f8b\u5982\u5f71\u54cd\u6574\u4e2a\u573a\u666f\u7684\u5750\u6807\u53d8\u6362\u3002\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\u5b9e\u9645\u4e0a\u662f\u5728\u4e4b\u524d\u6307\u5b9a\u7684\u4efb\u4f55\u5176\u4ed6\u53d8\u6362\u7684\u57fa\u7840\u4e0a\u5e94\u7528\u7684\u3002\u5efa\u6a21\u53d8\u6362\u5c06\u5bf9\u8c61\u4ece\u5176\u81ea\u7136\u5750\u6807\u79fb\u52a8\u5230\u573a\u666f\u4e2d\u7684\u9002\u5f53\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5e94\u7528\u4e8e\u6574\u4e2a\u573a\u666f\u7684\u5750\u6807\u53d8\u6362\u5c06\u968f\u4e4b\u79fb\u52a8\u5bf9\u8c61\u3002</p> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u6269\u5c55\u8fd9\u4e2a\u60f3\u6cd5\u3002\u5047\u8bbe\u6211\u4eec\u8981\u7ed8\u5236\u7684\u5bf9\u8c61\u672c\u8eab\u662f\u4e00\u4e2a\u590d\u6742\u7684\u5b9e\u4f53\uff0c\u7531\u8bb8\u591a\u8f83\u5c0f\u7684\u5bf9\u8c61\u7ec4\u6210\u3002\u4f8b\u5982\uff0c\u60f3\u8c61\u4e00\u4e0b\u7531\u76c6\u3001\u830e\u3001\u53f6\u5b50\u548c\u82b1\u6735\u7ec4\u6210\u7684\u76c6\u683d\u82b1\u5349\u3002\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ee5\u5b83\u4eec\u81ea\u5df1\u7684\u81ea\u7136\u5750\u6807\u7cfb\u7ed8\u5236\u8f83\u5c0f\u7684\u7ec4\u4ef6\u5bf9\u8c61\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u5f85\u4e3b\u5bf9\u8c61\u4e00\u6837\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u4ee5\u82b1\u6735\u7684\u4e2d\u5fc3\u4e3a(0,0)\u7684\u5750\u6807\u7cfb\u4e2d\u6307\u5b9a\u82b1\u6735\u3002\u4f46\u8fd9\u5f88\u5bb9\u6613\uff1a\u6211\u4eec\u5728\u6bcf\u4e2a\u5c0f\u7ec4\u4ef6\u5bf9\u8c61\uff08\u5982\u82b1\u6735\uff09\u7684\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\uff0c\u5e76\u4f7f\u7528\u5efa\u6a21\u53d8\u6362\u5c06\u5b50\u5bf9\u8c61\u79fb\u52a8\u5230\u4e3b\u5bf9\u8c61\u5185\u90e8\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u5728\u5176\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u7ec4\u5408\u590d\u6742\u5bf9\u8c61\uff0c\u4eff\u4f5b\u5b83\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u573a\u666f\u3002</p> <p>\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6574\u4e2a\u590d\u6742\u5bf9\u8c61\u5e94\u7528\u53e6\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff1b\u590d\u6742\u5bf9\u8c61\u7684\u5b50\u5bf9\u8c61\u5c06\u968f\u4e4b\u79fb\u52a8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5e94\u7528\u4e8e\u5b50\u5bf9\u8c61\u7684\u603b\u4f53\u53d8\u6362\u7531\u5c06\u5b50\u5bf9\u8c61\u653e\u7f6e\u5230\u590d\u6742\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u4ee5\u53ca\u5c06\u590d\u6742\u5bf9\u8c61\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u7684\u53d8\u6362\u7ec4\u6210\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u7531\u8f83\u5c0f\u5bf9\u8c61\u7ec4\u6210\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u8f83\u5c0f\u5bf9\u8c61\u53c8\u7531\u66f4\u5c0f\u7684\u5bf9\u8c61\u7ec4\u6210\uff0c\u4ee5\u4efb\u610f\u7ea7\u522b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5b83\u4eec\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\u82b1\u6735\u7684\u82b1\u74e3\uff0c\u7136\u540e\u5e94\u7528\u5efa\u6a21\u53d8\u6362\u5c06\u82b1\u74e3\u653e\u7f6e\u5230\u82b1\u6735\u7684\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u3002\u8fd8\u5c06\u6709\u53e6\u4e00\u4e2a\u53d8\u6362\u5c06\u82b1\u6735\u653e\u7f6e\u5230\u830e\u4e0a\uff0c\u4ee5\u53ca\u53e6\u4e00\u4e2a\u53d8\u6362\u5c06\u6574\u4e2a\u76c6\u683d\u82b1\u5349\u653e\u7f6e\u5230\u573a\u666f\u4e2d\u3002\u8fd9\u5c31\u662f\u5c42\u6b21\u5efa\u6a21\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u5c0f\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u7ed8\u5236\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u7ef4\u56fe\u50cf\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6709\u4e24\u4e2a\u8f66\u8f6e\u7684\u624b\u63a8\u8f66\u3002</p> <p> </p> <p>\u8fd9\u8f86\u624b\u63a8\u8f66\u662f\u4e0b\u9762\u793a\u4f8b\u4e2d\u590d\u6742\u573a\u666f\u7684\u4e00\u90e8\u5206\u3002\u624b\u63a8\u8f66\u7684\u8f66\u8eab\u53ef\u4ee5\u7ed8\u5236\u4e3a\u4e00\u5bf9\u77e9\u5f62\u3002\u5bf9\u4e8e\u8f66\u8f6e\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u7f16\u5199\u4e86\u4e00\u4e2a\u5b50\u7a0b\u5e8f</p> <pre><code>drawWheel()\n</code></pre> <p>\u5b83\u7528\u4e8e\u7ed8\u5236\u8f66\u8f6e\u3002\u8fd9\u4e2a\u5b50\u7a0b\u5e8f\u5728\u5b83\u81ea\u5df1\u7684\u81ea\u7136\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\u8f66\u8f6e\u3002\u5728\u8fd9\u4e2a\u5750\u6807\u7cfb\u4e2d\uff0c\u8f66\u8f6e\u4ee5(0,0)\u4e3a\u4e2d\u5fc3\uff0c\u534a\u5f84\u4e3a1\u3002</p> <p>\u5728\u624b\u63a8\u8f66\u7684\u5750\u6807\u7cfb\u4e2d\uff0c\u6211\u53d1\u73b0\u4f7f\u7528\u5927\u77e9\u5f62\u5e95\u90e8\u7684\u4e2d\u70b9\u4f5c\u4e3a\u53c2\u8003\u70b9\u5f88\u65b9\u4fbf\u3002\u6211\u5047\u8bbey\u8f74\u7684\u6b63\u65b9\u5411\u5411\u4e0a\uff0c\u8fd9\u662f\u6570\u5b66\u4e2d\u7684\u5e38\u89c1\u7ea6\u5b9a\u3002\u624b\u63a8\u8f66\u7684\u77e9\u5f62\u8f66\u8eab\u5bbd\u5ea6\u4e3a6\uff0c\u9ad8\u5ea6\u4e3a2\uff0c\u56e0\u6b64\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u5750\u6807\u4e3a(-3,0)\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3cfillRectangle(-3,0,6,2)\u7684\u547d\u4ee4\u6765\u7ed8\u5236\u5b83\u3002\u8f66\u9876\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u7ea2\u8272\u77e9\u5f62\uff0c\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u7ed8\u5236\u3002\u8981\u5b8c\u6210\u624b\u63a8\u8f66\uff0c\u6211\u4eec\u9700\u8981\u5728\u5bf9\u8c61\u4e0a\u6dfb\u52a0\u4e24\u4e2a\u8f66\u8f6e\u3002\u4e3a\u4e86\u4f7f\u8f66\u8f6e\u7684\u5c3a\u5bf8\u9002\u5408\u624b\u63a8\u8f66\uff0c\u5b83\u4eec\u9700\u8981\u8fdb\u884c\u7f29\u653e\u3002\u4e3a\u4e86\u5c06\u5b83\u4eec\u76f8\u5bf9\u4e8e\u624b\u63a8\u8f66\u7684\u8f66\u8eab\u653e\u7f6e\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u8f66\u8f6e\u5fc5\u987b\u5411\u5de6\u5e73\u79fb\uff0c\u53e6\u4e00\u4e2a\u8f66\u8f6e\u5fc5\u987b\u5411\u53f3\u5e73\u79fb\u3002\u5f53\u6211\u7f16\u5199\u8fd9\u4e2a\u793a\u4f8b\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u5c1d\u8bd5\u5404\u79cd\u6570\u5b57\uff0c\u4ee5\u83b7\u5f97\u8f66\u8f6e\u7684\u6b63\u786e\u5c3a\u5bf8\u548c\u4f4d\u7f6e\uff0c\u5e76\u4e14\u6211\u53d1\u73b0\u5982\u679c\u6211\u5c06\u5b83\u4eec\u7a0d\u5fae\u5411\u4e0b\u79fb\u52a8\uff0c\u8f66\u8f6e\u770b\u8d77\u6765\u66f4\u597d\u3002\u4f7f\u7528\u5c42\u6b21\u5efa\u6a21\u7684\u5e38\u89c4\u6280\u672f\uff0c\u6211\u4eec\u5728\u7ed8\u5236\u6bcf\u4e2a\u8f66\u8f6e\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u7684\u53d8\u6362\uff0c\u5e76\u5728\u7ed8\u5236\u8f66\u8f6e\u4e4b\u540e\u6062\u590d\u5b83\u3002\u8fd9\u5c06\u9650\u5236\u8f66\u8f6e\u7684\u5efa\u6a21\u53d8\u6362\u7684\u5f71\u54cd\u8303\u56f4\u4ec5\u9650\u4e8e\u8be5\u8f66\u8f6e\u672c\u8eab\uff0c\u4ee5\u786e\u4fdd\u5b83\u4e0d\u4f1a\u5f71\u54cd\u624b\u63a8\u8f66\u7684\u4efb\u4f55\u5176\u4ed6\u90e8\u5206\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4ee5\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u7ed8\u5236\u624b\u63a8\u8f66\u7684\u5b50\u7a0b\u5e8f\u7684\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>subroutine drawCart() :\nsaveTransform()       // save the current transform\ntranslate(-1.65,-0.1) // center of first wheel will be at (-1.65,-0.1)\nscale(0.8,0.8)        // scale to reduce radius from 1 to 0.8\ndrawWheel()           // draw the first wheel\nrestoreTransform()    // restore the saved transform \nsaveTransform()       // save it again\ntranslate(1.5,-0.1)   // center of second wheel will be at (1.5,-0.1)\nscale(0.8,0.8)        // scale to reduce radius from 1 to 0.8\ndrawWheel()           // draw the second wheel\nrestoreTransform()    // restore the transform\nsetDrawingColor(RED)  // use red color to draw the rectangles\nfillRectangle(-3, 0, 6, 2)      // draw the body of the cart\nfillRectangle(-2.3, 1, 2.6, 1)  // draw the top of the cart\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u540c\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u7528\u4e8e\u7ed8\u5236\u4e24\u4e2a\u8f66\u8f6e\u3002\u4e24\u4e2a\u8f66\u8f6e\u5728\u56fe\u7247\u4e2d\u51fa\u73b0\u5728\u4e0d\u540c\u4f4d\u7f6e\u7684\u539f\u56e0\u662f\u5bf9\u4e24\u4e2a\u5b50\u7a0b\u5e8f\u8c03\u7528\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u3002</p> <p>\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u8fd9\u4e2a\u7ed8\u5236\u624b\u63a8\u8f66\u7684\u5b50\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5176\u6dfb\u52a0\u5230\u573a\u666f\u4e2d\u3002\u5728\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4eec\u5bf9\u6574\u4e2a\u624b\u63a8\u8f66\u5e94\u7528\u53e6\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u8c03\u7528drawCart\u5b50\u7a0b\u5e8f\u6765\u5411\u573a\u666f\u4e2d\u6dfb\u52a0\u591a\u8f86\u624b\u63a8\u8f66\u3002</p> <p>\u4f60\u5e94\u8be5\u6ce8\u610f\u5230\u8fd9\u91cc\u7684\u7c7b\u6bd4\uff1a\u5c06\u5bf9\u8c61\u7ec4\u5408\u6210\u590d\u6742\u573a\u666f\u7c7b\u4f3c\u4e8e\u5c06\u5b50\u7a0b\u5e8f\u7ec4\u5408\u6210\u590d\u6742\u7a0b\u5e8f\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5206\u522b\u5904\u7406\u95ee\u9898\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u5c0f\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u7ec4\u5408\u6210\u5927\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4e00\u65e6\u89e3\u51b3\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u5728\u591a\u4e2a\u5730\u65b9\u91cd\u590d\u4f7f\u7528\u8be5\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f7f\u7528\u624b\u63a8\u8f66\u5728\u52a8\u753b\u573a\u666f\u4e2d\u7684\u6f14\u793a\uff1a</p> <p></p> <p></p> <p>\u4f60\u53ef\u80fd\u53ef\u4ee5\u731c\u5230\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5982\u4f55\u4f7f\u7528\u5c42\u6b21\u5efa\u6a21\u6765\u7ed8\u5236\u4e09\u4e2a\u98ce\u8f66\u3002\u6709\u4e00\u4e2adrawWindmill\u65b9\u6cd5\u7528\u4e8e\u5728\u5176\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\u98ce\u8f66\u3002\u7136\u540e\uff0c\u901a\u8fc7\u5bf9\u6807\u51c6\u98ce\u8f66\u5e94\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u6765\u751f\u6210\u573a\u666f\u4e2d\u7684\u6bcf\u4e2a\u98ce\u8f66\u3002\u6b64\u5916\uff0c\u98ce\u8f66\u672c\u8eab\u662f\u4e00\u4e2a\u7531\u51e0\u4e2a\u5b50\u5bf9\u8c61\u4f7f\u7528\u5404\u79cd\u5efa\u6a21\u53d8\u6362\u6784\u5efa\u800c\u6210\u7684\u590d\u6742\u5bf9\u8c61\u3002</p> <p>\u4e5f\u8bb8\u5f88\u96be\u770b\u51fa\u573a\u666f\u7684\u4e0d\u540c\u90e8\u5206\u5982\u4f55\u8fdb\u884c\u52a8\u753b\u3002\u5b9e\u9645\u4e0a\uff0c\u52a8\u753b\u53ea\u662f\u5efa\u6a21\u7684\u53e6\u4e00\u4e2a\u65b9\u9762\u3002\u8ba1\u7b97\u673a\u52a8\u753b\u7531\u4e00\u7cfb\u5217\u5e27\u7ec4\u6210\u3002\u6bcf\u4e00\u5e27\u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u56fe\u50cf\uff0c\u4e0e\u4e0b\u4e00\u5e27\u76f8\u6bd4\u6709\u5fae\u5c0f\u7684\u53d8\u5316\u3002\u4ece\u6211\u4eec\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6bcf\u4e00\u5e27\u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u573a\u666f\uff0c\u5fc5\u987b\u5355\u72ec\u7ed8\u5236\u3002\u540c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u51fa\u73b0\u5728\u8bb8\u591a\u5e27\u4e2d\u3002\u4e3a\u4e86\u7ed9\u5bf9\u8c61\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e00\u5e27\u4e2d\u5bf9\u5bf9\u8c61\u5e94\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u3002\u53d8\u6362\u4e2d\u4f7f\u7528\u7684\u53c2\u6570\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u65f6\u95f4\u6216\u5e27\u7f16\u53f7\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u4f7f\u624b\u63a8\u8f66\u4ece\u5de6\u5230\u53f3\u79fb\u52a8\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u624b\u63a8\u8f66\u5e94\u7528\u4e00\u4e2a\u5efa\u6a21\u53d8\u6362</p> <pre><code>translate( frameNumber * 0.1, 0 )\n</code></pre> <p>\u5176\u4e2dframeNumber\u662f\u5e27\u7f16\u53f7\u3002\u5728\u6bcf\u4e00\u5e27\u4e2d\uff0c\u624b\u63a8\u8f66\u5c06\u6bd4\u4e0a\u4e00\u5e27\u5411\u53f3\u79fb\u52a80.1\u4e2a\u5355\u4f4d\u3002\uff08\u5b9e\u9645\u4e0a\uff0c\u5728\u5b9e\u9645\u7a0b\u5e8f\u4e2d\uff0c\u5e94\u7528\u4e8e\u624b\u63a8\u8f66\u7684\u5e73\u79fb\u662f</p> <pre><code>translate( -3 + 13*(frameNumber % 300) / 300.0,  0 )\n</code></pre> <p>\u5b83\u5728\u6bcf300\u5e27\u4e2d\u5c06\u624b\u63a8\u8f66\u7684\u53c2\u8003\u70b9\u4ece\u6c34\u5e73\u8f74\u4e0a\u7684-3\u79fb\u52a8\u523013\u3002\u5728\u7528\u4e8e\u573a\u666f\u7684\u5750\u6807\u7cfb\u4e2d\uff0cx\u5750\u6807\u7684\u8303\u56f4\u662f\u4ece0\u52307\uff0c\u56e0\u6b64\u5728\u5927\u90e8\u5206\u5faa\u73af\u4e2d\uff0c\u8fd9\u5c06\u4f7f\u624b\u63a8\u8f66\u8d85\u51fa\u573a\u666f\u8303\u56f4\u3002\uff09</p> <p>\u771f\u6b63\u597d\u7684\u662f\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u52a8\u753b\u4e0e\u5c42\u6b21\u5efa\u6a21\u4e00\u8d77\u4f7f\u7528\u3002\u4f8b\u5982\uff0cdrawWindmill\u65b9\u6cd5\u4e0d\u4ec5\u4ec5\u7ed8\u5236\u4e00\u4e2a\u98ce\u8f66-\u5b83\u7ed8\u5236\u4e00\u4e2a\u5e26\u6709\u65cb\u8f6c\u53f6\u7247\u7684\u52a8\u753b\u98ce\u8f66\u3002\u8fd9\u610f\u5473\u7740\u5e94\u7528\u4e8e\u53f6\u7247\u7684\u65cb\u8f6c\u53d6\u51b3\u4e8e\u5e27\u7f16\u53f7\u3002\u5f53\u5bf9\u98ce\u8f66\u5e94\u7528\u5efa\u6a21\u53d8\u6362\u65f6\uff0c\u65cb\u8f6c\u7684\u53f6\u7247\u4f5c\u4e3a\u6574\u4f53\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u7f29\u653e\u548c\u79fb\u52a8\u3002\u8fd9\u662f\u5c42\u6b21\u5efa\u6a21\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u53f6\u7247\u662f\u98ce\u8f66\u7684\u5b50\u5bf9\u8c61\u3002\u53f6\u7247\u7684\u65cb\u8f6c\u662f\u5c06\u53f6\u7247\u653e\u7f6e\u5230\u98ce\u8f66\u5bf9\u8c61\u4e2d\u7684\u5efa\u6a21\u53d8\u6362\u7684\u4e00\u90e8\u5206\u3002\u7136\u540e\uff0c\u8fdb\u4e00\u6b65\u7684\u5efa\u6a21\u53d8\u6362\u88ab\u5e94\u7528\u5230\u98ce\u8f66\u5bf9\u8c61\u4e2d\u4ee5\u5c06\u5176\u653e\u7f6e\u5728\u573a\u666f\u4e2d\u3002</p> <p>\u6587\u4ef6java2d/HierarchicalModeling2D.java\u5305\u542b\u4e86\u8fd9\u4e2a\u793a\u4f8b\u7684Java\u7248\u672c\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\u3002\u672c\u4e66\u7684\u4e0b\u4e00\u8282\u6db5\u76d6\u4e86Java\u4e2d\u7684\u56fe\u5f62\u7f16\u7a0b\u3002\u4e00\u65e6\u4f60\u719f\u6089\u4e86\u90a3\u90e8\u5206\u5185\u5bb9\uff0c\u4f60\u5e94\u8be5\u770b\u4e00\u4e0b\u6e90\u4ee3\u7801\uff0c\u7279\u522b\u662fpaintComponent()\u65b9\u6cd5\uff0c\u5b83\u7ed8\u5236\u6574\u4e2a\u573a\u666f\u3002\u540c\u6837\u7684\u793a\u4f8b\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u573a\u666f\u56feAPI\uff0c\u5728canvas2d/HierarchicalModel2D.html\u4e2d\u7528JavaScript\u5b9e\u73b0\u3002</p> <p>A major motivation for introducing a new coordinate system is that it should be possible to use the coordinate system that is most natural to the scene that you want to draw. We can extend this idea to individual objects in a scene: When drawing an object, use the coordinate system that is most natural for the object.</p> <p>Usually, we want an object in its natural coordinates to be centered at the origin, (0,0), or at least to use the origin as a convenient reference point. Then, to place it in the scene, we can use a scaling transform, followed by a rotation, followed by a translation to set its size, orientation, and position in the scene. Recall that transformations used in this way are called modeling transformations. The transforms are often applied in the order scale, then rotate, then translate, because scaling and rotation leave the reference point, (0,0), fixed. Once the object has been scaled and rotated, it's easy to use a translation to move the reference point to any desired point in the scene. (Of course, in a particular case, you might not need all three operations.) Remember that in the code, the transformations are specified in the opposite order from the order in which they are applied to the object and that the transformations are specified before drawing the object. So in the code, the translation would come first, followed by the rotation and then the scaling. Modeling transforms are not always composed in this order, but it is the most common usage.</p> <p>The modeling transformations that are used to place an object in the scene should not affect other objects in the scene. To limit their application to just the one object, we can save the current transformation before starting work on the object and restore it afterwards. How this is done differs from one graphics API to another, but let's suppose here that there are subroutines <code>saveTransform()</code> and <code>restoreTransform()</code> for performing those tasks. That is, <code>saveTransform</code> will make a copy of the modeling transformation that is currently in effect and store that copy. It does not change the current transformation; it merely saves a copy. Later, when restoreTransform is called, it will retrieve that copy and will replace the current modeling transform with the retrieved transform. Typical code for drawing an object will then have the form:</p> <pre><code>saveTransform()\ntranslate(dx,dy) // move object into position\nrotate(r)        // set the orientation of the object\nscale(sx,sy)     // set the size of the object\n    .\n    .  // draw the object, using its natural coordinates\n    .\nrestoreTransform()\n</code></pre> <p>Note that we don't know and don't need to know what the saved transform does. Perhaps it is simply the so-called identity transform, which is a transform that doesn't modify the coordinates to which it is applied. Or there might already be another transform in place, such as a coordinate transform that affects the scene as a whole. The modeling transform for the object is effectively applied in addition to any other transform that was specified previously. The modeling transform moves the object from its natural coordinates into its proper place in the scene. Then on top of that, a coordinate transform that is applied to the scene as a whole would carry the object along with it.</p> <p>Now let's extend this idea. Suppose that the object that we want to draw is itself a complex entity, made up of a number of smaller objects. Think, for example, of a potted flower made up of pot, stem, leaves, and bloom. We would like to be able to draw the smaller component objects in their own natural coordinate systems, just as we do the main object. For example, we would like to specify the bloom in a coordinate system in which the center of the bloom is at (0,0). But this is easy: We draw each small component object, such as the bloom, in its own coordinate system, and use a modeling transformation to move the sub-object into position within the main object. We are composing the complex object in its own natural coordinate system as if it were a complete scene.</p> <p>On top of that, we can apply another modeling transformation to the complex object as a whole, to move it into the actual scene; the sub-objects of the complex object are carried along with it. That is, the overall transformation that applies to a sub-object consists of a modeling transformation that places the sub-object into the complex object, followed by the transformation that places the complex object into the scene.</p> <p>In fact, we can build objects that are made up of smaller objects which in turn are made up of even smaller objects, to any level. For example, we could draw the bloom's petals in their own coordinate systems, then apply modeling transformations to place the petals into the natural coordinate system for the bloom. There will be another transformation that moves the bloom into position on the stem, and yet another transformation that places the entire potted flower into the scene. This is hierarchical modeling.</p> <p>Let's look at a little example. Suppose that we want to draw a simple 2D image of a cart with two wheels.</p> <p> </p> <p>This cart is used as one part of a complex scene in an example below. The body of the cart can be drawn as a pair of rectangles. For the wheels, suppose that we have written a subroutine</p> <pre><code>drawWheel()\n</code></pre> <p>that draws a wheel. This subroutine draws the wheel in its own natural coordinate system. In this coordinate system, the wheel is centered at (0,0) and has radius 1.</p> <p>In the cart's coordinate system, I found it convenient to use the midpoint of the base of the large rectangle as the reference point. I assume that the positive direction of the y-axis points upward, which is the common convention in mathematics. The rectangular body of the cart has width 6 and height 2, so the coordinates of the lower left corner of the rectangle are (-3,0), and we can draw it with a command such as fillRectangle(-3,0,6,2). The top of the cart is a smaller red rectangle, which can be drawn in a similar way. To complete the cart, we need to add two wheels to the object. To make the size of the wheels fit the cart, they need to be scaled. To place them in the correct positions relative to body of the cart, one wheel must be translated to the left and the other wheel, to the right. When I coded this example, I had to play around with the numbers to get the right sizes and positions for the wheels, and I found that the wheels looked better if I also moved them down a bit. Using the usual techniques of hierarchical modeling, we save the current transform before drawing each wheel, and we restore it after drawing the wheel. This restricts the effect of the modeling transformation for the wheel to that wheel alone, so that it does not affect any other part of the cart. Here is pseudocode for a subroutine that draws the cart in its own coordinate system:</p> <pre><code>subroutine drawCart() :\nsaveTransform()       // save the current transform\ntranslate(-1.65,-0.1) // center of first wheel will be at (-1.65,-0.1)\nscale(0.8,0.8)        // scale to reduce radius from 1 to 0.8\ndrawWheel()           // draw the first wheel\nrestoreTransform()    // restore the saved transform \nsaveTransform()       // save it again\ntranslate(1.5,-0.1)   // center of second wheel will be at (1.5,-0.1)\nscale(0.8,0.8)        // scale to reduce radius from 1 to 0.8\ndrawWheel()           // draw the second wheel\nrestoreTransform()    // restore the transform\nsetDrawingColor(RED)  // use red color to draw the rectangles\nfillRectangle(-3, 0, 6, 2)      // draw the body of the cart\nfillRectangle(-2.3, 1, 2.6, 1)  // draw the top of the cart\n</code></pre> <p>It's important to note that the same subroutine is used to draw both wheels. The reason that two wheels appear in the picture in different positions is that different modeling transformations are in effect for the two subroutine calls.</p> <p>Once we have this cart-drawing subroutine, we can use it to add a cart to a scene. When we do this, we apply another modeling transformation to the cart as a whole. Indeed, we could add several carts to the scene, if we wanted, by calling the drawCart subroutine several times with different modeling transformations.</p> <p>You should notice the analogy here: Building up a complex scene out of objects is similar to building up a complex program out of subroutines. In both cases, you can work on pieces of the problem separately, you can compose a solution to a big problem from solutions to smaller problems, and once you have solved a problem, you can reuse that solution in several places.</p> <p>Here is a demo that uses the cart in an animated scene:</p> <p></p> <p></p> <p>You can probably guess how hierarchical modeling is used to draw the three windmills in this example. There is a drawWindmill method that draws a windmill in its own coordinate system. Each of the windmills in the scene is then produced by applying a different modeling transform to the standard windmill. Furthermore, the windmill is itself a complex object that is constructed from several sub-objects using various modeling transformations.</p> <p>It might not be so easy to see how different parts of the scene can be animated. In fact, animation is just another aspect of modeling. A computer animation consists of a sequence of frames. Each frame is a separate image, with small changes from one frame to the next. From our point of view, each frame is a separate scene and has to be drawn separately. The same object can appear in many frames. To animate the object, we can simply apply a different modeling transformation to the object in each frame. The parameters used in the transformation can be computed from the current time or from the frame number. To make a cart move from left to right, for example, we might apply a modeling transformation</p> <pre><code>translate( frameNumber * 0.1, 0 )\n</code></pre> <p>to the cart, where frameNumber is the frame number. In each frame, the cart will be 0.1 units farther to the right than in the previous frame. (In fact, in the actual program, the translation that is applied to the cart is</p> <pre><code>translate( -3 + 13*(frameNumber % 300) / 300.0,  0 )\n</code></pre> <p>which moves the reference point of the cart from -3 to 13 along the horizontal axis every 300 frames. In the coordinate system that is used for the scene, the x-coordinate ranges from 0 to 7, so this puts the cart outside the scene for much of the loop.)</p> <p>The really neat thing is that this type of animation works with hierarchical modeling. For example, the drawWindmill method doesn't just draw a windmill\u2014it draws an animated windmill, with turning vanes. That just means that the rotation applied to the vanes depends on the frame number. When a modeling transformation is applied to the windmill, the rotating vanes are scaled and moved as part of the object as a whole. This is an example of hierarchical modeling. The vanes are sub-objects of the windmill. The rotation of the vanes is part of the modeling transformation that places the vanes into the windmill object. Then a further modeling transformation is applied to the windmill object to place it in the scene.</p> <p>The file java2d/HierarchicalModeling2D.java contains the complete source code for a Java version of this example. The next section of this book covers graphics programming in Java. Once you are familiar with that, you should take a look at the source code, especially the paintComponent() method, which draws the entire scene. The same example, using the same scene graph API, is implemented in JavaScript in canvas2d/HierarchicalModel2D.html.</p>"},{"location":"cn/c2/s4/#242--\u573a\u666f\u56fe","title":"2.4.2  \u573a\u666f\u56fe","text":"<p>Scene Graphs</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u590d\u6742\u573a\u666f\u7684\u7ec4\u4ef6\u5f62\u6210\u4e86\u4e00\u4e2a\u7ed3\u6784\u3002\u5728\u8fd9\u4e2a\u7ed3\u6784\u4e2d\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u4e0e\u5176\u5305\u542b\u7684\u5b50\u5bf9\u8c61\u76f8\u5173\u8054\u3002\u5982\u679c\u573a\u666f\u662f\u5206\u5c42\u7684\uff0c\u90a3\u4e48\u7ed3\u6784\u5c31\u662f\u5206\u5c42\u7684\u3002\u8fd9\u79cd\u7ed3\u6784\u88ab\u79f0\u4e3a\u573a\u666f\u56fe(scene graph)\u3002\u573a\u666f\u56fe\u662f\u4e00\u79cd\u7c7b\u4f3c\u6811\u7684\u7ed3\u6784\uff0c\u6839\u8868\u793a\u6574\u4e2a\u573a\u666f\uff0c\u6839\u7684\u5b50\u8282\u70b9\u8868\u793a\u573a\u666f\u4e2d\u7684\u9876\u7ea7\u5bf9\u8c61\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6211\u4eec\u53ef\u4ee5\u53ef\u89c6\u5316\u6211\u4eec\u793a\u4f8b\u573a\u666f\u7684\u573a\u666f\u56fe\uff1a</p> <p> </p> <p>\u5728\u8fd9\u4e2a\u56fe\u4e2d\uff0c\u4e00\u4e2a\u5355\u72ec\u7684\u5bf9\u8c61\u53ef\u4ee5\u4e0e\u4e00\u4e2a\u6216\u591a\u4e2a\u7236\u5bf9\u8c61\u6709\u591a\u4e2a\u8fde\u63a5\u3002\u6bcf\u4e2a\u8fde\u63a5\u8868\u793a\u8be5\u5bf9\u8c61\u5728\u5176\u7236\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4f8b\u5982\uff0c\u201c\u586b\u5145\u7684\u6b63\u65b9\u5f62\u201d\u5bf9\u8c61\u5728\u624b\u63a8\u8f66\u548c\u98ce\u8f66\u4e2d\u4f5c\u4e3a\u5b50\u5bf9\u8c61\u51fa\u73b0\u3002\u5b83\u5728\u624b\u63a8\u8f66\u4e2d\u4f7f\u7528\u4e86\u4e24\u6b21\uff0c\u5728\u98ce\u8f66\u4e2d\u4f7f\u7528\u4e86\u4e00\u6b21\u3002\uff08\u624b\u63a8\u8f66\u5305\u542b\u4e24\u4e2a\u7ea2\u8272\u77e9\u5f62\uff0c\u5b83\u4eec\u88ab\u521b\u5efa\u4e3a\u5177\u6709\u975e\u5747\u5300\u7f29\u653e\u7684\u6b63\u65b9\u5f62\uff1b\u98ce\u8f66\u7684\u6746\u662f\u4e00\u4e2a\u7f29\u653e\u7684\u6b63\u65b9\u5f62\u3002\uff09\u201c\u586b\u5145\u7684\u5706\u201d\u5728\u592a\u9633\u4e2d\u4f7f\u7528\uff0c\u5e76\u5728\u8f6e\u5b50\u4e2d\u4f7f\u7528\u4e86\u4e24\u6b21\u3002\u201c\u7ebf\u201d\u5728\u592a\u9633\u4e2d\u4f7f\u7528\u4e8612\u6b21\uff0c\u5728\u8f6e\u5b50\u4e2d\u4f7f\u7528\u4e8612\u6b21\uff1b\u6211\u753b\u4e86\u4e00\u6839\u7c97\u7bad\u5934\uff0c\u6807\u670912\uff0c\u8868\u793a12\u4e2a\u8fde\u63a5\u3002\u8f6e\u5b50\u53c8\u5728\u624b\u63a8\u8f66\u4e2d\u4f7f\u7528\u4e86\u4e24\u6b21\u3002\uff08\u51fa\u4e8e\u7a7a\u95f4\u539f\u56e0\uff0c\u6211\u7684\u56fe\u8868\u4e2d\u7701\u7565\u4e86\u573a\u666f\u4e2d\u586b\u5145\u7684\u6b63\u65b9\u5f62\u7684\u4e24\u4e2a\u51fa\u73b0\uff1a\u5b83\u4eec\u7528\u4e8e\u5236\u4f5c\u9053\u8def\u548c\u9053\u8def\u4e2d\u592e\u7684\u7ebf\u3002\uff09</p> <p>\u56fe\u7247\u4e2d\u7684\u6bcf\u4e2a\u7bad\u5934\u90fd\u53ef\u4ee5\u4e0e\u5c06\u5b50\u5bf9\u8c61\u653e\u7f6e\u5230\u5176\u7236\u5bf9\u8c61\u4e2d\u7684\u5efa\u6a21\u53d8\u6362\u76f8\u5173\u8054\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5305\u542b\u591a\u4e2a\u5b50\u5bf9\u8c61\u7684\u526f\u672c\u65f6\uff0c\u8fde\u63a5\u5b50\u5bf9\u8c61\u4e0e\u5bf9\u8c61\u7684\u6bcf\u4e2a\u7bad\u5934\u5c06\u5177\u6709\u4e0d\u540c\u7684\u5173\u8054\u5efa\u6a21\u53d8\u6362\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u526f\u672c\uff0c\u5bf9\u8c61\u662f\u76f8\u540c\u7684\uff1b\u53ea\u6709\u53d8\u6362\u4e0d\u540c\u3002</p> <p>\u867d\u7136\u573a\u666f\u56fe\u5728\u6982\u5ff5\u4e0a\u5b58\u5728\uff0c\u4f46\u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u5b83\u53ea\u662f\u9690\u5f0f\u5b58\u5728\u7684\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u63d0\u5230\u7684\u7a0b\u5e8f\u7684Java\u7248\u672c\u4ee5\u201c\u8fc7\u7a0b\u5316\u201d\u7684\u65b9\u5f0f\u7ed8\u5236\u56fe\u50cf\uff0c\u5373\u901a\u8fc7\u8c03\u7528\u5b50\u7a0b\u5e8f\u3002\u6ca1\u6709\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\u573a\u666f\u56fe\u3002\u76f8\u53cd\uff0c\u573a\u666f\u56fe\u9690\u542b\u5728\u7ed8\u5236\u573a\u666f\u7684\u5b50\u7a0b\u5e8f\u8c03\u7528\u5e8f\u5217\u4e2d\u3002\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u5b50\u7a0b\u5e8f\uff0c\u6bcf\u4e2a\u7bad\u5934\u90fd\u662f\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u8c03\u7528\u3002\u4f7f\u7528\u4e0d\u540c\u7684\u5efa\u6a21\u53d8\u6362\u7ed8\u5236\u5404\u79cd\u5bf9\u8c61\u3002\u6b63\u5982\u5b50\u8282 2.3.8\u4e2d\u6240\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u8ba1\u7b97\u673a\u53ea\u8ddf\u8e2a\u8868\u793a\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u6362\u7684\u201c\u5f53\u524d\u53d8\u6362\u201d\u3002\u5f53\u5b50\u7a0b\u5e8f\u7ed8\u5236\u5bf9\u8c61\u65f6\uff0c\u7a0b\u5e8f\u5728\u8c03\u7528\u5b50\u7a0b\u5e8f\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u3002\u5b50\u7a0b\u5e8f\u8fd4\u56de\u540e\uff0c\u4fdd\u5b58\u7684\u53d8\u6362\u5c06\u88ab\u6062\u590d\u3002\u5728\u5b50\u7a0b\u5e8f\u5185\u90e8\uff0c\u5bf9\u8c61\u5728\u5176\u81ea\u5df1\u7684\u5750\u6807\u7cfb\u4e2d\u7ed8\u5236\uff0c\u53ef\u80fd\u8c03\u7528\u5176\u4ed6\u5b50\u7a0b\u5e8f\u4ee5\u7ed8\u5236\u5177\u6709\u81ea\u5df1\u7684\u5efa\u6a21\u53d8\u6362\u7684\u5b50\u5bf9\u8c61\u3002\u8fd9\u4e9b\u989d\u5916\u7684\u53d8\u6362\u5728\u5b50\u7a0b\u5e8f\u5916\u90e8\u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u4e3a\u5728\u8c03\u7528\u5b50\u7a0b\u5e8f\u4e4b\u524d\u751f\u6548\u7684\u53d8\u6362\u5728\u5b50\u7a0b\u5e8f\u8fd4\u56de\u540e\u5c06\u88ab\u6062\u590d\u3002</p> <p>\u573a\u666f\u56fe\u4e5f\u53ef\u4ee5\u7531\u7a0b\u5e8f\u4e2d\u7684\u5b9e\u9645\u6570\u636e\u7ed3\u6784\u8868\u793a\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e2d\uff0c\u573a\u666f\u4e2d\u7684\u56fe\u5f62\u5bf9\u8c61\u7531\u7a0b\u5e8f\u5bf9\u8c61\u8868\u793a\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u6784\u5efa\u9762\u5411\u5bf9\u8c61\u7684\u573a\u666f\u56feAPI\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5728Java\u4e2d\u5b9e\u73b0\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u770b\u4e00\u4e0bjava2d/SceneGraphAPI2D.java\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7ed8\u5236\u4e86\u4e0e\u524d\u9762\u793a\u4f8b\u76f8\u540c\u7684\u52a8\u753b\u573a\u666f\uff0c\u4f46\u5b83\u4f7f\u7528\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\u573a\u666f\uff0c\u800c\u4e0d\u662f\u8fc7\u7a0b\u5316\u7684\u65b9\u5f0f\u3002\u76f8\u540c\u7684\u573a\u666f\u56feAPI\u5728\u6b64\u9875\u9762\u65e9\u671f\u663e\u793a\u7684\u5b9e\u65f6\u6f14\u793a\u4e2d\u7528JavaScript\u5b9e\u73b0\uff0c\u9605\u8bfb\u5b8c\u7b2c2.6\u8282\u4e2d\u5173\u4e8eHTML\u753b\u5e03\u56fe\u5f62\u7684\u5185\u5bb9\u540e\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u5176\u6e90\u4ee3\u7801\u3002</p> <p>\u5728\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u65e0\u8bba\u662f\u5728Java\u8fd8\u662fJavaScript\u4e2d\uff0c\u573a\u666f\u56fe\u4e2d\u7684\u8282\u70b9\u90fd\u7531\u5c5e\u4e8e\u540d\u4e3aSceneGraphNode\u7684\u7c7b\u7684\u5bf9\u8c61\u8868\u793a\u3002SceneGraphNode\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u573a\u666f\u56fe\u4e2d\u7684\u5b9e\u9645\u8282\u70b9\u7531\u8be5\u7c7b\u7684\u5b50\u7c7b\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c\u6709\u4e00\u4e2a\u540d\u4e3aCompoundObject\u7684\u5b50\u7c7b\uff0c\u7528\u4e8e\u8868\u793a\u7531\u5b50\u5bf9\u8c61\u7ec4\u6210\u7684\u590d\u6742\u56fe\u5f62\u5bf9\u8c61\u3002\u7c7b\u578b\u4e3aCompoundObject\u7684\u53d8\u91cfobj\u5305\u62ec\u4e00\u4e2a\u65b9\u6cd5obj.add(subobj)\uff0c\u7528\u4e8e\u5c06\u5b50\u5bf9\u8c61\u6dfb\u52a0\u5230\u590d\u5408\u5bf9\u8c61\u4e2d\u3002</p> <p>\u5f53\u5c06\u573a\u666f\u56fe\u5b9e\u73b0\u4e3a\u7531\u5bf9\u8c61\u7ec4\u6210\u7684\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u53d8\u6362\u3002\u4e00\u4e2a\u9009\u62e9\u662f\u5141\u8bb8\u5c06\u53d8\u6362\u4e0e\u573a\u666f\u56fe\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u5173\u8054\u8d77\u6765\u3002\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u51b3\u5b9a\u4f7f\u7528\u7279\u6b8a\u8282\u70b9\u6765\u8868\u793a\u53d8\u6362\uff0c\u4f5c\u4e3aTransformedObject\u7c7b\u578b\u7684\u5bf9\u8c61\u3002TransformedObject\u662f\u4e00\u4e2a\u5305\u542b\u6307\u5411\u53e6\u4e00\u4e2aSceneGraphNode\u7684\u94fe\u63a5\u4ee5\u53ca\u5305\u542b\u8981\u5e94\u7528\u4e8e\u8be5\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\u7684SceneGraphNode\u3002\u5efa\u6a21\u53d8\u6362\u662f\u4ee5\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u91cf\u5f62\u5f0f\u7ed9\u51fa\u7684\uff0c\u8fd9\u4e9b\u91cf\u662f\u5bf9\u8c61\u4e2d\u7684\u5b9e\u4f8b\u53d8\u91cf\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u65e0\u8bba\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u5b9e\u4f8b\u53d8\u91cf\u7684\u987a\u5e8f\u5982\u4f55\uff0c\u8fd9\u4e9b\u53d8\u6362\u603b\u662f\u6309\u7167\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u987a\u5e8f\u5e94\u7528\u3002\u5982\u679c\u8981\u8fdb\u884c\u5e73\u79fb\u540e\u65cb\u8f6c\u7684\u64cd\u4f5c\uff0c\u5219\u9700\u8981\u4f7f\u7528\u4e24\u4e2aTransformedObject\u6765\u5b9e\u73b0\uff0c\u56e0\u4e3a\u5728\u540c\u4e00\u4e2aTransformedObject\u4e2d\u7684\u5e73\u79fb\u548c\u65cb\u8f6c\u5c06\u6309\u7167\u65cb\u8f6c-\u7136\u540e-\u5e73\u79fb\u7684\u987a\u5e8f\u5e94\u7528\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7f29\u653e\u3001\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u8bbe\u7f6e\u5668\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7b49\u4e8e\u5bf9\u8c61\u672c\u8eab\u3002\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u5c06\u8c03\u7528\u65b9\u6cd5\u7684\u94fe\u5f0f\u8c03\u7528\u94fe\u6210\u4e00\u4e2a\u8bed\u53e5\uff0c\u4f8b\u5982</p> <pre><code>transformedObject.setScale(5,2).setTranslation(3.5,0);\n</code></pre> <p>\u751a\u81f3\u53ef\u4ee5\u8fd9\u6837\u8bf4</p> <pre><code>world.add(\n    new TransformedObject(windmill).setScale(0.4,0.4).setTranslation(2.2,1.3)\n);\n</code></pre> <p>\u8fd9\u79cd\u94fe\u5f0f\u8c03\u7528\u53ef\u4ee5\u4f7f\u4ee3\u7801\u66f4\u7d27\u51d1\uff0c\u53ef\u4ee5\u6d88\u9664\u8bb8\u591a\u989d\u5916\u7684\u4e34\u65f6\u53d8\u91cf\u7684\u9700\u8981\u3002</p> <p>\u8fd8\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u989c\u8272\u3002\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u521b\u5efa\u4e00\u4e2a\u7c7b\u4f3c\u4e8eTransformedObject\u7684ColoredObject\u7c7b\u3002\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u53ea\u662f\u5728\u4e3bScreenGraphNode\u7c7b\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2asetColor()\u65b9\u6cd5\u3002\u8bbe\u7f6e\u5728\u590d\u5408\u5bf9\u8c61\u4e0a\u7684\u989c\u8272\u4f1a\u88ab\u5176\u5b50\u5bf9\u8c61\u7ee7\u627f\uff0c\u9664\u975e\u5728\u5b50\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u4e86\u4e0d\u540c\u7684\u989c\u8272\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u590d\u5408\u5bf9\u8c61\u4e0a\u7684\u989c\u8272\u5145\u5f53\u5176\u5b50\u5bf9\u8c61\u7684\u9ed8\u8ba4\u989c\u8272\uff0c\u4f46\u53ef\u4ee5\u5728\u5b50\u5bf9\u8c61\u4e0a\u8986\u76d6\u989c\u8272\u3002</p> <p>\u9664\u4e86\u590d\u5408\u5bf9\u8c61\u548c\u53d8\u6362\u5bf9\u8c61\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u573a\u666f\u56fe\u8282\u70b9\u6765\u8868\u793a\u5360\u636e\u573a\u666f\u56fe\u5e95\u5c42\u7684\u57fa\u672c\u56fe\u5f62\u5bf9\u8c61\u3002\u8fd9\u4e9b\u8282\u70b9\u5728\u6700\u540e\u8fdb\u884c\u5b9e\u9645\u7ed8\u5236\u3002</p> <p>\u5bf9\u4e8e\u719f\u6089\u6570\u636e\u7ed3\u6784\u7684\u4eba\u6765\u8bf4\uff0c\u6211\u8981\u6ce8\u610f\u7684\u662f\uff0c\u573a\u666f\u56fe\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u201c\u6709\u5411\u65e0\u73af\u56fe\u201d\u6216\u201cDAG\u201d\u7684\u4f8b\u5b50\u3002\u7ed8\u5236\u573a\u666f\u7684\u8fc7\u7a0b\u6d89\u53ca\u5bf9\u8be5DAG\u7684\u904d\u5386\u3002\u672f\u8bed\u201c\u65e0\u73af\u201d\u610f\u5473\u7740\u56fe\u4e2d\u4e0d\u80fd\u6709\u5faa\u73af\u3002\u5bf9\u4e8e\u573a\u666f\u56fe\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u660e\u663e\u7684\u8981\u6c42\uff0c\u5373\u4e00\u4e2a\u5bf9\u8c61\u4e0d\u80fd\u662f\u5176\u672c\u8eab\u7684\u5b50\u5bf9\u8c61\uff0c\u65e0\u8bba\u662f\u76f4\u63a5\u8fd8\u662f\u95f4\u63a5\u7684\u3002</p> <p>Logically, the components of a complex scene form a structure. In this structure, each object is associated with the sub-objects that it contains. If the scene is hierarchical, then the structure is hierarchical. This structure is known as a scene graph. A scene graph is a tree-like structure, with the root representing the entire scene, the children of the root representing the top-level objects in the scene, and so on. We can visualize the scene graph for our sample scene:</p> <p> </p> <p>In this drawing, a single object can have several connections to one or more parent objects. Each connection represents one occurrence of the object in its parent object. For example, the \"filled square\" object occurs as a sub-object in the cart and in the windmill. It is used twice in the cart and once in the windmill. (The cart contains two red rectangles, which are created as squares with a non-uniform scaling; the pole of the windmill is made as a scaled square.) The \"filled circle\" is used in the sun and is used twice in the wheel. The \"line\" is used 12 times in the sun and 12 times in the wheel; I've drawn one thick arrow, marked with a 12, to represent 12 connections. The wheel, in turn, is used twice in the cart. (My diagram leaves out, for lack of space, two occurrences of the filled square in the scene: It is used to make the road and the line down the middle of the road.)</p> <p>Each arrow in the picture can be associated with a modeling transformation that places the sub-object into its parent object. When an object contains several copies of a sub-object, each arrow connecting the sub-object to the object will have a different associated modeling transformation. The object is the same for each copy; only the transformation differs.</p> <p>Although the scene graph exists conceptually, in some applications it exists only implicitly. For example, the Java version of the program that was mentioned above draws the image \"procedurally,\" that is, by calling subroutines. There is no data structure to represent the scene graph. Instead, the scene graph is implicit in the sequence of subroutine calls that draw the scene. Each node in the graph is a subroutine, and each arrow is a subroutine call. The various objects are drawn using different modeling transformations. As discussed in Subsection 2.3.8, the computer only keeps track of a \"current transformation\" that represents all the transforms that are applied to an object. When an object is drawn by a subroutine, the program saves the current transformation before calling the subroutine. After the subroutine returns, the saved transformation is restored. Inside the subroutine, the object is drawn in its own coordinate system, possibly calling other subroutines to draw sub-objects with their own modeling transformations. Those extra transformations will have no effect outside of the subroutine, since the transform that is in effect before the subroutine is called will be restored after the subroutine returns.</p> <p>It is also possible for a scene graph to be represented by an actual data structure in the program. In an object-oriented approach, the graphical objects in the scene are represented by program objects. There are many ways to build an object-oriented scene graph API. For a simple example implemented in Java, you can take a look at java2d/SceneGraphAPI2D.java. This program draws the same animated scene as the previous example, but it represents the scene with an object-oriented data structure rather than procedurally. The same scene graph API is implemented in JavaScript in the live demo shown earlier on this page, and you might take a look at its source code after you read about HTML canvas graphics in Section 2.6.</p> <p>In the example program, both in Java and in JavaScript, a node in the scene graph is represented by an object belonging to a class named SceneGraphNode. SceneGraphNode is an abstract class, and actual nodes in the scene graph are defined by subclasses of that class. For example, there is a subclass named CompoundObject to represent a complex graphical object that is made up of sub-objects. A variable, obj, of type CompoundObject includes a method obj.add(subobj) for adding a sub-object to the compound object.</p> <p>When implementing a scene graph as a data structure made up of objects, a decision has to be made about how to handle transforms. One option is to allow transformations to be associated with any node in the scene graph. In this case, however, I decided to use special nodes to represent transforms as objects of type TransformedObject. A TransformedObject is a SceneGraphNode that contains a link to another SceneGraphNode and also contains a modeling transformation that is to be applied to that object. The modeling transformation is given in terms of scaling, rotation, and translation amounts that are instance variables in the object. It is worth noting that these are always applied in the order scale, then rotate, then translate, no matter what order the instance variables are set in the code. If you want to do a translation followed by a rotation, you will need two TransformedObject to implement it, since a translation plus a rotation in the same TransformedObject would be applied in the order rotate-then-translate. It is also worth noting that the setter methods for the scaling, rotation, and translation have a return value that is equal to the object. This makes it possible to chain calls to the methods into a single statement such as</p> <pre><code>transformedObject.setScale(5,2).setTranslation(3.5,0);\n</code></pre> <p>and even say things like</p> <pre><code>world.add(\n    new TransformedObject(windmill).setScale(0.4,0.4).setTranslation(2.2,1.3)\n);\n</code></pre> <p>This type of chaining can make for more compact code and can eliminate the need for a lot of extra temporary variables.</p> <p>Another decision has to be made about how to handle color. One possibility would be to make a ColoredObject class similar to TransformedObject. However, in this case I just added a setColor() method to the main ScreenGraphNode class. A color that is set on a compound object is inherited by any sub-objects, unless a different color is set on the sub-object. In other words, a color on a compound object acts as a default color for its sub-objects, but color can be overridden on the sub-objects.</p> <p>In addition to compound objects and transformed objects, we need scene graph nodes to represent the basic graphical objects that occupy the bottom level of the scene graph. These are the nodes that do the actual drawing in the end.</p> <p>For those who are familiar with data structures, I will note that a scene graph is actually an example of a \"directed acyclic graph\" or \"dag.\" The process of drawing the scene involves a traversal of this dag. The term \"acyclic\" means that there can't be cycles in the graph. For a scene graph, this is the obvious requirement that an object cannot be a sub-object, either directly or indirectly, of itself.</p>"},{"location":"cn/c2/s4/#243--\u53d8\u6362\u5806\u6808","title":"2.4.3  \u53d8\u6362\u5806\u6808","text":"<p>The Transform Stack</p> \u4e2d\u6587\u82f1\u6587 <p>\u5047\u8bbe\u60a8\u7f16\u5199\u4e86\u4e00\u4e2a\u7ed8\u5236\u5bf9\u8c61\u7684\u5b50\u4f8b\u7a0b\u3002\u5728\u5b50\u4f8b\u7a0b\u7684\u5f00\u59cb,\u60a8\u4f7f\u7528\u8bf8\u5982<code>saveTransform()</code>\u4e4b\u7c7b\u7684\u4f8b\u7a0b\u6765\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\u3002\u5728\u5b50\u4f8b\u7a0b\u7684\u672b\u5c3e,\u60a8\u8c03\u7528<code>restoreTransform()</code>\u5c06\u5f53\u524d\u53d8\u6362\u91cd\u7f6e\u4e3a\u5df2\u4fdd\u5b58\u7684\u503c\u3002\u73b0\u5728,\u4e3a\u4e86\u8fd9\u5728\u5206\u5c42\u56fe\u5f62\u4e2d\u6b63\u786e\u5de5\u4f5c,\u8fd9\u4e9b\u4f8b\u7a0b\u5b9e\u9645\u4e0a\u5fc5\u987b\u4f7f\u7528\u53d8\u6362\u7684\u5806\u6808(stack)\u3002(\u56de\u60f3\u4e00\u4e0b,\u5806\u6808\u53ea\u662f\u4e00\u4e2a\u5217\u8868,\u53ef\u4ee5\u5728\u5217\u8868\u7684\u4e00\u7aef\u6dfb\u52a0\u6216\"\u63a8\u5165\"\u9879\u76ee,\u5e76\u4ece\u540c\u4e00\u7aef\u79fb\u9664\u6216\"\u5f39\u51fa\"\u9879\u76ee\u3002)\u95ee\u9898\u5728\u4e8e,\u5728\u7ed8\u5236\u590d\u6742\u5bf9\u8c61\u65f6,\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u5b50\u4f8b\u7a0b\u3002\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u540c\u65f6\u6fc0\u6d3b\u591a\u4e2a\u7ed8\u56fe\u5b50\u4f8b\u7a0b,\u6bcf\u4e2a\u5b50\u4f8b\u7a0b\u90fd\u6709\u81ea\u5df1\u4fdd\u5b58\u7684\u53d8\u6362\u3002\u5f53\u5728\u53e6\u4e00\u4e2a\u53d8\u6362\u5df2\u7ecf\u4fdd\u5b58\u7684\u60c5\u51b5\u4e0b\u4fdd\u5b58\u4e00\u4e2a\u53d8\u6362\u65f6,\u7cfb\u7edf\u9700\u8981\u8bb0\u4f4f\u4e24\u4e2a\u53d8\u6362\u3002\u5f53\u8c03\u7528<code>restoreTransform()</code>\u65f6,\u5e94\u8be5\u6062\u590d\u6700\u8fd1\u4fdd\u5b58\u7684\u53d8\u6362\u3002</p> <p>\u5806\u6808\u6b63\u597d\u5177\u6709\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\u6240\u9700\u7684\u7ed3\u6784\u3002\u5728\u5f00\u59cb\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d,\u60a8\u4f1a\u5c06\u5f53\u524d\u53d8\u6362\u63a8\u5165\u5806\u6808\u3002\u7ed8\u5236\u5bf9\u8c61\u540e,\u60a8\u4f1a\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u53d8\u6362\u3002\u5728\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4,\u5982\u679c\u5bf9\u8c61\u662f\u5206\u5c42\u7684,\u5219\u5176\u5b50\u5bf9\u8c61\u7684\u53d8\u6362\u5c06\u6839\u636e\u9700\u8981\u88ab\u63a8\u5165\u548c\u5f39\u51fa\u5806\u6808\u3002</p> <p>\u4e00\u4e9b\u56fe\u5f62API\u5df2\u7ecf\u5b9a\u4e49\u4e86\u53d8\u6362\u5806\u6808\u3002\u4f8b\u5982,\u539f\u59cb\u7684OpenGL API\u5305\u62ecglPushMatrix()\u548cglPopMatrix()\u51fd\u6570,\u7528\u4e8e\u4f7f\u7528\u5185\u7f6e\u4e8eOpenGL\u4e2d\u7684\u53d8\u6362\u77e9\u9635\u5806\u6808\u3002Java Graphics2D API\u6ca1\u6709\u5185\u7f6e\u7684\u53d8\u6362\u5806\u6808,\u4f46\u5b83\u786e\u5b9e\u6709\u83b7\u53d6\u548c\u8bbe\u7f6e\u5f53\u524d\u53d8\u6362\u7684\u65b9\u6cd5,\u8fd9\u4e9b\u83b7\u53d6\u548c\u8bbe\u7f6e\u65b9\u6cd5\u53ef\u4ee5\u4e0e\u663e\u5f0f\u7684\u5806\u6808\u6570\u636e\u7ed3\u6784\u4e00\u8d77\u4f7f\u7528,\u4ee5\u5b9e\u73b0\u5fc5\u8981\u7684\u64cd\u4f5c\u3002\u5f53\u6211\u4eec\u8f6c\u5411\u7528\u4e8e2D\u56fe\u5f62\u7684HTML canvas API\u65f6,\u6211\u4eec\u4f1a\u770b\u5230\u5b83\u5305\u542b\u540d\u4e3asave()\u548crestore()\u7684\u51fd\u6570,\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u5bf9\u5806\u6808\u7684\u63a8\u5165\u548c\u5f39\u51fa\u64cd\u4f5c\u3002\u8fd9\u4e9b\u51fd\u6570\u5bf9\u4e8e\u5b9e\u73b0HTML canvas\u7684\u5206\u5c42\u56fe\u5f62\u81f3\u5173\u91cd\u8981\u3002</p> <p>\u8ba9\u6211\u4eec\u8bd5\u7740\u5c06\u8fd9\u4e9b\u5168\u90e8\u7ed3\u5408\u8d77\u6765,\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u5e94\u7528\u4e8e\u793a\u4f8b\u573a\u666f\u4e2d\u524d\u8f6e\u8f66\u8f6e\u7684\u4e00\u4e2a\u586b\u5145\u5706\u5708\u8fd9\u6837\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\u3002\u8fd9\u91cc,\u6211\u91cd\u65b0\u6392\u5217\u4e86\u8be5\u573a\u666f\u56fe\u7684\u4e00\u90e8\u5206,\u5e76\u6dfb\u52a0\u4e86\u6807\u7b7e\u6765\u663e\u793a\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362:</p> <p> </p> <p>\u8f6e\u5b50\u7684\u65cb\u8f6c\u91cf\u548c\u8f66\u7684\u5e73\u79fb\u91cf\u88ab\u663e\u793a\u4e3a\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u52a8\u753b\u7684\u4e0d\u540c\u5e27\u4e2d\u662f\u4e0d\u540c\u7684\u3002\u5f53\u8ba1\u7b97\u673a\u5f00\u59cb\u7ed8\u5236\u573a\u666f\u65f6\uff0c\u751f\u6548\u7684\u5efa\u6a21\u53d8\u6362\u662f\u6052\u7b49\u53d8\u6362\uff0c\u5373\u6ca1\u6709\u4efb\u4f55\u53d8\u6362\u3002\u5728\u51c6\u5907\u7ed8\u5236\u8f66\u65f6\uff0c\u5b83\u901a\u8fc7\u5c06\u5f53\u524d\u53d8\u6362\uff08\u6052\u7b49\u53d8\u6362\uff09\u63a8\u5165\u5806\u6808\u6765\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\u3002\u7136\u540e\uff0c\u5b83\u901a\u8fc7\u5c06\u8f66\u7684\u5efa\u6a21\u53d8\u6362scale(0.3,0.3)\u548ctranslate(dx,0)\u4e0e\u5f53\u524d\u53d8\u6362\u76f8\u4e58\u6765\u4fee\u6539\u5f53\u524d\u53d8\u6362\u3002\u5f53\u7ed8\u5236\u8f6e\u5b50\u65f6\uff0c\u5b83\u518d\u6b21\u5c06\u5f53\u524d\u53d8\u6362\uff08\u6574\u4e2a\u8f66\u7684\u5efa\u6a21\u53d8\u6362\uff09\u63a8\u5165\u5806\u6808\uff0c\u5e76\u4fee\u6539\u5f53\u524d\u53d8\u6362\u4ee5\u8003\u8651\u8f6e\u5b50\u7684\u5efa\u6a21\u53d8\u6362\u3002\u7c7b\u4f3c\u5730\uff0c\u5f53\u7ed8\u5236\u586b\u5145\u5706\u65f6\uff0c\u5b83\u4fdd\u5b58\u8f6e\u5b50\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u7136\u540e\u5e94\u7528\u5706\u7684\u5efa\u6a21\u53d8\u6362\u3002</p> <p>\u5f53\u5706\u5b9e\u9645\u7ed8\u5236\u5728\u573a\u666f\u4e2d\u65f6\uff0c\u5b83\u4f1a\u901a\u8fc7\u7ec4\u5408\u53d8\u6362\u8fdb\u884c\u53d8\u6362\u3002\u8be5\u53d8\u6362\u5c06\u5706\u76f4\u63a5\u653e\u5165\u573a\u666f\u4e2d\uff0c\u4f46\u662f\u5b83\u662f\u7531\u5c06\u5706\u653e\u5165\u8f6e\u5b50\u7684\u53d8\u6362\u3001\u5c06\u8f6e\u5b50\u653e\u5165\u8f66\u4e2d\u7684\u53d8\u6362\u548c\u5c06\u8f66\u653e\u5165\u573a\u666f\u4e2d\u7684\u53d8\u6362\u7ec4\u6210\u7684\u3002\u5728\u7ed8\u5236\u5706\u4e4b\u540e\uff0c\u8ba1\u7b97\u673a\u4f7f\u7528\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u7684\u5f53\u524d\u53d8\u6362\u66ff\u6362\u5f53\u524d\u53d8\u6362\u3002\u90a3\u5c06\u662f\u6574\u4e2a\u8f6e\u5b50\u7684\u5efa\u6a21\u53d8\u6362\uff0c\u5e76\u4e14\u8be5\u53d8\u6362\u5c06\u7528\u4e8e\u7ed8\u5236\u4efb\u4f55\u8fdb\u4e00\u6b65\u7684\u8f6e\u5b50\u90e8\u5206\u3002\u5f53\u5b8c\u6210\u8f6e\u5b50\u65f6\uff0c\u8f66\u7684\u53d8\u6362\u88ab\u5f39\u51fa\u3002\u5f53\u5b8c\u6210\u8f66\u65f6\uff0c\u539f\u59cb\u53d8\u6362\uff08\u6052\u7b49\u53d8\u6362\uff09\u88ab\u5f39\u51fa\u3002\u5f53\u8ba1\u7b97\u673a\u8fdb\u5165\u573a\u666f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u5b83\u518d\u6b21\u4ece\u6052\u7b49\u53d8\u6362\u4f5c\u4e3a\u8d77\u70b9\u5f00\u59cb\u6574\u4e2a\u8fc7\u7a0b\u3002</p> <p>\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u5f88\u590d\u6742\uff0c\u4f46\u6211\u5e94\u8be5\u5f3a\u8c03\uff0c\u8fd9\u662f\u8ba1\u7b97\u673a\u4e3a\u60a8\u6267\u884c\u7684\u64cd\u4f5c\u3002\u60a8\u7684\u8d23\u4efb\u53ea\u662f\u8bbe\u8ba1\u5404\u4e2a\u5bf9\u8c61\uff0c\u4f7f\u7528\u5b83\u4eec\u81ea\u5df1\u7684\u81ea\u7136\u5750\u6807\u7cfb\u3002\u4f5c\u4e3a\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u60a8\u6307\u5b9a\u4e86\u5e94\u7528\u4e8e\u8be5\u5bf9\u8c61\u7684\u5b50\u5bf9\u8c61\u7684\u5efa\u6a21\u53d8\u6362\u3002\u60a8\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u6784\u5efa\u6574\u4e2a\u573a\u666f\u3002\u8ba1\u7b97\u673a\u5c06\u4e3a\u60a8\u5c06\u6240\u6709\u5185\u5bb9\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u8003\u8651\u5230\u8bb8\u591a\u5c42\u6b21\u7684\u5206\u5c42\u7ed3\u6784\u3002\u60a8\u4e00\u6b21\u53ea\u9700\u5904\u7406\u7ed3\u6784\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u3002\u8fd9\u5c31\u662f\u5206\u5c42\u8bbe\u8ba1\u7684\u5a01\u529b\u6240\u5728\uff1b\u8fd9\u5c31\u662f\u5b83\u5982\u4f55\u5e2e\u52a9\u60a8\u5904\u7406\u590d\u6742\u6027\u3002</p> <p>Suppose that you write a subroutine to draw an object. At the beginning of the subroutine, you use a routine such as saveTransform() to save a copy of the current transform. At the end of the subroutine, you call restoreTransform() to reset the current transform back to the value that was saved. Now, in order for this to work correctly for hierarchical graphics, these routines must actually use a stack of transforms. (Recall that a stack is simply a list where items can be added, or \"pushed,\" onto one end of the list and removed, or \"popped,\" from the same end.) The problem is that when drawing a complex object, one subroutine can call other subroutines. This means that several drawing subroutines can be active at the same time, each with its own saved transform. When a transform is saved after another transform has already been saved, the system needs to remember both transforms. When restoreTransform() is called, it is the most recently saved transform that should be restored.</p> <p>A stack has exactly the structure that is needed to implement these operations. Before you start drawing an object, you would push the current transform onto the stack. After drawing the object, you would pop the transform from the stack. Between those two operations, if the object is hierarchical, the transforms for its sub-objects will have been pushed onto and popped from the stack as needed.</p> <p>Some graphics APIs come with transform stacks already defined. For example, the original OpenGL API includes the functions glPushMatrix() and glPopMatrix() for using a stack of transformation matrices that is built into OpenGL. The Java Graphics2D API does not include a built-in stack of transforms, but it does have methods for getting and setting the current transform, and the get and set methods can be used with an explicit stack data structure to implement the necessary operations. When we turn to the HTML canvas API for 2D graphics, we'll see that it includes functions named save() and restore() that are actually push and pop operations on a stack. These functions are essential to implementing hierarchical graphics for an HTML canvas.</p> <p>Let's try to bring this all together by considering how it applies to a simple object in a complex scene: one of the filled circles that is part of the front wheel on the cart in our example scene. Here, I have rearranged part of the scene graph for that scene, and I've added labels to show the modeling transformations that are applied to each object:</p> <p> </p> <p>The rotation amount for the wheel and the translation amount for the cart are shown as variables, since they are different in different frames of the animation. When the computer starts drawing the scene, the modeling transform that is in effect is the identity transform, that is, no transform at all. As it prepares to draw the cart, it saves a copy of the current transform (the identity) by pushing it onto the stack. It then modifies the current transform by multiplying it by the modeling transforms for the cart, scale(0.3,0.3) and translate(dx,0). When it comes to drawing the wheel, it again pushes the current transform (the modeling transform for the cart as a whole) onto the stack, and it modifies the current transform to take the wheel's modeling transforms into account. Similarly, when it comes to the filled circle, it saves the modeling transform for the wheel, and then applies the modeling transform for the circle.</p> <p>When, finally, the circle is actually drawn in the scene, it is transformed by the combined transform. That transform places the circle directly into the scene, but it has been composed from the transform that places the circle into the wheel, the one that places the wheel into the cart, and the one that places the cart into the scene. After drawing the circle, the computer replaces the current transform with one it pops from the stack. That will be the modeling transform for the wheel as a whole, and that transform will be used for any further parts of the wheel that have to be drawn. When the wheel is done, the transform for the cart is popped. And when the cart is done, the original transform, the identity, is popped. When the computer goes onto the next object in the scene, it starts the whole process again, with the identity transform as the starting point.</p> <p>This might sound complicated, but I should emphasize that it is something that the computer does for you. Your responsibility is simply to design the individual objects, in their own natural coordinate system. As part of that, you specify the modeling transformations that are applied to the sub-objects of that object. You construct the scene as a whole in a similar way. The computer will then put everything together for you, taking into account the many layers of hierarchical structure. You only have to deal with one component of the structure at a time. That's the power of hierarchical design; that's how it helps you deal with complexity.</p>"},{"location":"cn/c2/s5/","title":"\u7b2c5\u8282: Java \u7ed8\u52362D","text":"<p>Java Graphics2D</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u7ae0\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u770b\u4e00\u4e9b\u4e8c\u7ef4\u56fe\u5f62\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u65b0\u7684\u60f3\u6cd5\uff0c\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u770b\u5230\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u7684\u4e00\u822c\u6982\u5ff5\u5982\u4f55\u5728\u51e0\u4e2a\u5b9e\u9645\u56fe\u5f62\u7cfb\u7edf\u4e2d\u4f7f\u7528\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u7684\u91cd\u70b9\u662fJava\u7f16\u7a0b\u8bed\u8a00\u3002Java\u4ecd\u7136\u662f\u6700\u53d7\u6b22\u8fce\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002\u5176\u6807\u51c6\u684c\u9762\u7248\u672c\u5305\u62ec\u4e00\u4e2a\u590d\u6742\u76842D\u56fe\u5f62API\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u8fd9\u91cc\u8ba8\u8bba\u7684\u4e3b\u9898\u3002\u5728\u9605\u8bfb\u672c\u8282\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u5df2\u7ecf\u4e86\u89e3Java\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u4f46\u5373\u4f7f\u60a8\u4e0d\u4e86\u89e3\uff0c\u60a8\u4e5f\u5e94\u8be5\u80fd\u591f\u7406\u89e3\u5927\u90e8\u5206\u5173\u4e8e\u56fe\u5f62API\u672c\u8eab\u7684\u8ba8\u8bba\u3002\uff08\u5728\u9644\u5f55A\u4e2d\u7684Section A.1\u4e2d\u53ef\u4ee5\u627e\u5230Java\u7684\u57fa\u672c\u4ecb\u7ecd\u3002\uff09</p> <p>\u8fd9\u91cc\u8ba8\u8bba\u7684\u56fe\u5f62API\u662fSwing\u7684\u4e00\u90e8\u5206\uff0cSwing\u662f\u7528\u4e8e\u56fe\u5f62\u7528\u6237\u754c\u9762\u7f16\u7a0b\u7684API\uff0c\u5305\u542b\u5728Java\u7684\u6807\u51c6\u53d1\u884c\u7248\u4e2d\u3002\u73b0\u5728\u8bb8\u591aJava\u7a0b\u5e8f\u90fd\u662f\u4f7f\u7528\u540d\u4e3aJavaFX\u7684\u53e6\u4e00\u79cdAPI\u7f16\u5199\u7684\uff0c\u5b83\u4e0d\u662f\u6807\u51c6\u53d1\u884c\u7248\u7684\u4e00\u90e8\u5206\u3002\u672c\u6559\u6750\u4e0d\u8ba8\u8bbaJavaFX\u3002\u5b9e\u9645\u4e0a\uff0cJavaFX\u7684\u56fe\u5f62API\u4e0eHTML\u753b\u5e03\u56fe\u5f62\u7684API\u975e\u5e38\u76f8\u4f3c\uff0c\u8fd9\u5728Section 2.6\u4e2d\u8ba8\u8bba\u8fc7\u3002</p> <p>Java\u7684\u539f\u59cb\u7248\u672c\u5177\u6709\u66f4\u5c0f\u7684\u56fe\u5f62API\u3002\u5b83\u4e25\u683c\u4fa7\u91cd\u4e8e\u50cf\u7d20\uff0c\u5e76\u4e14\u4ec5\u4f7f\u7528\u6574\u6570\u5750\u6807\u3002\u8be5API\u6709\u7528\u4e8e\u63cf\u7ed8\u548c\u586b\u5145\u5404\u79cd\u57fa\u672c\u5f62\u72b6\uff08\u5305\u62ec\u7ebf\u6761\u3001\u77e9\u5f62\u3001\u692d\u5706\u548c\u591a\u8fb9\u5f62\uff0c\u5c3d\u7ba1Java\u4f7f\u7528draw\u800c\u4e0d\u662fstroke\u8fd9\u4e2a\u672f\u8bed\uff09\u7684\u5b50\u4f8b\u7a0b\u3002\u5176\u7ed8\u56fe\u64cd\u4f5c\u7684\u542b\u4e49\u89c4\u5b9a\u5728\u50cf\u7d20\u7ea7\u522b\u975e\u5e38\u7cbe\u786e\u3002\u6574\u6570\u5750\u6807\u88ab\u5b9a\u4e49\u4e3a\u53c2\u8003\u50cf\u7d20\u4e4b\u95f4\u7684\u7ebf\u6761\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a12x8\u50cf\u7d20\u7f51\u683c\u7684x\u5750\u6807\u4ece0\u523012\uff0cy\u5750\u6807\u4ece0\u52308\uff0c\u5982\u4e0b\u6240\u793a\u3002\u7f16\u53f7\u7684\u662f\u50cf\u7d20\u4e4b\u95f4\u7684\u7ebf\u6761\uff0c\u800c\u4e0d\u662f\u50cf\u7d20\u672c\u8eab\u3002</p> <p>\u547d\u4ee4fillRect(3,2,5,3)\u4f1a\u586b\u5145\u5de6\u4e0a\u89d2\u4f4d\u4e8e(3,2)\u3001\u5bbd\u5ea6\u4e3a5\u3001\u9ad8\u5ea6\u4e3a3\u7684\u77e9\u5f62\uff0c\u5982\u4e0a\u56fe\u5de6\u4fa7\u6240\u793a\u3002\u547d\u4ee4drawRect(3,2,5,3)\u5728\u6982\u5ff5\u4e0a\u56f4\u7ed5\u8be5\u77e9\u5f62\u7684\u8f6e\u5ed3\u7ed8\u5236\u4e00\u4e2a\u201c\u7b14\u201d\u3002\u4f46\u662f\uff0c\u8fd9\u652f\u7b14\u662f\u4e00\u4e2a1\u50cf\u7d20\u7684\u6b63\u65b9\u5f62\uff0c\u800c\u6cbf\u8f6e\u5ed3\u79fb\u52a8\u7684\u662f\u7b14\u7684\u5de6\u4e0a\u89d2\u3002\u5f53\u7b14\u6cbf\u77e9\u5f62\u7684\u53f3\u8fb9\u7f18\u79fb\u52a8\u65f6\uff0c\u8be5\u8fb9\u7f18\u53f3\u4fa7\u7684\u50cf\u7d20\u88ab\u7740\u8272\uff1b\u5f53\u7b14\u6cbf\u5e95\u8fb9\u79fb\u52a8\u65f6\uff0c\u5e95\u8fb9\u4e0b\u65b9\u7684\u50cf\u7d20\u88ab\u7740\u8272\u3002\u7ed3\u679c\u5982\u4e0a\u56fe\u53f3\u4fa7\u6240\u793a\u3002\u6211\u5728\u8fd9\u91cc\u7684\u91cd\u70b9\u4e0d\u662f\u4e3a\u4e86\u7ea0\u7ed3\u7ec6\u8282\uff0c\u800c\u662f\u8981\u6307\u51fa\uff0c\u5bf9\u7ed8\u56fe\u64cd\u4f5c\u7684\u542b\u4e49\u6709\u7cbe\u786e\u89c4\u5b9a\u53ef\u4ee5\u8ba9\u60a8\u5728\u50cf\u7d20\u7ea7\u522b\u4e0a\u6709\u975e\u5e38\u7cbe\u7ec6\u7684\u63a7\u5236\u3002</p> <p>Java\u7684\u539f\u59cb\u56fe\u5f62\u4e0d\u652f\u6301\u5b9e\u6570\u5750\u6807\u3001\u53d8\u6362\u3001\u6297\u952f\u9f7f\u6216\u6e10\u53d8\u7b49\u529f\u80fd\u3002\u5728Java\u9996\u6b21\u5f15\u5165\u51e0\u5e74\u540e\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\u7684\u65b0\u56fe\u5f62API\u3002\u6211\u4eec\u5c06\u5728\u8fd9\u91cc\u770b\u4e00\u4e0b\u8fd9\u4e2a\u66f4\u9ad8\u7ea7\u7684API\u3002</p> <p>In the rest of this chapter, we look at specific implementations of two-dimensional graphics. There are a few new ideas here, but mostly you will see how the general concepts that we have covered are used in several real graphics systems.</p> <p>In this section, our focus is on the Java programming language. Java remains one of the most popular programming languages. Its standard desktop version includes a sophisticated 2D graphics API, which is our topic here. Before reading this section, you should already know the basics of Java programming. But even if you don't, you should be able to follow most of the discussion of the graphics API itself. (See Section A.1 in Appendix A for a very basic introduction to Java.)</p> <p>The graphics API that is discussed here is part of Swing, an API for graphical user interface programming that is included as part of the standard distribution of Java. Many Java programs are now written using an alternative API called JavaFX, which is not part of the standard distribution. JavaFX is not discussed in this textbook. Its graphics API is, in fact, quite similar to the API for HTML canvas graphics, which is discussed in Section 2.6.</p> <p>The original version of Java had a much smaller graphics API. It was tightly focused on pixels, and it used only integer coordinates. The API had subroutines for stroking and filling a variety of basic shapes, including lines, rectangles, ovals, and polygons (although Java uses the term draw instead of stroke). Its specification of the meaning of drawing operations was very precise on the pixel level. Integer coordinates are defined to refer to the lines between pixels. For example, a 12-by-8 pixel grid has x-coordinates from 0 to 12 and y-coordinates from 0 to 8, as shown below. The lines between pixels are numbered, not the pixels.</p> <p> </p> <p>The command fillRect(3,2,5,3) fills the rectangle with upper left corner at (3,2), with width 5, and with height 3, as shown on the left above. The command drawRect(3,2,5,3) conceptually drags a \"pen\" around the outline of this rectangle. However, the pen is a 1-pixel square, and it is the upper left corner of the pen that moves along the outline. As the pen moves along the right edge of the rectangle, the pixels to the right of that edge are colored; as the pen moves along the bottom edge, the pixels below the edge are colored. The result is as shown on the right above. My point here is not to belabor the details, but to point out that having a precise specification of the meaning of graphical operations gives you very fine control over what happens on the pixel level.</p> <p>Java's original graphics did not support things like real-number coordinates, transforms, antialiasing, or gradients. Just a few years after Java was first introduced, a new graphics API was added that does support all of these. It is that more advanced API that we will look at here.</p>"},{"location":"cn/c2/s5/#251--\u7ed8\u52362d","title":"2.5.1  \u7ed8\u52362D","text":"<p>Graphics2D</p> \u4e2d\u6587\u82f1\u6587 <p>Java\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u3002\u5176API\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5927\u578b\u7684\u7c7b\u96c6\u5408\uff0c\u539f\u59cb\u56fe\u5f62API\u4e2d\u7684\u5b9e\u9645\u7ed8\u56fe\u64cd\u4f5c\u5927\u591a\u5305\u542b\u5728\u540d\u4e3aGraphics\u7684\u7c7b\u4e2d\u3002\u5728\u66f4\u65b0\u7684Swing API\u4e2d\uff0c\u7ed8\u56fe\u64cd\u4f5c\u662f\u4f4d\u4e8e\u540d\u4e3aGraphics2D\u7684\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u5b83\u662fGraphics\u7684\u5b50\u7c7b\uff0c\u56e0\u6b64\u6240\u6709\u539f\u59cb\u7684\u7ed8\u56fe\u64cd\u4f5c\u4ecd\u7136\u53ef\u7528\u3002\uff08\u5728Java\u4e2d\uff0c\u4e00\u4e2a\u7c7b\u5305\u542b\u5728\u79f0\u4e3a\u201c\u5305\u201d\u7684\u7c7b\u96c6\u5408\u4e2d\u3002\u4f8b\u5982\uff0cGraphics\u548cGraphics2D\u4f4d\u4e8e\u540d\u4e3ajava.awt\u7684\u5305\u4e2d\u3002\u5b9a\u4e49\u5f62\u72b6\u548c\u53d8\u6362\u7684\u7c7b\u4f4d\u4e8e\u540d\u4e3ajava.awt.geom\u7684\u5305\u4e2d\u3002\uff09</p> <p>\u56fe\u5f62\u7cfb\u7edf\u9700\u8981\u4e00\u4e2a\u7ed8\u5236\u7684\u4f4d\u7f6e\u3002\u5728Java\u4e2d\uff0c\u7ed8\u56fe\u8868\u9762\u901a\u5e38\u662fJPanel\u7c7b\u7684\u5bf9\u8c61\uff0c\u5b83\u4ee3\u8868\u5c4f\u5e55\u4e0a\u7684\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u3002JPanel\u7c7b\u6709\u4e00\u4e2a\u540d\u4e3apaintComponent()\u7684\u65b9\u6cd5\u6765\u7ed8\u5236\u5176\u5185\u5bb9\u3002\u8981\u521b\u5efa\u4e00\u4e2a\u7ed8\u56fe\u8868\u9762\uff0c\u60a8\u53ef\u4ee5\u521b\u5efaJPanel\u7684\u5b50\u7c7b\u5e76\u4e3a\u5176paintComponent()\u65b9\u6cd5\u63d0\u4f9b\u5b9a\u4e49\u3002\u6240\u6709\u7ed8\u56fe\u90fd\u5e94\u8be5\u5728paintComponent()\u5185\u5b8c\u6210\uff1b\u5f53\u9700\u8981\u66f4\u6539\u7ed8\u56fe\u7684\u5185\u5bb9\u65f6\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528\u9762\u677f\u7684repaint()\u65b9\u6cd5\u6765\u89e6\u53d1\u5bf9paintComponent()\u7684\u8c03\u7528\u3002paintComponent()\u65b9\u6cd5\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3aGraphics\u7684\u53c2\u6570\uff0c\u4f46\u5b9e\u9645\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\u53c2\u6570\u662fGraphics2D\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u88ab\u7c7b\u578b\u8f6c\u6362\u4e3aGraphics2D\u4ee5\u83b7\u53d6\u5bf9\u66f4\u9ad8\u7ea7\u522b\u56fe\u5f62\u529f\u80fd\u7684\u8bbf\u95ee\u3002\u56e0\u6b64\uff0cpaintComponent()\u65b9\u6cd5\u7684\u5b9a\u4e49\u901a\u5e38\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>protected void paintComponent( Graphics g ) {\n    Graphics2D g2;\n    g2 = (Graphics2D)g;  // \u5c06\u53c2\u6570\u8f6c\u6362\u4e3aGraphics2D\u7c7b\u578b\u3002\n    .\n    .  // \u4f7f\u7528g2\u7ed8\u56fe\u3002\n    .\n}\n</code></pre> <p>\u5728\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u5c06\u5047\u8bbeg2\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3aGraphics2D\u7684\u53d8\u91cf\uff0c\u5e76\u8ba8\u8bba\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u505a\u7684\u4e00\u4e9b\u4e8b\u60c5\u3002\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u6211\u6ce8\u610f\u5230Graphics2D\u652f\u6301\u6297\u952f\u9f7f\uff0c\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528\u3002\u53ef\u4ee5\u5728\u56fe\u5f62\u4e0a\u4e0b\u6587g2\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u76f8\u5f53\u4ee4\u4eba\u751f\u754f\u7684\u547d\u4ee4\u542f\u7528\u5b83\uff1a</p> <pre><code>g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n                            RenderingHints.VALUE_ANTIALIAS_ON);\n</code></pre> <p>\u5bf9\u4e8e\u5728\u5b8c\u6574\u7684Java\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u7b80\u5355\u56fe\u5f62\u7ed8\u5236\u7684\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u6837\u672c\u7a0b\u5e8fjava2d/GraphicsStarter.java\u548cjava2d/AnimationStarter.java\u3002\u5b83\u4eec\u5206\u522b\u63d0\u4f9b\u4e86\u4f7f\u7528Graphics2D\u7ed8\u5236\u9759\u6001\u548c\u52a8\u753b\u56fe\u50cf\u7684\u975e\u5e38\u7b80\u5355\u7684\u6846\u67b6\u3002\u7a0b\u5e8fjava2d/EventsStarter.java\u662f\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6846\u67b6\uff0c\u7528\u4e8e\u5904\u7406\u56fe\u5f62\u7a0b\u5e8f\u4e2d\u7684\u9f20\u6807\u548c\u952e\u4e8b\u4ef6\u3002\u5982\u679c\u60a8\u60f3\u63a2\u7d22Java\u56fe\u5f62\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u7a0b\u5e8f\u4f5c\u4e3a\u4e00\u4e9b\u5b9e\u9a8c\u7684\u57fa\u7840\u3002</p> <p>Java is an object-oriented language. Its API is defined as a large set of classes, The actual drawing operations in the original graphics API were mostly contained in the class named Graphics. In the newer Swing API, drawing operations are methods in a class named Graphics2D, which is a subclass of Graphics, so that all the original drawing operations are still available. (A class in Java is contained in a collection of classes known as a \"package.\" Graphics and Graphics2D, for example, are in the package named java.awt. Classes that define shapes and transforms are in a package named java.awt.geom.)</p> <p>A graphics system needs a place to draw. In Java, the drawing surface is often an object of the class JPanel, which represents a rectangular area on the screen. The JPanel class has a method named paintComponent() to draw its content. To create a drawing surface, you can create a subclass of JPanel and provide a definition for its paintComponent() method. All drawing should be done inside paintComponent(); when it is necessary to change the contents of the drawing, you can call the panel's repaint() method to trigger a call to paintComponent(). The paintComponent() method has a parameter of type Graphics, but the parameter that is passed to the method is actually an object of type Graphics2D, and it can be type-cast to Graphics2D to obtain access to the more advanced graphics capabilities. So, the definition of the paintComponent() method usually looks something like this:</p> <pre><code>protected void paintComponent( Graphics g ) {\n    Graphics2D g2;\n    g2 = (Graphics2D)g;  // Type-cast the parameter to Graphics2D.\n    .\n    .  // Draw using g2.\n    .\n}\n</code></pre> <p>In the rest of this section, I will assume that g2 is a variable of type Graphics2D, and I will discuss some of the things that you can do with it. As a first example, I note that Graphics2D supports antialiasing, but it is not turned on by default. It can be enabled in a graphics context g2 with the rather intimidating command</p> <pre><code>g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n                            RenderingHints.VALUE_ANTIALIAS_ON);\n</code></pre> <p>For simple examples of graphics in complete Java programs, you can look at the sample programs java2d/GraphicsStarter.java and java2d/AnimationStarter.java. They provide very minimal frameworks for drawing static and animated images, respectively, using Graphics2D. The program java2d/EventsStarter.java is a similar framework for working with mouse and key events in a graphics program. You can use these programs as the basis for some experimentation if you want to explore Java graphics.</p>"},{"location":"cn/c2/s5/#252--\u5f62\u72b6","title":"2.5.2  \u5f62\u72b6","text":"<p>Shapes</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528\u539f\u59cb\u7684Graphics\u7c7b\u8fdb\u884c\u7ed8\u5236\u65f6\uff0c\u4f7f\u7528\u6574\u6570\u5750\u6807\uff0c\u5355\u4f4d\u4e3a\u50cf\u7d20\u3002\u8fd9\u5728\u6807\u51c6\u5750\u6807\u7cfb\u4e2d\u6548\u679c\u5f88\u597d\uff0c\u4f46\u5728\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u65f6\u4e0d\u9002\u7528\uff0c\u56e0\u4e3a\u5728\u8fd9\u6837\u7684\u5750\u6807\u7cfb\u4e2d\uff0c\u5ea6\u91cf\u5355\u4f4d\u5c06\u4e0d\u7b49\u4e8e\u4e00\u4e2a\u50cf\u7d20\u3002\u6211\u4eec\u9700\u8981\u80fd\u591f\u4f7f\u7528\u5b9e\u6570\u6765\u6307\u5b9a\u5f62\u72b6\u3002Java\u5305java.awt.geom\u63d0\u4f9b\u4e86\u652f\u6301\u4f7f\u7528\u5b9e\u6570\u5750\u6807\u5b9a\u4e49\u7684\u5f62\u72b6\u7684\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u8be5\u5305\u4e2d\u7684Line2D\u7c7b\u8868\u793a\u4ee5\u4e00\u5bf9\u5b9e\u6570\u4e3a\u7aef\u70b9\u7684\u7ebf\u6bb5\u3002</p> <p>\u73b0\u5728\uff0cJava\u6709\u4e24\u79cd\u5b9e\u6570\u7c7b\u578b\uff1adouble\u548cfloat\u3002double\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u6bd4float\u66f4\u5927\u8303\u56f4\u7684\u6570\u5b57\uff0c\u5e76\u4e14\u5177\u6709\u66f4\u591a\u7684\u6709\u6548\u4f4d\u6570\uff0cdouble\u662f\u66f4\u5e38\u7528\u7684\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a\uff0cdoubles\u5728Java\u4e2d\u66f4\u5bb9\u6613\u4f7f\u7528\u3002\u7136\u800c\uff0cfloat\u503c\u901a\u5e38\u5728\u56fe\u5f62\u5e94\u7528\u4e2d\u5177\u6709\u8db3\u591f\u7684\u7cbe\u5ea6\uff0c\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u5728\u5185\u5b58\u4e2d\u5360\u7528\u66f4\u5c11\u7a7a\u95f4\u7684\u4f18\u52bf\u3002\u6b64\u5916\uff0c\u8ba1\u7b97\u673a\u56fe\u5f62\u786c\u4ef6\u901a\u5e38\u5728\u5185\u90e8\u4f7f\u7528float\u503c\u3002</p> <p>\u56e0\u6b64\uff0c\u8003\u8651\u5230\u8fd9\u4e9b\u56e0\u7d20\uff0cjava.awt.geom\u5305\u5b9e\u9645\u4e0a\u4e3a\u6bcf\u4e2a\u5f62\u72b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u7248\u672c\uff0c\u4e00\u4e2a\u4f7f\u7528float\u7c7b\u578b\u7684\u5750\u6807\uff0c\u53e6\u4e00\u4e2a\u4f7f\u7528double\u7c7b\u578b\u7684\u5750\u6807\u3002\u8fd9\u662f\u4ee5\u4e00\u79cd\u76f8\u5f53\u5947\u602a\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\u3002\u4ee5Line2D\u4e3a\u4f8b\uff0cLine2D\u7c7b\u672c\u8eab\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\u3002\u5b83\u6709\u4e24\u4e2a\u5b50\u7c7b\uff0c\u4e00\u4e2a\u8868\u793a\u4f7f\u7528float\u5750\u6807\u7684\u7ebf\uff0c\u53e6\u4e00\u4e2a\u4f7f\u7528double\u5750\u6807\u3002\u6700\u5947\u602a\u7684\u90e8\u5206\u662f\uff0c\u8fd9\u4e9b\u5b50\u7c7b\u88ab\u5b9a\u4e49\u4e3aLine2D\u7684\u5d4c\u5957\u7c7b\uff1aLine2D.Float\u548cLine2D.Double\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u7c7b\u578b\u4e3aLine2D\u7684\u53d8\u91cf\uff0c\u4f46\u8981\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u60a8\u9700\u8981\u4f7f\u7528Line2D.Double\u6216Line2D.Float\uff1a</p> <pre><code>Line2D line1, line2;\nline1 = new Line2D.Double(1,2,5,7); // \u4ece (1.0,2.0) \u5230 (5.0,7.0) \u7684\u7ebf\u6bb5\nline2 = new Line2D.Float(2.7F,3.1F,1.5F,7.1F); // \u4ece (2.7,3.1) \u5230 (1.5,7.1) \u7684\u7ebf\u6bb5\n</code></pre> <p>\u6ce8\u610f\uff0c\u5728Java\u4e2d\u4f7f\u7528float\u7c7b\u578b\u7684\u5e38\u91cf\u65f6\uff0c\u60a8\u5fc5\u987b\u5c06\"F\"\u4f5c\u4e3a\u540e\u7f00\u6dfb\u52a0\u5230\u503c\u540e\u9762\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48doubles\u5728Java\u4e2d\u66f4\u5bb9\u6613\u7684\u4e00\u4e2a\u539f\u56e0\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u575a\u6301\u4f7f\u7528Line2D.Double\u3002\u7136\u800c\uff0cLine2D.Float\u53ef\u80fd\u4f1a\u63d0\u4f9b\u7a0d\u5fae\u66f4\u597d\u7684\u6027\u80fd\u3002</p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u770bjava.awt.geom\u4e2d\u7684\u4e00\u4e9b\u5176\u4ed6\u7c7b\u3002\u62bd\u8c61\u7c7bPoint2D\u2014\u4ee5\u53ca\u5b83\u7684\u5177\u4f53\u5b50\u7c7bPoint2D.Double\u548cPoint2D.Float\u2014\u8868\u793a\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u7531\u4e24\u4e2a\u5b9e\u6570\u5750\u6807\u6307\u5b9a\u3002\u70b9\u4e0d\u662f\u4e00\u4e2a\u5f62\u72b6\uff1b\u60a8\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u586b\u5145\u6216\u63cf\u8fb9\u3002\u53ef\u4ee5\u7528\u4e24\u4e2a\u5b9e\u6570\u6784\u9020\u4e00\u4e2a\u70b9\uff08\"new Point2D.Double(1.2,3.7)\"\uff09\u3002\u5982\u679cp\u662f\u7c7b\u578b\u4e3aPoint2D\u7684\u53d8\u91cf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528p.getX()\u548cp.getY()\u6765\u68c0\u7d22\u5176\u5750\u6807\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u4f7f\u7528p.setX(x)\u3001p.setY(y)\u6216p.setLocation(x,y)\u6765\u8bbe\u7f6e\u5176\u5750\u6807\u3002\u5982\u679cpd\u662f\u7c7b\u578b\u4e3aPoint2D.Double\u7684\u53d8\u91cf\uff0c\u60a8\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u5750\u6807\uff0c\u5982pd.x\u548cpd.y\uff08\u5bf9\u4e8ePoint2D.Float\u4e5f\u662f\u5982\u6b64\uff09\u3002java.awt.geom\u4e2d\u7684\u5176\u4ed6\u7c7b\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u7684\u591a\u79cd\u65b9\u5f0f\u6765\u64cd\u7eb5\u5176\u5c5e\u6027\uff0c\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u5c1d\u8bd5\u5217\u51fa\u5b83\u4eec\u6240\u6709\u3002</p> <p>\u6709\u5404\u79cd\u5404\u6837\u7684\u7c7b\u8868\u793a\u51e0\u4f55\u5f62\u72b6\uff0c\u5305\u62ecLine2D\u3001Rectangle2D\u3001RoundRectangle2D\u3001Ellipse2D\u3001Arc2D\u548cPath2D\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u62bd\u8c61\u7c7b\uff0c\u6bcf\u4e2a\u7c7b\u5305\u542b\u4e00\u5bf9\u5b50\u7c7b\uff0c\u4f8b\u5982Rectangle2D.Double\u548cRectangle2D.Float\u3002\u4e00\u4e9b\u5f62\u72b6\uff0c\u6bd4\u5982\u77e9\u5f62\uff0c\u5177\u6709\u53ef\u4ee5\u586b\u5145\u7684\u5185\u90e8\uff1b\u8fd9\u6837\u7684\u5f62\u72b6\u4e5f\u6709\u53ef\u4ee5\u63cf\u8fb9\u7684\u8f6e\u5ed3\u3002\u4e00\u4e9b\u5f62\u72b6\uff0c\u6bd4\u5982\u7ebf\u6bb5\uff0c\u7eaf\u7cb9\u662f\u4e00\u7ef4\u7684\uff0c\u53ea\u80fd\u63cf\u8fb9\u3002</p> <p>\u9664\u4e86\u7ebf\u6bb5\uff0c\u77e9\u5f62\u53ef\u80fd\u662f\u6700\u7b80\u5355\u7684\u5f62\u72b6\u3002Rectangle2D\u6709\u4e00\u4e2a\u89d2\u70b9\uff08x\uff0cy\uff09\uff0c\u4e00\u4e2a\u5bbd\u5ea6\u548c\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u6784\u9020\uff08\"new Rectangle2D.Double(x,y,w,h)\"\uff09\u3002\u89d2\u70b9\uff08x\uff0cy\uff09\u6307\u5b9a\u4e86\u77e9\u5f62\u4e2d\u7684\u6700\u5c0fx\u503c\u548cy\u503c\u3002\u5bf9\u4e8e\u901a\u5e38\u7684\u50cf\u7d20\u5750\u6807\u7cfb\uff0c\uff08x\uff0cy\uff09\u662f\u5de6\u4e0a\u89d2\u3002\u7136\u800c\uff0c\u5728\u6700\u5c0fy\u503c\u5728\u5e95\u90e8\u7684\u5750\u6807\u7cfb\u4e2d\uff0c\uff08x\uff0cy\uff09\u5c06\u662f\u5de6\u4e0b\u89d2\u3002\u77e9\u5f62\u7684\u8fb9\u5e73\u884c\u4e8e\u5750\u6807\u8f74\u3002\u7c7b\u578b\u4e3aRectangle2D.Double\u7684\u53d8\u91cfr\u5177\u6709\u516c\u5171\u5b9e\u4f8b\u53d8\u91cfr.x\u3001r.y\u3001r.width\u548cr.height\u3002\u5982\u679c\u5bbd\u5ea6\u6216\u9ad8\u5ea6\u5c0f\u4e8e\u6216\u7b49\u4e8e\u96f6\uff0c\u5f53\u77e9\u5f62\u88ab\u586b\u5145\u6216\u63cf\u8fb9\u65f6\u5c06\u4e0d\u4f1a\u7ed8\u5236\u4efb\u4f55\u5185\u5bb9\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u4efb\u52a1\u662f\u4ece\u4e24\u4e2a\u89d2\u70b9\uff08x1\uff0cy1\uff09\u548c\uff08x2\uff0cy2\uff09\u5b9a\u4e49\u4e00\u4e2a\u77e9\u5f62\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u5747\u4e3a\u96f6\u7684\u77e9\u5f62\uff0c\u7136\u540e\u5c06\u7b2c\u4e8c\u4e2a\u70b9\u6dfb\u52a0\u5230\u77e9\u5f62\u4e2d\u6765\u5b8c\u6210\u3002\u5c06\u4e00\u4e2a\u70b9\u6dfb\u52a0\u5230\u77e9\u5f62\u4f1a\u4f7f\u77e9\u5f62\u589e\u957f\u8db3\u591f\u4ee5\u5305\u62ec\u8be5\u70b9\uff1a</p> <pre><code>Rectangle2D.Double r = new Rectangle2D.Double(x1,y1,0,0);\nr.add(x2,y2);\n</code></pre> <p>\u7c7bLine2D\u3001Ellipse2D\u3001RoundRectangle2D\u548cArc2D\u521b\u5efa\u5176\u4ed6\u57fa\u672c\u5f62\u72b6\uff0c\u5e76\u4e14\u5de5\u4f5c\u539f\u7406\u7c7b\u4f3c\u4e8eRectangle2D\u3002\u60a8\u53ef\u4ee5\u67e5\u770bJava API\u6587\u6863\u4ee5\u83b7\u53d6\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>Path2D\u7c7b\u66f4\u6709\u8da3\u3002\u5b83\u8868\u793a\u7531\u7ebf\u6bb5\u548c\u8d1d\u585e\u5c14\u66f2\u7ebf\u7ec4\u6210\u7684\u4e00\u822c\u8def\u5f84\u3002\u8def\u5f84\u662f\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u5728\u5b50\u82822.2.3\u4e2d\u8ba8\u8bba\u8fc7\u7684moveTo\u548clineTo\u5b50\u4f8b\u7a0b\u521b\u5efa\u7684\u3002\u8981\u521b\u5efa\u8def\u5f84\uff0c\u9996\u5148\u6784\u9020\u4e00\u4e2a\u7c7b\u578b\u4e3aPath2D.Double\uff08\u6216Path2D.Float\uff09\u7684\u5bf9\u8c61\uff1a</p> <pre><code>Path2D.Double p = new Path2D.Double();\n</code></pre> <p>\u5f53\u9996\u6b21\u521b\u5efa\u8def\u5f84p\u65f6\uff0c\u5b83\u662f\u7a7a\u7684\u3002\u901a\u8fc7\u6cbf\u7740\u8981\u521b\u5efa\u7684\u8def\u5f84\u79fb\u52a8\u4e00\u4e2a\u60f3\u8c61\u7684\u201c\u7b14\u201d\u6765\u6784\u9020\u8def\u5f84\u3002\u65b9\u6cd5p.moveTo(x,y)\u5c06\u7b14\u79fb\u52a8\u5230\u70b9(x,y)\u800c\u4e0d\u7ed8\u5236\u4efb\u4f55\u5185\u5bb9\u3002\u5b83\u7528\u4e8e\u6307\u5b9a\u8def\u5f84\u7684\u521d\u59cb\u70b9\u6216\u8def\u5f84\u7684\u65b0\u90e8\u5206\u7684\u8d77\u59cb\u70b9\u3002\u65b9\u6cd5p.lineTo(x,y)\u7ed8\u5236\u4e00\u6761\u4ece\u5f53\u524d\u7b14\u4f4d\u7f6e\u5230(x,y)\u7684\u76f4\u7ebf\uff0c\u5c06\u7b14\u7559\u5728(x,y)\u5904\u3002\u65b9\u6cd5p.close()\u53ef\u7528\u4e8e\u901a\u8fc7\u7ed8\u5236\u4e00\u6761\u7ebf\u8fd4\u56de\u5230\u5176\u8d77\u59cb\u70b9\u6765\u5173\u95ed\u8def\u5f84\uff08\u6216\u8def\u5f84\u7684\u5f53\u524d\u90e8\u5206\uff09\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a\u9876\u70b9\u5206\u522b\u4f4d\u4e8e(0,5)\u3001(2,-3)\u548c(-4,1)\u7684\u4e09\u89d2\u5f62\uff1a</p> <pre><code>Path2D.Double p = new Path2D.Double();\np.moveTo(0,5);\np.lineTo(2,-3);\np.lineTo(-4,1);\np.close();\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u5411Path2D\u6dfb\u52a0\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u3002\u8d1d\u585e\u5c14\u66f2\u7ebf\u5728\u5b50\u82822.2.3\u4e2d\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u65b9\u6cd5\u5c06\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6dfb\u52a0\u5230\u8def\u5f84Path2D p\u4e2d</p> <pre><code>p.curveTo( cx1, cy1, cx2, cy2, x, y );\n</code></pre> <p>\u8fd9\u5c06\u6dfb\u52a0\u4e00\u4e2a\u66f2\u7ebf\u6bb5\uff0c\u4ece\u5f53\u524d\u7b14\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5230(x,y)\u7ed3\u675f\uff0c\u5e76\u4f7f\u7528(cx1,cy1)\u548c(cx2,cy2)\u4f5c\u4e3a\u66f2\u7ebf\u7684\u4e24\u4e2a\u63a7\u5236\u70b9\u3002\u6dfb\u52a0\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u6bb5\u5230\u8def\u5f84\u7684\u65b9\u6cd5\u662fquadTo\u3002\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u63a7\u5236\u70b9\uff1a</p> <pre><code>p.quadTo( cx, cy, x, y );\n</code></pre> <p>\u5f53\u8def\u5f84\u4e0e\u81ea\u8eab\u76f8\u4ea4\u65f6\uff0c\u5176\u5185\u90e8\u662f\u901a\u8fc7\u67e5\u770b\u7f20\u7ed5\u6570\u786e\u5b9a\u7684\uff0c\u5982\u5b50\u82822.2.2\u4e2d\u6240\u8ba8\u8bba\u7684\u3002\u786e\u5b9a\u70b9\u662f\u5426\u5728\u5185\u90e8\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u89c4\u5219\uff1a\u8be2\u95ee\u56f4\u7ed5\u8be5\u70b9\u7684\u66f2\u7ebf\u7684\u7f20\u7ed5\u6570\u662f\u5426\u4e3a\u975e\u96f6\uff0c\u6216\u8005\u8be2\u95ee\u662f\u5426\u4e3a\u5947\u6570\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u8bbe\u7f6ePath2D p\u4f7f\u7528\u7684\u7f20\u7ed5\u89c4\u5219\uff1a</p> <pre><code>p.setWindingRule( Path2D.WIND_NON_ZERO );\np.setWindingRule( Path2D.WIND_EVEN_ODD );\n</code></pre> <p>\u9ed8\u8ba4\u662fWIND_NON_ZERO\u3002</p> <p>\u6700\u540e\uff0c\u6211\u8981\u6ce8\u610f\u7684\u662f\u53ef\u4ee5\u5728\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u7ed8\u5236\u56fe\u50cf\u7684\u526f\u672c\u3002\u56fe\u50cf\u53ef\u4ee5\u4ece\u6587\u4ef6\u52a0\u8f7d\u6216\u7531\u7a0b\u5e8f\u521b\u5efa\u3002\u6211\u7a0d\u540e\u5728\u672c\u8282\u4e2d\u8ba8\u8bba\u7b2c\u4e8c\u79cd\u53ef\u80fd\u6027\u3002\u56fe\u50cf\u7531\u7c7b\u578b\u4e3aImage\u7684\u5bf9\u8c61\u8868\u793a\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u5728\u8fd9\u91cc\u5047\u8bbe\u5bf9\u8c61\u662fBufferedImage\u7c7b\u578b\uff0c\u5b83\u662fImage\u7684\u5b50\u7c7b\u3002\u5982\u679cimg\u662f\u8fd9\u6837\u7684\u5bf9\u8c61\uff0c\u5219</p> <pre><code>g2.drawImage( img, x, y, null );\n</code></pre> <p>\u5c06\u5728\u70b9(x,y)\u5904\u7ed8\u5236\u56fe\u50cf\u7684\u5de6\u4e0a\u89d2\u3002\uff08\u7b2c\u56db\u4e2a\u53c2\u6570\u5f88\u96be\u89e3\u91ca\uff0c\u4f46\u5bf9\u4e8eBufferedImage\uff0c\u5e94\u5c06\u5176\u6307\u5b9a\u4e3anull\u3002\uff09\u8fd9\u5c06\u4ee5\u5176\u81ea\u7136\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7ed8\u5236\u56fe\u50cf\uff0c\u4f46\u53ef\u4ee5\u5728\u65b9\u6cd5\u4e2d\u6307\u5b9a\u4e0d\u540c\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff1a</p> <pre><code>g2.drawImage( img, x, y, width, height, null );\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u7ed8\u5236\u6587\u672c\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u6307\u5b9a\u4e86\u5b57\u7b26\u4e32\u548c\u5b57\u7b26\u4e32\u7684\u57fa\u70b9\u3002\uff08\u57fa\u70b9\u662f\u5b57\u7b26\u4e32\u7684\u5de6\u4e0b\u89d2\uff0c\u5ffd\u7565\u4e86\u50cf\u5b57\u6bcd\"g\"\u7684\u5c3e\u5df4\u4e4b\u7c7b\u7684\u201c\u4e0b\u6c89\u201d\u90e8\u5206\u3002\uff09\u4f8b\u5982\uff0c</p> <pre><code>g2.drawString( \"Hello World\", 100, 50 );\n</code></pre> <p>\u56fe\u50cf\u548c\u5b57\u7b26\u4e32\u4e0e\u5176\u4ed6\u5f62\u72b6\u4e00\u6837\u53d7\u5230\u53d8\u6362\u7684\u5f71\u54cd\u3002\u53d8\u6362\u662f\u83b7\u5f97\u65cb\u8f6c\u6587\u672c\u548c\u56fe\u50cf\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5f53\u5bf9\u4e00\u4e9b\u6587\u672c\u548c\u56fe\u50cf\u5e94\u7528\u65cb\u8f6c\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u4ee5\u4e0b\u60c5\u51b5\uff1a</p> <p> </p> <p>Drawing with the original Graphics class is done using integer coordinates, with the measurement given in pixels. This works well in the standard coordinate system, but is not appropriate when real-number coordinates are used, since the unit of measure in such a coordinate system will not be equal to a pixel. We need to be able to specify shapes using real numbers. The Java package java.awt.geom provides support for shapes defined using real number coordinates. For example, the class Line2D in that package represents line segments whose endpoints are given as pairs of real numbers.</p> <p>Now, Java has two real number types: double and float. The double type can represent a larger range of numbers than float, with a greater number of significant digits, and double is the more commonly used type. In fact, doubles are simply easier to use in Java. However, float values generally have enough accuracy for graphics applications, and they have the advantage of taking up less space in memory. Furthermore, computer graphics hardware often uses float values internally.</p> <p>So, given these considerations, the java.awt.geom package actually provides two versions of each shape, one using coordinates of type float and one using coordinates of type double. This is done in a rather strange way. Taking Line2D as an example, the class Line2D itself is an abstract class. It has two subclasses, one that represents lines using float coordinates and one using double coordinates. The strangest part is that these subclasses are defined as nested classes inside Line2D: Line2D.Float and Line2D.Double. This means that you can declare a variable of type Line2D, but to create an object, you need to use Line2D.Double or Line2D.Float:</p> <pre><code>Line2D line1, line2;\nline1 = new Line2D.Double(1,2,5,7); // Line from (1.0,2.0) to (5.0,7.0)\nline2 = new Line2D.Float(2.7F,3.1F,1.5F,7.1F); // (2.7,3.1) to (1.5,7.1)\n</code></pre> <p>Note that when using constants of type float in Java, you have to add \"F\" as a suffix to the value. This is one reason why doubles are easier in Java. For simplicity, you might want to stick to using Line2D.Double. However, Line2D.Float might give slightly better performance.</p> <p>Let's take a look at some of the other classes from java.awt.geom. The abstract class Point2D\u2014with its concrete subclasses Point2D.Double and Point2D.Float\u2014represents a point in two dimensions, specified by two real number coordinates. A point is not a shape; you can't fill or stroke it. A point can be constructed from two real numbers (\"new Point2D.Double(1.2,3.7)\"). If p is a variable of type Point2D, you can use p.getX() and p.getY() to retrieve its coordinates, and you can use p.setX(x), p.setY(y), or p.setLocation(x,y) to set its coordinates. If pd is a variable of type Point2D.Double, you can also refer directly to the coordinates as pd.x and pd.y (and similarly for Point2D.Float). Other classes in java.awt.geom offer a similar variety of ways to manipulate their properties, and I won't try to list them all here.</p> <p>There is a variety of classes that represent geometric shapes, including Line2D, Rectangle2D, RoundRectangle2D, Ellipse2D, Arc2D, and Path2D. All of these are abstract classes, and each of them contains a pair of subclasses such as Rectangle2D.Double and Rectangle2D.Float. Some shapes, such as rectangles, have interiors that can be filled; such shapes also have outlines that can be stroked. Some shapes, such as lines, are purely one-dimensional and can only be stroked.</p> <p>Aside from lines, rectangles are probably the simplest shapes. A Rectangle2D has a corner point (x,y), a width, and a height, and can be constructed from that data (\"new Rectangle2D.Double(x,y,w,h)\"). The corner point (x,y) specifies the minimum x- and y-values in the rectangle. For the usual pixel coordinate system, (x,y) is the upper left corner. However, in a coordinate system in which the minimum value of y is at the bottom, (x,y) would be the lower left corner. The sides of the rectangle are parallel to the coordinate axes. A variable r of type Rectangle2D.Double has public instance variables r.x, r.y, r.width, and r.height. If the width or the height is less than or equal to zero, nothing will be drawn when the rectangle is filled or stroked. A common task is to define a rectangle from two corner points (x1,y1) and (x2,y2). This can be accomplished by creating a rectangle with height and width equal to zero and then adding the second point to the rectangle. Adding a point to a rectangle causes the rectangle to grow just enough to include that point:</p> <pre><code>Rectangle2D.Double r = new Rectangle2D.Double(x1,y1,0,0);\nr.add(x2,y2);\n</code></pre> <p>The classes Line2D, Ellipse2D, RoundRectangle2D and Arc2D create other basic shapes and work similarly to Rectangle2D. You can check the Java API documentation for details.</p> <p>The Path2D class is more interesting. It represents general paths made up of segments that can be lines and Bezier curves. Paths are created using methods similar to the moveTo and lineTo subroutines that were discussed in Subsection 2.2.3. To create a path, you start by constructing an object of type Path2D.Double (or Path2D.Float):</p> <pre><code>Path2D.Double p = new Path2D.Double();\n</code></pre> <p>The path p is empty when it is first created. You construct the path by moving an imaginary \"pen\" along the path that you want to create. The method p.moveTo(x,y) moves the pen to the point (x,y) without drawing anything. It is used to specify the initial point of the path or the starting point of a new piece of the path. The method p.lineTo(x,y) draws a line from the current pen position to (x,y), leaving the pen at (x,y). The method p.close() can be used to close the path (or the current piece of the path) by drawing a line back to its starting point. For example, the following code creates a triangle with vertices at (0,5), (2,-3), and (-4,1):</p> <pre><code>Path2D.Double p = new Path2D.Double();\np.moveTo(0,5);\np.lineTo(2,-3);\np.lineTo(-4,1);\np.close();\n</code></pre> <p>You can also add Bezier curve segments to a Path2D. Bezier curves were discussed in Subsection 2.2.3. You can add a cubic Bezier curve to a Path2D p with the method</p> <pre><code>p.curveTo( cx1, cy1, cx2, cy2, x, y );\n</code></pre> <p>This adds a curve segment that starts at the current pen position and ends at (x,y), using (cx1,cy1) and (cx2,cy2) as the two control points for the curve. The method for adding a quadratic Bezier curve segment to a path is quadTo. It requires only a single control point:</p> <pre><code>p.quadTo( cx, cy, x, y );\n</code></pre> <p>When a path intersects itself, its interior is determined by looking at the winding number, as discussed in Subsection 2.2.2. There are two possible rules for determining whether a point is interior: asking whether the winding number of the curve about that point is non-zero, or asking whether it is odd. You can set the winding rule used by a Path2D p with</p> <pre><code>p.setWindingRule( Path2D.WIND_NON_ZERO );\np.setWindingRule( Path2D.WIND_EVEN_ODD );\n</code></pre> <p>The default is WIND_NON_ZERO.</p> <p>Finally, I will note that it is possible to draw a copy of an image into a graphics context. The image could be loaded from a file or created by the program. I discuss the second possibility later in this section. An image is represented by an object of type Image. In fact, I will assume here that the object is of type BufferedImage, which is a subclass of Image. If img is such an object, then</p> <pre><code>g2.drawImage( img, x, y, null );\n</code></pre> <p>will draw the image with its upper left corner at the point (x,y). (The fourth parameter is hard to explain, but it should be specified as null for BufferedImages.) This draws the image at its natural width and height, but a different width and height can be specified in the method:</p> <pre><code>g2.drawImage( img, x, y, width, height, null );\n</code></pre> <p>There is also a method for drawing a string of text. The method specifies the string and the basepoint of the string. (The basepoint is the lower left corner of the string, ignoring \"descenders\" like the tail on the letter \"g\".) For example,</p> <pre><code>g2.drawString( \"Hello World\", 100, 50 );\n</code></pre> <p>Images and strings are subject to transforms in the same way as other shapes. Transforms are the only way to get rotated text and images. As an example, here is what can happen when you apply a rotation to some text and an image:</p> <p> </p>"},{"location":"cn/c2/s5/#253--\u63cf\u8fb9\u548c\u586b\u5145","title":"2.5.3  \u63cf\u8fb9\u548c\u586b\u5145","text":"<p>Stroke and Fill</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u65e6\u60a8\u6709\u4e00\u4e2a\u8868\u793a\u5f62\u72b6\u7684\u5bf9\u8c61\uff0c\u60a8\u5c31\u53ef\u4ee5\u586b\u5145\u8be5\u5f62\u72b6\u6216\u63cf\u8fb9\u5b83\u3002Graphics2D\u7c7b\u5b9a\u4e49\u4e86\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002\u63cf\u8fb9\u5f62\u72b6\u7684\u65b9\u6cd5\u79f0\u4e3adraw\uff1a</p> <pre><code>g2.fill(shape);\ng2.draw(shape);\n</code></pre> <p>\u8fd9\u91cc\uff0cg2\u662fGraphics2D\u7c7b\u578b\uff0cshape\u53ef\u4ee5\u662fPath2D\u3001Line2D\u3001Rectangle2D\u6216\u4efb\u4f55\u5176\u4ed6\u5f62\u72b6\u7c7b\u7684\u5bf9\u8c61\u3002\u8fd9\u4e9b\u901a\u5e38\u7528\u4e8e\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u4e0a\uff0c\u5f53\u8be5\u5bf9\u8c61\u8868\u793a\u7684\u5f62\u72b6\u53ea\u4f1a\u88ab\u7ed8\u5236\u4e00\u6b21\u65f6\u3002\u4f8b\u5982\uff1a</p> <pre><code>g2.draw( new Line2D.Double( -5, -5, 5, 5 ) );\n</code></pre> <p>\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u5f62\u72b6\u5bf9\u8c61\u5e76\u591a\u6b21\u91cd\u7528\u5b83\u4eec\u3002</p> <p>\u7528\u4e8e\u63cf\u8fb9\u5f62\u72b6\u7684\u201c\u7b14\u201d\u901a\u5e38\u7531BasicStroke\u7c7b\u578b\u7684\u5bf9\u8c61\u8868\u793a\u3002\u9ed8\u8ba4\u7684\u7b14\u7684\u7ebf\u5bbd\u7b49\u4e8e1\u3002\u8fd9\u662f\u5f53\u524d\u5750\u6807\u7cfb\u4e2d\u7684\u4e00\u4e2a\u5355\u4f4d\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u50cf\u7d20\u3002\u8981\u83b7\u5f97\u4e0d\u540c\u5bbd\u5ea6\u7684\u7ebf\u6761\uff0c\u53ef\u4ee5\u5b89\u88c5\u4e00\u4e2a\u65b0\u7684\u7b14\uff1a</p> <pre><code>g2.setStroke( new BasicStroke(width) );\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u4e2d\u7684width\u7684\u7c7b\u578b\u662ffloat\u3002\u53ef\u4ee5\u5411\u6784\u9020\u51fd\u6570\u6dfb\u52a0\u53c2\u6570\u6765\u63a7\u5236\u7b14\u5728\u5176\u7aef\u70b9\u7684\u5f62\u72b6\u4ee5\u53ca\u4e24\u4e2a\u7ebf\u6bb5\u76f8\u9047\u7684\u4f4d\u7f6e\u3002\uff08\u89c1\u5b50\u82822.2.1\u3002\uff09\u4f8b\u5982\uff1a</p> <pre><code>g2.setStroke( new BasicStroke( 5.0F,\n        BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL) );\n</code></pre> <p>\u8fd8\u53ef\u4ee5\u7528\u865a\u7ebf\u548c\u70b9\u7ebf\u5236\u4f5c\u7b14\uff0c\u4f46\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u5982\u4f55\u505a\u3002</p> <p>\u5bf9\u5f62\u72b6\u8fdb\u884c\u63cf\u8fb9\u6216\u586b\u5145\u610f\u5473\u7740\u8bbe\u7f6e\u67d0\u4e9b\u50cf\u7d20\u7684\u989c\u8272\u3002\u5728Java\u4e2d\uff0c\u7528\u4e8e\u5bf9\u8fd9\u4e9b\u50cf\u7d20\u7740\u8272\u7684\u89c4\u5219\u79f0\u4e3a\u201c\u753b\u7b14\u201d\u3002\u753b\u7b14\u53ef\u4ee5\u662f\u7eaf\u8272\u3001\u6e10\u53d8\u6216\u56fe\u6848\u3002\u4e0eJava\u4e2d\u7684\u5927\u591a\u6570\u4e1c\u897f\u4e00\u6837\uff0c\u753b\u7b14\u7531\u5bf9\u8c61\u8868\u793a\u3002\u5982\u679cpaint\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48</p> <pre><code>g2.setPaint(paint);\n</code></pre> <p>\u5c06\u8bbe\u7f6epaint\u7528\u4e8e\u56fe\u5f62\u4e0a\u4e0b\u6587g2\u7684\u540e\u7eed\u7ed8\u56fe\u64cd\u4f5c\uff0c\u76f4\u5230\u4e0b\u6b21\u66f4\u6539\u753b\u7b14\u4e3a\u6b62\u3002\uff08\u8fd8\u6709\u4e00\u79cd\u66f4\u65e7\u7684\u65b9\u6cd5\uff0cg2.setColor(c)\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u989c\u8272\uff0c\u5e76\u7b49\u4ef7\u4e8e\u8c03\u7528g2.setPaint(c)\u3002\uff09</p> <p>\u7eaf\u8272\u7531Color\u7c7b\u578b\u7684\u5bf9\u8c61\u8868\u793a\u3002\u989c\u8272\u5728\u5185\u90e8\u8868\u793a\u4e3aRGBA\u989c\u8272\u3002\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u4e0d\u900f\u660e\u989c\u8272\uff0c\u5176alpha\u5206\u91cf\u6700\u5927\uff1a</p> <pre><code>new Color( r, g, b );\n</code></pre> <p>\u5176\u4e2dr\u3001g\u548cb\u662f\u4ecb\u4e8e0\u5230255\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u8868\u793a\u989c\u8272\u7684\u7ea2\u3001\u7eff\u548c\u84dd\u5206\u91cf\u3002\u8981\u83b7\u5f97\u534a\u900f\u660e\u989c\u8272\uff0c\u53ef\u4ee5\u6dfb\u52a0alpha\u5206\u91cf\uff0c\u4e5f\u57280\u5230255\u8303\u56f4\u5185\uff1a</p> <pre><code>new Color( r, b, g, a );\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\uff0cColor.getHSBColor(h,s,b)\uff0c\u5b83\u4eceHSB\uff08\u53c8\u540dHSV\uff09\u989c\u8272\u6a21\u578b\u7684\u503c\u521b\u5efa\u989c\u8272\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8272\u76f8\u3001\u9971\u548c\u5ea6\u548c\u4eae\u5ea6\u989c\u8272\u5206\u91cf\u5fc5\u987b\u4f5c\u4e3afloat\u7c7b\u578b\u7684\u503c\u7ed9\u51fa\u3002\u8fd8\u6709\u5e38\u91cf\u6765\u8868\u793a\u5927\u7ea6\u5341\u51e0\u79cd\u5e38\u89c1\u7684\u989c\u8272\uff0c\u4f8b\u5982Color.WHITE\u3001Color.RED\u548cColor.YELLOW\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u6211\u53ef\u80fd\u5982\u4f55\u7ed8\u5236\u4e00\u4e2a\u5e26\u6709\u9ed1\u8272\u8f6e\u5ed3\u548c\u6d45\u84dd\u8272\u5185\u90e8\u7684\u6b63\u65b9\u5f62\u7684\u65b9\u6cd5\uff1a</p> <pre><code>Rectangle2D square = new Rectangle2D.Double(-2,-2,4,4);\ng2.setPaint( new Color(200,200,255) );\ng2.fill( square );\ng2.setStroke( new BasicStroke(0.1F) );\ng2.setPaint( Color.BLACK );\ng2.draw( square );\n</code></pre> <p>\u9664\u4e86\u7eaf\u8272\u5916\uff0cJava\u8fd8\u6709GradientPaint\u7c7b\uff0c\u7528\u4e8e\u8868\u793a\u7b80\u5355\u7684\u7ebf\u6027\u6e10\u53d8\uff0c\u4ee5\u53caTexturePaint\u7c7b\uff0c\u7528\u4e8e\u8868\u793a\u56fe\u6848\u586b\u5145\u3002\u5728\u4e09\u7ef4\u56fe\u5f62\u4e2d\u4f7f\u7528\u7684\u56fe\u50cf\u6a21\u5f0f\u79f0\u4e3a\u7eb9\u7406\u3002\u6e10\u53d8\u548c\u56fe\u6848\u5728\u5b50\u82822.2.2\u4e2d\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u753b\u7b14\uff0c\u5e94\u7528\u4e8e\u50cf\u7d20\u7684\u989c\u8272\u53d6\u51b3\u4e8e\u50cf\u7d20\u7684\u5750\u6807\u3002</p> <p>\u8981\u521b\u5efa\u4e00\u4e2aTexturePaint\uff0c\u60a8\u9700\u8981\u4e00\u4e2aBufferedImage\u5bf9\u8c61\u6765\u6307\u5b9a\u5b83\u5c06\u7528\u4f5c\u56fe\u6848\u7684\u56fe\u50cf\u3002\u60a8\u8fd8\u5fc5\u987b\u8bf4\u660e\u56fe\u50cf\u4e2d\u7684\u5750\u6807\u5982\u4f55\u6620\u5c04\u5230\u663e\u793a\u4e2d\u7684\u7ed8\u56fe\u5750\u6807\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u77e9\u5f62\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u8be5\u77e9\u5f62\u5c06\u5bb9\u7eb3\u56fe\u50cf\u7684\u4e00\u4e2a\u526f\u672c\u3002\u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>new TexturePaint( image, rect );\n</code></pre> <p>\u5176\u4e2dimage\u662fBufferedImage\uff0crect\u662fRectangle2D\u3002\u5728\u6307\u5b9a\u7684\u77e9\u5f62\u5916\u90e8\uff0c\u56fe\u50cf\u5728\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u4e0a\u91cd\u590d\u3002GradientPaint\u7684\u6784\u9020\u51fd\u6570\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>new GradientPaint( x1, y1, color1, x2, y2, color2, cyclic )\n</code></pre> <p>\u8fd9\u91cc\uff0cx1\u3001y1\u3001x2\u548cy2\u662ffloat\u7c7b\u578b\u7684\u503c\uff1bcolor1\u548ccolor2\u662fColor\u7c7b\u578b\uff1bcyclic\u662f\u5e03\u5c14\u503c\u3002\u6e10\u53d8\u989c\u8272\u5c06\u6cbf\u7740\u4ece\u70b9(x1,y1)\u5230\u70b9(x2,y2)\u7684\u7ebf\u6bb5\u53d8\u5316\u3002\u5728\u7b2c\u4e00\u4e2a\u7aef\u70b9\u5904\uff0c\u989c\u8272\u662fcolor1\uff0c\u5728\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u5904\u662fcolor2\u3002\u989c\u8272\u6cbf\u7740\u4e0e\u8be5\u7ebf\u6bb5\u5782\u76f4\u7684\u7ebf\u6bb5\u662f\u6052\u5b9a\u7684\u3002\u5e03\u5c14\u53c2\u6570cyclic\u6307\u5b9a\u989c\u8272\u6a21\u5f0f\u662f\u5426\u91cd\u590d\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u547d\u4ee4\u5c06\u5728\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\u5b89\u88c5\u4e00\u4e2aGradientPaint\uff1a</p> <pre><code>g2.setPaint( new GradientPaint( 0,0, Color.BLACK, 200,100, Color.RED, true ) );\n</code></pre> <p>\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u5f53\u524d\u753b\u7b14\u7528\u4e8e\u63cf\u8fb9\u548c\u586b\u5145\u3002</p> <p>\u793a\u4f8bJava\u7a0b\u5e8fjava2d/PaintDemo.java\u663e\u793a\u4e86\u4e00\u4e2a\u586b\u5145\u6709GradientPaint\u6216TexturePaint\u7684\u591a\u8fb9\u5f62\uff0c\u5e76\u5141\u8bb8\u60a8\u8c03\u6574\u5176\u5c5e\u6027\u3002\u56fe\u50cf\u6587\u4ef6java2d/QueenOfHearts.png\u548cjava2d/TinySmiley.png\u662f\u8be5\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u5728\u8fd0\u884c\u8be5\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4eec\u5fc5\u987b\u4e0e\u6784\u6210\u8be5\u7a0b\u5e8f\u7684\u7f16\u8bd1\u540e\u7684\u7c7b\u6587\u4ef6\u4f4d\u4e8e\u540c\u4e00\u4f4d\u7f6e\u3002</p> <p>Once you have an object that represents a shape, you can fill the shape or stroke it. The Graphics2D class defines methods for doing this. The method for stroking a shape is called draw:</p> <pre><code>g2.fill(shape);\ng2.draw(shape);\n</code></pre> <p>Here, g2 is of type Graphics2D, and shape can be of type Path2D, Line2D, Rectangle2D or any of the other shape classes. These are often used on a newly created object, when that object represents a shape that will only be drawn once. For example</p> <pre><code>g2.draw( new Line2D.Double( -5, -5, 5, 5 ) );\n</code></pre> <p>Of course, it is also possible to create shape objects and reuse them many times.</p> <p>The \"pen\" that is used for stroking a shape is usually represented by an object of type BasicStroke. The default stroke has line width equal to 1. That's one unit in the current coordinate system, not one pixel. To get a line with a different width, you can install a new stroke with</p> <pre><code>g2.setStroke( new BasicStroke(width) );\n</code></pre> <p>The width in the constructor is of type float. It is possible to add parameters to the constructor to control the shape of a stroke at its endpoints and where two segments meet. (See Subsection 2.2.1.) For example,</p> <pre><code>g2.setStroke( new BasicStroke( 5.0F,\n        BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL) );\n</code></pre> <p>It is also possible to make strokes out of dashes and dots, but I won't discuss how to do it here.</p> <p>Stroking or filling a shape means setting the colors of certain pixels. In Java, the rule that is used for coloring those pixels is called a \"paint.\" Paints can be solid colors, gradients, or patterns. Like most things in Java, paints are represented by objects. If paint is such an object, then</p> <pre><code>g2.setPaint(paint);\n</code></pre> <p>will set paint to be used in the graphics context g2 for subsequent drawing operations, until the next time the paint is changed. (There is also an older method, g2.setColor(c), that works only for colors and is equivalent to calling g2.setPaint(c).)</p> <p>Solid colors are represented by objects of type Color. A color is represented internally as an RGBA color. An opaque color, with maximal alpha component, can be created using the constructor</p> <pre><code>new Color( r, g, b );\n</code></pre> <p>where r, g, and b are integers in the range 0 to 255 that give the red, green, and blue components of the color. To get a translucent color, you can add an alpha component, also in the range 0 to 255:</p> <pre><code>new Color( r, b, g, a );\n</code></pre> <p>There is also a function, Color.getHSBColor(h,s,b), that creates a color from values in the HSB color model (which is another name for HSV). In this case, the hue, saturation, and brightness color components must be given as values of type float. And there are constants to represent about a dozen common colors, such as Color.WHITE, Color.RED, and Color.YELLOW. For example, here is how I might draw a square with a black outline and a light blue interior:</p> <pre><code>Rectangle2D square = new Rectangle2D.Double(-2,-2,4,4);\ng2.setPaint( new Color(200,200,255) );\ng2.fill( square );\ng2.setStroke( new BasicStroke(0.1F) );\ng2.setPaint( Color.BLACK );\ng2.draw( square );\n</code></pre> <p>Beyond solid colors, Java has the class GradientPaint, to represent simple linear gradients, and TexturePaint to represent pattern fills. (Image patterns used in a similar way in 3D graphics are called textures.) Gradients and patterns were discussed in Subsection 2.2.2. For these paints, the color that is applied to a pixel depends on the coordinates of the pixel.</p> <p>To create a TexturePaint, you need a BufferedImage object to specify the image that it will use as a pattern. You also have to say how coordinates in the image will map to drawing coordinates in the display. You do this by specifying a rectangle that will hold one copy of the image. So the constructor takes the form:</p> <pre><code>new TexturePaint( image, rect );\n</code></pre> <p>where image is the BufferedImage and rect is a Rectangle2D. Outside that specified rectangle, the image is repeated horizontally and vertically. The constructor for a GradientPaint takes the form</p> <pre><code>new GradientPaint( x1, y1, color1, x2, y2, color2, cyclic )\n</code></pre> <p>Here, x1, y1, x2, and y2 are values of type float; color1 and color2 are of type Color; and cyclic is boolean. The gradient color will vary along the line segment from the point (x1,y1) to the point (x2,y2). The color is color1 at the first endpoint and is color2 at the second endpoint. Color is constant along lines perpendicular to that line segment. The boolean parameter cyclic says whether or not the color pattern repeats. As an example, here is a command that will install a GradientPaint into a graphics context:</p> <pre><code>g2.setPaint( new GradientPaint( 0,0, Color.BLACK, 200,100, Color.RED, true ) );\n</code></pre> <p>You should, by the way, note that the current paint is used for strokes as well as for fills.</p> <p>The sample Java program java2d/PaintDemo.java displays a polygon filled with a GradientPaint or a TexturePaint and lets you adjust their properties. The image files java2d/QueenOfHearts.png and java2d/TinySmiley.png are part of that program, and they must be in the same location as the compiled class files that make up that program when it is run.</p>"},{"location":"cn/c2/s5/#254--\u53d8\u6362","title":"2.5.4  \u53d8\u6362","text":"<p>Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>Java\u5c06\u51e0\u4f55\u53d8\u6362\u5b9e\u73b0\u4e3aGraphics2D\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5982\u679cg2\u662f\u4e00\u4e2aGraphics2D\uff0c\u90a3\u4e48\u8c03\u7528g2.translate(1,3)\u5c06\u5bf9\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\u4e4b\u540e\u7ed8\u5236\u7684\u5bf9\u8c61\u5e94\u7528\u4e00\u4e2a(1,3)\u7684\u5e73\u79fb\u53d8\u6362\u3002\u53ef\u7528\u7684\u65b9\u6cd5\u5bf9\u5e94\u4e8eSection 2.3\u4e2d\u8ba8\u8bba\u7684\u53d8\u6362\u51fd\u6570\uff1a</p> <ul> <li><code>g2.scale(sx,sy)</code> \u2014 \u6309\u6c34\u5e73\u7f29\u653e\u56e0\u5b50sx\u548c\u5782\u76f4\u7f29\u653e\u56e0\u5b50sy\u7f29\u653e\u3002</li> <li><code>g2.rotate(r)</code> \u2014 \u7ed5\u539f\u70b9\u65cb\u8f6cr\u5f27\u5ea6\u89d2\u5ea6\uff0c\u5176\u4e2d\u89d2\u5ea6\u4ee5\u5f27\u5ea6\u8868\u793a\u3002\u6b63\u89d2\u5ea6\u5c06\u6b63x\u8f74\u65cb\u8f6c\u5230\u6b63y\u8f74\u7684\u65b9\u5411\u3002</li> <li><code>g2.rotate(r,x,y)</code> \u2014 \u7ed5\u70b9(x,y)\u65cb\u8f6cr\u89d2\u5ea6\u3002</li> <li><code>g2.translate(dx,dy)</code> \u2014 \u6c34\u5e73\u5e73\u79fbdx\u548c\u5782\u76f4\u5e73\u79fbdy\u3002</li> <li><code>g2.shear(sx,sy)</code> \u2014 \u5e94\u7528\u6c34\u5e73\u526a\u5207\u91cfsx\u548c\u5782\u76f4\u526a\u5207\u91cfsy\u3002\uff08\u901a\u5e38\uff0c\u526a\u5207\u91cf\u4e4b\u4e00\u4e3a0\uff0c\u4ea7\u751f\u7eaf\u6c34\u5e73\u6216\u7eaf\u5782\u76f4\u7684\u526a\u5207\u3002\uff09</li> </ul> <p>\u5728Java\u4e2d\uff0c\u53d8\u6362\u8868\u793a\u4e3aAffineTransform\u7c7b\u7684\u5bf9\u8c61\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u4e00\u822c\u7684\u4eff\u5c04\u53d8\u6362</p> <pre><code>AffineTransform trns = new AffineTransform(a,b,c,d,e,f);\n</code></pre> <p>\u53d8\u6362trns\u5c06\u70b9(x,y)\u53d8\u6362\u4e3a\u70b9(x1,y1)\uff0c\u516c\u5f0f\u5982\u4e0b</p> <pre><code>x1 = a*x + c*y + e\ny1 = b*x + d*y + f;\n</code></pre> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528g2.transform(trns)\u5c06\u53d8\u6362trns\u5e94\u7528\u4e8e\u56fe\u5f62\u4e0a\u4e0b\u6587g2\u3002</p> <p>\u56fe\u5f62\u4e0a\u4e0b\u6587g2\u5305\u62ec\u5f53\u524d\u7684\u4eff\u5c04\u53d8\u6362\uff0c\u8be5\u53d8\u6362\u662f\u5e94\u7528\u7684\u6240\u6709\u53d8\u6362\u7684\u7ec4\u5408\u3002\u8bf8\u5982g2.rotate\u548cg2.transform\u4e4b\u7c7b\u7684\u547d\u4ee4\u4fee\u6539\u5f53\u524d\u53d8\u6362\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528g2.getTransform()\u83b7\u53d6\u5f53\u524d\u53d8\u6362\u7684\u526f\u672c\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2aAffineTransform\u5bf9\u8c61\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528g2.setTransform(trns)\u8bbe\u7f6e\u5f53\u524d\u53d8\u6362\u3002\u8fd9\u5c06\u5728g2\u4e2d\u7528AffineTransform trns\u66ff\u6362\u5f53\u524d\u53d8\u6362\u3002\uff08\u6ce8\u610f\uff0cg2.setTransform(trns)\u4e0eg2.transform(trns)\u4e0d\u540c\uff1b\u7b2c\u4e00\u4e2a\u547d\u4ee4\u66ff\u6362g2\u4e2d\u7684\u5f53\u524d\u53d8\u6362\uff0c\u800c\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u4fee\u6539\u5f53\u524d\u53d8\u6362\uff0c\u5c06\u5176\u4e0etrns\u7ec4\u5408\u3002\uff09</p> <p>getTransform\u548csetTransform\u65b9\u6cd5\u53ef\u7528\u4e8e\u5b9e\u73b0\u5206\u5c42\u5efa\u6a21\u3002\u5982Section 2.4\u6240\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u7ed8\u5236\u5bf9\u8c61\u4e4b\u524d\uff0c\u60a8\u5e94\u4fdd\u5b58\u5f53\u524d\u53d8\u6362\u3002\u7ed8\u5236\u5bf9\u8c61\u540e\uff0c\u6062\u590d\u4fdd\u5b58\u7684\u53d8\u6362\u3002\u5728\u7ed8\u5236\u5bf9\u8c61\u53ca\u5176\u5b50\u5bf9\u8c61\u65f6\u5e94\u7528\u7684\u4efb\u4f55\u989d\u5916\u7684\u5efa\u6a21\u53d8\u6362\u5c06\u4e0d\u4f1a\u5f71\u54cd\u5bf9\u8c61\u4e4b\u5916\u7684\u5185\u5bb9\u3002\u5728Java\u4e2d\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\uff1a</p> <pre><code>AffineTransform savedTransform = g2.getTransform();\ndrawObject();\ng2.setTransform( savedTransform );\n</code></pre> <p>\u5bf9\u4e8e\u5206\u5c42\u56fe\u5f62\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u9700\u8981\u4e00\u4e2a\u53d8\u6362\u5806\u6808\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f7f\u7528\u5b50\u7a0b\u5e8f\u5b9e\u73b0\u5c42\u6b21\u7ed3\u6784\uff0c\u5219\u4e0a\u8ff0\u4ee3\u7801\u5c06\u662f\u5b50\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u5c40\u90e8\u53d8\u91cfsavedTransform\u7684\u503c\u5c06\u5b58\u50a8\u5728\u5b50\u7a0b\u5e8f\u8c03\u7528\u5806\u6808\u4e0a\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b50\u7a0b\u5e8f\u8c03\u7528\u5806\u6808\u6765\u5b9e\u73b0\u4fdd\u5b58\u53d8\u6362\u7684\u5806\u6808\u3002</p> <p>\u9664\u4e86\u5efa\u6a21\u53d8\u6362\u4e4b\u5916\uff0c\u53d8\u6362\u8fd8\u7528\u4e8e\u8bbe\u7f6e\u7a97\u53e3\u5230\u89c6\u53e3\u53d8\u6362\uff0c\u5efa\u7acb\u7528\u4e8e\u7ed8\u56fe\u7684\u5750\u6807\u7cfb\u7edf\u3002\u8fd9\u901a\u5e38\u5728\u521b\u5efa\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e4b\u540e\u7acb\u5373\u8fdb\u884c\uff0c\u800c\u4e0d\u662f\u5728\u4efb\u4f55\u7ed8\u56fe\u64cd\u4f5c\u4e4b\u524d\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528Subsection 2.3.7\u4e2d\u7684Java\u7248\u672c\u7684applyWindowToViewportTransformation\u51fd\u6570\u8fdb\u884c\u3002\u8bf7\u53c2\u89c1\u793a\u4f8b\u7a0b\u5e8fjava2d/GraphicsStarter.java\u3002</p> <p>\u6211\u8fd8\u8981\u63d0\u4e00\u4e0bAffineTransform\u5bf9\u8c61\u7684\u53e6\u4e00\u4e2a\u7528\u9014\uff1a\u6709\u65f6\uff0c\u60a8\u786e\u5b9e\u9700\u8981\u663e\u5f0f\u5730\u8f6c\u6362\u5750\u6807\u3002\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5bf9\u8c61\u5750\u6807(x,y)\uff0c\u6211\u53ef\u80fd\u9700\u8981\u77e5\u9053\u5b83\u4eec\u5728\u5c4f\u5e55\u4e0a\u5b9e\u9645\u4f1a\u5230\u8fbe\u54ea\u91cc\uff0c\u5373\u50cf\u7d20\u5750\u6807\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u60f3\u901a\u8fc7\u5f53\u524d\u53d8\u6362\u6765\u8f6c\u6362(x,y)\u4ee5\u83b7\u53d6\u76f8\u5e94\u7684\u50cf\u7d20\u5750\u6807\u3002AffineTransform\u7c7b\u6709\u4e00\u4e2a\u65b9\u6cd5\u7528\u4e8e\u5c06\u4eff\u5c04\u53d8\u6362\u5e94\u7528\u4e8e\u70b9\u3002\u5b83\u4f7f\u7528Point2D\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>AffineTransform trns = g2.getTransform();\nPoint2D.Double originalPoint = new Point2D.Double(x,y);\nPoint2D.Double transformedPoint = new Point2D.Double();\ntrns.transform( originalPoint, transformedPoint );\n// transformedPoint \u73b0\u5728\u5305\u542b\u4e0e (x,y) \u5bf9\u5e94\u7684\u50cf\u7d20\u5750\u6807\nint pixelX = (int)transformedPoint.x;\nint pixelY = (int)transformedPoint.y;\n</code></pre> <p>\u6211\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u5728\u5904\u7406\u5b57\u7b26\u4e32\u65f6\u3002\u901a\u5e38\uff0c\u5728\u4f7f\u7528\u53d8\u6362\u5750\u6807\u7cfb\u663e\u793a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u5e0c\u671b\u8f6c\u6362\u5b57\u7b26\u4e32\u7684\u57fa\u70b9\uff0c\u4f46\u4e0d\u8f6c\u6362\u5b57\u7b26\u4e32\u672c\u8eab\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u5e0c\u671b\u53d8\u6362\u5f71\u54cd\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u4f46\u4e0d\u5f71\u54cd\u5176\u5927\u5c0f\u6216\u65cb\u8f6c\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4f7f\u7528\u4e0a\u8ff0\u6280\u672f\u83b7\u53d6\u8f6c\u6362\u540e\u57fa\u70b9\u7684\u50cf\u7d20\u5750\u6807\uff0c\u7136\u540e\u5728\u8fd9\u4e9b\u5750\u6807\u5904\u7ed8\u5236\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u539f\u59cb\u7684\u3001\u672a\u7ecf\u8f6c\u6362\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u3002</p> <p>\u53cd\u5411\u64cd\u4f5c\u6709\u65f6\u4e5f\u662f\u5fc5\u8981\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed9\u5b9a\u50cf\u7d20\u5750\u6807(px,py)\uff0c\u627e\u5230\u901a\u8fc7\u7ed9\u5b9a\u4eff\u5c04\u53d8\u6362\u8f6c\u6362\u4e3a(px,py)\u7684\u70b9(x,y)\u3002\u4f8b\u5982\uff0c\u5f53\u5b9e\u73b0\u9f20\u6807\u4ea4\u4e92\u65f6\uff0c\u901a\u5e38\u4f1a\u77e5\u9053\u9f20\u6807\u7684\u50cf\u7d20\u5750\u6807\uff0c\u4f46\u60a8\u5e0c\u671b\u627e\u5230\u60a8\u81ea\u5df1\u9009\u62e9\u7684\u5750\u6807\u7cfb\u4e2d\u76f8\u5e94\u7684\u70b9\u3002\u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u9006\u53d8\u6362\u3002\u4eff\u5c04\u53d8\u6362T\u7684\u9006\u53d8\u6362\u662f\u6267\u884c\u76f8\u53cd\u53d8\u6362\u7684\u53e6\u4e00\u4e2a\u53d8\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cT(x,y) = (px,py)\uff0c\u5e76\u4e14\u5982\u679cR\u662f\u9006\u53d8\u6362\uff0c\u5219R(px,py) = (x,y)\u3002\u5728Java\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u83b7\u5f97AffineTransform trns\u7684\u9006\u53d8\u6362\uff1a</p> <pre><code>AffineTransform inverse = trns.createInverse();\n</code></pre> <p>\uff08\u6700\u540e\u6ce8\u610f\uff1a\u6765\u81eaGraphics\u7684\u65e7\u7ed8\u56fe\u65b9\u6cd5\uff0c\u5982drawLine\uff0c\u4f7f\u7528\u6574\u6570\u5750\u6807\u3002\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u4f7f\u7528\u8fd9\u4e9b\u65e7\u65b9\u6cd5\u7ed8\u5236\u7684\u4efb\u4f55\u5f62\u72b6\u90fd\u53d7\u5230\u4e0e\u6307\u5b9a\u5b9e\u6570\u5750\u6807\u7684Line2D\u7b49\u5f62\u72b6\u76f8\u540c\u7684\u53d8\u6362\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u4f7f\u7528g.drawLine(1,2,5,7)\u7ed8\u5236\u7ebf\u5c06\u5177\u6709\u4e0e\u7ed8\u5236\u5177\u6709\u7aef\u70b9(1.0,2.0)\u548c(5.0,7.0)\u7684Line2D\u76f8\u540c\u7684\u6548\u679c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6240\u6709\u7ed8\u56fe\u90fd\u53d7\u5230\u5750\u6807\u53d8\u6362\u7684\u5f71\u54cd\u3002\uff09</p> <p>Java implements geometric transformations as methods in the Graphics2D class. For example, if g2 is a Graphics2D, then calling g2.translate(1,3) will apply a translation by (1,3) to objects that are drawn after the method is called. The methods that are available correspond to the transform functions discussed in Section 2.3:</p> <ul> <li><code>g2.scale(sx,sy)</code> \u2014 scales by a horizontal scale factor sx and a vertical scale factor sy.</li> <li><code>g2.rotate(r)</code> \u2014 rotates by the angle r about the origin, where the angle is measured in radians. A positive angle rotates the positive x-axis in the direction of the positive y-axis.</li> <li><code>g2.rotate(r,x,y)</code> \u2014 rotates by the angle r about the point (x,y).</li> <li><code>g2.translate(dx,dy)</code> \u2014 translates by dx horizontally and dy vertically.</li> <li><code>g2.shear(sx,sy)</code> \u2014 applies a horizontal shear amount sx and a vertical shear amount sy. (Usually, one of the shear amounts is 0, giving a pure horizontal or vertical shear.)</li> </ul> <p>A transform in Java is represented as an object of the class AffineTransform. You can create a general affine transform with the constructor</p> <pre><code>AffineTransform trns = new AffineTransform(a,b,c,d,e,f);\n</code></pre> <p>The transform trns will transform a point (x,y) to the point (x1,y1) given by</p> <pre><code>x1 = a*x + c*y + e\ny1 = b*x + d*y + f;\n</code></pre> <p>You can apply the transform trns to a graphics context g2 by calling g2.transform(trns).</p> <p>The graphics context g2 includes the current affine transform, which is the composition of all the transforms that have been applied. Commands such as g2.rotate and g2.transform modify the current transform. You can get a copy of the current transform by calling g2.getTransform(), which returns an AffineTransform object. You can set the current transform using g2.setTransform(trns). This replaces the current transform in g2 with the AffineTransform trns. (Note that g2.setTransform(trns) is different from g2.transform(trns); the first command replaces the current transform in g2, while the second modifies the current transform by composing it with trns.)</p> <p>The getTransform and setTransform methods can be used to implement hierarchical modeling. The idea, as discussed in Section 2.4, is that before drawing an object, you should save the current transform. After drawing the object, restore the saved transform. Any additional modeling transformations that are applied while drawing the object and its sub-objects will have no effect outside the object. In Java, this looks like</p> <pre><code>AffineTransform savedTransform = g2.getTransform();\ndrawObject();\ng2.setTransform( savedTransform );\n</code></pre> <p>For hierarchical graphics, we really need a stack of transforms. However, if the hierarchy is implemented using subroutines, then the above code would be part of a subroutine, and the value of the local variable savedTransform would be stored on the subroutine call stack. Effectively, we would be using the subroutine call stack to implement the stack of saved transforms.</p> <p>In addition to modeling transformations, transforms are used to set up the window-to-viewport transformation that establishes the coordinate system that will be used for drawing. This is usually done in Java just after the graphics context has been created, before any drawing operations. It can be done with a Java version of the applyWindowToViewportTransformation function from Subsection 2.3.7. See the sample program java2d/GraphicsStarter.java for an example.</p> <p>I will mention one more use for AffineTransform objects: Sometimes, you do need to explicitly transform coordinates. For example, given object coordinates (x,y), I might need to know where they will actually end up on the screen, in pixel coordinates. That is, I would like to transform (x,y) by the current transform to get the corresponding pixel coordinates. The AffineTransform class has a method for applying the affine transform to a point. It works with objects of type Point2D. Here is an example:</p> <pre><code>AffineTransform trns = g2.getTransform();\nPoint2D.Double originalPoint = new Point2D.Double(x,y);\nPoint2D.Double transformedPoint = new Point2D.Double();\ntrns.transform( originalPoint, transformedPoint );\n// transformedPoint now contains the pixel coords corresponding to (x,y)\nint pixelX = (int)transformedPoint.x;\nint pixelY = (int)transformedPoint.y;\n</code></pre> <p>One way I have used this is when working with strings. Often when displaying a string in a transformed coordinate system, I want to transform the basepoint of a string, but not the string itself. That is, I want the transformation to affect the location of the string but not its size or rotation. To accomplish this, I use the above technique to obtain the pixel coordinates for the transformed basepoint, and then draw the string at those coordinates, using an original, untransformed graphics context.</p> <p>The reverse operation is also sometimes necessary. That is, given pixel coordinates (px,py), find the point (x,y) that is transformed to (px,py) by a given affine transform. For example, when implementing mouse interaction, you will generally know the pixel coordinates of the mouse, but you will want to find the corresponding point in your own chosen coordinate system. For that, you need an inverse transform. The inverse of an affine transform T is another transform that performs the opposite transformation. That is, if T(x,y) = (px,py), and if R is the inverse transform, then R(px,py) = (x,y). In Java, the inverse transform of an AffineTransform trns can be obtained with</p> <p>AffineTransform inverse = trns.createInverse(); (A final note: The older drawing methods from Graphics, such as drawLine, use integer coordinates. It's important to note that any shapes drawn using these older methods are subject to the same transformation as shapes such as Line2D that are specified with real number coordinates. For example, drawing a line with g.drawLine(1,2,5,7) will have the same effect as drawing a Line2D that has endpoints (1.0,2.0) and (5.0,7.0). In fact, all drawing is affected by the transformation of coordinates.)</p> <pre><code>AffineTransform inverse = trns.createInverse();\n</code></pre> <p>(A final note: The older drawing methods from Graphics, such as drawLine, use integer coordinates. It's important to note that any shapes drawn using these older methods are subject to the same transformation as shapes such as Line2D that are specified with real number coordinates. For example, drawing a line with g.drawLine(1,2,5,7) will have the same effect as drawing a Line2D that has endpoints (1.0,2.0) and (5.0,7.0). In fact, all drawing is affected by the transformation of coordinates.)</p>"},{"location":"cn/c2/s5/#255--bufferedimage-\u548c-pixels","title":"2.5.5  BufferedImage \u548c Pixels","text":"<p>BufferedImage and Pixels</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u4e00\u4e9b\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u80fd\u591f\u4f7f\u7528\u4e0d\u53ef\u89c1\u4e8e\u5c4f\u5e55\u7684\u56fe\u50cf\u662f\u5f88\u6709\u7528\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u9700\u8981\u6211\u6240\u79f0\u7684\u79bb\u5c4f\u753b\u5e03\u3002\u60a8\u8fd8\u9700\u8981\u4e00\u79cd\u5feb\u901f\u5c06\u79bb\u5c4f\u753b\u5e03\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u526f\u672c\u5b58\u50a8\u5728\u79bb\u5c4f\u753b\u5e03\u4e2d\u53ef\u80fd\u5f88\u6709\u7528\u3002\u753b\u5e03\u662f\u56fe\u50cf\u7684\u5b98\u65b9\u526f\u672c\u3002\u5bf9\u56fe\u50cf\u7684\u66f4\u6539\u662f\u5728\u753b\u5e03\u4e0a\u8fdb\u884c\u7684\uff0c\u7136\u540e\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u3002\u8fd9\u6837\u505a\u7684\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u60a8\u53ef\u4ee5\u5728\u5c4f\u5e55\u56fe\u50cf\u4e0a\u7ed8\u5236\u989d\u5916\u7684\u5185\u5bb9\u800c\u4e0d\u6539\u53d8\u5b98\u65b9\u526f\u672c\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u4f1a\u5728\u5c4f\u5e55\u56fe\u50cf\u4e2d\u9009\u62e9\u4e00\u4e2a\u533a\u57df\u5e76\u7ed8\u5236\u4e00\u4e2a\u6846\u3002\u60a8\u53ef\u4ee5\u5728\u4e0d\u635f\u5bb3\u79bb\u5c4f\u753b\u5e03\u4e2d\u7684\u5b98\u65b9\u526f\u672c\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u8981\u4ece\u5c4f\u5e55\u4e2d\u5220\u9664\u6846\uff0c\u60a8\u53ea\u9700\u5c06\u79bb\u5c4f\u753b\u5e03\u56fe\u50cf\u590d\u5236\u5230\u5c4f\u5e55\u4e0a\u3002</p> <p>\u5728Java\u4e2d\uff0c\u53ef\u4ee5\u5c06\u79bb\u5c4f\u56fe\u50cf\u5b9e\u73b0\u4e3aBufferedImage\u7c7b\u578b\u7684\u5bf9\u8c61\u3002BufferedImage\u8868\u793a\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u7ed8\u5236\uff0c\u65b9\u5f0f\u4e0e\u60a8\u53ef\u4ee5\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\u7684\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u83b7\u53d6\u4e00\u4e2a\u540d\u4e3ag2\u7684Graphics2D\u7c7b\u578b\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\uff0c\u7528\u4e8e\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u3002BufferedImage\u662f\u4e00\u4e2aImage\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\u6216\u4efb\u4f55\u5176\u4ed6\u56fe\u5f62\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5c31\u50cf\u5904\u7406\u4efb\u4f55\u5176\u4ed6Image\u4e00\u6837\uff0c\u5373\u4f7f\u7528\u8981\u663e\u793a\u56fe\u50cf\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\u7684drawImage\u65b9\u6cd5\u3002\u5728\u5178\u578b\u7684\u8bbe\u7f6e\u4e2d\uff0c\u6709\u5982\u4e0b\u53d8\u91cf\uff1a</p> <pre><code>BufferedImage OSC;  // \u79bb\u5c4f\u753b\u5e03\nGraphics2D OSG;     // \u7528\u4e8e\u5728\u753b\u5e03\u4e0a\u7ed8\u5236\u7684\u56fe\u5f62\u4e0a\u4e0b\u6587\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\u5bf9\u8c61\uff1a</p> <pre><code>OSC = new BufferedImage( 640, 480, BufferedImage.TYPE_INT_RGB );\nOSG = OSC.createGraphics();\n</code></pre> <p>BufferedImage\u7684\u6784\u9020\u51fd\u6570\u6307\u5b9a\u4e86\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4ee5\u53ca\u5176\u7c7b\u578b\u3002\u7c7b\u578b\u544a\u8bc9\u4e86\u56fe\u50cf\u4e2d\u53ef\u4ee5\u8868\u793a\u4ec0\u4e48\u989c\u8272\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u5b58\u50a8\u3002\u5728\u8fd9\u91cc\uff0c\u7c7b\u578b\u4e3aTYPE_INT_RGB\uff0c\u8fd9\u610f\u5473\u7740\u56fe\u50cf\u4f7f\u7528\u5e26\u6709\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u76848\u4f4d\u7684\u5e38\u89c4RGB\u989c\u8272\u3002\u6bcf\u4e2a\u50cf\u7d20\u7684\u4e09\u4e2a\u989c\u8272\u5206\u91cf\u88ab\u6253\u5305\u5230\u4e00\u4e2a\u6574\u6570\u503c\u4e2d\u3002</p> <p>\u5728\u4f7f\u7528BufferedImage\u5b58\u50a8\u5c4f\u5e55\u4e0a\u56fe\u50cf\u7684\u7a0b\u5e8f\u4e2d\uff0cpaintComponent\u65b9\u6cd5\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>protected void paintComponent(Graphics g) {\n    g.drawImage( OSC, 0, 0, null );\n    Graphics2D g2 = (Graphics2D)g.create();\n    .\n    . // \u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u989d\u5916\u7684\u5185\u5bb9\u3002\n    .\n}\n</code></pre> <p>\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u7684\u793a\u4f8b\u7a0b\u5e8f\u662fjava2d/JavaPixelManipulation.java\u3002\u5728\u8be5\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u62d6\u52a8\u9f20\u6807\u6765\u7ed8\u5236\u7ebf\u6761\u3001\u77e9\u5f62\u548c\u692d\u5706\u3002\u5f53\u9f20\u6807\u79fb\u52a8\u65f6\uff0c\u5f62\u72b6\u5728\u9f20\u6807\u7684\u8d77\u59cb\u70b9\u548c\u5f53\u524d\u4f4d\u7f6e\u4e4b\u95f4\u7ed8\u5236\u3002\u968f\u7740\u9f20\u6807\u7684\u79fb\u52a8\uff0c\u73b0\u6709\u56fe\u50cf\u7684\u90e8\u5206\u53ef\u4ee5\u88ab\u91cd\u590d\u8986\u76d6\u548c\u66b4\u9732\uff0c\u800c\u4e0d\u66f4\u6539\u73b0\u6709\u56fe\u50cf\u3002\u4e8b\u5b9e\u4e0a\uff0c\u56fe\u50cf\u5728\u4e00\u4e2a\u79bb\u5c4f\u753b\u5e03\u4e2d\uff0c\u7528\u6237\u7ed8\u5236\u7684\u5f62\u72b6\u5b9e\u9645\u4e0a\u662f\u7531paintComponent\u5728\u753b\u5e03\u7684\u5185\u5bb9\u4e0a\u7ed8\u5236\u7684\u3002\u76f4\u5230\u7528\u6237\u91ca\u653e\u9f20\u6807\u5e76\u7ed3\u675f\u62d6\u52a8\u64cd\u4f5c\uff0c\u5f62\u72b6\u624d\u4f1a\u88ab\u7ed8\u5236\u5230\u753b\u5e03\u4e2d\u7684\u5b98\u65b9\u56fe\u50cf\u4e0a\u3002</p> <p>\u4f46\u6211\u7f16\u5199\u8be5\u7a0b\u5e8f\u7684\u4e3b\u8981\u539f\u56e0\u662f\u4e3a\u4e86\u8bf4\u660e\u50cf\u7d20\u64cd\u4f5c\uff0c\u5373\u4f7f\u7528\u5355\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u5206\u91cf\u8fdb\u884c\u8ba1\u7b97\u3002BufferedImage\u7c7b\u6709\u7528\u4e8e\u8bfb\u53d6\u548c\u8bbe\u7f6e\u5355\u4e2a\u50cf\u7d20\u989c\u8272\u7684\u65b9\u6cd5\u3002\u56fe\u50cf\u7531\u50cf\u7d20\u7684\u884c\u548c\u5217\u7ec4\u6210\u3002\u5982\u679cOSC\u662fBufferedImage\uff0c\u5219</p> <pre><code>int color = OSC.getRGB(x,y)\n</code></pre> <p>\u83b7\u53d6\u8868\u793ax\u5217y\u884c\u50cf\u7d20\u989c\u8272\u7684\u6574\u6570\u3002\u6bcf\u4e2a\u989c\u8272\u5206\u91cf\u5b58\u50a8\u5728\u6574\u6570\u989c\u8272\u503c\u4e2d\u7684\u4e00\u4e2a8\u4f4d\u5b57\u6bb5\u4e2d\u3002\u53ef\u4ee5\u4f7f\u7528Java\u7684\u4f4d\u64cd\u4f5c\u7b26\u4ece\u6574\u6570\u989c\u8272\u503c\u4e2d\u63d0\u53d6\u51fa\u7528\u4e8e\u5904\u7406\u7684\u5355\u4e2a\u989c\u8272\u5206\u91cf\uff1a</p> <pre><code>int red = (color &gt;&gt; 16) &amp; 255;\nint green = (color &gt;&gt; 8) &amp; 255;\nint blue = color &amp; 255;\n</code></pre> <p>\u7c7b\u4f3c\u5730\uff0c\u7ed9\u5b9a\u8303\u56f4\u4e3a0\u5230255\u7684\u7ea2\u8272\u3001\u7eff\u8272\u548c\u84dd\u8272\u5206\u91cf\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5206\u91cf\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u8bbe\u7f6e\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u989c\u8272\uff1a</p> <pre><code>int color = (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue;\nOSC.setRGB(x,y,color);\n</code></pre> <p>\u8fd8\u6709\u7528\u4e8e\u8bfb\u53d6\u548c\u8bbe\u7f6e\u77e9\u5f62\u533a\u57df\u4e2d\u6240\u6709\u50cf\u7d20\u989c\u8272\u7684\u65b9\u6cd5\u3002</p> <p>\u50cf\u7d20\u64cd\u4f5c\u7528\u4e8e\u5b9e\u73b0\u793a\u4f8b\u7a0b\u5e8f\u7684\u4e24\u4e2a\u529f\u80fd\u3002\u9996\u5148\uff0c\u6709\u4e00\u4e2a\u201c\u6d82\u62b9\u201d\u5de5\u5177\u3002\u5f53\u7528\u6237\u4f7f\u7528\u6b64\u5de5\u5177\u62d6\u52a8\u65f6\uff0c\u5c31\u50cf\u6d82\u62b9\u6e7f\u6f06\u4e00\u6837\u3002\u5f53\u7528\u6237\u9996\u6b21\u5355\u51fb\u9f20\u6807\u65f6\uff0c\u4ece\u9f20\u6807\u4f4d\u7f6e\u5468\u56f4\u7684\u4e00\u5c0f\u5757\u50cf\u7d20\u4e2d\u590d\u5236\u989c\u8272\u5206\u91cf\u5230\u6570\u7ec4\u4e2d\u3002\u968f\u7740\u7528\u6237\u79fb\u52a8\u9f20\u6807\uff0c\u989c\u8272\u4ece\u6570\u7ec4\u4e2d\u6df7\u5408\u5230\u9f20\u6807\u9644\u8fd1\u7684\u50cf\u7d20\u989c\u8272\u4e2d\uff0c\u540c\u65f6\u5c06\u8fd9\u4e9b\u989c\u8272\u6df7\u5408\u5230\u6570\u7ec4\u4e2d\u7684\u989c\u8272\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u5df2\u7ecf\u201c\u6d82\u62b9\u201d\u7684\u5c0f\u77e9\u5f62\uff1a</p> <p>     ![ <p>pixel-coordinates](../../en/c2/smudge.png) </p> <p>\u50cf\u7d20\u64cd\u4f5c\u7684\u7b2c\u4e8c\u4e2a\u7528\u9014\u662f\u5b9e\u73b0\u201c\u6ee4\u955c\u201d\u3002\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6ee4\u955c\u662f\u4e00\u79cd\u901a\u8fc7\u5c06\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u66ff\u6362\u4e3a\u4e00\u4e2a3x3\u50cf\u7d20\u65b9\u5757\u7684\u989c\u8272\u7684\u52a0\u6743\u5e73\u5747\u503c\u6765\u4fee\u6539\u56fe\u50cf\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u201c\u6a21\u7cca\u201d\u6ee4\u955c\u4f7f\u7528\u6240\u6709\u50cf\u7d20\u7684\u5e73\u5747\u6743\u91cd\uff0c\u56e0\u6b64\u50cf\u7d20\u7684\u989c\u8272\u4f1a\u66f4\u6539\u4e3a\u8be5\u50cf\u7d20\u53ca\u5176\u90bb\u5c45\u7684\u989c\u8272\u7684\u7b80\u5355\u5e73\u5747\u503c\u3002\u4f7f\u7528\u4e0d\u540c\u7684\u6743\u91cd\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u8fdb\u884c\u64cd\u4f5c\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e9b\u5f15\u4eba\u6ce8\u76ee\u7684\u6548\u679c\u3002</p> <p>\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\u50cf\u7d20\u64cd\u4f5c\u4ea7\u751f\u4e86\u7eaf\u77e2\u91cf\u56fe\u5f62\u65e0\u6cd5\u5b9e\u73b0\u7684\u6548\u679c\u3002\u6211\u9f13\u52b1\u60a8\u901a\u8fc7\u67e5\u770b\u6e90\u4ee3\u7801\u6765\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\u60a8\u8fd8\u53ef\u4ee5\u67e5\u770b\u4e0b\u4e00\u8282\u4e2d\u4f7f\u7528HTML\u753b\u5e03\u56fe\u5f62\u5b9e\u73b0\u76f8\u540c\u6548\u679c\u7684\u5b9e\u65f6\u6f14\u793a\u3002</p> <p>In some graphics applications, it is useful to be able to work with images that are not visible on the screen. That is, you need what I call an off-screen canvas. You also need a way to quickly copy the off-screen canvas onto the screen. For example, it can be useful to store a copy of the on-screen image in an off-screen canvas. The canvas is the official copy of the image. Changes to the image are made to the canvas, then copied to the screen. One reason to do this is that you can then draw extra stuff on top of the screen image without changing the official copy. For example, you might draw a box around a selected region in the on-screen image. You can do this without damaging the official copy in the off-screen canvas. To remove the box from the screen, you just have to copy the off-screen canvas image onto the screen.</p> <p>In Java, an off-screen image can be implemented as an object of type BufferedImage. A BufferedImage represents a region in memory where you can draw, in exactly the same way that you can draw to the screen. That is, you can obtain a graphics context g2 of type Graphics2D that you can use for drawing on the image. A BufferedImage is an Image, and you can draw it onto the screen\u2014or into any other graphics context\u2014like any other Image, that is, by using the drawImage method of the graphics context where you want to display the image. In a typical setup, there are variables</p> <pre><code>BufferedImage OSC;  // The off-screen canvas.\nGraphics2D OSG;     // graphics context for drawing to the canvas\n</code></pre> <p>The objects are created using, for example,</p> <pre><code>OSC = new BufferedImage( 640, 480, BufferedImage.TYPE_INT_RGB );\nOSG = OSC.createGraphics();\n</code></pre> <p>The constructor for BufferedImage specifies the width and height of the image along with its type. The type tells what colors can be represented in the image and how they are stored. Here, the type is TYPE_INT_RGB, which means the image uses regular RGB colors with 8 bits for each color component. The three color components for a pixel are packed into a single integer value.</p> <p>In a program that uses a BufferedImage to store a copy of the on-screen image, the paintComponent method generally has the form</p> <pre><code>protected void paintComponent(Graphics g) {\n    g.drawImage( OSC, 0, 0, null );\n    Graphics2D g2 = (Graphics2D)g.create();\n    .\n    . // Draw extra stuff on top of the image.\n    .\n}\n</code></pre> <p>A sample program that uses this technique is java2d/JavaPixelManipulation.java. In that program, the user can draw lines, rectangles, and ovals by dragging the mouse. As the mouse moves, the shape is drawn between the starting point of the mouse and its current location. As the mouse moves, parts of the existing image can be repeatedly covered and uncovered, without changing the existing image. In fact, the image is in an off-screen canvas, and the shape that the user is drawing is actually drawn by paintComponent over the contents of the canvas. The shape is not drawn to the official image in the canvas until the user releases the mouse and ends the drag operation.</p> <p>But my main reason for writing the program was to illustrate pixel manipulation, that is, computing with the color components of individual pixels. The BufferedImage class has methods for reading and setting the color of individual pixels. An image consists of rows and columns of pixels. If OSC is a BufferedImage, then</p> <pre><code>int color = OSC.getRGB(x,y)\n</code></pre> <p>gets the integer that represents the color of the pixel in column number x and row number y. Each color component is stored in an 8-bit field in the integer color value. The individual color components can be extracted for processing using Java's bit manipulation operators:</p> <pre><code>int red = (color &gt;&gt; 16) &amp; 255;\nint green = (color &gt;&gt; 8) &amp; 255;\nint blue = color &amp; 255;\n</code></pre> <p>Similarly, given red, green, and blue color component values in the range 0 to 255, we can combine those component values into a single integer and use it to set the color of a pixel in the image:</p> <pre><code>int color = (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue;\nOSC.setRGB(x,y,color);\n</code></pre> <p>There are also methods for reading and setting the colors of an entire rectangular region of pixels.</p> <p>Pixel operations are used to implement two features of the sample program. First, there is a \"Smudge\" tool. When the user drags with this tool, it's like smearing wet paint. When the user first clicks the mouse, the color components from a small square of pixels surrounding the mouse position are copied into arrays. As the user moves the mouse, color from the arrays is blended into the color of the pixels near the mouse position, while those colors are blended into the colors in the arrays. Here is a small rectangle that has been \"smudged\":</p> <p> </p> <p>The second use of pixel manipulation is in implementing \"filters.\" A filter, in this program, is an operation that modifies an image by replacing the color of each pixel with a weighted average of the colors of a 3-by-3 square of pixels. A \"Blur\" filter for example, uses equal weights for all pixels in the average, so the color of a pixel is changed to the simple average of the colors of that pixel and its neighbors. Using different weights for each pixel can produce some striking effects.</p> <p>The pixel manipulation in the sample program produces effects that can't be achieved with pure vector graphics. I encourage you to learn more by looking at the source code. You might also take a look at the live demos in the next section, which implement the same effects using HTML canvas graphics.</p>"},{"location":"cn/c2/s6/","title":"\u7b2c6\u8282: HTML Canvas\u56fe\u5f62","text":"<p>HTML Canvas Graphics</p> \u4e2d\u6587\u82f1\u6587 <p>Most modern web browsers support a 2D graphics API that can be used to create images on a web page. The API is implemented using JavaScript, the client-side programming language for the web. I won't cover the JavaScript language in this section. To understand the material presented here, you don't need to know much about it. Even if you know nothing about it at all, you can learn something about its 2D graphics API and see how it is similar to, and how it differs from, the Java API presented in the previous section. (For a short introduction to JavaScript, see Section A.3 in Appendix A.)</p>"},{"location":"cn/c2/s6/#261--the-2d-graphics-context","title":"2.6.1  The 2D Graphics Context","text":"<p>The 2D Graphics Context</p> \u4e2d\u6587\u82f1\u6587 <p>The visible content of a web page is made up of \"elements\" such as headlines and paragraphs. The content is specified using the HTML language. A \"canvas\" is an HTML element. It appears on the page as a blank rectangular area which can be used as a drawing surface by what I am calling the \"HTML canvas\" graphics API. In the source code of a web page, a canvas element is created with code of the form</p> <pre><code>&lt;canvas width=\"800\" height=\"600\" id=\"theCanvas\"&gt;&lt;/canvas&gt;\n</code></pre> <p>The width and height give the size of the drawing area, in pixels. The id is an identifier that can be used to refer to the canvas in JavaScript.</p> <p>To draw on a canvas, you need a graphics context. A graphics context is an object that contains functions for drawing shapes. It also contains variables that record the current graphics state, including things like the current drawing color, transform, and font. Here, I will generally use graphics as the name of the variable that refers to the graphics context, but the variable name is, of course, up to the programmer. This graphics context plays the same role in the canvas API that a variable of type Graphics2D plays in Java. A typical starting point is</p> <pre><code>canvas = document.getElementById(\"theCanvas\");\ngraphics = canvas.getContext(\"2d\");\n</code></pre> <p>The first line gets a reference to the canvas element on the web page, using its id. The second line creates the graphics context for that canvas element. (This code will produce an error in a web browser that doesn't support canvas, so you might add some error checking such as putting these commands inside a try..catch statement.)</p> <p>Typically, you will store the canvas graphics context in a global variable and use the same graphics context throughout your program. This is in contrast to Java, where you typically get a new Graphics2D context each time the paintComponent() method is called, and that new context is in its initial state with default color and stroke properties and with no applied transform. When a graphics context is global, changes made to the state in one function call will carry over to subsequent function calls, unless you do something to limit their effect. This can actually lead to a fairly common type of bug: For example, if you apply a 30-degree rotation in a function, those rotations will accumulate each time the function is called, unless you do something to undo the previous rotation before the function is called again.</p> <p>The rest of this section will be mostly concerned with describing what you can do with a canvas graphics context. But here, for the record, is the complete source code for a very minimal web page that uses canvas graphics:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Canvas Graphics&lt;/title&gt;\n&lt;script&gt;\n    let canvas;    // DOM object corresponding to the canvas\n    let graphics;  // 2D graphics context for drawing on the canvas\n\n    function draw() {\n        // draw on the canvas, using the graphics context\n        graphics.fillText(\"Hello World\", 10, 20);\n    }\n\n    function init() {\n        canvas = document.getElementById(\"theCanvas\");\n        graphics = canvas.getContext(\"2d\");\n        draw();  // draw something on the canvas\n    }\n\n    window.onload = init;\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;canvas id=\"theCanvas\" width=\"640\" height=\"480\"&gt;&lt;/canvas&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>For a more complete, though still minimal, example, you can look at the sample page canvas2d/GraphicsStarter.html. (You should look at the page in a browser, but you should also read the source code.) This example shows how to draw some basic shapes using canvas graphics, and you can use it as a basis for your own experimentation. There are also three more advanced \"starter\" examples: canvas2d/GraphicsPlusStarter.html adds some utility functions for drawing shapes and setting up a coordinate system; canvas2d/AnimationStarter.html adds animation and includes a simple hierarchical modeling example; and canvas2d/EventsStarter.html shows how to respond to keyboard and mouse events.</p>"},{"location":"cn/c2/s6/#262--shapes","title":"2.6.2  Shapes","text":"\u4e2d\u6587\u82f1\u6587 <p>The default coordinate system on a canvas is the usual: The unit of measure is one pixel; (0,0) is at the upper left corner; the x-coordinate increases to the right; and the y-coordinate increases downward. The range of x and y values is given by the width and height properties of the  element. The term \"pixel\" here for the unit of measure is not really correct. Probably, I should say something like \"one nominal pixel.\" The unit of measure is one pixel at typical desktop resolution with no magnification. If you apply a magnification to a browser window, the unit of measure gets stretched. And on a high-resolution screen, one unit in the default coordinate system might correspond to several actual pixels on the display device. <p>The canvas API supports only a very limited set of basic shapes. In fact, the only basic shapes are rectangles and text. Other shapes must be created as paths. Shapes can be stroked and filled. That includes text: When you stroke a string of text, a pen is dragged along the outlines of the characters; when you fill a string, the insides of the characters are filled. It only really makes sense to stroke text when the characters are rather large. Here are the functions for drawing rectangles and text, where graphics refers to the object that represents the graphics context:</p> <ul> <li><code>graphics.fillRect(x,y,w,h)</code> \u2014 draws a filled rectangle with corner at (x,y), with width w and with height h. If the width or the height is less than or equal to zero, nothing is drawn.</li> <li><code>graphics.strokeRect(x,y,w,h)</code> \u2014 strokes the outline of the same rectangle.</li> <li><code>graphics.clearRect(x,y,w,h)</code> \u2014 clears the rectangle by filling it with fully transparent pixels, allowing the background of the canvas to show. The background is determined by the properties of the web page on which the canvas appears. It might be a background color, an image, or even another canvas.</li> <li><code>graphics.fillText(str,x,y)</code> \u2014 fills the characters in the string str. The left end of the baseline of the string is positioned at the point (x,y).</li> <li><code>graphics.strokeText(str,x,y)</code> \u2014 strokes the outlines of the characters in the string.</li> </ul> <p>A path can be created using functions in the graphics context. The context keeps track of a \"current path.\" In the current version of the API, paths are not represented by objects, and there is no way to work with more than one path at a time or to keep a copy of a path for later reuse. Paths can contain lines, Bezier curves, and circular arcs. Here are the most common functions for working with paths:</p> <ul> <li><code>graphics.beginPath()</code> \u2014 start a new path. Any previous path is discarded, and the current path in the graphics context is now empty. Note that the graphics context also keeps track of the current point, the last point in the current path. After calling graphics.beginPath(), the current point is undefined.</li> <li><code>graphics.moveTo(x,y)</code> \u2014 move the current point to (x,y), without adding anything to the path. This can be used for the starting point of the path or to start a new, disconnected segment of the path.</li> <li><code>graphics.lineTo(x,y)</code> \u2014 add the line segment starting at current point and ending at (x,y) to the path, and move the current point to (x,y).</li> <li><code>graphics.bezierCurveTo(cx1,cy1,c2x,cy2,x,y)</code> \u2014 add a cubic Bezier curve to the path. The curve starts at the current point and ends at (x,y). The points (cx1,cy1) and (cx2,cy2) are the two control points for the curve. (Bezier curves and their control points were discussed in Subsection 2.2.3.)</li> <li><code>graphics.quadraticCurveTo(cx,cy,x,y)</code> \u2014 adds a quadratic Bezier curve from the current point to (x,y), with control point (cx,cy).</li> <li><code>graphics.arc(x,y,r,startAngle,endAngle)</code> \u2014 adds an arc of the circle with center (x,y) and radius r. The next two parameters give the starting and ending angle of the arc. They are measured in radians. The arc extends in the positive direction from the start angle to the end angle. (The positive rotation direction is from the positive x-axis towards the positive y-axis; this is clockwise in the default coordinate system.) An optional fifth parameter can be set to true to get an arc that extends in the negative direction. After drawing the arc, the current point is at the end of the arc. If there is a current point before graphics.arc is called, then before the arc is drawn, a line is added to the path that extends from the current point to the starting point of the arc. (Recall that immediately after graphics.beginPath(), there is no current point.)</li> <li><code>graphics.closePath()</code> \u2014 adds to the path a line from the current point back to the starting point of the current segment of the curve. (Recall that you start a new segment of the curve every time you use moveTo.)</li> </ul> <p>Creating a curve with these commands does not draw anything. To get something visible to appear in the image, you must fill or stroke the path.</p> <p>The commands graphics.fill() and graphics.stroke() are used to fill and to stroke the current path. If you fill a path that has not been closed, the fill algorithm acts as though a final line segment had been added to close the path. When you stroke a shape, it's the center of the virtual pen that moves along the path. So, for high-precision canvas drawing, it's common to use paths that pass through the centers of pixels rather than through their corners. For example, to draw a line that extends from the pixel with coordinates (100,200) to the pixel with coordinates (300,200), you would actually stroke the geometric line with endpoints (100.5,200.5) and (100.5,300.5). We should look at some examples. It takes four steps to draw a line:</p> <pre><code>graphics.beginPath();          // start a new path\ngraphics.moveTo(100.5,200.5);  // starting point of the new path\ngraphics.lineTo(300.5,200.5);  // add a line to the point (300.5,200.5)\ngraphics.stroke();             // draw the line\n</code></pre> <p>Remember that the line remains as part of the current path until the next time you call graphics.beginPath(). Here's how to draw a filled, regular octagon centered at (200,400) and with radius 100:</p> <pre><code>graphics.beginPath();\ngraphics.moveTo(300,400);\nfor (let i = 1; i &lt; 8; i++) {\n    let angle = (2*Math.PI)/8 * i;\n    let x = 200 + 100*Math.cos(angle);\n    let y = 400 + 100*Math.sin(angle);\n    graphics.lineTo(x,y);\n}\ngraphics.closePath();\ngraphics.fill();\n</code></pre> <p>The function graphics.arc() can be used to draw a circle, with a start angle of 0 and an end angle of 2*Math.PI. Here's a filled circle with radius 100, centered at 200,300:</p> <pre><code>graphics.beginPath();\ngraphics.arc( 200, 300, 100, 0, 2*Math.PI );\ngraphics.fill();\n</code></pre> <p>To draw just the outline of the circle, use graphics.stroke() in place of graphics.fill(). You can apply both operations to the same path. If you look at the details of graphics.arc(), you can see how to draw a wedge of a circle:</p> <pre><code>graphics.beginPath();\ngraphics.moveTo(200,300);   // Move current point to center of the circle.\ngraphics.arc(200,300,100,0,Math.PI/4);  // Arc, plus line from current point.\ngraphics.lineTo(200,300);  // Line from end of arc back to center of circle.\ngraphics.fill();  // Fill the wedge.\n</code></pre> <p>There is no way to draw an oval that is not a circle, except by using transforms. We will cover that later in this section. But JavaScript has the interesting property that it is possible to add new functions and properties to an existing object. The sample program canvas2d/GraphicsPlusStarter.html shows how to add functions to a graphics context for drawing lines, ovals, and other shapes that are not built into the API.</p>"},{"location":"cn/c2/s6/#263--stroke-and-fill","title":"2.6.3  Stroke and Fill","text":"\u4e2d\u6587\u82f1\u6587 <p>Attributes such as line width that affect the visual appearance of strokes and fills are stored as properties of the graphics context. For example, the value of graphics.lineWidth is a number that represents the width that will be used for strokes. (The width is given in pixels for the default coordinate system, but it is subject to transforms.) You can change the line width by assigning a value to this property:</p> <pre><code>graphics.lineWidth = 2.5;  // Change the current width.\n</code></pre> <p>The change affects subsequent strokes. You can also read the current value:</p> <pre><code>saveWidth = graphics.lineWidth;  // Save current width.\n</code></pre> <p>The property graphics.lineCap controls the appearance of the endpoints of a stroke. It can be set to \"round\", \"square\", or \"butt\". The quotation marks are part of the value. For example,</p> <pre><code>graphics.lineCap = \"round\";\n</code></pre> <p>Similarly, graphics.lineJoin controls the appearance of the point where one segment of a stroke joins another segment; its possible values are \"round\", \"bevel\", or \"miter\". (Line endpoints and joins were discussed in Subsection 2.2.1.)</p> <p>Note that the values for graphics.lineCap and graphics.lineJoin are strings. This is a somewhat unusual aspect of the API. Several other properties of the graphics context take values that are strings, including the properties that control the colors used for drawing and the font that is used for drawing text.</p> <p>Color is controlled by the values of the properties graphics.fillStyle and graphics.strokeStyle. The graphics context maintains separate styles for filling and for stroking. A solid color for stroking or filling is specified as a string. Valid color strings are ones that can be used in CSS, the language that is used to specify colors and other style properties of elements on web pages. Many solid colors can be specified by their names, such as \"red\", \"black\", and \"beige\". An RGB color can be specified as a string of the form \"rgb(r,g,b)\", where the parentheses contain three numbers in the range 0 to 255 giving the red, green, and blue components of the color. Hexadecimal color codes are also supported, in the form \"#XXYYZZ\" where XX, YY, and ZZ are two-digit hexadecimal numbers giving the RGB color components. For example,</p> <pre><code>graphics.fillStyle = \"rgb(200,200,255)\"; // light blue\ngraphics.strokeStyle = \"#0070A0\"; // a darker, greenish blue\n</code></pre> <p>The style can actually be more complicated than a simple solid color: Gradients and patterns are also supported. As an example, a gradient can be created with a series of steps such as</p> <pre><code>let lineargradient = graphics.createLinearGradient(420,420,550,200);\nlineargradient.addColorStop(0,\"red\");\nlineargradient.addColorStop(0.5,\"yellow\");\nlineargradient.addColorStop(1,\"green\");\ngraphics.fillStyle = lineargradient;  // Use a gradient fill!\n</code></pre> <p>The first line creates a linear gradient that will vary in color along the line segment from the point (420,420) to the point (550,200). Colors for the gradient are specified by the addColorStop function: the first parameter gives the fraction of the distance from the initial point to the final point where that color is applied, and the second is a string that specifies the color itself. A color stop at 0 specifies the color at the initial point; a color stop at 1 specifies the color at the final point. Once a gradient has been created, it can be used both as a fill style and as a stroke style in the graphics context.</p> <p>Finally, I note that the font that is used for drawing text is the value of the property graphics.font. The value is a string that could be used to specify a font in CSS. As such, it can be fairly complicated, but the simplest versions include a font-size (such as 20px or 150%) and a font-family (such as serif, sans-serif, monospace, or the name of any font that is accessible to the web page). You can add italic or bold or both to the front of the string. Some examples:</p> <pre><code>graphics.font = \"2cm monospace\";  // the size is in centimeters\ngraphics.font = \"bold 18px sans-serif\";\ngraphics.font = \"italic 150% serif\";   // size is 150% of the usual size\n</code></pre> <p>The default is \"10px sans-serif,\" which is usually too small. Note that text, like all drawing, is subject to coordinate transforms. Applying a scaling operation changes the size of the text, and a negative scaling factor can produce mirror-image text.</p>"},{"location":"cn/c2/s6/#264--transforms","title":"2.6.4  Transforms","text":"\u4e2d\u6587\u82f1\u6587 <p>A graphics context has three basic functions for modifying the current transform by scaling, rotation, and translation. There are also functions that will compose the current transform with an arbitrary transform and for completely replacing the current transform:</p> <ul> <li><code>graphics.scale(sx,sy)</code> \u2014 scale by sx in the x-direction and sy in the y-direction.</li> <li><code>graphics.rotate(angle)</code> \u2014 rotate by angle radians about the origin. A positive rotation is clockwise in the default coordinate system.</li> <li><code>graphics.translate(tx,ty)</code> \u2014 translate by tx in the x-direction and ty in the y-direction.</li> <li><code>graphics.transform(a,b,c,d,e,f)</code> \u2014 apply the affine transform x1 = ax + cy + e, and y1 = bx + dy + f.</li> <li><code>graphics.setTransform(a,b,c,d,e,f)</code> \u2014 discard the current transformation, and set the current transformation to be x1 = ax + cy + e, and y1 = bx + dy + f.</li> </ul> <p>Note that there is no shear transform, but you can apply a shear as a general transform. For example, for a horizontal shear with shear factor 0.5, use</p> <pre><code>graphics.transform(1, 0, 0.5, 1, 0, 0)\n</code></pre> <p>To implement hierarchical modeling, as discussed in Section 2.4, you need to be able to save the current transformation so that you can restore it later. Unfortunately, no way is provided to read the current transformation from a canvas graphics context. However, the graphics context itself keeps a stack of transformations and provides methods for pushing and popping the current transformation. In fact, these methods do more than save and restore the current transformation. They actually save and restore almost the entire state of the graphics context, including properties such as current colors, line width, and font (but not the current path):</p> <ul> <li><code>graphics.save()</code> \u2014 push a copy of the current state of the graphics context, including the current transformation, onto the stack.</li> <li><code>graphics.restore()</code> \u2014 remove the top item from the stack, containing a saved state of the graphics context, and restore the graphics context to that state.</li> </ul> <p>Using these methods, the basic setup for drawing an object with a modeling transform becomes:</p> <pre><code>graphics.save();          // save a copy of the current state\ngraphics.translate(a,b);  // apply modeling transformations\ngraphics.rotate(r);     \ngraphics.scale(sx,sy);\n.\n.  // Draw the object!\n.\ngraphics.restore();       // restore the saved state\n</code></pre> <p>Note that if drawing the object includes any changes to attributes such as drawing color, those changes will be also undone by the call to graphics.restore(). In hierarchical graphics, this is usually what you want, and it eliminates the need to have extra statements for saving and restoring things like color.</p> <p>To draw a hierarchical model, you need to traverse a scene graph, either procedurally or as a data structure. It's pretty much the same as in Java. In fact, you should see that the basic concepts that you learned about transformations and modeling carry over to the canvas graphics API. Those concepts apply very widely and even carry over to 3D graphics APIs, with just a little added complexity. The sample web page canvas2d/HierarchicalModel2D.html implements hierarchical modeling using the 2D canvas API.</p> <p>Now that we know how to do transformations, we can see how to draw an oval using the canvas API. Suppose that we want an oval with center at (x,y), with horizontal radius r1 and with vertical radius r2. The idea is to draw a circle of radius 1 with center at (0,0), then transform it. The circle needs to be scaled by a factor of r1 horizontally and r2 vertically. It should then be translated to move its center from (0,0) to (x,y). We can use graphics.save() and graphics.restore() to make sure that the transformations only affect the circle. Recalling that the order of transforms in the code is the opposite of the order in which they are applied to objects, this becomes:</p> <pre><code>graphics.save();\ngraphics.translate( x, y );\ngraphics.scale( r1, r2 );\ngraphics.beginPath();\ngraphics.arc( 0, 0, 1, 0, Math.PI );  // a circle of radius 1\ngraphics.restore();\ngraphics.stroke();\n</code></pre> <p>Note that the current path is not affected by the calls to graphics.save() and graphics.restore(). So, in the example, the oval-shaped path is not discarded when graphics.restore() is called. When graphics.stroke() is called at the end, it is the oval-shaped path that is stroked. On the other hand, the line width that is used for the stroke is not affected by the scale transform that was applied to the oval. Note that if the order of the last two commands were reversed, then the line width would be subject to the scaling.</p> <p>There is an interesting point here about transforms and paths. In the HTML canvas API, the points that are used to create a path are transformed by the current transformation before they are saved. That is, they are saved in pixel coordinates. Later, when the path is stroked or filled, the current transform has no effect on the path (although it can affect, for example, the line width when the path is stroked). In particular, you can't make a path and then apply different transformations. For example, you can't make an oval-shaped path, and then use it to draw several ovals in different positions. Every time you draw the oval, it will be in the same place, even if different translation transforms are applied to the graphics context.</p> <p>The situation is different in Java, where the coordinates that are stored in the path are the actual numbers that are used to specify the path, that is, the object coordinates. When the path is stroked or filled, the transformation that is in effect at that time is applied to the path. The path can be reused many times to draw copies with different transformations. This comment is offered as an example of how APIs that look very similar can have subtle differences.</p>"},{"location":"cn/c2/s6/#265--auxiliary-canvases","title":"2.6.5  Auxiliary Canvases","text":"<p>Auxiliary Canvases</p> \u4e2d\u6587\u82f1\u6587 <p>In Subsection 2.5.5, we looked at the sample program java2d/JavaPixelManipulation.java, which uses a BufferedImage both to implement an off-screen canvas and to allow direct manipulation of the colors of individual pixels. The same ideas can be applied in HTML canvas graphics, although the way it's done is a little different. The sample web application canvas2d/SimplePaintProgram.html does pretty much the same thing as the Java program (except for the image filters).</p> <p>Here is a live demo version of the program that has the same functionality. You can try it out to see how the various drawing tools work. Don't forget to try the \"Smudge\" tool! (It has to be applied to shapes that you have already drawn.)</p> <p></p> <p>For JavaScript, a web page is represented as a data structure, defined by a standard called the DOM, or Document Object model. For an off-screen canvas, we can use a  that is not part of that data structure and therefore is not part of the page. In JavaScript, a  can be created with the function call document.createElement(\"canvas\"). There is a way to add this kind of dynamically created canvas to the DOM for the web page, but it can be used as an off-screen canvas without doing so. To use it, you have to set its width and height properties, and you need a graphics context for drawing on it. Here, for example, is some code that creates a 640-by-480 canvas, gets a graphics context for the canvas, and fills the whole canvas with white: <pre><code>OSC = document.createElement(\"canvas\");  // off-screen canvas\n\nOSC.width = 640;    // Size of OSC must be set explicitly.\nOSC.height = 480;\n\nOSG = OSC.getContext(\"2d\");  // Graphics context for drawing on OSC.\n\nOSG.fillStyle = \"white\";  // Use the context to fill OSC with white.\nOSG.fillRect(0,0,OSC.width,OSC.height);\n</code></pre> <p>The sample program lets the user drag the mouse on the canvas to draw some shapes. The off-screen canvas holds the official copy of the picture, but it is not seen by the user. There is also an on-screen canvas that the user sees. The off-screen canvas is copied to the on-screen canvas whenever the picture is modified. While the user is dragging the mouse to draw a line, oval, or rectangle, the new shape is actually drawn on-screen, over the contents of the off-screen canvas. It is only added to the off-screen canvas when the user finishes the drag operation. For the other tools, changes are made directly to the off-screen canvas, and the result is then copied to the screen. This is an exact imitation of the Java program.</p> <p>(The demo version shown above actually uses a somewhat different technique to accomplish the same thing. It uses two on-screen canvases, one located exactly on top of the other. The lower canvas holds the actual image. The upper canvas is completely transparent, except when the user is drawing a line, oval, or rectangle. While the user is dragging the mouse to draw such a shape, the new shape is drawn on the upper canvas, where it hides the part of the lower canvas that is beneath the shape. When the user releases the mouse, the shape is added to the lower canvas and the upper canvas is cleared to make it completely transparent again. Again, the other tools operate directly on the lower canvas.)</p>"},{"location":"cn/c2/s6/#266--pixel-manipulation","title":"2.6.6  Pixel Manipulation","text":"<p>Pixel Manipulation</p> \u4e2d\u6587\u82f1\u6587 <p>The \"Smudge\" tool in the sample program and demo is implemented by computing with the color component values of pixels in the image. The implementation requires some way to read the colors of pixels in a canvas. That can be done with the function graphics.getPixelData(x,y,w,h), where graphics is a 2D graphics context for the canvas. The function reads the colors of a rectangle of pixels, where (x,y) is the upper left corner of the rectangle, w is its width, and h is its height. The parameters are always expressed in pixel coordinates. Consider, for example</p> <pre><code>colors = graphics.getImageData(0,0,20,10)\n</code></pre> <p>This returns the color data for a 20-by-10 rectangle in the upper left corner of the canvas. The return value, colors, is an object with properties colors.width, colors.height, and colors.data. The width and height give the number of rows and columns of pixels in the returned data. (According to the documentation, on a high-resolution screen, they might not be the same as the width and height in the function call. The data can be for real, physical pixels on the display device, not the \"nominal\" pixels that are used in the pixel coordinate system on the canvas. There might be several device pixels for each nominal pixel. I'm not sure whether this can really happen in practice.)</p> <p>The value of colors.data is an array, with four array elements for each pixel. The four elements contain the red, blue, green, and alpha color components of the pixel, given as integers in the range 0 to 255. For a pixel that lies outside the canvas, the four component values will all be zero. The array is a value of type Uint8ClampedArray whose elements are 8-bit unsigned integers limited to the range 0 to 255. This is one of JavaScript's typed array datatypes, which can only hold values of a specific numerical type. As an example, suppose that you just want to read the RGB color of one pixel, at coordinates (x,y). You can set</p> <pre><code>pixel = graphics.getImageData(x,y,1,1);\n</code></pre> <p>Then the RGB color components for the pixel are <code>R = pixel.data[0]</code>, <code>G = pixel.data[1]</code>, and <code>B = pixel.data[2]</code>.</p> <p>The function graphics.putImageData(imageData,x,y) is used to copy the colors from an image data object into a canvas, placing it into a rectangle in the canvas with upper left corner at (x,y). The imageData object can be one that was returned by a call to graphics.getImageData, possibly with its color data modified. Or you can create a blank image data object by calling graphics.createImageData(w,h) and fill it with data.</p> <p>Let's consider the \"Smudge\" tool in the sample program. When the user clicks the mouse with this tool, I use OSG.getImageData to get the color data from a 9-by-9 square of pixels surrounding the mouse location. OSG is the graphics context for the canvas that contains the image. Since I want to do real-number arithmetic with color values, I copy the color components into another typed array, one of type Float32Array, which can hold 32-bit floating point numbers. Here is the function that I call to do this:</p> <pre><code>function grabSmudgeData(x, y) {  // (x,y) gives mouse location\n    let colors = OSG.getImageData(x-5,y-5,9,9);\n    if (smudgeColorArray == null) {\n        // Make image data &amp; array the first time this function is called.\n        smudgeImageData = OSG.createImageData(9,9);\n        smudgeColorArray = new Float32Array(colors.data.length);\n    }\n    for (let i = 0; i &lt; colors.data.length; i++) {\n        // Copy the color component data into the Float32Array.\n        smudgeColorArray[i] = colors.data[i];\n    }\n}\n</code></pre> <p>The floating point array, smudgeColorArray, will be used for computing new color values for the image as the mouse moves. The color values from this array will be copied into the image data object, smudgeImageData, which will then be used to put the color values into the image. This is done in another function, which is called for each point that is visited as the user drags the Smudge tool over the canvas:</p> <pre><code>function swapSmudgeData(x, y) { // (x,y) is new mouse location\n    let colors = OSG.getImageData(x-5,y-5,9,9);  // get color data from image\n    for (let i = 0; i &lt; smudgeColorArray.length; i += 4) {\n        // The color data for one pixel is in the next four array locations.\n        if (smudgeColorArray[i+3] &amp;&amp; colors.data[i+3]) {\n            // alpha-components are non-zero; both pixels are in the canvas;\n            // (getImageData() gets 0 for the alpha value at pixel coordinates\n            // that are not actually part of the canvas).\n            for (let j = i; j &lt; i+3; j++) { // compute new RGB values\n                let newSmudge = smudgeColorArray[j]*0.8 + colors.data[j]*0.2;\n                let newImage  = smudgeColorArray[j]*0.2 + colors.data[j]*0.8;\n                smudgeImageData.data[j] = newImage;\n                smudgeColorArray[j] = newSmudge;\n            }\n            smudgeImageData.data[i+3] = 255;  // alpha component\n        }\n        else {\n            // one of the alpha components is zero; set the output\n            // color to all zeros, \"transparent black\", which will have\n            // no effect on the color of the pixel in the canvas.\n            for (let j = i; j &lt;= i+3; j++) {\n                smudgeImageData.data[j] = 0; \n            }\n        }\n    }\n    OSG.putImageData(smudgeImageData,x-5,y-5); // copy new colors into canvas\n}\n</code></pre> <p>In this function, a new color is computed for each pixel in a 9-by-9 square of pixels around the mouse location. The color is replaced by a weighted average of the current color of the pixel and the color of the corresponding pixel in the smudgeColorArray. At the same time, the color in smudgeColorArray is replaced by a similar weighted average.</p> <p>It would be worthwhile to try to understand this example to see how pixel-by-pixel processing of color data can be done. See the source code of the example for more details.</p>"},{"location":"cn/c2/s6/#267--images","title":"2.6.7  Images","text":"<p>Images</p> \u4e2d\u6587\u82f1\u6587 <p>For another example of pixel manipulation, we can look at image filters that modify an image by replacing the color of each pixel with a weighted average of the color of that pixel and the 8 pixels that surround it. Depending on the weighting factors that are used, the result can be as simple as a slightly blurred version of the image, or it can be something more interesting.</p> <p>Here is an an interactive demo that lets you apply several different image filters to a variety of images:</p> <p></p> <p>The filtering operation in the demo uses the image data functions getImageData, createImageData, and putImageData that were discussed above. Color data from the entire image is obtained with a call to getImageData. The results of the averaging computation are placed in a new image data object, and the resulting image data is copied back to the image using putImageData.</p> <p>The remaining question is, where do the original images come from, and how do they get onto the canvas in the first place? An image on a web page is specified by an element in the web page source such as</p> <pre><code>&lt;img src=\"pic.jpg\" width=\"400\" height=\"300\" id=\"mypic\"&gt;\n</code></pre> <p>The src attribute specifies the URL from which the image is loaded. The optional id can be used to reference the image in JavaScript. In the script,</p> <p>The src attribute specifies the URL from which the image is loaded. The optional id can be used to reference the image in JavaScript. In the script,</p> <pre><code>image = document.getElementById(\"mypic\");\n</code></pre> <p>gets a reference to the object that represents the image in the document structure. Once you have such an object, you can use it to draw the image on a canvas. If graphics is a graphics context for the canvas, then</p> <pre><code>graphics.drawImage(image, x, y);\n</code></pre> <p>draws the image with its upper left corner at (x,y). Both the point (x,y) and the image itself are transformed by any transformation in effect in the graphics context. This will draw the image using its natural width and height (scaled by the transformation, if any). You can also specify the width and height of the rectangle in which the image is drawn:</p> <pre><code>graphics.drawImage(image, x, y, width, height);\n</code></pre> <p>With this version of drawImage, the image is scaled to fit the specified rectangle.</p> <p>Now, suppose that the image you want to draw onto the canvas is not part of the web page? In that case, it is possible to load the image dynamically. This is much like making an off-screen canvas, but you are making an \"off-screen image.\" Use the document object to create an img element:</p> <pre><code>newImage = document.createElement(\"img\");\n</code></pre> <p>An img element needs a src attribute that specifies the URL from which it is to be loaded. For example,</p> <pre><code>newImage.src = \"pic2.jpg\";\n</code></pre> <p>As soon as you assign a value to the src attribute, the browser starts loading the image. The loading is done asynchronously; that is, the computer continues to execute the script without waiting for the load to complete. This means that you can't simply draw the image on the line after the above assignment statement: The image is very likely not done loading at that time. You want to draw the image after it has finished loading. For that to happen, you need to assign a function to the image's onload property before setting the src. That function will be called when the image has been fully loaded. Putting this together, here is a simple JavaScript function for loading an image from a specified URL and drawing it on a canvas after it has loaded:</p> <pre><code>function loadAndDraw( imageURL, x, y ) {\n    let image = document.createElement(\"img\");\n    image.onload = doneLoading;\n    image.src = imageURL;\n    function doneLoading() {\n        graphics.drawImage(image, x, y);\n    }\n}\n</code></pre> <p>A similar technique is used to load the images in the filter demo.</p> <p>There is one last mystery to clear up. When discussing the use of an off-screen canvas in the SimplePaintProgram example earlier in this section, I noted that the contents of the off-screen canvas have to be copied to the main canvas, but I didn't say how that can be done. In fact, it is done using drawImage. In addition to drawing an image onto a canvas, drawImage can be used to draw the contents of one canvas into another canvas. In the sample program, the command</p> <pre><code>graphics.drawImage( OSC, 0, 0 );\n</code></pre> <p>is used to draw the off-screen canvas to the main canvas. Here, graphics is a graphics context for drawing on the main canvas, and OSC is the object that represents the off-screen canvas.</p>"},{"location":"cn/c2/s7/","title":"\u7b2c7\u8282: SVG\uff1a\u4e00\u79cd\u573a\u666f\u63cf\u8ff0\u8bed\u8a00","text":"<p>SVG: A Scene Description Language</p> \u4e2d\u6587\u82f1\u6587 <p>We finish this chapter with a look at one more 2D graphics system: SVG, or Scalable Vector Graphics. So far, we have been considering graphics programming APIs. SVG, on the other hand is a scene description language rather than a programming language. Where a programming language creates a scene by generating its contents procedurally, a scene description language specifies a scene \"declaratively,\" by listing its content. Since SVG is a vector graphics language, the content of a scene includes shapes, attributes such as color and line width, and geometric transforms. Most of this should be familiar to you, but it should be interesting to see it in a new context.</p> <p>SVG is an XML language, which means it has a very strict and somewhat verbose syntax. This can make it a little annoying to write, but on the other hand, it makes it possible to read and understand SVG documents even if you are not familiar with the syntax. It's possible that SVG originally stood for \"Simple\" Vector Graphics, but it is by no means a simple language at this point. I will cover only a part of it here, and there are many parts of the language and many options that I will not mention. My goal is to introduce the idea of a scene description language and to show how such a language can use the same basic ideas that are used in the rest of this chapter.</p> <p>SVG can be used as a file format for storing vector graphics images, in much the same way that PNG and JPEG are file formats for storing pixel-based images. That means that you can open an SVG file with almost any web browser to view the image. An SVG image can be included in a web page by using it as the src of an  element. That's how the SVG examples on this page are displayed. Since SVG documents are written in plain text, you can create SVG images using a regular text editor, and you can read the source for an SVG image by opening it in a text editor or by viewing the source of the image when it is displayed in a web browser.</p>"},{"location":"cn/c2/s7/#271--svg-document-structure","title":"2.7.1  SVG Document Structure","text":"<p>SVG Document Structure</p> \u4e2d\u6587\u82f1\u6587 <p>An SVG file, like any XML document, starts with some standard code that almost no one memorizes. It should just be copied into a new document. Here is some code that can be copied as a starting point for SVG documents of the type discussed in this section (which, remember use only a subset of the full SVG specification):</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \n\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" \n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        width=\"4in\" height=\"4in\" \n        viewBox=\"0 0 400 400\"\n        preserveAspectRatio=\"xMidYMid\"&gt;\n\n    &lt;!-- The scene description goes here!  --&gt;   \n\n&lt;/svg&gt;\n</code></pre> <p>The first three lines say that this is an XML SVG document. The rest of the document is an <code>&lt;svg&gt;</code> element that acts as a container for the entire scene description. You'll need to know a little about XML syntax. First, an XML \"element\" in its general form looks like this:</p> <pre><code>&lt;elementname attrib1=\"value1\" attrib2=\"value2\"&gt;\n    ...content... \n&lt;/elementname&gt;\n</code></pre> <p>The element starts with a \"start tag,\" which begins with a \"<code>&lt;</code>\" followed by an identifier that is the name of the tag, and ending with a \"<code>&gt;</code>\". The start tag can include \"attributes,\" which have the form <code>name=\"value\"</code>. The name is an identifier; the value is a string. The value must be enclosed in single or double quotation marks. The element ends with an \"end tag,\" which has an element name that matches the element name in the start tag and has the form <code>&lt;/elementname&gt;</code>. Element names and attribute names are case-sensitive. Between the start and end tags comes the \"content\" of the element. The content can consist of text and nested elements. If an element has no content, you can replace the \"<code>&gt;</code>\" at the end of the start tag with \"<code>/&gt;</code>\", and leave out the end tag. This is called a \"self-closing tag.\" For example,</p> <pre><code>&lt;circle cx=\"5\" cy=\"5\" r=\"4\" fill=\"red\"/&gt;\n</code></pre> <p>This is an actual SVG element that specifies a circle. It's easy to forget the \"/\" at the end of a self-closing tag, but it has to be there to have a legal XML document.</p> <p>Looking back at the SVG document, the five lines starting with <code>&lt;svg</code> are just a long start tag. You can use the tag as shown, and customize the values of the width, height, viewBox, and preserveAspectRatio attributes. The next line is a comment; comments in XML start with <code>\"&lt;!--\"</code> and end with <code>\"--&gt;\"</code>.</p> <p>The width and height attributes of the <code>&lt;svg&gt;</code> tag specify a natural or preferred size for the image. It can be forced into a different size, for example if it is used in an <code>&lt;img&gt;</code> element on a web page that specifies a different width and height. The size can be specified using units of measure such as in for inches, cm for centimeters, and px, for pixels, with 90 pixels to the inch. If no unit of measure is specified, pixels are used. There cannot be any space between the number and the unit of measure.</p> <p>The viewBox attribute sets up the coordinate system that will be used for drawing the image. It is what I called the view window in Subsection 2.3.1. The value for viewBox is a list of four numbers, giving the minimum x-value, the minimum y-value, the width, and the height of the view window. The width and the height must be positive, so x increases from left-to-right, and y increases from top-to-bottom. The four numbers in the list can be separated either by spaces or by commas; this is typical for lists of numbers in SVG.</p> <p>Finally, the preserveAspectRatio attribute tells what happens when the aspect ratio of the viewBox does not match the aspect ratio of the rectangle in which the image is displayed. The default value, \"xMidYMid\", will extend the limts on the viewBox either horizontally or vertically to preserve the aspect ratio, and the viewBox will appear in the center of the display rectangle. If you would like your image to stretch to fill the display rectangle, ignoring the aspect ratio, set the value of preserveAspectRatio to \"none\". (The aspect ratio issue was discussed in Subsection 2.3.7.)</p> <p>Let's look at a complete SVG document that draws a few simple shapes. Here's the document. You could probably figure out what it draws even without knowing any more about SVG:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \n\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" \n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    width=\"300px\" height=\"200px\" \n    viewBox=\"0 0 3 2\"\n    preserveAspectRatio=\"xMidYMid\"&gt;\n\n&lt;rect x=\"0\" y=\"0\" width=\"3\" height=\"2\" \n                            stroke=\"blue\" fill=\"none\" stroke-width=\"0.05\"/&gt;\n&lt;text x=\"0.2\" y=\"0.5\" font-size=\"0.4\" fill=\"red\"&gt;Hello World!&lt;/text&gt;\n&lt;line x1=\"0.1\" y1=\"0.7\" x2=\"2.9\" y2=\"0.7\" stroke-width=\"0.05\" stroke=\"blue\"/&gt;\n&lt;ellipse cx=\"1.5\" cy=\"1.4\" rx=\".6\" ry=\".4\" fill=\"rgb(0,255,180)\"/&gt;\n&lt;circle cx=\"0.4\" cy=\"1.4\" r=\"0.3\" \n                    fill=\"magenta\" stroke=\"black\" stroke-width=\"0.03\"/&gt;\n&lt;polygon points=\"2.2,1.7 2.4,1 2.9,1.7\" \n                    fill=\"none\" stroke=\"green\" stroke-width=\"0.02\"/&gt;\n\n&lt;/svg&gt;\n</code></pre> <p>and here's the image that is produced by this example:</p> <p> </p> <p>In the drawing coordinate system for this example, x ranges from 0 to 3, and y ranges from 0 to 2. All values used for drawing, including stroke width and font size, are given in terms of this coordinate system. Remember that you can use any coordinate system that you find convenient! Note, by the way, that parts of the image that are not covered by the shapes that are drawn will be transparent.</p> <p>Here's another example, with a larger variety of shapes. The source code for this example has a lot of comments. It uses features that we will discuss in the remainer of this section.</p> <p> </p> <p>You can take a look at the source code, svg/svg-starter.svg. (For example, open it in a text editor, or open it in a web browser and use the browser's \"view source\" command.)</p>"},{"location":"cn/c2/s7/#272--shapes-styles-and-transforms","title":"2.7.2  Shapes, Styles, and Transforms","text":"<p>Shapes, Styles, and Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>In SVG, a basic shape is specified by an element in which the tag name gives the shape, and attributes give the properties of the shape. There are attributes to specify the geometry, such as the endpoints of a line or the radius of a circle. Other attributes specify style properties, such as fill color and line width. (The style properties are what I call attributes elsewhere in this book; in this section, I am using the term \"attribute\" in its XML sense.) And there is a transform attribute that can be used to apply a geometric transform to the shape.</p> <p>For a detailed example, consider the rect element, which specifies a rectangle. The geometry of the rectangle is given by attributes named x, y, width and height in the usual way. The default value for x and y is zero; that is, they are optional, and leaving them out is the same as setting their value to zero. The width and the height are required attributes. Their values must be non-negative. For example, the element</p> <pre><code>&lt;rect width=\"3\" height=\"2\"/&gt;\n</code></pre> <p>specifies a rectangle with corner at (0,0), width 3, and height 2, while</p> <pre><code>&lt;rect x=\"100\" y=\"200\" height=\"480\" width=\"640\"/&gt;\n</code></pre> <p>gives a rectangle with corner at (100,200), width 640, and height 480. (Note, by the way, that the attributes in an XML element can be given in any order.) The rect element also has optional attributes rx and ry that can be used to make \"roundRects,\" with their corners replaced by elliptical arcs. The values of rx and ry give the horizontal and vertical radii of the elliptical arcs.</p> <p>Style attributes can be added to say how the shape should be stroked and filled. The default is to use a black fill and no stroke. (More precisely, as we will see later, the default is for a shape to inherit the values of style attributes from its environment. Black fill and no stroke is the initial environment.) Here are some common style attributes:</p> <ul> <li><code>fill</code> \u2014 specifies how to fill the shape. The value can be \"none\" to indicate that the shape is not filled. It can be a color, in the same format as the CSS colors that are used in the HTML canvas API. For example, it can be a common color name such as \"black\" or \"red\", or an RGB color such as \"rgb(255,200,180)\". There are also gradient and pattern fills, though I will not discuss them here.</li> <li><code>stroke</code> \u2014 specifies how to stroke the shape, with the same possible values as \"fill\". stroke-opacity and fill-opacity \u2014 are numbers between 0.0 and 1.0 that specify the opacity of the stroke and fill. Values less than 1.0 give a translucent stroke or fill. The default value, 1.0, means fully opaque.</li> <li><code>stroke-width</code> \u2014 is a number that sets the line width to use for the stroke. Note that the line width is subject to transforms. The default value is \"1\", which is fine if the coordinate system is using pixels as the unit of measure, but often too wide in custom coordinate systems.</li> <li><code>stroke-linecap</code> \u2014 determines the appearance of the endpoints of a stroke. The value can be \"square\", \"round\", or \"butt\". The default is \"butt\". (See Subsection 2.2.1 for a discussion of line caps and joins.)</li> <li><code>stroke-linejoin</code> \u2014 determines the appearance of points where two segments of a stroke meet. The values can be \"miter\", \"round\", or \"bevel\". The default is \"miter\".</li> </ul> <p>As an example that uses many of these options, let's make a square that is rounded rather than pointed at the corners, with size 1, centered at the origin, and using a translucent red fill and a gray stroke:</p> <pre><code>&lt;rect x=\"-0.5\" y=\"-0.5\" width=\"1\" height=\"1\" \n        rx=\"0.1\" ry=\"0.1\"\n        fill=\"red\" fill-opacity=\"0.5\"\n        stroke=\"gray\" stroke-width=\"0.05\" stroke-linejoin=\"round\"/&gt;\n</code></pre> <p>and a simple outline of a rectangle with no fill:</p> <pre><code>&lt;rect width=\"200\" height=\"100\" stroke=\"black\" fill=\"none\"/&gt;\n</code></pre> <p>The transform attribute can be used to apply a transform or a series of transforms to a shape. As an example, we can make a rectangle tilted 30 degrees from the horizontal:</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"rotate(30)\"/&gt;\n</code></pre> <p>The value \"rotate(30)\" represents a rotation of 30 degrees (not radians!) about the origin, (0,0). The positive direction of rotation, as usual, rotates the positive x-axis in the direction of the positive y-axis. You can specify a different center of rotation by adding arguments to rotate. For example, to rotate the same rectangle about its center</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"rotate(30,50,25)\"/&gt;\n</code></pre> <p>Translation and scaling work as you probably expect, with transform values of the form \"translate(dx,dy)\" and \"scale(sx,sy)\". There are also shear transforms, but they go by the names skewX and skewY, and the argument is a skew angle rather than a shear amount. For example, the transform \"skewX(45)\" tilts the y-axis by 45 degrees and is equivalent to an x-shear with shear factor 1. (The function that tilts the y-axis is called skewX because it modifies, or skews, the x-coordinates of points while leaving their y-coordinates unchanged.) For example, we can use skewX to tilt a rectangle and make it into a parallelogram:</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"skewX(-30)\"/&gt;\n</code></pre> <p>I used an angle of -30 degrees to make the rectangle tilt to the right in the usual pixel coordinate system.</p> <p>The value of the transform attribute can be a list of transforms, separated by spaces or commas. The transforms are applied to the object, as usual, in the opposite of the order in which they are listed. So,</p> <pre><code>&lt;rect width=\"100\" height=\"50\" \n        transform=\"translate(0,50) rotate(45) skewX(-30)\"/&gt;\n</code></pre> <p>would first skew the rectangle into a parallelogram, then rotate the parallelogram by 45 degrees about the origin, then translate it by 50 units in the y-direction.</p> <p>In addition to rectangles, SVG has lines, circles, ellipses, and text as basic shapes. Here are some details. A <code>&lt;line&gt;</code> element represents a line segement and has geometric attributes x1, y1, x2, and y2 to specify the coordinates of the endpoints of the line segment. These four attributes have zero as default value, which makes it easier to specify horizontal and vertical lines. For example,</p> <pre><code>&lt;line x1=\"100\" x2=\"300\" stroke=\"black\"/&gt;\n</code></pre> <p>Without the stroke attribute, you wouldn't see the line, since the default value for stoke is \"none\".</p> <p>For a <code>&lt;circle&gt;</code> element, the geometric attributes are cx, cy, and r giving the coordinates of the center of the circle and the radius. The center coordinates have default values equal to zero. For an <code>&lt;ellipse&gt;</code> element, the attributes are cx, cy, rx, and ry, where rx and ry give the radii of the ellipse in the x- and y-directions.</p> <p>A <code>&lt;text&gt;</code> element is a little different. It has attributes x and y, with default values zero, to specify the location of the basepoint of the text. However, the text itself is given as the content of the element rather than as an attribute. That is, the element is divided into a start tag and an end tag, and the text that will appear in the drawing comes between the start and end tags. For example,</p> <pre><code>&lt;text x=\"10\" y=\"30\"&gt;This text will appear in the image &lt;/text&gt;\n</code></pre> <p>The usual stroke and fill attributes apply to text, but text has additional style attributes. The font-family attribute specifies the font itself. Its value can be one of the generic font names \"serif\", \"sans-serif\", \"monospace\", or the name of a specific font that is available on the system. The font-size can be a number giving the (approximate) height of the characters in the coordinate system. (Font size is subject to coordinate and modeling transforms like any other length.) You can get bold and italic text by setting font-weight equal to \"bold\" and font-style equal to \"italic\". Here is an example that uses all of these options, and applies some additional styles and a transform for good measure:</p> <pre><code>&lt;text x=\"10\" y=\"30\" \n    font-family=\"sans-serif\" font-size=\"50\" \n    font-style=\"italic\" font-weight=\"bold\"\n    stroke=\"black\" stroke-width=\"1\" fill=\"rgb(255,200,0)\"\n    transform=\"rotate(20)\"&gt;Hello World&lt;/text&gt;\n</code></pre> <p>In SVG, a basic shape is specified by an element in which the tag name gives the shape, and attributes give the properties of the shape. There are attributes to specify the geometry, such as the endpoints of a line or the radius of a circle. Other attributes specify style properties, such as fill color and line width. (The style properties are what I call attributes elsewhere in this book; in this section, I am using the term \"attribute\" in its XML sense.) And there is a transform attribute that can be used to apply a geometric transform to the shape.</p> <p>For a detailed example, consider the rect element, which specifies a rectangle. The geometry of the rectangle is given by attributes named x, y, width and height in the usual way. The default value for x and y is zero; that is, they are optional, and leaving them out is the same as setting their value to zero. The width and the height are required attributes. Their values must be non-negative. For example, the element</p> <pre><code>&lt;rect width=\"3\" height=\"2\"/&gt;\n</code></pre> <p>specifies a rectangle with corner at (0,0), width 3, and height 2, while</p> <pre><code>&lt;rect x=\"100\" y=\"200\" height=\"480\" width=\"640\"/&gt;\n</code></pre> <p>gives a rectangle with corner at (100,200), width 640, and height 480. (Note, by the way, that the attributes in an XML element can be given in any order.) The rect element also has optional attributes rx and ry that can be used to make \"roundRects,\" with their corners replaced by elliptical arcs. The values of rx and ry give the horizontal and vertical radii of the elliptical arcs.</p> <p>Style attributes can be added to say how the shape should be stroked and filled. The default is to use a black fill and no stroke. (More precisely, as we will see later, the default is for a shape to inherit the values of style attributes from its environment. Black fill and no stroke is the initial environment.) Here are some common style attributes:</p> <ul> <li><code>fill</code> \u2014 specifies how to fill the shape. The value can be \"none\" to indicate that the shape is not filled. It can be a color, in the same format as the CSS colors that are used in the HTML canvas API. For example, it can be a common color name such as \"black\" or \"red\", or an RGB color such as \"rgb(255,200,180)\". There are also gradient and pattern fills, though I will not discuss them here.</li> <li><code>stroke</code> \u2014 specifies how to stroke the shape, with the same possible values as \"fill\". stroke-opacity and fill-opacity \u2014 are numbers between 0.0 and 1.0 that specify the opacity of the stroke and fill. Values less than 1.0 give a translucent stroke or fill. The default value, 1.0, means fully opaque.</li> <li><code>stroke-width</code> \u2014 is a number that sets the line width to use for the stroke. Note that the line width is subject to transforms. The default value is \"1\", which is fine if the coordinate system is using pixels as the unit of measure, but often too wide in custom coordinate systems.</li> <li><code>stroke-linecap</code> \u2014 determines the appearance of the endpoints of a stroke. The value can be \"square\", \"round\", or \"butt\". The default is \"butt\". (See Subsection 2.2.1 for a discussion of line caps and joins.)</li> <li><code>stroke-linejoin</code> \u2014 determines the appearance of points where two segments of a stroke meet. The values can be \"miter\", \"round\", or \"bevel\". The default is \"miter\".</li> </ul> <p>As an example that uses many of these options, let's make a square that is rounded rather than pointed at the corners, with size 1, centered at the origin, and using a translucent red fill and a gray stroke:</p> <pre><code>&lt;rect x=\"-0.5\" y=\"-0.5\" width=\"1\" height=\"1\" \n        rx=\"0.1\" ry=\"0.1\"\n        fill=\"red\" fill-opacity=\"0.5\"\n        stroke=\"gray\" stroke-width=\"0.05\" stroke-linejoin=\"round\"/&gt;\n</code></pre> <p>and a simple outline of a rectangle with no fill:</p> <pre><code>&lt;rect width=\"200\" height=\"100\" stroke=\"black\" fill=\"none\"/&gt;\n</code></pre> <p>The transform attribute can be used to apply a transform or a series of transforms to a shape. As an example, we can make a rectangle tilted 30 degrees from the horizontal:</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"rotate(30)\"/&gt;\n</code></pre> <p>The value \"rotate(30)\" represents a rotation of 30 degrees (not radians!) about the origin, (0,0). The positive direction of rotation, as usual, rotates the positive x-axis in the direction of the positive y-axis. You can specify a different center of rotation by adding arguments to rotate. For example, to rotate the same rectangle about its center</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"rotate(30,50,25)\"/&gt;\n</code></pre> <p>Translation and scaling work as you probably expect, with transform values of the form \"translate(dx,dy)\" and \"scale(sx,sy)\". There are also shear transforms, but they go by the names skewX and skewY, and the argument is a skew angle rather than a shear amount. For example, the transform \"skewX(45)\" tilts the y-axis by 45 degrees and is equivalent to an x-shear with shear factor 1. (The function that tilts the y-axis is called skewX because it modifies, or skews, the x-coordinates of points while leaving their y-coordinates unchanged.) For example, we can use skewX to tilt a rectangle and make it into a parallelogram:</p> <pre><code>&lt;rect width=\"100\" height=\"50\" transform=\"skewX(-30)\"/&gt;\n</code></pre> <p>I used an angle of -30 degrees to make the rectangle tilt to the right in the usual pixel coordinate system.</p> <p>The value of the transform attribute can be a list of transforms, separated by spaces or commas. The transforms are applied to the object, as usual, in the opposite of the order in which they are listed. So,</p> <pre><code>&lt;rect width=\"100\" height=\"50\" \n        transform=\"translate(0,50) rotate(45) skewX(-30)\"/&gt;\n</code></pre> <p>would first skew the rectangle into a parallelogram, then rotate the parallelogram by 45 degrees about the origin, then translate it by 50 units in the y-direction.</p> <p>In addition to rectangles, SVG has lines, circles, ellipses, and text as basic shapes. Here are some details. A <code>&lt;line&gt;</code> element represents a line segement and has geometric attributes x1, y1, x2, and y2 to specify the coordinates of the endpoints of the line segment. These four attributes have zero as default value, which makes it easier to specify horizontal and vertical lines. For example,</p> <pre><code>&lt;line x1=\"100\" x2=\"300\" stroke=\"black\"/&gt;\n</code></pre> <p>Without the stroke attribute, you wouldn't see the line, since the default value for stoke is \"none\".</p> <p>For a <code>&lt;circle&gt;</code> element, the geometric attributes are cx, cy, and r giving the coordinates of the center of the circle and the radius. The center coordinates have default values equal to zero. For an <code>&lt;ellipse&gt;</code> element, the attributes are cx, cy, rx, and ry, where rx and ry give the radii of the ellipse in the x- and y-directions.</p> <p>A <code>&lt;text&gt;</code> element is a little different. It has attributes x and y, with default values zero, to specify the location of the basepoint of the text. However, the text itself is given as the content of the element rather than as an attribute. That is, the element is divided into a start tag and an end tag, and the text that will appear in the drawing comes between the start and end tags. For example,</p> <pre><code>&lt;text x=\"10\" y=\"30\"&gt;This text will appear in the image &lt;/text&gt;\n</code></pre> <p>The usual stroke and fill attributes apply to text, but text has additional style attributes. The font-family attribute specifies the font itself. Its value can be one of the generic font names \"serif\", \"sans-serif\", \"monospace\", or the name of a specific font that is available on the system. The font-size can be a number giving the (approximate) height of the characters in the coordinate system. (Font size is subject to coordinate and modeling transforms like any other length.) You can get bold and italic text by setting font-weight equal to \"bold\" and font-style equal to \"italic\". Here is an example that uses all of these options, and applies some additional styles and a transform for good measure:</p> <pre><code>&lt;text x=\"10\" y=\"30\" \n    font-family=\"sans-serif\" font-size=\"50\" \n    font-style=\"italic\" font-weight=\"bold\"\n    stroke=\"black\" stroke-width=\"1\" fill=\"rgb(255,200,0)\"\n    transform=\"rotate(20)\"&gt;Hello World&lt;/text&gt;\n</code></pre>"},{"location":"cn/c2/s7/#273--polygons-and-paths","title":"2.7.3  Polygons and Paths","text":"<p>Polygons and Paths</p> \u4e2d\u6587\u82f1\u6587 <p>SVG has some nice features for making more complex shapes. The <code>&lt;polygon&gt;</code> element makes it easy to create a polygon from a list of coordinate pairs. For example,</p> <pre><code>&lt;polygon points=\"0,0 100,0 100,75 50,100 0,75\"/&gt;\n</code></pre> <p>creates a five-sided polygon with vertices at (0,0), (100,0), (100,75), (50,100), and (0,75). Every pair of numbers in the points attribute specifies a vertex. The numbers can be separated by either spaces or commas. I've used a mixture of spaces and commas here to make it clear how the numbers pair up. Of course, you can add the usual style attributes for stroke and fill to the polygon element. A <code>&lt;polyline&gt;</code> is similar to a <code>&lt;polygon&gt;</code>, except that it leaves out the last line from the final vertex back to the starting vertex. The difference only shows up when a polyline is stroked; a polyline is filled as if the missing side were added.</p> <p>The <code>&lt;path&gt;</code> element is much more interesting. In fact, all of the other basic shapes, except text, could be made using path elements. A path can consist of line segments, Bezier curves, and elliptical arcs (although I won't discuss elliptical arcs here). The syntax for specifying a path is very succinct, and it has some features that we have not seen before. A path element has an attribute named d that contains the data for the path. The data consists of one or more commands, where each command consists of a single letter followed by any data necessary for the command. The moveTo, lineTo, cubic Bezier, and quadratic Bezier commands that you are already familiar with are coded by the letters M, L, C, and Q. The command for closing a path segment is Z, and it requires no data. For example the path data \"M 10 20 L 100 200\" would draw a line segment from the point (10,20) to the point (100,200). You can combine several connected line segments into one L command. For example, the <code>&lt;polygon&gt;</code> example given above could be created using the <code>&lt;path&gt;</code> element</p> <pre><code>&lt;path d=\"M 0,0 L 100,0 100,75 50,100 0,75 Z\"/&gt;\n</code></pre> <p>The Z at the end of the data closes the path by adding the final side to the polygon. (Note that, as usual, you can use either commas or spaces in the data.)</p> <p>The C command takes six numbers as data, to specify the two control points and the final endpoint of the cubic Bezier curve segment. You can also give a multiple of six values to get a connected sequence of curve segements. Similarly, the Q command uses four data values to specify the control point and final endpoint of the quadratic Bezier curve segment. The large, curvy, yellow shape shown in the picture earlier in this section was created as a path with two line segments and two Bezier curve segments:</p> <pre><code>&lt;path \nd=\"M 20,70 C 150,70 250,350 380,350 L 380,380 C 250,380 150,100 20,100 Z\"\nfill=\"yellow\" stroke-width=\"2\" stroke=\"black\"/&gt;\n</code></pre> <p>SVG paths add flexibility by defining \"relative\" versions of the path commands, where the data for the command is given relative to the current position. A relative move command, for example, instead of telling where to move, tells how far to move from the current position. The names of the relative versions of the path commands are lower case letters instead of upper case. \"M 10,20\" means to move to the point with coordinates (10,20), while \"m 10,20\" means to move 10 units horizontally and 20 units vertically from the current position. Similarly, if the current position is (x,y), then the command \"l 3,5\", where the first character is a lower case L, draws a line from (x,y) to (x+3,y+5).</p> <p>SVG has some nice features for making more complex shapes. The <code>&lt;polygon&gt;</code> element makes it easy to create a polygon from a list of coordinate pairs. For example,</p> <pre><code>&lt;polygon points=\"0,0 100,0 100,75 50,100 0,75\"/&gt;\n</code></pre> <p>creates a five-sided polygon with vertices at (0,0), (100,0), (100,75), (50,100), and (0,75). Every pair of numbers in the points attribute specifies a vertex. The numbers can be separated by either spaces or commas. I've used a mixture of spaces and commas here to make it clear how the numbers pair up. Of course, you can add the usual style attributes for stroke and fill to the polygon element. A <code>&lt;polyline&gt;</code> is similar to a <code>&lt;polygon&gt;</code>, except that it leaves out the last line from the final vertex back to the starting vertex. The difference only shows up when a polyline is stroked; a polyline is filled as if the missing side were added.</p> <p>The <code>&lt;path&gt;</code> element is much more interesting. In fact, all of the other basic shapes, except text, could be made using path elements. A path can consist of line segments, Bezier curves, and elliptical arcs (although I won't discuss elliptical arcs here). The syntax for specifying a path is very succinct, and it has some features that we have not seen before. A path element has an attribute named d that contains the data for the path. The data consists of one or more commands, where each command consists of a single letter followed by any data necessary for the command. The moveTo, lineTo, cubic Bezier, and quadratic Bezier commands that you are already familiar with are coded by the letters M, L, C, and Q. The command for closing a path segment is Z, and it requires no data. For example the path data \"M 10 20 L 100 200\" would draw a line segment from the point (10,20) to the point (100,200). You can combine several connected line segments into one L command. For example, the <code>&lt;polygon&gt;</code> example given above could be created using the <code>&lt;path&gt;</code> element</p> <pre><code>&lt;path d=\"M 0,0 L 100,0 100,75 50,100 0,75 Z\"/&gt;\n</code></pre> <p>The Z at the end of the data closes the path by adding the final side to the polygon. (Note that, as usual, you can use either commas or spaces in the data.)</p> <p>The C command takes six numbers as data, to specify the two control points and the final endpoint of the cubic Bezier curve segment. You can also give a multiple of six values to get a connected sequence of curve segements. Similarly, the Q command uses four data values to specify the control point and final endpoint of the quadratic Bezier curve segment. The large, curvy, yellow shape shown in the picture earlier in this section was created as a path with two line segments and two Bezier curve segments:</p> <pre><code>&lt;path \nd=\"M 20,70 C 150,70 250,350 380,350 L 380,380 C 250,380 150,100 20,100 Z\"\nfill=\"yellow\" stroke-width=\"2\" stroke=\"black\"/&gt;\n</code></pre> <p>SVG paths add flexibility by defining \"relative\" versions of the path commands, where the data for the command is given relative to the current position. A relative move command, for example, instead of telling where to move, tells how far to move from the current position. The names of the relative versions of the path commands are lower case letters instead of upper case. \"M 10,20\" means to move to the point with coordinates (10,20), while \"m 10,20\" means to move 10 units horizontally and 20 units vertically from the current position. Similarly, if the current position is (x,y), then the command \"l 3,5\", where the first character is a lower case L, draws a line from (x,y) to (x+3,y+5).</p>"},{"location":"cn/c2/s7/#274--hierarchical-models","title":"2.7.4  Hierarchical Models","text":"<p>Hierarchical Models</p> \u4e2d\u6587\u82f1\u6587 <p>SVG would not be a very interesting language if it could only work with individual simple shapes. For complex scenes, we want to be able to do hierarchical modeling, where objects can be constructed from sub-objects, and a transform can be applied to an entire complex object. We need a way to group objects so that they can be treated as a unit. For that, SVG has the <code>&lt;g&gt;</code> element. The content of a <code>&lt;g&gt;</code> element is a list of shape elements, which can be simple shapes or nested <code>&lt;g&gt;</code> elements.</p> <p>You can add style and transform attributes to a <code>&lt;g&gt;</code> element. The main point of grouping is that a group can be treated as a single object. A transform attribute in a <code>&lt;g&gt;</code> will transform the entire group as a whole. A style attribute, such as fill or font-family, on a <code>&lt;g&gt;</code> element will set a default value for the group, replacing the current default. Here is an example:</p> <pre><code>&lt;g fill=\"none\" stroke=\"black\" stroke-width=\"2\" transform=\"scale(1,-1)\"&gt;\n    &lt;circle r=\"98\"/&gt;\n    &lt;ellipse cx=\"40\" cy=\"40\" rx=\"20\" ry=\"7\"/&gt;\n    &lt;ellipse cx=\"-40\" cy=\"40\" rx=\"20\" ry=\"7\"/&gt;\n    &lt;line y1=\"20\" y2=\"-10\"/&gt;\n    &lt;path d=\"M -40,-40 C -30,-50 30,-50 40,-40\" stroke-width=\"4\"/&gt;\n&lt;/g&gt;\n\nThe nested shapes use fill=\"none\" stroke=\"black\" stroke-width=\"2\" for the default values of the attributes. The default can be overridden by specifying a different value for the element, as is done for the stroke-width of the &lt;path&gt; element in this example. Setting transform=\"scale(1,\u22121)\" for the group flips the entire image vertically. I do this only because I am more comfortable working in a coordinate system in which y increases from bottom-to-top rather than top-to-bottom. Here is the simple line drawing of a face that is produced by this group:\n\n&lt;figure markdown=\"span\"&gt;\n    ![pixel-coordinates](../../en/c2/svg-face.svg)\n&lt;/figure&gt;\n\nNow, suppose that we want to include multiple copies of an object in a scene. It shouldn't be necessary to repeat the code for drawing the object. It would be nice to have something like reusable subroutines. In fact, SVG has something very similar: You can define reusable objects inside a `&lt;defs&gt;` element. An object that is defined inside `&lt;defs&gt;` is not added to the scene, but copies of the object can be added to the scene with a single command. For this to work, the object must have an id attribute to identify it. For example, we could define an object that looks like a plus sign:\n\n```xml\n&lt;defs&gt;\n&lt;g id=\"plus\" stroke=\"black\"&gt;\n    &lt;line x1=\"-20\" y1=\"0\" x2=\"20\" y2=\"0\"/&gt;\n    &lt;line x1=\"0\" y1=\"-20\" x2=\"0\" y2=\"20\"/&gt;\n&lt;/g&gt;\n&lt;/defs&gt;\n</code></pre> <p>A <code>&lt;use&gt;</code> element can then be used to add a copy of the plus sign object to the scene. The syntax is</p> <pre><code>&lt;use xlink:href=\"#plus\"/&gt;\n</code></pre> <p>The value of the xlink:href attribute must be the id of the object, with a \"#\" character added at the beginning. (Don't forget the #. If you leave it out, the <code>&lt;use&gt;</code> element will simply be ignored.) You can add a transform attribute to the <code>&lt;use&gt;</code> element to apply a transformation to the copy of the object. You can also apply style attributes, which will be used as default values for the attributes in the copy. For example, we can draw several plus signs with different transforms and stroke widths:</p> <pre><code>&lt;use xlink:href=\"#plus\" transform=\"translate(50,20)\" stroke-width=\"5\"/&gt;\n&lt;use xlink:href=\"#plus\" transform=\"translate(0,30) rotate(45)\"/&gt;\n</code></pre> <p>Note that we can't change the color of the plus sign, since it already specifies its own stroke color.</p> <p>An object that has been defined in the <code>&lt;defs&gt;</code> section can also be used as a sub-object in other object definitions. This makes it possible to create a hierarchy with multiple levels. Here is an example from svg/svg-hierarchy.svg that defines a \"wheel\" object, then uses two copies of the wheel as sub-objects in a \"cart\" object:</p> <pre><code>&lt;defs&gt;\n\n&lt;!-- Define an object that represents a wheel centered at (0,0) and with\n    radius 1.  The wheel is made out of several filled circles, with\n    thin rectangles for the spokes. --&gt;\n\n&lt;g id=\"wheel\"&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"black\"/&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"0.8\" fill=\"lightGray\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\" \n                                            transform=\"rotate(120)\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\" \n                                            transform=\"rotate(240)\"/&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"0.2\" fill=\"black\"/&gt;\n&lt;/g&gt;\n\n&lt;!-- Define an object that represents a cart made out of two wheels,\n    with two rectangles for the body of the cart. --&gt;\n\n&lt;g id=\"cart\"&gt;\n&lt;use xlink:href=\"#wheel\" transform=\"translate(-1.5,-0.1) scale(0.8,0.8)\"/&gt;\n&lt;use xlink:href=\"#wheel\" transform=\"translate(1.5,-0.1) scale(0.8,0.8)\"/&gt;\n&lt;rect x=\"-3\" y=\"0\" width=\"6\" height=\"2\"/&gt;\n&lt;rect x=\"-2.3\" y=\"1.9\" width=\"2.6\" height=\"1\"/&gt;\n&lt;/g&gt;\n\n&lt;/defs&gt;\n</code></pre> <p>The SVG file goes on to add one copy of the wheel and four copies of the cart to the image. The four carts have different colors and transforms. Here is the image:</p> <p> </p> <p>SVG would not be a very interesting language if it could only work with individual simple shapes. For complex scenes, we want to be able to do hierarchical modeling, where objects can be constructed from sub-objects, and a transform can be applied to an entire complex object. We need a way to group objects so that they can be treated as a unit. For that, SVG has the <code>&lt;g&gt;</code> element. The content of a <code>&lt;g&gt;</code> element is a list of shape elements, which can be simple shapes or nested <code>&lt;g&gt;</code> elements.</p> <p>You can add style and transform attributes to a <code>&lt;g&gt;</code> element. The main point of grouping is that a group can be treated as a single object. A transform attribute in a <code>&lt;g&gt;</code> will transform the entire group as a whole. A style attribute, such as fill or font-family, on a <code>&lt;g&gt;</code> element will set a default value for the group, replacing the current default. Here is an example:</p> <pre><code>&lt;g fill=\"none\" stroke=\"black\" stroke-width=\"2\" transform=\"scale(1,-1)\"&gt;\n    &lt;circle r=\"98\"/&gt;\n    &lt;ellipse cx=\"40\" cy=\"40\" rx=\"20\" ry=\"7\"/&gt;\n    &lt;ellipse cx=\"-40\" cy=\"40\" rx=\"20\" ry=\"7\"/&gt;\n    &lt;line y1=\"20\" y2=\"-10\"/&gt;\n    &lt;path d=\"M -40,-40 C -30,-50 30,-50 40,-40\" stroke-width=\"4\"/&gt;\n&lt;/g&gt;\n\nThe nested shapes use fill=\"none\" stroke=\"black\" stroke-width=\"2\" for the default values of the attributes. The default can be overridden by specifying a different value for the element, as is done for the stroke-width of the &lt;path&gt; element in this example. Setting transform=\"scale(1,\u22121)\" for the group flips the entire image vertically. I do this only because I am more comfortable working in a coordinate system in which y increases from bottom-to-top rather than top-to-bottom. Here is the simple line drawing of a face that is produced by this group:\n\n&lt;figure markdown=\"span\"&gt;\n    ![pixel-coordinates](../../en/c2/svg-face.svg)\n&lt;/figure&gt;\n\nNow, suppose that we want to include multiple copies of an object in a scene. It shouldn't be necessary to repeat the code for drawing the object. It would be nice to have something like reusable subroutines. In fact, SVG has something very similar: You can define reusable objects inside a `&lt;defs&gt;` element. An object that is defined inside `&lt;defs&gt;` is not added to the scene, but copies of the object can be added to the scene with a single command. For this to work, the object must have an id attribute to identify it. For example, we could define an object that looks like a plus sign:\n\n```xml\n&lt;defs&gt;\n&lt;g id=\"plus\" stroke=\"black\"&gt;\n    &lt;line x1=\"-20\" y1=\"0\" x2=\"20\" y2=\"0\"/&gt;\n    &lt;line x1=\"0\" y1=\"-20\" x2=\"0\" y2=\"20\"/&gt;\n&lt;/g&gt;\n&lt;/defs&gt;\n</code></pre> <p>A <code>&lt;use&gt;</code> element can then be used to add a copy of the plus sign object to the scene. The syntax is</p> <pre><code>&lt;use xlink:href=\"#plus\"/&gt;\n</code></pre> <p>The value of the xlink:href attribute must be the id of the object, with a \"#\" character added at the beginning. (Don't forget the #. If you leave it out, the <code>&lt;use&gt;</code> element will simply be ignored.) You can add a transform attribute to the <code>&lt;use&gt;</code> element to apply a transformation to the copy of the object. You can also apply style attributes, which will be used as default values for the attributes in the copy. For example, we can draw several plus signs with different transforms and stroke widths:</p> <pre><code>&lt;use xlink:href=\"#plus\" transform=\"translate(50,20)\" stroke-width=\"5\"/&gt;\n&lt;use xlink:href=\"#plus\" transform=\"translate(0,30) rotate(45)\"/&gt;\n</code></pre> <p>Note that we can't change the color of the plus sign, since it already specifies its own stroke color.</p> <p>An object that has been defined in the <code>&lt;defs&gt;</code> section can also be used as a sub-object in other object definitions. This makes it possible to create a hierarchy with multiple levels. Here is an example from svg/svg-hierarchy.svg that defines a \"wheel\" object, then uses two copies of the wheel as sub-objects in a \"cart\" object:</p> <pre><code>&lt;defs&gt;\n\n&lt;!-- Define an object that represents a wheel centered at (0,0) and with\n    radius 1.  The wheel is made out of several filled circles, with\n    thin rectangles for the spokes. --&gt;\n\n&lt;g id=\"wheel\"&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"black\"/&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"0.8\" fill=\"lightGray\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\" \n                                            transform=\"rotate(120)\"/&gt;\n    &lt;rect x=\"-0.9\" y=\"-0.05\" width=\"1.8\" height=\".1\" fill=\"black\" \n                                            transform=\"rotate(240)\"/&gt;\n    &lt;circle cx=\"0\" cy=\"0\" r=\"0.2\" fill=\"black\"/&gt;\n&lt;/g&gt;\n\n&lt;!-- Define an object that represents a cart made out of two wheels,\n    with two rectangles for the body of the cart. --&gt;\n\n&lt;g id=\"cart\"&gt;\n&lt;use xlink:href=\"#wheel\" transform=\"translate(-1.5,-0.1) scale(0.8,0.8)\"/&gt;\n&lt;use xlink:href=\"#wheel\" transform=\"translate(1.5,-0.1) scale(0.8,0.8)\"/&gt;\n&lt;rect x=\"-3\" y=\"0\" width=\"6\" height=\"2\"/&gt;\n&lt;rect x=\"-2.3\" y=\"1.9\" width=\"2.6\" height=\"1\"/&gt;\n&lt;/g&gt;\n\n&lt;/defs&gt;\n</code></pre> <p>The SVG file goes on to add one copy of the wheel and four copies of the cart to the image. The four carts have different colors and transforms. Here is the image:</p> <p> </p>"},{"location":"cn/c2/s7/#275--animation","title":"2.7.5  Animation","text":"<p>Animation</p> \u4e2d\u6587\u82f1\u6587 <p>SVG has a number of advanced features that I won't discuss here, but I do want to mention one: animation. It is possible to animate almost any property of an SVG object, including geometry, style, and transforms. The syntax for animation is itself fairly complex, and I will only do a few examples. But I will tell you enough to produce a fairly complex hierarchical animation like the \"cart-and-windmills\" example that was discussed and used as a demo in Subsection 2.4.1. An SVG version of that animation can be found in svg/cart-and-windmills.svg. Here is what it looks like, although some web browsers might not show the animation, since some browsers do not implement SVG animations correctly or at all:</p> <p> </p> <p>Many attributes of a shape element can be animated by adding an  element to the content of the shape element. Here is an example that makes a rectangle move across the image from left to right: <pre><code>&lt;rect x=\"0\" y=\"210\" wid th=\"40\" height=\"40\"&gt;\n    &lt;animate attributeName=\"x\"\n    from=\"0\" to=\"430\" dur=\"7s\"\n    repeatCount=\"indefinite\"/&gt;\n&lt;/rect&gt;\n</code></pre> <p>Note that the <code>&lt;animate&gt;</code> is nested inside the <code>&lt;rect&gt;</code>. The attributeName attribute tells which attribute of the <code>&lt;rect&gt;</code> is being animated, in this case, x. The from and to attributes say that x will take on values from 0 to 430. The dur attribute is the \"duration\", that is, how long the animation lasts; the value \"7s\" means \"7 seconds.\" The attribute repeatCount=\"indefinite\" means that after the animation completes, it will start over, and it will repeat indefinitely, that is, as long as the image is displayed. If the repeatCount attribute is omitted, then after the animation runs once, the rectangle will jump back to its original position and remain there. If repeatCount is replaced by fill=\"freeze\", then after the animation runs, the rectangle will be frozen in its final position, instead of jumping back to the starting position. The animation begins when the image first loads. If you want the animation to start at a later time, you can add a begin attribute whose value gives the time when the animation should start, as a number of seconds after the image loads.</p> <p>What if we want the rectangle to move back and forth between its initial and final position? For that, we need something called keyframe animation, which is an important idea in its own right. The from and to attributes allow you to specify values only for the beginning and end of the animation. In a keyframe animation, values are specified at additional times in the middle of the animation. For a keyframe animation in SVG, the from and to attributes are replaced by keyTimes and values. Here is our moving rectangle example, modified to use keyframes:</p> <pre><code>&lt;rect x=\"0\" y=\"210\" width=\"40\" height=\"40\"&gt;\n    &lt;animate attributeName=\"x\"\n    keyTimes=\"0;0.5;1\" values=\"0;430;0\" dur=\"7s\"\n    repeatCount=\"indefinite\"/&gt;\n&lt;/rect&gt;\n</code></pre> <p>The keyTimes attribute is a list of numbers, separated by semicolons. The numbers are in the range 0 to 1, and should be in increasing order. The first number should be 0 and the last number should be 1. A number specifies a time during the animation, as a fraction of the complete animation. For example, 0.5 is a point half-way through the animation, and 0.75 is three-quarters of the way. The values attribute is a list of values, with one value for each key time. In this case, the value for x is 0 at the start of the animation, 430 half-way through the animation, and 0 again at the end of the animation. Between the key times, the value for x is obtained by interpolating between the values specified for the key times. The result in this case is that the rectangle moves from left to right during the first half of the animation and then back from right to left in the second half.</p> <p>Transforms can also be animated, but you need to use the <code>&lt;animateTransform&gt;</code> tag instead of <code>&lt;animate&gt;</code>, and you need to add a type attribute to specify which transform you are animating, such as \"rotate\" or \"translate\". Here, for example, is a transform animation applied to a group:</p> <pre><code>&lt;g transform=\"scale(0,0)\"&gt;\n    &lt;animateTransform attributeName=\"transform\" type=\"scale\"\n        from=\"0,0\" to=\"0.4,0.7\"\n        begin=\"3s\" dur=\"15s\" fill=\"freeze\"/&gt;\n    &lt;rect x=\"-15\" y=\"0\" width=\"30\" height=\"40\" fill=\"rgb(150,100,0)\"/&gt;\n    &lt;polygon points=\"-60,40 60,40 0,200\" fill=\"green\"/&gt;\n&lt;/g&gt;\n</code></pre> <p>The animation shows a growing \"tree\" made from a green triangle and a brown rectangle. In the animation, the transform goes from scale(0,0) to scale(0.4,0.7). The animation starts 3 seconds after the image loads and lasts 15 seconds. At the end of the animation, the tree freezes at its final scale. The transform attribute on the <code>&lt;g&gt;</code> element specifies the scale that is in effect until the animation starts. (A scale factor of 0 collapses the object to size zero, so that it is invisible.) You can find this example, along with a moving rectangle and a keyframe animation, in the sample file svg/first-svg-animation.svg. Here is the animation itself. To see the growing trees, you might have to reload this page or view the image in a separate window:</p> <p> </p> <p>You can create animated objects in the <code>&lt;defs&gt;</code> section of an SVG file, and you can apply animation to <code>&lt;use&gt;</code> elements. This makes it possible to create hierarchical animations. Here is a simple example:</p> <p> </p> <p>The example shows a rotating hexagon with a rotating square at each vertex of the hexagon. The hexagon is constructed from six copies of one object, with a different rotation applied to each copy. (A copy of the basic object is shown in the image to the right of the hexagon.) The square is defined as an animated object with its own rotation. It is used as a sub-object in the hexagon. The rotation that is applied to the hexagon applies to the square, on top of its own built-in rotation. That's what makes this an example of hierarchical animation.</p> <p>If you look back at the cart-and-windmills example now, you can probably see how to do the animation. Don't forget to check out the source code, which is surprisingly short!</p> <p>SVG has a number of advanced features that I won't discuss here, but I do want to mention one: animation. It is possible to animate almost any property of an SVG object, including geometry, style, and transforms. The syntax for animation is itself fairly complex, and I will only do a few examples. But I will tell you enough to produce a fairly complex hierarchical animation like the \"cart-and-windmills\" example that was discussed and used as a demo in Subsection 2.4.1. An SVG version of that animation can be found in svg/cart-and-windmills.svg. Here is what it looks like, although some web browsers might not show the animation, since some browsers do not implement SVG animations correctly or at all:</p> <p> </p> <p>Many attributes of a shape element can be animated by adding an  element to the content of the shape element. Here is an example that makes a rectangle move across the image from left to right: <pre><code>&lt;rect x=\"0\" y=\"210\" wid th=\"40\" height=\"40\"&gt;\n    &lt;animate attributeName=\"x\"\n    from=\"0\" to=\"430\" dur=\"7s\"\n    repeatCount=\"indefinite\"/&gt;\n&lt;/rect&gt;\n</code></pre> <p>Note that the <code>&lt;animate&gt;</code> is nested inside the <code>&lt;rect&gt;</code>. The attributeName attribute tells which attribute of the <code>&lt;rect&gt;</code> is being animated, in this case, x. The from and to attributes say that x will take on values from 0 to 430. The dur attribute is the \"duration\", that is, how long the animation lasts; the value \"7s\" means \"7 seconds.\" The attribute repeatCount=\"indefinite\" means that after the animation completes, it will start over, and it will repeat indefinitely, that is, as long as the image is displayed. If the repeatCount attribute is omitted, then after the animation runs once, the rectangle will jump back to its original position and remain there. If repeatCount is replaced by fill=\"freeze\", then after the animation runs, the rectangle will be frozen in its final position, instead of jumping back to the starting position. The animation begins when the image first loads. If you want the animation to start at a later time, you can add a begin attribute whose value gives the time when the animation should start, as a number of seconds after the image loads.</p> <p>What if we want the rectangle to move back and forth between its initial and final position? For that, we need something called keyframe animation, which is an important idea in its own right. The from and to attributes allow you to specify values only for the beginning and end of the animation. In a keyframe animation, values are specified at additional times in the middle of the animation. For a keyframe animation in SVG, the from and to attributes are replaced by keyTimes and values. Here is our moving rectangle example, modified to use keyframes:</p> <pre><code>&lt;rect x=\"0\" y=\"210\" width=\"40\" height=\"40\"&gt;\n    &lt;animate attributeName=\"x\"\n    keyTimes=\"0;0.5;1\" values=\"0;430;0\" dur=\"7s\"\n    repeatCount=\"indefinite\"/&gt;\n&lt;/rect&gt;\n</code></pre> <p>The keyTimes attribute is a list of numbers, separated by semicolons. The numbers are in the range 0 to 1, and should be in increasing order. The first number should be 0 and the last number should be 1. A number specifies a time during the animation, as a fraction of the complete animation. For example, 0.5 is a point half-way through the animation, and 0.75 is three-quarters of the way. The values attribute is a list of values, with one value for each key time. In this case, the value for x is 0 at the start of the animation, 430 half-way through the animation, and 0 again at the end of the animation. Between the key times, the value for x is obtained by interpolating between the values specified for the key times. The result in this case is that the rectangle moves from left to right during the first half of the animation and then back from right to left in the second half.</p> <p>Transforms can also be animated, but you need to use the <code>&lt;animateTransform&gt;</code> tag instead of <code>&lt;animate&gt;</code>, and you need to add a type attribute to specify which transform you are animating, such as \"rotate\" or \"translate\". Here, for example, is a transform animation applied to a group:</p> <pre><code>&lt;g transform=\"scale(0,0)\"&gt;\n    &lt;animateTransform attributeName=\"transform\" type=\"scale\"\n        from=\"0,0\" to=\"0.4,0.7\"\n        begin=\"3s\" dur=\"15s\" fill=\"freeze\"/&gt;\n    &lt;rect x=\"-15\" y=\"0\" width=\"30\" height=\"40\" fill=\"rgb(150,100,0)\"/&gt;\n    &lt;polygon points=\"-60,40 60,40 0,200\" fill=\"green\"/&gt;\n&lt;/g&gt;\n</code></pre> <p>The animation shows a growing \"tree\" made from a green triangle and a brown rectangle. In the animation, the transform goes from scale(0,0) to scale(0.4,0.7). The animation starts 3 seconds after the image loads and lasts 15 seconds. At the end of the animation, the tree freezes at its final scale. The transform attribute on the <code>&lt;g&gt;</code> element specifies the scale that is in effect until the animation starts. (A scale factor of 0 collapses the object to size zero, so that it is invisible.) You can find this example, along with a moving rectangle and a keyframe animation, in the sample file svg/first-svg-animation.svg. Here is the animation itself. To see the growing trees, you might have to reload this page or view the image in a separate window:</p> <p> </p> <p>You can create animated objects in the <code>&lt;defs&gt;</code> section of an SVG file, and you can apply animation to <code>&lt;use&gt;</code> elements. This makes it possible to create hierarchical animations. Here is a simple example:</p> <p> </p> <p>The example shows a rotating hexagon with a rotating square at each vertex of the hexagon. The hexagon is constructed from six copies of one object, with a different rotation applied to each copy. (A copy of the basic object is shown in the image to the right of the hexagon.) The square is defined as an animated object with its own rotation. It is used as a sub-object in the hexagon. The rotation that is applied to the hexagon applies to the square, on top of its own built-in rotation. That's what makes this an example of hierarchical animation.</p> <p>If you look back at the cart-and-windmills example now, you can probably see how to do the animation. Don't forget to check out the source code, which is surprisingly short!</p>"}]}